<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/archive/zip/struct.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./struct.go?s=9480:9524#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/archive">archive</a>/<a href="http://localhost:8080/src/archive/zip">zip</a>/<span class="text-muted">struct.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/archive/zip">archive/zip</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package zip provides support for reading and writing ZIP archives.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>See the [ZIP specification] for details.
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>This package does not support disk spanning.
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>A note about ZIP64:
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>To be backwards compatible the FileHeader has both 32 and 64 bit Size
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>fields. The 64 bit fields will always contain the correct value and
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>for normal archives both fields will be the same. For files requiring
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>the ZIP64 format the 32 bit fields will be 0xffffffff and the 64 bit
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>fields must be used instead.
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>[ZIP specification]: https://support.pkware.com/pkzip/appnote
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>*/</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>package zip
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>import (
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Compression methods.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>const (
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Store   uint16 = 0 <span class="comment">// no compression</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Deflate uint16 = 8 <span class="comment">// DEFLATE compressed</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>const (
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	fileHeaderSignature      = 0x04034b50
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	directoryHeaderSignature = 0x02014b50
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	directoryEndSignature    = 0x06054b50
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	directory64LocSignature  = 0x07064b50
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	directory64EndSignature  = 0x06064b50
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	dataDescriptorSignature  = 0x08074b50 <span class="comment">// de-facto standard; required by OS X Finder</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	fileHeaderLen            = 30         <span class="comment">// + filename + extra</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	directoryHeaderLen       = 46         <span class="comment">// + filename + extra + comment</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	directoryEndLen          = 22         <span class="comment">// + comment</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	dataDescriptorLen        = 16         <span class="comment">// four uint32: descriptor signature, crc32, compressed size, size</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	dataDescriptor64Len      = 24         <span class="comment">// two uint32: signature, crc32 | two uint64: compressed size, size</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	directory64LocLen        = 20         <span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	directory64EndLen        = 56         <span class="comment">// + extra</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// Constants for the first byte in CreatorVersion.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	creatorFAT    = 0
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	creatorUnix   = 3
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	creatorNTFS   = 11
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	creatorVFAT   = 14
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	creatorMacOSX = 19
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// Version numbers.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	zipVersion20 = 20 <span class="comment">// 2.0</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	zipVersion45 = 45 <span class="comment">// 4.5 (reads and writes zip64 archives)</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// Limits for non zip64 files.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	uint16max = (1 &lt;&lt; 16) - 1
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	uint32max = (1 &lt;&lt; 32) - 1
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// Extra header IDs.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// IDs 0..31 are reserved for official use by PKWARE.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// IDs above that range are defined by third-party vendors.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// Since ZIP lacked high precision timestamps (nor an official specification</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// of the timezone used for the date fields), many competing extra fields</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// have been invented. Pervasive use effectively makes them &#34;official&#34;.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// See http://mdfs.net/Docs/Comp/Archiving/Zip/ExtraField</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	zip64ExtraID       = 0x0001 <span class="comment">// Zip64 extended information</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	ntfsExtraID        = 0x000a <span class="comment">// NTFS</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	unixExtraID        = 0x000d <span class="comment">// UNIX</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	extTimeExtraID     = 0x5455 <span class="comment">// Extended timestamp</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	infoZipUnixExtraID = 0x5855 <span class="comment">// Info-ZIP Unix extension</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// FileHeader describes a file within a ZIP file.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// See the [ZIP specification] for details.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// [ZIP specification]: https://support.pkware.com/pkzip/appnote</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>type FileHeader struct {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// Name is the name of the file.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// It must be a relative path, not start with a drive letter (such as &#34;C:&#34;),</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// and must use forward slashes instead of back slashes. A trailing slash</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// indicates that this file is a directory and should have no data.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	Name string
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// Comment is any arbitrary user-defined string shorter than 64KiB.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	Comment string
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// NonUTF8 indicates that Name and Comment are not encoded in UTF-8.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// By specification, the only other encoding permitted should be CP-437,</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// but historically many ZIP readers interpret Name and Comment as whatever</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// the system&#39;s local character encoding happens to be.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// This flag should only be set if the user intends to encode a non-portable</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// ZIP file for a specific localized region. Otherwise, the Writer</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// automatically sets the ZIP format&#39;s UTF-8 flag for valid UTF-8 strings.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	NonUTF8 bool
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	CreatorVersion uint16
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	ReaderVersion  uint16
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	Flags          uint16
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Method is the compression method. If zero, Store is used.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	Method uint16
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// Modified is the modified time of the file.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// When reading, an extended timestamp is preferred over the legacy MS-DOS</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// date field, and the offset between the times is used as the timezone.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// If only the MS-DOS date is present, the timezone is assumed to be UTC.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// When writing, an extended timestamp (which is timezone-agnostic) is</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// always emitted. The legacy MS-DOS date field is encoded according to the</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// location of the Modified time.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	Modified time.Time
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// ModifiedTime is an MS-DOS-encoded time.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use Modified instead.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	ModifiedTime uint16
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// ModifiedDate is an MS-DOS-encoded date.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use Modified instead.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	ModifiedDate uint16
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// CRC32 is the CRC32 checksum of the file content.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	CRC32 uint32
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// CompressedSize is the compressed size of the file in bytes.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// If either the uncompressed or compressed size of the file</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// does not fit in 32 bits, CompressedSize is set to ^uint32(0).</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use CompressedSize64 instead.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	CompressedSize uint32
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// UncompressedSize is the compressed size of the file in bytes.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// If either the uncompressed or compressed size of the file</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// does not fit in 32 bits, CompressedSize is set to ^uint32(0).</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use UncompressedSize64 instead.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	UncompressedSize uint32
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// CompressedSize64 is the compressed size of the file in bytes.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	CompressedSize64 uint64
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// UncompressedSize64 is the uncompressed size of the file in bytes.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	UncompressedSize64 uint64
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	Extra         []byte
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	ExternalAttrs uint32 <span class="comment">// Meaning depends on CreatorVersion</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// FileInfo returns an fs.FileInfo for the [FileHeader].</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (h *FileHeader) FileInfo() fs.FileInfo {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return headerFileInfo{h}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// headerFileInfo implements [fs.FileInfo].</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>type headerFileInfo struct {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	fh *FileHeader
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (fi headerFileInfo) Name() string { return path.Base(fi.fh.Name) }
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func (fi headerFileInfo) Size() int64 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if fi.fh.UncompressedSize64 &gt; 0 {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return int64(fi.fh.UncompressedSize64)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	return int64(fi.fh.UncompressedSize)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (fi headerFileInfo) IsDir() bool { return fi.Mode().IsDir() }
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func (fi headerFileInfo) ModTime() time.Time {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if fi.fh.Modified.IsZero() {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return fi.fh.ModTime()
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return fi.fh.Modified.UTC()
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func (fi headerFileInfo) Mode() fs.FileMode { return fi.fh.Mode() }
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (fi headerFileInfo) Type() fs.FileMode { return fi.fh.Mode().Type() }
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (fi headerFileInfo) Sys() any          { return fi.fh }
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (fi headerFileInfo) Info() (fs.FileInfo, error) { return fi, nil }
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func (fi headerFileInfo) String() string {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return fs.FormatFileInfo(fi)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// FileInfoHeader creates a partially-populated [FileHeader] from an</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// fs.FileInfo.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// Because fs.FileInfo&#39;s Name method returns only the base name of</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// the file it describes, it may be necessary to modify the Name field</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// of the returned header to provide the full path name of the file.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// If compression is desired, callers should set the FileHeader.Method</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// field; it is unset by default.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func FileInfoHeader(fi fs.FileInfo) (*FileHeader, error) {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	size := fi.Size()
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	fh := &amp;FileHeader{
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		Name:               fi.Name(),
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		UncompressedSize64: uint64(size),
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	fh.SetModTime(fi.ModTime())
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	fh.SetMode(fi.Mode())
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if fh.UncompressedSize64 &gt; uint32max {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		fh.UncompressedSize = uint32max
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	} else {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		fh.UncompressedSize = uint32(fh.UncompressedSize64)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return fh, nil
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>type directoryEnd struct {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	diskNbr            uint32 <span class="comment">// unused</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	dirDiskNbr         uint32 <span class="comment">// unused</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	dirRecordsThisDisk uint64 <span class="comment">// unused</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	directoryRecords   uint64
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	directorySize      uint64
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	directoryOffset    uint64 <span class="comment">// relative to file</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	commentLen         uint16
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	comment            string
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// timeZone returns a *time.Location based on the provided offset.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// If the offset is non-sensible, then this uses an offset of zero.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func timeZone(offset time.Duration) *time.Location {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	const (
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		minOffset   = -12 * time.Hour  <span class="comment">// E.g., Baker island at -12:00</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		maxOffset   = +14 * time.Hour  <span class="comment">// E.g., Line island at +14:00</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		offsetAlias = 15 * time.Minute <span class="comment">// E.g., Nepal at +5:45</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	offset = offset.Round(offsetAlias)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if offset &lt; minOffset || maxOffset &lt; offset {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		offset = 0
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	return time.FixedZone(&#34;&#34;, int(offset/time.Second))
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// msDosTimeToTime converts an MS-DOS date and time into a time.Time.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// The resolution is 2s.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// See: https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-dosdatetimetofiletime</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func msDosTimeToTime(dosDate, dosTime uint16) time.Time {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	return time.Date(
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		<span class="comment">// date bits 0-4: day of month; 5-8: month; 9-15: years since 1980</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		int(dosDate&gt;&gt;9+1980),
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		time.Month(dosDate&gt;&gt;5&amp;0xf),
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		int(dosDate&amp;0x1f),
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		<span class="comment">// time bits 0-4: second/2; 5-10: minute; 11-15: hour</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		int(dosTime&gt;&gt;11),
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		int(dosTime&gt;&gt;5&amp;0x3f),
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		int(dosTime&amp;0x1f*2),
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		0, <span class="comment">// nanoseconds</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		time.UTC,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// timeToMsDosTime converts a time.Time to an MS-DOS date and time.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// The resolution is 2s.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// See: https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-filetimetodosdatetime</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func timeToMsDosTime(t time.Time) (fDate uint16, fTime uint16) {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	fDate = uint16(t.Day() + int(t.Month())&lt;&lt;5 + (t.Year()-1980)&lt;&lt;9)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	fTime = uint16(t.Second()/2 + t.Minute()&lt;&lt;5 + t.Hour()&lt;&lt;11)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// ModTime returns the modification time in UTC using the legacy</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// [ModifiedDate] and [ModifiedTime] fields.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [Modified] instead.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func (h *FileHeader) ModTime() time.Time {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	return msDosTimeToTime(h.ModifiedDate, h.ModifiedTime)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// SetModTime sets the [Modified], [ModifiedTime], and [ModifiedDate] fields</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// to the given time in UTC.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [Modified] instead.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="selection">func (h *FileHeader) SetModTime(t time.Time)</span> {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	t = t.UTC() <span class="comment">// Convert to UTC for compatibility</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	h.Modified = t
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	h.ModifiedDate, h.ModifiedTime = timeToMsDosTime(t)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>const (
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// Unix constants. The specification doesn&#39;t mention them,</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// but these seem to be the values agreed on by tools.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	s_IFMT   = 0xf000
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	s_IFSOCK = 0xc000
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	s_IFLNK  = 0xa000
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	s_IFREG  = 0x8000
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	s_IFBLK  = 0x6000
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	s_IFDIR  = 0x4000
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	s_IFCHR  = 0x2000
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	s_IFIFO  = 0x1000
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	s_ISUID  = 0x800
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	s_ISGID  = 0x400
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	s_ISVTX  = 0x200
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	msdosDir      = 0x10
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	msdosReadOnly = 0x01
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// Mode returns the permission and mode bits for the [FileHeader].</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func (h *FileHeader) Mode() (mode fs.FileMode) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	switch h.CreatorVersion &gt;&gt; 8 {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	case creatorUnix, creatorMacOSX:
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		mode = unixModeToFileMode(h.ExternalAttrs &gt;&gt; 16)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	case creatorNTFS, creatorVFAT, creatorFAT:
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		mode = msdosModeToFileMode(h.ExternalAttrs)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	if len(h.Name) &gt; 0 &amp;&amp; h.Name[len(h.Name)-1] == &#39;/&#39; {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		mode |= fs.ModeDir
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	return mode
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// SetMode changes the permission and mode bits for the [FileHeader].</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>func (h *FileHeader) SetMode(mode fs.FileMode) {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	h.CreatorVersion = h.CreatorVersion&amp;0xff | creatorUnix&lt;&lt;8
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	h.ExternalAttrs = fileModeToUnixMode(mode) &lt;&lt; 16
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// set MSDOS attributes too, as the original zip does.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	if mode&amp;fs.ModeDir != 0 {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		h.ExternalAttrs |= msdosDir
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	if mode&amp;0200 == 0 {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		h.ExternalAttrs |= msdosReadOnly
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// isZip64 reports whether the file size exceeds the 32 bit limit</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>func (h *FileHeader) isZip64() bool {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	return h.CompressedSize64 &gt;= uint32max || h.UncompressedSize64 &gt;= uint32max
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>func (h *FileHeader) hasDataDescriptor() bool {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return h.Flags&amp;0x8 != 0
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func msdosModeToFileMode(m uint32) (mode fs.FileMode) {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	if m&amp;msdosDir != 0 {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		mode = fs.ModeDir | 0777
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	} else {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		mode = 0666
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if m&amp;msdosReadOnly != 0 {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		mode &amp;^= 0222
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	return mode
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func fileModeToUnixMode(mode fs.FileMode) uint32 {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	var m uint32
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	switch mode &amp; fs.ModeType {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	default:
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		m = s_IFREG
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	case fs.ModeDir:
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		m = s_IFDIR
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	case fs.ModeSymlink:
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		m = s_IFLNK
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	case fs.ModeNamedPipe:
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		m = s_IFIFO
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	case fs.ModeSocket:
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		m = s_IFSOCK
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	case fs.ModeDevice:
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		m = s_IFBLK
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	case fs.ModeDevice | fs.ModeCharDevice:
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		m = s_IFCHR
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	if mode&amp;fs.ModeSetuid != 0 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		m |= s_ISUID
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if mode&amp;fs.ModeSetgid != 0 {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		m |= s_ISGID
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if mode&amp;fs.ModeSticky != 0 {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		m |= s_ISVTX
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	return m | uint32(mode&amp;0777)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>func unixModeToFileMode(m uint32) fs.FileMode {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	mode := fs.FileMode(m &amp; 0777)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	switch m &amp; s_IFMT {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	case s_IFBLK:
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		mode |= fs.ModeDevice
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	case s_IFCHR:
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		mode |= fs.ModeDevice | fs.ModeCharDevice
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	case s_IFDIR:
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		mode |= fs.ModeDir
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	case s_IFIFO:
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		mode |= fs.ModeNamedPipe
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	case s_IFLNK:
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		mode |= fs.ModeSymlink
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	case s_IFREG:
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	case s_IFSOCK:
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		mode |= fs.ModeSocket
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if m&amp;s_ISGID != 0 {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		mode |= fs.ModeSetgid
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	if m&amp;s_ISUID != 0 {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		mode |= fs.ModeSetuid
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	if m&amp;s_ISVTX != 0 {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		mode |= fs.ModeSticky
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	return mode
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
</pre><p><a href="struct.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
