<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/archive/zip/writer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./writer.go?s=6827:6882#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/archive">archive</a>/<a href="http://localhost:8080/src/archive/zip">zip</a>/<span class="text-muted">writer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/archive/zip">archive/zip</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package zip
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;hash&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;hash/crc32&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>var (
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	errLongName  = errors.New(&#34;zip: FileHeader.Name too long&#34;)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	errLongExtra = errors.New(&#34;zip: FileHeader.Extra too long&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Writer implements a zip file writer.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>type Writer struct {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	cw          *countWriter
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	dir         []*header
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	last        *fileWriter
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	closed      bool
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	compressors map[uint16]Compressor
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	comment     string
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// testHookCloseSizeOffset if non-nil is called with the size</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// of offset of the central directory at Close.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	testHookCloseSizeOffset func(size, offset uint64)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type header struct {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	*FileHeader
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	offset uint64
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	raw    bool
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// NewWriter returns a new [Writer] writing a zip file to w.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func NewWriter(w io.Writer) *Writer {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	return &amp;Writer{cw: &amp;countWriter{w: bufio.NewWriter(w)}}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// SetOffset sets the offset of the beginning of the zip data within the</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// underlying writer. It should be used when the zip data is appended to an</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// existing file, such as a binary executable.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// It must be called before any data is written.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (w *Writer) SetOffset(n int64) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	if w.cw.count != 0 {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		panic(&#34;zip: SetOffset called after data was written&#34;)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	w.cw.count = n
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// Flush flushes any buffered data to the underlying writer.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Calling Flush is not normally necessary; calling Close is sufficient.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func (w *Writer) Flush() error {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	return w.cw.w.(*bufio.Writer).Flush()
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// SetComment sets the end-of-central-directory comment field.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// It can only be called before [Writer.Close].</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func (w *Writer) SetComment(comment string) error {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	if len(comment) &gt; uint16max {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		return errors.New(&#34;zip: Writer.Comment too long&#34;)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	w.comment = comment
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return nil
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Close finishes writing the zip file by writing the central directory.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// It does not close the underlying writer.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func (w *Writer) Close() error {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if w.last != nil &amp;&amp; !w.last.closed {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		if err := w.last.close(); err != nil {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			return err
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		w.last = nil
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	if w.closed {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		return errors.New(&#34;zip: writer closed twice&#34;)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	w.closed = true
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// write central directory</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	start := w.cw.count
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	for _, h := range w.dir {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		var buf [directoryHeaderLen]byte
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		b := writeBuf(buf[:])
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		b.uint32(uint32(directoryHeaderSignature))
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		b.uint16(h.CreatorVersion)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		b.uint16(h.ReaderVersion)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		b.uint16(h.Flags)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		b.uint16(h.Method)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		b.uint16(h.ModifiedTime)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		b.uint16(h.ModifiedDate)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		b.uint32(h.CRC32)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		if h.isZip64() || h.offset &gt;= uint32max {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			<span class="comment">// the file needs a zip64 header. store maxint in both</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			<span class="comment">// 32 bit size fields (and offset later) to signal that the</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			<span class="comment">// zip64 extra header should be used.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			b.uint32(uint32max) <span class="comment">// compressed size</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			b.uint32(uint32max) <span class="comment">// uncompressed size</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			<span class="comment">// append a zip64 extra block to Extra</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			var buf [28]byte <span class="comment">// 2x uint16 + 3x uint64</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			eb := writeBuf(buf[:])
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			eb.uint16(zip64ExtraID)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			eb.uint16(24) <span class="comment">// size = 3x uint64</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			eb.uint64(h.UncompressedSize64)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			eb.uint64(h.CompressedSize64)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			eb.uint64(h.offset)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			h.Extra = append(h.Extra, buf[:]...)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		} else {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			b.uint32(h.CompressedSize)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			b.uint32(h.UncompressedSize)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		b.uint16(uint16(len(h.Name)))
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		b.uint16(uint16(len(h.Extra)))
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		b.uint16(uint16(len(h.Comment)))
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		b = b[4:] <span class="comment">// skip disk number start and internal file attr (2x uint16)</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		b.uint32(h.ExternalAttrs)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		if h.offset &gt; uint32max {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			b.uint32(uint32max)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		} else {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			b.uint32(uint32(h.offset))
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		if _, err := w.cw.Write(buf[:]); err != nil {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			return err
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		if _, err := io.WriteString(w.cw, h.Name); err != nil {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			return err
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		if _, err := w.cw.Write(h.Extra); err != nil {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			return err
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		if _, err := io.WriteString(w.cw, h.Comment); err != nil {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			return err
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	end := w.cw.count
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	records := uint64(len(w.dir))
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	size := uint64(end - start)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	offset := uint64(start)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if f := w.testHookCloseSizeOffset; f != nil {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		f(size, offset)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	if records &gt;= uint16max || size &gt;= uint32max || offset &gt;= uint32max {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		var buf [directory64EndLen + directory64LocLen]byte
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		b := writeBuf(buf[:])
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		<span class="comment">// zip64 end of central directory record</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		b.uint32(directory64EndSignature)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		b.uint64(directory64EndLen - 12) <span class="comment">// length minus signature (uint32) and length fields (uint64)</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		b.uint16(zipVersion45)           <span class="comment">// version made by</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		b.uint16(zipVersion45)           <span class="comment">// version needed to extract</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		b.uint32(0)                      <span class="comment">// number of this disk</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		b.uint32(0)                      <span class="comment">// number of the disk with the start of the central directory</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		b.uint64(records)                <span class="comment">// total number of entries in the central directory on this disk</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		b.uint64(records)                <span class="comment">// total number of entries in the central directory</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		b.uint64(size)                   <span class="comment">// size of the central directory</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		b.uint64(offset)                 <span class="comment">// offset of start of central directory with respect to the starting disk number</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// zip64 end of central directory locator</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		b.uint32(directory64LocSignature)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		b.uint32(0)           <span class="comment">// number of the disk with the start of the zip64 end of central directory</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		b.uint64(uint64(end)) <span class="comment">// relative offset of the zip64 end of central directory record</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		b.uint32(1)           <span class="comment">// total number of disks</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		if _, err := w.cw.Write(buf[:]); err != nil {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			return err
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		<span class="comment">// store max values in the regular end record to signal</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		<span class="comment">// that the zip64 values should be used instead</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		records = uint16max
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		size = uint32max
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		offset = uint32max
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// write end record</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	var buf [directoryEndLen]byte
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	b := writeBuf(buf[:])
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	b.uint32(uint32(directoryEndSignature))
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	b = b[4:]                        <span class="comment">// skip over disk number and first disk number (2x uint16)</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	b.uint16(uint16(records))        <span class="comment">// number of entries this disk</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	b.uint16(uint16(records))        <span class="comment">// number of entries total</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	b.uint32(uint32(size))           <span class="comment">// size of directory</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	b.uint32(uint32(offset))         <span class="comment">// start of directory</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	b.uint16(uint16(len(w.comment))) <span class="comment">// byte size of EOCD comment</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if _, err := w.cw.Write(buf[:]); err != nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return err
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if _, err := io.WriteString(w.cw, w.comment); err != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return err
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return w.cw.w.(*bufio.Writer).Flush()
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// Create adds a file to the zip file using the provided name.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// It returns a [Writer] to which the file contents should be written.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// The file contents will be compressed using the [Deflate] method.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// The name must be a relative path: it must not start with a drive</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// letter (e.g. C:) or leading slash, and only forward slashes are</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// allowed. To create a directory instead of a file, add a trailing</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// slash to the name.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// The file&#39;s contents must be written to the [io.Writer] before the next</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// call to [Writer.Create], [Writer.CreateHeader], or [Writer.Close].</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="selection">func (w *Writer) Create(name string) (io.Writer, error)</span> {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	header := &amp;FileHeader{
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		Name:   name,
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		Method: Deflate,
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return w.CreateHeader(header)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// detectUTF8 reports whether s is a valid UTF-8 string, and whether the string</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// must be considered UTF-8 encoding (i.e., not compatible with CP-437, ASCII,</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// or any other common encoding).</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func detectUTF8(s string) (valid, require bool) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		r, size := utf8.DecodeRuneInString(s[i:])
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		i += size
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		<span class="comment">// Officially, ZIP uses CP-437, but many readers use the system&#39;s</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		<span class="comment">// local character encoding. Most encoding are compatible with a large</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		<span class="comment">// subset of CP-437, which itself is ASCII-like.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// Forbid 0x7e and 0x5c since EUC-KR and Shift-JIS replace those</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		<span class="comment">// characters with localized currency and overline characters.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if r &lt; 0x20 || r &gt; 0x7d || r == 0x5c {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			if !utf8.ValidRune(r) || (r == utf8.RuneError &amp;&amp; size == 1) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				return false, false
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			require = true
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return true, require
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// prepare performs the bookkeeping operations required at the start of</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// CreateHeader and CreateRaw.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>func (w *Writer) prepare(fh *FileHeader) error {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	if w.last != nil &amp;&amp; !w.last.closed {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		if err := w.last.close(); err != nil {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			return err
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if len(w.dir) &gt; 0 &amp;&amp; w.dir[len(w.dir)-1].FileHeader == fh {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		<span class="comment">// See https://golang.org/issue/11144 confusion.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		return errors.New(&#34;archive/zip: invalid duplicate FileHeader&#34;)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return nil
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// CreateHeader adds a file to the zip archive using the provided [FileHeader]</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// for the file metadata. [Writer] takes ownership of fh and may mutate</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// its fields. The caller must not modify fh after calling [Writer.CreateHeader].</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// This returns a [Writer] to which the file contents should be written.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// The file&#39;s contents must be written to the io.Writer before the next</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// call to [Writer.Create], [Writer.CreateHeader], [Writer.CreateRaw], or [Writer.Close].</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if err := w.prepare(fh); err != nil {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return nil, err
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// The ZIP format has a sad state of affairs regarding character encoding.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// Officially, the name and comment fields are supposed to be encoded</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// in CP-437 (which is mostly compatible with ASCII), unless the UTF-8</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// flag bit is set. However, there are several problems:</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">//	* Many ZIP readers still do not support UTF-8.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">//	* If the UTF-8 flag is cleared, several readers simply interpret the</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">//	name and comment fields as whatever the local system encoding is.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// In order to avoid breaking readers without UTF-8 support,</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// we avoid setting the UTF-8 flag if the strings are CP-437 compatible.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// However, if the strings require multibyte UTF-8 encoding and is a</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// valid UTF-8 string, then we set the UTF-8 bit.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// For the case, where the user explicitly wants to specify the encoding</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// as UTF-8, they will need to set the flag bit themselves.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	utf8Valid1, utf8Require1 := detectUTF8(fh.Name)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	utf8Valid2, utf8Require2 := detectUTF8(fh.Comment)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	switch {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	case fh.NonUTF8:
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		fh.Flags &amp;^= 0x800
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	case (utf8Require1 || utf8Require2) &amp;&amp; (utf8Valid1 &amp;&amp; utf8Valid2):
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		fh.Flags |= 0x800
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	fh.CreatorVersion = fh.CreatorVersion&amp;0xff00 | zipVersion20 <span class="comment">// preserve compatibility byte</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	fh.ReaderVersion = zipVersion20
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// If Modified is set, this takes precedence over MS-DOS timestamp fields.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	if !fh.Modified.IsZero() {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		<span class="comment">// Contrary to the FileHeader.SetModTime method, we intentionally</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		<span class="comment">// do not convert to UTC, because we assume the user intends to encode</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		<span class="comment">// the date using the specified timezone. A user may want this control</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		<span class="comment">// because many legacy ZIP readers interpret the timestamp according</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		<span class="comment">// to the local timezone.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		<span class="comment">// The timezone is only non-UTC if a user directly sets the Modified</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		<span class="comment">// field directly themselves. All other approaches sets UTC.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		fh.ModifiedDate, fh.ModifiedTime = timeToMsDosTime(fh.Modified)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// Use &#34;extended timestamp&#34; format since this is what Info-ZIP uses.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		<span class="comment">// Nearly every major ZIP implementation uses a different format,</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		<span class="comment">// but at least most seem to be able to understand the other formats.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		<span class="comment">// This format happens to be identical for both local and central header</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// if modification time is the only timestamp being encoded.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		var mbuf [9]byte <span class="comment">// 2*SizeOf(uint16) + SizeOf(uint8) + SizeOf(uint32)</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		mt := uint32(fh.Modified.Unix())
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		eb := writeBuf(mbuf[:])
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		eb.uint16(extTimeExtraID)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		eb.uint16(5)  <span class="comment">// Size: SizeOf(uint8) + SizeOf(uint32)</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		eb.uint8(1)   <span class="comment">// Flags: ModTime</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		eb.uint32(mt) <span class="comment">// ModTime</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		fh.Extra = append(fh.Extra, mbuf[:]...)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	var (
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		ow io.Writer
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		fw *fileWriter
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	h := &amp;header{
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		FileHeader: fh,
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		offset:     uint64(w.cw.count),
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if strings.HasSuffix(fh.Name, &#34;/&#34;) {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		<span class="comment">// Set the compression method to Store to ensure data length is truly zero,</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		<span class="comment">// which the writeHeader method always encodes for the size fields.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		<span class="comment">// This is necessary as most compression formats have non-zero lengths</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		<span class="comment">// even when compressing an empty string.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		fh.Method = Store
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		fh.Flags &amp;^= 0x8 <span class="comment">// we will not write a data descriptor</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		<span class="comment">// Explicitly clear sizes as they have no meaning for directories.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		fh.CompressedSize = 0
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		fh.CompressedSize64 = 0
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		fh.UncompressedSize = 0
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		fh.UncompressedSize64 = 0
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		ow = dirWriter{}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	} else {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		fh.Flags |= 0x8 <span class="comment">// we will write a data descriptor</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		fw = &amp;fileWriter{
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			zipw:      w.cw,
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			compCount: &amp;countWriter{w: w.cw},
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			crc32:     crc32.NewIEEE(),
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		comp := w.compressor(fh.Method)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		if comp == nil {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			return nil, ErrAlgorithm
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		var err error
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		fw.comp, err = comp(fw.compCount)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		if err != nil {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			return nil, err
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		fw.rawCount = &amp;countWriter{w: fw.comp}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		fw.header = h
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		ow = fw
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	w.dir = append(w.dir, h)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	if err := writeHeader(w.cw, h); err != nil {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		return nil, err
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re creating a directory, fw is nil.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	w.last = fw
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	return ow, nil
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>func writeHeader(w io.Writer, h *header) error {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	const maxUint16 = 1&lt;&lt;16 - 1
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	if len(h.Name) &gt; maxUint16 {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		return errLongName
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	if len(h.Extra) &gt; maxUint16 {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		return errLongExtra
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	var buf [fileHeaderLen]byte
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	b := writeBuf(buf[:])
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	b.uint32(uint32(fileHeaderSignature))
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	b.uint16(h.ReaderVersion)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	b.uint16(h.Flags)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	b.uint16(h.Method)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	b.uint16(h.ModifiedTime)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	b.uint16(h.ModifiedDate)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// In raw mode (caller does the compression), the values are either</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// written here or in the trailing data descriptor based on the header</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// flags.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if h.raw &amp;&amp; !h.hasDataDescriptor() {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		b.uint32(h.CRC32)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		b.uint32(uint32(min(h.CompressedSize64, uint32max)))
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		b.uint32(uint32(min(h.UncompressedSize64, uint32max)))
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	} else {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		<span class="comment">// When this package handle the compression, these values are</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		<span class="comment">// always written to the trailing data descriptor.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		b.uint32(0) <span class="comment">// crc32</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		b.uint32(0) <span class="comment">// compressed size</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		b.uint32(0) <span class="comment">// uncompressed size</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	b.uint16(uint16(len(h.Name)))
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	b.uint16(uint16(len(h.Extra)))
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if _, err := w.Write(buf[:]); err != nil {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return err
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	if _, err := io.WriteString(w, h.Name); err != nil {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		return err
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	_, err := w.Write(h.Extra)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	return err
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// CreateRaw adds a file to the zip archive using the provided [FileHeader] and</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">// returns a [Writer] to which the file contents should be written. The file&#39;s</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// contents must be written to the io.Writer before the next call to [Writer.Create],</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// [Writer.CreateHeader], [Writer.CreateRaw], or [Writer.Close].</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">// In contrast to [Writer.CreateHeader], the bytes passed to Writer are not compressed.</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>func (w *Writer) CreateRaw(fh *FileHeader) (io.Writer, error) {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	if err := w.prepare(fh); err != nil {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		return nil, err
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	fh.CompressedSize = uint32(min(fh.CompressedSize64, uint32max))
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	fh.UncompressedSize = uint32(min(fh.UncompressedSize64, uint32max))
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	h := &amp;header{
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		FileHeader: fh,
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		offset:     uint64(w.cw.count),
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		raw:        true,
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	w.dir = append(w.dir, h)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	if err := writeHeader(w.cw, h); err != nil {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		return nil, err
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if strings.HasSuffix(fh.Name, &#34;/&#34;) {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		w.last = nil
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return dirWriter{}, nil
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	fw := &amp;fileWriter{
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		header: h,
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		zipw:   w.cw,
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	w.last = fw
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	return fw, nil
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">// Copy copies the file f (obtained from a [Reader]) into w. It copies the raw</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// form directly bypassing decompression, compression, and validation.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>func (w *Writer) Copy(f *File) error {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	r, err := f.OpenRaw()
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	if err != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		return err
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	fw, err := w.CreateRaw(&amp;f.FileHeader)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if err != nil {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		return err
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	_, err = io.Copy(fw, r)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	return err
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// RegisterCompressor registers or overrides a custom compressor for a specific</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// method ID. If a compressor for a given method is not found, [Writer] will</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// default to looking up the compressor at the package level.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func (w *Writer) RegisterCompressor(method uint16, comp Compressor) {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if w.compressors == nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		w.compressors = make(map[uint16]Compressor)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	w.compressors[method] = comp
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// AddFS adds the files from fs.FS to the archive.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// It walks the directory tree starting at the root of the filesystem</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// adding each file to the zip using deflate while maintaining the directory structure.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (w *Writer) AddFS(fsys fs.FS) error {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return fs.WalkDir(fsys, &#34;.&#34;, func(name string, d fs.DirEntry, err error) error {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		if err != nil {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			return err
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if d.IsDir() {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			return nil
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		info, err := d.Info()
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		if err != nil {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>			return err
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		if !info.Mode().IsRegular() {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			return errors.New(&#34;zip: cannot add non-regular file&#34;)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		h, err := FileInfoHeader(info)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		if err != nil {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			return err
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		h.Name = name
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		h.Method = Deflate
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		fw, err := w.CreateHeader(h)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		if err != nil {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			return err
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		f, err := fsys.Open(name)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		if err != nil {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			return err
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		defer f.Close()
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		_, err = io.Copy(fw, f)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		return err
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	})
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>func (w *Writer) compressor(method uint16) Compressor {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	comp := w.compressors[method]
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	if comp == nil {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		comp = compressor(method)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return comp
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>type dirWriter struct{}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>func (dirWriter) Write(b []byte) (int, error) {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		return 0, nil
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	return 0, errors.New(&#34;zip: write to directory&#34;)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>type fileWriter struct {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	*header
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	zipw      io.Writer
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	rawCount  *countWriter
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	comp      io.WriteCloser
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	compCount *countWriter
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	crc32     hash.Hash32
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	closed    bool
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>func (w *fileWriter) Write(p []byte) (int, error) {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	if w.closed {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		return 0, errors.New(&#34;zip: write to closed file&#34;)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	if w.raw {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		return w.zipw.Write(p)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	w.crc32.Write(p)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	return w.rawCount.Write(p)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>func (w *fileWriter) close() error {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	if w.closed {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		return errors.New(&#34;zip: file closed twice&#34;)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	w.closed = true
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	if w.raw {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		return w.writeDataDescriptor()
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	if err := w.comp.Close(); err != nil {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		return err
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	<span class="comment">// update FileHeader</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	fh := w.header.FileHeader
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	fh.CRC32 = w.crc32.Sum32()
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	fh.CompressedSize64 = uint64(w.compCount.count)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	fh.UncompressedSize64 = uint64(w.rawCount.count)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	if fh.isZip64() {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		fh.CompressedSize = uint32max
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		fh.UncompressedSize = uint32max
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		fh.ReaderVersion = zipVersion45 <span class="comment">// requires 4.5 - File uses ZIP64 format extensions</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	} else {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		fh.CompressedSize = uint32(fh.CompressedSize64)
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		fh.UncompressedSize = uint32(fh.UncompressedSize64)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	return w.writeDataDescriptor()
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>func (w *fileWriter) writeDataDescriptor() error {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if !w.hasDataDescriptor() {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		return nil
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// Write data descriptor. This is more complicated than one would</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// think, see e.g. comments in zipfile.c:putextended() and</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7073588.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	<span class="comment">// The approach here is to write 8 byte sizes if needed without</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	<span class="comment">// adding a zip64 extra in the local header (too late anyway).</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	var buf []byte
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	if w.isZip64() {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		buf = make([]byte, dataDescriptor64Len)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	} else {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		buf = make([]byte, dataDescriptorLen)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	b := writeBuf(buf)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	b.uint32(dataDescriptorSignature) <span class="comment">// de-facto standard, required by OS X</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	b.uint32(w.CRC32)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	if w.isZip64() {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		b.uint64(w.CompressedSize64)
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		b.uint64(w.UncompressedSize64)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	} else {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		b.uint32(w.CompressedSize)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		b.uint32(w.UncompressedSize)
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	_, err := w.zipw.Write(buf)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	return err
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>type countWriter struct {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	w     io.Writer
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	count int64
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>func (w *countWriter) Write(p []byte) (int, error) {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	n, err := w.w.Write(p)
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	w.count += int64(n)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	return n, err
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>type nopCloser struct {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	io.Writer
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>func (w nopCloser) Close() error {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	return nil
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>type writeBuf []byte
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>func (b *writeBuf) uint8(v uint8) {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	(*b)[0] = v
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	*b = (*b)[1:]
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>func (b *writeBuf) uint16(v uint16) {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	binary.LittleEndian.PutUint16(*b, v)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	*b = (*b)[2:]
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>func (b *writeBuf) uint32(v uint32) {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	binary.LittleEndian.PutUint32(*b, v)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	*b = (*b)[4:]
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>func (b *writeBuf) uint64(v uint64) {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	binary.LittleEndian.PutUint64(*b, v)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	*b = (*b)[8:]
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
</pre><p><a href="writer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
