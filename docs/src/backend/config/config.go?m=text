// This Package is responsible for providing sensitive data crucial for the application in order to work properly.
//
// All of the data is gathered from .env file located one directory above.
package config

import (
	"log"
	"os"
	"strconv"

	"github.com/joho/godotenv"
)

// Port on which the backend operates.
var Port string

// Address of the front-end application.
var FrontAddr string

// Time which users have to verify their accounts, through email, after registration.
var EmailVerTime int

// Time which users have for changing their password after a successful request.
var PasswdChangeTime int

// Secret used for the generation of JWT Tokens.
var JwtSecret string

// Time after which the access token expires.
var JwtAccExpTime int

// Time after which the refresh token expires.
var JwtRefExpTime int

// User through which the database connection is conducted.
var DbUser string

// Password of the mysql user.
var DbPass string

// Network protocol used for connecting to the database.
var DbNet string

// Host of the mysql server.
var DbHost string

// Port of the mysql server.
var DbPort string

// Name of he database where all the server data is stored.
var DbName string

// Interval of the database clean-up procedure.
var DbCleanumInt int

// The Address from which e-mails are sent.
var SmtpFrom string

// User of the SMTP server through which e-mails are sent.
var SmtpUser string

// Password of the SMTP server's user.
var SmtpPass string

// Host of the SMTP server.
var SmtpHost string

// Port of the SMTP server.
var SmtpPort string

// InitConfig initializes all of the data required in order for the application to function properly. It collects the information from a .env file situated one directory above.
func InitConfig() {
	if err := godotenv.Load(); err != nil {
		log.Fatal(err.Error())
		return
	}

	Port = getEnv("APP_PORT")
	FrontAddr = getEnv("APP_FRONT_ADDR")
	EmailVerTime = getEnvInt("APP_EMAIL_VER_TIME")
	PasswdChangeTime = getEnvInt("APP_PASSWD_VER_TIME")
	JwtSecret = getEnv("APP_JWT_SECRET")
	JwtAccExpTime = getEnvInt("APP_JWT_ACCESS_EXP_TIME")
	JwtRefExpTime = getEnvInt("APP_JWT_REFRESH_EXP_TIME")
	DbUser = getEnv("DB_USER")
	DbPass = getEnv("DB_PASSWD")
	DbNet = getEnv("DB_NET")
	DbHost = getEnv("DB_HOST")
	DbPort = getEnv("DB_PORT")
	DbName = getEnv("DB_DBNAME")
	DbCleanumInt = getEnvInt("DB_CLEANUP_INTERVAL")
	SmtpFrom = getEnv("SMTP_FROM")
	SmtpUser = getEnv("SMTP_USER")
	SmtpPass = getEnv("SMTP_PASSWD")
	SmtpHost = getEnv("SMTP_HOST")
	SmtpPort = getEnv("SMTP_PORT")
}

func getEnv(key string) string {
	value := os.Getenv(key)

	if value == "" {
		log.Fatalf("error while trying to get the value of %v key from the .env file", key)
		return ""
	}

	return value
}

func getEnvInt(key string) int {
	value := os.Getenv(key)

	if value == "" {
		log.Fatalf("error while trying to get the value of %v key from the .env file", key)
		return -1
	}

	valueNumber, err := strconv.Atoi(value)
	if err != nil {
		log.Fatalf("error while trying to convert string value to number: %v", err)
		return -1
	}

	return valueNumber
}
