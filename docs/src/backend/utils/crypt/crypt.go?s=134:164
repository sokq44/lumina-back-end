<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/backend/utils/crypt/crypt.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./crypt.go?s=134:164#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/backend">backend</a>/<a href="http://localhost:8080/src/backend/utils">utils</a>/<a href="http://localhost:8080/src/backend/utils/crypt">crypt</a>/<span class="text-muted">crypt.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/backend/utils/crypt">backend/utils/crypt</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span>package crypt
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span>import (
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>	&#34;backend/utils/errhandle&#34;
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>	&#34;crypto/rand&#34;
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="selection">func Sha256(str string) string</span> {
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	hashValues := []uint32{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	bytes := []byte(str)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	padded := Pad(bytes)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	chunks := Chunks(padded)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	for _, chunk := range chunks {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>		ProcessChunk(chunk, &amp;hashValues)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	}
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	var output string
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	for _, h := range hashValues {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		output += fmt.Sprintf(&#34;%08x&#34;, h)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	return output
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>func Pad(bytes []byte) []byte {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	originalLen := len(bytes) * 8
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	bytes = append(bytes, 0x80)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	for (len(bytes)*8)%512 != 448 {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		bytes = append(bytes, 0x00)
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	lenBytes := make([]byte, 8)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	binary.BigEndian.PutUint64(lenBytes, uint64(originalLen))
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	bytes = append(bytes, lenBytes...)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	return bytes
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func Chunks(bytes []byte) [][]byte {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	newLen := int(math.Ceil(float64(len(bytes)) / 64))
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	chunks := make([][]byte, newLen)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	for i := 0; i &lt; newLen; i++ {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		start := i * 64
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		end := start + 64
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		if end &gt; len(bytes) {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>			end = len(bytes)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		chunks[i] = bytes[start:end]
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	return chunks
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func ProcessChunk(chunk []byte, H *[]uint32) {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	var K = []uint32{
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	var W [64]uint32
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	for i := 0; i &lt; 16; i++ {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		W[i] = binary.BigEndian.Uint32(chunk[i*4 : (i*4)+4])
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	for i := 16; i &lt; 64; i++ {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		W[i] = RotateShiftMix(W[i-2], 17, 19, 10) + W[i-7] + RotateShiftMix(W[i-15], 7, 18, 3) + W[i-16]
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	a, b, c, d, e, f, g, h := (*H)[0], (*H)[1], (*H)[2], (*H)[3], (*H)[4], (*H)[5], (*H)[6], (*H)[7]
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	for i := 0; i &lt; 64; i++ {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		T1 := h + MajorRotationMix(e, 6, 11, 25) + Ch(e, f, g) + K[i] + W[i]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		T2 := MajorRotationMix(a, 2, 13, 22) + Majority(a, b, c)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		h = g
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		g = f
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		f = e
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		e = d + T1
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		d = c
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		c = b
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		b = a
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		a = T1 + T2
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	(*H)[0] += a
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	(*H)[1] += b
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	(*H)[2] += c
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	(*H)[3] += d
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	(*H)[4] += e
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	(*H)[5] += f
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	(*H)[6] += g
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	(*H)[7] += h
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func RotateShiftMix(x uint32, rotateA int, rotateB int, shift int) uint32 {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	return (x&gt;&gt;rotateA | x&lt;&lt;(32-rotateA)) ^ (x&gt;&gt;rotateB | x&lt;&lt;(32-rotateB)) ^ (x &gt;&gt; shift)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func MajorRotationMix(x uint32, rotateA int, rotateB int, rotateC int) uint32 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return (x&gt;&gt;rotateA | x&lt;&lt;(32-rotateA)) ^ (x&gt;&gt;rotateB | x&lt;&lt;(32-rotateB)) ^ (x&gt;&gt;rotateC | x&lt;&lt;(32-rotateC))
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func Ch(x, y, z uint32) uint32 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return (x &amp; y) ^ (^x &amp; z)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func Majority(x, y, z uint32) uint32 {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return (x &amp; y) ^ (x &amp; z) ^ (y &amp; z)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func RandomString(length int) (string, *errhandle.Error) {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	bytes := make([]byte, length)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if _, err := rand.Read(bytes); err != nil {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		return &#34;&#34;, &amp;errhandle.Error{
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			Type:          errhandle.CryptError,
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			ServerMessage: fmt.Sprintf(&#34;error while generating a random string: %v&#34;, err),
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			ClientMessage: &#34;There was an error while processing your request.&#34;,
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			Status:        http.StatusInternalServerError,
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	randomString := base64.URLEncoding.EncodeToString(bytes)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	if len(randomString) &gt; length {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		randomString = randomString[:length]
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	return randomString, nil
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func Base64UrlEncode(input []byte) string {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	return base64.RawURLEncoding.EncodeToString(input)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func Base64UrlDecode(input string) ([]byte, *errhandle.Error) {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	bytes, err := base64.RawURLEncoding.DecodeString(input)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if err != nil {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		return nil, &amp;errhandle.Error{
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			Type:          errhandle.CryptError,
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			ServerMessage: fmt.Sprintf(&#34;while decoding a base 64 URL string: %v&#34;, err),
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			ClientMessage: &#34;There was an error while processing your request.&#34;,
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			Status:        http.StatusInternalServerError,
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	return bytes, nil
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
</pre><p><a href="crypt.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
