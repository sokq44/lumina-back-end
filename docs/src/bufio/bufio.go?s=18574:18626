<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/bufio/bufio.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./bufio.go?s=18574:18626#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/bufio">bufio</a>/<span class="text-muted">bufio.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/bufio">bufio</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// object, creating another object (Reader or Writer) that also implements</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// the interface but provides buffering and some help for textual I/O.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package bufio
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>const (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	defaultBufSize = 4096
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>var (
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	ErrInvalidUnreadByte = errors.New(&#34;bufio: invalid use of UnreadByte&#34;)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	ErrInvalidUnreadRune = errors.New(&#34;bufio: invalid use of UnreadRune&#34;)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	ErrBufferFull        = errors.New(&#34;bufio: buffer full&#34;)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	ErrNegativeCount     = errors.New(&#34;bufio: negative count&#34;)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Buffered input.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Reader implements buffering for an io.Reader object.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>type Reader struct {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	buf          []byte
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	rd           io.Reader <span class="comment">// reader provided by the client</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	r, w         int       <span class="comment">// buf read and write positions</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	err          error
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	lastByte     int <span class="comment">// last byte read for UnreadByte; -1 means invalid</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	lastRuneSize int <span class="comment">// size of last rune read for UnreadRune; -1 means invalid</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>const minReadBufferSize = 16
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>const maxConsecutiveEmptyReads = 100
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// NewReaderSize returns a new [Reader] whose buffer has at least the specified</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// size. If the argument io.Reader is already a [Reader] with large enough</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// size, it returns the underlying [Reader].</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func NewReaderSize(rd io.Reader, size int) *Reader {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// Is it already a Reader?</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	b, ok := rd.(*Reader)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if ok &amp;&amp; len(b.buf) &gt;= size {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return b
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	r := new(Reader)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	r.reset(make([]byte, max(size, minReadBufferSize)), rd)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return r
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// NewReader returns a new [Reader] whose buffer has the default size.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func NewReader(rd io.Reader) *Reader {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	return NewReaderSize(rd, defaultBufSize)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Size returns the size of the underlying buffer in bytes.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func (b *Reader) Size() int { return len(b.buf) }
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// Reset discards any buffered data, resets all state, and switches</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// the buffered reader to read from r.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Calling Reset on the zero value of [Reader] initializes the internal buffer</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// to the default size.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Calling b.Reset(b) (that is, resetting a [Reader] to itself) does nothing.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func (b *Reader) Reset(r io.Reader) {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// If a Reader r is passed to NewReader, NewReader will return r.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// Different layers of code may do that, and then later pass r</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// to Reset. Avoid infinite recursion in that case.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	if b == r {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		return
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if b.buf == nil {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		b.buf = make([]byte, defaultBufSize)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	b.reset(b.buf, r)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func (b *Reader) reset(buf []byte, r io.Reader) {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	*b = Reader{
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		buf:          buf,
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		rd:           r,
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		lastByte:     -1,
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		lastRuneSize: -1,
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>var errNegativeRead = errors.New(&#34;bufio: reader returned negative count from Read&#34;)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// fill reads a new chunk into the buffer.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (b *Reader) fill() {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// Slide existing data to beginning.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if b.r &gt; 0 {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		copy(b.buf, b.buf[b.r:b.w])
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		b.w -= b.r
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		b.r = 0
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	if b.w &gt;= len(b.buf) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		panic(&#34;bufio: tried to fill full buffer&#34;)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// Read new data: try a limited number of times.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	for i := maxConsecutiveEmptyReads; i &gt; 0; i-- {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		n, err := b.rd.Read(b.buf[b.w:])
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		if n &lt; 0 {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			panic(errNegativeRead)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		b.w += n
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		if err != nil {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			b.err = err
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			return
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if n &gt; 0 {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			return
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	b.err = io.ErrNoProgress
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (b *Reader) readErr() error {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	err := b.err
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	b.err = nil
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return err
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Peek returns the next n bytes without advancing the reader. The bytes stop</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// being valid at the next read call. If Peek returns fewer than n bytes, it</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// also returns an error explaining why the read is short. The error is</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// [ErrBufferFull] if n is larger than b&#39;s buffer size.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Calling Peek prevents a [Reader.UnreadByte] or [Reader.UnreadRune] call from succeeding</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// until the next read operation.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (b *Reader) Peek(n int) ([]byte, error) {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		return nil, ErrNegativeCount
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	b.lastByte = -1
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	for b.w-b.r &lt; n &amp;&amp; b.w-b.r &lt; len(b.buf) &amp;&amp; b.err == nil {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		b.fill() <span class="comment">// b.w-b.r &lt; len(b.buf) =&gt; buffer is not full</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if n &gt; len(b.buf) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		return b.buf[b.r:b.w], ErrBufferFull
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// 0 &lt;= n &lt;= len(b.buf)</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	var err error
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	if avail := b.w - b.r; avail &lt; n {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		<span class="comment">// not enough data in buffer</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		n = avail
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		err = b.readErr()
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		if err == nil {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			err = ErrBufferFull
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return b.buf[b.r : b.r+n], err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Discard skips the next n bytes, returning the number of bytes discarded.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// If Discard skips fewer than n bytes, it also returns an error.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// If 0 &lt;= n &lt;= b.Buffered(), Discard is guaranteed to succeed without</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// reading from the underlying io.Reader.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (b *Reader) Discard(n int) (discarded int, err error) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		return 0, ErrNegativeCount
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if n == 0 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	b.lastByte = -1
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	remain := n
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	for {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		skip := b.Buffered()
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		if skip == 0 {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			b.fill()
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			skip = b.Buffered()
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		if skip &gt; remain {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			skip = remain
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		b.r += skip
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		remain -= skip
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		if remain == 0 {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			return n, nil
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			return n - remain, b.readErr()
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// Read reads data into p.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes read into p.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// The bytes are taken from at most one Read on the underlying [Reader],</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// hence n may be less than len(p).</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// To read exactly len(p) bytes, use io.ReadFull(b, p).</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// If the underlying [Reader] can return a non-zero count with io.EOF,</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// then this Read method can do so as well; see the [io.Reader] docs.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (b *Reader) Read(p []byte) (n int, err error) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	n = len(p)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if n == 0 {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		if b.Buffered() &gt; 0 {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			return 0, nil
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		return 0, b.readErr()
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	if b.r == b.w {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			return 0, b.readErr()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		if len(p) &gt;= len(b.buf) {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			<span class="comment">// Large read, empty buffer.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			<span class="comment">// Read directly into p to avoid copy.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			n, b.err = b.rd.Read(p)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			if n &lt; 0 {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				panic(errNegativeRead)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			if n &gt; 0 {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>				b.lastByte = int(p[n-1])
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				b.lastRuneSize = -1
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			return n, b.readErr()
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		<span class="comment">// One read.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// Do not use b.fill, which will loop.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		b.r = 0
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		b.w = 0
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		n, b.err = b.rd.Read(b.buf)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if n &lt; 0 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			panic(errNegativeRead)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		if n == 0 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			return 0, b.readErr()
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		b.w += n
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// copy as much as we can</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Note: if the slice panics here, it is probably because</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// the underlying reader returned a bad count. See issue 49795.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	n = copy(p, b.buf[b.r:b.w])
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	b.r += n
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	b.lastByte = int(b.buf[b.r-1])
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	return n, nil
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// ReadByte reads and returns a single byte.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// If no byte is available, returns an error.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (b *Reader) ReadByte() (byte, error) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	for b.r == b.w {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			return 0, b.readErr()
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		b.fill() <span class="comment">// buffer is empty</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	c := b.buf[b.r]
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	b.r++
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	b.lastByte = int(c)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return c, nil
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// UnreadByte unreads the last byte. Only the most recently read byte can be unread.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// UnreadByte returns an error if the most recent method called on the</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// [Reader] was not a read operation. Notably, [Reader.Peek], [Reader.Discard], and [Reader.WriteTo] are not</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// considered read operations.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func (b *Reader) UnreadByte() error {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if b.lastByte &lt; 0 || b.r == 0 &amp;&amp; b.w &gt; 0 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		return ErrInvalidUnreadByte
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// b.r &gt; 0 || b.w == 0</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	if b.r &gt; 0 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		b.r--
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	} else {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// b.r == 0 &amp;&amp; b.w == 0</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		b.w = 1
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	b.buf[b.r] = byte(b.lastByte)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	b.lastByte = -1
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return nil
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// ReadRune reads a single UTF-8 encoded Unicode character and returns the</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// rune and its size in bytes. If the encoded rune is invalid, it consumes one byte</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// and returns unicode.ReplacementChar (U+FFFD) with a size of 1.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (b *Reader) ReadRune() (r rune, size int, err error) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	for b.r+utf8.UTFMax &gt; b.w &amp;&amp; !utf8.FullRune(b.buf[b.r:b.w]) &amp;&amp; b.err == nil &amp;&amp; b.w-b.r &lt; len(b.buf) {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		b.fill() <span class="comment">// b.w-b.r &lt; len(buf) =&gt; buffer is not full</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	if b.r == b.w {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		return 0, 0, b.readErr()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	r, size = rune(b.buf[b.r]), 1
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	if r &gt;= utf8.RuneSelf {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		r, size = utf8.DecodeRune(b.buf[b.r:b.w])
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	b.r += size
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	b.lastByte = int(b.buf[b.r-1])
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	b.lastRuneSize = size
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	return r, size, nil
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// UnreadRune unreads the last rune. If the most recent method called on</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// the [Reader] was not a [Reader.ReadRune], [Reader.UnreadRune] returns an error. (In this</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// regard it is stricter than [Reader.UnreadByte], which will unread the last byte</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// from any read operation.)</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func (b *Reader) UnreadRune() error {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if b.lastRuneSize &lt; 0 || b.r &lt; b.lastRuneSize {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return ErrInvalidUnreadRune
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	b.r -= b.lastRuneSize
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	b.lastByte = -1
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	return nil
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// Buffered returns the number of bytes that can be read from the current buffer.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func (b *Reader) Buffered() int { return b.w - b.r }
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// ReadSlice reads until the first occurrence of delim in the input,</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// returning a slice pointing at the bytes in the buffer.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// The bytes stop being valid at the next read.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// If ReadSlice encounters an error before finding a delimiter,</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// it returns all the data in the buffer and the error itself (often io.EOF).</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// ReadSlice fails with error [ErrBufferFull] if the buffer fills without a delim.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// Because the data returned from ReadSlice will be overwritten</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// by the next I/O operation, most clients should use</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// [Reader.ReadBytes] or ReadString instead.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// ReadSlice returns err != nil if and only if line does not end in delim.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>func (b *Reader) ReadSlice(delim byte) (line []byte, err error) {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	s := 0 <span class="comment">// search start index</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	for {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		<span class="comment">// Search buffer.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		if i := bytes.IndexByte(b.buf[b.r+s:b.w], delim); i &gt;= 0 {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			i += s
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			line = b.buf[b.r : b.r+i+1]
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			b.r += i + 1
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			break
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		<span class="comment">// Pending error?</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			line = b.buf[b.r:b.w]
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			b.r = b.w
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			err = b.readErr()
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			break
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		<span class="comment">// Buffer full?</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		if b.Buffered() &gt;= len(b.buf) {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			b.r = b.w
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			line = b.buf
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			err = ErrBufferFull
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			break
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		s = b.w - b.r <span class="comment">// do not rescan area we scanned before</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		b.fill() <span class="comment">// buffer is not full</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	<span class="comment">// Handle last byte, if any.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if i := len(line) - 1; i &gt;= 0 {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		b.lastByte = int(line[i])
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		b.lastRuneSize = -1
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	return
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// ReadLine is a low-level line-reading primitive. Most callers should use</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// [Reader.ReadBytes](&#39;\n&#39;) or [Reader.ReadString](&#39;\n&#39;) instead or use a [Scanner].</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// ReadLine tries to return a single line, not including the end-of-line bytes.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// If the line was too long for the buffer then isPrefix is set and the</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// beginning of the line is returned. The rest of the line will be returned</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// from future calls. isPrefix will be false when returning the last fragment</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// of the line. The returned buffer is only valid until the next call to</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// ReadLine. ReadLine either returns a non-nil line or it returns an error,</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// never both.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// The text returned from ReadLine does not include the line end (&#34;\r\n&#34; or &#34;\n&#34;).</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// No indication or error is given if the input ends without a final line end.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// Calling [Reader.UnreadByte] after ReadLine will always unread the last byte read</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// (possibly a character belonging to the line end) even if that byte is not</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// part of the line returned by ReadLine.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error) {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	line, err = b.ReadSlice(&#39;\n&#39;)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	if err == ErrBufferFull {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		<span class="comment">// Handle the case where &#34;\r\n&#34; straddles the buffer.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		if len(line) &gt; 0 &amp;&amp; line[len(line)-1] == &#39;\r&#39; {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			<span class="comment">// Put the &#39;\r&#39; back on buf and drop it from line.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			<span class="comment">// Let the next call to ReadLine check for &#34;\r\n&#34;.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			if b.r == 0 {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				<span class="comment">// should be unreachable</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				panic(&#34;bufio: tried to rewind past start of buffer&#34;)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			b.r--
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			line = line[:len(line)-1]
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		return line, true, nil
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	if len(line) == 0 {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		if err != nil {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			line = nil
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		return
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	err = nil
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if line[len(line)-1] == &#39;\n&#39; {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		drop := 1
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if len(line) &gt; 1 &amp;&amp; line[len(line)-2] == &#39;\r&#39; {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			drop = 2
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		line = line[:len(line)-drop]
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	return
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// collectFragments reads until the first occurrence of delim in the input. It</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// returns (slice of full buffers, remaining bytes before delim, total number</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// of bytes in the combined first two elements, error).</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// The complete result is equal to</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// `bytes.Join(append(fullBuffers, finalFragment), nil)`, which has a</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// length of `totalLen`. The result is structured in this way to allow callers</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// to minimize allocations and copies.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>func (b *Reader) collectFragments(delim byte) (fullBuffers [][]byte, finalFragment []byte, totalLen int, err error) {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	var frag []byte
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	<span class="comment">// Use ReadSlice to look for delim, accumulating full buffers.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	for {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		var e error
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		frag, e = b.ReadSlice(delim)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		if e == nil { <span class="comment">// got final fragment</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			break
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		if e != ErrBufferFull { <span class="comment">// unexpected error</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			err = e
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			break
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		<span class="comment">// Make a copy of the buffer.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		buf := bytes.Clone(frag)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		fullBuffers = append(fullBuffers, buf)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		totalLen += len(buf)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	totalLen += len(frag)
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	return fullBuffers, frag, totalLen, err
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// ReadBytes reads until the first occurrence of delim in the input,</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// returning a slice containing the data up to and including the delimiter.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// If ReadBytes encounters an error before finding a delimiter,</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// it returns the data read before the error and the error itself (often io.EOF).</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// ReadBytes returns err != nil if and only if the returned data does not end in</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// delim.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// For simple uses, a Scanner may be more convenient.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>func (b *Reader) ReadBytes(delim byte) ([]byte, error) {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	full, frag, n, err := b.collectFragments(delim)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// Allocate new buffer to hold the full pieces and the fragment.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	buf := make([]byte, n)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	n = 0
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	<span class="comment">// Copy full pieces and fragment in.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	for i := range full {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		n += copy(buf[n:], full[i])
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	copy(buf[n:], frag)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	return buf, err
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// ReadString reads until the first occurrence of delim in the input,</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// returning a string containing the data up to and including the delimiter.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// If ReadString encounters an error before finding a delimiter,</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// it returns the data read before the error and the error itself (often io.EOF).</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// ReadString returns err != nil if and only if the returned data does not end in</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">// delim.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">// For simple uses, a Scanner may be more convenient.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>func (b *Reader) ReadString(delim byte) (string, error) {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	full, frag, n, err := b.collectFragments(delim)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	<span class="comment">// Allocate new buffer to hold the full pieces and the fragment.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	buf.Grow(n)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	<span class="comment">// Copy full pieces and fragment in.</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	for _, fb := range full {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		buf.Write(fb)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	buf.Write(frag)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	return buf.String(), err
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// WriteTo implements io.WriterTo.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// This may make multiple calls to the [Reader.Read] method of the underlying [Reader].</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// If the underlying reader supports the [Reader.WriteTo] method,</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// this calls the underlying [Reader.WriteTo] without buffering.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>func (b *Reader) WriteTo(w io.Writer) (n int64, err error) {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	b.lastByte = -1
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	b.lastRuneSize = -1
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	n, err = b.writeBuf(w)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	if err != nil {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		return
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	if r, ok := b.rd.(io.WriterTo); ok {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		m, err := r.WriteTo(w)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		n += m
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		return n, err
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if w, ok := w.(io.ReaderFrom); ok {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		m, err := w.ReadFrom(b.rd)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		n += m
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		return n, err
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	if b.w-b.r &lt; len(b.buf) {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		b.fill() <span class="comment">// buffer not full</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	for b.r &lt; b.w {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		<span class="comment">// b.r &lt; b.w =&gt; buffer is not empty</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		m, err := b.writeBuf(w)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		n += m
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		if err != nil {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			return n, err
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		b.fill() <span class="comment">// buffer is empty</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	if b.err == io.EOF {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		b.err = nil
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	return n, b.readErr()
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>var errNegativeWrite = errors.New(&#34;bufio: writer returned negative count from Write&#34;)
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// writeBuf writes the [Reader]&#39;s buffer to the writer.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func (b *Reader) writeBuf(w io.Writer) (int64, error) {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	n, err := w.Write(b.buf[b.r:b.w])
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		panic(errNegativeWrite)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	b.r += n
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	return int64(n), err
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// buffered output</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">// Writer implements buffering for an [io.Writer] object.</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// If an error occurs writing to a [Writer], no more data will be</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// accepted and all subsequent writes, and [Writer.Flush], will return the error.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// After all data has been written, the client should call the</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// [Writer.Flush] method to guarantee all data has been forwarded to</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// the underlying [io.Writer].</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>type Writer struct {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	err error
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	buf []byte
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	n   int
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	wr  io.Writer
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// NewWriterSize returns a new [Writer] whose buffer has at least the specified</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// size. If the argument io.Writer is already a [Writer] with large enough</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">// size, it returns the underlying [Writer].</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>func NewWriterSize(w io.Writer, size int) *Writer {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	<span class="comment">// Is it already a Writer?</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	b, ok := w.(*Writer)
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if ok &amp;&amp; len(b.buf) &gt;= size {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		return b
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	if size &lt;= 0 {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		size = defaultBufSize
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	return &amp;Writer{
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		buf: make([]byte, size),
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		wr:  w,
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">// NewWriter returns a new [Writer] whose buffer has the default size.</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span><span class="comment">// If the argument io.Writer is already a [Writer] with large enough buffer size,</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span><span class="comment">// it returns the underlying [Writer].</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>func NewWriter(w io.Writer) *Writer {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	return NewWriterSize(w, defaultBufSize)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span><span class="comment">// Size returns the size of the underlying buffer in bytes.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>func (b *Writer) Size() int { return len(b.buf) }
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">// Reset discards any unflushed buffered data, clears any error, and</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// resets b to write its output to w.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// Calling Reset on the zero value of [Writer] initializes the internal buffer</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// to the default size.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// Calling w.Reset(w) (that is, resetting a [Writer] to itself) does nothing.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>func (b *Writer) Reset(w io.Writer) {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	<span class="comment">// If a Writer w is passed to NewWriter, NewWriter will return w.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	<span class="comment">// Different layers of code may do that, and then later pass w</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	<span class="comment">// to Reset. Avoid infinite recursion in that case.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	if b == w {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		return
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	if b.buf == nil {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		b.buf = make([]byte, defaultBufSize)
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	b.err = nil
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	b.n = 0
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	b.wr = w
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span><span class="comment">// Flush writes any buffered data to the underlying [io.Writer].</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>func (b *Writer) Flush() error {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		return b.err
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	if b.n == 0 {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		return nil
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	n, err := b.wr.Write(b.buf[0:b.n])
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	if n &lt; b.n &amp;&amp; err == nil {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		err = io.ErrShortWrite
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	if err != nil {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		if n &gt; 0 &amp;&amp; n &lt; b.n {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			copy(b.buf[0:b.n-n], b.buf[n:b.n])
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		b.n -= n
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		b.err = err
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		return err
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	b.n = 0
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	return nil
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// Available returns how many bytes are unused in the buffer.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>func (b *Writer) Available() int { return len(b.buf) - b.n }
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// AvailableBuffer returns an empty buffer with b.Available() capacity.</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// This buffer is intended to be appended to and</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// passed to an immediately succeeding [Writer.Write] call.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">// The buffer is only valid until the next write operation on b.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>func (b *Writer) AvailableBuffer() []byte {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	return b.buf[b.n:][:0]
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">// Buffered returns the number of bytes that have been written into the current buffer.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>func (b *Writer) Buffered() int { return b.n }
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// Write writes the contents of p into the buffer.</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">// If nn &lt; len(p), it also returns an error explaining</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span><span class="comment">// why the write is short.</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="selection">func (b *Writer) Write(p []byte) (nn int, err error)</span> {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	for len(p) &gt; b.Available() &amp;&amp; b.err == nil {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		var n int
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if b.Buffered() == 0 {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			<span class="comment">// Large write, empty buffer.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			<span class="comment">// Write directly from p to avoid copy.</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			n, b.err = b.wr.Write(p)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		} else {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			n = copy(b.buf[b.n:], p)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			b.n += n
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			b.Flush()
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		nn += n
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		p = p[n:]
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		return nn, b.err
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	n := copy(b.buf[b.n:], p)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	b.n += n
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	nn += n
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	return nn, nil
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span><span class="comment">// WriteByte writes a single byte.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>func (b *Writer) WriteByte(c byte) error {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		return b.err
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	if b.Available() &lt;= 0 &amp;&amp; b.Flush() != nil {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		return b.err
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	b.buf[b.n] = c
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	b.n++
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	return nil
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span><span class="comment">// WriteRune writes a single Unicode code point, returning</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// the number of bytes written and any error.</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>func (b *Writer) WriteRune(r rune) (size int, err error) {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	<span class="comment">// Compare as uint32 to correctly handle negative runes.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	if uint32(r) &lt; utf8.RuneSelf {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		err = b.WriteByte(byte(r))
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		if err != nil {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			return 0, err
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		return 1, nil
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		return 0, b.err
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	n := b.Available()
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	if n &lt; utf8.UTFMax {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		if b.Flush(); b.err != nil {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			return 0, b.err
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		n = b.Available()
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		if n &lt; utf8.UTFMax {
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			<span class="comment">// Can only happen if buffer is silly small.</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			return b.WriteString(string(r))
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	size = utf8.EncodeRune(b.buf[b.n:], r)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	b.n += size
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	return size, nil
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// WriteString writes a string.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written.</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// If the count is less than len(s), it also returns an error explaining</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">// why the write is short.</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>func (b *Writer) WriteString(s string) (int, error) {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	var sw io.StringWriter
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	tryStringWriter := true
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	nn := 0
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	for len(s) &gt; b.Available() &amp;&amp; b.err == nil {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		var n int
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		if b.Buffered() == 0 &amp;&amp; sw == nil &amp;&amp; tryStringWriter {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>			<span class="comment">// Check at most once whether b.wr is a StringWriter.</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			sw, tryStringWriter = b.wr.(io.StringWriter)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		if b.Buffered() == 0 &amp;&amp; tryStringWriter {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			<span class="comment">// Large write, empty buffer, and the underlying writer supports</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			<span class="comment">// WriteString: forward the write to the underlying StringWriter.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>			<span class="comment">// This avoids an extra copy.</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			n, b.err = sw.WriteString(s)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		} else {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			n = copy(b.buf[b.n:], s)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>			b.n += n
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			b.Flush()
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		nn += n
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		s = s[n:]
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		return nn, b.err
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	}
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	n := copy(b.buf[b.n:], s)
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	b.n += n
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	nn += n
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	return nn, nil
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span><span class="comment">// ReadFrom implements [io.ReaderFrom]. If the underlying writer</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span><span class="comment">// supports the ReadFrom method, this calls the underlying ReadFrom.</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// If there is buffered data and an underlying ReadFrom, this fills</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span><span class="comment">// the buffer and writes it before calling ReadFrom.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>func (b *Writer) ReadFrom(r io.Reader) (n int64, err error) {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		return 0, b.err
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	}
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	readerFrom, readerFromOK := b.wr.(io.ReaderFrom)
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	var m int
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	for {
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		if b.Available() == 0 {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>			if err1 := b.Flush(); err1 != nil {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>				return n, err1
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		if readerFromOK &amp;&amp; b.Buffered() == 0 {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>			nn, err := readerFrom.ReadFrom(r)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			b.err = err
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			n += nn
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			return n, err
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		nr := 0
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		for nr &lt; maxConsecutiveEmptyReads {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			m, err = r.Read(b.buf[b.n:])
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			if m != 0 || err != nil {
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>				break
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			nr++
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		if nr == maxConsecutiveEmptyReads {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			return n, io.ErrNoProgress
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		b.n += m
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		n += int64(m)
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		if err != nil {
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>			break
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		<span class="comment">// If we filled the buffer exactly, flush preemptively.</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		if b.Available() == 0 {
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>			err = b.Flush()
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		} else {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>			err = nil
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>		}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	return n, err
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>}
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span><span class="comment">// buffered input and output</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// ReadWriter stores pointers to a [Reader] and a [Writer].</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">// It implements [io.ReadWriter].</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>type ReadWriter struct {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	*Reader
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	*Writer
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span><span class="comment">// NewReadWriter allocates a new [ReadWriter] that dispatches to r and w.</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>func NewReadWriter(r *Reader, w *Writer) *ReadWriter {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	return &amp;ReadWriter{r, w}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>
</pre><p><a href="bufio.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
