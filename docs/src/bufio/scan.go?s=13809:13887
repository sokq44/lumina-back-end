<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/bufio/scan.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./scan.go?s=13809:13887#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/bufio">bufio</a>/<span class="text-muted">scan.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/bufio">bufio</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package bufio
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Scanner provides a convenient interface for reading data such as</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// a file of newline-delimited lines of text. Successive calls to</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// the [Scanner.Scan] method will step through the &#39;tokens&#39; of a file, skipping</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// the bytes between the tokens. The specification of a token is</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// defined by a split function of type [SplitFunc]; the default split</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// function breaks the input into lines with line termination stripped. [Scanner.Split]</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// functions are defined in this package for scanning a file into</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// lines, bytes, UTF-8-encoded runes, and space-delimited words. The</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// client may instead provide a custom split function.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Scanning stops unrecoverably at EOF, the first I/O error, or a token too</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// large to fit in the [Scanner.Buffer]. When a scan stops, the reader may have</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// advanced arbitrarily far past the last token. Programs that need more</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// control over error handling or large tokens, or must run sequential scans</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// on a reader, should use [bufio.Reader] instead.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Scanner struct {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	r            io.Reader <span class="comment">// The reader provided by the client.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	split        SplitFunc <span class="comment">// The function to split the tokens.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	maxTokenSize int       <span class="comment">// Maximum size of a token; modified by tests.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	token        []byte    <span class="comment">// Last token returned by split.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	buf          []byte    <span class="comment">// Buffer used as argument to split.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	start        int       <span class="comment">// First non-processed byte in buf.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	end          int       <span class="comment">// End of data in buf.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	err          error     <span class="comment">// Sticky error.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	empties      int       <span class="comment">// Count of successive empty tokens.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	scanCalled   bool      <span class="comment">// Scan has been called; buffer is in use.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	done         bool      <span class="comment">// Scan has finished.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// SplitFunc is the signature of the split function used to tokenize the</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// input. The arguments are an initial substring of the remaining unprocessed</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// data and a flag, atEOF, that reports whether the [Reader] has no more data</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// to give. The return values are the number of bytes to advance the input</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// and the next token to return to the user, if any, plus an error, if any.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Scanning stops if the function returns an error, in which case some of</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// the input may be discarded. If that error is [ErrFinalToken], scanning</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// stops with no error. A non-nil token delivered with [ErrFinalToken]</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// will be the last token, and a nil token with [ErrFinalToken]</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// immediately stops the scanning.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [Scanner] advances the input. If the token is not nil,</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// the [Scanner] returns it to the user. If the token is nil, the</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// Scanner reads more data and continues scanning; if there is no more</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// data--if atEOF was true--the [Scanner] returns. If the data does not</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// yet hold a complete token, for instance if it has no newline while</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// scanning lines, a [SplitFunc] can return (0, nil, nil) to signal the</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// [Scanner] to read more data into the slice and try again with a</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// longer slice starting at the same point in the input.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// The function is never called with an empty data slice unless atEOF</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// is true. If atEOF is true, however, data may be non-empty and,</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// as always, holds unprocessed text.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>type SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// Errors returned by Scanner.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>var (
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	ErrTooLong         = errors.New(&#34;bufio.Scanner: token too long&#34;)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	ErrNegativeAdvance = errors.New(&#34;bufio.Scanner: SplitFunc returns negative advance count&#34;)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	ErrAdvanceTooFar   = errors.New(&#34;bufio.Scanner: SplitFunc returns advance count beyond input&#34;)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	ErrBadReadCount    = errors.New(&#34;bufio.Scanner: Read returned impossible count&#34;)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>const (
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// MaxScanTokenSize is the maximum size used to buffer a token</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// unless the user provides an explicit buffer with [Scanner.Buffer].</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// The actual maximum token size may be smaller as the buffer</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// may need to include, for instance, a newline.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	MaxScanTokenSize = 64 * 1024
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	startBufSize = 4096 <span class="comment">// Size of initial allocation for buffer.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// NewScanner returns a new [Scanner] to read from r.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// The split function defaults to [ScanLines].</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func NewScanner(r io.Reader) *Scanner {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return &amp;Scanner{
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		r:            r,
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		split:        ScanLines,
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		maxTokenSize: MaxScanTokenSize,
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// Err returns the first non-EOF error that was encountered by the [Scanner].</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (s *Scanner) Err() error {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if s.err == io.EOF {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		return nil
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return s.err
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Bytes returns the most recent token generated by a call to [Scanner.Scan].</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// The underlying array may point to data that will be overwritten</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// by a subsequent call to Scan. It does no allocation.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (s *Scanner) Bytes() []byte {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return s.token
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Text returns the most recent token generated by a call to [Scanner.Scan]</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// as a newly allocated string holding its bytes.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>func (s *Scanner) Text() string {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return string(s.token)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// ErrFinalToken is a special sentinel error value. It is intended to be</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// returned by a Split function to indicate that the scanning should stop</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// with no error. If the token being delivered with this error is not nil,</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// the token is the last token.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// The value is useful to stop processing early or when it is necessary to</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// deliver a final empty token (which is different from a nil token).</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// One could achieve the same behavior with a custom error value but</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// providing one here is tidier.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// See the emptyFinalToken example for a use of this value.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>var ErrFinalToken = errors.New(&#34;final token&#34;)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// Scan advances the [Scanner] to the next token, which will then be</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// available through the [Scanner.Bytes] or [Scanner.Text] method. It returns false when</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// there are no more tokens, either by reaching the end of the input or an error.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// After Scan returns false, the [Scanner.Err] method will return any error that</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// occurred during scanning, except that if it was [io.EOF], [Scanner.Err]</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// will return nil.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// Scan panics if the split function returns too many empty</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// tokens without advancing the input. This is a common error mode for</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// scanners.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (s *Scanner) Scan() bool {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if s.done {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		return false
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	s.scanCalled = true
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// Loop until we have a token.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	for {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// See if we can get a token with what we already have.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;ve run out of data but have an error, give the split function</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		<span class="comment">// a chance to recover any remaining, possibly empty token.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		if s.end &gt; s.start || s.err != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			advance, token, err := s.split(s.buf[s.start:s.end], s.err != nil)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			if err != nil {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>				if err == ErrFinalToken {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>					s.token = token
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>					s.done = true
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>					<span class="comment">// When token is not nil, it means the scanning stops</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>					<span class="comment">// with a trailing token, and thus the return value</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>					<span class="comment">// should be true to indicate the existence of the token.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>					return token != nil
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>				}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>				s.setErr(err)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>				return false
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			if !s.advance(advance) {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				return false
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			s.token = token
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			if token != nil {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>				if s.err == nil || advance &gt; 0 {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>					s.empties = 0
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>				} else {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>					<span class="comment">// Returning tokens not advancing input at EOF.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>					s.empties++
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>					if s.empties &gt; maxConsecutiveEmptyReads {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>						panic(&#34;bufio.Scan: too many empty tokens without progressing&#34;)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>					}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>				}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>				return true
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		<span class="comment">// We cannot generate a token with what we are holding.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;ve already hit EOF or an I/O error, we are done.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		if s.err != nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			<span class="comment">// Shut it down.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			s.start = 0
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			s.end = 0
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			return false
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		<span class="comment">// Must read more data.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		<span class="comment">// First, shift data to beginning of buffer if there&#39;s lots of empty space</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// or space is needed.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		if s.start &gt; 0 &amp;&amp; (s.end == len(s.buf) || s.start &gt; len(s.buf)/2) {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			copy(s.buf, s.buf[s.start:s.end])
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			s.end -= s.start
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			s.start = 0
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		<span class="comment">// Is the buffer full? If so, resize.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if s.end == len(s.buf) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			<span class="comment">// Guarantee no overflow in the multiplication below.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			const maxInt = int(^uint(0) &gt;&gt; 1)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			if len(s.buf) &gt;= s.maxTokenSize || len(s.buf) &gt; maxInt/2 {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>				s.setErr(ErrTooLong)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				return false
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			newSize := len(s.buf) * 2
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			if newSize == 0 {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>				newSize = startBufSize
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			newSize = min(newSize, s.maxTokenSize)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			newBuf := make([]byte, newSize)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			copy(newBuf, s.buf[s.start:s.end])
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			s.buf = newBuf
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			s.end -= s.start
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			s.start = 0
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		<span class="comment">// Finally we can read some input. Make sure we don&#39;t get stuck with</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		<span class="comment">// a misbehaving Reader. Officially we don&#39;t need to do this, but let&#39;s</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		<span class="comment">// be extra careful: Scanner is for safe, simple jobs.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		for loop := 0; ; {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			n, err := s.r.Read(s.buf[s.end:len(s.buf)])
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			if n &lt; 0 || len(s.buf)-s.end &lt; n {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				s.setErr(ErrBadReadCount)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				break
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			s.end += n
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			if err != nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>				s.setErr(err)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>				break
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			if n &gt; 0 {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				s.empties = 0
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				break
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			loop++
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			if loop &gt; maxConsecutiveEmptyReads {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				s.setErr(io.ErrNoProgress)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>				break
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// advance consumes n bytes of the buffer. It reports whether the advance was legal.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (s *Scanner) advance(n int) bool {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		s.setErr(ErrNegativeAdvance)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		return false
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if n &gt; s.end-s.start {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		s.setErr(ErrAdvanceTooFar)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return false
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	s.start += n
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	return true
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// setErr records the first error encountered.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>func (s *Scanner) setErr(err error) {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if s.err == nil || s.err == io.EOF {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		s.err = err
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// Buffer sets the initial buffer to use when scanning</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// and the maximum size of buffer that may be allocated during scanning.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// The maximum token size must be less than the larger of max and cap(buf).</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// If max &lt;= cap(buf), [Scanner.Scan] will use this buffer only and do no allocation.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// By default, [Scanner.Scan] uses an internal buffer and sets the</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// maximum token size to [MaxScanTokenSize].</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// Buffer panics if it is called after scanning has started.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (s *Scanner) Buffer(buf []byte, max int) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if s.scanCalled {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		panic(&#34;Buffer called after Scan&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	s.buf = buf[0:cap(buf)]
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	s.maxTokenSize = max
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// Split sets the split function for the [Scanner].</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// The default split function is [ScanLines].</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// Split panics if it is called after scanning has started.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>func (s *Scanner) Split(split SplitFunc) {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	if s.scanCalled {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		panic(&#34;Split called after Scan&#34;)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	s.split = split
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// Split functions</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// ScanBytes is a split function for a [Scanner] that returns each byte as a token.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if atEOF &amp;&amp; len(data) == 0 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		return 0, nil, nil
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return 1, data[0:1], nil
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>var errorRune = []byte(string(utf8.RuneError))
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// ScanRunes is a split function for a [Scanner] that returns each</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// UTF-8-encoded rune as a token. The sequence of runes returned is</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// equivalent to that from a range loop over the input as a string, which</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// means that erroneous UTF-8 encodings translate to U+FFFD = &#34;\xef\xbf\xbd&#34;.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// Because of the Scan interface, this makes it impossible for the client to</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// distinguish correctly encoded replacement runes from encoding errors.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error) {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	if atEOF &amp;&amp; len(data) == 0 {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		return 0, nil, nil
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// Fast path 1: ASCII.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if data[0] &lt; utf8.RuneSelf {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		return 1, data[0:1], nil
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// Fast path 2: Correct UTF-8 decode without error.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	_, width := utf8.DecodeRune(data)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if width &gt; 1 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// It&#39;s a valid encoding. Width cannot be one for a correctly encoded</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		<span class="comment">// non-ASCII rune.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		return width, data[0:width], nil
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// We know it&#39;s an error: we have width==1 and implicitly r==utf8.RuneError.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// Is the error because there wasn&#39;t a full rune to be decoded?</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	<span class="comment">// FullRune distinguishes correctly between erroneous and incomplete encodings.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	if !atEOF &amp;&amp; !utf8.FullRune(data) {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		<span class="comment">// Incomplete; get more bytes.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return 0, nil, nil
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// We have a real UTF-8 encoding error. Return a properly encoded error rune</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// but advance only one byte. This matches the behavior of a range loop over</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// an incorrectly encoded string.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return 1, errorRune, nil
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// dropCR drops a terminal \r from the data.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func dropCR(data []byte) []byte {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if len(data) &gt; 0 &amp;&amp; data[len(data)-1] == &#39;\r&#39; {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return data[0 : len(data)-1]
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return data
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// ScanLines is a split function for a [Scanner] that returns each line of</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// text, stripped of any trailing end-of-line marker. The returned line may</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// be empty. The end-of-line marker is one optional carriage return followed</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// by one mandatory newline. In regular expression notation, it is `\r?\n`.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// The last non-empty line of input will be returned even if it has no</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// newline.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error) {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if atEOF &amp;&amp; len(data) == 0 {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		return 0, nil, nil
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	if i := bytes.IndexByte(data, &#39;\n&#39;); i &gt;= 0 {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		<span class="comment">// We have a full newline-terminated line.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return i + 1, dropCR(data[0:i]), nil
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re at EOF, we have a final, non-terminated line. Return it.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	if atEOF {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		return len(data), dropCR(data), nil
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	<span class="comment">// Request more data.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return 0, nil, nil
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// isSpace reports whether the character is a Unicode white space character.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// We avoid dependency on the unicode package, but check validity of the implementation</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// in the tests.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>func isSpace(r rune) bool {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if r &lt;= &#39;\u00FF&#39; {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		<span class="comment">// Obvious ASCII ones: \t through \r plus space. Plus two Latin-1 oddballs.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		switch r {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		case &#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\v&#39;, &#39;\f&#39;, &#39;\r&#39;:
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			return true
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		case &#39;\u0085&#39;, &#39;\u00A0&#39;:
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			return true
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		return false
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">// High-valued ones.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if &#39;\u2000&#39; &lt;= r &amp;&amp; r &lt;= &#39;\u200a&#39; {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		return true
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	switch r {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	case &#39;\u1680&#39;, &#39;\u2028&#39;, &#39;\u2029&#39;, &#39;\u202f&#39;, &#39;\u205f&#39;, &#39;\u3000&#39;:
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		return true
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return false
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// ScanWords is a split function for a [Scanner] that returns each</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// space-separated word of text, with surrounding spaces deleted. It will</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// never return an empty string. The definition of space is set by</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// unicode.IsSpace.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="selection">func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)</span> {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// Skip leading spaces.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	start := 0
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	for width := 0; start &lt; len(data); start += width {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		var r rune
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		r, width = utf8.DecodeRune(data[start:])
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		if !isSpace(r) {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			break
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// Scan until space, marking end of word.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	for width, i := 0, start; i &lt; len(data); i += width {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		var r rune
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		r, width = utf8.DecodeRune(data[i:])
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		if isSpace(r) {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			return i + width, data[start:i], nil
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re at EOF, we have a final, non-empty, non-terminated word. Return it.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	if atEOF &amp;&amp; len(data) &gt; start {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		return len(data), data[start:], nil
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// Request more data.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	return start, nil, nil
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
</pre><p><a href="scan.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
