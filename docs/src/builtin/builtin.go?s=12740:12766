<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/builtin/builtin.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./builtin.go?s=12740:12766#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/builtin">builtin</a>/<span class="text-muted">builtin.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/builtin">builtin</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package builtin provides documentation for Go&#39;s predeclared identifiers.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>The items documented here are not actually in package builtin
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>but their descriptions here allow godoc to present documentation
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>for the language&#39;s special identifiers.
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>*/</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package builtin
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import &#34;cmp&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// bool is the set of boolean values, true and false.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>type bool bool
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// true and false are the two untyped boolean values.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>const (
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	true  = 0 == 0 <span class="comment">// Untyped bool.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	false = 0 != 0 <span class="comment">// Untyped bool.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// uint8 is the set of all unsigned 8-bit integers.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Range: 0 through 255.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>type uint8 uint8
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// uint16 is the set of all unsigned 16-bit integers.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Range: 0 through 65535.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type uint16 uint16
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// uint32 is the set of all unsigned 32-bit integers.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Range: 0 through 4294967295.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>type uint32 uint32
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// uint64 is the set of all unsigned 64-bit integers.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Range: 0 through 18446744073709551615.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type uint64 uint64
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// int8 is the set of all signed 8-bit integers.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Range: -128 through 127.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>type int8 int8
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// int16 is the set of all signed 16-bit integers.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// Range: -32768 through 32767.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type int16 int16
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// int32 is the set of all signed 32-bit integers.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Range: -2147483648 through 2147483647.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type int32 int32
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// int64 is the set of all signed 64-bit integers.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Range: -9223372036854775808 through 9223372036854775807.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type int64 int64
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// float32 is the set of all IEEE-754 32-bit floating-point numbers.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>type float32 float32
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// float64 is the set of all IEEE-754 64-bit floating-point numbers.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>type float64 float64
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// complex64 is the set of all complex numbers with float32 real and</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// imaginary parts.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type complex64 complex64
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// complex128 is the set of all complex numbers with float64 real and</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// imaginary parts.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>type complex128 complex128
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// string is the set of all strings of 8-bit bytes, conventionally but not</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// necessarily representing UTF-8-encoded text. A string may be empty, but</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// not nil. Values of string type are immutable.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>type string string
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// int is a signed integer type that is at least 32 bits in size. It is a</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// distinct type, however, and not an alias for, say, int32.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>type int int
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// uint is an unsigned integer type that is at least 32 bits in size. It is a</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// distinct type, however, and not an alias for, say, uint32.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>type uint uint
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// uintptr is an integer type that is large enough to hold the bit pattern of</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// any pointer.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>type uintptr uintptr
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// used, by convention, to distinguish byte values from 8-bit unsigned</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// integer values.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>type byte = uint8
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// used, by convention, to distinguish character values from integer values.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>type rune = int32
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// any is an alias for interface{} and is equivalent to interface{} in all ways.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>type any = interface{}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// comparable is an interface that is implemented by all comparable types</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// (booleans, numbers, strings, pointers, channels, arrays of comparable types,</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// structs whose fields are all comparable types).</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// The comparable interface may only be used as a type parameter constraint,</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// not as the type of a variable.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>type comparable interface{ comparable }
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// iota is a predeclared identifier representing the untyped integer ordinal</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// number of the current const specification in a (usually parenthesized)</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// const declaration. It is zero-indexed.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>const iota = 0 <span class="comment">// Untyped int.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// nil is a predeclared identifier representing the zero value for a</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// pointer, channel, func, interface, map, or slice type.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>var nil Type <span class="comment">// Type must be a pointer, channel, func, interface, map, or slice type</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Type is here for the purposes of documentation only. It is a stand-in</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// for any Go type, but represents the same type for any given function</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// invocation.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>type Type int
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// Type1 is here for the purposes of documentation only. It is a stand-in</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// for any Go type, but represents the same type for any given function</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// invocation.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>type Type1 int
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// IntegerType is here for the purposes of documentation only. It is a stand-in</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// for any integer type: int, uint, int8 etc.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>type IntegerType int
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// FloatType is here for the purposes of documentation only. It is a stand-in</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// for either float type: float32 or float64.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>type FloatType float32
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// ComplexType is here for the purposes of documentation only. It is a</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// stand-in for either complex type: complex64 or complex128.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>type ComplexType complex64
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// The append built-in function appends elements to the end of a slice. If</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// it has sufficient capacity, the destination is resliced to accommodate the</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// new elements. If it does not, a new underlying array will be allocated.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// Append returns the updated slice. It is therefore necessary to store the</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// result of append, often in the variable holding the slice itself:</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">//	slice = append(slice, elem1, elem2)</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//	slice = append(slice, anotherSlice...)</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// As a special case, it is legal to append a string to a byte slice, like this:</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//	slice = append([]byte(&#34;hello &#34;), &#34;world&#34;...)</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func append(slice []Type, elems ...Type) []Type
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// The copy built-in function copies elements from a source slice into a</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// destination slice. (As a special case, it also will copy bytes from a</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// string to a slice of bytes.) The source and destination may overlap. Copy</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// returns the number of elements copied, which will be the minimum of</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// len(src) and len(dst).</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func copy(dst, src []Type) int
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// The delete built-in function deletes the element with the specified key</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// (m[key]) from the map. If m is nil or there is no such element, delete</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// is a no-op.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func delete(m map[Type]Type1, key Type)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// The len built-in function returns the length of v, according to its type:</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">//	Array: the number of elements in v.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">//	Pointer to array: the number of elements in *v (even if v is nil).</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//	Slice, or map: the number of elements in v; if v is nil, len(v) is zero.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">//	String: the number of bytes in v.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//	Channel: the number of elements queued (unread) in the channel buffer;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">//	         if v is nil, len(v) is zero.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// For some arguments, such as a string literal or a simple array expression, the</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// result can be a constant. See the Go language specification&#39;s &#34;Length and</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// capacity&#34; section for details.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func len(v Type) int
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// The cap built-in function returns the capacity of v, according to its type:</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//	Array: the number of elements in v (same as len(v)).</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//	Pointer to array: the number of elements in *v (same as len(v)).</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//	Slice: the maximum length the slice can reach when resliced;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">//	if v is nil, cap(v) is zero.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//	Channel: the channel buffer capacity, in units of elements;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//	if v is nil, cap(v) is zero.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// For some arguments, such as a simple array expression, the result can be a</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// constant. See the Go language specification&#39;s &#34;Length and capacity&#34; section for</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// details.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func cap(v Type) int
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// The make built-in function allocates and initializes an object of type</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// slice, map, or chan (only). Like new, the first argument is a type, not a</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// value. Unlike new, make&#39;s return type is the same as the type of its</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// argument, not a pointer to it. The specification of the result depends on</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// the type:</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">//	Slice: The size specifies the length. The capacity of the slice is</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//	equal to its length. A second integer argument may be provided to</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">//	specify a different capacity; it must be no smaller than the</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//	length. For example, make([]int, 0, 10) allocates an underlying array</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">//	of size 10 and returns a slice of length 0 and capacity 10 that is</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//	backed by this underlying array.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">//	Map: An empty map is allocated with enough space to hold the</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//	specified number of elements. The size may be omitted, in which case</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//	a small starting size is allocated.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">//	Channel: The channel&#39;s buffer is initialized with the specified</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">//	buffer capacity. If zero, or the size is omitted, the channel is</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">//	unbuffered.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>func make(t Type, size ...IntegerType) Type
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// The max built-in function returns the largest value of a fixed number of</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// arguments of [cmp.Ordered] types. There must be at least one argument.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// If T is a floating-point type and any of the arguments are NaNs,</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// max will return NaN.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func max[T cmp.Ordered](x T, y ...T) T
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// The min built-in function returns the smallest value of a fixed number of</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// arguments of [cmp.Ordered] types. There must be at least one argument.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// If T is a floating-point type and any of the arguments are NaNs,</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// min will return NaN.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func min[T cmp.Ordered](x T, y ...T) T
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// The new built-in function allocates memory. The first argument is a type,</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// not a value, and the value returned is a pointer to a newly</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// allocated zero value of that type.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func new(Type) *Type
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// The complex built-in function constructs a complex value from two</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// floating-point values. The real and imaginary parts must be of the same</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// size, either float32 or float64 (or assignable to them), and the return</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// value will be the corresponding complex type (complex64 for float32,</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// complex128 for float64).</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func complex(r, i FloatType) ComplexType
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// The real built-in function returns the real part of the complex number c.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// The return value will be floating point type corresponding to the type of c.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func real(c ComplexType) FloatType
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// The imag built-in function returns the imaginary part of the complex</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// number c. The return value will be floating point type corresponding to</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// the type of c.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func imag(c ComplexType) FloatType
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// The clear built-in function clears maps and slices.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// For maps, clear deletes all entries, resulting in an empty map.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// For slices, clear sets all elements up to the length of the slice</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// to the zero value of the respective element type. If the argument</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// type is a type parameter, the type parameter&#39;s type set must</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// contain only map or slice types, and clear performs the operation</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// implied by the type argument.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>func clear[T ~[]Type | ~map[Type]Type1](t T)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// The close built-in function closes a channel, which must be either</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// bidirectional or send-only. It should be executed only by the sender,</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// never the receiver, and has the effect of shutting down the channel after</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// the last sent value is received. After the last value has been received</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// from a closed channel c, any receive from c will succeed without</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// blocking, returning the zero value for the channel element. The form</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//	x, ok := &lt;-c</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// will also set ok to false for a closed and empty channel.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func close(c chan&lt;- Type)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// The panic built-in function stops normal execution of the current</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// goroutine. When a function F calls panic, normal execution of F stops</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// immediately. Any functions whose execution was deferred by F are run in</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// the usual way, and then F returns to its caller. To the caller G, the</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// invocation of F then behaves like a call to panic, terminating G&#39;s</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// execution and running any deferred functions. This continues until all</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// functions in the executing goroutine have stopped, in reverse order. At</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// that point, the program is terminated with a non-zero exit code. This</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// termination sequence is called panicking and can be controlled by the</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// built-in function recover.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// Starting in Go 1.21, calling panic with a nil interface value or an</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// untyped nil causes a run-time error (a different panic).</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// The GODEBUG setting panicnil=1 disables the run-time error.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func panic(v any)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// The recover built-in function allows a program to manage behavior of a</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// panicking goroutine. Executing a call to recover inside a deferred</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// function (but not any function called by it) stops the panicking sequence</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// by restoring normal execution and retrieves the error value passed to the</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// call of panic. If recover is called outside the deferred function it will</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// not stop a panicking sequence. In this case, or when the goroutine is not</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// panicking, recover returns nil.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// Prior to Go 1.21, recover would also return nil if panic is called with</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// a nil argument. See [panic] for details.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func recover() any
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// The print built-in function formats its arguments in an</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// implementation-specific way and writes the result to standard error.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// Print is useful for bootstrapping and debugging; it is not guaranteed</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// to stay in the language.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func print(args ...Type)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// The println built-in function formats its arguments in an</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// implementation-specific way and writes the result to standard error.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Spaces are always added between arguments and a newline is appended.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// Println is useful for bootstrapping and debugging; it is not guaranteed</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// to stay in the language.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="selection">func println(args ...Type)</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// The error built-in interface type is the conventional interface for</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// representing an error condition, with the nil value representing no error.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>type error interface {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	Error() string
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
</pre><p><a href="builtin.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
