<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/bytes/bytes.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./bytes.go?s=4292:4333#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/bytes">bytes</a>/<span class="text-muted">bytes.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/bytes">bytes</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package bytes implements functions for the manipulation of byte slices.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// It is analogous to the facilities of the [strings] package.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package bytes
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/bytealg&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Equal reports whether a and b</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// are the same length and contain the same bytes.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// A nil argument is equivalent to an empty slice.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func Equal(a, b []byte) bool {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// Neither cmd/compile nor gccgo allocates for these string conversions.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	return string(a) == string(b)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// Compare returns an integer comparing two byte slices lexicographically.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// The result will be 0 if a == b, -1 if a &lt; b, and +1 if a &gt; b.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// A nil argument is equivalent to an empty slice.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>func Compare(a, b []byte) int {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	return bytealg.Compare(a, b)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// explode splits s into a slice of UTF-8 sequences, one per Unicode code point (still slices of bytes),</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// up to a maximum of n byte slices. Invalid UTF-8 sequences are chopped into individual bytes.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>func explode(s []byte, n int) [][]byte {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	if n &lt;= 0 || n &gt; len(s) {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		n = len(s)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	a := make([][]byte, n)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	var size int
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	na := 0
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		if na+1 &gt;= n {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>			a[na] = s
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>			na++
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			break
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		_, size = utf8.DecodeRune(s)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		a[na] = s[0:size:size]
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		s = s[size:]
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		na++
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	return a[0:na]
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Count counts the number of non-overlapping instances of sep in s.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// If sep is an empty slice, Count returns 1 + the number of UTF-8-encoded code points in s.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func Count(s, sep []byte) int {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// special case</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	if len(sep) == 0 {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		return utf8.RuneCount(s) + 1
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if len(sep) == 1 {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return bytealg.Count(s, sep[0])
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	n := 0
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	for {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		i := Index(s, sep)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		if i == -1 {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			return n
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		n++
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		s = s[i+len(sep):]
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// Contains reports whether subslice is within b.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func Contains(b, subslice []byte) bool {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	return Index(b, subslice) != -1
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// ContainsAny reports whether any of the UTF-8-encoded code points in chars are within b.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func ContainsAny(b []byte, chars string) bool {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return IndexAny(b, chars) &gt;= 0
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// ContainsRune reports whether the rune is contained in the UTF-8-encoded byte slice b.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func ContainsRune(b []byte, r rune) bool {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return IndexRune(b, r) &gt;= 0
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// ContainsFunc reports whether any of the UTF-8-encoded code points r within b satisfy f(r).</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>func ContainsFunc(b []byte, f func(rune) bool) bool {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	return IndexFunc(b, f) &gt;= 0
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// IndexByte returns the index of the first instance of c in b, or -1 if c is not present in b.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func IndexByte(b []byte, c byte) int {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	return bytealg.IndexByte(b, c)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func indexBytePortable(s []byte, c byte) int {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	for i, b := range s {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		if b == c {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			return i
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	return -1
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// LastIndex returns the index of the last instance of sep in s, or -1 if sep is not present in s.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func LastIndex(s, sep []byte) int {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	n := len(sep)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	switch {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	case n == 0:
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return len(s)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	case n == 1:
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		return bytealg.LastIndexByte(s, sep[0])
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	case n == len(s):
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		if Equal(s, sep) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			return 0
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		return -1
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	case n &gt; len(s):
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		return -1
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return bytealg.LastIndexRabinKarp(s, sep)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func LastIndexByte(s []byte, c byte) int {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return bytealg.LastIndexByte(s, c)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// IndexRune interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// It returns the byte index of the first occurrence in s of the given rune.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// It returns -1 if rune is not present in s.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// If r is utf8.RuneError, it returns the first instance of any</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// invalid UTF-8 byte sequence.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func IndexRune(s []byte, r rune) int {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	switch {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	case 0 &lt;= r &amp;&amp; r &lt; utf8.RuneSelf:
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		return IndexByte(s, byte(r))
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	case r == utf8.RuneError:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		for i := 0; i &lt; len(s); {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			r1, n := utf8.DecodeRune(s[i:])
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			if r1 == utf8.RuneError {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				return i
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			i += n
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return -1
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	case !utf8.ValidRune(r):
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		return -1
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	default:
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		var b [utf8.UTFMax]byte
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		n := utf8.EncodeRune(b[:], r)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		return Index(s, b[:n])
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// IndexAny interprets s as a sequence of UTF-8-encoded Unicode code points.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// It returns the byte index of the first occurrence in s of any of the Unicode</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// code points in chars. It returns -1 if chars is empty or if there is no code</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// point in common.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="selection">func IndexAny(s []byte, chars string) int</span> {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if chars == &#34;&#34; {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		<span class="comment">// Avoid scanning all of s.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return -1
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if len(s) == 1 {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		r := rune(s[0])
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			<span class="comment">// search utf8.RuneError.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			for _, r = range chars {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>				if r == utf8.RuneError {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>					return 0
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>				}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			return -1
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		if bytealg.IndexByteString(chars, s[0]) &gt;= 0 {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			return 0
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return -1
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if len(chars) == 1 {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		r := rune(chars[0])
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			r = utf8.RuneError
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		return IndexRune(s, r)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if len(s) &gt; 8 {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if as, isASCII := makeASCIISet(chars); isASCII {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			for i, c := range s {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				if as.contains(c) {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>					return i
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>				}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			return -1
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	var width int
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i += width {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		r := rune(s[i])
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if r &lt; utf8.RuneSelf {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			if bytealg.IndexByteString(chars, s[i]) &gt;= 0 {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>				return i
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			width = 1
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			continue
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		r, width = utf8.DecodeRune(s[i:])
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		if r != utf8.RuneError {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			<span class="comment">// r is 2 to 4 bytes</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			if len(chars) == width {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>				if chars == string(r) {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>					return i
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				continue
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			<span class="comment">// Use bytealg.IndexString for performance if available.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			if bytealg.MaxLen &gt;= width {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				if bytealg.IndexString(chars, string(r)) &gt;= 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>					return i
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				continue
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		for _, ch := range chars {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			if r == ch {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				return i
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	return -1
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// LastIndexAny interprets s as a sequence of UTF-8-encoded Unicode code</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// points. It returns the byte index of the last occurrence in s of any of</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// the Unicode code points in chars. It returns -1 if chars is empty or if</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// there is no code point in common.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>func LastIndexAny(s []byte, chars string) int {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if chars == &#34;&#34; {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		<span class="comment">// Avoid scanning all of s.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		return -1
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if len(s) &gt; 8 {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		if as, isASCII := makeASCIISet(chars); isASCII {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			for i := len(s) - 1; i &gt;= 0; i-- {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>				if as.contains(s[i]) {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>					return i
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>				}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			return -1
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if len(s) == 1 {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		r := rune(s[0])
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			for _, r = range chars {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				if r == utf8.RuneError {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>					return 0
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return -1
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		if bytealg.IndexByteString(chars, s[0]) &gt;= 0 {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			return 0
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return -1
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if len(chars) == 1 {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		cr := rune(chars[0])
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if cr &gt;= utf8.RuneSelf {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			cr = utf8.RuneError
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		for i := len(s); i &gt; 0; {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			r, size := utf8.DecodeLastRune(s[:i])
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			i -= size
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			if r == cr {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>				return i
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		return -1
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	for i := len(s); i &gt; 0; {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		r := rune(s[i-1])
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if r &lt; utf8.RuneSelf {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			if bytealg.IndexByteString(chars, s[i-1]) &gt;= 0 {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>				return i - 1
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			i--
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			continue
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		r, size := utf8.DecodeLastRune(s[:i])
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		i -= size
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		if r != utf8.RuneError {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			<span class="comment">// r is 2 to 4 bytes</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			if len(chars) == size {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>				if chars == string(r) {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>					return i
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>				}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>				continue
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			<span class="comment">// Use bytealg.IndexString for performance if available.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			if bytealg.MaxLen &gt;= size {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>				if bytealg.IndexString(chars, string(r)) &gt;= 0 {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>					return i
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>				}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>				continue
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		for _, ch := range chars {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			if r == ch {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>				return i
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	return -1
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// Generic split: splits after each instance of sep,</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// including sepSave bytes of sep in the subslices.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>func genSplit(s, sep []byte, sepSave, n int) [][]byte {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if n == 0 {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		return nil
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	if len(sep) == 0 {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		return explode(s, n)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		n = Count(s, sep) + 1
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	if n &gt; len(s)+1 {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		n = len(s) + 1
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	a := make([][]byte, n)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	n--
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	i := 0
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	for i &lt; n {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		m := Index(s, sep)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		if m &lt; 0 {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			break
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		a[i] = s[: m+sepSave : m+sepSave]
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		s = s[m+len(sep):]
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		i++
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	a[i] = s
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return a[:i+1]
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// SplitN slices s into subslices separated by sep and returns a slice of</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// the subslices between those separators.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// If sep is empty, SplitN splits after each UTF-8 sequence.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// The count determines the number of subslices to return:</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">//	n &gt; 0: at most n subslices; the last subslice will be the unsplit remainder.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">//	n == 0: the result is nil (zero subslices)</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">//	n &lt; 0: all subslices</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// To split around the first instance of a separator, see Cut.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func SplitN(s, sep []byte, n int) [][]byte { return genSplit(s, sep, 0, n) }
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// SplitAfterN slices s into subslices after each instance of sep and</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// returns a slice of those subslices.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// If sep is empty, SplitAfterN splits after each UTF-8 sequence.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// The count determines the number of subslices to return:</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">//	n &gt; 0: at most n subslices; the last subslice will be the unsplit remainder.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">//	n == 0: the result is nil (zero subslices)</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">//	n &lt; 0: all subslices</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func SplitAfterN(s, sep []byte, n int) [][]byte {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	return genSplit(s, sep, len(sep), n)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// Split slices s into all subslices separated by sep and returns a slice of</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// the subslices between those separators.</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// If sep is empty, Split splits after each UTF-8 sequence.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// It is equivalent to SplitN with a count of -1.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// To split around the first instance of a separator, see Cut.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func Split(s, sep []byte) [][]byte { return genSplit(s, sep, 0, -1) }
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// SplitAfter slices s into all subslices after each instance of sep and</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// returns a slice of those subslices.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// If sep is empty, SplitAfter splits after each UTF-8 sequence.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// It is equivalent to SplitAfterN with a count of -1.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func SplitAfter(s, sep []byte) [][]byte {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	return genSplit(s, sep, len(sep), -1)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>var asciiSpace = [256]uint8{&#39;\t&#39;: 1, &#39;\n&#39;: 1, &#39;\v&#39;: 1, &#39;\f&#39;: 1, &#39;\r&#39;: 1, &#39; &#39;: 1}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// Fields interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// It splits the slice s around each instance of one or more consecutive white space</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// characters, as defined by unicode.IsSpace, returning a slice of subslices of s or an</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// empty slice if s contains only white space.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func Fields(s []byte) [][]byte {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	<span class="comment">// First count the fields.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// This is an exact count if s is ASCII, otherwise it is an approximation.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	n := 0
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	wasSpace := 1
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// setBits is used to track which bits are set in the bytes of s.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	setBits := uint8(0)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		r := s[i]
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		setBits |= r
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		isSpace := int(asciiSpace[r])
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		n += wasSpace &amp; ^isSpace
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		wasSpace = isSpace
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	if setBits &gt;= utf8.RuneSelf {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		<span class="comment">// Some runes in the input slice are not ASCII.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		return FieldsFunc(s, unicode.IsSpace)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// ASCII fast path</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	a := make([][]byte, n)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	na := 0
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	fieldStart := 0
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	i := 0
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// Skip spaces in the front of the input.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	for i &lt; len(s) &amp;&amp; asciiSpace[s[i]] != 0 {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		i++
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	fieldStart = i
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	for i &lt; len(s) {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		if asciiSpace[s[i]] == 0 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			i++
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			continue
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		a[na] = s[fieldStart:i:i]
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		na++
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		i++
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		<span class="comment">// Skip spaces in between fields.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		for i &lt; len(s) &amp;&amp; asciiSpace[s[i]] != 0 {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			i++
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		fieldStart = i
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	if fieldStart &lt; len(s) { <span class="comment">// Last field might end at EOF.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		a[na] = s[fieldStart:len(s):len(s)]
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	return a
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// FieldsFunc interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// It splits the slice s at each run of code points c satisfying f(c) and</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// returns a slice of subslices of s. If all code points in s satisfy f(c), or</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// len(s) == 0, an empty slice is returned.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// FieldsFunc makes no guarantees about the order in which it calls f(c)</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// and assumes that f always returns the same value for a given c.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>func FieldsFunc(s []byte, f func(rune) bool) [][]byte {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// A span is used to record a slice of s of the form s[start:end].</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// The start index is inclusive and the end index is exclusive.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	type span struct {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		start int
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		end   int
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	spans := make([]span, 0, 32)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">// Find the field start and end indices.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">// Doing this in a separate pass (rather than slicing the string s</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// and collecting the result substrings right away) is significantly</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// more efficient, possibly due to cache effects.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	start := -1 <span class="comment">// valid span start if &gt;= 0</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		size := 1
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		r := rune(s[i])
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			r, size = utf8.DecodeRune(s[i:])
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		if f(r) {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			if start &gt;= 0 {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>				spans = append(spans, span{start, i})
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>				start = -1
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>			}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		} else {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			if start &lt; 0 {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>				start = i
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		i += size
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// Last field might end at EOF.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	if start &gt;= 0 {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		spans = append(spans, span{start, len(s)})
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	<span class="comment">// Create subslices from recorded field indices.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	a := make([][]byte, len(spans))
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	for i, span := range spans {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		a[i] = s[span.start:span.end:span.end]
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	return a
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">// Join concatenates the elements of s to create a new byte slice. The separator</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// sep is placed between elements in the resulting slice.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>func Join(s [][]byte, sep []byte) []byte {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return []byte{}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	if len(s) == 1 {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		<span class="comment">// Just return a copy.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return append([]byte(nil), s[0]...)
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	var n int
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	if len(sep) &gt; 0 {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		if len(sep) &gt;= maxInt/(len(s)-1) {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			panic(&#34;bytes: Join output length overflow&#34;)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		n += len(sep) * (len(s) - 1)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	for _, v := range s {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		if len(v) &gt; maxInt-n {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			panic(&#34;bytes: Join output length overflow&#34;)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		n += len(v)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	b := bytealg.MakeNoZero(n)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	bp := copy(b, s[0])
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	for _, v := range s[1:] {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		bp += copy(b[bp:], sep)
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		bp += copy(b[bp:], v)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	return b
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">// HasPrefix reports whether the byte slice s begins with prefix.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>func HasPrefix(s, prefix []byte) bool {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	return len(s) &gt;= len(prefix) &amp;&amp; Equal(s[0:len(prefix)], prefix)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// HasSuffix reports whether the byte slice s ends with suffix.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>func HasSuffix(s, suffix []byte) bool {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	return len(s) &gt;= len(suffix) &amp;&amp; Equal(s[len(s)-len(suffix):], suffix)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// Map returns a copy of the byte slice s with all its characters modified</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// according to the mapping function. If mapping returns a negative value, the character is</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// dropped from the byte slice with no replacement. The characters in s and the</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span><span class="comment">// output are interpreted as UTF-8-encoded code points.</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>func Map(mapping func(r rune) rune, s []byte) []byte {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	<span class="comment">// In the worst case, the slice can grow when mapped, making</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// things unpleasant. But it&#39;s so rare we barge in assuming it&#39;s</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	<span class="comment">// fine. It could also shrink but that falls out naturally.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	b := make([]byte, 0, len(s))
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		wid := 1
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		r := rune(s[i])
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			r, wid = utf8.DecodeRune(s[i:])
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		r = mapping(r)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		if r &gt;= 0 {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>			b = utf8.AppendRune(b, r)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		i += wid
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	return b
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// Repeat returns a new byte slice consisting of count copies of b.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// It panics if count is negative or if the result of (len(b) * count)</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// overflows.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func Repeat(b []byte, count int) []byte {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	if count == 0 {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		return []byte{}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	<span class="comment">// Since we cannot return an error on overflow,</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	<span class="comment">// we should panic if the repeat will generate an overflow.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	<span class="comment">// See golang.org/issue/16237.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	if count &lt; 0 {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		panic(&#34;bytes: negative Repeat count&#34;)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	if len(b) &gt;= maxInt/count {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		panic(&#34;bytes: Repeat output length overflow&#34;)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	n := len(b) * count
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		return []byte{}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// Past a certain chunk size it is counterproductive to use</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">// larger chunks as the source of the write, as when the source</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// is too large we are basically just thrashing the CPU D-cache.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// So if the result length is larger than an empirically-found</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	<span class="comment">// limit (8KB), we stop growing the source string once the limit</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	<span class="comment">// is reached and keep reusing the same source string - that</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	<span class="comment">// should therefore be always resident in the L1 cache - until we</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// have completed the construction of the result.</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// This yields significant speedups (up to +100%) in cases where</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// the result length is large (roughly, over L2 cache size).</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	const chunkLimit = 8 * 1024
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	chunkMax := n
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	if chunkMax &gt; chunkLimit {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		chunkMax = chunkLimit / len(b) * len(b)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		if chunkMax == 0 {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			chunkMax = len(b)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	nb := bytealg.MakeNoZero(n)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	bp := copy(nb, b)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	for bp &lt; n {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		chunk := bp
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		if chunk &gt; chunkMax {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			chunk = chunkMax
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		bp += copy(nb[bp:], nb[:chunk])
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	return nb
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span><span class="comment">// ToUpper returns a copy of the byte slice s with all Unicode letters mapped to</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span><span class="comment">// their upper case.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>func ToUpper(s []byte) []byte {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	isASCII, hasLower := true, false
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		c := s[i]
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		if c &gt;= utf8.RuneSelf {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			isASCII = false
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			break
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		hasLower = hasLower || (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	if isASCII { <span class="comment">// optimize for ASCII-only byte slices.</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		if !hasLower {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			<span class="comment">// Just return a copy.</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			return append([]byte(&#34;&#34;), s...)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		b := bytealg.MakeNoZero(len(s))
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		for i := 0; i &lt; len(s); i++ {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			c := s[i]
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				c -= &#39;a&#39; - &#39;A&#39;
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			b[i] = c
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		return b
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	return Map(unicode.ToUpper, s)
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">// ToLower returns a copy of the byte slice s with all Unicode letters mapped to</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// their lower case.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>func ToLower(s []byte) []byte {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	isASCII, hasUpper := true, false
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		c := s[i]
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		if c &gt;= utf8.RuneSelf {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			isASCII = false
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			break
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		hasUpper = hasUpper || (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if isASCII { <span class="comment">// optimize for ASCII-only byte slices.</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		if !hasUpper {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			return append([]byte(&#34;&#34;), s...)
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		b := bytealg.MakeNoZero(len(s))
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		for i := 0; i &lt; len(s); i++ {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			c := s[i]
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			if &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>				c += &#39;a&#39; - &#39;A&#39;
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			b[i] = c
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		return b
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	return Map(unicode.ToLower, s)
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// ToTitle treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>func ToTitle(s []byte) []byte { return Map(unicode.ToTitle, s) }
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// ToUpperSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// upper case, giving priority to the special casing rules.</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>func ToUpperSpecial(c unicode.SpecialCase, s []byte) []byte {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	return Map(c.ToUpper, s)
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span><span class="comment">// ToLowerSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span><span class="comment">// lower case, giving priority to the special casing rules.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>func ToLowerSpecial(c unicode.SpecialCase, s []byte) []byte {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	return Map(c.ToLower, s)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>}
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// ToTitleSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// title case, giving priority to the special casing rules.</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>func ToTitleSpecial(c unicode.SpecialCase, s []byte) []byte {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	return Map(c.ToTitle, s)
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// ToValidUTF8 treats s as UTF-8-encoded bytes and returns a copy with each run of bytes</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// representing invalid UTF-8 replaced with the bytes in replacement, which may be empty.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>func ToValidUTF8(s, replacement []byte) []byte {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	b := make([]byte, 0, len(s)+len(replacement))
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	invalid := false <span class="comment">// previous byte was from an invalid UTF-8 sequence</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		c := s[i]
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		if c &lt; utf8.RuneSelf {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			i++
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			invalid = false
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			b = append(b, c)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			continue
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		_, wid := utf8.DecodeRune(s[i:])
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		if wid == 1 {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			i++
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			if !invalid {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				invalid = true
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>				b = append(b, replacement...)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			continue
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		invalid = false
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		b = append(b, s[i:i+wid]...)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		i += wid
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	return b
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">// isSeparator reports whether the rune could mark a word boundary.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// TODO: update when package unicode captures more of the properties.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>func isSeparator(r rune) bool {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	<span class="comment">// ASCII alphanumerics and underscore are not separators</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	if r &lt;= 0x7F {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		switch {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39;:
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			return false
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39;:
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			return false
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		case &#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39;:
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			return false
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		case r == &#39;_&#39;:
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			return false
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		return true
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	<span class="comment">// Letters and digits are not separators</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	if unicode.IsLetter(r) || unicode.IsDigit(r) {
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		return false
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	}
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, all we can do for now is treat spaces as separators.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	return unicode.IsSpace(r)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span><span class="comment">// Title treats s as UTF-8-encoded bytes and returns a copy with all Unicode letters that begin</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// words mapped to their title case.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span><span class="comment">// Deprecated: The rule Title uses for word boundaries does not handle Unicode</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span><span class="comment">// punctuation properly. Use golang.org/x/text/cases instead.</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>func Title(s []byte) []byte {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	<span class="comment">// Use a closure here to remember state.</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	<span class="comment">// Hackish but effective. Depends on Map scanning in order and calling</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	<span class="comment">// the closure once per rune.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	prev := &#39; &#39;
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	return Map(
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		func(r rune) rune {
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			if isSeparator(prev) {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>				prev = r
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>				return unicode.ToTitle(r)
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			prev = r
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>			return r
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		},
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		s)
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">// TrimLeftFunc treats s as UTF-8-encoded bytes and returns a subslice of s by slicing off</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// all leading UTF-8-encoded code points c that satisfy f(c).</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>func TrimLeftFunc(s []byte, f func(r rune) bool) []byte {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	i := indexFunc(s, f, false)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	if i == -1 {
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		return nil
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	return s[i:]
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span><span class="comment">// TrimRightFunc returns a subslice of s by slicing off all trailing</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// UTF-8-encoded code points c that satisfy f(c).</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func TrimRightFunc(s []byte, f func(r rune) bool) []byte {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	i := lastIndexFunc(s, f, false)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	if i &gt;= 0 &amp;&amp; s[i] &gt;= utf8.RuneSelf {
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		_, wid := utf8.DecodeRune(s[i:])
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		i += wid
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	} else {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		i++
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	return s[0:i]
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span><span class="comment">// TrimFunc returns a subslice of s by slicing off all leading and trailing</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// UTF-8-encoded code points c that satisfy f(c).</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>func TrimFunc(s []byte, f func(r rune) bool) []byte {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	return TrimRightFunc(TrimLeftFunc(s, f), f)
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span><span class="comment">// TrimPrefix returns s without the provided leading prefix string.</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span><span class="comment">// If s doesn&#39;t start with prefix, s is returned unchanged.</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>func TrimPrefix(s, prefix []byte) []byte {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	if HasPrefix(s, prefix) {
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		return s[len(prefix):]
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	}
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	return s
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// TrimSuffix returns s without the provided trailing suffix string.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// If s doesn&#39;t end with suffix, s is returned unchanged.</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func TrimSuffix(s, suffix []byte) []byte {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	if HasSuffix(s, suffix) {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		return s[:len(s)-len(suffix)]
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	}
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	return s
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">// IndexFunc interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span><span class="comment">// It returns the byte index in s of the first Unicode</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">// code point satisfying f(c), or -1 if none do.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>func IndexFunc(s []byte, f func(r rune) bool) int {
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	return indexFunc(s, f, true)
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span><span class="comment">// LastIndexFunc interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span><span class="comment">// It returns the byte index in s of the last Unicode</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span><span class="comment">// code point satisfying f(c), or -1 if none do.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>func LastIndexFunc(s []byte, f func(r rune) bool) int {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	return lastIndexFunc(s, f, true)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span><span class="comment">// indexFunc is the same as IndexFunc except that if</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span><span class="comment">// truth==false, the sense of the predicate function is</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span><span class="comment">// inverted.</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>func indexFunc(s []byte, f func(r rune) bool, truth bool) int {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	start := 0
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	for start &lt; len(s) {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		wid := 1
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		r := rune(s[start])
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			r, wid = utf8.DecodeRune(s[start:])
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		if f(r) == truth {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>			return start
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		start += wid
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	return -1
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span><span class="comment">// lastIndexFunc is the same as LastIndexFunc except that if</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span><span class="comment">// truth==false, the sense of the predicate function is</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span><span class="comment">// inverted.</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>func lastIndexFunc(s []byte, f func(r rune) bool, truth bool) int {
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	for i := len(s); i &gt; 0; {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		r, size := rune(s[i-1]), 1
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>			r, size = utf8.DecodeLastRune(s[0:i])
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		i -= size
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		if f(r) == truth {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>			return i
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	return -1
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">// asciiSet is a 32-byte value, where each bit represents the presence of a</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// given ASCII character in the set. The 128-bits of the lower 16 bytes,</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">// starting with the least-significant bit of the lowest word to the</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// most-significant bit of the highest word, map to the full range of all</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// 128 ASCII characters. The 128-bits of the upper 16 bytes will be zeroed,</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// ensuring that any non-ASCII character will be reported as not in the set.</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// This allocates a total of 32 bytes even though the upper half</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">// is unused to avoid bounds checks in asciiSet.contains.</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>type asciiSet [8]uint32
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span><span class="comment">// makeASCIISet creates a set of ASCII characters and reports whether all</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span><span class="comment">// characters in chars are ASCII.</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>func makeASCIISet(chars string) (as asciiSet, ok bool) {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	for i := 0; i &lt; len(chars); i++ {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		c := chars[i]
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		if c &gt;= utf8.RuneSelf {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			return as, false
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		as[c/32] |= 1 &lt;&lt; (c % 32)
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	}
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	return as, true
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span><span class="comment">// contains reports whether c is inside the set.</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>func (as *asciiSet) contains(c byte) bool {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	return (as[c/32] &amp; (1 &lt;&lt; (c % 32))) != 0
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>}
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// containsRune is a simplified version of strings.ContainsRune</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">// to avoid importing the strings package.</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">// We avoid bytes.ContainsRune to avoid allocating a temporary copy of s.</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>func containsRune(s string, r rune) bool {
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	for _, c := range s {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		if c == r {
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>			return true
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>		}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	}
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	return false
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>}
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span><span class="comment">// Trim returns a subslice of s by slicing off all leading and</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span><span class="comment">// trailing UTF-8-encoded code points contained in cutset.</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>func Trim(s []byte, cutset string) []byte {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		<span class="comment">// This is what we&#39;ve historically done.</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		return nil
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	}
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	if cutset == &#34;&#34; {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		return s
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	}
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	if len(cutset) == 1 &amp;&amp; cutset[0] &lt; utf8.RuneSelf {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		return trimLeftByte(trimRightByte(s, cutset[0]), cutset[0])
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	if as, ok := makeASCIISet(cutset); ok {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		return trimLeftASCII(trimRightASCII(s, &amp;as), &amp;as)
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	return trimLeftUnicode(trimRightUnicode(s, cutset), cutset)
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span><span class="comment">// TrimLeft returns a subslice of s by slicing off all leading</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span><span class="comment">// UTF-8-encoded code points contained in cutset.</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>func TrimLeft(s []byte, cutset string) []byte {
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		<span class="comment">// This is what we&#39;ve historically done.</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>		return nil
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	if cutset == &#34;&#34; {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		return s
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	if len(cutset) == 1 &amp;&amp; cutset[0] &lt; utf8.RuneSelf {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		return trimLeftByte(s, cutset[0])
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	}
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	if as, ok := makeASCIISet(cutset); ok {
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>		return trimLeftASCII(s, &amp;as)
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	}
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	return trimLeftUnicode(s, cutset)
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>func trimLeftByte(s []byte, c byte) []byte {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	for len(s) &gt; 0 &amp;&amp; s[0] == c {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		s = s[1:]
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		<span class="comment">// This is what we&#39;ve historically done.</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		return nil
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	}
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	return s
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>}
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>func trimLeftASCII(s []byte, as *asciiSet) []byte {
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		if !as.contains(s[0]) {
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			break
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		}
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		s = s[1:]
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		<span class="comment">// This is what we&#39;ve historically done.</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		return nil
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	}
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	return s
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>func trimLeftUnicode(s []byte, cutset string) []byte {
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		r, n := rune(s[0]), 1
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>			r, n = utf8.DecodeRune(s)
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		if !containsRune(cutset, r) {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>			break
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		s = s[n:]
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	}
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		<span class="comment">// This is what we&#39;ve historically done.</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		return nil
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	}
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	return s
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>}
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span><span class="comment">// TrimRight returns a subslice of s by slicing off all trailing</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span><span class="comment">// UTF-8-encoded code points that are contained in cutset.</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>func TrimRight(s []byte, cutset string) []byte {
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	if len(s) == 0 || cutset == &#34;&#34; {
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		return s
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	}
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>	if len(cutset) == 1 &amp;&amp; cutset[0] &lt; utf8.RuneSelf {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		return trimRightByte(s, cutset[0])
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	}
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	if as, ok := makeASCIISet(cutset); ok {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		return trimRightASCII(s, &amp;as)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	}
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	return trimRightUnicode(s, cutset)
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>func trimRightByte(s []byte, c byte) []byte {
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	for len(s) &gt; 0 &amp;&amp; s[len(s)-1] == c {
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		s = s[:len(s)-1]
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	}
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	return s
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>}
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>func trimRightASCII(s []byte, as *asciiSet) []byte {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		if !as.contains(s[len(s)-1]) {
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>			break
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		}
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		s = s[:len(s)-1]
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	}
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	return s
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>}
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>func trimRightUnicode(s []byte, cutset string) []byte {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		r, n := rune(s[len(s)-1]), 1
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>		if r &gt;= utf8.RuneSelf {
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>			r, n = utf8.DecodeLastRune(s)
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>		}
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		if !containsRune(cutset, r) {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>			break
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>		}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		s = s[:len(s)-n]
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	return s
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>}
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="comment">// TrimSpace returns a subslice of s by slicing off all leading and</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span><span class="comment">// trailing white space, as defined by Unicode.</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>func TrimSpace(s []byte) []byte {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	<span class="comment">// Fast path for ASCII: look for the first ASCII non-space byte</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	start := 0
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	for ; start &lt; len(s); start++ {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		c := s[start]
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		if c &gt;= utf8.RuneSelf {
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>			<span class="comment">// If we run into a non-ASCII byte, fall back to the</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>			<span class="comment">// slower unicode-aware method on the remaining bytes</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>			return TrimFunc(s[start:], unicode.IsSpace)
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>		}
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		if asciiSpace[c] == 0 {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>			break
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		}
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	<span class="comment">// Now look for the first ASCII non-space byte from the end</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	stop := len(s)
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	for ; stop &gt; start; stop-- {
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>		c := s[stop-1]
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		if c &gt;= utf8.RuneSelf {
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>			return TrimFunc(s[start:stop], unicode.IsSpace)
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>		}
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		if asciiSpace[c] == 0 {
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			break
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	}
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	<span class="comment">// At this point s[start:stop] starts and ends with an ASCII</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	<span class="comment">// non-space bytes, so we&#39;re done. Non-ASCII cases have already</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	<span class="comment">// been handled above.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	if start == stop {
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		<span class="comment">// Special case to preserve previous TrimLeftFunc behavior,</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		<span class="comment">// returning nil instead of empty slice if all spaces.</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		return nil
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	}
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	return s[start:stop]
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span><span class="comment">// Runes interprets s as a sequence of UTF-8-encoded code points.</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span><span class="comment">// It returns a slice of runes (Unicode code points) equivalent to s.</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>func Runes(s []byte) []rune {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	t := make([]rune, utf8.RuneCount(s))
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	i := 0
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	for len(s) &gt; 0 {
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>		r, l := utf8.DecodeRune(s)
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		t[i] = r
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>		i++
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		s = s[l:]
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	return t
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>}
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span><span class="comment">// Replace returns a copy of the slice s with the first n</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span><span class="comment">// non-overlapping instances of old replaced by new.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span><span class="comment">// If old is empty, it matches at the beginning of the slice</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span><span class="comment">// and after each UTF-8 sequence, yielding up to k+1 replacements</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span><span class="comment">// for a k-rune slice.</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span><span class="comment">// If n &lt; 0, there is no limit on the number of replacements.</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>func Replace(s, old, new []byte, n int) []byte {
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	m := 0
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	if n != 0 {
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		<span class="comment">// Compute number of replacements.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		m = Count(s, old)
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	}
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	if m == 0 {
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>		<span class="comment">// Just return a copy.</span>
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>		return append([]byte(nil), s...)
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	}
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	if n &lt; 0 || m &lt; n {
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		n = m
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	}
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	<span class="comment">// Apply replacements to buffer.</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	t := make([]byte, len(s)+n*(len(new)-len(old)))
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	w := 0
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	start := 0
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		j := start
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>		if len(old) == 0 {
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>				_, wid := utf8.DecodeRune(s[start:])
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>				j += wid
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>			}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>		} else {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>			j += Index(s[start:], old)
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		}
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>		w += copy(t[w:], s[start:j])
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		w += copy(t[w:], new)
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>		start = j + len(old)
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	}
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	w += copy(t[w:], s[start:])
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	return t[0:w]
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>}
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span><span class="comment">// ReplaceAll returns a copy of the slice s with all</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span><span class="comment">// non-overlapping instances of old replaced by new.</span>
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span><span class="comment">// If old is empty, it matches at the beginning of the slice</span>
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span><span class="comment">// and after each UTF-8 sequence, yielding up to k+1 replacements</span>
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span><span class="comment">// for a k-rune slice.</span>
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>func ReplaceAll(s, old, new []byte) []byte {
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	return Replace(s, old, new, -1)
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>}
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span><span class="comment">// EqualFold reports whether s and t, interpreted as UTF-8 strings,</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span><span class="comment">// are equal under simple Unicode case-folding, which is a more general</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span><span class="comment">// form of case-insensitivity.</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>func EqualFold(s, t []byte) bool {
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	<span class="comment">// ASCII fast path</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	i := 0
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	for ; i &lt; len(s) &amp;&amp; i &lt; len(t); i++ {
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>		sr := s[i]
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		tr := t[i]
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		if sr|tr &gt;= utf8.RuneSelf {
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>			goto hasUnicode
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>		}
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		<span class="comment">// Easy case.</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>		if tr == sr {
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>			continue
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		}
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		<span class="comment">// Make sr &lt; tr to simplify what follows.</span>
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		if tr &lt; sr {
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>			tr, sr = sr, tr
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		<span class="comment">// ASCII only, sr/tr must be upper/lower case</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= sr &amp;&amp; sr &lt;= &#39;Z&#39; &amp;&amp; tr == sr+&#39;a&#39;-&#39;A&#39; {
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>			continue
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>		return false
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	}
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	<span class="comment">// Check if we&#39;ve exhausted both strings.</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>	return len(s) == len(t)
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>hasUnicode:
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	s = s[i:]
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>	t = t[i:]
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	for len(s) != 0 &amp;&amp; len(t) != 0 {
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		<span class="comment">// Extract first rune from each.</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		var sr, tr rune
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		if s[0] &lt; utf8.RuneSelf {
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>			sr, s = rune(s[0]), s[1:]
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		} else {
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>			r, size := utf8.DecodeRune(s)
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>			sr, s = r, s[size:]
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		}
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		if t[0] &lt; utf8.RuneSelf {
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			tr, t = rune(t[0]), t[1:]
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		} else {
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>			r, size := utf8.DecodeRune(t)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>			tr, t = r, t[size:]
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>		}
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		<span class="comment">// If they match, keep going; if not, return false.</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>		<span class="comment">// Easy case.</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		if tr == sr {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>			continue
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		<span class="comment">// Make sr &lt; tr to simplify what follows.</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		if tr &lt; sr {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>			tr, sr = sr, tr
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>		}
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		<span class="comment">// Fast check for ASCII.</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		if tr &lt; utf8.RuneSelf {
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>			<span class="comment">// ASCII only, sr/tr must be upper/lower case</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>			if &#39;A&#39; &lt;= sr &amp;&amp; sr &lt;= &#39;Z&#39; &amp;&amp; tr == sr+&#39;a&#39;-&#39;A&#39; {
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>				continue
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>			}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>			return false
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>		<span class="comment">// General case. SimpleFold(x) returns the next equivalent rune &gt; x</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>		<span class="comment">// or wraps around to smaller values.</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>		r := unicode.SimpleFold(sr)
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>		for r != sr &amp;&amp; r &lt; tr {
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>			r = unicode.SimpleFold(r)
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		}
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		if r == tr {
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>			continue
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		}
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>		return false
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	}
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	<span class="comment">// One string is empty. Are both?</span>
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	return len(s) == len(t)
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>}
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span><span class="comment">// Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>func Index(s, sep []byte) int {
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>	n := len(sep)
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	switch {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>	case n == 0:
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>		return 0
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>	case n == 1:
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>		return IndexByte(s, sep[0])
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>	case n == len(s):
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		if Equal(sep, s) {
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>			return 0
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		}
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>		return -1
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>	case n &gt; len(s):
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>		return -1
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>	case n &lt;= bytealg.MaxLen:
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>		<span class="comment">// Use brute force when s and sep both are small</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>		if len(s) &lt;= bytealg.MaxBruteForce {
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>			return bytealg.Index(s, sep)
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>		}
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>		c0 := sep[0]
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>		c1 := sep[1]
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>		i := 0
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>		t := len(s) - n + 1
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>		fails := 0
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>		for i &lt; t {
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>			if s[i] != c0 {
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>				<span class="comment">// IndexByte is faster than bytealg.Index, so use it as long as</span>
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>				<span class="comment">// we&#39;re not getting lots of false positives.</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>				o := IndexByte(s[i+1:t], c0)
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>				if o &lt; 0 {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>					return -1
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>				}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>				i += o + 1
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>			}
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>			if s[i+1] == c1 &amp;&amp; Equal(s[i:i+n], sep) {
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>				return i
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>			}
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>			fails++
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>			i++
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>			<span class="comment">// Switch to bytealg.Index when IndexByte produces too many false positives.</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>			if fails &gt; bytealg.Cutover(i) {
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>				r := bytealg.Index(s[i:], sep)
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>				if r &gt;= 0 {
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>					return r + i
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>				}
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>				return -1
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>			}
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>		}
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>		return -1
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>	}
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	c0 := sep[0]
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	c1 := sep[1]
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	i := 0
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	fails := 0
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	t := len(s) - n + 1
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	for i &lt; t {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>		if s[i] != c0 {
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>			o := IndexByte(s[i+1:t], c0)
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>			if o &lt; 0 {
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>				break
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>			}
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>			i += o + 1
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		}
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>		if s[i+1] == c1 &amp;&amp; Equal(s[i:i+n], sep) {
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>			return i
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>		}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>		i++
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>		fails++
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>		if fails &gt;= 4+i&gt;&gt;4 &amp;&amp; i &lt; t {
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>			<span class="comment">// Give up on IndexByte, it isn&#39;t skipping ahead</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>			<span class="comment">// far enough to be better than Rabin-Karp.</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>			<span class="comment">// Experiments (using IndexPeriodic) suggest</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>			<span class="comment">// the cutover is about 16 byte skips.</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>			<span class="comment">// TODO: if large prefixes of sep are matching</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>			<span class="comment">// we should cutover at even larger average skips,</span>
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>			<span class="comment">// because Equal becomes that much more expensive.</span>
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>			<span class="comment">// This code does not take that effect into account.</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>			j := bytealg.IndexRabinKarp(s[i:], sep)
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>			if j &lt; 0 {
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>				return -1
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>			}
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>			return i + j
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>		}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	}
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	return -1
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>}
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span><span class="comment">// Cut slices s around the first instance of sep,</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span><span class="comment">// returning the text before and after sep.</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span><span class="comment">// The found result reports whether sep appears in s.</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span><span class="comment">// If sep does not appear in s, cut returns s, nil, false.</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span><span class="comment">// Cut returns slices of the original slice s, not copies.</span>
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>func Cut(s, sep []byte) (before, after []byte, found bool) {
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>	if i := Index(s, sep); i &gt;= 0 {
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>		return s[:i], s[i+len(sep):], true
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>	}
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>	return s, nil, false
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>}
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span><span class="comment">// Clone returns a copy of b[:len(b)].</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span><span class="comment">// The result may have additional unused capacity.</span>
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span><span class="comment">// Clone(nil) returns nil.</span>
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>func Clone(b []byte) []byte {
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	if b == nil {
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		return nil
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	}
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>	return append([]byte{}, b...)
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>}
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span><span class="comment">// CutPrefix returns s without the provided leading prefix byte slice</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span><span class="comment">// and reports whether it found the prefix.</span>
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span><span class="comment">// If s doesn&#39;t start with prefix, CutPrefix returns s, false.</span>
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span><span class="comment">// If prefix is the empty byte slice, CutPrefix returns s, true.</span>
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span><span class="comment">// CutPrefix returns slices of the original slice s, not copies.</span>
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>func CutPrefix(s, prefix []byte) (after []byte, found bool) {
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>	if !HasPrefix(s, prefix) {
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>		return s, false
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>	}
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>	return s[len(prefix):], true
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>}
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span><span class="comment">// CutSuffix returns s without the provided ending suffix byte slice</span>
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span><span class="comment">// and reports whether it found the suffix.</span>
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span><span class="comment">// If s doesn&#39;t end with suffix, CutSuffix returns s, false.</span>
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span><span class="comment">// If suffix is the empty byte slice, CutSuffix returns s, true.</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span><span class="comment">// CutSuffix returns slices of the original slice s, not copies.</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>func CutSuffix(s, suffix []byte) (before []byte, found bool) {
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	if !HasSuffix(s, suffix) {
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>		return s, false
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	}
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	return s[:len(s)-len(suffix)], true
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>}
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>
</pre><p><a href="bytes.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
