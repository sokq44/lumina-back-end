<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/cmd/trace/v2/goroutines.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./goroutines.go?s=468:563#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/cmd">cmd</a>/<a href="http://localhost:8080/src/cmd/trace">trace</a>/<a href="http://localhost:8080/src/cmd/trace/v2">v2</a>/<span class="text-muted">goroutines.go</span>
  </h1>





  <h2>
    Documentation: <a href="../../../../pkg/cmd/trace/v2">cmd/trace/v2</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Goroutine-related profiles.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package trace
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;cmp&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;html/template&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;internal/trace&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;internal/trace/traceviewer&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	tracev2 &#34;internal/trace/v2&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;slices&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// GoroutinesHandlerFunc returns a HandlerFunc that serves list of goroutine groups.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="selection">func GoroutinesHandlerFunc(summaries map[tracev2.GoID]*trace.GoroutineSummary) http.HandlerFunc</span> {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	return func(w http.ResponseWriter, r *http.Request) {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		<span class="comment">// goroutineGroup describes a group of goroutines grouped by name.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		type goroutineGroup struct {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>			Name     string        <span class="comment">// Start function.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>			N        int           <span class="comment">// Total number of goroutines in this group.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>			ExecTime time.Duration <span class="comment">// Total execution time of all goroutines in this group.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		<span class="comment">// Accumulate groups by Name.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		groupsByName := make(map[string]goroutineGroup)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		for _, summary := range summaries {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>			group := groupsByName[summary.Name]
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>			group.Name = summary.Name
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>			group.N++
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>			group.ExecTime += summary.ExecTime
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>			groupsByName[summary.Name] = group
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		var groups []goroutineGroup
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		for _, group := range groupsByName {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			groups = append(groups, group)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		slices.SortFunc(groups, func(a, b goroutineGroup) int {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			return cmp.Compare(b.ExecTime, a.ExecTime)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		})
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/html;charset=utf-8&#34;)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		if err := templGoroutines.Execute(w, groups); err != nil {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>			log.Printf(&#34;failed to execute template: %v&#34;, err)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>			return
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>var templGoroutines = template.Must(template.New(&#34;&#34;).Parse(`
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>&lt;html&gt;
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>&lt;style&gt;` + traceviewer.CommonStyle + `
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>table {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>  border-collapse: collapse;
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>td,
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>th {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>  border: 1px solid black;
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>  padding-left: 8px;
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>  padding-right: 8px;
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>  padding-top: 4px;
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>  padding-bottom: 4px;
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>&lt;/style&gt;
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>&lt;body&gt;
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>&lt;h1&gt;Goroutines&lt;/h1&gt;
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>Below is a table of all goroutines in the trace grouped by start location and sorted by the total execution time of the group.&lt;br&gt;
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>Click a start location to view more details about that group.&lt;br&gt;
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>&lt;table&gt;
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>  &lt;tr&gt;
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>    &lt;th&gt;Start location&lt;/th&gt;
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	&lt;th&gt;Count&lt;/th&gt;
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	&lt;th&gt;Total execution time&lt;/th&gt;
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>  &lt;/tr&gt;
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>{{range $}}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>  &lt;tr&gt;
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;/goroutine?name={{.Name}}&#34;&gt;{{or .Name &#34;(Inactive, no stack trace sampled)&#34;}}&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	&lt;td&gt;{{.N}}&lt;/td&gt;
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	&lt;td&gt;{{.ExecTime}}&lt;/td&gt;
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>  &lt;/tr&gt;
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>{{end}}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>&lt;/table&gt;
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>&lt;/body&gt;
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>&lt;/html&gt;
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>`))
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// GoroutineHandler creates a handler that serves information about</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// goroutines in a particular group.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func GoroutineHandler(summaries map[tracev2.GoID]*trace.GoroutineSummary) http.HandlerFunc {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	return func(w http.ResponseWriter, r *http.Request) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		goroutineName := r.FormValue(&#34;name&#34;)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		type goroutine struct {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			*trace.GoroutineSummary
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			NonOverlappingStats map[string]time.Duration
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			HasRangeTime        bool
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		<span class="comment">// Collect all the goroutines in the group.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		var (
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			goroutines              []goroutine
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			name                    string
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			totalExecTime, execTime time.Duration
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			maxTotalTime            time.Duration
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		validNonOverlappingStats := make(map[string]struct{})
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		validRangeStats := make(map[string]struct{})
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		for _, summary := range summaries {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			totalExecTime += summary.ExecTime
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			if summary.Name != goroutineName {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				continue
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			nonOverlappingStats := summary.NonOverlappingStats()
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			for name := range nonOverlappingStats {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				validNonOverlappingStats[name] = struct{}{}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			var totalRangeTime time.Duration
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			for name, dt := range summary.RangeTime {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				validRangeStats[name] = struct{}{}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>				totalRangeTime += dt
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			goroutines = append(goroutines, goroutine{
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				GoroutineSummary:    summary,
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>				NonOverlappingStats: nonOverlappingStats,
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>				HasRangeTime:        totalRangeTime != 0,
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			})
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			name = summary.Name
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			execTime += summary.ExecTime
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			if maxTotalTime &lt; summary.TotalTime {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>				maxTotalTime = summary.TotalTime
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		<span class="comment">// Compute the percent of total execution time these goroutines represent.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		execTimePercent := &#34;&#34;
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		if totalExecTime &gt; 0 {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			execTimePercent = fmt.Sprintf(&#34;%.2f%%&#34;, float64(execTime)/float64(totalExecTime)*100)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		<span class="comment">// Sort.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		sortBy := r.FormValue(&#34;sortby&#34;)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if _, ok := validNonOverlappingStats[sortBy]; ok {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			slices.SortFunc(goroutines, func(a, b goroutine) int {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				return cmp.Compare(b.NonOverlappingStats[sortBy], a.NonOverlappingStats[sortBy])
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			})
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		} else {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			<span class="comment">// Sort by total time by default.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			slices.SortFunc(goroutines, func(a, b goroutine) int {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>				return cmp.Compare(b.TotalTime, a.TotalTime)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			})
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		<span class="comment">// Write down all the non-overlapping stats and sort them.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		allNonOverlappingStats := make([]string, 0, len(validNonOverlappingStats))
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		for name := range validNonOverlappingStats {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			allNonOverlappingStats = append(allNonOverlappingStats, name)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		slices.SortFunc(allNonOverlappingStats, func(a, b string) int {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			if a == b {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>				return 0
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			if a == &#34;Execution time&#34; {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>				return -1
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			if b == &#34;Execution time&#34; {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>				return 1
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			return cmp.Compare(a, b)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		})
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		<span class="comment">// Write down all the range stats and sort them.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		allRangeStats := make([]string, 0, len(validRangeStats))
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		for name := range validRangeStats {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			allRangeStats = append(allRangeStats, name)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		sort.Strings(allRangeStats)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		err := templGoroutine.Execute(w, struct {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			Name                string
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			N                   int
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			ExecTimePercent     string
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			MaxTotal            time.Duration
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			Goroutines          []goroutine
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			NonOverlappingStats []string
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			RangeStats          []string
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}{
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			Name:                name,
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			N:                   len(goroutines),
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			ExecTimePercent:     execTimePercent,
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			MaxTotal:            maxTotalTime,
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			Goroutines:          goroutines,
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			NonOverlappingStats: allNonOverlappingStats,
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			RangeStats:          allRangeStats,
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		})
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		if err != nil {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			http.Error(w, fmt.Sprintf(&#34;failed to execute template: %v&#34;, err), http.StatusInternalServerError)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			return
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func stat2Color(statName string) string {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	color := &#34;#636363&#34;
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if strings.HasPrefix(statName, &#34;Block time&#34;) {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		color = &#34;#d01c8b&#34;
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	switch statName {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	case &#34;Sched wait time&#34;:
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		color = &#34;#2c7bb6&#34;
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	case &#34;Syscall execution time&#34;:
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		color = &#34;#7b3294&#34;
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	case &#34;Execution time&#34;:
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		color = &#34;#d7191c&#34;
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return color
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>var templGoroutine = template.Must(template.New(&#34;&#34;).Funcs(template.FuncMap{
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	&#34;percent&#34;: func(dividend, divisor time.Duration) template.HTML {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		if divisor == 0 {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			return &#34;&#34;
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		return template.HTML(fmt.Sprintf(&#34;(%.1f%%)&#34;, float64(dividend)/float64(divisor)*100))
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	},
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	&#34;headerStyle&#34;: func(statName string) template.HTMLAttr {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return template.HTMLAttr(fmt.Sprintf(&#34;style=\&#34;background-color: %s;\&#34;&#34;, stat2Color(statName)))
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	},
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	&#34;barStyle&#34;: func(statName string, dividend, divisor time.Duration) template.HTMLAttr {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		width := &#34;0&#34;
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if divisor != 0 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			width = fmt.Sprintf(&#34;%.2f%%&#34;, float64(dividend)/float64(divisor)*100)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return template.HTMLAttr(fmt.Sprintf(&#34;style=\&#34;width: %s; background-color: %s;\&#34;&#34;, width, stat2Color(statName)))
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	},
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}).Parse(`
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>&lt;!DOCTYPE html&gt;
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>&lt;title&gt;Goroutines: {{.Name}}&lt;/title&gt;
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>&lt;style&gt;` + traceviewer.CommonStyle + `
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>th {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>  background-color: #050505;
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>  color: #fff;
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>th.link {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>  cursor: pointer;
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>table {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>  border-collapse: collapse;
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>td,
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>th {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>  padding-left: 8px;
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>  padding-right: 8px;
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>  padding-top: 4px;
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>  padding-bottom: 4px;
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>.details tr:hover {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>  background-color: #f2f2f2;
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>.details td {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>  text-align: right;
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>  border: 1px solid black;
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>.details td.id {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>  text-align: left;
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>.stacked-bar-graph {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>  width: 300px;
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>  height: 10px;
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>  color: #414042;
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>  white-space: nowrap;
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>  font-size: 5px;
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>.stacked-bar-graph span {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>  display: inline-block;
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>  width: 100%;
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>  height: 100%;
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>  box-sizing: border-box;
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>  float: left;
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>  padding: 0;
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>&lt;/style&gt;
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>&lt;script&gt;
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>function reloadTable(key, value) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>  let params = new URLSearchParams(window.location.search);
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>  params.set(key, value);
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>  window.location.search = params.toString();
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>&lt;/script&gt;
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>&lt;h1&gt;Goroutines&lt;/h1&gt;
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>Table of contents
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>&lt;ul&gt;
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	&lt;li&gt;&lt;a href=&#34;#breakdown&#34;&gt;Breakdown&lt;/a&gt;&lt;/li&gt;
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	&lt;li&gt;&lt;a href=&#34;#ranges&#34;&gt;Special ranges&lt;/a&gt;&lt;/li&gt;
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>&lt;/ul&gt;
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>&lt;table class=&#34;summary&#34;&gt;
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		&lt;td&gt;Goroutine start location:&lt;/td&gt;
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		&lt;td&gt;&lt;code&gt;{{.Name}}&lt;/code&gt;&lt;/td&gt;
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		&lt;td&gt;Count:&lt;/td&gt;
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		&lt;td&gt;{{.N}}&lt;/td&gt;
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		&lt;td&gt;Execution Time:&lt;/td&gt;
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		&lt;td&gt;{{.ExecTimePercent}} of total program execution time &lt;/td&gt;
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		&lt;td&gt;Network wait profile:&lt;/td&gt;
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		&lt;td&gt; &lt;a href=&#34;/io?name={{.Name}}&#34;&gt;graph&lt;/a&gt; &lt;a href=&#34;/io?name={{.Name}}&amp;raw=1&#34; download=&#34;io.profile&#34;&gt;(download)&lt;/a&gt;&lt;/td&gt;
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		&lt;td&gt;Sync block profile:&lt;/td&gt;
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		&lt;td&gt; &lt;a href=&#34;/block?name={{.Name}}&#34;&gt;graph&lt;/a&gt; &lt;a href=&#34;/block?name={{.Name}}&amp;raw=1&#34; download=&#34;block.profile&#34;&gt;(download)&lt;/a&gt;&lt;/td&gt;
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		&lt;td&gt;Syscall profile:&lt;/td&gt;
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		&lt;td&gt; &lt;a href=&#34;/syscall?name={{.Name}}&#34;&gt;graph&lt;/a&gt; &lt;a href=&#34;/syscall?name={{.Name}}&amp;raw=1&#34; download=&#34;syscall.profile&#34;&gt;(download)&lt;/a&gt;&lt;/td&gt;
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		&lt;/tr&gt;
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		&lt;td&gt;Scheduler wait profile:&lt;/td&gt;
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		&lt;td&gt; &lt;a href=&#34;/sched?name={{.Name}}&#34;&gt;graph&lt;/a&gt; &lt;a href=&#34;/sched?name={{.Name}}&amp;raw=1&#34; download=&#34;sched.profile&#34;&gt;(download)&lt;/a&gt;&lt;/td&gt;
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>&lt;/table&gt;
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>&lt;h3 id=&#34;breakdown&#34;&gt;Breakdown&lt;/h3&gt;
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>The table below breaks down where each goroutine is spent its time during the
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>traced period.
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>All of the columns except total time are non-overlapping.
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>&lt;table class=&#34;details&#34;&gt;
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>&lt;tr&gt;
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>&lt;th&gt; Goroutine&lt;/th&gt;
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>&lt;th class=&#34;link&#34; onclick=&#34;reloadTable(&#39;sortby&#39;, &#39;Total time&#39;)&#34;&gt; Total&lt;/th&gt;
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>&lt;th&gt;&lt;/th&gt;
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>{{range $.NonOverlappingStats}}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>&lt;th class=&#34;link&#34; onclick=&#34;reloadTable(&#39;sortby&#39;, &#39;{{.}}&#39;)&#34; {{headerStyle .}}&gt; {{.}}&lt;/th&gt;
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>{{end}}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>&lt;/tr&gt;
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>{{range .Goroutines}}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	&lt;tr&gt;
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		&lt;td&gt; &lt;a href=&#34;/trace?goid={{.ID}}&#34;&gt;{{.ID}}&lt;/a&gt; &lt;/td&gt;
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		&lt;td&gt; {{ .TotalTime.String }} &lt;/td&gt;
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		&lt;td&gt;
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			&lt;div class=&#34;stacked-bar-graph&#34;&gt;
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			{{$Goroutine := .}}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			{{range $.NonOverlappingStats}}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				{{$Time := index $Goroutine.NonOverlappingStats .}}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				{{if $Time}}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>					&lt;span {{barStyle . $Time $.MaxTotal}}&gt;&amp;nbsp;&lt;/span&gt;
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				{{end}}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			{{end}}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			&lt;/div&gt;
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		&lt;/td&gt;
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		{{$Goroutine := .}}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		{{range $.NonOverlappingStats}}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			{{$Time := index $Goroutine.NonOverlappingStats .}}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			&lt;td&gt; {{$Time.String}}&lt;/td&gt;
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		{{end}}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	&lt;/tr&gt;
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>{{end}}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>&lt;/table&gt;
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>&lt;h3 id=&#34;ranges&#34;&gt;Special ranges&lt;/h3&gt;
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>The table below describes how much of the traced period each goroutine spent in
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>certain special time ranges.
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>If a goroutine has spent no time in any special time ranges, it is excluded from
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>the table.
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>For example, how much time it spent helping the GC. Note that these times do
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>overlap with the times from the first table.
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>In general the goroutine may not be executing in these special time ranges.
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>For example, it may have blocked while trying to help the GC.
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>This must be taken into account when interpreting the data.
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>&lt;br&gt;
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>&lt;table class=&#34;details&#34;&gt;
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>&lt;tr&gt;
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>&lt;th&gt; Goroutine&lt;/th&gt;
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>&lt;th&gt; Total&lt;/th&gt;
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>{{range $.RangeStats}}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>&lt;th {{headerStyle .}}&gt; {{.}}&lt;/th&gt;
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>{{end}}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>&lt;/tr&gt;
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>{{range .Goroutines}}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	{{if .HasRangeTime}}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		&lt;tr&gt;
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			&lt;td&gt; &lt;a href=&#34;/trace?goid={{.ID}}&#34;&gt;{{.ID}}&lt;/a&gt; &lt;/td&gt;
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			&lt;td&gt; {{ .TotalTime.String }} &lt;/td&gt;
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			{{$Goroutine := .}}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			{{range $.RangeStats}}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				{{$Time := index $Goroutine.RangeTime .}}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				&lt;td&gt; {{$Time.String}}&lt;/td&gt;
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			{{end}}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		&lt;/tr&gt;
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	{{end}}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>{{end}}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>&lt;/table&gt;
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>`))
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
</pre><p><a href="goroutines.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
