<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/compress/flate/deflate.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./deflate.go?s=18816:18888#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/compress">compress</a>/<a href="http://localhost:8080/src/compress/flate">flate</a>/<span class="text-muted">deflate.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/compress/flate">compress/flate</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package flate
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>const (
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	NoCompression      = 0
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	BestSpeed          = 1
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	BestCompression    = 9
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	DefaultCompression = -1
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// HuffmanOnly disables Lempel-Ziv match searching and only performs Huffman</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// entropy encoding. This mode is useful in compressing data that has</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// already been compressed with an LZ style algorithm (e.g. Snappy or LZ4)</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// that lacks an entropy encoder. Compression gains are achieved when</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// certain bytes in the input stream occur more frequently than others.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// Note that HuffmanOnly produces a compressed output that is</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// RFC 1951 compliant. That is, any valid DEFLATE decompressor will</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// continue to be able to decompress this output.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	HuffmanOnly = -2
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>const (
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	logWindowSize = 15
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	windowSize    = 1 &lt;&lt; logWindowSize
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	windowMask    = windowSize - 1
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// The LZ77 step produces a sequence of literal tokens and &lt;length, offset&gt;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// pair tokens. The offset is also known as distance. The underlying wire</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// format limits the range of lengths and offsets. For example, there are</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// 256 legitimate lengths: those in the range [3, 258]. This package&#39;s</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// compressor uses a higher minimum match length, enabling optimizations</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// such as finding matches via 32-bit loads and compares.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	baseMatchLength = 3       <span class="comment">// The smallest match length per the RFC section 3.2.5</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	minMatchLength  = 4       <span class="comment">// The smallest match length that the compressor actually emits</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	maxMatchLength  = 258     <span class="comment">// The largest match length</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	baseMatchOffset = 1       <span class="comment">// The smallest match offset</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	maxMatchOffset  = 1 &lt;&lt; 15 <span class="comment">// The largest match offset</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// The maximum number of tokens we put into a single flate block, just to</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// stop things from getting too large.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	maxFlateBlockTokens = 1 &lt;&lt; 14
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	maxStoreBlockSize   = 65535
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	hashBits            = 17 <span class="comment">// After 17 performance degrades</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	hashSize            = 1 &lt;&lt; hashBits
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	hashMask            = (1 &lt;&lt; hashBits) - 1
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	maxHashOffset       = 1 &lt;&lt; 24
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	skipNever = math.MaxInt32
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>type compressionLevel struct {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	level, good, lazy, nice, chain, fastSkipHashing int
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>var levels = []compressionLevel{
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	{0, 0, 0, 0, 0, 0}, <span class="comment">// NoCompression.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	{1, 0, 0, 0, 0, 0}, <span class="comment">// BestSpeed uses a custom algorithm; see deflatefast.go.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// For levels 2-3 we don&#39;t bother trying with lazy matches.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	{2, 4, 0, 16, 8, 5},
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	{3, 4, 0, 32, 32, 6},
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// Levels 4-9 use increasingly more lazy matching</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// and increasingly stringent conditions for &#34;good enough&#34;.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	{4, 4, 4, 16, 16, skipNever},
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	{5, 8, 16, 32, 32, skipNever},
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	{6, 8, 16, 128, 128, skipNever},
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	{7, 8, 32, 128, 256, skipNever},
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	{8, 32, 128, 258, 1024, skipNever},
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	{9, 32, 258, 258, 4096, skipNever},
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>type compressor struct {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	compressionLevel
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	w          *huffmanBitWriter
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	bulkHasher func([]byte, []uint32)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// compression algorithm</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	fill      func(*compressor, []byte) int <span class="comment">// copy data to window</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	step      func(*compressor)             <span class="comment">// process window</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	sync      bool                          <span class="comment">// requesting flush</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	bestSpeed *deflateFast                  <span class="comment">// Encoder for BestSpeed</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// Input hash chains</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// hashHead[hashValue] contains the largest inputIndex with the specified hash value</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// If hashHead[hashValue] is within the current window, then</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// hashPrev[hashHead[hashValue] &amp; windowMask] contains the previous index</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// with the same hash value.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	chainHead  int
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	hashHead   [hashSize]uint32
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	hashPrev   [windowSize]uint32
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	hashOffset int
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// input window: unprocessed data is window[index:windowEnd]</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	index         int
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	window        []byte
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	windowEnd     int
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	blockStart    int  <span class="comment">// window index where current tokens start</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	byteAvailable bool <span class="comment">// if true, still need to process window[index-1].</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// queued output tokens</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	tokens []token
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// deflate state</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	length         int
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	offset         int
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	maxInsertIndex int
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	err            error
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// hashMatch must be able to contain hashes for the maximum match length.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	hashMatch [maxMatchLength - 1]uint32
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (d *compressor) fillDeflate(b []byte) int {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if d.index &gt;= 2*windowSize-(minMatchLength+maxMatchLength) {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		<span class="comment">// shift the window by windowSize</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		copy(d.window, d.window[windowSize:2*windowSize])
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		d.index -= windowSize
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		d.windowEnd -= windowSize
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		if d.blockStart &gt;= windowSize {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			d.blockStart -= windowSize
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		} else {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			d.blockStart = math.MaxInt32
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		d.hashOffset += windowSize
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		if d.hashOffset &gt; maxHashOffset {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			delta := d.hashOffset - 1
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			d.hashOffset -= delta
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			d.chainHead -= delta
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			<span class="comment">// Iterate over slices instead of arrays to avoid copying</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			<span class="comment">// the entire table onto the stack (Issue #18625).</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			for i, v := range d.hashPrev[:] {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>				if int(v) &gt; delta {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>					d.hashPrev[i] = uint32(int(v) - delta)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				} else {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					d.hashPrev[i] = 0
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>				}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			for i, v := range d.hashHead[:] {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>				if int(v) &gt; delta {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>					d.hashHead[i] = uint32(int(v) - delta)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>				} else {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>					d.hashHead[i] = 0
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	n := copy(d.window[d.windowEnd:], b)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	d.windowEnd += n
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	return n
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (d *compressor) writeBlock(tokens []token, index int) error {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if index &gt; 0 {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		var window []byte
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if d.blockStart &lt;= index {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			window = d.window[d.blockStart:index]
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		d.blockStart = index
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		d.w.writeBlock(tokens, false, window)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return d.w.err
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return nil
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// fillWindow will fill the current window with the supplied</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// dictionary and calculate all hashes.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// This is much faster than doing a full encode.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Should only be used after a reset.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (d *compressor) fillWindow(b []byte) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// Do not fill window if we are in store-only mode.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if d.compressionLevel.level &lt; 2 {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if d.index != 0 || d.windowEnd != 0 {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		panic(&#34;internal error: fillWindow called with stale data&#34;)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// If we are given too much, cut it.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if len(b) &gt; windowSize {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		b = b[len(b)-windowSize:]
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// Add all to window.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	n := copy(d.window, b)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// Calculate 256 hashes at the time (more L1 cache hits)</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	loops := (n + 256 - minMatchLength) / 256
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	for j := 0; j &lt; loops; j++ {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		index := j * 256
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		end := index + 256 + minMatchLength - 1
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		if end &gt; n {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			end = n
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		toCheck := d.window[index:end]
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		dstSize := len(toCheck) - minMatchLength + 1
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		if dstSize &lt;= 0 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			continue
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		dst := d.hashMatch[:dstSize]
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		d.bulkHasher(toCheck, dst)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		for i, val := range dst {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			di := i + index
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			hh := &amp;d.hashHead[val&amp;hashMask]
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			<span class="comment">// Get previous value with the same hash.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			<span class="comment">// Our chain should point to the previous value.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			d.hashPrev[di&amp;windowMask] = *hh
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			<span class="comment">// Set the head of the hash chain to us.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			*hh = uint32(di + d.hashOffset)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// Update window information.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	d.windowEnd = n
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	d.index = n
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// Try to find a match starting at index whose length is greater than prevSize.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// We only look at chainCount possibilities before giving up.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (d *compressor) findMatch(pos int, prevHead int, prevLength int, lookahead int) (length, offset int, ok bool) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	minMatchLook := maxMatchLength
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if lookahead &lt; minMatchLook {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		minMatchLook = lookahead
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	win := d.window[0 : pos+minMatchLook]
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// We quit when we get a match that&#39;s at least nice long</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	nice := len(win) - pos
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if d.nice &lt; nice {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		nice = d.nice
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;ve got a match that&#39;s good enough, only look in 1/4 the chain.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	tries := d.chain
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	length = prevLength
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if length &gt;= d.good {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		tries &gt;&gt;= 2
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	wEnd := win[pos+length]
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	wPos := win[pos:]
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	minIndex := pos - windowSize
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	for i := prevHead; tries &gt; 0; tries-- {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		if wEnd == win[i+length] {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			n := matchLen(win[i:], wPos, minMatchLook)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			if n &gt; length &amp;&amp; (n &gt; minMatchLength || pos-i &lt;= 4096) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				length = n
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>				offset = pos - i
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				ok = true
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>				if n &gt;= nice {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>					<span class="comment">// The match is good enough that we don&#39;t try to find a better one.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>					break
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				wEnd = win[pos+n]
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		if i == minIndex {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			<span class="comment">// hashPrev[i &amp; windowMask] has already been overwritten, so stop now.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			break
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		i = int(d.hashPrev[i&amp;windowMask]) - d.hashOffset
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		if i &lt; minIndex || i &lt; 0 {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			break
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	return
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func (d *compressor) writeStoredBlock(buf []byte) error {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if d.w.writeStoredHeader(len(buf), false); d.w.err != nil {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		return d.w.err
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	d.w.writeBytes(buf)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	return d.w.err
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>const hashmul = 0x1e35a7bd
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// hash4 returns a hash representation of the first 4 bytes</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// of the supplied slice.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// The caller must ensure that len(b) &gt;= 4.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>func hash4(b []byte) uint32 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return ((uint32(b[3]) | uint32(b[2])&lt;&lt;8 | uint32(b[1])&lt;&lt;16 | uint32(b[0])&lt;&lt;24) * hashmul) &gt;&gt; (32 - hashBits)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// bulkHash4 will compute hashes using the same</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// algorithm as hash4.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>func bulkHash4(b []byte, dst []uint32) {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	if len(b) &lt; minMatchLength {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		return
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	hb := uint32(b[3]) | uint32(b[2])&lt;&lt;8 | uint32(b[1])&lt;&lt;16 | uint32(b[0])&lt;&lt;24
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	dst[0] = (hb * hashmul) &gt;&gt; (32 - hashBits)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	end := len(b) - minMatchLength + 1
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	for i := 1; i &lt; end; i++ {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		hb = (hb &lt;&lt; 8) | uint32(b[i+3])
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		dst[i] = (hb * hashmul) &gt;&gt; (32 - hashBits)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// matchLen returns the number of matching bytes in a and b</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// up to length &#39;max&#39;. Both slices must be at least &#39;max&#39;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// bytes in size.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>func matchLen(a, b []byte, max int) int {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	a = a[:max]
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	b = b[:len(a)]
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	for i, av := range a {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if b[i] != av {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			return i
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return max
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// encSpeed will compress and store the currently added data,</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// if enough has been accumulated or we at the end of the stream.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// Any error that occurred will be in d.err</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>func (d *compressor) encSpeed() {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// We only compress if we have maxStoreBlockSize.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	if d.windowEnd &lt; maxStoreBlockSize {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		if !d.sync {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			return
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		<span class="comment">// Handle small sizes.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		if d.windowEnd &lt; 128 {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			switch {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			case d.windowEnd == 0:
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>				return
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			case d.windowEnd &lt;= 16:
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>				d.err = d.writeStoredBlock(d.window[:d.windowEnd])
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			default:
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>				d.w.writeBlockHuff(false, d.window[:d.windowEnd])
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				d.err = d.w.err
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			d.windowEnd = 0
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			d.bestSpeed.reset()
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			return
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// Encode the block.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	d.tokens = d.bestSpeed.encode(d.tokens[:0], d.window[:d.windowEnd])
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// If we removed less than 1/16th, Huffman compress the block.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	if len(d.tokens) &gt; d.windowEnd-(d.windowEnd&gt;&gt;4) {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		d.w.writeBlockHuff(false, d.window[:d.windowEnd])
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	} else {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		d.w.writeBlockDynamic(d.tokens, false, d.window[:d.windowEnd])
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	d.err = d.w.err
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	d.windowEnd = 0
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>func (d *compressor) initDeflate() {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	d.window = make([]byte, 2*windowSize)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	d.hashOffset = 1
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	d.tokens = make([]token, 0, maxFlateBlockTokens+1)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	d.length = minMatchLength - 1
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	d.offset = 0
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	d.byteAvailable = false
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	d.index = 0
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	d.chainHead = -1
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	d.bulkHasher = bulkHash4
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>func (d *compressor) deflate() {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if d.windowEnd-d.index &lt; minMatchLength+maxMatchLength &amp;&amp; !d.sync {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		return
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	d.maxInsertIndex = d.windowEnd - (minMatchLength - 1)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>Loop:
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	for {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		if d.index &gt; d.windowEnd {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			panic(&#34;index &gt; windowEnd&#34;)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		lookahead := d.windowEnd - d.index
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		if lookahead &lt; minMatchLength+maxMatchLength {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			if !d.sync {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>				break Loop
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			if d.index &gt; d.windowEnd {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				panic(&#34;index &gt; windowEnd&#34;)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			if lookahead == 0 {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				<span class="comment">// Flush current output block if any.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>				if d.byteAvailable {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>					<span class="comment">// There is still one pending token that needs to be flushed</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>					d.tokens = append(d.tokens, literalToken(uint32(d.window[d.index-1])))
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>					d.byteAvailable = false
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				if len(d.tokens) &gt; 0 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>					if d.err = d.writeBlock(d.tokens, d.index); d.err != nil {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>						return
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>					}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>					d.tokens = d.tokens[:0]
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				break Loop
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		if d.index &lt; d.maxInsertIndex {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			<span class="comment">// Update the hash</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			hash := hash4(d.window[d.index : d.index+minMatchLength])
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			hh := &amp;d.hashHead[hash&amp;hashMask]
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			d.chainHead = int(*hh)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			d.hashPrev[d.index&amp;windowMask] = uint32(d.chainHead)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			*hh = uint32(d.index + d.hashOffset)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		prevLength := d.length
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		prevOffset := d.offset
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		d.length = minMatchLength - 1
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		d.offset = 0
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		minIndex := d.index - windowSize
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		if minIndex &lt; 0 {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			minIndex = 0
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		if d.chainHead-d.hashOffset &gt;= minIndex &amp;&amp;
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			(d.fastSkipHashing != skipNever &amp;&amp; lookahead &gt; minMatchLength-1 ||
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>				d.fastSkipHashing == skipNever &amp;&amp; lookahead &gt; prevLength &amp;&amp; prevLength &lt; d.lazy) {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			if newLength, newOffset, ok := d.findMatch(d.index, d.chainHead-d.hashOffset, minMatchLength-1, lookahead); ok {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>				d.length = newLength
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>				d.offset = newOffset
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if d.fastSkipHashing != skipNever &amp;&amp; d.length &gt;= minMatchLength ||
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			d.fastSkipHashing == skipNever &amp;&amp; prevLength &gt;= minMatchLength &amp;&amp; d.length &lt;= prevLength {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			<span class="comment">// There was a match at the previous step, and the current match is</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			<span class="comment">// not better. Output the previous match.</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			if d.fastSkipHashing != skipNever {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				d.tokens = append(d.tokens, matchToken(uint32(d.length-baseMatchLength), uint32(d.offset-baseMatchOffset)))
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			} else {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>				d.tokens = append(d.tokens, matchToken(uint32(prevLength-baseMatchLength), uint32(prevOffset-baseMatchOffset)))
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			<span class="comment">// Insert in the hash table all strings up to the end of the match.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			<span class="comment">// index and index-1 are already inserted. If there is not enough</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			<span class="comment">// lookahead, the last two strings are not inserted into the hash</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			<span class="comment">// table.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			if d.length &lt;= d.fastSkipHashing {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				var newIndex int
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				if d.fastSkipHashing != skipNever {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>					newIndex = d.index + d.length
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>				} else {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>					newIndex = d.index + prevLength - 1
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>				}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>				index := d.index
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				for index++; index &lt; newIndex; index++ {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>					if index &lt; d.maxInsertIndex {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>						hash := hash4(d.window[index : index+minMatchLength])
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>						<span class="comment">// Get previous value with the same hash.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>						<span class="comment">// Our chain should point to the previous value.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>						hh := &amp;d.hashHead[hash&amp;hashMask]
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>						d.hashPrev[index&amp;windowMask] = *hh
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>						<span class="comment">// Set the head of the hash chain to us.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>						*hh = uint32(index + d.hashOffset)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>					}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>				}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>				d.index = index
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>				if d.fastSkipHashing == skipNever {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>					d.byteAvailable = false
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>					d.length = minMatchLength - 1
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>				}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>			} else {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>				<span class="comment">// For matches this long, we don&#39;t bother inserting each individual</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>				<span class="comment">// item into the table.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>				d.index += d.length
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			if len(d.tokens) == maxFlateBlockTokens {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				<span class="comment">// The block includes the current character</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>				if d.err = d.writeBlock(d.tokens, d.index); d.err != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>					return
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>				}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>				d.tokens = d.tokens[:0]
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		} else {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			if d.fastSkipHashing != skipNever || d.byteAvailable {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>				i := d.index - 1
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>				if d.fastSkipHashing != skipNever {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>					i = d.index
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>				}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>				d.tokens = append(d.tokens, literalToken(uint32(d.window[i])))
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>				if len(d.tokens) == maxFlateBlockTokens {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>					if d.err = d.writeBlock(d.tokens, i+1); d.err != nil {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>						return
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>					}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>					d.tokens = d.tokens[:0]
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>				}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>			d.index++
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			if d.fastSkipHashing == skipNever {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>				d.byteAvailable = true
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>func (d *compressor) fillStore(b []byte) int {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	n := copy(d.window[d.windowEnd:], b)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	d.windowEnd += n
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return n
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>func (d *compressor) store() {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	if d.windowEnd &gt; 0 &amp;&amp; (d.windowEnd == maxStoreBlockSize || d.sync) {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		d.err = d.writeStoredBlock(d.window[:d.windowEnd])
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		d.windowEnd = 0
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// storeHuff compresses and stores the currently added data</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// when the d.window is full or we are at the end of the stream.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span><span class="comment">// Any error that occurred will be in d.err</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>func (d *compressor) storeHuff() {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if d.windowEnd &lt; len(d.window) &amp;&amp; !d.sync || d.windowEnd == 0 {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		return
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	d.w.writeBlockHuff(false, d.window[:d.windowEnd])
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	d.err = d.w.err
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	d.windowEnd = 0
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>func (d *compressor) write(b []byte) (n int, err error) {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	if d.err != nil {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		return 0, d.err
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	n = len(b)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	for len(b) &gt; 0 {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		d.step(d)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		b = b[d.fill(d, b):]
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		if d.err != nil {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			return 0, d.err
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	return n, nil
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>func (d *compressor) syncFlush() error {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	if d.err != nil {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return d.err
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	d.sync = true
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	d.step(d)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if d.err == nil {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		d.w.writeStoredHeader(0, false)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		d.w.flush()
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		d.err = d.w.err
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	d.sync = false
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	return d.err
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>func (d *compressor) init(w io.Writer, level int) (err error) {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	d.w = newHuffmanBitWriter(w)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	switch {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	case level == NoCompression:
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		d.window = make([]byte, maxStoreBlockSize)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		d.fill = (*compressor).fillStore
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		d.step = (*compressor).store
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	case level == HuffmanOnly:
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		d.window = make([]byte, maxStoreBlockSize)
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		d.fill = (*compressor).fillStore
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		d.step = (*compressor).storeHuff
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	case level == BestSpeed:
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		d.compressionLevel = levels[level]
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		d.window = make([]byte, maxStoreBlockSize)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		d.fill = (*compressor).fillStore
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		d.step = (*compressor).encSpeed
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		d.bestSpeed = newDeflateFast()
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		d.tokens = make([]token, maxStoreBlockSize)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	case level == DefaultCompression:
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		level = 6
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		fallthrough
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	case 2 &lt;= level &amp;&amp; level &lt;= 9:
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		d.compressionLevel = levels[level]
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		d.initDeflate()
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		d.fill = (*compressor).fillDeflate
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		d.step = (*compressor).deflate
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	default:
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;flate: invalid compression level %d: want value in range [-2, 9]&#34;, level)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	return nil
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>func (d *compressor) reset(w io.Writer) {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	d.w.reset(w)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	d.sync = false
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	d.err = nil
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	switch d.compressionLevel.level {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	case NoCompression:
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		d.windowEnd = 0
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	case BestSpeed:
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		d.windowEnd = 0
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		d.tokens = d.tokens[:0]
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		d.bestSpeed.reset()
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	default:
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		d.chainHead = -1
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		for i := range d.hashHead {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			d.hashHead[i] = 0
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		}
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		for i := range d.hashPrev {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			d.hashPrev[i] = 0
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		d.hashOffset = 1
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		d.index, d.windowEnd = 0, 0
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		d.blockStart, d.byteAvailable = 0, false
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		d.tokens = d.tokens[:0]
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		d.length = minMatchLength - 1
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		d.offset = 0
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		d.maxInsertIndex = 0
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>func (d *compressor) close() error {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	if d.err == errWriterClosed {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		return nil
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	if d.err != nil {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		return d.err
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	d.sync = true
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	d.step(d)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	if d.err != nil {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		return d.err
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	if d.w.writeStoredHeader(0, true); d.w.err != nil {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		return d.w.err
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	d.w.flush()
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	if d.w.err != nil {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		return d.w.err
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	d.err = errWriterClosed
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	return nil
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// NewWriter returns a new [Writer] compressing data at the given level.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// Following zlib, levels range from 1 ([BestSpeed]) to 9 ([BestCompression]);</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// higher levels typically run slower but compress more. Level 0</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">// ([NoCompression]) does not attempt any compression; it only adds the</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// necessary DEFLATE framing.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// Level -1 ([DefaultCompression]) uses the default compression level.</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// Level -2 ([HuffmanOnly]) will use Huffman compression only, giving</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// a very fast compression for all types of input, but sacrificing considerable</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">// compression efficiency.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">// If level is in the range [-2, 9] then the error returned will be nil.</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// Otherwise the error returned will be non-nil.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>func NewWriter(w io.Writer, level int) (*Writer, error) {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	var dw Writer
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	if err := dw.d.init(w, level); err != nil {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		return nil, err
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	return &amp;dw, nil
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="comment">// NewWriterDict is like [NewWriter] but initializes the new</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span><span class="comment">// [Writer] with a preset dictionary. The returned [Writer] behaves</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">// as if the dictionary had been written to it without producing</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span><span class="comment">// any compressed output. The compressed data written to w</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span><span class="comment">// can only be decompressed by a [Reader] initialized with the</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span><span class="comment">// same dictionary.</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span><span class="selection">func NewWriterDict(w io.Writer, level int, dict []byte) (*Writer, error)</span> {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	dw := &amp;dictWriter{w}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	zw, err := NewWriter(dw, level)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	if err != nil {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		return nil, err
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	zw.d.fillWindow(dict)
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	zw.dict = append(zw.dict, dict...) <span class="comment">// duplicate dictionary for Reset method.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	return zw, err
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>type dictWriter struct {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	w io.Writer
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>func (w *dictWriter) Write(b []byte) (n int, err error) {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	return w.w.Write(b)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>var errWriterClosed = errors.New(&#34;flate: closed writer&#34;)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// A Writer takes data written to it and writes the compressed</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// form of that data to an underlying writer (see [NewWriter]).</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>type Writer struct {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	d    compressor
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	dict []byte
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// Write writes data to w, which will eventually write the</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// compressed form of data to its underlying writer.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>func (w *Writer) Write(data []byte) (n int, err error) {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	return w.d.write(data)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// Flush flushes any pending data to the underlying writer.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">// It is useful mainly in compressed network protocols, to ensure that</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="comment">// a remote reader has enough data to reconstruct a packet.</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// Flush does not return until the data has been written.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">// Calling Flush when there is no pending data still causes the [Writer]</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">// to emit a sync marker of at least 4 bytes.</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span><span class="comment">// If the underlying writer returns an error, Flush returns that error.</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span><span class="comment">// In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>func (w *Writer) Flush() error {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	<span class="comment">// For more about flushing:</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	<span class="comment">// https://www.bolet.org/~pornin/deflate-flush.html</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	return w.d.syncFlush()
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span><span class="comment">// Close flushes and closes the writer.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>func (w *Writer) Close() error {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	return w.d.close()
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span><span class="comment">// Reset discards the writer&#39;s state and makes it equivalent to</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span><span class="comment">// the result of [NewWriter] or [NewWriterDict] called with dst</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span><span class="comment">// and w&#39;s level and dictionary.</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>func (w *Writer) Reset(dst io.Writer) {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	if dw, ok := w.d.w.writer.(*dictWriter); ok {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		<span class="comment">// w was created with NewWriterDict</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		dw.w = dst
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		w.d.reset(dw)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		w.d.fillWindow(w.dict)
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	} else {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		<span class="comment">// w was created with NewWriter</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		w.d.reset(dst)
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>
</pre><p><a href="deflate.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
