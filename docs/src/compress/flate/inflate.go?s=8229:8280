<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/compress/flate/inflate.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./inflate.go?s=8229:8280#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/compress">compress</a>/<a href="http://localhost:8080/src/compress/flate">flate</a>/<span class="text-muted">inflate.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/compress/flate">compress/flate</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package flate implements the DEFLATE compressed data format, described in</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// RFC 1951.  The gzip and zlib packages implement access to DEFLATE-based file</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// formats.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package flate
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>const (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	maxCodeLen = 16 <span class="comment">// max length of Huffman code</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// The next three numbers come from the RFC section 3.2.7, with the</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// additional proviso in section 3.2.5 which implies that distance codes</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// 30 and 31 should never occur in compressed data.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	maxNumLit  = 286
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	maxNumDist = 30
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	numCodes   = 19 <span class="comment">// number of codes in Huffman meta-code</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Initialize the fixedHuffmanDecoder only once upon first use.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>var fixedOnce sync.Once
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>var fixedHuffmanDecoder huffmanDecoder
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// A CorruptInputError reports the presence of corrupt input at a given offset.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>type CorruptInputError int64
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func (e CorruptInputError) Error() string {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	return &#34;flate: corrupt input before offset &#34; + strconv.FormatInt(int64(e), 10)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// An InternalError reports an error in the flate code itself.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>type InternalError string
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (e InternalError) Error() string { return &#34;flate: internal error: &#34; + string(e) }
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// A ReadError reports an error encountered while reading input.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// Deprecated: No longer returned.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>type ReadError struct {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Offset int64 <span class="comment">// byte offset where error occurred</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	Err    error <span class="comment">// error returned by underlying Read</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>func (e *ReadError) Error() string {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return &#34;flate: read error at offset &#34; + strconv.FormatInt(e.Offset, 10) + &#34;: &#34; + e.Err.Error()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// A WriteError reports an error encountered while writing output.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Deprecated: No longer returned.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>type WriteError struct {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Offset int64 <span class="comment">// byte offset where error occurred</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	Err    error <span class="comment">// error returned by underlying Write</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func (e *WriteError) Error() string {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return &#34;flate: write error at offset &#34; + strconv.FormatInt(e.Offset, 10) + &#34;: &#34; + e.Err.Error()
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Resetter resets a ReadCloser returned by [NewReader] or [NewReaderDict]</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// to switch to a new underlying [Reader]. This permits reusing a ReadCloser</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// instead of allocating a new one.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type Resetter interface {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Reset discards any buffered data and resets the Resetter as if it was</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// newly initialized with the given reader.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	Reset(r io.Reader, dict []byte) error
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// The data structure for decoding Huffman tables is based on that of</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// zlib. There is a lookup table of a fixed bit width (huffmanChunkBits),</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// For codes smaller than the table width, there are multiple entries</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// (each combination of trailing bits has the same value). For codes</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// larger than the table width, the table contains a link to an overflow</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// table. The width of each entry in the link table is the maximum code</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// size minus the chunk width.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// Note that you can do a lookup in the table even without all bits</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// filled. Since the extra bits are zero, and the DEFLATE Huffman codes</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// have the property that shorter codes come before longer ones, the</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// bit length estimate in the result is a lower bound on the actual</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// number of bits.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// See the following:</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	https://github.com/madler/zlib/raw/master/doc/algorithm.txt</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// chunk &amp; 15 is number of bits</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// chunk &gt;&gt; 4 is value, including table link</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>const (
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	huffmanChunkBits  = 9
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	huffmanNumChunks  = 1 &lt;&lt; huffmanChunkBits
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	huffmanCountMask  = 15
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	huffmanValueShift = 4
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>type huffmanDecoder struct {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	min      int                      <span class="comment">// the minimum code length</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	chunks   [huffmanNumChunks]uint32 <span class="comment">// chunks as described above</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	links    [][]uint32               <span class="comment">// overflow links</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	linkMask uint32                   <span class="comment">// mask the width of the link table</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Initialize Huffman decoding tables from array of code lengths.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Following this function, h is guaranteed to be initialized into a complete</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// tree (i.e., neither over-subscribed nor under-subscribed). The exception is a</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// degenerate case where the tree has only a single symbol with length 1. Empty</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// trees are permitted.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (h *huffmanDecoder) init(lengths []int) bool {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Sanity enables additional runtime tests during Huffman</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// table construction. It&#39;s intended to be used during</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// development to supplement the currently ad-hoc unit tests.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	const sanity = false
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if h.min != 0 {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		*h = huffmanDecoder{}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// Count number of codes of each length,</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// compute min and max length.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	var count [maxCodeLen]int
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	var min, max int
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	for _, n := range lengths {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if n == 0 {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			continue
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		if min == 0 || n &lt; min {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			min = n
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		if n &gt; max {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			max = n
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		count[n]++
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Empty tree. The decompressor.huffSym function will fail later if the tree</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// is used. Technically, an empty tree is only valid for the HDIST tree and</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// not the HCLEN and HLIT tree. However, a stream with an empty HCLEN tree</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// is guaranteed to fail since it will attempt to use the tree to decode the</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// codes for the HLIT and HDIST trees. Similarly, an empty HLIT tree is</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// guaranteed to fail later since the compressed data section must be</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// composed of at least one symbol (the end-of-block marker).</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if max == 0 {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		return true
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	code := 0
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	var nextcode [maxCodeLen]int
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	for i := min; i &lt;= max; i++ {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		code &lt;&lt;= 1
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		nextcode[i] = code
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		code += count[i]
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// Check that the coding is complete (i.e., that we&#39;ve</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// assigned all 2-to-the-max possible bit sequences).</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// Exception: To be compatible with zlib, we also need to</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// accept degenerate single-code codings. See also</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// TestDegenerateHuffmanCoding.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if code != 1&lt;&lt;uint(max) &amp;&amp; !(code == 1 &amp;&amp; max == 1) {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return false
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	h.min = min
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	if max &gt; huffmanChunkBits {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		numLinks := 1 &lt;&lt; (uint(max) - huffmanChunkBits)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		h.linkMask = uint32(numLinks - 1)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// create link tables</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		link := nextcode[huffmanChunkBits+1] &gt;&gt; 1
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		h.links = make([][]uint32, huffmanNumChunks-link)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		for j := uint(link); j &lt; huffmanNumChunks; j++ {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			reverse := int(bits.Reverse16(uint16(j)))
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			reverse &gt;&gt;= uint(16 - huffmanChunkBits)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			off := j - uint(link)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			if sanity &amp;&amp; h.chunks[reverse] != 0 {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>				panic(&#34;impossible: overwriting existing chunk&#34;)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			h.chunks[reverse] = uint32(off&lt;&lt;huffmanValueShift | (huffmanChunkBits + 1))
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			h.links[off] = make([]uint32, numLinks)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	for i, n := range lengths {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if n == 0 {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			continue
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		code := nextcode[n]
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		nextcode[n]++
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		chunk := uint32(i&lt;&lt;huffmanValueShift | n)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		reverse := int(bits.Reverse16(uint16(code)))
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		reverse &gt;&gt;= uint(16 - n)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		if n &lt;= huffmanChunkBits {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			for off := reverse; off &lt; len(h.chunks); off += 1 &lt;&lt; uint(n) {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				<span class="comment">// We should never need to overwrite</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>				<span class="comment">// an existing chunk. Also, 0 is</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				<span class="comment">// never a valid chunk, because the</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>				<span class="comment">// lower 4 &#34;count&#34; bits should be</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>				<span class="comment">// between 1 and 15.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>				if sanity &amp;&amp; h.chunks[off] != 0 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>					panic(&#34;impossible: overwriting existing chunk&#34;)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>				}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>				h.chunks[off] = chunk
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		} else {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			j := reverse &amp; (huffmanNumChunks - 1)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			if sanity &amp;&amp; h.chunks[j]&amp;huffmanCountMask != huffmanChunkBits+1 {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>				<span class="comment">// Longer codes should have been</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				<span class="comment">// associated with a link table above.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				panic(&#34;impossible: not an indirect chunk&#34;)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			value := h.chunks[j] &gt;&gt; huffmanValueShift
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			linktab := h.links[value]
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			reverse &gt;&gt;= huffmanChunkBits
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			for off := reverse; off &lt; len(linktab); off += 1 &lt;&lt; uint(n-huffmanChunkBits) {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				if sanity &amp;&amp; linktab[off] != 0 {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>					panic(&#34;impossible: overwriting existing chunk&#34;)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>				linktab[off] = chunk
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if sanity {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		<span class="comment">// Above we&#39;ve sanity checked that we never overwrote</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// an existing entry. Here we additionally check that</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		<span class="comment">// we filled the tables completely.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		for i, chunk := range h.chunks {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			if chunk == 0 {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				<span class="comment">// As an exception, in the degenerate</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				<span class="comment">// single-code case, we allow odd</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>				<span class="comment">// chunks to be missing.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				if code == 1 &amp;&amp; i%2 == 1 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>					continue
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				panic(&#34;impossible: missing chunk&#34;)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		for _, linktab := range h.links {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			for _, chunk := range linktab {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>				if chunk == 0 {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>					panic(&#34;impossible: missing chunk&#34;)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	return true
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// The actual read interface needed by [NewReader].</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// If the passed in io.Reader does not also have ReadByte,</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// the [NewReader] will introduce its own buffering.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="selection">type Reader interface {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	io.Reader
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	io.ByteReader
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// Decompress state.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>type decompressor struct {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// Input source.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	r       Reader
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	rBuf    *bufio.Reader <span class="comment">// created if provided io.Reader does not implement io.ByteReader</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	roffset int64
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// Input bits, in top of b.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	b  uint32
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	nb uint
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// Huffman decoders for literal/length, distance.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	h1, h2 huffmanDecoder
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// Length arrays used to define Huffman codes.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	bits     *[maxNumLit + maxNumDist]int
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	codebits *[numCodes]int
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">// Output history, buffer.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	dict dictDecoder
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// Temporary buffer (avoids repeated allocation).</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	buf [4]byte
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// Next step in the decompression,</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// and decompression state.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	step      func(*decompressor)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	stepState int
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	final     bool
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	err       error
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	toRead    []byte
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	hl, hd    *huffmanDecoder
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	copyLen   int
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	copyDist  int
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (f *decompressor) nextBlock() {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	for f.nb &lt; 1+2 {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		if f.err = f.moreBits(); f.err != nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			return
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	f.final = f.b&amp;1 == 1
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	f.b &gt;&gt;= 1
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	typ := f.b &amp; 3
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	f.b &gt;&gt;= 2
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	f.nb -= 1 + 2
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	switch typ {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	case 0:
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		f.dataBlock()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	case 1:
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// compressed, fixed Huffman tables</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		f.hl = &amp;fixedHuffmanDecoder
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		f.hd = nil
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		f.huffmanBlock()
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	case 2:
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// compressed, dynamic Huffman tables</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if f.err = f.readHuffman(); f.err != nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			break
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		f.hl = &amp;f.h1
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		f.hd = &amp;f.h2
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		f.huffmanBlock()
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	default:
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// 3 is reserved.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		f.err = CorruptInputError(f.roffset)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func (f *decompressor) Read(b []byte) (int, error) {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	for {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		if len(f.toRead) &gt; 0 {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			n := copy(b, f.toRead)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			f.toRead = f.toRead[n:]
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			if len(f.toRead) == 0 {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>				return n, f.err
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			return n, nil
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		if f.err != nil {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			return 0, f.err
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		f.step(f)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		if f.err != nil &amp;&amp; len(f.toRead) == 0 {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			f.toRead = f.dict.readFlush() <span class="comment">// Flush what&#39;s left in case of error</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func (f *decompressor) Close() error {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if f.err == io.EOF {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		return nil
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	return f.err
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// RFC 1951 section 3.2.7.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// Compression with dynamic Huffman codes</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>var codeOrder = [...]int{16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>func (f *decompressor) readHuffman() error {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	<span class="comment">// HLIT[5], HDIST[5], HCLEN[4].</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	for f.nb &lt; 5+5+4 {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if err := f.moreBits(); err != nil {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			return err
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	nlit := int(f.b&amp;0x1F) + 257
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if nlit &gt; maxNumLit {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		return CorruptInputError(f.roffset)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	f.b &gt;&gt;= 5
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	ndist := int(f.b&amp;0x1F) + 1
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if ndist &gt; maxNumDist {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		return CorruptInputError(f.roffset)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	f.b &gt;&gt;= 5
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	nclen := int(f.b&amp;0xF) + 4
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">// numCodes is 19, so nclen is always valid.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	f.b &gt;&gt;= 4
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	f.nb -= 5 + 5 + 4
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	<span class="comment">// (HCLEN+4)*3 bits: code lengths in the magic codeOrder order.</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	for i := 0; i &lt; nclen; i++ {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		for f.nb &lt; 3 {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			if err := f.moreBits(); err != nil {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				return err
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		f.codebits[codeOrder[i]] = int(f.b &amp; 0x7)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		f.b &gt;&gt;= 3
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		f.nb -= 3
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	for i := nclen; i &lt; len(codeOrder); i++ {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		f.codebits[codeOrder[i]] = 0
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	if !f.h1.init(f.codebits[0:]) {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return CorruptInputError(f.roffset)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	<span class="comment">// HLIT + 257 code lengths, HDIST + 1 code lengths,</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// using the code length Huffman code.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	for i, n := 0, nlit+ndist; i &lt; n; {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		x, err := f.huffSym(&amp;f.h1)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		if err != nil {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			return err
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		if x &lt; 16 {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			<span class="comment">// Actual length.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			f.bits[i] = x
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			i++
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			continue
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		<span class="comment">// Repeat previous length or zero.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		var rep int
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		var nb uint
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		var b int
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		switch x {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		default:
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			return InternalError(&#34;unexpected length code&#34;)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		case 16:
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			rep = 3
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			nb = 2
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			if i == 0 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>				return CorruptInputError(f.roffset)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			b = f.bits[i-1]
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		case 17:
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			rep = 3
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			nb = 3
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			b = 0
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		case 18:
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			rep = 11
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			nb = 7
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			b = 0
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		for f.nb &lt; nb {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			if err := f.moreBits(); err != nil {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				return err
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		rep += int(f.b &amp; uint32(1&lt;&lt;nb-1))
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		f.b &gt;&gt;= nb
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		f.nb -= nb
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		if i+rep &gt; n {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			return CorruptInputError(f.roffset)
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		for j := 0; j &lt; rep; j++ {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			f.bits[i] = b
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			i++
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if !f.h1.init(f.bits[0:nlit]) || !f.h2.init(f.bits[nlit:nlit+ndist]) {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		return CorruptInputError(f.roffset)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	<span class="comment">// As an optimization, we can initialize the min bits to read at a time</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">// for the HLIT tree to the length of the EOB marker since we know that</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">// every block must terminate with one. This preserves the property that</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// we never read any extra bytes after the end of the DEFLATE stream.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	if f.h1.min &lt; f.bits[endBlockMarker] {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		f.h1.min = f.bits[endBlockMarker]
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	return nil
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// Decode a single Huffman block from f.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// hl and hd are the Huffman states for the lit/length values</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// and the distance values, respectively. If hd == nil, using the</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// fixed distance encoding associated with fixed Huffman blocks.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>func (f *decompressor) huffmanBlock() {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	const (
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		stateInit = iota <span class="comment">// Zero value must be stateInit</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		stateDict
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	switch f.stepState {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	case stateInit:
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		goto readLiteral
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	case stateDict:
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		goto copyHistory
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>readLiteral:
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	<span class="comment">// Read literal and/or (length, distance) according to RFC section 3.2.3.</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	{
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		v, err := f.huffSym(f.hl)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		if err != nil {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			f.err = err
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			return
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		var n uint <span class="comment">// number of bits extra</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		var length int
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		switch {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		case v &lt; 256:
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			f.dict.writeByte(byte(v))
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>			if f.dict.availWrite() == 0 {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>				f.toRead = f.dict.readFlush()
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>				f.step = (*decompressor).huffmanBlock
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>				f.stepState = stateInit
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>				return
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			goto readLiteral
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		case v == 256:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			f.finishBlock()
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		<span class="comment">// otherwise, reference to older data</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		case v &lt; 265:
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			length = v - (257 - 3)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			n = 0
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		case v &lt; 269:
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			length = v*2 - (265*2 - 11)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			n = 1
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		case v &lt; 273:
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			length = v*4 - (269*4 - 19)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			n = 2
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		case v &lt; 277:
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			length = v*8 - (273*8 - 35)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			n = 3
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		case v &lt; 281:
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			length = v*16 - (277*16 - 67)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			n = 4
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		case v &lt; 285:
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			length = v*32 - (281*32 - 131)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			n = 5
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		case v &lt; maxNumLit:
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			length = 258
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			n = 0
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		default:
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			f.err = CorruptInputError(f.roffset)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			return
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		if n &gt; 0 {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			for f.nb &lt; n {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				if err = f.moreBits(); err != nil {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>					f.err = err
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>					return
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>				}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			length += int(f.b &amp; uint32(1&lt;&lt;n-1))
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			f.b &gt;&gt;= n
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			f.nb -= n
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		var dist int
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		if f.hd == nil {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			for f.nb &lt; 5 {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>				if err = f.moreBits(); err != nil {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>					f.err = err
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>					return
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>				}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			dist = int(bits.Reverse8(uint8(f.b &amp; 0x1F &lt;&lt; 3)))
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			f.b &gt;&gt;= 5
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			f.nb -= 5
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		} else {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			if dist, err = f.huffSym(f.hd); err != nil {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>				f.err = err
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>				return
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		switch {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		case dist &lt; 4:
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			dist++
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		case dist &lt; maxNumDist:
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			nb := uint(dist-2) &gt;&gt; 1
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			<span class="comment">// have 1 bit in bottom of dist, need nb more.</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			extra := (dist &amp; 1) &lt;&lt; nb
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			for f.nb &lt; nb {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>				if err = f.moreBits(); err != nil {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>					f.err = err
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>					return
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>				}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			extra |= int(f.b &amp; uint32(1&lt;&lt;nb-1))
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			f.b &gt;&gt;= nb
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			f.nb -= nb
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			dist = 1&lt;&lt;(nb+1) + 1 + extra
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		default:
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			f.err = CorruptInputError(f.roffset)
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			return
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		<span class="comment">// No check on length; encoding can be prescient.</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		if dist &gt; f.dict.histSize() {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			f.err = CorruptInputError(f.roffset)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			return
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		f.copyLen, f.copyDist = length, dist
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		goto copyHistory
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>copyHistory:
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// Perform a backwards copy according to RFC section 3.2.3.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	{
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		cnt := f.dict.tryWriteCopy(f.copyDist, f.copyLen)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		if cnt == 0 {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			cnt = f.dict.writeCopy(f.copyDist, f.copyLen)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		f.copyLen -= cnt
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		if f.dict.availWrite() == 0 || f.copyLen &gt; 0 {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			f.toRead = f.dict.readFlush()
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>			f.step = (*decompressor).huffmanBlock <span class="comment">// We need to continue this work</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			f.stepState = stateDict
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>			return
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		}
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		goto readLiteral
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span><span class="comment">// Copy a single uncompressed data block from input to output.</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>func (f *decompressor) dataBlock() {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	<span class="comment">// Uncompressed.</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">// Discard current half-byte.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	f.nb = 0
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	f.b = 0
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	<span class="comment">// Length then ones-complement of length.</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	nr, err := io.ReadFull(f.r, f.buf[0:4])
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	f.roffset += int64(nr)
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	if err != nil {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		f.err = noEOF(err)
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		return
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	n := int(f.buf[0]) | int(f.buf[1])&lt;&lt;8
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	nn := int(f.buf[2]) | int(f.buf[3])&lt;&lt;8
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	if uint16(nn) != uint16(^n) {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		f.err = CorruptInputError(f.roffset)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		return
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	if n == 0 {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		f.toRead = f.dict.readFlush()
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		f.finishBlock()
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		return
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	f.copyLen = n
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	f.copyData()
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// copyData copies f.copyLen bytes from the underlying reader into f.hist.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// It pauses for reads when f.hist is full.</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>func (f *decompressor) copyData() {
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	buf := f.dict.writeSlice()
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	if len(buf) &gt; f.copyLen {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		buf = buf[:f.copyLen]
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	cnt, err := io.ReadFull(f.r, buf)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	f.roffset += int64(cnt)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	f.copyLen -= cnt
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	f.dict.writeMark(cnt)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	if err != nil {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		f.err = noEOF(err)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		return
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	if f.dict.availWrite() == 0 || f.copyLen &gt; 0 {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		f.toRead = f.dict.readFlush()
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		f.step = (*decompressor).copyData
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		return
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	f.finishBlock()
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>func (f *decompressor) finishBlock() {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	if f.final {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		if f.dict.availRead() &gt; 0 {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			f.toRead = f.dict.readFlush()
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		f.err = io.EOF
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	f.step = (*decompressor).nextBlock
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// noEOF returns err, unless err == io.EOF, in which case it returns io.ErrUnexpectedEOF.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>func noEOF(e error) error {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	if e == io.EOF {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		return io.ErrUnexpectedEOF
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	return e
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>func (f *decompressor) moreBits() error {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	c, err := f.r.ReadByte()
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	if err != nil {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		return noEOF(err)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	f.roffset++
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	f.b |= uint32(c) &lt;&lt; f.nb
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	f.nb += 8
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	return nil
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// Read the next Huffman-encoded symbol from f according to h.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>func (f *decompressor) huffSym(h *huffmanDecoder) (int, error) {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	<span class="comment">// Since a huffmanDecoder can be empty or be composed of a degenerate tree</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	<span class="comment">// with single element, huffSym must error on these two edge cases. In both</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	<span class="comment">// cases, the chunks slice will be 0 for the invalid sequence, leading it</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	<span class="comment">// satisfy the n == 0 check below.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	n := uint(h.min)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	<span class="comment">// Optimization. Compiler isn&#39;t smart enough to keep f.b,f.nb in registers,</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	<span class="comment">// but is smart enough to keep local variables in registers, so use nb and b,</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	<span class="comment">// inline call to moreBits and reassign b,nb back to f on return.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	nb, b := f.nb, f.b
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	for {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		for nb &lt; n {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			c, err := f.r.ReadByte()
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			if err != nil {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>				f.b = b
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>				f.nb = nb
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				return 0, noEOF(err)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			f.roffset++
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			b |= uint32(c) &lt;&lt; (nb &amp; 31)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			nb += 8
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		chunk := h.chunks[b&amp;(huffmanNumChunks-1)]
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		n = uint(chunk &amp; huffmanCountMask)
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		if n &gt; huffmanChunkBits {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			chunk = h.links[chunk&gt;&gt;huffmanValueShift][(b&gt;&gt;huffmanChunkBits)&amp;h.linkMask]
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			n = uint(chunk &amp; huffmanCountMask)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		if n &lt;= nb {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			if n == 0 {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>				f.b = b
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>				f.nb = nb
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>				f.err = CorruptInputError(f.roffset)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>				return 0, f.err
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			f.b = b &gt;&gt; (n &amp; 31)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			f.nb = nb - n
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			return int(chunk &gt;&gt; huffmanValueShift), nil
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>func (f *decompressor) makeReader(r io.Reader) {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	if rr, ok := r.(Reader); ok {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		f.rBuf = nil
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		f.r = rr
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		return
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	<span class="comment">// Reuse rBuf if possible. Invariant: rBuf is always created (and owned) by decompressor.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	if f.rBuf != nil {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		f.rBuf.Reset(r)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	} else {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		<span class="comment">// bufio.NewReader will not return r, as r does not implement flate.Reader, so it is not bufio.Reader.</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		f.rBuf = bufio.NewReader(r)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	f.r = f.rBuf
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>func fixedHuffmanDecoderInit() {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	fixedOnce.Do(func() {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// These come from the RFC section 3.2.6.</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		var bits [288]int
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		for i := 0; i &lt; 144; i++ {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			bits[i] = 8
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		for i := 144; i &lt; 256; i++ {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			bits[i] = 9
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		for i := 256; i &lt; 280; i++ {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			bits[i] = 7
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		for i := 280; i &lt; 288; i++ {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			bits[i] = 8
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		fixedHuffmanDecoder.init(bits[:])
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	})
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>}
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>func (f *decompressor) Reset(r io.Reader, dict []byte) error {
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	*f = decompressor{
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		rBuf:     f.rBuf,
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		bits:     f.bits,
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		codebits: f.codebits,
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		dict:     f.dict,
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		step:     (*decompressor).nextBlock,
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	f.makeReader(r)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	f.dict.init(maxMatchOffset, dict)
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	return nil
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>}
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span><span class="comment">// NewReader returns a new ReadCloser that can be used</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span><span class="comment">// to read the uncompressed version of r.</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span><span class="comment">// If r does not also implement [io.ByteReader],</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span><span class="comment">// the decompressor may read more data than necessary from r.</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span><span class="comment">// The reader returns [io.EOF] after the final block in the DEFLATE stream has</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span><span class="comment">// been encountered. Any trailing data after the final block is ignored.</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span><span class="comment">// The [io.ReadCloser] returned by NewReader also implements [Resetter].</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>func NewReader(r io.Reader) io.ReadCloser {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	fixedHuffmanDecoderInit()
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	var f decompressor
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	f.makeReader(r)
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	f.bits = new([maxNumLit + maxNumDist]int)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	f.codebits = new([numCodes]int)
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	f.step = (*decompressor).nextBlock
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	f.dict.init(maxMatchOffset, nil)
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	return &amp;f
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>}
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// NewReaderDict is like [NewReader] but initializes the reader</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// with a preset dictionary. The returned [Reader] behaves as if</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// the uncompressed data stream started with the given dictionary,</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// which has already been read. NewReaderDict is typically used</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span><span class="comment">// to read data compressed by NewWriterDict.</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span><span class="comment">// The ReadCloser returned by NewReaderDict also implements [Resetter].</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>func NewReaderDict(r io.Reader, dict []byte) io.ReadCloser {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	fixedHuffmanDecoderInit()
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	var f decompressor
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	f.makeReader(r)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	f.bits = new([maxNumLit + maxNumDist]int)
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	f.codebits = new([numCodes]int)
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	f.step = (*decompressor).nextBlock
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	f.dict.init(maxMatchOffset, dict)
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	return &amp;f
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>
</pre><p><a href="inflate.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
