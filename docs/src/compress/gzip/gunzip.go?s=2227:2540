<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/compress/gzip/gunzip.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./gunzip.go?s=2227:2540#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/compress">compress</a>/<a href="http://localhost:8080/src/compress/gzip">gzip</a>/<span class="text-muted">gunzip.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/compress/gzip">compress/gzip</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package gzip implements reading and writing of gzip format compressed files,</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// as specified in RFC 1952.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package gzip
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;compress/flate&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;hash/crc32&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>const (
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	gzipID1     = 0x1f
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	gzipID2     = 0x8b
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	gzipDeflate = 8
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	flagText    = 1 &lt;&lt; 0
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	flagHdrCrc  = 1 &lt;&lt; 1
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	flagExtra   = 1 &lt;&lt; 2
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	flagName    = 1 &lt;&lt; 3
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	flagComment = 1 &lt;&lt; 4
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>var (
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// ErrChecksum is returned when reading GZIP data that has an invalid checksum.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	ErrChecksum = errors.New(&#34;gzip: invalid checksum&#34;)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// ErrHeader is returned when reading GZIP data that has an invalid header.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	ErrHeader = errors.New(&#34;gzip: invalid header&#34;)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>var le = binary.LittleEndian
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// noEOF converts io.EOF to io.ErrUnexpectedEOF.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func noEOF(err error) error {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		return io.ErrUnexpectedEOF
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return err
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// The gzip file stores a header giving metadata about the compressed file.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// That header is exposed as the fields of the [Writer] and [Reader] structs.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// Strings must be UTF-8 encoded and may only contain Unicode code points</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// U+0001 through U+00FF, due to limitations of the GZIP file format.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>type Header struct {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	Comment string    <span class="comment">// comment</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	Extra   []byte    <span class="comment">// &#34;extra data&#34;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	ModTime time.Time <span class="comment">// modification time</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Name    string    <span class="comment">// file name</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	OS      byte      <span class="comment">// operating system type</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// A Reader is an [io.Reader] that can be read to retrieve</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// uncompressed data from a gzip-format compressed file.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// In general, a gzip file can be a concatenation of gzip files,</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// each with its own header. Reads from the Reader</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// return the concatenation of the uncompressed data of each.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// Only the first header is recorded in the Reader fields.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Gzip files store a length and checksum of the uncompressed data.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// The Reader will return an [ErrChecksum] when [Reader.Read]</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// reaches the end of the uncompressed data if it does not</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// have the expected length or checksum. Clients should treat data</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// returned by [Reader.Read] as tentative until they receive the [io.EOF]</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// marking the end of the data.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="selection">type Reader struct {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	Header       </span><span class="selection-comment">// valid after NewReader or Reader.Reset</span><span class="selection">
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	r            flate.Reader
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	decompressor io.ReadCloser
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	digest       uint32 </span><span class="selection-comment">// CRC-32, IEEE polynomial (section 8)</span><span class="selection">
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	size         uint32 </span><span class="selection-comment">// Uncompressed size (section 2.3.1)</span><span class="selection">
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	buf          [512]byte
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	err          error
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	multistream  bool
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// NewReader creates a new [Reader] reading the given reader.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// If r does not also implement [io.ByteReader],</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// the decompressor may read more data than necessary from r.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to call Close on the [Reader] when done.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// The [Reader.Header] fields will be valid in the [Reader] returned.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func NewReader(r io.Reader) (*Reader, error) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	z := new(Reader)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	if err := z.Reset(r); err != nil {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		return nil, err
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return z, nil
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Reset discards the [Reader] z&#39;s state and makes it equivalent to the</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// result of its original state from [NewReader], but reading from r instead.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// This permits reusing a [Reader] rather than allocating a new one.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (z *Reader) Reset(r io.Reader) error {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	*z = Reader{
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		decompressor: z.decompressor,
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		multistream:  true,
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	if rr, ok := r.(flate.Reader); ok {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		z.r = rr
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	} else {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		z.r = bufio.NewReader(r)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	z.Header, z.err = z.readHeader()
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return z.err
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Multistream controls whether the reader supports multistream files.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// If enabled (the default), the [Reader] expects the input to be a sequence</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// of individually gzipped data streams, each with its own header and</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// trailer, ending at EOF. The effect is that the concatenation of a sequence</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// of gzipped files is treated as equivalent to the gzip of the concatenation</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// of the sequence. This is standard behavior for gzip readers.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// Calling Multistream(false) disables this behavior; disabling the behavior</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// can be useful when reading file formats that distinguish individual gzip</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// data streams or mix gzip data streams with other data streams.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// In this mode, when the [Reader] reaches the end of the data stream,</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// [Reader.Read] returns [io.EOF]. The underlying reader must implement [io.ByteReader]</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// in order to be left positioned just after the gzip stream.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// To start the next stream, call z.Reset(r) followed by z.Multistream(false).</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// If there is no next stream, z.Reset(r) will return [io.EOF].</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (z *Reader) Multistream(ok bool) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	z.multistream = ok
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// readString reads a NUL-terminated string from z.r.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// It treats the bytes read as being encoded as ISO 8859-1 (Latin-1) and</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// will output a string encoded using UTF-8.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// This method always updates z.digest with the data read.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func (z *Reader) readString() (string, error) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	var err error
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	needConv := false
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	for i := 0; ; i++ {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		if i &gt;= len(z.buf) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			return &#34;&#34;, ErrHeader
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		z.buf[i], err = z.r.ReadByte()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		if err != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if z.buf[i] &gt; 0x7f {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			needConv = true
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		if z.buf[i] == 0 {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			<span class="comment">// Digest covers the NUL terminator.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			z.digest = crc32.Update(z.digest, crc32.IEEETable, z.buf[:i+1])
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			<span class="comment">// Strings are ISO 8859-1, Latin-1 (RFC 1952, section 2.3.1).</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			if needConv {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>				s := make([]rune, 0, i)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>				for _, v := range z.buf[:i] {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>					s = append(s, rune(v))
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				return string(s), nil
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			return string(z.buf[:i]), nil
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// readHeader reads the GZIP header according to section 2.3.1.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// This method does not set z.err.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func (z *Reader) readHeader() (hdr Header, err error) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if _, err = io.ReadFull(z.r, z.buf[:10]); err != nil {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// RFC 1952, section 2.2, says the following:</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">//	A gzip file consists of a series of &#34;members&#34; (compressed data sets).</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		<span class="comment">// Other than this, the specification does not clarify whether a</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		<span class="comment">// &#34;series&#34; is defined as &#34;one or more&#34; or &#34;zero or more&#34;. To err on the</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		<span class="comment">// side of caution, Go interprets this to mean &#34;zero or more&#34;.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		<span class="comment">// Thus, it is okay to return io.EOF here.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return hdr, err
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if z.buf[0] != gzipID1 || z.buf[1] != gzipID2 || z.buf[2] != gzipDeflate {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		return hdr, ErrHeader
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	flg := z.buf[3]
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if t := int64(le.Uint32(z.buf[4:8])); t &gt; 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// Section 2.3.1, the zero value for MTIME means that the</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		<span class="comment">// modified time is not set.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		hdr.ModTime = time.Unix(t, 0)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// z.buf[8] is XFL and is currently ignored.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	hdr.OS = z.buf[9]
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	z.digest = crc32.ChecksumIEEE(z.buf[:10])
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if flg&amp;flagExtra != 0 {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		if _, err = io.ReadFull(z.r, z.buf[:2]); err != nil {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			return hdr, noEOF(err)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		z.digest = crc32.Update(z.digest, crc32.IEEETable, z.buf[:2])
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		data := make([]byte, le.Uint16(z.buf[:2]))
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if _, err = io.ReadFull(z.r, data); err != nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			return hdr, noEOF(err)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		z.digest = crc32.Update(z.digest, crc32.IEEETable, data)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		hdr.Extra = data
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	var s string
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if flg&amp;flagName != 0 {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if s, err = z.readString(); err != nil {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return hdr, noEOF(err)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		hdr.Name = s
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if flg&amp;flagComment != 0 {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		if s, err = z.readString(); err != nil {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			return hdr, noEOF(err)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		hdr.Comment = s
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if flg&amp;flagHdrCrc != 0 {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if _, err = io.ReadFull(z.r, z.buf[:2]); err != nil {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			return hdr, noEOF(err)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		digest := le.Uint16(z.buf[:2])
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		if digest != uint16(z.digest) {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			return hdr, ErrHeader
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	z.digest = 0
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	if z.decompressor == nil {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		z.decompressor = flate.NewReader(z.r)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	} else {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		z.decompressor.(flate.Resetter).Reset(z.r, nil)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	return hdr, nil
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// Read implements [io.Reader], reading uncompressed bytes from its underlying [Reader].</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (z *Reader) Read(p []byte) (n int, err error) {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if z.err != nil {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return 0, z.err
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	for n == 0 {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		n, z.err = z.decompressor.Read(p)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		z.digest = crc32.Update(z.digest, crc32.IEEETable, p[:n])
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		z.size += uint32(n)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		if z.err != io.EOF {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			<span class="comment">// In the normal case we return here.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			return n, z.err
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		<span class="comment">// Finished file; check checksum and size.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		if _, err := io.ReadFull(z.r, z.buf[:8]); err != nil {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			z.err = noEOF(err)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			return n, z.err
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		digest := le.Uint32(z.buf[:4])
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		size := le.Uint32(z.buf[4:8])
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		if digest != z.digest || size != z.size {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			z.err = ErrChecksum
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			return n, z.err
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		z.digest, z.size = 0, 0
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		<span class="comment">// File is ok; check if there is another.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		if !z.multistream {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			return n, io.EOF
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		z.err = nil <span class="comment">// Remove io.EOF</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		if _, z.err = z.readHeader(); z.err != nil {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			return n, z.err
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	return n, nil
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// Close closes the [Reader]. It does not close the underlying [io.Reader].</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// In order for the GZIP checksum to be verified, the reader must be</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// fully consumed until the [io.EOF].</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func (z *Reader) Close() error { return z.decompressor.Close() }
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
</pre><p><a href="gunzip.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
