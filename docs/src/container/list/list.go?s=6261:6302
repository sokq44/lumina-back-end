<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/container/list/list.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./list.go?s=6261:6302#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/container">container</a>/<a href="http://localhost:8080/src/container/list">list</a>/<span class="text-muted">list.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/container/list">container/list</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package list implements a doubly linked list.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// To iterate over a list (where l is a *List):</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//	for e := l.Front(); e != nil; e = e.Next() {</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//		// do something with e.Value</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>package list
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Element is an element of a linked list.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type Element struct {
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	<span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	<span class="comment">// To simplify the implementation, internally a list l is implemented</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// list element (l.Back()) and the previous element of the first list</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// element (l.Front()).</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	next, prev *Element
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// The list to which this element belongs.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	list *List
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// The value stored with this element.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Value any
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Next returns the next list element or nil.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func (e *Element) Next() *Element {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	if p := e.next; e.list != nil &amp;&amp; p != &amp;e.list.root {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		return p
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	return nil
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Prev returns the previous list element or nil.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (e *Element) Prev() *Element {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	if p := e.prev; e.list != nil &amp;&amp; p != &amp;e.list.root {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		return p
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	return nil
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// List represents a doubly linked list.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// The zero value for List is an empty list ready to use.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>type List struct {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	len  int     <span class="comment">// current list length excluding (this) sentinel element</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Init initializes or clears list l.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (l *List) Init() *List {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	l.root.next = &amp;l.root
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	l.root.prev = &amp;l.root
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	l.len = 0
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	return l
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// New returns an initialized list.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func New() *List { return new(List).Init() }
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// Len returns the number of elements of list l.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// The complexity is O(1).</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func (l *List) Len() int { return l.len }
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Front returns the first element of list l or nil if the list is empty.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>func (l *List) Front() *Element {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	if l.len == 0 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		return nil
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return l.root.next
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Back returns the last element of list l or nil if the list is empty.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func (l *List) Back() *Element {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if l.len == 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		return nil
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return l.root.prev
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// lazyInit lazily initializes a zero List value.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (l *List) lazyInit() {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if l.root.next == nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		l.Init()
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// insert inserts e after at, increments l.len, and returns e.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func (l *List) insert(e, at *Element) *Element {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	e.prev = at
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	e.next = at.next
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	e.prev.next = e
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	e.next.prev = e
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	e.list = l
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	l.len++
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	return e
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// insertValue is a convenience wrapper for insert(&amp;Element{Value: v}, at).</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (l *List) insertValue(v any, at *Element) *Element {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return l.insert(&amp;Element{Value: v}, at)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// remove removes e from its list, decrements l.len</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (l *List) remove(e *Element) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	e.prev.next = e.next
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	e.next.prev = e.prev
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	e.next = nil <span class="comment">// avoid memory leaks</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	e.prev = nil <span class="comment">// avoid memory leaks</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	e.list = nil
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	l.len--
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// move moves e to next to at.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func (l *List) move(e, at *Element) {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	if e == at {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		return
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	e.prev.next = e.next
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	e.next.prev = e.prev
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	e.prev = at
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	e.next = at.next
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	e.prev.next = e
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	e.next.prev = e
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// Remove removes e from l if e is an element of list l.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// It returns the element value e.Value.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// The element must not be nil.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (l *List) Remove(e *Element) any {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if e.list == l {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		<span class="comment">// if e.list == l, l must have been initialized when e was inserted</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">// in l or l == nil (e is a zero Element) and l.remove will crash</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		l.remove(e)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return e.Value
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// PushFront inserts a new element e with value v at the front of list l and returns e.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (l *List) PushFront(v any) *Element {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	l.lazyInit()
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	return l.insertValue(v, &amp;l.root)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// PushBack inserts a new element e with value v at the back of list l and returns e.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>func (l *List) PushBack(v any) *Element {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	l.lazyInit()
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return l.insertValue(v, l.root.prev)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// InsertBefore inserts a new element e with value v immediately before mark and returns e.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// If mark is not an element of l, the list is not modified.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// The mark must not be nil.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (l *List) InsertBefore(v any, mark *Element) *Element {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if mark.list != l {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		return nil
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// see comment in List.Remove about initialization of l</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return l.insertValue(v, mark.prev)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// InsertAfter inserts a new element e with value v immediately after mark and returns e.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// If mark is not an element of l, the list is not modified.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// The mark must not be nil.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (l *List) InsertAfter(v any, mark *Element) *Element {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if mark.list != l {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return nil
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// see comment in List.Remove about initialization of l</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return l.insertValue(v, mark)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// MoveToFront moves element e to the front of list l.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// If e is not an element of l, the list is not modified.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// The element must not be nil.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (l *List) MoveToFront(e *Element) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if e.list != l || l.root.next == e {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// see comment in List.Remove about initialization of l</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	l.move(e, &amp;l.root)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// MoveToBack moves element e to the back of list l.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// If e is not an element of l, the list is not modified.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// The element must not be nil.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (l *List) MoveToBack(e *Element) {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if e.list != l || l.root.prev == e {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		return
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// see comment in List.Remove about initialization of l</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	l.move(e, l.root.prev)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// MoveBefore moves element e to its new position before mark.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// If e or mark is not an element of l, or e == mark, the list is not modified.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// The element and mark must not be nil.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func (l *List) MoveBefore(e, mark *Element) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if e.list != l || e == mark || mark.list != l {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	l.move(e, mark.prev)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// MoveAfter moves element e to its new position after mark.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// If e or mark is not an element of l, or e == mark, the list is not modified.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// The element and mark must not be nil.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (l *List) MoveAfter(e, mark *Element) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if e.list != l || e == mark || mark.list != l {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		return
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	l.move(e, mark)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// PushBackList inserts a copy of another list at the back of list l.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// The lists l and other may be the same. They must not be nil.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func (l *List) PushBackList(other *List) {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	l.lazyInit()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	for i, e := other.Len(), other.Front(); i &gt; 0; i, e = i-1, e.Next() {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		l.insertValue(e.Value, l.root.prev)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// PushFrontList inserts a copy of another list at the front of list l.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// The lists l and other may be the same. They must not be nil.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="selection">func (l *List) PushFrontList(other *List)</span> {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	l.lazyInit()
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	for i, e := other.Len(), other.Back(); i &gt; 0; i, e = i-1, e.Prev() {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		l.insertValue(e.Value, &amp;l.root)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
</pre><p><a href="list.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
