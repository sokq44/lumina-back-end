<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/cipher/gcm.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./gcm.go?s=3877:3939#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/cipher">cipher</a>/<span class="text-muted">gcm.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/cipher">crypto/cipher</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package cipher
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;crypto/internal/alias&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// AEAD is a cipher mode providing authenticated encryption with associated</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// data. For a description of the methodology, see</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// https://en.wikipedia.org/wiki/Authenticated_encryption.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type AEAD interface {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// NonceSize returns the size of the nonce that must be passed to Seal</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// and Open.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	NonceSize() int
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// Overhead returns the maximum difference between the lengths of a</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// plaintext and its ciphertext.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Overhead() int
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// Seal encrypts and authenticates plaintext, authenticates the</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// additional data and appends the result to dst, returning the updated</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// slice. The nonce must be NonceSize() bytes long and unique for all</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// time, for a given key.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// To reuse plaintext&#39;s storage for the encrypted output, use plaintext[:0]</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Seal(dst, nonce, plaintext, additionalData []byte) []byte
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// Open decrypts and authenticates ciphertext, authenticates the</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// additional data and, if successful, appends the resulting plaintext</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// to dst, returning the updated slice. The nonce must be NonceSize()</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// bytes long and both it and the additional data must match the</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// value passed to Seal.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// To reuse ciphertext&#39;s storage for the decrypted output, use ciphertext[:0]</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// Even if the function fails, the contents of dst, up to its capacity,</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// may be overwritten.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	Open(dst, nonce, ciphertext, additionalData []byte) ([]byte, error)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// gcmAble is an interface implemented by ciphers that have a specific optimized</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// implementation of GCM, like crypto/aes. NewGCM will check for this interface</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// and return the specific AEAD if found.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>type gcmAble interface {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	NewGCM(nonceSize, tagSize int) (AEAD, error)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// gcmFieldElement represents a value in GF(2¹²⁸). In order to reflect the GCM</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// standard and make binary.BigEndian suitable for marshaling these values, the</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// bits are stored in big endian order. For example:</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//	the coefficient of x⁰ can be obtained by v.low &gt;&gt; 63.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//	the coefficient of x⁶³ can be obtained by v.low &amp; 1.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//	the coefficient of x⁶⁴ can be obtained by v.high &gt;&gt; 63.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//	the coefficient of x¹²⁷ can be obtained by v.high &amp; 1.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type gcmFieldElement struct {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	low, high uint64
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// gcm represents a Galois Counter Mode with a specific key. See</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// https://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>type gcm struct {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	cipher    Block
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	nonceSize int
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	tagSize   int
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// productTable contains the first sixteen powers of the key, H.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// However, they are in bit reversed order. See NewGCMWithNonceSize.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	productTable [16]gcmFieldElement
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// NewGCM returns the given 128-bit, block cipher wrapped in Galois Counter Mode</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// with the standard nonce length.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// In general, the GHASH operation performed by this implementation of GCM is not constant-time.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// An exception is when the underlying [Block] was created by aes.NewCipher</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// on systems with hardware support for AES. See the [crypto/aes] package documentation for details.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func NewGCM(cipher Block) (AEAD, error) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return newGCMWithNonceAndTagSize(cipher, gcmStandardNonceSize, gcmTagSize)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// NewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Counter Mode, which accepts nonces of the given length. The length must not</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// be zero.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Only use this function if you require compatibility with an existing</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// cryptosystem that uses non-standard nonce lengths. All other users should use</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// [NewGCM], which is faster and more resistant to misuse.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="selection">func NewGCMWithNonceSize(cipher Block, size int) (AEAD, error)</span> {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return newGCMWithNonceAndTagSize(cipher, size, gcmTagSize)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// NewGCMWithTagSize returns the given 128-bit, block cipher wrapped in Galois</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// Counter Mode, which generates tags with the given length.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Tag sizes between 12 and 16 bytes are allowed.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Only use this function if you require compatibility with an existing</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// cryptosystem that uses non-standard tag lengths. All other users should use</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// [NewGCM], which is more resistant to misuse.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func NewGCMWithTagSize(cipher Block, tagSize int) (AEAD, error) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return newGCMWithNonceAndTagSize(cipher, gcmStandardNonceSize, tagSize)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func newGCMWithNonceAndTagSize(cipher Block, nonceSize, tagSize int) (AEAD, error) {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if tagSize &lt; gcmMinimumTagSize || tagSize &gt; gcmBlockSize {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		return nil, errors.New(&#34;cipher: incorrect tag size given to GCM&#34;)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if nonceSize &lt;= 0 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		return nil, errors.New(&#34;cipher: the nonce can&#39;t have zero length, or the security of the key will be immediately compromised&#34;)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	if cipher, ok := cipher.(gcmAble); ok {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		return cipher.NewGCM(nonceSize, tagSize)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if cipher.BlockSize() != gcmBlockSize {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return nil, errors.New(&#34;cipher: NewGCM requires 128-bit block cipher&#34;)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	var key [gcmBlockSize]byte
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	cipher.Encrypt(key[:], key[:])
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	g := &amp;gcm{cipher: cipher, nonceSize: nonceSize, tagSize: tagSize}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// We precompute 16 multiples of |key|. However, when we do lookups</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// into this table we&#39;ll be using bits from a field element and</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// therefore the bits will be in the reverse order. So normally one</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// would expect, say, 4*key to be in index 4 of the table but due to</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// this bit ordering it will actually be in index 0010 (base 2) = 2.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	x := gcmFieldElement{
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		binary.BigEndian.Uint64(key[:8]),
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		binary.BigEndian.Uint64(key[8:]),
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	g.productTable[reverseBits(1)] = x
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	for i := 2; i &lt; 16; i += 2 {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		g.productTable[reverseBits(i)] = gcmDouble(&amp;g.productTable[reverseBits(i/2)])
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		g.productTable[reverseBits(i+1)] = gcmAdd(&amp;g.productTable[reverseBits(i)], &amp;x)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return g, nil
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>const (
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	gcmBlockSize         = 16
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	gcmTagSize           = 16
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	gcmMinimumTagSize    = 12 <span class="comment">// NIST SP 800-38D recommends tags with 12 or more bytes.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	gcmStandardNonceSize = 12
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (g *gcm) NonceSize() int {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	return g.nonceSize
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (g *gcm) Overhead() int {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return g.tagSize
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>func (g *gcm) Seal(dst, nonce, plaintext, data []byte) []byte {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if len(nonce) != g.nonceSize {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: incorrect nonce length given to GCM&#34;)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	if uint64(len(plaintext)) &gt; ((1&lt;&lt;32)-2)*uint64(g.cipher.BlockSize()) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: message too large for GCM&#34;)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	ret, out := sliceForAppend(dst, len(plaintext)+g.tagSize)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if alias.InexactOverlap(out, plaintext) {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: invalid buffer overlap&#34;)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	var counter, tagMask [gcmBlockSize]byte
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	g.deriveCounter(&amp;counter, nonce)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	g.cipher.Encrypt(tagMask[:], counter[:])
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	gcmInc32(&amp;counter)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	g.counterCrypt(out, plaintext, &amp;counter)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	var tag [gcmTagSize]byte
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	g.auth(tag[:], out[:len(plaintext)], data, &amp;tagMask)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	copy(out[len(plaintext):], tag[:])
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return ret
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>var errOpen = errors.New(&#34;cipher: message authentication failed&#34;)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func (g *gcm) Open(dst, nonce, ciphertext, data []byte) ([]byte, error) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if len(nonce) != g.nonceSize {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: incorrect nonce length given to GCM&#34;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// Sanity check to prevent the authentication from always succeeding if an implementation</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// leaves tagSize uninitialized, for example.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	if g.tagSize &lt; gcmMinimumTagSize {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: incorrect GCM tag size&#34;)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if len(ciphertext) &lt; g.tagSize {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return nil, errOpen
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if uint64(len(ciphertext)) &gt; ((1&lt;&lt;32)-2)*uint64(g.cipher.BlockSize())+uint64(g.tagSize) {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		return nil, errOpen
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	tag := ciphertext[len(ciphertext)-g.tagSize:]
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	ciphertext = ciphertext[:len(ciphertext)-g.tagSize]
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	var counter, tagMask [gcmBlockSize]byte
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	g.deriveCounter(&amp;counter, nonce)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	g.cipher.Encrypt(tagMask[:], counter[:])
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	gcmInc32(&amp;counter)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	var expectedTag [gcmTagSize]byte
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	g.auth(expectedTag[:], ciphertext, data, &amp;tagMask)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	ret, out := sliceForAppend(dst, len(ciphertext))
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if alias.InexactOverlap(out, ciphertext) {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		panic(&#34;crypto/cipher: invalid buffer overlap&#34;)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if subtle.ConstantTimeCompare(expectedTag[:g.tagSize], tag) != 1 {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// The AESNI code decrypts and authenticates concurrently, and</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		<span class="comment">// so overwrites dst in the event of a tag mismatch. That</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		<span class="comment">// behavior is mimicked here in order to be consistent across</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		<span class="comment">// platforms.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		for i := range out {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			out[i] = 0
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return nil, errOpen
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	g.counterCrypt(out, ciphertext, &amp;counter)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return ret, nil
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// reverseBits reverses the order of the bits of 4-bit number in i.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func reverseBits(i int) int {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	i = ((i &lt;&lt; 2) &amp; 0xc) | ((i &gt;&gt; 2) &amp; 0x3)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	i = ((i &lt;&lt; 1) &amp; 0xa) | ((i &gt;&gt; 1) &amp; 0x5)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	return i
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// gcmAdd adds two elements of GF(2¹²⁸) and returns the sum.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>func gcmAdd(x, y *gcmFieldElement) gcmFieldElement {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Addition in a characteristic 2 field is just XOR.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	return gcmFieldElement{x.low ^ y.low, x.high ^ y.high}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// gcmDouble returns the result of doubling an element of GF(2¹²⁸).</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func gcmDouble(x *gcmFieldElement) (double gcmFieldElement) {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	msbSet := x.high&amp;1 == 1
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">// Because of the bit-ordering, doubling is actually a right shift.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	double.high = x.high &gt;&gt; 1
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	double.high |= x.low &lt;&lt; 63
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	double.low = x.low &gt;&gt; 1
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// If the most-significant bit was set before shifting then it,</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	<span class="comment">// conceptually, becomes a term of x^128. This is greater than the</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// irreducible polynomial so the result has to be reduced. The</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// irreducible polynomial is 1+x+x^2+x^7+x^128. We can subtract that to</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// eliminate the term at x^128 which also means subtracting the other</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// four terms. In characteristic 2 fields, subtraction == addition ==</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// XOR.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if msbSet {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		double.low ^= 0xe100000000000000
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	return
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>var gcmReductionTable = []uint16{
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	0x0000, 0x1c20, 0x3840, 0x2460, 0x7080, 0x6ca0, 0x48c0, 0x54e0,
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	0xe100, 0xfd20, 0xd940, 0xc560, 0x9180, 0x8da0, 0xa9c0, 0xb5e0,
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// mul sets y to y*H, where H is the GCM key, fixed during NewGCMWithNonceSize.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func (g *gcm) mul(y *gcmFieldElement) {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	var z gcmFieldElement
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	for i := 0; i &lt; 2; i++ {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		word := y.high
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		if i == 1 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			word = y.low
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		<span class="comment">// Multiplication works by multiplying z by 16 and adding in</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// one of the precomputed multiples of H.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		for j := 0; j &lt; 64; j += 4 {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			msw := z.high &amp; 0xf
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			z.high &gt;&gt;= 4
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			z.high |= z.low &lt;&lt; 60
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			z.low &gt;&gt;= 4
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			z.low ^= uint64(gcmReductionTable[msw]) &lt;&lt; 48
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			<span class="comment">// the values in |table| are ordered for</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			<span class="comment">// little-endian bit positions. See the comment</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			<span class="comment">// in NewGCMWithNonceSize.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			t := &amp;g.productTable[word&amp;0xf]
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			z.low ^= t.low
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			z.high ^= t.high
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			word &gt;&gt;= 4
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	*y = z
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// updateBlocks extends y with more polynomial terms from blocks, based on</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// Horner&#39;s rule. There must be a multiple of gcmBlockSize bytes in blocks.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func (g *gcm) updateBlocks(y *gcmFieldElement, blocks []byte) {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	for len(blocks) &gt; 0 {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		y.low ^= binary.BigEndian.Uint64(blocks)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		y.high ^= binary.BigEndian.Uint64(blocks[8:])
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		g.mul(y)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		blocks = blocks[gcmBlockSize:]
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// update extends y with more polynomial terms from data. If data is not a</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// multiple of gcmBlockSize bytes long then the remainder is zero padded.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func (g *gcm) update(y *gcmFieldElement, data []byte) {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	fullBlocks := (len(data) &gt;&gt; 4) &lt;&lt; 4
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	g.updateBlocks(y, data[:fullBlocks])
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	if len(data) != fullBlocks {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		var partialBlock [gcmBlockSize]byte
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		copy(partialBlock[:], data[fullBlocks:])
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		g.updateBlocks(y, partialBlock[:])
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// gcmInc32 treats the final four bytes of counterBlock as a big-endian value</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// and increments it.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>func gcmInc32(counterBlock *[16]byte) {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	ctr := counterBlock[len(counterBlock)-4:]
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	binary.BigEndian.PutUint32(ctr, binary.BigEndian.Uint32(ctr)+1)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// sliceForAppend takes a slice and a requested number of bytes. It returns a</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// slice with the contents of the given slice followed by that many bytes and a</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// second slice that aliases into it and contains only the extra bytes. If the</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// original slice has sufficient capacity then no allocation is performed.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func sliceForAppend(in []byte, n int) (head, tail []byte) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if total := len(in) + n; cap(in) &gt;= total {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		head = in[:total]
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	} else {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		head = make([]byte, total)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		copy(head, in)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	tail = head[len(in):]
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// counterCrypt crypts in to out using g.cipher in counter mode.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>func (g *gcm) counterCrypt(out, in []byte, counter *[gcmBlockSize]byte) {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	var mask [gcmBlockSize]byte
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	for len(in) &gt;= gcmBlockSize {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		g.cipher.Encrypt(mask[:], counter[:])
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		gcmInc32(counter)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		subtle.XORBytes(out, in, mask[:])
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		out = out[gcmBlockSize:]
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		in = in[gcmBlockSize:]
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if len(in) &gt; 0 {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		g.cipher.Encrypt(mask[:], counter[:])
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		gcmInc32(counter)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		subtle.XORBytes(out, in, mask[:])
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// deriveCounter computes the initial GCM counter state from the given nonce.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// See NIST SP 800-38D, section 7.1. This assumes that counter is filled with</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// zeros on entry.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>func (g *gcm) deriveCounter(counter *[gcmBlockSize]byte, nonce []byte) {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	<span class="comment">// GCM has two modes of operation with respect to the initial counter</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	<span class="comment">// state: a &#34;fast path&#34; for 96-bit (12-byte) nonces, and a &#34;slow path&#34;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	<span class="comment">// for nonces of other lengths. For a 96-bit nonce, the nonce, along</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	<span class="comment">// with a four-byte big-endian counter starting at one, is used</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	<span class="comment">// directly as the starting counter. For other nonce sizes, the counter</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	<span class="comment">// is computed by passing it through the GHASH function.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	if len(nonce) == gcmStandardNonceSize {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		copy(counter[:], nonce)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		counter[gcmBlockSize-1] = 1
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	} else {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		var y gcmFieldElement
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		g.update(&amp;y, nonce)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		y.high ^= uint64(len(nonce)) * 8
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		g.mul(&amp;y)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		binary.BigEndian.PutUint64(counter[:8], y.low)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		binary.BigEndian.PutUint64(counter[8:], y.high)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// auth calculates GHASH(ciphertext, additionalData), masks the result with</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// tagMask and writes the result to out.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>func (g *gcm) auth(out, ciphertext, additionalData []byte, tagMask *[gcmTagSize]byte) {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	var y gcmFieldElement
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	g.update(&amp;y, additionalData)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	g.update(&amp;y, ciphertext)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	y.low ^= uint64(len(additionalData)) * 8
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	y.high ^= uint64(len(ciphertext)) * 8
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	g.mul(&amp;y)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	binary.BigEndian.PutUint64(out, y.low)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	binary.BigEndian.PutUint64(out[8:], y.high)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	subtle.XORBytes(out, out, tagMask[:])
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
</pre><p><a href="gcm.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
