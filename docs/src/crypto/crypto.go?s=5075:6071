<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/crypto.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./crypto.go?s=5075:6071#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<span class="text-muted">crypto.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto">crypto</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package crypto collects common cryptographic constants.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package crypto
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;hash&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Hash identifies a cryptographic hash function that is implemented in another</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// package.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>type Hash uint
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// HashFunc simply returns the value of h so that [Hash] implements [SignerOpts].</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func (h Hash) HashFunc() Hash {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	return h
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>func (h Hash) String() string {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	switch h {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	case MD4:
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		return &#34;MD4&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	case MD5:
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		return &#34;MD5&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	case SHA1:
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		return &#34;SHA-1&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	case SHA224:
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		return &#34;SHA-224&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	case SHA256:
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		return &#34;SHA-256&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	case SHA384:
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		return &#34;SHA-384&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	case SHA512:
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		return &#34;SHA-512&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	case MD5SHA1:
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		return &#34;MD5+SHA1&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	case RIPEMD160:
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		return &#34;RIPEMD-160&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	case SHA3_224:
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		return &#34;SHA3-224&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	case SHA3_256:
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		return &#34;SHA3-256&#34;
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	case SHA3_384:
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		return &#34;SHA3-384&#34;
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	case SHA3_512:
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		return &#34;SHA3-512&#34;
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	case SHA512_224:
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		return &#34;SHA-512/224&#34;
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	case SHA512_256:
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		return &#34;SHA-512/256&#34;
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	case BLAKE2s_256:
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		return &#34;BLAKE2s-256&#34;
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	case BLAKE2b_256:
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		return &#34;BLAKE2b-256&#34;
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	case BLAKE2b_384:
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return &#34;BLAKE2b-384&#34;
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	case BLAKE2b_512:
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		return &#34;BLAKE2b-512&#34;
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	default:
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		return &#34;unknown hash value &#34; + strconv.Itoa(int(h))
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>const (
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	MD4         Hash = 1 + iota <span class="comment">// import golang.org/x/crypto/md4</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	MD5                         <span class="comment">// import crypto/md5</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	SHA1                        <span class="comment">// import crypto/sha1</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	SHA224                      <span class="comment">// import crypto/sha256</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	SHA256                      <span class="comment">// import crypto/sha256</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	SHA384                      <span class="comment">// import crypto/sha512</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	SHA512                      <span class="comment">// import crypto/sha512</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	MD5SHA1                     <span class="comment">// no implementation; MD5+SHA1 used for TLS RSA</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	RIPEMD160                   <span class="comment">// import golang.org/x/crypto/ripemd160</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	SHA3_224                    <span class="comment">// import golang.org/x/crypto/sha3</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	SHA3_256                    <span class="comment">// import golang.org/x/crypto/sha3</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	SHA3_384                    <span class="comment">// import golang.org/x/crypto/sha3</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	SHA3_512                    <span class="comment">// import golang.org/x/crypto/sha3</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	SHA512_224                  <span class="comment">// import crypto/sha512</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	SHA512_256                  <span class="comment">// import crypto/sha512</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	BLAKE2s_256                 <span class="comment">// import golang.org/x/crypto/blake2s</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	BLAKE2b_256                 <span class="comment">// import golang.org/x/crypto/blake2b</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	BLAKE2b_384                 <span class="comment">// import golang.org/x/crypto/blake2b</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	BLAKE2b_512                 <span class="comment">// import golang.org/x/crypto/blake2b</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	maxHash
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>var digestSizes = []uint8{
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	MD4:         16,
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	MD5:         16,
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	SHA1:        20,
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	SHA224:      28,
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	SHA256:      32,
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	SHA384:      48,
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	SHA512:      64,
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	SHA512_224:  28,
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	SHA512_256:  32,
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	SHA3_224:    28,
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	SHA3_256:    32,
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	SHA3_384:    48,
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	SHA3_512:    64,
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	MD5SHA1:     36,
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	RIPEMD160:   20,
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	BLAKE2s_256: 32,
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	BLAKE2b_256: 32,
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	BLAKE2b_384: 48,
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	BLAKE2b_512: 64,
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Size returns the length, in bytes, of a digest resulting from the given hash</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// function. It doesn&#39;t require that the hash function in question be linked</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// into the program.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (h Hash) Size() int {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if h &gt; 0 &amp;&amp; h &lt; maxHash {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		return int(digestSizes[h])
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	panic(&#34;crypto: Size of unknown hash function&#34;)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>var hashes = make([]func() hash.Hash, maxHash)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// New returns a new hash.Hash calculating the given hash function. New panics</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// if the hash function is not linked into the binary.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func (h Hash) New() hash.Hash {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	if h &gt; 0 &amp;&amp; h &lt; maxHash {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		f := hashes[h]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		if f != nil {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			return f()
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	panic(&#34;crypto: requested hash function #&#34; + strconv.Itoa(int(h)) + &#34; is unavailable&#34;)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Available reports whether the given hash function is linked into the binary.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func (h Hash) Available() bool {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return h &lt; maxHash &amp;&amp; hashes[h] != nil
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// RegisterHash registers a function that returns a new instance of the given</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// hash function. This is intended to be called from the init function in</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// packages that implement hash functions.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func RegisterHash(h Hash, f func() hash.Hash) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if h &gt;= maxHash {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		panic(&#34;crypto: RegisterHash of unknown hash function&#34;)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	hashes[h] = f
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// PublicKey represents a public key using an unspecified algorithm.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// Although this type is an empty interface for backwards compatibility reasons,</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// all public key types in the standard library implement the following interface</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">//	interface{</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">//	    Equal(x crypto.PublicKey) bool</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// which can be used for increased type safety within applications.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>type PublicKey any
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// PrivateKey represents a private key using an unspecified algorithm.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// Although this type is an empty interface for backwards compatibility reasons,</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// all private key types in the standard library implement the following interface</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//	interface{</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">//	    Public() crypto.PublicKey</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">//	    Equal(x crypto.PrivateKey) bool</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// as well as purpose-specific interfaces such as [Signer] and [Decrypter], which</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// can be used for increased type safety within applications.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>type PrivateKey any
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// Signer is an interface for an opaque private key that can be used for</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// signing operations. For example, an RSA key kept in a hardware module.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="selection">type Signer interface {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Public returns the public key corresponding to the opaque,</span><span class="selection">
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	</span><span class="selection-comment">// private key.</span><span class="selection">
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	Public() PublicKey
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Sign signs digest with the private key, possibly using entropy from</span><span class="selection">
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	</span><span class="selection-comment">// rand. For an RSA key, the resulting signature should be either a</span><span class="selection">
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	</span><span class="selection-comment">// PKCS #1 v1.5 or PSS signature (as indicated by opts). For an (EC)DSA</span><span class="selection">
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	</span><span class="selection-comment">// key, it should be a DER-serialised, ASN.1 signature structure.</span><span class="selection">
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Hash implements the SignerOpts interface and, in most cases, one can</span><span class="selection">
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	</span><span class="selection-comment">// simply pass in the hash function used as opts. Sign may also attempt</span><span class="selection">
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	</span><span class="selection-comment">// to type assert opts to other types in order to obtain algorithm</span><span class="selection">
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	</span><span class="selection-comment">// specific values. See the documentation in each package for details.</span><span class="selection">
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Note that when a signature of a hash of a larger message is needed,</span><span class="selection">
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the caller is responsible for hashing the larger message and passing</span><span class="selection">
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the hash (as digest) and the hash function (as opts) to Sign.</span><span class="selection">
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	Sign(rand io.Reader, digest []byte, opts SignerOpts) (signature []byte, err error)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>}</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// SignerOpts contains options for signing with a [Signer].</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>type SignerOpts interface {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// HashFunc returns an identifier for the hash function used to produce</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// the message passed to Signer.Sign, or else zero to indicate that no</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// hashing was done.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	HashFunc() Hash
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// Decrypter is an interface for an opaque private key that can be used for</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// asymmetric decryption operations. An example would be an RSA key</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// kept in a hardware module.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>type Decrypter interface {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// Public returns the public key corresponding to the opaque,</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// private key.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	Public() PublicKey
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// Decrypt decrypts msg. The opts argument should be appropriate for</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// the primitive used. See the documentation in each implementation for</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// details.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	Decrypt(rand io.Reader, msg []byte, opts DecrypterOpts) (plaintext []byte, err error)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>type DecrypterOpts any
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
</pre><p><a href="crypto.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
