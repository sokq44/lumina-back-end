<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/dsa/dsa.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./dsa.go?s=1015:1064#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/dsa">dsa</a>/<span class="text-muted">dsa.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/dsa">crypto/dsa</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The DSA operations in this package are not implemented using constant-time algorithms.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Deprecated: DSA is a legacy algorithm, and modern alternatives such as</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Ed25519 (implemented by package crypto/ed25519) should be used instead. Keys</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// with 1024-bit moduli (L1024N160 parameters) are cryptographically weak, while</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// bigger keys are not widely supported. Note that FIPS 186-5 no longer approves</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// DSA for signature generation.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>package dsa
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>import (
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Parameters represents the domain parameters for a key. These parameters can</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// be shared across many keys. The bit length of Q must be a multiple of 8.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>type Parameters struct {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	P, Q, G *big.Int
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// PublicKey represents a DSA public key.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="selection">type PublicKey struct {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Parameters
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Y *big.Int
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// PrivateKey represents a DSA private key.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type PrivateKey struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	PublicKey
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	X *big.Int
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// ErrInvalidPublicKey results when a public key is not usable by this code.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// FIPS is quite strict about the format of DSA keys, but other code may be</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// less so. Thus, when using keys which may have been generated by other code,</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// this error must be handled.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>var ErrInvalidPublicKey = errors.New(&#34;crypto/dsa: invalid public key&#34;)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// ParameterSizes is an enumeration of the acceptable bit lengths of the primes</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// in a set of DSA parameters. See FIPS 186-3, section 4.2.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type ParameterSizes int
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>const (
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	L1024N160 ParameterSizes = iota
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	L2048N224
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	L2048N256
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	L3072N256
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// numMRTests is the number of Miller-Rabin primality tests that we perform. We</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// pick the largest recommended number from table C.1 of FIPS 186-3.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>const numMRTests = 64
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// GenerateParameters puts a random, valid set of DSA parameters into params.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// This function can take many seconds, even on fast machines.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) error {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// This function doesn&#39;t follow FIPS 186-3 exactly in that it doesn&#39;t</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// use a verification seed to generate the primes. The verification</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// seed doesn&#39;t appear to be exported or used by other code and</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// omitting it makes the code cleaner.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	var L, N int
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	switch sizes {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	case L1024N160:
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		L = 1024
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		N = 160
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	case L2048N224:
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		L = 2048
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		N = 224
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	case L2048N256:
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		L = 2048
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		N = 256
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	case L3072N256:
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		L = 3072
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		N = 256
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	default:
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		return errors.New(&#34;crypto/dsa: invalid ParameterSizes&#34;)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	qBytes := make([]byte, N/8)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	pBytes := make([]byte, L/8)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	q := new(big.Int)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	p := new(big.Int)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	rem := new(big.Int)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	one := new(big.Int)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	one.SetInt64(1)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>GeneratePrimes:
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	for {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		if _, err := io.ReadFull(rand, qBytes); err != nil {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			return err
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		qBytes[len(qBytes)-1] |= 1
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		qBytes[0] |= 0x80
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		q.SetBytes(qBytes)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if !q.ProbablyPrime(numMRTests) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			continue
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		for i := 0; i &lt; 4*L; i++ {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			if _, err := io.ReadFull(rand, pBytes); err != nil {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				return err
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			pBytes[len(pBytes)-1] |= 1
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			pBytes[0] |= 0x80
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			p.SetBytes(pBytes)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			rem.Mod(p, q)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			rem.Sub(rem, one)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			p.Sub(p, rem)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			if p.BitLen() &lt; L {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				continue
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			if !p.ProbablyPrime(numMRTests) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				continue
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			params.P = p
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			params.Q = q
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			break GeneratePrimes
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	h := new(big.Int)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	h.SetInt64(2)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	g := new(big.Int)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	pm1 := new(big.Int).Sub(p, one)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	e := new(big.Int).Div(pm1, q)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	for {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		g.Exp(h, e, p)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		if g.Cmp(one) == 0 {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			h.Add(h, one)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			continue
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		params.G = g
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		return nil
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// GenerateKey generates a public&amp;private key pair. The Parameters of the</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// [PrivateKey] must already be valid (see [GenerateParameters]).</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func GenerateKey(priv *PrivateKey, rand io.Reader) error {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if priv.P == nil || priv.Q == nil || priv.G == nil {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return errors.New(&#34;crypto/dsa: parameters not set up before generating key&#34;)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	x := new(big.Int)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	xBytes := make([]byte, priv.Q.BitLen()/8)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	for {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		_, err := io.ReadFull(rand, xBytes)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		if err != nil {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			return err
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		x.SetBytes(xBytes)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		if x.Sign() != 0 &amp;&amp; x.Cmp(priv.Q) &lt; 0 {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			break
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	priv.X = x
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	priv.Y = new(big.Int)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	priv.Y.Exp(priv.G, x, priv.P)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return nil
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// fermatInverse calculates the inverse of k in GF(P) using Fermat&#39;s method.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// This has better constant-time properties than Euclid&#39;s method (implemented</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// in math/big.Int.ModInverse) although math/big itself isn&#39;t strictly</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// constant-time so it&#39;s not perfect.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func fermatInverse(k, P *big.Int) *big.Int {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	two := big.NewInt(2)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	pMinus2 := new(big.Int).Sub(P, two)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return new(big.Int).Exp(k, pMinus2, P)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Sign signs an arbitrary length hash (which should be the result of hashing a</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// larger message) using the private key, priv. It returns the signature as a</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// pair of integers. The security of the private key depends on the entropy of</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// rand.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// to the byte-length of the subgroup. This function does not perform that</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// truncation itself.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Be aware that calling Sign with an attacker-controlled [PrivateKey] may</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// require an arbitrary amount of CPU.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error) {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	randutil.MaybeReadByte(rand)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// FIPS 186-3, section 4.6</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	n := priv.Q.BitLen()
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if priv.Q.Sign() &lt;= 0 || priv.P.Sign() &lt;= 0 || priv.G.Sign() &lt;= 0 || priv.X.Sign() &lt;= 0 || n%8 != 0 {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		err = ErrInvalidPublicKey
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	n &gt;&gt;= 3
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	var attempts int
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	for attempts = 10; attempts &gt; 0; attempts-- {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		k := new(big.Int)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		buf := make([]byte, n)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		for {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			_, err = io.ReadFull(rand, buf)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			if err != nil {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				return
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			k.SetBytes(buf)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			<span class="comment">// priv.Q must be &gt;= 128 because the test above</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			<span class="comment">// requires it to be &gt; 0 and that</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			<span class="comment">//    ceil(log_2(Q)) mod 8 = 0</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			<span class="comment">// Thus this loop will quickly terminate.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			if k.Sign() &gt; 0 &amp;&amp; k.Cmp(priv.Q) &lt; 0 {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>				break
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		kInv := fermatInverse(k, priv.Q)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		r = new(big.Int).Exp(priv.G, k, priv.P)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		r.Mod(r, priv.Q)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		if r.Sign() == 0 {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			continue
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		z := k.SetBytes(hash)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		s = new(big.Int).Mul(priv.X, r)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		s.Add(s, z)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		s.Mod(s, priv.Q)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		s.Mul(s, kInv)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		s.Mod(s, priv.Q)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if s.Sign() != 0 {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			break
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// Only degenerate private keys will require more than a handful of</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// attempts.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if attempts == 0 {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		return nil, nil, ErrInvalidPublicKey
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	return
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// Verify verifies the signature in r, s of hash using the public key, pub. It</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// reports whether the signature is valid.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// to the byte-length of the subgroup. This function does not perform that</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// truncation itself.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// FIPS 186-3, section 4.7</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if pub.P.Sign() == 0 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		return false
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	if r.Sign() &lt; 1 || r.Cmp(pub.Q) &gt;= 0 {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return false
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if s.Sign() &lt; 1 || s.Cmp(pub.Q) &gt;= 0 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		return false
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	w := new(big.Int).ModInverse(s, pub.Q)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	if w == nil {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return false
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	n := pub.Q.BitLen()
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if n%8 != 0 {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		return false
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	z := new(big.Int).SetBytes(hash)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	u1 := new(big.Int).Mul(z, w)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	u1.Mod(u1, pub.Q)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	u2 := w.Mul(r, w)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	u2.Mod(u2, pub.Q)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	v := u1.Exp(pub.G, u1, pub.P)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	u2.Exp(pub.Y, u2, pub.P)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	v.Mul(v, u2)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	v.Mod(v, pub.P)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	v.Mod(v, pub.Q)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	return v.Cmp(r) == 0
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
</pre><p><a href="dsa.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
