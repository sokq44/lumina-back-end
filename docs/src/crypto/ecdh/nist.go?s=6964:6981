<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/ecdh/nist.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./nist.go?s=6964:6981#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/ecdh">ecdh</a>/<span class="text-muted">nist.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/ecdh">crypto/ecdh</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2022 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package ecdh
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;crypto/internal/boring&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/internal/nistec&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type nistCurve[Point nistPoint[Point]] struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	name        string
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	newPoint    func() Point
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	scalarOrder []byte
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// nistPoint is a generic constraint for the nistec Point types.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>type nistPoint[T any] interface {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Bytes() []byte
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	BytesX() ([]byte, error)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	SetBytes([]byte) (T, error)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	ScalarMult(T, []byte) (T, error)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	ScalarBaseMult([]byte) (T, error)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>func (c *nistCurve[Point]) String() string {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return c.name
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>var errInvalidPrivateKey = errors.New(&#34;crypto/ecdh: invalid private key&#34;)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func (c *nistCurve[Point]) GenerateKey(rand io.Reader) (*PrivateKey, error) {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; rand == boring.RandReader {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		key, bytes, err := boring.GenerateKeyECDH(c.name)
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		if err != nil {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>			return nil, err
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		return newBoringPrivateKey(c, key, bytes)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	key := make([]byte, len(c.scalarOrder))
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	randutil.MaybeReadByte(rand)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	for {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		if _, err := io.ReadFull(rand, key); err != nil {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>			return nil, err
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		<span class="comment">// Mask off any excess bits if the size of the underlying field is not a</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		<span class="comment">// whole number of bytes, which is only the case for P-521. We use a</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		<span class="comment">// pointer to the scalarOrder field because comparing generic and</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		<span class="comment">// instantiated types is not supported.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		if &amp;c.scalarOrder[0] == &amp;p521Order[0] {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			key[0] &amp;= 0b0000_0001
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		<span class="comment">// In tests, rand will return all zeros and NewPrivateKey will reject</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		<span class="comment">// the zero key as it generates the identity as a public key. This also</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		<span class="comment">// makes this function consistent with crypto/elliptic.GenerateKey.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		key[1] ^= 0x42
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		k, err := c.NewPrivateKey(key)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		if err == errInvalidPrivateKey {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			continue
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		return k, err
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func (c *nistCurve[Point]) NewPrivateKey(key []byte) (*PrivateKey, error) {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	if len(key) != len(c.scalarOrder) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		return nil, errors.New(&#34;crypto/ecdh: invalid private key size&#34;)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if isZero(key) || !isLess(key, c.scalarOrder) {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		return nil, errInvalidPrivateKey
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		bk, err := boring.NewPrivateKeyECDH(c.name, key)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		if err != nil {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			return nil, err
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		return newBoringPrivateKey(c, bk, key)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	k := &amp;PrivateKey{
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		curve:      c,
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		privateKey: append([]byte{}, key...),
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return k, nil
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func newBoringPrivateKey(c Curve, bk *boring.PrivateKeyECDH, privateKey []byte) (*PrivateKey, error) {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	k := &amp;PrivateKey{
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		curve:      c,
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		boring:     bk,
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		privateKey: append([]byte(nil), privateKey...),
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return k, nil
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func (c *nistCurve[Point]) privateKeyToPublicKey(key *PrivateKey) *PublicKey {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	boring.Unreachable()
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if key.curve != c {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		panic(&#34;crypto/ecdh: internal error: converting the wrong key type&#34;)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	p, err := c.newPoint().ScalarBaseMult(key.privateKey)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	if err != nil {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		<span class="comment">// This is unreachable because the only error condition of</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		<span class="comment">// ScalarBaseMult is if the input is not the right size.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		panic(&#34;crypto/ecdh: internal error: nistec ScalarBaseMult failed for a fixed-size input&#34;)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	publicKey := p.Bytes()
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if len(publicKey) == 1 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		<span class="comment">// The encoding of the identity is a single 0x00 byte. This is</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		<span class="comment">// unreachable because the only scalar that generates the identity is</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		<span class="comment">// zero, which is rejected by NewPrivateKey.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		panic(&#34;crypto/ecdh: internal error: nistec ScalarBaseMult returned the identity&#34;)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	return &amp;PublicKey{
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		curve:     key.curve,
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		publicKey: publicKey,
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// isZero returns whether a is all zeroes in constant time.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func isZero(a []byte) bool {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	var acc byte
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	for _, b := range a {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		acc |= b
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	return acc == 0
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// isLess returns whether a &lt; b, where a and b are big-endian buffers of the</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// same length and shorter than 72 bytes.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func isLess(a, b []byte) bool {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if len(a) != len(b) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		panic(&#34;crypto/ecdh: internal error: mismatched isLess inputs&#34;)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// Copy the values into a fixed-size preallocated little-endian buffer.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// 72 bytes is enough for every scalar in this package, and having a fixed</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// size lets us avoid heap allocations.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	if len(a) &gt; 72 {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		panic(&#34;crypto/ecdh: internal error: isLess input too large&#34;)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	bufA, bufB := make([]byte, 72), make([]byte, 72)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	for i := range a {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		bufA[i], bufB[i] = a[len(a)-i-1], b[len(b)-i-1]
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// Perform a subtraction with borrow.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	var borrow uint64
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	for i := 0; i &lt; len(bufA); i += 8 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		limbA, limbB := binary.LittleEndian.Uint64(bufA[i:]), binary.LittleEndian.Uint64(bufB[i:])
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		_, borrow = bits.Sub64(limbA, limbB, borrow)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// If there is a borrow at the end of the operation, then a &lt; b.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return borrow == 1
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (c *nistCurve[Point]) NewPublicKey(key []byte) (*PublicKey, error) {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// Reject the point at infinity and compressed encodings.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if len(key) == 0 || key[0] != 4 {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return nil, errors.New(&#34;crypto/ecdh: invalid public key&#34;)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	k := &amp;PublicKey{
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		curve:     c,
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		publicKey: append([]byte{}, key...),
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		bk, err := boring.NewPublicKeyECDH(c.name, k.publicKey)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		if err != nil {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			return nil, err
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		k.boring = bk
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	} else {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		<span class="comment">// SetBytes also checks that the point is on the curve.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		if _, err := c.newPoint().SetBytes(key); err != nil {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			return nil, err
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	return k, nil
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (c *nistCurve[Point]) ecdh(local *PrivateKey, remote *PublicKey) ([]byte, error) {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// Note that this function can&#39;t return an error, as NewPublicKey rejects</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// invalid points and the point at infinity, and NewPrivateKey rejects</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// invalid scalars and the zero value. BytesX returns an error for the point</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// at infinity, but in a prime order group such as the NIST curves that can</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// only be the result of a scalar multiplication if one of the inputs is the</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// zero scalar or the point at infinity.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		return boring.ECDH(local.boring, remote.boring)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	boring.Unreachable()
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	p, err := c.newPoint().SetBytes(remote.publicKey)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	if err != nil {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		return nil, err
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if _, err := p.ScalarMult(p, local.privateKey); err != nil {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return nil, err
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return p.BytesX()
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// P256 returns a [Curve] which implements NIST P-256 (FIPS 186-3, section D.2.3),</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// also known as secp256r1 or prime256v1.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// Multiple invocations of this function will return the same value, which can</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// be used for equality checks and switch statements.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func P256() Curve { return p256 }
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>var p256 = &amp;nistCurve[*nistec.P256Point]{
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	name:        &#34;P-256&#34;,
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	newPoint:    nistec.NewP256Point,
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	scalarOrder: p256Order,
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>var p256Order = []byte{
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17, 0x9e, 0x84,
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// P384 returns a [Curve] which implements NIST P-384 (FIPS 186-3, section D.2.4),</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// also known as secp384r1.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// Multiple invocations of this function will return the same value, which can</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// be used for equality checks and switch statements.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="selection">func P384() Curve</span> { return p384 }
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>var p384 = &amp;nistCurve[*nistec.P384Point]{
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	name:        &#34;P-384&#34;,
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	newPoint:    nistec.NewP384Point,
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	scalarOrder: p384Order,
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>var p384Order = []byte{
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	0xc7, 0x63, 0x4d, 0x81, 0xf4, 0x37, 0x2d, 0xdf,
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	0x58, 0x1a, 0x0d, 0xb2, 0x48, 0xb0, 0xa7, 0x7a,
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	0xec, 0xec, 0x19, 0x6a, 0xcc, 0xc5, 0x29, 0x73}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// P521 returns a [Curve] which implements NIST P-521 (FIPS 186-3, section D.2.5),</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// also known as secp521r1.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// Multiple invocations of this function will return the same value, which can</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// be used for equality checks and switch statements.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func P521() Curve { return p521 }
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>var p521 = &amp;nistCurve[*nistec.P521Point]{
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	name:        &#34;P-521&#34;,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	newPoint:    nistec.NewP521Point,
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	scalarOrder: p521Order,
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>var p521Order = []byte{0x01, 0xff,
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa,
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	0x51, 0x86, 0x87, 0x83, 0xbf, 0x2f, 0x96, 0x6b,
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	0x7f, 0xcc, 0x01, 0x48, 0xf7, 0x09, 0xa5, 0xd0,
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	0x3b, 0xb5, 0xc9, 0xb8, 0x89, 0x9c, 0x47, 0xae,
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	0xbb, 0x6f, 0xb7, 0x1e, 0x91, 0x38, 0x64, 0x09}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
</pre><p><a href="nist.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
