<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/ecdsa/ecdsa.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./ecdsa.go?s=8885:8961#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/ecdsa">ecdsa</a>/<span class="text-muted">ecdsa.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/ecdsa">crypto/ecdsa</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// defined in FIPS 186-4 and SEC 1, Version 2.0.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// Signatures generated by this package are not deterministic, but entropy is</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// mixed with the private key and the message, achieving the same level of</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// security in case of randomness source failure.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package ecdsa
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// [FIPS 186-4] references ANSI X9.62-2005 for the bulk of the ECDSA algorithm.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// That standard is not freely available, which is a problem in an open source</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// implementation, because not only the implementer, but also any maintainer,</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// contributor, reviewer, auditor, and learner needs access to it. Instead, this</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// package references and follows the equivalent [SEC 1, Version 2.0].</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// [FIPS 186-4]: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// [SEC 1, Version 2.0]: https://www.secg.org/sec1-v2.pdf</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>import (
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;crypto&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;crypto/aes&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;crypto/cipher&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;crypto/ecdh&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;crypto/elliptic&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;crypto/internal/bigmod&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;crypto/internal/boring&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;crypto/internal/boring/bbig&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;crypto/internal/nistec&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;crypto/sha512&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	&#34;golang.org/x/crypto/cryptobyte&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	&#34;golang.org/x/crypto/cryptobyte/asn1&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// PublicKey represents an ECDSA public key.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type PublicKey struct {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	elliptic.Curve
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	X, Y *big.Int
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Any methods implemented on PublicKey might need to also be implemented on</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// PrivateKey, as the latter embeds the former and will expose its methods.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// ECDH returns k as a [ecdh.PublicKey]. It returns an error if the key is</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// invalid according to the definition of [ecdh.Curve.NewPublicKey], or if the</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// Curve is not supported by crypto/ecdh.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func (k *PublicKey) ECDH() (*ecdh.PublicKey, error) {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	c := curveToECDH(k.Curve)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if c == nil {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: unsupported curve by crypto/ecdh&#34;)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	if !k.Curve.IsOnCurve(k.X, k.Y) {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: invalid public key&#34;)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return c.NewPublicKey(elliptic.Marshal(k.Curve, k.X, k.Y))
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Equal reports whether pub and x have the same value.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Two keys are only considered to have the same value if they have the same Curve value.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Note that for example [elliptic.P256] and elliptic.P256().Params() are different</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// values, as the latter is a generic not constant time implementation.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>func (pub *PublicKey) Equal(x crypto.PublicKey) bool {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	xx, ok := x.(*PublicKey)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	if !ok {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		return false
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return bigIntEqual(pub.X, xx.X) &amp;&amp; bigIntEqual(pub.Y, xx.Y) &amp;&amp;
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		<span class="comment">// Standard library Curve implementations are singletons, so this check</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		<span class="comment">// will work for those. Other Curves might be equivalent even if not</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		<span class="comment">// singletons, but there is no definitive way to check for that, and</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		<span class="comment">// better to err on the side of safety.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		pub.Curve == xx.Curve
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// PrivateKey represents an ECDSA private key.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>type PrivateKey struct {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	PublicKey
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	D *big.Int
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// ECDH returns k as a [ecdh.PrivateKey]. It returns an error if the key is</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// invalid according to the definition of [ecdh.Curve.NewPrivateKey], or if the</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// Curve is not supported by [crypto/ecdh].</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func (k *PrivateKey) ECDH() (*ecdh.PrivateKey, error) {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	c := curveToECDH(k.Curve)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if c == nil {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: unsupported curve by crypto/ecdh&#34;)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	size := (k.Curve.Params().N.BitLen() + 7) / 8
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	if k.D.BitLen() &gt; size*8 {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: invalid private key&#34;)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return c.NewPrivateKey(k.D.FillBytes(make([]byte, size)))
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func curveToECDH(c elliptic.Curve) ecdh.Curve {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	switch c {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	case elliptic.P256():
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		return ecdh.P256()
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	case elliptic.P384():
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		return ecdh.P384()
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	case elliptic.P521():
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		return ecdh.P521()
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	default:
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return nil
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// Public returns the public key corresponding to priv.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (priv *PrivateKey) Public() crypto.PublicKey {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return &amp;priv.PublicKey
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// Equal reports whether priv and x have the same value.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// See [PublicKey.Equal] for details on how Curve is compared.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (priv *PrivateKey) Equal(x crypto.PrivateKey) bool {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	xx, ok := x.(*PrivateKey)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	if !ok {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		return false
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return priv.PublicKey.Equal(&amp;xx.PublicKey) &amp;&amp; bigIntEqual(priv.D, xx.D)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// bigIntEqual reports whether a and b are equal leaking only their bit length</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// through timing side-channels.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func bigIntEqual(a, b *big.Int) bool {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return subtle.ConstantTimeCompare(a.Bytes(), b.Bytes()) == 1
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// Sign signs digest with priv, reading randomness from rand. The opts argument</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// is not currently used but, in keeping with the crypto.Signer interface,</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// should be the hash function used to digest the message.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// This method implements crypto.Signer, which is an interface to support keys</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// where the private part is kept in, for example, a hardware module. Common</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// uses can use the [SignASN1] function in this package directly.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func (priv *PrivateKey) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return SignASN1(rand, priv, digest)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// GenerateKey generates a new ECDSA private key for the specified curve.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// Most applications should use [crypto/rand.Reader] as rand. Note that the</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// returned key does not depend deterministically on the bytes read from rand,</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// and may change between calls and/or between versions.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func GenerateKey(c elliptic.Curve, rand io.Reader) (*PrivateKey, error) {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	randutil.MaybeReadByte(rand)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; rand == boring.RandReader {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		x, y, d, err := boring.GenerateKeyECDSA(c.Params().Name)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		if err != nil {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			return nil, err
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return &amp;PrivateKey{PublicKey: PublicKey{Curve: c, X: bbig.Dec(x), Y: bbig.Dec(y)}, D: bbig.Dec(d)}, nil
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	boring.UnreachableExceptTests()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	switch c.Params() {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	case elliptic.P224().Params():
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return generateNISTEC(p224(), rand)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	case elliptic.P256().Params():
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return generateNISTEC(p256(), rand)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	case elliptic.P384().Params():
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return generateNISTEC(p384(), rand)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	case elliptic.P521().Params():
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return generateNISTEC(p521(), rand)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	default:
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		return generateLegacy(c, rand)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func generateNISTEC[Point nistPoint[Point]](c *nistCurve[Point], rand io.Reader) (*PrivateKey, error) {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	k, Q, err := randomPoint(c, rand)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if err != nil {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		return nil, err
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	priv := new(PrivateKey)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	priv.PublicKey.Curve = c.curve
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	priv.D = new(big.Int).SetBytes(k.Bytes(c.N))
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	priv.PublicKey.X, priv.PublicKey.Y, err = c.pointToAffine(Q)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if err != nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return nil, err
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return priv, nil
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// randomPoint returns a random scalar and the corresponding point using the</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// procedure given in FIPS 186-4, Appendix B.5.2 (rejection sampling).</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func randomPoint[Point nistPoint[Point]](c *nistCurve[Point], rand io.Reader) (k *bigmod.Nat, p Point, err error) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	k = bigmod.NewNat()
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	for {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		b := make([]byte, c.N.Size())
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		if _, err = io.ReadFull(rand, b); err != nil {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			return
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		<span class="comment">// Mask off any excess bits to increase the chance of hitting a value in</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		<span class="comment">// (0, N). These are the most dangerous lines in the package and maybe in</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		<span class="comment">// the library: a single bit of bias in the selection of nonces would likely</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		<span class="comment">// lead to key recovery, but no tests would fail. Look but DO NOT TOUCH.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if excess := len(b)*8 - c.N.BitLen(); excess &gt; 0 {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			<span class="comment">// Just to be safe, assert that this only happens for the one curve that</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			<span class="comment">// doesn&#39;t have a round number of bits.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			if excess != 0 &amp;&amp; c.curve.Params().Name != &#34;P-521&#34; {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				panic(&#34;ecdsa: internal error: unexpectedly masking off bits&#34;)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			b[0] &gt;&gt;= excess
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		<span class="comment">// FIPS 186-4 makes us check k &lt;= N - 2 and then add one.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		<span class="comment">// Checking 0 &lt; k &lt;= N - 1 is strictly equivalent.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		<span class="comment">// None of this matters anyway because the chance of selecting</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		<span class="comment">// zero is cryptographically negligible.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if _, err = k.SetBytes(b, c.N); err == nil &amp;&amp; k.IsZero() == 0 {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			break
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		if testingOnlyRejectionSamplingLooped != nil {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			testingOnlyRejectionSamplingLooped()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	p, err = c.newPoint().ScalarBaseMult(k.Bytes(c.N))
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// testingOnlyRejectionSamplingLooped is called when rejection sampling in</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// randomPoint rejects a candidate for being higher than the modulus.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>var testingOnlyRejectionSamplingLooped func()
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// errNoAsm is returned by signAsm and verifyAsm when the assembly</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// implementation is not available.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>var errNoAsm = errors.New(&#34;no assembly implementation available&#34;)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// SignASN1 signs a hash (which should be the result of hashing a larger message)</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// using the private key, priv. If the hash is longer than the bit-length of the</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// private key&#39;s curve order, the hash will be truncated to that length. It</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// returns the ASN.1 encoded signature.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// The signature is randomized. Most applications should use [crypto/rand.Reader]</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// as rand. Note that the returned signature does not depend deterministically on</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// the bytes read from rand, and may change between calls and/or between versions.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="selection">func SignASN1(rand io.Reader, priv *PrivateKey, hash []byte) ([]byte, error)</span> {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	randutil.MaybeReadByte(rand)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; rand == boring.RandReader {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		b, err := boringPrivateKey(priv)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		if err != nil {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			return nil, err
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		return boring.SignMarshalECDSA(b, hash)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	boring.UnreachableExceptTests()
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	csprng, err := mixedCSPRNG(rand, priv, hash)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if err != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return nil, err
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if sig, err := signAsm(priv, csprng, hash); err != errNoAsm {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return sig, err
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	switch priv.Curve.Params() {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	case elliptic.P224().Params():
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		return signNISTEC(p224(), priv, csprng, hash)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	case elliptic.P256().Params():
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return signNISTEC(p256(), priv, csprng, hash)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	case elliptic.P384().Params():
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		return signNISTEC(p384(), priv, csprng, hash)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	case elliptic.P521().Params():
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return signNISTEC(p521(), priv, csprng, hash)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	default:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		return signLegacy(priv, csprng, hash)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func signNISTEC[Point nistPoint[Point]](c *nistCurve[Point], priv *PrivateKey, csprng io.Reader, hash []byte) (sig []byte, err error) {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// SEC 1, Version 2.0, Section 4.1.3</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	k, R, err := randomPoint(c, csprng)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if err != nil {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		return nil, err
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// kInv = k⁻¹</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	kInv := bigmod.NewNat()
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	inverse(c, kInv, k)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	Rx, err := R.BytesX()
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if err != nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return nil, err
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	r, err := bigmod.NewNat().SetOverflowingBytes(Rx, c.N)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	if err != nil {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		return nil, err
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// The spec wants us to retry here, but the chance of hitting this condition</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// on a large prime-order group like the NIST curves we support is</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// cryptographically negligible. If we hit it, something is awfully wrong.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if r.IsZero() == 1 {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: internal error: r is zero&#34;)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	e := bigmod.NewNat()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	hashToNat(c, e, hash)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	s, err := bigmod.NewNat().SetBytes(priv.D.Bytes(), c.N)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	if err != nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		return nil, err
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	s.Mul(r, c.N)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	s.Add(e, c.N)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	s.Mul(kInv, c.N)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// Again, the chance of this happening is cryptographically negligible.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if s.IsZero() == 1 {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return nil, errors.New(&#34;ecdsa: internal error: s is zero&#34;)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	return encodeSignature(r.Bytes(c.N), s.Bytes(c.N))
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>func encodeSignature(r, s []byte) ([]byte, error) {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	var b cryptobyte.Builder
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	b.AddASN1(asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		addASN1IntBytes(b, r)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		addASN1IntBytes(b, s)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	})
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	return b.Bytes()
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// addASN1IntBytes encodes in ASN.1 a positive integer represented as</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// a big-endian byte slice with zero or more leading zeroes.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func addASN1IntBytes(b *cryptobyte.Builder, bytes []byte) {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	for len(bytes) &gt; 0 &amp;&amp; bytes[0] == 0 {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		bytes = bytes[1:]
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	if len(bytes) == 0 {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		b.SetError(errors.New(&#34;invalid integer&#34;))
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		return
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	b.AddASN1(asn1.INTEGER, func(c *cryptobyte.Builder) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		if bytes[0]&amp;0x80 != 0 {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			c.AddUint8(0)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		c.AddBytes(bytes)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	})
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// inverse sets kInv to the inverse of k modulo the order of the curve.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func inverse[Point nistPoint[Point]](c *nistCurve[Point], kInv, k *bigmod.Nat) {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if c.curve.Params().Name == &#34;P-256&#34; {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		kBytes, err := nistec.P256OrdInverse(k.Bytes(c.N))
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		<span class="comment">// Some platforms don&#39;t implement P256OrdInverse, and always return an error.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if err == nil {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			_, err := kInv.SetBytes(kBytes, c.N)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			if err != nil {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				panic(&#34;ecdsa: internal error: P256OrdInverse produced an invalid value&#34;)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			return
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	<span class="comment">// Calculate the inverse of s in GF(N) using Fermat&#39;s method</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// (exponentiation modulo P - 2, per Euler&#39;s theorem)</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	kInv.Exp(k, c.nMinus2, c.N)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// hashToNat sets e to the left-most bits of hash, according to</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// SEC 1, Section 4.1.3, point 5 and Section 4.1.4, point 3.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func hashToNat[Point nistPoint[Point]](c *nistCurve[Point], e *bigmod.Nat, hash []byte) {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	<span class="comment">// ECDSA asks us to take the left-most log2(N) bits of hash, and use them as</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	<span class="comment">// an integer modulo N. This is the absolute worst of all worlds: we still</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	<span class="comment">// have to reduce, because the result might still overflow N, but to take</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// the left-most bits for P-521 we have to do a right shift.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	if size := c.N.Size(); len(hash) &gt;= size {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		hash = hash[:size]
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		if excess := len(hash)*8 - c.N.BitLen(); excess &gt; 0 {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			hash = bytes.Clone(hash)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			for i := len(hash) - 1; i &gt;= 0; i-- {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>				hash[i] &gt;&gt;= excess
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>					hash[i] |= hash[i-1] &lt;&lt; (8 - excess)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>				}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	_, err := e.SetOverflowingBytes(hash, c.N)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	if err != nil {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		panic(&#34;ecdsa: internal error: truncated hash is too long&#34;)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// mixedCSPRNG returns a CSPRNG that mixes entropy from rand with the message</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// and the private key, to protect the key in case rand fails. This is</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// equivalent in security to RFC 6979 deterministic nonce generation, but still</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// produces randomized signatures.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>func mixedCSPRNG(rand io.Reader, priv *PrivateKey, hash []byte) (io.Reader, error) {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	<span class="comment">// This implementation derives the nonce from an AES-CTR CSPRNG keyed by:</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	<span class="comment">//    SHA2-512(priv.D || entropy || hash)[:32]</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// The CSPRNG key is indifferentiable from a random oracle as shown in</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// [Coron], the AES-CTR stream is indifferentiable from a random oracle</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// under standard cryptographic assumptions (see [Larsson] for examples).</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// [Coron]: https://cs.nyu.edu/~dodis/ps/merkle.pdf</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// [Larsson]: https://web.archive.org/web/20040719170906/https://www.nada.kth.se/kurser/kth/2D1441/semteo03/lecturenotes/assump.pdf</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// Get 256 bits of entropy from rand.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	entropy := make([]byte, 32)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if _, err := io.ReadFull(rand, entropy); err != nil {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		return nil, err
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">// Initialize an SHA-512 hash context; digest...</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	md := sha512.New()
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	md.Write(priv.D.Bytes()) <span class="comment">// the private key,</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	md.Write(entropy)        <span class="comment">// the entropy,</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	md.Write(hash)           <span class="comment">// and the input hash;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	key := md.Sum(nil)[:32]  <span class="comment">// and compute ChopMD-256(SHA-512),</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// which is an indifferentiable MAC.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">// Create an AES-CTR instance to use as a CSPRNG.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	block, err := aes.NewCipher(key)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	if err != nil {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		return nil, err
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// Create a CSPRNG that xors a stream of zeros with</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	<span class="comment">// the output of the AES-CTR instance.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	const aesIV = &#34;IV for ECDSA CTR&#34;
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	return &amp;cipher.StreamReader{
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		R: zeroReader,
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		S: cipher.NewCTR(block, []byte(aesIV)),
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	}, nil
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>type zr struct{}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>var zeroReader = zr{}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// Read replaces the contents of dst with zeros. It is safe for concurrent use.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>func (zr) Read(dst []byte) (n int, err error) {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	for i := range dst {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		dst[i] = 0
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	return len(dst), nil
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// VerifyASN1 verifies the ASN.1 encoded signature, sig, of hash using the</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">// public key, pub. Its return value records whether the signature is valid.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>func VerifyASN1(pub *PublicKey, hash, sig []byte) bool {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		key, err := boringPublicKey(pub)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		if err != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			return false
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		return boring.VerifyECDSA(key, hash, sig)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	boring.UnreachableExceptTests()
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	if err := verifyAsm(pub, hash, sig); err != errNoAsm {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		return err == nil
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	switch pub.Curve.Params() {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	case elliptic.P224().Params():
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return verifyNISTEC(p224(), pub, hash, sig)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	case elliptic.P256().Params():
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		return verifyNISTEC(p256(), pub, hash, sig)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	case elliptic.P384().Params():
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return verifyNISTEC(p384(), pub, hash, sig)
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	case elliptic.P521().Params():
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		return verifyNISTEC(p521(), pub, hash, sig)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	default:
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return verifyLegacy(pub, hash, sig)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>func verifyNISTEC[Point nistPoint[Point]](c *nistCurve[Point], pub *PublicKey, hash, sig []byte) bool {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	rBytes, sBytes, err := parseSignature(sig)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	if err != nil {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		return false
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	Q, err := c.pointFromAffine(pub.X, pub.Y)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if err != nil {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		return false
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	<span class="comment">// SEC 1, Version 2.0, Section 4.1.4</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	r, err := bigmod.NewNat().SetBytes(rBytes, c.N)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if err != nil || r.IsZero() == 1 {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return false
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	s, err := bigmod.NewNat().SetBytes(sBytes, c.N)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	if err != nil || s.IsZero() == 1 {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		return false
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	e := bigmod.NewNat()
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	hashToNat(c, e, hash)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// w = s⁻¹</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	w := bigmod.NewNat()
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	inverse(c, w, s)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// p₁ = [e * s⁻¹]G</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	p1, err := c.newPoint().ScalarBaseMult(e.Mul(w, c.N).Bytes(c.N))
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if err != nil {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return false
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	<span class="comment">// p₂ = [r * s⁻¹]Q</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	p2, err := Q.ScalarMult(Q, w.Mul(r, c.N).Bytes(c.N))
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	if err != nil {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		return false
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	<span class="comment">// BytesX returns an error for the point at infinity.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	Rx, err := p1.Add(p1, p2).BytesX()
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	if err != nil {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		return false
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	v, err := bigmod.NewNat().SetOverflowingBytes(Rx, c.N)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	if err != nil {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		return false
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	return v.Equal(r) == 1
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>func parseSignature(sig []byte) (r, s []byte, err error) {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	var inner cryptobyte.String
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	input := cryptobyte.String(sig)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	if !input.ReadASN1(&amp;inner, asn1.SEQUENCE) ||
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		!input.Empty() ||
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		!inner.ReadASN1Integer(&amp;r) ||
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		!inner.ReadASN1Integer(&amp;s) ||
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		!inner.Empty() {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		return nil, nil, errors.New(&#34;invalid ASN.1&#34;)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	return r, s, nil
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>type nistCurve[Point nistPoint[Point]] struct {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	newPoint func() Point
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	curve    elliptic.Curve
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	N        *bigmod.Modulus
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	nMinus2  []byte
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// nistPoint is a generic constraint for the nistec Point types.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>type nistPoint[T any] interface {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	Bytes() []byte
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	BytesX() ([]byte, error)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	SetBytes([]byte) (T, error)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	Add(T, T) T
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	ScalarMult(T, []byte) (T, error)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	ScalarBaseMult([]byte) (T, error)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// pointFromAffine is used to convert the PublicKey to a nistec Point.</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func (curve *nistCurve[Point]) pointFromAffine(x, y *big.Int) (p Point, err error) {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	bitSize := curve.curve.Params().BitSize
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	<span class="comment">// Reject values that would not get correctly encoded.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	if x.Sign() &lt; 0 || y.Sign() &lt; 0 {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		return p, errors.New(&#34;negative coordinate&#34;)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	if x.BitLen() &gt; bitSize || y.BitLen() &gt; bitSize {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		return p, errors.New(&#34;overflowing coordinate&#34;)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	<span class="comment">// Encode the coordinates and let SetBytes reject invalid points.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	byteLen := (bitSize + 7) / 8
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	buf := make([]byte, 1+2*byteLen)
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	buf[0] = 4 <span class="comment">// uncompressed point</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	x.FillBytes(buf[1 : 1+byteLen])
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	y.FillBytes(buf[1+byteLen : 1+2*byteLen])
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	return curve.newPoint().SetBytes(buf)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">// pointToAffine is used to convert a nistec Point to a PublicKey.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>func (curve *nistCurve[Point]) pointToAffine(p Point) (x, y *big.Int, err error) {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	out := p.Bytes()
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	if len(out) == 1 &amp;&amp; out[0] == 0 {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		<span class="comment">// This is the encoding of the point at infinity.</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		return nil, nil, errors.New(&#34;ecdsa: public key point is the infinity&#34;)
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	byteLen := (curve.curve.Params().BitSize + 7) / 8
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	x = new(big.Int).SetBytes(out[1 : 1+byteLen])
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	y = new(big.Int).SetBytes(out[1+byteLen:])
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	return x, y, nil
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>var p224Once sync.Once
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>var _p224 *nistCurve[*nistec.P224Point]
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>func p224() *nistCurve[*nistec.P224Point] {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	p224Once.Do(func() {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		_p224 = &amp;nistCurve[*nistec.P224Point]{
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			newPoint: func() *nistec.P224Point { return nistec.NewP224Point() },
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		precomputeParams(_p224, elliptic.P224())
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	})
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	return _p224
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>var p256Once sync.Once
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>var _p256 *nistCurve[*nistec.P256Point]
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>func p256() *nistCurve[*nistec.P256Point] {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	p256Once.Do(func() {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		_p256 = &amp;nistCurve[*nistec.P256Point]{
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			newPoint: func() *nistec.P256Point { return nistec.NewP256Point() },
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		precomputeParams(_p256, elliptic.P256())
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	})
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	return _p256
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>var p384Once sync.Once
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>var _p384 *nistCurve[*nistec.P384Point]
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>func p384() *nistCurve[*nistec.P384Point] {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	p384Once.Do(func() {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		_p384 = &amp;nistCurve[*nistec.P384Point]{
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			newPoint: func() *nistec.P384Point { return nistec.NewP384Point() },
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		precomputeParams(_p384, elliptic.P384())
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	})
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	return _p384
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>var p521Once sync.Once
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>var _p521 *nistCurve[*nistec.P521Point]
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>func p521() *nistCurve[*nistec.P521Point] {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	p521Once.Do(func() {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		_p521 = &amp;nistCurve[*nistec.P521Point]{
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			newPoint: func() *nistec.P521Point { return nistec.NewP521Point() },
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		precomputeParams(_p521, elliptic.P521())
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	})
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	return _p521
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>func precomputeParams[Point nistPoint[Point]](c *nistCurve[Point], curve elliptic.Curve) {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	params := curve.Params()
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	c.curve = curve
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	var err error
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	c.N, err = bigmod.NewModulusFromBig(params.N)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	if err != nil {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		panic(err)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	c.nMinus2 = new(big.Int).Sub(params.N, big.NewInt(2)).Bytes()
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>
</pre><p><a href="ecdsa.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
