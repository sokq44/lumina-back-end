<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/rand/util.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./util.go?s=410:464#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/rand">rand</a>/<span class="text-muted">util.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/rand">crypto/rand</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package rand
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// Prime returns a number of the given bit length that is prime with high probability.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Prime will return error for any error returned by [rand.Read] or if bits &lt; 2.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="selection">func Prime(rand io.Reader, bits int) (*big.Int, error)</span> {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	if bits &lt; 2 {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>		return nil, errors.New(&#34;crypto/rand: prime size must be at least 2-bit&#34;)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	randutil.MaybeReadByte(rand)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	b := uint(bits % 8)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	if b == 0 {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		b = 8
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	bytes := make([]byte, (bits+7)/8)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	p := new(big.Int)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	for {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		if _, err := io.ReadFull(rand, bytes); err != nil {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>			return nil, err
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		<span class="comment">// Clear bits in the first byte to make sure the candidate has a size &lt;= bits.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		bytes[0] &amp;= uint8(int(1&lt;&lt;b) - 1)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t let the value be too small, i.e, set the most significant two bits.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		<span class="comment">// Setting the top two bits, rather than just the top bit,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		<span class="comment">// means that when two of these values are multiplied together,</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		<span class="comment">// the result isn&#39;t ever one bit short.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		if b &gt;= 2 {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			bytes[0] |= 3 &lt;&lt; (b - 2)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		} else {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			<span class="comment">// Here b==1, because b cannot be zero.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			bytes[0] |= 1
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			if len(bytes) &gt; 1 {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>				bytes[1] |= 0x80
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>			}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		<span class="comment">// Make the value odd since an even number this large certainly isn&#39;t prime.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		bytes[len(bytes)-1] |= 1
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		p.SetBytes(bytes)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		if p.ProbablyPrime(20) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>			return p, nil
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Int returns a uniform random value in [0, max). It panics if max &lt;= 0.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func Int(rand io.Reader, max *big.Int) (n *big.Int, err error) {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	if max.Sign() &lt;= 0 {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		panic(&#34;crypto/rand: argument to Int is &lt;= 0&#34;)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	n = new(big.Int)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	n.Sub(max, n.SetUint64(1))
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// bitLen is the maximum bit length needed to encode a value &lt; max.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	bitLen := n.BitLen()
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	if bitLen == 0 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		<span class="comment">// the only valid result is 0</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		return
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// k is the maximum byte length needed to encode a value &lt; max.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	k := (bitLen + 7) / 8
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// b is the number of bits in the most significant byte of max-1.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	b := uint(bitLen % 8)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if b == 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		b = 8
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	bytes := make([]byte, k)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	for {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		_, err = io.ReadFull(rand, bytes)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		if err != nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>			return nil, err
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// Clear bits in the first byte to increase the probability</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		<span class="comment">// that the candidate is &lt; max.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		bytes[0] &amp;= uint8(int(1&lt;&lt;b) - 1)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		n.SetBytes(bytes)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if n.Cmp(max) &lt; 0 {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			return
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
</pre><p><a href="util.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
