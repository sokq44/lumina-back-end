<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/rsa/pkcs1v15.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./pkcs1v15.go?s=11544:11630#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/rsa">rsa</a>/<span class="text-muted">pkcs1v15.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/rsa">crypto/rsa</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package rsa
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;crypto&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/internal/boring&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// This file implements encryption and decryption using PKCS #1 v1.5 padding.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// PKCS1v15DecryptOptions is for passing options to PKCS #1 v1.5 decryption using</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// the [crypto.Decrypter] interface.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>type PKCS1v15DecryptOptions struct {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// SessionKeyLen is the length of the session key that is being</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// decrypted. If not zero, then a padding error during decryption will</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// cause a random plaintext of this length to be returned rather than</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// an error. These alternatives happen in constant time.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	SessionKeyLen int
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// EncryptPKCS1v15 encrypts the given message with RSA and the padding</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// scheme from PKCS #1 v1.5.  The message must be no longer than the</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// length of the public modulus minus 11 bytes.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// The random parameter is used as a source of entropy to ensure that</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// encrypting the same message twice doesn&#39;t result in the same</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// ciphertext. Most applications should use [crypto/rand.Reader]</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// as random. Note that the returned ciphertext does not depend</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// deterministically on the bytes read from random, and may change</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// between calls and/or between versions.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// WARNING: use of this function to encrypt plaintexts other than</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// session keys is dangerous. Use RSA OAEP in new protocols.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>func EncryptPKCS1v15(random io.Reader, pub *PublicKey, msg []byte) ([]byte, error) {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	randutil.MaybeReadByte(random)
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if err := checkPub(pub); err != nil {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return nil, err
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	k := pub.Size()
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if len(msg) &gt; k-11 {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		return nil, ErrMessageTooLong
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; random == boring.RandReader {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		bkey, err := boringPublicKey(pub)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		if err != nil {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>			return nil, err
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		return boring.EncryptRSAPKCS1(bkey, msg)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	boring.UnreachableExceptTests()
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// EM = 0x00 || 0x02 || PS || 0x00 || M</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	em := make([]byte, k)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	em[1] = 2
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	ps, mm := em[2:len(em)-len(msg)-1], em[len(em)-len(msg):]
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	err := nonZeroRandomBytes(ps, random)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	if err != nil {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return nil, err
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	em[len(em)-len(msg)-1] = 0
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	copy(mm, msg)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		var bkey *boring.PublicKeyRSA
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		bkey, err = boringPublicKey(pub)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		if err != nil {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			return nil, err
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return boring.EncryptRSANoPadding(bkey, em)
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return encrypt(pub, em)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// DecryptPKCS1v15 decrypts a plaintext using RSA and the padding scheme from PKCS #1 v1.5.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// The random parameter is legacy and ignored, and it can be nil.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// Note that whether this function returns an error or not discloses secret</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// information. If an attacker can cause this function to run repeatedly and</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// learn whether each instance returned an error then they can decrypt and</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// forge signatures as if they had the private key. See</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// DecryptPKCS1v15SessionKey for a way of solving this problem.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func DecryptPKCS1v15(random io.Reader, priv *PrivateKey, ciphertext []byte) ([]byte, error) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	if err := checkPub(&amp;priv.PublicKey); err != nil {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		return nil, err
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		bkey, err := boringPrivateKey(priv)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if err != nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			return nil, err
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		out, err := boring.DecryptRSAPKCS1(bkey, ciphertext)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		if err != nil {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		return out, nil
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	valid, out, index, err := decryptPKCS1v15(priv, ciphertext)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if err != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		return nil, err
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if valid == 0 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		return nil, ErrDecryption
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return out[index:], nil
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// DecryptPKCS1v15SessionKey decrypts a session key using RSA and the padding</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// scheme from PKCS #1 v1.5. The random parameter is legacy and ignored, and it</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// can be nil.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// DecryptPKCS1v15SessionKey returns an error if the ciphertext is the wrong</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// length or if the ciphertext is greater than the public modulus. Otherwise, no</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// error is returned. If the padding is valid, the resulting plaintext message</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// is copied into key. Otherwise, key is unchanged. These alternatives occur in</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// constant time. It is intended that the user of this function generate a</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// random session key beforehand and continue the protocol with the resulting</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// value.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// Note that if the session key is too small then it may be possible for an</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// attacker to brute-force it. If they can do that then they can learn whether a</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// random value was used (because it&#39;ll be different for the same ciphertext)</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// and thus whether the padding was correct. This also defeats the point of this</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// function. Using at least a 16-byte key will protect against this attack.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// This method implements protections against Bleichenbacher chosen ciphertext</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// attacks [0] described in RFC 3218 Section 2.3.2 [1]. While these protections</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// make a Bleichenbacher attack significantly more difficult, the protections</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// are only effective if the rest of the protocol which uses</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// DecryptPKCS1v15SessionKey is designed with these considerations in mind. In</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// particular, if any subsequent operations which use the decrypted session key</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// leak any information about the key (e.g. whether it is a static or random</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// key) then the mitigations are defeated. This method must be used extremely</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// carefully, and typically should only be used when absolutely necessary for</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// compatibility with an existing protocol (such as TLS) that is designed with</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// these properties in mind.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">//   - [0] “Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">//     Standard PKCS #1”, Daniel Bleichenbacher, Advances in Cryptology (Crypto &#39;98)</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//   - [1] RFC 3218, Preventing the Million Message Attack on CMS,</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//     https://www.rfc-editor.org/rfc/rfc3218.html</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func DecryptPKCS1v15SessionKey(random io.Reader, priv *PrivateKey, ciphertext []byte, key []byte) error {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	if err := checkPub(&amp;priv.PublicKey); err != nil {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		return err
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	k := priv.Size()
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if k-(len(key)+3+8) &lt; 0 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		return ErrDecryption
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	valid, em, index, err := decryptPKCS1v15(priv, ciphertext)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	if err != nil {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		return err
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if len(em) != k {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		<span class="comment">// This should be impossible because decryptPKCS1v15 always</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		<span class="comment">// returns the full slice.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return ErrDecryption
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	valid &amp;= subtle.ConstantTimeEq(int32(len(em)-index), int32(len(key)))
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	subtle.ConstantTimeCopy(valid, key, em[len(em)-len(key):])
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	return nil
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// decryptPKCS1v15 decrypts ciphertext using priv. It returns one or zero in</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// valid that indicates whether the plaintext was correctly structured.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// In either case, the plaintext is returned in em so that it may be read</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// independently of whether it was valid in order to maintain constant memory</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// access patterns. If the plaintext was valid then index contains the index of</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// the original message in em, to allow constant time padding removal.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func decryptPKCS1v15(priv *PrivateKey, ciphertext []byte) (valid int, em []byte, index int, err error) {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	k := priv.Size()
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if k &lt; 11 {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		err = ErrDecryption
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		return
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		var bkey *boring.PrivateKeyRSA
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		bkey, err = boringPrivateKey(priv)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		if err != nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			return
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		em, err = boring.DecryptRSANoPadding(bkey, ciphertext)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		if err != nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			return
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	} else {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		em, err = decrypt(priv, ciphertext, noCheck)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		if err != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	firstByteIsZero := subtle.ConstantTimeByteEq(em[0], 0)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	secondByteIsTwo := subtle.ConstantTimeByteEq(em[1], 2)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// The remainder of the plaintext must be a string of non-zero random</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// octets, followed by a 0, followed by the message.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">//   lookingForIndex: 1 iff we are still looking for the zero.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">//   index: the offset of the first zero byte.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	lookingForIndex := 1
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	for i := 2; i &lt; len(em); i++ {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		equals0 := subtle.ConstantTimeByteEq(em[i], 0)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		index = subtle.ConstantTimeSelect(lookingForIndex&amp;equals0, i, index)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		lookingForIndex = subtle.ConstantTimeSelect(equals0, 0, lookingForIndex)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// The PS padding must be at least 8 bytes long, and it starts two</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// bytes into em.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	validPS := subtle.ConstantTimeLessOrEq(2+8, index)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	valid = firstByteIsZero &amp; secondByteIsTwo &amp; (^lookingForIndex &amp; 1) &amp; validPS
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	index = subtle.ConstantTimeSelect(valid, index+1, 0)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	return valid, em, index, nil
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// nonZeroRandomBytes fills the given slice with non-zero random octets.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func nonZeroRandomBytes(s []byte, random io.Reader) (err error) {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	_, err = io.ReadFull(random, s)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if err != nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		for s[i] == 0 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			_, err = io.ReadFull(random, s[i:i+1])
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			if err != nil {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				return
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			<span class="comment">// In tests, the PRNG may return all zeros so we do</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			<span class="comment">// this to break the loop.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			s[i] ^= 0x42
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	return
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// These are ASN1 DER structures:</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//	DigestInfo ::= SEQUENCE {</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//	  digestAlgorithm AlgorithmIdentifier,</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">//	  digest OCTET STRING</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// For performance, we don&#39;t use the generic ASN1 encoder. Rather, we</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// precompute a prefix of the digest value that makes a valid ASN1 DER string</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// with the correct contents.</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>var hashPrefixes = map[crypto.Hash][]byte{
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	crypto.MD5:       {0x30, 0x20, 0x30, 0x0c, 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10},
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	crypto.SHA1:      {0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14},
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	crypto.SHA224:    {0x30, 0x2d, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x05, 0x00, 0x04, 0x1c},
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	crypto.SHA256:    {0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20},
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	crypto.SHA384:    {0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30},
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	crypto.SHA512:    {0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40},
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	crypto.MD5SHA1:   {}, <span class="comment">// A special TLS case which doesn&#39;t use an ASN1 prefix.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	crypto.RIPEMD160: {0x30, 0x20, 0x30, 0x08, 0x06, 0x06, 0x28, 0xcf, 0x06, 0x03, 0x00, 0x31, 0x04, 0x14},
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// SignPKCS1v15 calculates the signature of hashed using</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// RSASSA-PKCS1-V1_5-SIGN from RSA PKCS #1 v1.5.  Note that hashed must</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// be the result of hashing the input message using the given hash</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// function. If hash is zero, hashed is signed directly. This isn&#39;t</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// advisable except for interoperability.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// The random parameter is legacy and ignored, and it can be nil.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// This function is deterministic. Thus, if the set of possible</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// messages is small, an attacker may be able to build a map from</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// messages to signatures and identify the signed messages. As ever,</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// signatures provide authenticity, not confidentiality.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func SignPKCS1v15(random io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte) ([]byte, error) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	hashLen, prefix, err := pkcs1v15HashInfo(hash, len(hashed))
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if err != nil {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		return nil, err
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	tLen := len(prefix) + hashLen
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	k := priv.Size()
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if k &lt; tLen+11 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		return nil, ErrMessageTooLong
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		bkey, err := boringPrivateKey(priv)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		if err != nil {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			return nil, err
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		return boring.SignRSAPKCS1v15(bkey, hash, hashed)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// EM = 0x00 || 0x01 || PS || 0x00 || T</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	em := make([]byte, k)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	em[1] = 1
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for i := 2; i &lt; k-tLen-1; i++ {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		em[i] = 0xff
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	copy(em[k-tLen:k-hashLen], prefix)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	copy(em[k-hashLen:k], hashed)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return decrypt(priv, em, withCheck)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// VerifyPKCS1v15 verifies an RSA PKCS #1 v1.5 signature.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// hashed is the result of hashing the input message using the given hash</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// function and sig is the signature. A valid signature is indicated by</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// returning a nil error. If hash is zero then hashed is used directly. This</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// isn&#39;t advisable except for interoperability.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="selection">func VerifyPKCS1v15(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte) error</span> {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		bkey, err := boringPublicKey(pub)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if err != nil {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			return err
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		if err := boring.VerifyRSAPKCS1v15(bkey, hash, hashed, sig); err != nil {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			return ErrVerification
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		return nil
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	hashLen, prefix, err := pkcs1v15HashInfo(hash, len(hashed))
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	if err != nil {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		return err
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	tLen := len(prefix) + hashLen
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	k := pub.Size()
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if k &lt; tLen+11 {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return ErrVerification
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// RFC 8017 Section 8.2.2: If the length of the signature S is not k</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// octets (where k is the length in octets of the RSA modulus n), output</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// &#34;invalid signature&#34; and stop.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	if k != len(sig) {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		return ErrVerification
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	em, err := encrypt(pub, sig)
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if err != nil {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		return ErrVerification
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// EM = 0x00 || 0x01 || PS || 0x00 || T</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	ok := subtle.ConstantTimeByteEq(em[0], 0)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	ok &amp;= subtle.ConstantTimeByteEq(em[1], 1)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	ok &amp;= subtle.ConstantTimeCompare(em[k-hashLen:k], hashed)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	ok &amp;= subtle.ConstantTimeCompare(em[k-tLen:k-hashLen], prefix)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	ok &amp;= subtle.ConstantTimeByteEq(em[k-tLen-1], 0)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	for i := 2; i &lt; k-tLen-1; i++ {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		ok &amp;= subtle.ConstantTimeByteEq(em[i], 0xff)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	if ok != 1 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		return ErrVerification
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	return nil
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>func pkcs1v15HashInfo(hash crypto.Hash, inLen int) (hashLen int, prefix []byte, err error) {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	<span class="comment">// Special case: crypto.Hash(0) is used to indicate that the data is</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	<span class="comment">// signed directly.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if hash == 0 {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		return inLen, nil, nil
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	hashLen = hash.Size()
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if inLen != hashLen {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		return 0, nil, errors.New(&#34;crypto/rsa: input must be hashed message&#34;)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	prefix, ok := hashPrefixes[hash]
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	if !ok {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		return 0, nil, errors.New(&#34;crypto/rsa: unsupported hash function&#34;)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	return
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
</pre><p><a href="pkcs1v15.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
