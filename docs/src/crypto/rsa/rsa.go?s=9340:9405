<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/rsa/rsa.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./rsa.go?s=9340:9405#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/rsa">rsa</a>/<span class="text-muted">rsa.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/rsa">crypto/rsa</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package rsa implements RSA encryption as specified in PKCS #1 and RFC 8017.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// RSA is a single, fundamental operation that is used in this package to</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// implement either public-key encryption or public-key signatures.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// The original specification for encryption and signatures with RSA is PKCS #1</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// and the terms &#34;RSA encryption&#34; and &#34;RSA signatures&#34; by default refer to</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// PKCS #1 version 1.5. However, that specification has flaws and new designs</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// should use version 2, usually called by just OAEP and PSS, where</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// possible.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// Two sets of interfaces are included in this package. When a more abstract</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// interface isn&#39;t necessary, there are functions for encrypting/decrypting</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// with v1.5/OAEP and signing/verifying with v1.5/PSS. If one needs to abstract</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// over the public key primitive, the PrivateKey type implements the</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Decrypter and Signer interfaces from the crypto package.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Operations in this package are implemented using constant-time algorithms,</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// except for [GenerateKey], [PrivateKey.Precompute], and [PrivateKey.Validate].</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Every other operation only leaks the bit size of the involved values, which</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// all depend on the selected key size.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>package rsa
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>import (
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;crypto&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;crypto/internal/bigmod&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;crypto/internal/boring&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;crypto/internal/boring/bbig&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;crypto/internal/randutil&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;crypto/rand&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	&#34;hash&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>var bigOne = big.NewInt(1)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// A PublicKey represents the public part of an RSA key.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// The value of the modulus N is considered secret by this library and protected</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// from leaking through timing side-channels. However, neither the value of the</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// exponent E nor the precise bit size of N are similarly protected.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type PublicKey struct {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	N *big.Int <span class="comment">// modulus</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	E int      <span class="comment">// public exponent</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Any methods implemented on PublicKey might need to also be implemented on</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// PrivateKey, as the latter embeds the former and will expose its methods.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Size returns the modulus size in bytes. Raw signatures and ciphertexts</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// for or by this public key will have the same size.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>func (pub *PublicKey) Size() int {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	return (pub.N.BitLen() + 7) / 8
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// Equal reports whether pub and x have the same value.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (pub *PublicKey) Equal(x crypto.PublicKey) bool {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	xx, ok := x.(*PublicKey)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if !ok {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		return false
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	return bigIntEqual(pub.N, xx.N) &amp;&amp; pub.E == xx.E
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// OAEPOptions is an interface for passing options to OAEP decryption using the</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// crypto.Decrypter interface.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>type OAEPOptions struct {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// Hash is the hash function that will be used when generating the mask.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	Hash crypto.Hash
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// MGFHash is the hash function used for MGF1.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// If zero, Hash is used instead.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	MGFHash crypto.Hash
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// Label is an arbitrary byte string that must be equal to the value</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// used when encrypting.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	Label []byte
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>var (
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	errPublicModulus       = errors.New(&#34;crypto/rsa: missing public modulus&#34;)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	errPublicExponentSmall = errors.New(&#34;crypto/rsa: public exponent too small&#34;)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	errPublicExponentLarge = errors.New(&#34;crypto/rsa: public exponent too large&#34;)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// checkPub sanity checks the public key before we use it.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// We require pub.E to fit into a 32-bit integer so that we</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// do not have different behavior depending on whether</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// int is 32 or 64 bits. See also</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// https://www.imperialviolet.org/2012/03/16/rsae.html.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func checkPub(pub *PublicKey) error {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if pub.N == nil {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		return errPublicModulus
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if pub.E &lt; 2 {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return errPublicExponentSmall
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if pub.E &gt; 1&lt;&lt;31-1 {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		return errPublicExponentLarge
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return nil
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// A PrivateKey represents an RSA key</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>type PrivateKey struct {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	PublicKey            <span class="comment">// public part.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	D         *big.Int   <span class="comment">// private exponent</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	Primes    []*big.Int <span class="comment">// prime factors of N, has &gt;= 2 elements.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// Precomputed contains precomputed values that speed up RSA operations,</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// if available. It must be generated by calling PrivateKey.Precompute and</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// must not be modified.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	Precomputed PrecomputedValues
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// Public returns the public key corresponding to priv.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func (priv *PrivateKey) Public() crypto.PublicKey {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return &amp;priv.PublicKey
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// Equal reports whether priv and x have equivalent values. It ignores</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// Precomputed values.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func (priv *PrivateKey) Equal(x crypto.PrivateKey) bool {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	xx, ok := x.(*PrivateKey)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	if !ok {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		return false
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if !priv.PublicKey.Equal(&amp;xx.PublicKey) || !bigIntEqual(priv.D, xx.D) {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		return false
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	if len(priv.Primes) != len(xx.Primes) {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		return false
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	for i := range priv.Primes {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		if !bigIntEqual(priv.Primes[i], xx.Primes[i]) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			return false
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	return true
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// bigIntEqual reports whether a and b are equal leaking only their bit length</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// through timing side-channels.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func bigIntEqual(a, b *big.Int) bool {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	return subtle.ConstantTimeCompare(a.Bytes(), b.Bytes()) == 1
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// Sign signs digest with priv, reading randomness from rand. If opts is a</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// *[PSSOptions] then the PSS algorithm will be used, otherwise PKCS #1 v1.5 will</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// be used. digest must be the result of hashing the input message using</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// opts.HashFunc().</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// This method implements [crypto.Signer], which is an interface to support keys</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// where the private part is kept in, for example, a hardware module. Common</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// uses should use the Sign* functions in this package directly.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (priv *PrivateKey) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	if pssOpts, ok := opts.(*PSSOptions); ok {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return SignPSS(rand, priv, pssOpts.Hash, digest, pssOpts)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return SignPKCS1v15(rand, priv, opts.HashFunc(), digest)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// Decrypt decrypts ciphertext with priv. If opts is nil or of type</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// *[PKCS1v15DecryptOptions] then PKCS #1 v1.5 decryption is performed. Otherwise</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// opts must have type *[OAEPOptions] and OAEP decryption is done.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func (priv *PrivateKey) Decrypt(rand io.Reader, ciphertext []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error) {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	if opts == nil {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		return DecryptPKCS1v15(rand, priv, ciphertext)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	switch opts := opts.(type) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	case *OAEPOptions:
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		if opts.MGFHash == 0 {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			return decryptOAEP(opts.Hash.New(), opts.Hash.New(), rand, priv, ciphertext, opts.Label)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		} else {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			return decryptOAEP(opts.Hash.New(), opts.MGFHash.New(), rand, priv, ciphertext, opts.Label)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	case *PKCS1v15DecryptOptions:
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if l := opts.SessionKeyLen; l &gt; 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			plaintext = make([]byte, l)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			if _, err := io.ReadFull(rand, plaintext); err != nil {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>				return nil, err
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			if err := DecryptPKCS1v15SessionKey(rand, priv, ciphertext, plaintext); err != nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>				return nil, err
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			return plaintext, nil
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		} else {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			return DecryptPKCS1v15(rand, priv, ciphertext)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	default:
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return nil, errors.New(&#34;crypto/rsa: invalid options for Decrypt&#34;)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>type PrecomputedValues struct {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	Dp, Dq *big.Int <span class="comment">// D mod (P-1) (or mod Q-1)</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	Qinv   *big.Int <span class="comment">// Q^-1 mod P</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// CRTValues is used for the 3rd and subsequent primes. Due to a</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// historical accident, the CRT for the first two primes is handled</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// differently in PKCS #1 and interoperability is sufficiently</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// important that we mirror this.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: These values are still filled in by Precompute for</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// backwards compatibility but are not used. Multi-prime RSA is very rare,</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// and is implemented by this package without CRT optimizations to limit</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// complexity.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	CRTValues []CRTValue
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	n, p, q *bigmod.Modulus <span class="comment">// moduli for CRT with Montgomery precomputed constants</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// CRTValue contains the precomputed Chinese remainder theorem values.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>type CRTValue struct {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	Exp   *big.Int <span class="comment">// D mod (prime-1).</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	Coeff *big.Int <span class="comment">// R·Coeff ≡ 1 mod Prime.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	R     *big.Int <span class="comment">// product of primes prior to this (inc p and q).</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// Validate performs basic sanity checks on the key.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// It returns nil if the key is valid, or else an error describing a problem.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func (priv *PrivateKey) Validate() error {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if err := checkPub(&amp;priv.PublicKey); err != nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return err
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Check that Πprimes == n.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	modulus := new(big.Int).Set(bigOne)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	for _, prime := range priv.Primes {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		<span class="comment">// Any primes ≤ 1 will cause divide-by-zero panics later.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		if prime.Cmp(bigOne) &lt;= 0 {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			return errors.New(&#34;crypto/rsa: invalid prime value&#34;)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		modulus.Mul(modulus, prime)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if modulus.Cmp(priv.N) != 0 {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return errors.New(&#34;crypto/rsa: invalid modulus&#34;)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Check that de ≡ 1 mod p-1, for each prime.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// This implies that e is coprime to each p-1 as e has a multiplicative</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// inverse. Therefore e is coprime to lcm(p-1,q-1,r-1,...) =</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// exponent(ℤ/nℤ). It also implies that a^de ≡ a mod p as a^(p-1) ≡ 1</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// mod p. Thus a^de ≡ a mod n for all a coprime to n, as required.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	congruence := new(big.Int)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	de := new(big.Int).SetInt64(int64(priv.E))
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	de.Mul(de, priv.D)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	for _, prime := range priv.Primes {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		pminus1 := new(big.Int).Sub(prime, bigOne)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		congruence.Mod(de, pminus1)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if congruence.Cmp(bigOne) != 0 {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return errors.New(&#34;crypto/rsa: invalid exponents&#34;)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	return nil
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// GenerateKey generates a random RSA private key of the given bit size.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// Most applications should use [crypto/rand.Reader] as rand. Note that the</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// returned key does not depend deterministically on the bytes read from rand,</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// and may change between calls and/or between versions.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="selection">func GenerateKey(random io.Reader, bits int) (*PrivateKey, error)</span> {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	return GenerateMultiPrimeKey(random, 2, bits)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// GenerateMultiPrimeKey generates a multi-prime RSA keypair of the given bit</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// size and the given random source.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// Table 1 in &#34;[On the Security of Multi-prime RSA]&#34; suggests maximum numbers of</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// primes for a given bit size.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Although the public keys are compatible (actually, indistinguishable) from</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// the 2-prime case, the private keys are not. Thus it may not be possible to</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// export multi-prime private keys in certain formats or to subsequently import</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// them into other code.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// This package does not implement CRT optimizations for multi-prime RSA, so the</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// keys with more than two primes will have worse performance.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// Deprecated: The use of this function with a number of primes different from</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// two is not recommended for the above security, compatibility, and performance</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// reasons. Use [GenerateKey] instead.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// [On the Security of Multi-prime RSA]: http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func GenerateMultiPrimeKey(random io.Reader, nprimes int, bits int) (*PrivateKey, error) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	randutil.MaybeReadByte(random)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; random == boring.RandReader &amp;&amp; nprimes == 2 &amp;&amp;
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		(bits == 2048 || bits == 3072 || bits == 4096) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		bN, bE, bD, bP, bQ, bDp, bDq, bQinv, err := boring.GenerateKeyRSA(bits)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		if err != nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			return nil, err
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		N := bbig.Dec(bN)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		E := bbig.Dec(bE)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		D := bbig.Dec(bD)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		P := bbig.Dec(bP)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		Q := bbig.Dec(bQ)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		Dp := bbig.Dec(bDp)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		Dq := bbig.Dec(bDq)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		Qinv := bbig.Dec(bQinv)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		e64 := E.Int64()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		if !E.IsInt64() || int64(int(e64)) != e64 {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			return nil, errors.New(&#34;crypto/rsa: generated key exponent too large&#34;)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		mn, err := bigmod.NewModulusFromBig(N)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if err != nil {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			return nil, err
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		mp, err := bigmod.NewModulusFromBig(P)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		if err != nil {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			return nil, err
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		mq, err := bigmod.NewModulusFromBig(Q)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		if err != nil {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			return nil, err
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		key := &amp;PrivateKey{
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			PublicKey: PublicKey{
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				N: N,
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				E: int(e64),
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			},
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			D:      D,
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			Primes: []*big.Int{P, Q},
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			Precomputed: PrecomputedValues{
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>				Dp:        Dp,
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>				Dq:        Dq,
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>				Qinv:      Qinv,
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>				CRTValues: make([]CRTValue, 0), <span class="comment">// non-nil, to match Precompute</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>				n:         mn,
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>				p:         mp,
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				q:         mq,
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			},
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		return key, nil
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	priv := new(PrivateKey)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	priv.E = 65537
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if nprimes &lt; 2 {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		return nil, errors.New(&#34;crypto/rsa: GenerateMultiPrimeKey: nprimes must be &gt;= 2&#34;)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if bits &lt; 64 {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		primeLimit := float64(uint64(1) &lt;&lt; uint(bits/nprimes))
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		<span class="comment">// pi approximates the number of primes less than primeLimit</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		pi := primeLimit / (math.Log(primeLimit) - 1)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		<span class="comment">// Generated primes start with 11 (in binary) so we can only</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		<span class="comment">// use a quarter of them.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		pi /= 4
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		<span class="comment">// Use a factor of two to ensure that key generation terminates</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		<span class="comment">// in a reasonable amount of time.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		pi /= 2
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if pi &lt;= float64(nprimes) {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			return nil, errors.New(&#34;crypto/rsa: too few primes of given length to generate an RSA key&#34;)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	primes := make([]*big.Int, nprimes)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>NextSetOfPrimes:
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	for {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		todo := bits
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		<span class="comment">// crypto/rand should set the top two bits in each prime.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		<span class="comment">// Thus each prime has the form</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		<span class="comment">//   p_i = 2^bitlen(p_i) × 0.11... (in base 2).</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		<span class="comment">// And the product is:</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		<span class="comment">//   P = 2^todo × α</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		<span class="comment">// where α is the product of nprimes numbers of the form 0.11...</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		<span class="comment">// If α &lt; 1/2 (which can happen for nprimes &gt; 2), we need to</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		<span class="comment">// shift todo to compensate for lost bits: the mean value of 0.11...</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		<span class="comment">// is 7/8, so todo + shift - nprimes * log2(7/8) ~= bits - 1/2</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		<span class="comment">// will give good results.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		if nprimes &gt;= 7 {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			todo += (nprimes - 2) / 5
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		for i := 0; i &lt; nprimes; i++ {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			var err error
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			primes[i], err = rand.Prime(random, todo/(nprimes-i))
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			if err != nil {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				return nil, err
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			todo -= primes[i].BitLen()
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		<span class="comment">// Make sure that primes is pairwise unequal.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		for i, prime := range primes {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			for j := 0; j &lt; i; j++ {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				if prime.Cmp(primes[j]) == 0 {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>					continue NextSetOfPrimes
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		n := new(big.Int).Set(bigOne)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		totient := new(big.Int).Set(bigOne)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		pminus1 := new(big.Int)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		for _, prime := range primes {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			n.Mul(n, prime)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			pminus1.Sub(prime, bigOne)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			totient.Mul(totient, pminus1)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		if n.BitLen() != bits {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			<span class="comment">// This should never happen for nprimes == 2 because</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			<span class="comment">// crypto/rand should set the top two bits in each prime.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			<span class="comment">// For nprimes &gt; 2 we hope it does not happen often.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			continue NextSetOfPrimes
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		priv.D = new(big.Int)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		e := big.NewInt(int64(priv.E))
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		ok := priv.D.ModInverse(e, totient)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if ok != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			priv.Primes = primes
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			priv.N = n
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			break
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	priv.Precompute()
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	return priv, nil
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// incCounter increments a four byte, big-endian counter.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>func incCounter(c *[4]byte) {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if c[3]++; c[3] != 0 {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		return
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	if c[2]++; c[2] != 0 {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		return
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	if c[1]++; c[1] != 0 {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		return
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	c[0]++
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// mgf1XOR XORs the bytes in out with a mask generated using the MGF1 function</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// specified in PKCS #1 v2.1.</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>func mgf1XOR(out []byte, hash hash.Hash, seed []byte) {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	var counter [4]byte
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	var digest []byte
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	done := 0
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	for done &lt; len(out) {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		hash.Write(seed)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		hash.Write(counter[0:4])
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		digest = hash.Sum(digest[:0])
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		hash.Reset()
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		for i := 0; i &lt; len(digest) &amp;&amp; done &lt; len(out); i++ {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			out[done] ^= digest[i]
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			done++
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		incCounter(&amp;counter)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// ErrMessageTooLong is returned when attempting to encrypt or sign a message</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// which is too large for the size of the key. When using [SignPSS], this can also</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// be returned if the size of the salt is too large.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>var ErrMessageTooLong = errors.New(&#34;crypto/rsa: message too long for RSA key size&#34;)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func encrypt(pub *PublicKey, plaintext []byte) ([]byte, error) {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	boring.Unreachable()
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	N, err := bigmod.NewModulusFromBig(pub.N)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if err != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		return nil, err
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	m, err := bigmod.NewNat().SetBytes(plaintext, N)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	if err != nil {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		return nil, err
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	e := uint(pub.E)
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	return bigmod.NewNat().ExpShortVarTime(m, e, N).Bytes(N), nil
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// EncryptOAEP encrypts the given message with RSA-OAEP.</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// OAEP is parameterised by a hash function that is used as a random oracle.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// Encryption and decryption of a given message must use the same hash function</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">// and sha256.New() is a reasonable choice.</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// The random parameter is used as a source of entropy to ensure that</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">// encrypting the same message twice doesn&#39;t result in the same ciphertext.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// Most applications should use [crypto/rand.Reader] as random.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// The label parameter may contain arbitrary data that will not be encrypted,</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// but which gives important context to the message. For example, if a given</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// public key is used to encrypt two types of messages then distinct label</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// values could be used to ensure that a ciphertext for one purpose cannot be</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// used for another by an attacker. If not required it can be empty.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// The message must be no longer than the length of the public modulus minus</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">// twice the hash length, minus a further 2.</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error) {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	<span class="comment">// Note that while we don&#39;t commit to deterministic execution with respect</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	<span class="comment">// to the random stream, we also don&#39;t apply MaybeReadByte, so per Hyrum&#39;s</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	<span class="comment">// Law it&#39;s probably relied upon by some. It&#39;s a tolerable promise because a</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	<span class="comment">// well-specified number of random bytes is included in the ciphertext, in a</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// well-specified way.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	if err := checkPub(pub); err != nil {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		return nil, err
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	hash.Reset()
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	k := pub.Size()
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	if len(msg) &gt; k-2*hash.Size()-2 {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		return nil, ErrMessageTooLong
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	if boring.Enabled &amp;&amp; random == boring.RandReader {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		bkey, err := boringPublicKey(pub)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if err != nil {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			return nil, err
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		return boring.EncryptRSAOAEP(hash, hash, bkey, msg, label)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	boring.UnreachableExceptTests()
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	hash.Write(label)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	lHash := hash.Sum(nil)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	hash.Reset()
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	em := make([]byte, k)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	seed := em[1 : 1+hash.Size()]
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	db := em[1+hash.Size():]
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	copy(db[0:hash.Size()], lHash)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	db[len(db)-len(msg)-1] = 1
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	copy(db[len(db)-len(msg):], msg)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	_, err := io.ReadFull(random, seed)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	if err != nil {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return nil, err
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	mgf1XOR(db, hash, seed)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	mgf1XOR(seed, hash, db)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		var bkey *boring.PublicKeyRSA
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		bkey, err = boringPublicKey(pub)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		if err != nil {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			return nil, err
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		return boring.EncryptRSANoPadding(bkey, em)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	return encrypt(pub, em)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// ErrDecryption represents a failure to decrypt a message.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// It is deliberately vague to avoid adaptive attacks.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>var ErrDecryption = errors.New(&#34;crypto/rsa: decryption error&#34;)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// ErrVerification represents a failure to verify a signature.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// It is deliberately vague to avoid adaptive attacks.</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>var ErrVerification = errors.New(&#34;crypto/rsa: verification error&#34;)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// Precompute performs some calculations that speed up private key operations</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// in the future.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>func (priv *PrivateKey) Precompute() {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	if priv.Precomputed.n == nil &amp;&amp; len(priv.Primes) == 2 {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		<span class="comment">// Precomputed values _should_ always be valid, but if they aren&#39;t</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		<span class="comment">// just return. We could also panic.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		var err error
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		priv.Precomputed.n, err = bigmod.NewModulusFromBig(priv.N)
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		if err != nil {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			return
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		priv.Precomputed.p, err = bigmod.NewModulusFromBig(priv.Primes[0])
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		if err != nil {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			<span class="comment">// Unset previous values, so we either have everything or nothing</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			priv.Precomputed.n = nil
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			return
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		priv.Precomputed.q, err = bigmod.NewModulusFromBig(priv.Primes[1])
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		if err != nil {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			<span class="comment">// Unset previous values, so we either have everything or nothing</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			priv.Precomputed.n, priv.Precomputed.p = nil, nil
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			return
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	<span class="comment">// Fill in the backwards-compatibility *big.Int values.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	if priv.Precomputed.Dp != nil {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		return
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	priv.Precomputed.Dp = new(big.Int).Sub(priv.Primes[0], bigOne)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	priv.Precomputed.Dp.Mod(priv.D, priv.Precomputed.Dp)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	priv.Precomputed.Dq = new(big.Int).Sub(priv.Primes[1], bigOne)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	priv.Precomputed.Dq.Mod(priv.D, priv.Precomputed.Dq)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	priv.Precomputed.Qinv = new(big.Int).ModInverse(priv.Primes[1], priv.Primes[0])
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	r := new(big.Int).Mul(priv.Primes[0], priv.Primes[1])
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	priv.Precomputed.CRTValues = make([]CRTValue, len(priv.Primes)-2)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	for i := 2; i &lt; len(priv.Primes); i++ {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		prime := priv.Primes[i]
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		values := &amp;priv.Precomputed.CRTValues[i-2]
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		values.Exp = new(big.Int).Sub(prime, bigOne)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		values.Exp.Mod(priv.D, values.Exp)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		values.R = new(big.Int).Set(r)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		values.Coeff = new(big.Int).ModInverse(r, prime)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		r.Mul(r, prime)
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>const withCheck = true
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>const noCheck = false
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// decrypt performs an RSA decryption of ciphertext into out. If check is true,</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span><span class="comment">// m^e is calculated and compared with ciphertext, in order to defend against</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span><span class="comment">// errors in the CRT computation.</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>func decrypt(priv *PrivateKey, ciphertext []byte, check bool) ([]byte, error) {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	if len(priv.Primes) &lt;= 2 {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		boring.Unreachable()
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	var (
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		err  error
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		m, c *bigmod.Nat
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		N    *bigmod.Modulus
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		t0   = bigmod.NewNat()
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	)
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	if priv.Precomputed.n == nil {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		N, err = bigmod.NewModulusFromBig(priv.N)
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		if err != nil {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		c, err = bigmod.NewNat().SetBytes(ciphertext, N)
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if err != nil {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		m = bigmod.NewNat().Exp(c, priv.D.Bytes(), N)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	} else {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		N = priv.Precomputed.n
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		P, Q := priv.Precomputed.p, priv.Precomputed.q
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		Qinv, err := bigmod.NewNat().SetBytes(priv.Precomputed.Qinv.Bytes(), P)
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		if err != nil {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		c, err = bigmod.NewNat().SetBytes(ciphertext, N)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		if err != nil {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		<span class="comment">// m = c ^ Dp mod p</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		m = bigmod.NewNat().Exp(t0.Mod(c, P), priv.Precomputed.Dp.Bytes(), P)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		<span class="comment">// m2 = c ^ Dq mod q</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		m2 := bigmod.NewNat().Exp(t0.Mod(c, Q), priv.Precomputed.Dq.Bytes(), Q)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		<span class="comment">// m = m - m2 mod p</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		m.Sub(t0.Mod(m2, P), P)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		<span class="comment">// m = m * Qinv mod p</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		m.Mul(Qinv, P)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		<span class="comment">// m = m * q mod N</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		m.ExpandFor(N).Mul(t0.Mod(Q.Nat(), N), N)
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		<span class="comment">// m = m + m2 mod N</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		m.Add(m2.ExpandFor(N), N)
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	if check {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		c1 := bigmod.NewNat().ExpShortVarTime(m, uint(priv.E), N)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		if c1.Equal(c) != 1 {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	return m.Bytes(N), nil
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span><span class="comment">// DecryptOAEP decrypts ciphertext using RSA-OAEP.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// OAEP is parameterised by a hash function that is used as a random oracle.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// Encryption and decryption of a given message must use the same hash function</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// and sha256.New() is a reasonable choice.</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// The random parameter is legacy and ignored, and it can be nil.</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// The label parameter must match the value given when encrypting. See</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// [EncryptOAEP] for details.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>func DecryptOAEP(hash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext []byte, label []byte) ([]byte, error) {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	return decryptOAEP(hash, hash, random, priv, ciphertext, label)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>func decryptOAEP(hash, mgfHash hash.Hash, random io.Reader, priv *PrivateKey, ciphertext []byte, label []byte) ([]byte, error) {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	if err := checkPub(&amp;priv.PublicKey); err != nil {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		return nil, err
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	k := priv.Size()
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	if len(ciphertext) &gt; k ||
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		k &lt; hash.Size()*2+2 {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		return nil, ErrDecryption
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	if boring.Enabled {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		bkey, err := boringPrivateKey(priv)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		if err != nil {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			return nil, err
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		out, err := boring.DecryptRSAOAEP(hash, mgfHash, bkey, ciphertext, label)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		if err != nil {
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			return nil, ErrDecryption
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		return out, nil
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	em, err := decrypt(priv, ciphertext, noCheck)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	if err != nil {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		return nil, err
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	hash.Write(label)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	lHash := hash.Sum(nil)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	hash.Reset()
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	firstByteIsZero := subtle.ConstantTimeByteEq(em[0], 0)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	seed := em[1 : hash.Size()+1]
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	db := em[hash.Size()+1:]
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	mgf1XOR(seed, mgfHash, db)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	mgf1XOR(db, mgfHash, seed)
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	lHash2 := db[0:hash.Size()]
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	<span class="comment">// We have to validate the plaintext in constant time in order to avoid</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	<span class="comment">// attacks like: J. Manger. A Chosen Ciphertext Attack on RSA Optimal</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	<span class="comment">// Asymmetric Encryption Padding (OAEP) as Standardized in PKCS #1</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	<span class="comment">// v2.0. In J. Kilian, editor, Advances in Cryptology.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	lHash2Good := subtle.ConstantTimeCompare(lHash, lHash2)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	<span class="comment">// The remainder of the plaintext must be zero or more 0x00, followed</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	<span class="comment">// by 0x01, followed by the message.</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	<span class="comment">//   lookingForIndex: 1 iff we are still looking for the 0x01</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	<span class="comment">//   index: the offset of the first 0x01 byte</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	<span class="comment">//   invalid: 1 iff we saw a non-zero byte before the 0x01.</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	var lookingForIndex, index, invalid int
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	lookingForIndex = 1
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	rest := db[hash.Size():]
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	for i := 0; i &lt; len(rest); i++ {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		equals0 := subtle.ConstantTimeByteEq(rest[i], 0)
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		equals1 := subtle.ConstantTimeByteEq(rest[i], 1)
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		index = subtle.ConstantTimeSelect(lookingForIndex&amp;equals1, i, index)
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		lookingForIndex = subtle.ConstantTimeSelect(equals1, 0, lookingForIndex)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		invalid = subtle.ConstantTimeSelect(lookingForIndex&amp;^equals0, 1, invalid)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	if firstByteIsZero&amp;lHash2Good&amp;^invalid&amp;^lookingForIndex != 1 {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		return nil, ErrDecryption
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	return rest[index+1:], nil
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
</pre><p><a href="rsa.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
