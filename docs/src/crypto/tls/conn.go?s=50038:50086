<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/tls/conn.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./conn.go?s=50038:50086#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/tls">tls</a>/<span class="text-muted">conn.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/tls">crypto/tls</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// TLS low level connection and record layer</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package tls
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;crypto/cipher&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;crypto/x509&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;hash&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// A Conn represents a secured connection.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// It implements the net.Conn interface.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>type Conn struct {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// constant</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	conn        net.Conn
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	isClient    bool
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	handshakeFn func(context.Context) error <span class="comment">// (*Conn).clientHandshake or serverHandshake</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	quic        *quicState                  <span class="comment">// nil for non-QUIC connections</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// isHandshakeComplete is true if the connection is currently transferring</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// application data (i.e. is not currently processing a handshake).</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// isHandshakeComplete is true implies handshakeErr == nil.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	isHandshakeComplete atomic.Bool
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// constant after handshake; protected by handshakeMutex</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	handshakeMutex sync.Mutex
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	handshakeErr   error   <span class="comment">// error resulting from handshake</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	vers           uint16  <span class="comment">// TLS version</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	haveVers       bool    <span class="comment">// version has been negotiated</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	config         *Config <span class="comment">// configuration passed to constructor</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// handshakes counts the number of handshakes performed on the</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// connection so far. If renegotiation is disabled then this is either</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// zero or one.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	handshakes       int
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	extMasterSecret  bool
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	didResume        bool <span class="comment">// whether this connection was a session resumption</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	cipherSuite      uint16
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	ocspResponse     []byte   <span class="comment">// stapled OCSP response</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	scts             [][]byte <span class="comment">// signed certificate timestamps from server</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	peerCertificates []*x509.Certificate
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// activeCertHandles contains the cache handles to certificates in</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// peerCertificates that are used to track active references.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	activeCertHandles []*activeCert
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// verifiedChains contains the certificate chains that we built, as</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// opposed to the ones presented by the server.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	verifiedChains [][]*x509.Certificate
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// serverName contains the server name indicated by the client, if any.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	serverName string
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// secureRenegotiation is true if the server echoed the secure</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// renegotiation extension. (This is meaningless as a server because</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// renegotiation is not supported in that case.)</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	secureRenegotiation bool
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// ekm is a closure for exporting keying material.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	ekm func(label string, context []byte, length int) ([]byte, error)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// resumptionSecret is the resumption_master_secret for handling</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// or sending NewSessionTicket messages.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	resumptionSecret []byte
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// ticketKeys is the set of active session ticket keys for this</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// connection. The first one is used to encrypt new tickets and</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// all are tried to decrypt tickets.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	ticketKeys []ticketKey
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// clientFinishedIsFirst is true if the client sent the first Finished</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// message during the most recent handshake. This is recorded because</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// the first transmitted Finished message is the tls-unique</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// channel-binding value.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	clientFinishedIsFirst bool
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// closeNotifyErr is any error from sending the alertCloseNotify record.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	closeNotifyErr error
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// closeNotifySent is true if the Conn attempted to send an</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// alertCloseNotify record.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	closeNotifySent bool
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// clientFinished and serverFinished contain the Finished message sent</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// by the client or server in the most recent handshake. This is</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// retained to support the renegotiation extension and tls-unique</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// channel-binding.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	clientFinished [12]byte
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	serverFinished [12]byte
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// clientProtocol is the negotiated ALPN protocol.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	clientProtocol string
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// input/output</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	in, out   halfConn
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	rawInput  bytes.Buffer <span class="comment">// raw input, starting with a record header</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	input     bytes.Reader <span class="comment">// application data waiting to be read, from rawInput.Next</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	hand      bytes.Buffer <span class="comment">// handshake data waiting to be read</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	buffering bool         <span class="comment">// whether records are buffered in sendBuf</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	sendBuf   []byte       <span class="comment">// a buffer of records waiting to be sent</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// bytesSent counts the bytes of application data sent.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// packetsSent counts packets.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	bytesSent   int64
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	packetsSent int64
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// retryCount counts the number of consecutive non-advancing records</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// received by Conn.readRecord. That is, records that neither advance the</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// handshake, nor deliver application data. Protected by in.Mutex.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	retryCount int
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// activeCall indicates whether Close has been call in the low bit.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// the rest of the bits are the number of goroutines in Conn.Write.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	activeCall atomic.Int32
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	tmp [16]byte
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// Access to net.Conn methods.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// Cannot just embed net.Conn because that would</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// export the struct field too.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// LocalAddr returns the local network address.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func (c *Conn) LocalAddr() net.Addr {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return c.conn.LocalAddr()
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// RemoteAddr returns the remote network address.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (c *Conn) RemoteAddr() net.Addr {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return c.conn.RemoteAddr()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// SetDeadline sets the read and write deadlines associated with the connection.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// A zero value for t means [Conn.Read] and [Conn.Write] will not time out.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>func (c *Conn) SetDeadline(t time.Time) error {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return c.conn.SetDeadline(t)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// SetReadDeadline sets the read deadline on the underlying connection.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// A zero value for t means [Conn.Read] will not time out.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func (c *Conn) SetReadDeadline(t time.Time) error {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return c.conn.SetReadDeadline(t)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// SetWriteDeadline sets the write deadline on the underlying connection.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// A zero value for t means [Conn.Write] will not time out.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// After a [Conn.Write] has timed out, the TLS state is corrupt and all future writes will return the same error.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func (c *Conn) SetWriteDeadline(t time.Time) error {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	return c.conn.SetWriteDeadline(t)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// NetConn returns the underlying connection that is wrapped by c.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// Note that writing to or reading from this connection directly will corrupt the</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// TLS session.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (c *Conn) NetConn() net.Conn {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return c.conn
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// A halfConn represents one direction of the record layer</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// connection, either sending or receiving.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>type halfConn struct {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	sync.Mutex
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	err     error  <span class="comment">// first permanent error</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	version uint16 <span class="comment">// protocol version</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	cipher  any    <span class="comment">// cipher algorithm</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	mac     hash.Hash
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	seq     [8]byte <span class="comment">// 64-bit sequence number</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	scratchBuf [13]byte <span class="comment">// to avoid allocs; interface method args escape</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	nextCipher any       <span class="comment">// next encryption state</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	nextMac    hash.Hash <span class="comment">// next MAC algorithm</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	level         QUICEncryptionLevel <span class="comment">// current QUIC encryption level</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	trafficSecret []byte              <span class="comment">// current TLS 1.3 traffic secret</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>type permanentError struct {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	err net.Error
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>func (e *permanentError) Error() string   { return e.err.Error() }
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (e *permanentError) Unwrap() error   { return e.err }
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (e *permanentError) Timeout() bool   { return e.err.Timeout() }
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func (e *permanentError) Temporary() bool { return false }
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func (hc *halfConn) setErrorLocked(err error) error {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if e, ok := err.(net.Error); ok {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		hc.err = &amp;permanentError{err: e}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	} else {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		hc.err = err
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return hc.err
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// prepareCipherSpec sets the encryption and MAC states</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// that a subsequent changeCipherSpec will use.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (hc *halfConn) prepareCipherSpec(version uint16, cipher any, mac hash.Hash) {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	hc.version = version
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	hc.nextCipher = cipher
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	hc.nextMac = mac
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// changeCipherSpec changes the encryption and MAC states</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// to the ones previously passed to prepareCipherSpec.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>func (hc *halfConn) changeCipherSpec() error {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	if hc.nextCipher == nil || hc.version == VersionTLS13 {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return alertInternalError
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	hc.cipher = hc.nextCipher
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	hc.mac = hc.nextMac
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	hc.nextCipher = nil
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	hc.nextMac = nil
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	for i := range hc.seq {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		hc.seq[i] = 0
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return nil
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>func (hc *halfConn) setTrafficSecret(suite *cipherSuiteTLS13, level QUICEncryptionLevel, secret []byte) {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	hc.trafficSecret = secret
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	hc.level = level
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	key, iv := suite.trafficKey(secret)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	hc.cipher = suite.aead(key, iv)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	for i := range hc.seq {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		hc.seq[i] = 0
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// incSeq increments the sequence number.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func (hc *halfConn) incSeq() {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	for i := 7; i &gt;= 0; i-- {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		hc.seq[i]++
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if hc.seq[i] != 0 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			return
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// Not allowed to let sequence number wrap.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// Instead, must renegotiate before it does.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// Not likely enough to bother.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	panic(&#34;TLS: sequence number wraparound&#34;)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// explicitNonceLen returns the number of bytes of explicit nonce or IV included</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// in each record. Explicit nonces are present only in CBC modes after TLS 1.0</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// and in certain AEAD modes in TLS 1.2.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>func (hc *halfConn) explicitNonceLen() int {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if hc.cipher == nil {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return 0
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	switch c := hc.cipher.(type) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	case cipher.Stream:
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		return 0
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	case aead:
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		return c.explicitNonceLen()
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	case cbcMode:
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		<span class="comment">// TLS 1.1 introduced a per-record explicit IV to fix the BEAST attack.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		if hc.version &gt;= VersionTLS11 {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			return c.BlockSize()
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		return 0
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	default:
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		panic(&#34;unknown cipher type&#34;)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// extractPadding returns, in constant time, the length of the padding to remove</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// from the end of payload. It also returns a byte which is equal to 255 if the</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// padding was valid and 0 otherwise. See RFC 2246, Section 6.2.3.2.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func extractPadding(payload []byte) (toRemove int, good byte) {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if len(payload) &lt; 1 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return 0, 0
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	paddingLen := payload[len(payload)-1]
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	t := uint(len(payload)-1) - uint(paddingLen)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// if len(payload) &gt;= (paddingLen - 1) then the MSB of t is zero</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	good = byte(int32(^t) &gt;&gt; 31)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// The maximum possible padding length plus the actual length field</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	toCheck := 256
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// The length of the padded data is public, so we can use an if here</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if toCheck &gt; len(payload) {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		toCheck = len(payload)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	for i := 0; i &lt; toCheck; i++ {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		t := uint(paddingLen) - uint(i)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		<span class="comment">// if i &lt;= paddingLen then the MSB of t is zero</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		mask := byte(int32(^t) &gt;&gt; 31)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		b := payload[len(payload)-1-i]
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		good &amp;^= mask&amp;paddingLen ^ mask&amp;b
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// We AND together the bits of good and replicate the result across</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// all the bits.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	good &amp;= good &lt;&lt; 4
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	good &amp;= good &lt;&lt; 2
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	good &amp;= good &lt;&lt; 1
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	good = uint8(int8(good) &gt;&gt; 7)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// Zero the padding length on error. This ensures any unchecked bytes</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// are included in the MAC. Otherwise, an attacker that could</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// distinguish MAC failures from padding failures could mount an attack</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	<span class="comment">// similar to POODLE in SSL 3.0: given a good ciphertext that uses a</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	<span class="comment">// full block&#39;s worth of padding, replace the final block with another</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// block. If the MAC check passed but the padding check failed, the</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// last byte of that block decrypted to the block size.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// See also macAndPaddingGood logic below.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	paddingLen &amp;= good
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	toRemove = int(paddingLen) + 1
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	return
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>func roundUp(a, b int) int {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	return a + (b-a%b)%b
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// cbcMode is an interface for block ciphers using cipher block chaining.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>type cbcMode interface {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	cipher.BlockMode
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	SetIV([]byte)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// decrypt authenticates and decrypts the record if protection is active at</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// this stage. The returned plaintext might overlap with the input.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func (hc *halfConn) decrypt(record []byte) ([]byte, recordType, error) {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	var plaintext []byte
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	typ := recordType(record[0])
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	payload := record[recordHeaderLen:]
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// In TLS 1.3, change_cipher_spec messages are to be ignored without being</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// decrypted. See RFC 8446, Appendix D.4.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if hc.version == VersionTLS13 &amp;&amp; typ == recordTypeChangeCipherSpec {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		return payload, typ, nil
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	paddingGood := byte(255)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	paddingLen := 0
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	explicitNonceLen := hc.explicitNonceLen()
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if hc.cipher != nil {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		switch c := hc.cipher.(type) {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		case cipher.Stream:
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			c.XORKeyStream(payload, payload)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		case aead:
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			if len(payload) &lt; explicitNonceLen {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>				return nil, 0, alertBadRecordMAC
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			nonce := payload[:explicitNonceLen]
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			if len(nonce) == 0 {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				nonce = hc.seq[:]
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			payload = payload[explicitNonceLen:]
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			var additionalData []byte
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			if hc.version == VersionTLS13 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				additionalData = record[:recordHeaderLen]
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			} else {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				additionalData = append(hc.scratchBuf[:0], hc.seq[:]...)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				additionalData = append(additionalData, record[:3]...)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>				n := len(payload) - c.Overhead()
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				additionalData = append(additionalData, byte(n&gt;&gt;8), byte(n))
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			var err error
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			plaintext, err = c.Open(payload[:0], nonce, payload, additionalData)
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			if err != nil {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				return nil, 0, alertBadRecordMAC
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		case cbcMode:
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			blockSize := c.BlockSize()
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			minPayload := explicitNonceLen + roundUp(hc.mac.Size()+1, blockSize)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			if len(payload)%blockSize != 0 || len(payload) &lt; minPayload {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>				return nil, 0, alertBadRecordMAC
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			if explicitNonceLen &gt; 0 {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				c.SetIV(payload[:explicitNonceLen])
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				payload = payload[explicitNonceLen:]
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			c.CryptBlocks(payload, payload)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			<span class="comment">// In a limited attempt to protect against CBC padding oracles like</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			<span class="comment">// Lucky13, the data past paddingLen (which is secret) is passed to</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			<span class="comment">// the MAC function as extra data, to be fed into the HMAC after</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			<span class="comment">// computing the digest. This makes the MAC roughly constant time as</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			<span class="comment">// long as the digest computation is constant time and does not</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			<span class="comment">// affect the subsequent write, modulo cache effects.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			paddingLen, paddingGood = extractPadding(payload)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		default:
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			panic(&#34;unknown cipher type&#34;)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		if hc.version == VersionTLS13 {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			if typ != recordTypeApplicationData {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				return nil, 0, alertUnexpectedMessage
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			if len(plaintext) &gt; maxPlaintext+1 {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				return nil, 0, alertRecordOverflow
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			<span class="comment">// Remove padding and find the ContentType scanning from the end.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			for i := len(plaintext) - 1; i &gt;= 0; i-- {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				if plaintext[i] != 0 {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>					typ = recordType(plaintext[i])
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>					plaintext = plaintext[:i]
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>					break
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>				if i == 0 {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>					return nil, 0, alertUnexpectedMessage
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	} else {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		plaintext = payload
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if hc.mac != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		macSize := hc.mac.Size()
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		if len(payload) &lt; macSize {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			return nil, 0, alertBadRecordMAC
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		n := len(payload) - macSize - paddingLen
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		n = subtle.ConstantTimeSelect(int(uint32(n)&gt;&gt;31), 0, n) <span class="comment">// if n &lt; 0 { n = 0 }</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		record[3] = byte(n &gt;&gt; 8)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		record[4] = byte(n)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		remoteMAC := payload[n : n+macSize]
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		localMAC := tls10MAC(hc.mac, hc.scratchBuf[:0], hc.seq[:], record[:recordHeaderLen], payload[:n], payload[n+macSize:])
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		<span class="comment">// This is equivalent to checking the MACs and paddingGood</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		<span class="comment">// separately, but in constant-time to prevent distinguishing</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		<span class="comment">// padding failures from MAC failures. Depending on what value</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		<span class="comment">// of paddingLen was returned on bad padding, distinguishing</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// bad MAC from bad padding can lead to an attack.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">// See also the logic at the end of extractPadding.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		macAndPaddingGood := subtle.ConstantTimeCompare(localMAC, remoteMAC) &amp; int(paddingGood)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		if macAndPaddingGood != 1 {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			return nil, 0, alertBadRecordMAC
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		plaintext = payload[:n]
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	hc.incSeq()
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	return plaintext, typ, nil
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// sliceForAppend extends the input slice by n bytes. head is the full extended</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// slice, while tail is the appended part. If the original slice has sufficient</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// capacity no allocation is performed.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>func sliceForAppend(in []byte, n int) (head, tail []byte) {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	if total := len(in) + n; cap(in) &gt;= total {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		head = in[:total]
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	} else {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		head = make([]byte, total)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		copy(head, in)
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	tail = head[len(in):]
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	return
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// encrypt encrypts payload, adding the appropriate nonce and/or MAC, and</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// appends it to record, which must already contain the record header.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>func (hc *halfConn) encrypt(record, payload []byte, rand io.Reader) ([]byte, error) {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	if hc.cipher == nil {
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		return append(record, payload...), nil
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	var explicitNonce []byte
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	if explicitNonceLen := hc.explicitNonceLen(); explicitNonceLen &gt; 0 {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		record, explicitNonce = sliceForAppend(record, explicitNonceLen)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		if _, isCBC := hc.cipher.(cbcMode); !isCBC &amp;&amp; explicitNonceLen &lt; 16 {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			<span class="comment">// The AES-GCM construction in TLS has an explicit nonce so that the</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			<span class="comment">// nonce can be random. However, the nonce is only 8 bytes which is</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			<span class="comment">// too small for a secure, random nonce. Therefore we use the</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			<span class="comment">// sequence number as the nonce. The 3DES-CBC construction also has</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			<span class="comment">// an 8 bytes nonce but its nonces must be unpredictable (see RFC</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			<span class="comment">// 5246, Appendix F.3), forcing us to use randomness. That&#39;s not</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			<span class="comment">// 3DES&#39; biggest problem anyway because the birthday bound on block</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			<span class="comment">// collision is reached first due to its similarly small block size</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			<span class="comment">// (see the Sweet32 attack).</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			copy(explicitNonce, hc.seq[:])
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		} else {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			if _, err := io.ReadFull(rand, explicitNonce); err != nil {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>				return nil, err
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	var dst []byte
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	switch c := hc.cipher.(type) {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	case cipher.Stream:
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		mac := tls10MAC(hc.mac, hc.scratchBuf[:0], hc.seq[:], record[:recordHeaderLen], payload, nil)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		record, dst = sliceForAppend(record, len(payload)+len(mac))
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		c.XORKeyStream(dst[:len(payload)], payload)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		c.XORKeyStream(dst[len(payload):], mac)
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	case aead:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		nonce := explicitNonce
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		if len(nonce) == 0 {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			nonce = hc.seq[:]
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		if hc.version == VersionTLS13 {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			record = append(record, payload...)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			<span class="comment">// Encrypt the actual ContentType and replace the plaintext one.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			record = append(record, record[0])
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			record[0] = byte(recordTypeApplicationData)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			n := len(payload) + 1 + c.Overhead()
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			record[3] = byte(n &gt;&gt; 8)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			record[4] = byte(n)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			record = c.Seal(record[:recordHeaderLen],
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>				nonce, record[recordHeaderLen:], record[:recordHeaderLen])
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		} else {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			additionalData := append(hc.scratchBuf[:0], hc.seq[:]...)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			additionalData = append(additionalData, record[:recordHeaderLen]...)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			record = c.Seal(record, nonce, payload, additionalData)
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	case cbcMode:
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		mac := tls10MAC(hc.mac, hc.scratchBuf[:0], hc.seq[:], record[:recordHeaderLen], payload, nil)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		blockSize := c.BlockSize()
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		plaintextLen := len(payload) + len(mac)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		paddingLen := blockSize - plaintextLen%blockSize
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		record, dst = sliceForAppend(record, plaintextLen+paddingLen)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		copy(dst, payload)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		copy(dst[len(payload):], mac)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		for i := plaintextLen; i &lt; len(dst); i++ {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			dst[i] = byte(paddingLen - 1)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		if len(explicitNonce) &gt; 0 {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			c.SetIV(explicitNonce)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		c.CryptBlocks(dst, dst)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	default:
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		panic(&#34;unknown cipher type&#34;)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	<span class="comment">// Update length to include nonce, MAC and any block padding needed.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	n := len(record) - recordHeaderLen
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	record[3] = byte(n &gt;&gt; 8)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	record[4] = byte(n)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	hc.incSeq()
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	return record, nil
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span><span class="comment">// RecordHeaderError is returned when a TLS record header is invalid.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>type RecordHeaderError struct {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	<span class="comment">// Msg contains a human readable string that describes the error.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	Msg string
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	<span class="comment">// RecordHeader contains the five bytes of TLS record header that</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	<span class="comment">// triggered the error.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	RecordHeader [5]byte
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	<span class="comment">// Conn provides the underlying net.Conn in the case that a client</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	<span class="comment">// sent an initial handshake that didn&#39;t look like TLS.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	<span class="comment">// It is nil if there&#39;s already been a handshake or a TLS alert has</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	<span class="comment">// been written to the connection.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	Conn net.Conn
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>func (e RecordHeaderError) Error() string { return &#34;tls: &#34; + e.Msg }
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func (c *Conn) newRecordHeaderError(conn net.Conn, msg string) (err RecordHeaderError) {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	err.Msg = msg
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	err.Conn = conn
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	copy(err.RecordHeader[:], c.rawInput.Bytes())
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	return err
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>func (c *Conn) readRecord() error {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	return c.readRecordOrCCS(false)
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>func (c *Conn) readChangeCipherSpec() error {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	return c.readRecordOrCCS(true)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">// readRecordOrCCS reads one or more TLS records from the connection and</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// updates the record layer state. Some invariants:</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">//   - c.in must be locked</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">//   - c.input must be empty</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// During the handshake one and only one of the following will happen:</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">//   - c.hand grows</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span><span class="comment">//   - c.in.changeCipherSpec is called</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span><span class="comment">//   - an error is returned</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span><span class="comment">// After the handshake one and only one of the following will happen:</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">//   - c.hand grows</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span><span class="comment">//   - c.input is set</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span><span class="comment">//   - an error is returned</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>func (c *Conn) readRecordOrCCS(expectChangeCipherSpec bool) error {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	if c.in.err != nil {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		return c.in.err
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	handshakeComplete := c.isHandshakeComplete.Load()
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// This function modifies c.rawInput, which owns the c.input memory.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	if c.input.Len() != 0 {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		return c.in.setErrorLocked(errors.New(&#34;tls: internal error: attempted to read record with pending application data&#34;))
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	c.input.Reset(nil)
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		return c.in.setErrorLocked(errors.New(&#34;tls: internal error: attempted to read record with QUIC transport&#34;))
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">// Read header, payload.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	if err := c.readFromUntil(c.conn, recordHeaderLen); err != nil {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		<span class="comment">// RFC 8446, Section 6.1 suggests that EOF without an alertCloseNotify</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		<span class="comment">// is an error, but popular web sites seem to do this, so we accept it</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		<span class="comment">// if and only if at the record boundary.</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if err == io.ErrUnexpectedEOF &amp;&amp; c.rawInput.Len() == 0 {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			err = io.EOF
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		if e, ok := err.(net.Error); !ok || !e.Temporary() {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			c.in.setErrorLocked(err)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return err
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	hdr := c.rawInput.Bytes()[:recordHeaderLen]
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	typ := recordType(hdr[0])
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	<span class="comment">// No valid TLS record has a type of 0x80, however SSLv2 handshakes</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	<span class="comment">// start with a uint16 length where the MSB is set and the first record</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	<span class="comment">// is always &lt; 256 bytes long. Therefore typ == 0x80 strongly suggests</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	<span class="comment">// an SSLv2 client.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	if !handshakeComplete &amp;&amp; typ == 0x80 {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		c.sendAlert(alertProtocolVersion)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.newRecordHeaderError(nil, &#34;unsupported SSLv2 handshake received&#34;))
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	vers := uint16(hdr[1])&lt;&lt;8 | uint16(hdr[2])
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	expectedVers := c.vers
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	if expectedVers == VersionTLS13 {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		<span class="comment">// All TLS 1.3 records are expected to have 0x0303 (1.2) after</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		<span class="comment">// the initial hello (RFC 8446 Section 5.1).</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		expectedVers = VersionTLS12
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	n := int(hdr[3])&lt;&lt;8 | int(hdr[4])
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	if c.haveVers &amp;&amp; vers != expectedVers {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		c.sendAlert(alertProtocolVersion)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		msg := fmt.Sprintf(&#34;received record with version %x when expecting version %x&#34;, vers, expectedVers)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.newRecordHeaderError(nil, msg))
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	if !c.haveVers {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		<span class="comment">// First message, be extra suspicious: this might not be a TLS</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		<span class="comment">// client. Bail out before reading a full &#39;body&#39;, if possible.</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		<span class="comment">// The current max version is 3.3 so if the version is &gt;= 16.0,</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		<span class="comment">// it&#39;s probably not real.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		if (typ != recordTypeAlert &amp;&amp; typ != recordTypeHandshake) || vers &gt;= 0x1000 {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.newRecordHeaderError(c.conn, &#34;first record does not look like a TLS handshake&#34;))
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	if c.vers == VersionTLS13 &amp;&amp; n &gt; maxCiphertextTLS13 || n &gt; maxCiphertext {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		c.sendAlert(alertRecordOverflow)
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		msg := fmt.Sprintf(&#34;oversized record received with length %d&#34;, n)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.newRecordHeaderError(nil, msg))
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	if err := c.readFromUntil(c.conn, recordHeaderLen+n); err != nil {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		if e, ok := err.(net.Error); !ok || !e.Temporary() {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			c.in.setErrorLocked(err)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		return err
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	<span class="comment">// Process message.</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	record := c.rawInput.Next(recordHeaderLen + n)
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	data, typ, err := c.in.decrypt(record)
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	if err != nil {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(err.(alert)))
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	if len(data) &gt; maxPlaintext {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(alertRecordOverflow))
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	<span class="comment">// Application Data messages are always protected.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	if c.in.cipher == nil &amp;&amp; typ == recordTypeApplicationData {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	if typ != recordTypeAlert &amp;&amp; typ != recordTypeChangeCipherSpec &amp;&amp; len(data) &gt; 0 {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		<span class="comment">// This is a state-advancing message: reset the retry count.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		c.retryCount = 0
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	<span class="comment">// Handshake messages MUST NOT be interleaved with other record types in TLS 1.3.</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	if c.vers == VersionTLS13 &amp;&amp; typ != recordTypeHandshake &amp;&amp; c.hand.Len() &gt; 0 {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	switch typ {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	default:
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	case recordTypeAlert:
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		if c.quic != nil {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		}
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		if len(data) != 2 {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		if alert(data[1]) == alertCloseNotify {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			return c.in.setErrorLocked(io.EOF)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		if c.vers == VersionTLS13 {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			return c.in.setErrorLocked(&amp;net.OpError{Op: &#34;remote error&#34;, Err: alert(data[1])})
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		switch data[0] {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		case alertLevelWarning:
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			<span class="comment">// Drop the record on the floor and retry.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			return c.retryReadRecord(expectChangeCipherSpec)
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		case alertLevelError:
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			return c.in.setErrorLocked(&amp;net.OpError{Op: &#34;remote error&#34;, Err: alert(data[1])})
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		default:
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	case recordTypeChangeCipherSpec:
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		if len(data) != 1 || data[0] != 1 {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertDecodeError))
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		<span class="comment">// Handshake messages are not allowed to fragment across the CCS.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		if c.hand.Len() &gt; 0 {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		<span class="comment">// In TLS 1.3, change_cipher_spec records are ignored until the</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		<span class="comment">// Finished. See RFC 8446, Appendix D.4. Note that according to Section</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		<span class="comment">// 5, a server can send a ChangeCipherSpec before its ServerHello, when</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		<span class="comment">// c.vers is still unset. That&#39;s not useful though and suspicious if the</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		<span class="comment">// server then selects a lower protocol version, so don&#39;t allow that.</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		if c.vers == VersionTLS13 {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			return c.retryReadRecord(expectChangeCipherSpec)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		if !expectChangeCipherSpec {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		if err := c.in.changeCipherSpec(); err != nil {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(err.(alert)))
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	case recordTypeApplicationData:
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		if !handshakeComplete || expectChangeCipherSpec {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		<span class="comment">// Some OpenSSL servers send empty records in order to randomize the</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		<span class="comment">// CBC IV. Ignore a limited number of empty records.</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		if len(data) == 0 {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			return c.retryReadRecord(expectChangeCipherSpec)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// Note that data is owned by c.rawInput, following the Next call above,</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		<span class="comment">// to avoid copying the plaintext. This is safe because c.rawInput is</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		<span class="comment">// not read from or written to until c.input is drained.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		c.input.Reset(data)
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	case recordTypeHandshake:
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		if len(data) == 0 || expectChangeCipherSpec {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			return c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		c.hand.Write(data)
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	return nil
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">// retryReadRecord recurs into readRecordOrCCS to drop a non-advancing record, like</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// a warning alert, empty application_data, or a change_cipher_spec in TLS 1.3.</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>func (c *Conn) retryReadRecord(expectChangeCipherSpec bool) error {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	c.retryCount++
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	if c.retryCount &gt; maxUselessRecords {
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		c.sendAlert(alertUnexpectedMessage)
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		return c.in.setErrorLocked(errors.New(&#34;tls: too many ignored records&#34;))
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	}
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	return c.readRecordOrCCS(expectChangeCipherSpec)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// atLeastReader reads from R, stopping with EOF once at least N bytes have been</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// read. It is different from an io.LimitedReader in that it doesn&#39;t cut short</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span><span class="comment">// the last Read call, and in that it considers an early EOF an error.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>type atLeastReader struct {
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	R io.Reader
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	N int64
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>func (r *atLeastReader) Read(p []byte) (int, error) {
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	if r.N &lt;= 0 {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		return 0, io.EOF
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	n, err := r.R.Read(p)
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	r.N -= int64(n) <span class="comment">// won&#39;t underflow unless len(p) &gt;= n &gt; 9223372036854775809</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	if r.N &gt; 0 &amp;&amp; err == io.EOF {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		return n, io.ErrUnexpectedEOF
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if r.N &lt;= 0 &amp;&amp; err == nil {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		return n, io.EOF
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	return n, err
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">// readFromUntil reads from r into c.rawInput until c.rawInput contains</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// at least n bytes or else returns an error.</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>func (c *Conn) readFromUntil(r io.Reader, n int) error {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	if c.rawInput.Len() &gt;= n {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		return nil
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	needs := n - c.rawInput.Len()
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	<span class="comment">// There might be extra input waiting on the wire. Make a best effort</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	<span class="comment">// attempt to fetch it so that it can be used in (*Conn).Read to</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	<span class="comment">// &#34;predict&#34; closeNotify alerts.</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	c.rawInput.Grow(needs + bytes.MinRead)
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	_, err := c.rawInput.ReadFrom(&amp;atLeastReader{r, int64(needs)})
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	return err
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">// sendAlertLocked sends a TLS alert message.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>func (c *Conn) sendAlertLocked(err alert) error {
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		return c.out.setErrorLocked(&amp;net.OpError{Op: &#34;local error&#34;, Err: err})
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	switch err {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	case alertNoRenegotiation, alertCloseNotify:
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		c.tmp[0] = alertLevelWarning
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	default:
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>		c.tmp[0] = alertLevelError
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	}
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	c.tmp[1] = byte(err)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	_, writeErr := c.writeRecordLocked(recordTypeAlert, c.tmp[0:2])
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	if err == alertCloseNotify {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		<span class="comment">// closeNotify is a special case in that it isn&#39;t an error.</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		return writeErr
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	return c.out.setErrorLocked(&amp;net.OpError{Op: &#34;local error&#34;, Err: err})
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>}
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span><span class="comment">// sendAlert sends a TLS alert message.</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>func (c *Conn) sendAlert(err alert) error {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	c.out.Lock()
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	defer c.out.Unlock()
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	return c.sendAlertLocked(err)
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>}
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>const (
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	<span class="comment">// tcpMSSEstimate is a conservative estimate of the TCP maximum segment</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	<span class="comment">// size (MSS). A constant is used, rather than querying the kernel for</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	<span class="comment">// the actual MSS, to avoid complexity. The value here is the IPv6</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	<span class="comment">// minimum MTU (1280 bytes) minus the overhead of an IPv6 header (40</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	<span class="comment">// bytes) and a TCP header with timestamps (32 bytes).</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	tcpMSSEstimate = 1208
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	<span class="comment">// recordSizeBoostThreshold is the number of bytes of application data</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	<span class="comment">// sent after which the TLS record size will be increased to the</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	<span class="comment">// maximum.</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	recordSizeBoostThreshold = 128 * 1024
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>)
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// maxPayloadSizeForWrite returns the maximum TLS payload size to use for the</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// next application data record. There is the following trade-off:</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span><span class="comment">//   - For latency-sensitive applications, such as web browsing, each TLS</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">//     record should fit in one TCP segment.</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">//   - For throughput-sensitive applications, such as large file transfers,</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">//     larger TLS records better amortize framing and encryption overheads.</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// A simple heuristic that works well in practice is to use small records for</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// the first 1MB of data, then use larger records for subsequent data, and</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// reset back to smaller records after the connection becomes idle. See &#34;High</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">// Performance Web Networking&#34;, Chapter 4, or:</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">// https://www.igvita.com/2013/10/24/optimizing-tls-record-size-and-buffering-latency/</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span><span class="comment">// In the interests of simplicity and determinism, this code does not attempt</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span><span class="comment">// to reset the record size once the connection is idle, however.</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>func (c *Conn) maxPayloadSizeForWrite(typ recordType) int {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	if c.config.DynamicRecordSizingDisabled || typ != recordTypeApplicationData {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		return maxPlaintext
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	if c.bytesSent &gt;= recordSizeBoostThreshold {
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		return maxPlaintext
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	}
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	<span class="comment">// Subtract TLS overheads to get the maximum payload size.</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	payloadBytes := tcpMSSEstimate - recordHeaderLen - c.out.explicitNonceLen()
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	if c.out.cipher != nil {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		switch ciph := c.out.cipher.(type) {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		case cipher.Stream:
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>			payloadBytes -= c.out.mac.Size()
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		case cipher.AEAD:
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>			payloadBytes -= ciph.Overhead()
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		case cbcMode:
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>			blockSize := ciph.BlockSize()
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			<span class="comment">// The payload must fit in a multiple of blockSize, with</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>			<span class="comment">// room for at least one padding byte.</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			payloadBytes = (payloadBytes &amp; ^(blockSize - 1)) - 1
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>			<span class="comment">// The MAC is appended before padding so affects the</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			<span class="comment">// payload size directly.</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>			payloadBytes -= c.out.mac.Size()
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		default:
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>			panic(&#34;unknown cipher type&#34;)
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		}
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	if c.vers == VersionTLS13 {
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>		payloadBytes-- <span class="comment">// encrypted ContentType</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	<span class="comment">// Allow packet growth in arithmetic progression up to max.</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	pkt := c.packetsSent
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	c.packetsSent++
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	if pkt &gt; 1000 {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		return maxPlaintext <span class="comment">// avoid overflow in multiply below</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	n := payloadBytes * int(pkt+1)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	if n &gt; maxPlaintext {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		n = maxPlaintext
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	return n
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>func (c *Conn) write(data []byte) (int, error) {
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	if c.buffering {
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>		c.sendBuf = append(c.sendBuf, data...)
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>		return len(data), nil
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	n, err := c.conn.Write(data)
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	c.bytesSent += int64(n)
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	return n, err
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>func (c *Conn) flush() (int, error) {
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	if len(c.sendBuf) == 0 {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		return 0, nil
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	}
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	n, err := c.conn.Write(c.sendBuf)
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	c.bytesSent += int64(n)
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	c.sendBuf = nil
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	c.buffering = false
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	return n, err
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>}
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span><span class="comment">// outBufPool pools the record-sized scratch buffers used by writeRecordLocked.</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>var outBufPool = sync.Pool{
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	New: func() any {
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		return new([]byte)
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	},
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>}
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span><span class="comment">// writeRecordLocked writes a TLS record with the given type and payload to the</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span><span class="comment">// connection and updates the record layer state.</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>func (c *Conn) writeRecordLocked(typ recordType, data []byte) (int, error) {
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		if typ != recordTypeHandshake {
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			return 0, errors.New(&#34;tls: internal error: sending non-handshake message to QUIC transport&#34;)
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		c.quicWriteCryptoData(c.out.level, data)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		if !c.buffering {
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			if _, err := c.flush(); err != nil {
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>				return 0, err
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			}
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>		return len(data), nil
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	outBufPtr := outBufPool.Get().(*[]byte)
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	outBuf := *outBufPtr
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	defer func() {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		<span class="comment">// You might be tempted to simplify this by just passing &amp;outBuf to Put,</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		<span class="comment">// but that would make the local copy of the outBuf slice header escape</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		<span class="comment">// to the heap, causing an allocation. Instead, we keep around the</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		<span class="comment">// pointer to the slice header returned by Get, which is already on the</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		<span class="comment">// heap, and overwrite and return that.</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		*outBufPtr = outBuf
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		outBufPool.Put(outBufPtr)
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	}()
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	var n int
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	for len(data) &gt; 0 {
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		m := len(data)
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		if maxPayload := c.maxPayloadSizeForWrite(typ); m &gt; maxPayload {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>			m = maxPayload
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		}
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		_, outBuf = sliceForAppend(outBuf[:0], recordHeaderLen)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		outBuf[0] = byte(typ)
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		vers := c.vers
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>		if vers == 0 {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>			<span class="comment">// Some TLS servers fail if the record version is</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>			<span class="comment">// greater than TLS 1.0 for the initial ClientHello.</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			vers = VersionTLS10
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		} else if vers == VersionTLS13 {
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			<span class="comment">// TLS 1.3 froze the record layer version to 1.2.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>			<span class="comment">// See RFC 8446, Section 5.1.</span>
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>			vers = VersionTLS12
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>		outBuf[1] = byte(vers &gt;&gt; 8)
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>		outBuf[2] = byte(vers)
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		outBuf[3] = byte(m &gt;&gt; 8)
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		outBuf[4] = byte(m)
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		var err error
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>		outBuf, err = c.out.encrypt(outBuf, data[:m], c.config.rand())
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		if err != nil {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>			return n, err
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		}
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		if _, err := c.write(outBuf); err != nil {
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>			return n, err
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		n += m
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		data = data[m:]
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	}
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	if typ == recordTypeChangeCipherSpec &amp;&amp; c.vers != VersionTLS13 {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>		if err := c.out.changeCipherSpec(); err != nil {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>			return n, c.sendAlertLocked(err.(alert))
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>		}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	return n, nil
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span><span class="comment">// writeHandshakeRecord writes a handshake message to the connection and updates</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">// the record layer state. If transcript is non-nil the marshalled message is</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// written to it.</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>func (c *Conn) writeHandshakeRecord(msg handshakeMessage, transcript transcriptHash) (int, error) {
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	c.out.Lock()
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	defer c.out.Unlock()
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	data, err := msg.marshal()
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	if err != nil {
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>		return 0, err
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	}
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	if transcript != nil {
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		transcript.Write(data)
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	}
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	return c.writeRecordLocked(recordTypeHandshake, data)
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>}
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span><span class="comment">// writeChangeCipherRecord writes a ChangeCipherSpec message to the connection and</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span><span class="comment">// updates the record layer state.</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>func (c *Conn) writeChangeCipherRecord() error {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	c.out.Lock()
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	defer c.out.Unlock()
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	_, err := c.writeRecordLocked(recordTypeChangeCipherSpec, []byte{1})
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	return err
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span><span class="comment">// readHandshakeBytes reads handshake data until c.hand contains at least n bytes.</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>func (c *Conn) readHandshakeBytes(n int) error {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>		return c.quicReadHandshakeBytes(n)
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	for c.hand.Len() &lt; n {
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>		if err := c.readRecord(); err != nil {
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>			return err
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>		}
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	}
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	return nil
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>}
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span><span class="comment">// readHandshake reads the next handshake message from</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span><span class="comment">// the record layer. If transcript is non-nil, the message</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span><span class="comment">// is written to the passed transcriptHash.</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>func (c *Conn) readHandshake(transcript transcriptHash) (any, error) {
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	if err := c.readHandshakeBytes(4); err != nil {
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>		return nil, err
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	data := c.hand.Bytes()
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	n := int(data[1])&lt;&lt;16 | int(data[2])&lt;&lt;8 | int(data[3])
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	if n &gt; maxHandshake {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>		c.sendAlertLocked(alertInternalError)
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>		return nil, c.in.setErrorLocked(fmt.Errorf(&#34;tls: handshake message of length %d bytes exceeds maximum of %d bytes&#34;, n, maxHandshake))
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	}
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	if err := c.readHandshakeBytes(4 + n); err != nil {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		return nil, err
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	data = c.hand.Next(4 + n)
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	return c.unmarshalHandshakeMessage(data, transcript)
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>}
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>func (c *Conn) unmarshalHandshakeMessage(data []byte, transcript transcriptHash) (handshakeMessage, error) {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	var m handshakeMessage
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	switch data[0] {
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	case typeHelloRequest:
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		m = new(helloRequestMsg)
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	case typeClientHello:
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		m = new(clientHelloMsg)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	case typeServerHello:
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		m = new(serverHelloMsg)
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	case typeNewSessionTicket:
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		if c.vers == VersionTLS13 {
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>			m = new(newSessionTicketMsgTLS13)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>		} else {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			m = new(newSessionTicketMsg)
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>		}
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	case typeCertificate:
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		if c.vers == VersionTLS13 {
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>			m = new(certificateMsgTLS13)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		} else {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>			m = new(certificateMsg)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	case typeCertificateRequest:
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		if c.vers == VersionTLS13 {
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>			m = new(certificateRequestMsgTLS13)
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		} else {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			m = &amp;certificateRequestMsg{
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>				hasSignatureAlgorithm: c.vers &gt;= VersionTLS12,
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>			}
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>		}
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>	case typeCertificateStatus:
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>		m = new(certificateStatusMsg)
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	case typeServerKeyExchange:
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		m = new(serverKeyExchangeMsg)
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	case typeServerHelloDone:
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		m = new(serverHelloDoneMsg)
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	case typeClientKeyExchange:
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		m = new(clientKeyExchangeMsg)
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	case typeCertificateVerify:
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		m = &amp;certificateVerifyMsg{
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>			hasSignatureAlgorithm: c.vers &gt;= VersionTLS12,
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		}
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	case typeFinished:
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		m = new(finishedMsg)
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	case typeEncryptedExtensions:
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		m = new(encryptedExtensionsMsg)
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	case typeEndOfEarlyData:
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		m = new(endOfEarlyDataMsg)
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	case typeKeyUpdate:
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		m = new(keyUpdateMsg)
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	default:
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		return nil, c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	}
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	<span class="comment">// The handshake message unmarshalers</span>
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	<span class="comment">// expect to be able to keep references to data,</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	<span class="comment">// so pass in a fresh copy that won&#39;t be overwritten.</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	data = append([]byte(nil), data...)
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	if !m.unmarshal(data) {
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		return nil, c.in.setErrorLocked(c.sendAlert(alertUnexpectedMessage))
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	}
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>	if transcript != nil {
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		transcript.Write(data)
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	}
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>	return m, nil
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>}
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>var (
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>	errShutdown = errors.New(&#34;tls: protocol is shutdown&#34;)
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>)
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span><span class="comment">// Write writes data to the connection.</span>
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span><span class="comment">// As Write calls [Conn.Handshake], in order to prevent indefinite blocking a deadline</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span><span class="comment">// must be set for both [Conn.Read] and Write before Write is called when the handshake</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span><span class="comment">// has not yet completed. See [Conn.SetDeadline], [Conn.SetReadDeadline], and</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span><span class="comment">// [Conn.SetWriteDeadline].</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>func (c *Conn) Write(b []byte) (int, error) {
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	<span class="comment">// interlock with Close below</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>	for {
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		x := c.activeCall.Load()
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		if x&amp;1 != 0 {
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>			return 0, net.ErrClosed
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		}
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		if c.activeCall.CompareAndSwap(x, x+2) {
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>			break
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		}
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	}
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	defer c.activeCall.Add(-2)
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	if err := c.Handshake(); err != nil {
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		return 0, err
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	c.out.Lock()
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	defer c.out.Unlock()
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	if err := c.out.err; err != nil {
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		return 0, err
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	}
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	if !c.isHandshakeComplete.Load() {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		return 0, alertInternalError
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>	if c.closeNotifySent {
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		return 0, errShutdown
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	}
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>	<span class="comment">// TLS 1.0 is susceptible to a chosen-plaintext</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>	<span class="comment">// attack when using block mode ciphers due to predictable IVs.</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>	<span class="comment">// This can be prevented by splitting each Application Data</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>	<span class="comment">// record into two records, effectively randomizing the IV.</span>
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>	<span class="comment">// https://www.openssl.org/~bodo/tls-cbc.txt</span>
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	<span class="comment">// https://bugzilla.mozilla.org/show_bug.cgi?id=665814</span>
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	<span class="comment">// https://www.imperialviolet.org/2012/01/15/beastfollowup.html</span>
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	var m int
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>	if len(b) &gt; 1 &amp;&amp; c.vers == VersionTLS10 {
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>		if _, ok := c.out.cipher.(cipher.BlockMode); ok {
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>			n, err := c.writeRecordLocked(recordTypeApplicationData, b[:1])
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>			if err != nil {
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>				return n, c.out.setErrorLocked(err)
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>			}
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>			m, b = 1, b[1:]
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		}
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	}
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>	n, err := c.writeRecordLocked(recordTypeApplicationData, b)
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	return n + m, c.out.setErrorLocked(err)
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>}
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span><span class="comment">// handleRenegotiation processes a HelloRequest handshake message.</span>
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>func (c *Conn) handleRenegotiation() error {
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>	if c.vers == VersionTLS13 {
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>		return errors.New(&#34;tls: internal error: unexpected renegotiation&#34;)
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	}
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>	msg, err := c.readHandshake(nil)
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>	if err != nil {
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>		return err
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>	}
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	helloReq, ok := msg.(*helloRequestMsg)
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>	if !ok {
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>		c.sendAlert(alertUnexpectedMessage)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>		return unexpectedMessageError(helloReq, msg)
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>	}
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>	if !c.isClient {
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>		return c.sendAlert(alertNoRenegotiation)
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>	}
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>	switch c.config.Renegotiation {
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>	case RenegotiateNever:
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>		return c.sendAlert(alertNoRenegotiation)
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	case RenegotiateOnceAsClient:
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>		if c.handshakes &gt; 1 {
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>			return c.sendAlert(alertNoRenegotiation)
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>		}
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>	case RenegotiateFreelyAsClient:
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		<span class="comment">// Ok.</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	default:
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>		c.sendAlert(alertInternalError)
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		return errors.New(&#34;tls: unknown Renegotiation value&#34;)
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>	c.isHandshakeComplete.Store(false)
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	if c.handshakeErr = c.clientHandshake(context.Background()); c.handshakeErr == nil {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>		c.handshakes++
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>	return c.handshakeErr
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>}
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span><span class="comment">// handlePostHandshakeMessage processes a handshake message arrived after the</span>
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span><span class="comment">// handshake is complete. Up to TLS 1.2, it indicates the start of a renegotiation.</span>
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>func (c *Conn) handlePostHandshakeMessage() error {
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>	if c.vers != VersionTLS13 {
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>		return c.handleRenegotiation()
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	}
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	msg, err := c.readHandshake(nil)
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	if err != nil {
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>		return err
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	}
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	c.retryCount++
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	if c.retryCount &gt; maxUselessRecords {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>		c.sendAlert(alertUnexpectedMessage)
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>		return c.in.setErrorLocked(errors.New(&#34;tls: too many non-advancing records&#34;))
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	}
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	switch msg := msg.(type) {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	case *newSessionTicketMsgTLS13:
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		return c.handleNewSessionTicket(msg)
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>	case *keyUpdateMsg:
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>		return c.handleKeyUpdate(msg)
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>	}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	<span class="comment">// The QUIC layer is supposed to treat an unexpected post-handshake CertificateRequest</span>
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	<span class="comment">// as a QUIC-level PROTOCOL_VIOLATION error (RFC 9001, Section 4.4). Returning an</span>
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>	<span class="comment">// unexpected_message alert here doesn&#39;t provide it with enough information to distinguish</span>
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>	<span class="comment">// this condition from other unexpected messages. This is probably fine.</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	c.sendAlert(alertUnexpectedMessage)
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>	return fmt.Errorf(&#34;tls: received unexpected handshake message of type %T&#34;, msg)
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>}
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>func (c *Conn) handleKeyUpdate(keyUpdate *keyUpdateMsg) error {
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>		c.sendAlert(alertUnexpectedMessage)
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>		return c.in.setErrorLocked(errors.New(&#34;tls: received unexpected key update message&#34;))
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	}
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	cipherSuite := cipherSuiteTLS13ByID(c.cipherSuite)
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>	if cipherSuite == nil {
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>		return c.in.setErrorLocked(c.sendAlert(alertInternalError))
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	}
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	newSecret := cipherSuite.nextTrafficSecret(c.in.trafficSecret)
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	c.in.setTrafficSecret(cipherSuite, QUICEncryptionLevelInitial, newSecret)
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>	if keyUpdate.updateRequested {
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>		c.out.Lock()
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>		defer c.out.Unlock()
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>		msg := &amp;keyUpdateMsg{}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>		msgBytes, err := msg.marshal()
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>		if err != nil {
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>			return err
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>		}
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>		_, err = c.writeRecordLocked(recordTypeHandshake, msgBytes)
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>		if err != nil {
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>			<span class="comment">// Surface the error at the next write.</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>			c.out.setErrorLocked(err)
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>			return nil
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>		}
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>		newSecret := cipherSuite.nextTrafficSecret(c.out.trafficSecret)
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		c.out.setTrafficSecret(cipherSuite, QUICEncryptionLevelInitial, newSecret)
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	}
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>	return nil
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>}
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span><span class="comment">// Read reads data from the connection.</span>
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span><span class="comment">// As Read calls [Conn.Handshake], in order to prevent indefinite blocking a deadline</span>
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span><span class="comment">// must be set for both Read and [Conn.Write] before Read is called when the handshake</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span><span class="comment">// has not yet completed. See [Conn.SetDeadline], [Conn.SetReadDeadline], and</span>
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span><span class="comment">// [Conn.SetWriteDeadline].</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>func (c *Conn) Read(b []byte) (int, error) {
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>	if err := c.Handshake(); err != nil {
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		return 0, err
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>	}
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>		<span class="comment">// Put this after Handshake, in case people were calling</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>		<span class="comment">// Read(nil) for the side effect of the Handshake.</span>
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>		return 0, nil
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	}
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	c.in.Lock()
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>	defer c.in.Unlock()
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	for c.input.Len() == 0 {
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>		if err := c.readRecord(); err != nil {
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>			return 0, err
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>		}
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>		for c.hand.Len() &gt; 0 {
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>			if err := c.handlePostHandshakeMessage(); err != nil {
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>				return 0, err
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>			}
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>		}
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>	}
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>	n, _ := c.input.Read(b)
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	<span class="comment">// If a close-notify alert is waiting, read it so that we can return (n,</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	<span class="comment">// EOF) instead of (n, nil), to signal to the HTTP response reading</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	<span class="comment">// goroutine that the connection is now closed. This eliminates a race</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>	<span class="comment">// where the HTTP response reading goroutine would otherwise not observe</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	<span class="comment">// the EOF until its next read, by which time a client goroutine might</span>
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>	<span class="comment">// have already tried to reuse the HTTP connection for a new request.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/cl/76400046 and https://golang.org/issue/3514</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>	if n != 0 &amp;&amp; c.input.Len() == 0 &amp;&amp; c.rawInput.Len() &gt; 0 &amp;&amp;
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>		recordType(c.rawInput.Bytes()[0]) == recordTypeAlert {
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>		if err := c.readRecord(); err != nil {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>			return n, err <span class="comment">// will be io.EOF on closeNotify</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>		}
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>	}
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>	return n, nil
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span><span class="comment">// Close closes the connection.</span>
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>func (c *Conn) Close() error {
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>	<span class="comment">// Interlock with Conn.Write above.</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>	var x int32
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>	for {
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>		x = c.activeCall.Load()
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>		if x&amp;1 != 0 {
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>			return net.ErrClosed
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>		}
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>		if c.activeCall.CompareAndSwap(x, x|1) {
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>			break
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>		}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>	}
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>	if x != 0 {
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>		<span class="comment">// io.Writer and io.Closer should not be used concurrently.</span>
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>		<span class="comment">// If Close is called while a Write is currently in-flight,</span>
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>		<span class="comment">// interpret that as a sign that this Close is really just</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>		<span class="comment">// being used to break the Write and/or clean up resources and</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		<span class="comment">// avoid sending the alertCloseNotify, which may block</span>
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>		<span class="comment">// waiting on handshakeMutex or the c.out mutex.</span>
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>		return c.conn.Close()
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>	}
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	var alertErr error
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>	if c.isHandshakeComplete.Load() {
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>		if err := c.closeNotify(); err != nil {
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>			alertErr = fmt.Errorf(&#34;tls: failed to send closeNotify alert (but connection was closed anyway): %w&#34;, err)
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		}
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	}
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>	if err := c.conn.Close(); err != nil {
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>		return err
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	}
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	return alertErr
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>}
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>var errEarlyCloseWrite = errors.New(&#34;tls: CloseWrite called before handshake complete&#34;)
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span><span class="comment">// CloseWrite shuts down the writing side of the connection. It should only be</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span><span class="comment">// called once the handshake has completed and does not call CloseWrite on the</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// underlying connection. Most callers should just use [Conn.Close].</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>func (c *Conn) CloseWrite() error {
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>	if !c.isHandshakeComplete.Load() {
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>		return errEarlyCloseWrite
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>	}
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	return c.closeNotify()
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>}
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>func (c *Conn) closeNotify() error {
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>	c.out.Lock()
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>	defer c.out.Unlock()
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	if !c.closeNotifySent {
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		<span class="comment">// Set a Write Deadline to prevent possibly blocking forever.</span>
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		c.SetWriteDeadline(time.Now().Add(time.Second * 5))
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>		c.closeNotifyErr = c.sendAlertLocked(alertCloseNotify)
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>		c.closeNotifySent = true
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>		<span class="comment">// Any subsequent writes will fail.</span>
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>		c.SetWriteDeadline(time.Now())
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>	}
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>	return c.closeNotifyErr
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>}
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span><span class="comment">// Handshake runs the client or server handshake</span>
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span><span class="comment">// protocol if it has not yet been run.</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span><span class="comment">// Most uses of this package need not call Handshake explicitly: the</span>
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span><span class="comment">// first [Conn.Read] or [Conn.Write] will call it automatically.</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span><span class="comment">// For control over canceling or setting a timeout on a handshake, use</span>
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span><span class="comment">// [Conn.HandshakeContext] or the [Dialer]&#39;s DialContext method instead.</span>
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span><span class="comment">// In order to avoid denial of service attacks, the maximum RSA key size allowed</span>
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span><span class="comment">// in certificates sent by either the TLS server or client is limited to 8192</span>
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span><span class="comment">// bits. This limit can be overridden by setting tlsmaxrsasize in the GODEBUG</span>
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span><span class="comment">// environment variable (e.g. GODEBUG=tlsmaxrsasize=4096).</span>
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>func (c *Conn) Handshake() error {
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	return c.HandshakeContext(context.Background())
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>}
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span><span class="comment">// HandshakeContext runs the client or server handshake</span>
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span><span class="comment">// protocol if it has not yet been run.</span>
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span><span class="comment">// The provided Context must be non-nil. If the context is canceled before</span>
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span><span class="comment">// the handshake is complete, the handshake is interrupted and an error is returned.</span>
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span><span class="comment">// Once the handshake has completed, cancellation of the context will not affect the</span>
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span><span class="comment">// connection.</span>
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span><span class="comment">// Most uses of this package need not call HandshakeContext explicitly: the</span>
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span><span class="comment">// first [Conn.Read] or [Conn.Write] will call it automatically.</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>func (c *Conn) HandshakeContext(ctx context.Context) error {
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>	<span class="comment">// Delegate to unexported method for named return</span>
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>	<span class="comment">// without confusing documented signature.</span>
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>	return c.handshakeContext(ctx)
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>}
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>func (c *Conn) handshakeContext(ctx context.Context) (ret error) {
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>	<span class="comment">// Fast sync/atomic-based exit if there is no handshake in flight and the</span>
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>	<span class="comment">// last one succeeded without an error. Avoids the expensive context setup</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>	<span class="comment">// and mutex for most Read and Write calls.</span>
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>	if c.isHandshakeComplete.Load() {
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>		return nil
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>	}
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>	handshakeCtx, cancel := context.WithCancel(ctx)
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>	<span class="comment">// Note: defer this before starting the &#34;interrupter&#34; goroutine</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>	<span class="comment">// so that we can tell the difference between the input being canceled and</span>
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	<span class="comment">// this cancellation. In the former case, we need to close the connection.</span>
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>	defer cancel()
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>		c.quic.cancelc = handshakeCtx.Done()
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>		c.quic.cancel = cancel
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	} else if ctx.Done() != nil {
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>		<span class="comment">// Start the &#34;interrupter&#34; goroutine, if this context might be canceled.</span>
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>		<span class="comment">// (The background context cannot).</span>
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>		<span class="comment">// The interrupter goroutine waits for the input context to be done and</span>
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>		<span class="comment">// closes the connection if this happens before the function returns.</span>
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>		done := make(chan struct{})
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>		interruptRes := make(chan error, 1)
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>		defer func() {
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>			close(done)
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>			if ctxErr := &lt;-interruptRes; ctxErr != nil {
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>				<span class="comment">// Return context error to user.</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>				ret = ctxErr
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>			}
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>		}()
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>		go func() {
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>			select {
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>			case &lt;-handshakeCtx.Done():
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>				<span class="comment">// Close the connection, discarding the error</span>
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>				_ = c.conn.Close()
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>				interruptRes &lt;- handshakeCtx.Err()
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>			case &lt;-done:
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>				interruptRes &lt;- nil
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>			}
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>		}()
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>	}
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	if err := c.handshakeErr; err != nil {
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>		return err
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	}
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>	if c.isHandshakeComplete.Load() {
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>		return nil
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>	}
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>	c.in.Lock()
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>	defer c.in.Unlock()
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>	c.handshakeErr = c.handshakeFn(handshakeCtx)
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>	if c.handshakeErr == nil {
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>		c.handshakes++
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>	} else {
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>		<span class="comment">// If an error occurred during the handshake try to flush the</span>
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>		<span class="comment">// alert that might be left in the buffer.</span>
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>		c.flush()
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>	}
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>	if c.handshakeErr == nil &amp;&amp; !c.isHandshakeComplete.Load() {
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>		c.handshakeErr = errors.New(&#34;tls: internal error: handshake should have had a result&#34;)
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>	}
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>	if c.handshakeErr != nil &amp;&amp; c.isHandshakeComplete.Load() {
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>		panic(&#34;tls: internal error: handshake returned an error but is marked successful&#34;)
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>	}
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	if c.quic != nil {
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>		if c.handshakeErr == nil {
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>			c.quicHandshakeComplete()
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>			<span class="comment">// Provide the 1-RTT read secret now that the handshake is complete.</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>			<span class="comment">// The QUIC layer MUST NOT decrypt 1-RTT packets prior to completing</span>
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>			<span class="comment">// the handshake (RFC 9001, Section 5.7).</span>
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>			c.quicSetReadSecret(QUICEncryptionLevelApplication, c.cipherSuite, c.in.trafficSecret)
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>		} else {
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>			var a alert
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>			c.out.Lock()
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>			if !errors.As(c.out.err, &amp;a) {
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>				a = alertInternalError
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>			}
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>			c.out.Unlock()
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>			<span class="comment">// Return an error which wraps both the handshake error and</span>
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>			<span class="comment">// any alert error we may have sent, or alertInternalError</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>			<span class="comment">// if we didn&#39;t send an alert.</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>			<span class="comment">// Truncate the text of the alert to 0 characters.</span>
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>			c.handshakeErr = fmt.Errorf(&#34;%w%.0w&#34;, c.handshakeErr, AlertError(a))
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>		}
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>		close(c.quic.blockedc)
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>		close(c.quic.signalc)
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>	}
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>	return c.handshakeErr
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>}
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span><span class="comment">// ConnectionState returns basic TLS details about the connection.</span>
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span><span class="selection">func (c *Conn) ConnectionState() ConnectionState</span> {
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>	return c.connectionStateLocked()
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>}
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>var tlsunsafeekm = godebug.New(&#34;tlsunsafeekm&#34;)
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>func (c *Conn) connectionStateLocked() ConnectionState {
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>	var state ConnectionState
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>	state.HandshakeComplete = c.isHandshakeComplete.Load()
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>	state.Version = c.vers
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>	state.NegotiatedProtocol = c.clientProtocol
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>	state.DidResume = c.didResume
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	state.NegotiatedProtocolIsMutual = true
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>	state.ServerName = c.serverName
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>	state.CipherSuite = c.cipherSuite
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	state.PeerCertificates = c.peerCertificates
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>	state.VerifiedChains = c.verifiedChains
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	state.SignedCertificateTimestamps = c.scts
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>	state.OCSPResponse = c.ocspResponse
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>	if (!c.didResume || c.extMasterSecret) &amp;&amp; c.vers != VersionTLS13 {
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>		if c.clientFinishedIsFirst {
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>			state.TLSUnique = c.clientFinished[:]
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>		} else {
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>			state.TLSUnique = c.serverFinished[:]
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>		}
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>	}
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>	if c.config.Renegotiation != RenegotiateNever {
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>		state.ekm = noEKMBecauseRenegotiation
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>	} else if c.vers != VersionTLS13 &amp;&amp; !c.extMasterSecret {
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>		state.ekm = func(label string, context []byte, length int) ([]byte, error) {
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>			if tlsunsafeekm.Value() == &#34;1&#34; {
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>				tlsunsafeekm.IncNonDefault()
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>				return c.ekm(label, context, length)
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>			}
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>			return noEKMBecauseNoEMS(label, context, length)
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>		}
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>	} else {
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>		state.ekm = c.ekm
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>	}
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>	return state
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>}
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span><span class="comment">// OCSPResponse returns the stapled OCSP response from the TLS server, if</span>
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span><span class="comment">// any. (Only valid for client connections.)</span>
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>func (c *Conn) OCSPResponse() []byte {
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>	return c.ocspResponse
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>}
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span><span class="comment">// VerifyHostname checks that the peer certificate chain is valid for</span>
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span><span class="comment">// connecting to host. If so, it returns nil; if not, it returns an error</span>
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span><span class="comment">// describing the problem.</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>func (c *Conn) VerifyHostname(host string) error {
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>	if !c.isClient {
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>		return errors.New(&#34;tls: VerifyHostname called on TLS server connection&#34;)
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>	}
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	if !c.isHandshakeComplete.Load() {
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>		return errors.New(&#34;tls: handshake has not yet been performed&#34;)
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	}
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>	if len(c.verifiedChains) == 0 {
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>		return errors.New(&#34;tls: handshake did not verify certificate chain&#34;)
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>	}
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>	return c.peerCertificates[0].VerifyHostname(host)
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>}
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>
</pre><p><a href="conn.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
