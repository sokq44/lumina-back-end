<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/tls/quic.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./quic.go?s=5771:5811#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/tls">tls</a>/<span class="text-muted">quic.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/tls">crypto/tls</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package tls
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// QUICEncryptionLevel represents a QUIC encryption level used to transmit</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// handshake messages.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type QUICEncryptionLevel int
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>const (
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	QUICEncryptionLevelInitial = QUICEncryptionLevel(iota)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	QUICEncryptionLevelEarly
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	QUICEncryptionLevelHandshake
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	QUICEncryptionLevelApplication
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func (l QUICEncryptionLevel) String() string {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	switch l {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	case QUICEncryptionLevelInitial:
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		return &#34;Initial&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	case QUICEncryptionLevelEarly:
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		return &#34;Early&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	case QUICEncryptionLevelHandshake:
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		return &#34;Handshake&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	case QUICEncryptionLevelApplication:
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		return &#34;Application&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	default:
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;QUICEncryptionLevel(%v)&#34;, int(l))
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// A QUICConn represents a connection which uses a QUIC implementation as the underlying</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// transport as described in RFC 9001.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// Methods of QUICConn are not safe for concurrent use.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type QUICConn struct {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	conn *Conn
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	sessionTicketSent bool
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// A QUICConfig configures a [QUICConn].</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type QUICConfig struct {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	TLSConfig *Config
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// A QUICEventKind is a type of operation on a QUIC connection.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>type QUICEventKind int
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>const (
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// QUICNoEvent indicates that there are no events available.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	QUICNoEvent QUICEventKind = iota
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// QUICSetReadSecret and QUICSetWriteSecret provide the read and write</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// secrets for a given encryption level.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// QUICEvent.Level, QUICEvent.Data, and QUICEvent.Suite are set.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// Secrets for the Initial encryption level are derived from the initial</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// destination connection ID, and are not provided by the QUICConn.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	QUICSetReadSecret
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	QUICSetWriteSecret
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// QUICWriteData provides data to send to the peer in CRYPTO frames.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// QUICEvent.Data is set.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	QUICWriteData
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// QUICTransportParameters provides the peer&#39;s QUIC transport parameters.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// QUICEvent.Data is set.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	QUICTransportParameters
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// QUICTransportParametersRequired indicates that the caller must provide</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// QUIC transport parameters to send to the peer. The caller should set</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// the transport parameters with QUICConn.SetTransportParameters and call</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// QUICConn.NextEvent again.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// If transport parameters are set before calling QUICConn.Start, the</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// connection will never generate a QUICTransportParametersRequired event.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	QUICTransportParametersRequired
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// QUICRejectedEarlyData indicates that the server rejected 0-RTT data even</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// if we offered it. It&#39;s returned before QUICEncryptionLevelApplication</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// keys are returned.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	QUICRejectedEarlyData
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// QUICHandshakeDone indicates that the TLS handshake has completed.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	QUICHandshakeDone
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// A QUICEvent is an event occurring on a QUIC connection.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// The type of event is specified by the Kind field.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// The contents of the other fields are kind-specific.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>type QUICEvent struct {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	Kind QUICEventKind
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// Set for QUICSetReadSecret, QUICSetWriteSecret, and QUICWriteData.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	Level QUICEncryptionLevel
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// Set for QUICTransportParameters, QUICSetReadSecret, QUICSetWriteSecret, and QUICWriteData.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// The contents are owned by crypto/tls, and are valid until the next NextEvent call.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	Data []byte
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// Set for QUICSetReadSecret and QUICSetWriteSecret.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	Suite uint16
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>type quicState struct {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	events    []QUICEvent
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	nextEvent int
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// eventArr is a statically allocated event array, large enough to handle</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// the usual maximum number of events resulting from a single call: transport</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// parameters, Initial data, Early read secret, Handshake write and read</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// secrets, Handshake data, Application write secret, Application data.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	eventArr [8]QUICEvent
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	started  bool
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	signalc  chan struct{}   <span class="comment">// handshake data is available to be read</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	blockedc chan struct{}   <span class="comment">// handshake is waiting for data, closed when done</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	cancelc  &lt;-chan struct{} <span class="comment">// handshake has been canceled</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	cancel   context.CancelFunc
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// readbuf is shared between HandleData and the handshake goroutine.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// HandshakeCryptoData passes ownership to the handshake goroutine by</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// reading from signalc, and reclaims ownership by reading from blockedc.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	readbuf []byte
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	transportParams []byte <span class="comment">// to send to the peer</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// QUICClient returns a new TLS client side connection using QUICTransport as the</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// underlying transport. The config cannot be nil.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// The config&#39;s MinVersion must be at least TLS 1.3.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>func QUICClient(config *QUICConfig) *QUICConn {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return newQUICConn(Client(nil, config.TLSConfig))
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// QUICServer returns a new TLS server side connection using QUICTransport as the</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// underlying transport. The config cannot be nil.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// The config&#39;s MinVersion must be at least TLS 1.3.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>func QUICServer(config *QUICConfig) *QUICConn {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	return newQUICConn(Server(nil, config.TLSConfig))
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func newQUICConn(conn *Conn) *QUICConn {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	conn.quic = &amp;quicState{
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		signalc:  make(chan struct{}),
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		blockedc: make(chan struct{}),
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	conn.quic.events = conn.quic.eventArr[:0]
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	return &amp;QUICConn{
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		conn: conn,
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// Start starts the client or server handshake protocol.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// It may produce connection events, which may be read with [QUICConn.NextEvent].</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Start must be called at most once.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (q *QUICConn) Start(ctx context.Context) error {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if q.conn.quic.started {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return quicError(errors.New(&#34;tls: Start called more than once&#34;))
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	q.conn.quic.started = true
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	if q.conn.config.MinVersion &lt; VersionTLS13 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		return quicError(errors.New(&#34;tls: Config MinVersion must be at least TLS 1.13&#34;))
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	go q.conn.HandshakeContext(ctx)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	if _, ok := &lt;-q.conn.quic.blockedc; !ok {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		return q.conn.handshakeErr
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return nil
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// NextEvent returns the next event occurring on the connection.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// It returns an event with a Kind of [QUICNoEvent] when no events are available.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="selection">func (q *QUICConn) NextEvent() QUICEvent</span> {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	qs := q.conn.quic
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	if last := qs.nextEvent - 1; last &gt;= 0 &amp;&amp; len(qs.events[last].Data) &gt; 0 {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		<span class="comment">// Write over some of the previous event&#39;s data,</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// to catch callers erroniously retaining it.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		qs.events[last].Data[0] = 0
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if qs.nextEvent &gt;= len(qs.events) {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		qs.events = qs.events[:0]
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		qs.nextEvent = 0
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		return QUICEvent{Kind: QUICNoEvent}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	e := qs.events[qs.nextEvent]
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	qs.events[qs.nextEvent] = QUICEvent{} <span class="comment">// zero out references to data</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	qs.nextEvent++
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return e
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// Close closes the connection and stops any in-progress handshake.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (q *QUICConn) Close() error {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if q.conn.quic.cancel == nil {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return nil <span class="comment">// never started</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	q.conn.quic.cancel()
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	for range q.conn.quic.blockedc {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		<span class="comment">// Wait for the handshake goroutine to return.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return q.conn.handshakeErr
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// HandleData handles handshake bytes received from the peer.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// It may produce connection events, which may be read with [QUICConn.NextEvent].</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (q *QUICConn) HandleData(level QUICEncryptionLevel, data []byte) error {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	c := q.conn
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	if c.in.level != level {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		return quicError(c.in.setErrorLocked(errors.New(&#34;tls: handshake data received at wrong level&#34;)))
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	c.quic.readbuf = data
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	&lt;-c.quic.signalc
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	_, ok := &lt;-c.quic.blockedc
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if ok {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		<span class="comment">// The handshake goroutine is waiting for more data.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		return nil
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// The handshake goroutine has exited.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	c.handshakeMutex.Lock()
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	defer c.handshakeMutex.Unlock()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	c.hand.Write(c.quic.readbuf)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	c.quic.readbuf = nil
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	for q.conn.hand.Len() &gt;= 4 &amp;&amp; q.conn.handshakeErr == nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		b := q.conn.hand.Bytes()
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		n := int(b[1])&lt;&lt;16 | int(b[2])&lt;&lt;8 | int(b[3])
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if n &gt; maxHandshake {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			q.conn.handshakeErr = fmt.Errorf(&#34;tls: handshake message of length %d bytes exceeds maximum of %d bytes&#34;, n, maxHandshake)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			break
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if len(b) &lt; 4+n {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			return nil
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		if err := q.conn.handlePostHandshakeMessage(); err != nil {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			q.conn.handshakeErr = err
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if q.conn.handshakeErr != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return quicError(q.conn.handshakeErr)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	return nil
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>type QUICSessionTicketOptions struct {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// EarlyData specifies whether the ticket may be used for 0-RTT.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	EarlyData bool
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// SendSessionTicket sends a session ticket to the client.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// It produces connection events, which may be read with [QUICConn.NextEvent].</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// Currently, it can only be called once.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (q *QUICConn) SendSessionTicket(opts QUICSessionTicketOptions) error {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	c := q.conn
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if !c.isHandshakeComplete.Load() {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		return quicError(errors.New(&#34;tls: SendSessionTicket called before handshake completed&#34;))
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if c.isClient {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return quicError(errors.New(&#34;tls: SendSessionTicket called on the client&#34;))
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if q.sessionTicketSent {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return quicError(errors.New(&#34;tls: SendSessionTicket called multiple times&#34;))
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	q.sessionTicketSent = true
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	return quicError(c.sendSessionTicket(opts.EarlyData))
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// ConnectionState returns basic TLS details about the connection.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func (q *QUICConn) ConnectionState() ConnectionState {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	return q.conn.ConnectionState()
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// SetTransportParameters sets the transport parameters to send to the peer.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Server connections may delay setting the transport parameters until after</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// receiving the client&#39;s transport parameters. See [QUICTransportParametersRequired].</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func (q *QUICConn) SetTransportParameters(params []byte) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	if params == nil {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		params = []byte{}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	q.conn.quic.transportParams = params
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	if q.conn.quic.started {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		&lt;-q.conn.quic.signalc
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		&lt;-q.conn.quic.blockedc
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// quicError ensures err is an AlertError.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// If err is not already, quicError wraps it with alertInternalError.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>func quicError(err error) error {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if err == nil {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		return nil
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	var ae AlertError
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if errors.As(err, &amp;ae) {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		return err
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	var a alert
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if !errors.As(err, &amp;a) {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		a = alertInternalError
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// Return an error wrapping the original error and an AlertError.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// Truncate the text of the alert to 0 characters.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	return fmt.Errorf(&#34;%w%.0w&#34;, err, AlertError(a))
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>func (c *Conn) quicReadHandshakeBytes(n int) error {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	for c.hand.Len() &lt; n {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		if err := c.quicWaitForSignal(); err != nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			return err
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	return nil
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>func (c *Conn) quicSetReadSecret(level QUICEncryptionLevel, suite uint16, secret []byte) {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	c.quic.events = append(c.quic.events, QUICEvent{
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		Kind:  QUICSetReadSecret,
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		Level: level,
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		Suite: suite,
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		Data:  secret,
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	})
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func (c *Conn) quicSetWriteSecret(level QUICEncryptionLevel, suite uint16, secret []byte) {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	c.quic.events = append(c.quic.events, QUICEvent{
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		Kind:  QUICSetWriteSecret,
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		Level: level,
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		Suite: suite,
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		Data:  secret,
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	})
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>func (c *Conn) quicWriteCryptoData(level QUICEncryptionLevel, data []byte) {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	var last *QUICEvent
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if len(c.quic.events) &gt; 0 {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		last = &amp;c.quic.events[len(c.quic.events)-1]
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	if last == nil || last.Kind != QUICWriteData || last.Level != level {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		c.quic.events = append(c.quic.events, QUICEvent{
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			Kind:  QUICWriteData,
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			Level: level,
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		})
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		last = &amp;c.quic.events[len(c.quic.events)-1]
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	last.Data = append(last.Data, data...)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (c *Conn) quicSetTransportParameters(params []byte) {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	c.quic.events = append(c.quic.events, QUICEvent{
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		Kind: QUICTransportParameters,
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		Data: params,
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	})
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func (c *Conn) quicGetTransportParameters() ([]byte, error) {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if c.quic.transportParams == nil {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		c.quic.events = append(c.quic.events, QUICEvent{
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			Kind: QUICTransportParametersRequired,
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		})
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	for c.quic.transportParams == nil {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		if err := c.quicWaitForSignal(); err != nil {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			return nil, err
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	return c.quic.transportParams, nil
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>func (c *Conn) quicHandshakeComplete() {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	c.quic.events = append(c.quic.events, QUICEvent{
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		Kind: QUICHandshakeDone,
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	})
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func (c *Conn) quicRejectedEarlyData() {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	c.quic.events = append(c.quic.events, QUICEvent{
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		Kind: QUICRejectedEarlyData,
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	})
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// quicWaitForSignal notifies the QUICConn that handshake progress is blocked,</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// and waits for a signal that the handshake should proceed.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// The handshake may become blocked waiting for handshake bytes</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// or for the user to provide transport parameters.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>func (c *Conn) quicWaitForSignal() error {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	<span class="comment">// Drop the handshake mutex while blocked to allow the user</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	<span class="comment">// to call ConnectionState before the handshake completes.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	c.handshakeMutex.Unlock()
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	defer c.handshakeMutex.Lock()
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	<span class="comment">// Send on blockedc to notify the QUICConn that the handshake is blocked.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// Exported methods of QUICConn wait for the handshake to become blocked</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// before returning to the user.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	select {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	case c.quic.blockedc &lt;- struct{}{}:
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	case &lt;-c.quic.cancelc:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		return c.sendAlertLocked(alertCloseNotify)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// The QUICConn reads from signalc to notify us that the handshake may</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	<span class="comment">// be able to proceed. (The QUICConn reads, because we close signalc to</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	<span class="comment">// indicate that the handshake has completed.)</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	select {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	case c.quic.signalc &lt;- struct{}{}:
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		c.hand.Write(c.quic.readbuf)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		c.quic.readbuf = nil
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	case &lt;-c.quic.cancelc:
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		return c.sendAlertLocked(alertCloseNotify)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	return nil
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
</pre><p><a href="quic.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
