<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/tls/ticket.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./ticket.go?s=373:3187#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/tls">tls</a>/<span class="text-muted">ticket.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/tls">crypto/tls</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package tls
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;crypto/aes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/cipher&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;crypto/hmac&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;crypto/sha256&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;crypto/x509&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;golang.org/x/crypto/cryptobyte&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// A SessionState is a resumable session.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="selection">type SessionState struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Encoded as a SessionState (in the language of RFC 8446, Section 3).</span><span class="selection">
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   enum { server(1), client(2) } SessionStateType;</span><span class="selection">
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   opaque Certificate&lt;1..2^24-1&gt;;</span><span class="selection">
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   Certificate CertificateChain&lt;0..2^24-1&gt;;</span><span class="selection">
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   opaque Extra&lt;0..2^24-1&gt;;</span><span class="selection">
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   struct {</span><span class="selection">
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       uint16 version;</span><span class="selection">
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       SessionStateType type;</span><span class="selection">
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       uint16 cipher_suite;</span><span class="selection">
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       uint64 created_at;</span><span class="selection">
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       opaque secret&lt;1..2^8-1&gt;;</span><span class="selection">
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       Extra extra&lt;0..2^24-1&gt;;</span><span class="selection">
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       uint8 ext_master_secret = { 0, 1 };</span><span class="selection">
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       uint8 early_data = { 0, 1 };</span><span class="selection">
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       CertificateEntry certificate_list&lt;0..2^24-1&gt;;</span><span class="selection">
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       CertificateChain verified_chains&lt;0..2^24-1&gt;; /* excluding leaf */</span><span class="selection">
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       select (SessionState.early_data) {</span><span class="selection">
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	</span><span class="selection-comment">//           case 0: Empty;</span><span class="selection">
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	</span><span class="selection-comment">//           case 1: opaque alpn&lt;1..2^8-1&gt;;</span><span class="selection">
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       };</span><span class="selection">
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       select (SessionState.type) {</span><span class="selection">
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	</span><span class="selection-comment">//           case server: Empty;</span><span class="selection">
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	</span><span class="selection-comment">//           case client: struct {</span><span class="selection">
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	</span><span class="selection-comment">//               select (SessionState.version) {</span><span class="selection">
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	</span><span class="selection-comment">//                   case VersionTLS10..VersionTLS12: Empty;</span><span class="selection">
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	</span><span class="selection-comment">//                   case VersionTLS13: struct {</span><span class="selection">
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	</span><span class="selection-comment">//                       uint64 use_by;</span><span class="selection">
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	</span><span class="selection-comment">//                       uint32 age_add;</span><span class="selection">
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	</span><span class="selection-comment">//                   };</span><span class="selection">
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	</span><span class="selection-comment">//               };</span><span class="selection">
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	</span><span class="selection-comment">//           };</span><span class="selection">
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	</span><span class="selection-comment">//       };</span><span class="selection">
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	</span><span class="selection-comment">//   } SessionState;</span><span class="selection">
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Extra is ignored by crypto/tls, but is encoded by [SessionState.Bytes]</span><span class="selection">
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	</span><span class="selection-comment">// and parsed by [ParseSessionState].</span><span class="selection">
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	</span><span class="selection-comment">// This allows [Config.UnwrapSession]/[Config.WrapSession] and</span><span class="selection">
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	</span><span class="selection-comment">// [ClientSessionCache] implementations to store and retrieve additional</span><span class="selection">
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	</span><span class="selection-comment">// data alongside this session.</span><span class="selection">
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	</span><span class="selection-comment">// To allow different layers in a protocol stack to share this field,</span><span class="selection">
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	</span><span class="selection-comment">// applications must only append to it, not replace it, and must use entries</span><span class="selection">
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	</span><span class="selection-comment">// that can be recognized even if out of order (for example, by starting</span><span class="selection">
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	</span><span class="selection-comment">// with an id and version prefix).</span><span class="selection">
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	Extra [][]byte
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	</span><span class="selection-comment">// EarlyData indicates whether the ticket can be used for 0-RTT in a QUIC</span><span class="selection">
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	</span><span class="selection-comment">// connection. The application may set this to false if it is true to</span><span class="selection">
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	</span><span class="selection-comment">// decline to offer 0-RTT even if supported.</span><span class="selection">
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	EarlyData bool
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	version     uint16
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	isClient    bool
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	cipherSuite uint16
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	</span><span class="selection-comment">// createdAt is the generation time of the secret on the sever (which for</span><span class="selection">
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	</span><span class="selection-comment">// TLS 1.0–1.2 might be earlier than the current session) and the time at</span><span class="selection">
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	</span><span class="selection-comment">// which the ticket was received on the client.</span><span class="selection">
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	createdAt         uint64 </span><span class="selection-comment">// seconds since UNIX epoch</span><span class="selection">
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	secret            []byte </span><span class="selection-comment">// master secret for TLS 1.2, or the PSK for TLS 1.3</span><span class="selection">
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	extMasterSecret   bool
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	peerCertificates  []*x509.Certificate
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	activeCertHandles []*activeCert
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	ocspResponse      []byte
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	scts              [][]byte
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	verifiedChains    [][]*x509.Certificate
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	alpnProtocol      string </span><span class="selection-comment">// only set if EarlyData is true</span><span class="selection">
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Client-side TLS 1.3-only fields.</span><span class="selection">
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	useBy  uint64 </span><span class="selection-comment">// seconds since UNIX epoch</span><span class="selection">
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	ageAdd uint32
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// Bytes encodes the session, including any private fields, so that it can be</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// parsed by [ParseSessionState]. The encoding contains secret values critical</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// to the security of future and possibly past sessions.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// The specific encoding should be considered opaque and may change incompatibly</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// between Go versions.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (s *SessionState) Bytes() ([]byte, error) {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	var b cryptobyte.Builder
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	b.AddUint16(s.version)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if s.isClient {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		b.AddUint8(2) <span class="comment">// client</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	} else {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		b.AddUint8(1) <span class="comment">// server</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	b.AddUint16(s.cipherSuite)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	addUint64(&amp;b, s.createdAt)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	b.AddUint8LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		b.AddBytes(s.secret)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	})
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	b.AddUint24LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		for _, extra := range s.Extra {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			b.AddUint24LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>				b.AddBytes(extra)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			})
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	})
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if s.extMasterSecret {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		b.AddUint8(1)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	} else {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		b.AddUint8(0)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	if s.EarlyData {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		b.AddUint8(1)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	} else {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		b.AddUint8(0)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	marshalCertificate(&amp;b, Certificate{
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		Certificate:                 certificatesToBytesSlice(s.peerCertificates),
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		OCSPStaple:                  s.ocspResponse,
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		SignedCertificateTimestamps: s.scts,
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	})
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	b.AddUint24LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		for _, chain := range s.verifiedChains {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			b.AddUint24LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				<span class="comment">// We elide the first certificate because it&#39;s always the leaf.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>				if len(chain) == 0 {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					b.SetError(errors.New(&#34;tls: internal error: empty verified chain&#34;))
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					return
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>				}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>				for _, cert := range chain[1:] {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>					b.AddUint24LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>						b.AddBytes(cert.Raw)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>					})
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			})
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	})
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if s.EarlyData {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		b.AddUint8LengthPrefixed(func(b *cryptobyte.Builder) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			b.AddBytes([]byte(s.alpnProtocol))
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		})
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	if s.isClient {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		if s.version &gt;= VersionTLS13 {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			addUint64(&amp;b, s.useBy)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			b.AddUint32(s.ageAdd)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return b.Bytes()
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>func certificatesToBytesSlice(certs []*x509.Certificate) [][]byte {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	s := make([][]byte, 0, len(certs))
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for _, c := range certs {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		s = append(s, c.Raw)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	return s
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// ParseSessionState parses a [SessionState] encoded by [SessionState.Bytes].</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func ParseSessionState(data []byte) (*SessionState, error) {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	ss := &amp;SessionState{}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	s := cryptobyte.String(data)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	var typ, extMasterSecret, earlyData uint8
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	var cert Certificate
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	var extra cryptobyte.String
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if !s.ReadUint16(&amp;ss.version) ||
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		!s.ReadUint8(&amp;typ) ||
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		(typ != 1 &amp;&amp; typ != 2) ||
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		!s.ReadUint16(&amp;ss.cipherSuite) ||
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		!readUint64(&amp;s, &amp;ss.createdAt) ||
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		!readUint8LengthPrefixed(&amp;s, &amp;ss.secret) ||
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		!s.ReadUint24LengthPrefixed(&amp;extra) ||
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		!s.ReadUint8(&amp;extMasterSecret) ||
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		!s.ReadUint8(&amp;earlyData) ||
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		len(ss.secret) == 0 ||
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		!unmarshalCertificate(&amp;s, &amp;cert) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	for !extra.Empty() {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		var e []byte
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		if !readUint24LengthPrefixed(&amp;extra, &amp;e) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		ss.Extra = append(ss.Extra, e)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	switch extMasterSecret {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	case 0:
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		ss.extMasterSecret = false
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	case 1:
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		ss.extMasterSecret = true
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	default:
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	switch earlyData {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	case 0:
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		ss.EarlyData = false
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	case 1:
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		ss.EarlyData = true
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	default:
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	for _, cert := range cert.Certificate {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		c, err := globalCertCache.newCert(cert)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if err != nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return nil, err
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		ss.activeCertHandles = append(ss.activeCertHandles, c)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		ss.peerCertificates = append(ss.peerCertificates, c.cert)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	ss.ocspResponse = cert.OCSPStaple
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	ss.scts = cert.SignedCertificateTimestamps
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	var chainList cryptobyte.String
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	if !s.ReadUint24LengthPrefixed(&amp;chainList) {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	for !chainList.Empty() {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		var certList cryptobyte.String
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		if !chainList.ReadUint24LengthPrefixed(&amp;certList) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		var chain []*x509.Certificate
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		if len(ss.peerCertificates) == 0 {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		chain = append(chain, ss.peerCertificates[0])
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		for !certList.Empty() {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			var cert []byte
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			if !readUint24LengthPrefixed(&amp;certList, &amp;cert) {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			c, err := globalCertCache.newCert(cert)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			if err != nil {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>				return nil, err
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			ss.activeCertHandles = append(ss.activeCertHandles, c)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			chain = append(chain, c.cert)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		ss.verifiedChains = append(ss.verifiedChains, chain)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if ss.EarlyData {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		var alpn []byte
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if !readUint8LengthPrefixed(&amp;s, &amp;alpn) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		ss.alpnProtocol = string(alpn)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if isClient := typ == 2; !isClient {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		if !s.Empty() {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return ss, nil
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	ss.isClient = true
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if len(ss.peerCertificates) == 0 {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: no server certificates in client session&#34;)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if ss.version &lt; VersionTLS13 {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		if !s.Empty() {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return ss, nil
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	if !s.ReadUint64(&amp;ss.useBy) || !s.ReadUint32(&amp;ss.ageAdd) || !s.Empty() {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: invalid session encoding&#34;)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	return ss, nil
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// sessionState returns a partially filled-out [SessionState] with information</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// from the current connection.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func (c *Conn) sessionState() (*SessionState, error) {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	return &amp;SessionState{
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		version:           c.vers,
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		cipherSuite:       c.cipherSuite,
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		createdAt:         uint64(c.config.time().Unix()),
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		alpnProtocol:      c.clientProtocol,
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		peerCertificates:  c.peerCertificates,
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		activeCertHandles: c.activeCertHandles,
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		ocspResponse:      c.ocspResponse,
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		scts:              c.scts,
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		isClient:          c.isClient,
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		extMasterSecret:   c.extMasterSecret,
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		verifiedChains:    c.verifiedChains,
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}, nil
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// EncryptTicket encrypts a ticket with the [Config]&#39;s configured (or default)</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// session ticket keys. It can be used as a [Config.WrapSession] implementation.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func (c *Config) EncryptTicket(cs ConnectionState, ss *SessionState) ([]byte, error) {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	ticketKeys := c.ticketKeys(nil)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	stateBytes, err := ss.Bytes()
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if err != nil {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		return nil, err
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return c.encryptTicket(stateBytes, ticketKeys)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>func (c *Config) encryptTicket(state []byte, ticketKeys []ticketKey) ([]byte, error) {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	if len(ticketKeys) == 0 {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: internal error: session ticket keys unavailable&#34;)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	encrypted := make([]byte, aes.BlockSize+len(state)+sha256.Size)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	iv := encrypted[:aes.BlockSize]
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	ciphertext := encrypted[aes.BlockSize : len(encrypted)-sha256.Size]
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	authenticated := encrypted[:len(encrypted)-sha256.Size]
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	macBytes := encrypted[len(encrypted)-sha256.Size:]
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	if _, err := io.ReadFull(c.rand(), iv); err != nil {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		return nil, err
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	key := ticketKeys[0]
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	block, err := aes.NewCipher(key.aesKey[:])
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	if err != nil {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		return nil, errors.New(&#34;tls: failed to create cipher while encrypting ticket: &#34; + err.Error())
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	cipher.NewCTR(block, iv).XORKeyStream(ciphertext, state)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	mac := hmac.New(sha256.New, key.hmacKey[:])
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	mac.Write(authenticated)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	mac.Sum(macBytes[:0])
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	return encrypted, nil
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// DecryptTicket decrypts a ticket encrypted by [Config.EncryptTicket]. It can</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// be used as a [Config.UnwrapSession] implementation.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// If the ticket can&#39;t be decrypted or parsed, DecryptTicket returns (nil, nil).</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func (c *Config) DecryptTicket(identity []byte, cs ConnectionState) (*SessionState, error) {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	ticketKeys := c.ticketKeys(nil)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	stateBytes := c.decryptTicket(identity, ticketKeys)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	if stateBytes == nil {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		return nil, nil
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	s, err := ParseSessionState(stateBytes)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if err != nil {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		return nil, nil <span class="comment">// drop unparsable tickets on the floor</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	return s, nil
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>func (c *Config) decryptTicket(encrypted []byte, ticketKeys []ticketKey) []byte {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	if len(encrypted) &lt; aes.BlockSize+sha256.Size {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		return nil
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	iv := encrypted[:aes.BlockSize]
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	ciphertext := encrypted[aes.BlockSize : len(encrypted)-sha256.Size]
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	authenticated := encrypted[:len(encrypted)-sha256.Size]
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	macBytes := encrypted[len(encrypted)-sha256.Size:]
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	for _, key := range ticketKeys {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		mac := hmac.New(sha256.New, key.hmacKey[:])
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		mac.Write(authenticated)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		expected := mac.Sum(nil)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		if subtle.ConstantTimeCompare(macBytes, expected) != 1 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			continue
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		block, err := aes.NewCipher(key.aesKey[:])
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		if err != nil {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			return nil
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		plaintext := make([]byte, len(ciphertext))
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		cipher.NewCTR(block, iv).XORKeyStream(plaintext, ciphertext)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		return plaintext
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return nil
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// ClientSessionState contains the state needed by a client to</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// resume a previous TLS session.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>type ClientSessionState struct {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	ticket  []byte
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	session *SessionState
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// ResumptionState returns the session ticket sent by the server (also known as</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// the session&#39;s identity) and the state necessary to resume this session.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// It can be called by [ClientSessionCache.Put] to serialize (with</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// [SessionState.Bytes]) and store the session.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func (cs *ClientSessionState) ResumptionState() (ticket []byte, state *SessionState, err error) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	return cs.ticket, cs.session, nil
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// NewResumptionState returns a state value that can be returned by</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// [ClientSessionCache.Get] to resume a previous session.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// state needs to be returned by [ParseSessionState], and the ticket and session</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// state must have been returned by [ClientSessionState.ResumptionState].</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>func NewResumptionState(ticket []byte, state *SessionState) (*ClientSessionState, error) {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	return &amp;ClientSessionState{
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		ticket: ticket, session: state,
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	}, nil
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
</pre><p><a href="ticket.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
