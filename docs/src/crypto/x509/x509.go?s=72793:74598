<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/crypto/x509/x509.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./x509.go?s=72793:74598#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/crypto">crypto</a>/<a href="http://localhost:8080/src/crypto/x509">x509</a>/<span class="text-muted">x509.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/crypto/x509">crypto/x509</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package x509 implements a subset of the X.509 standard.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// It allows parsing and generating certificates, certificate signing</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// requests, certificate revocation lists, and encoded public and private keys.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// It provides a certificate verifier, complete with a chain builder.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// The package targets the X.509 technical profile defined by the IETF (RFC</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// 2459/3280/5280), and as further restricted by the CA/Browser Forum Baseline</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// Requirements. There is minimal support for features outside of these</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// profiles, as the primary goal of the package is to provide compatibility</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// with the publicly trusted TLS certificate ecosystem and its policies and</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// constraints.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// On macOS and Windows, certificate verification is handled by system APIs, but</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// the package aims to apply consistent validation rules across operating</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// systems.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>package x509
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>import (
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;crypto&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;crypto/ecdh&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;crypto/ecdsa&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;crypto/ed25519&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;crypto/elliptic&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;crypto/rsa&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;crypto/sha1&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;crypto/x509/pkix&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;encoding/asn1&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;encoding/pem&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// Explicitly import these for their crypto.RegisterHash init side-effects.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// Keep these as blank imports, even if they&#39;re imported above.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	_ &#34;crypto/sha1&#34;
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	_ &#34;crypto/sha256&#34;
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	_ &#34;crypto/sha512&#34;
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	&#34;golang.org/x/crypto/cryptobyte&#34;
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	cryptobyte_asn1 &#34;golang.org/x/crypto/cryptobyte/asn1&#34;
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// pkixPublicKey reflects a PKIX public key structure. See SubjectPublicKeyInfo</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// in RFC 3280.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>type pkixPublicKey struct {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	Algo      pkix.AlgorithmIdentifier
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	BitString asn1.BitString
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// ParsePKIXPublicKey parses a public key in PKIX, ASN.1 DER form. The encoded</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// public key is a SubjectPublicKeyInfo structure (see RFC 5280, Section 4.1).</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// It returns a *[rsa.PublicKey], *[dsa.PublicKey], *[ecdsa.PublicKey],</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// [ed25519.PublicKey] (not a pointer), or *[ecdh.PublicKey] (for X25519).</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// More types might be supported in the future.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// This kind of key is commonly encoded in PEM blocks of type &#34;PUBLIC KEY&#34;.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func ParsePKIXPublicKey(derBytes []byte) (pub any, err error) {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	var pki publicKeyInfo
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if rest, err := asn1.Unmarshal(derBytes, &amp;pki); err != nil {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		if _, err := asn1.Unmarshal(derBytes, &amp;pkcs1PublicKey{}); err == nil {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			return nil, errors.New(&#34;x509: failed to parse public key (use ParsePKCS1PublicKey instead for this key format)&#34;)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		return nil, err
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	} else if len(rest) != 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: trailing data after ASN.1 of public-key&#34;)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return parsePublicKey(&amp;pki)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func marshalPublicKey(pub any) (publicKeyBytes []byte, publicKeyAlgorithm pkix.AlgorithmIdentifier, err error) {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	switch pub := pub.(type) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	case *rsa.PublicKey:
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		publicKeyBytes, err = asn1.Marshal(pkcs1PublicKey{
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			N: pub.N,
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			E: pub.E,
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		})
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		if err != nil {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>			return nil, pkix.AlgorithmIdentifier{}, err
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		publicKeyAlgorithm.Algorithm = oidPublicKeyRSA
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		<span class="comment">// This is a NULL parameters value which is required by</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		<span class="comment">// RFC 3279, Section 2.3.1.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		publicKeyAlgorithm.Parameters = asn1.NullRawValue
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	case *ecdsa.PublicKey:
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		oid, ok := oidFromNamedCurve(pub.Curve)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		if !ok {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			return nil, pkix.AlgorithmIdentifier{}, errors.New(&#34;x509: unsupported elliptic curve&#34;)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		if !pub.Curve.IsOnCurve(pub.X, pub.Y) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			return nil, pkix.AlgorithmIdentifier{}, errors.New(&#34;x509: invalid elliptic curve public key&#34;)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		publicKeyBytes = elliptic.Marshal(pub.Curve, pub.X, pub.Y)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		publicKeyAlgorithm.Algorithm = oidPublicKeyECDSA
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		var paramBytes []byte
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		paramBytes, err = asn1.Marshal(oid)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		if err != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			return
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		publicKeyAlgorithm.Parameters.FullBytes = paramBytes
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	case ed25519.PublicKey:
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		publicKeyBytes = pub
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		publicKeyAlgorithm.Algorithm = oidPublicKeyEd25519
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	case *ecdh.PublicKey:
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		publicKeyBytes = pub.Bytes()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if pub.Curve() == ecdh.X25519() {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			publicKeyAlgorithm.Algorithm = oidPublicKeyX25519
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		} else {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			oid, ok := oidFromECDHCurve(pub.Curve())
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			if !ok {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>				return nil, pkix.AlgorithmIdentifier{}, errors.New(&#34;x509: unsupported elliptic curve&#34;)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			publicKeyAlgorithm.Algorithm = oidPublicKeyECDSA
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			var paramBytes []byte
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			paramBytes, err = asn1.Marshal(oid)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			if err != nil {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>				return
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			publicKeyAlgorithm.Parameters.FullBytes = paramBytes
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	default:
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return nil, pkix.AlgorithmIdentifier{}, fmt.Errorf(&#34;x509: unsupported public key type: %T&#34;, pub)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	return publicKeyBytes, publicKeyAlgorithm, nil
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// MarshalPKIXPublicKey converts a public key to PKIX, ASN.1 DER form.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// The encoded public key is a SubjectPublicKeyInfo structure</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// (see RFC 5280, Section 4.1).</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// The following key types are currently supported: *[rsa.PublicKey],</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// *[ecdsa.PublicKey], [ed25519.PublicKey] (not a pointer), and *[ecdh.PublicKey].</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// Unsupported key types result in an error.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// This kind of key is commonly encoded in PEM blocks of type &#34;PUBLIC KEY&#34;.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>func MarshalPKIXPublicKey(pub any) ([]byte, error) {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	var publicKeyBytes []byte
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	var publicKeyAlgorithm pkix.AlgorithmIdentifier
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	var err error
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if publicKeyBytes, publicKeyAlgorithm, err = marshalPublicKey(pub); err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return nil, err
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	pkix := pkixPublicKey{
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		Algo: publicKeyAlgorithm,
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		BitString: asn1.BitString{
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			Bytes:     publicKeyBytes,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			BitLength: 8 * len(publicKeyBytes),
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		},
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	ret, _ := asn1.Marshal(pkix)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return ret, nil
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// These structures reflect the ASN.1 structure of X.509 certificates.:</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>type certificate struct {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	TBSCertificate     tbsCertificate
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	SignatureAlgorithm pkix.AlgorithmIdentifier
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	SignatureValue     asn1.BitString
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>type tbsCertificate struct {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	Raw                asn1.RawContent
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	Version            int `asn1:&#34;optional,explicit,default:0,tag:0&#34;`
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	SerialNumber       *big.Int
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	SignatureAlgorithm pkix.AlgorithmIdentifier
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	Issuer             asn1.RawValue
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	Validity           validity
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	Subject            asn1.RawValue
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	PublicKey          publicKeyInfo
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	UniqueId           asn1.BitString   `asn1:&#34;optional,tag:1&#34;`
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	SubjectUniqueId    asn1.BitString   `asn1:&#34;optional,tag:2&#34;`
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	Extensions         []pkix.Extension `asn1:&#34;omitempty,optional,explicit,tag:3&#34;`
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>type dsaAlgorithmParameters struct {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	P, Q, G *big.Int
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>type validity struct {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	NotBefore, NotAfter time.Time
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>type publicKeyInfo struct {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	Raw       asn1.RawContent
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	Algorithm pkix.AlgorithmIdentifier
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	PublicKey asn1.BitString
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// RFC 5280,  4.2.1.1</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>type authKeyId struct {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	Id []byte `asn1:&#34;optional,tag:0&#34;`
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>type SignatureAlgorithm int
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>const (
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	UnknownSignatureAlgorithm SignatureAlgorithm = iota
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	MD2WithRSA  <span class="comment">// Unsupported.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	MD5WithRSA  <span class="comment">// Only supported for signing, not verification.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	SHA1WithRSA <span class="comment">// Only supported for signing, and verification of CRLs, CSRs, and OCSP responses.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	SHA256WithRSA
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	SHA384WithRSA
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	SHA512WithRSA
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	DSAWithSHA1   <span class="comment">// Unsupported.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	DSAWithSHA256 <span class="comment">// Unsupported.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	ECDSAWithSHA1 <span class="comment">// Only supported for signing, and verification of CRLs, CSRs, and OCSP responses.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	ECDSAWithSHA256
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	ECDSAWithSHA384
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	ECDSAWithSHA512
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	SHA256WithRSAPSS
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	SHA384WithRSAPSS
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	SHA512WithRSAPSS
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	PureEd25519
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>func (algo SignatureAlgorithm) isRSAPSS() bool {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	switch algo {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	case SHA256WithRSAPSS, SHA384WithRSAPSS, SHA512WithRSAPSS:
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		return true
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	default:
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return false
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (algo SignatureAlgorithm) String() string {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	for _, details := range signatureAlgorithmDetails {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		if details.algo == algo {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			return details.name
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	return strconv.Itoa(int(algo))
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>type PublicKeyAlgorithm int
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>const (
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	UnknownPublicKeyAlgorithm PublicKeyAlgorithm = iota
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	RSA
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	DSA <span class="comment">// Only supported for parsing.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	ECDSA
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	Ed25519
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>var publicKeyAlgoName = [...]string{
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	RSA:     &#34;RSA&#34;,
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	DSA:     &#34;DSA&#34;,
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	ECDSA:   &#34;ECDSA&#34;,
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	Ed25519: &#34;Ed25519&#34;,
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>func (algo PublicKeyAlgorithm) String() string {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if 0 &lt; algo &amp;&amp; int(algo) &lt; len(publicKeyAlgoName) {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return publicKeyAlgoName[algo]
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return strconv.Itoa(int(algo))
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// OIDs for signature algorithms</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">//	pkcs-1 OBJECT IDENTIFIER ::= {</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">//		iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) 1 }</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// RFC 3279 2.2.1 RSA Signature Algorithms</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//	md2WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 2 }</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">//	md5WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 4 }</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">//	sha-1WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 5 }</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">//	dsaWithSha1 OBJECT IDENTIFIER ::= {</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">//		iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 3 }</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// RFC 3279 2.2.3 ECDSA Signature Algorithm</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">//	ecdsa-with-SHA1 OBJECT IDENTIFIER ::= {</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">//		iso(1) member-body(2) us(840) ansi-x962(10045)</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">//		signatures(4) ecdsa-with-SHA1(1)}</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// RFC 4055 5 PKCS #1 Version 1.5</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">//	sha256WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 11 }</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">//	sha384WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 12 }</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">//	sha512WithRSAEncryption OBJECT IDENTIFIER ::= { pkcs-1 13 }</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// RFC 5758 3.1 DSA Signature Algorithms</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">//	dsaWithSha256 OBJECT IDENTIFIER ::= {</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">//		joint-iso-ccitt(2) country(16) us(840) organization(1) gov(101)</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">//		csor(3) algorithms(4) id-dsa-with-sha2(3) 2}</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// RFC 5758 3.2 ECDSA Signature Algorithm</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">//	ecdsa-with-SHA256 OBJECT IDENTIFIER ::= { iso(1) member-body(2)</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">//		us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 2 }</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">//	ecdsa-with-SHA384 OBJECT IDENTIFIER ::= { iso(1) member-body(2)</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">//		us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 3 }</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">//	ecdsa-with-SHA512 OBJECT IDENTIFIER ::= { iso(1) member-body(2)</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">//		us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 4 }</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// RFC 8410 3 Curve25519 and Curve448 Algorithm Identifiers</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">//	id-Ed25519   OBJECT IDENTIFIER ::= { 1 3 101 112 }</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>var (
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	oidSignatureMD2WithRSA      = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 2}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	oidSignatureMD5WithRSA      = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 4}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	oidSignatureSHA1WithRSA     = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	oidSignatureSHA256WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 11}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	oidSignatureSHA384WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 12}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	oidSignatureSHA512WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 13}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	oidSignatureRSAPSS          = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 10}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	oidSignatureDSAWithSHA1     = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 3}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	oidSignatureDSAWithSHA256   = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 2}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	oidSignatureECDSAWithSHA1   = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 1}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	oidSignatureECDSAWithSHA256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 2}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	oidSignatureECDSAWithSHA384 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 3}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	oidSignatureECDSAWithSHA512 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 4}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	oidSignatureEd25519         = asn1.ObjectIdentifier{1, 3, 101, 112}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	oidSHA256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 1}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	oidSHA384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 2}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	oidSHA512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 3}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	oidMGF1 = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 8}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// oidISOSignatureSHA1WithRSA means the same as oidSignatureSHA1WithRSA</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	<span class="comment">// but it&#39;s specified by ISO. Microsoft&#39;s makecert.exe has been known</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	<span class="comment">// to produce certificates with this OID.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	oidISOSignatureSHA1WithRSA = asn1.ObjectIdentifier{1, 3, 14, 3, 2, 29}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>var signatureAlgorithmDetails = []struct {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	algo       SignatureAlgorithm
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	name       string
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	oid        asn1.ObjectIdentifier
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	pubKeyAlgo PublicKeyAlgorithm
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	hash       crypto.Hash
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>}{
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	{MD2WithRSA, &#34;MD2-RSA&#34;, oidSignatureMD2WithRSA, RSA, crypto.Hash(0) <span class="comment">/* no value for MD2 */</span>},
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	{MD5WithRSA, &#34;MD5-RSA&#34;, oidSignatureMD5WithRSA, RSA, crypto.MD5},
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	{SHA1WithRSA, &#34;SHA1-RSA&#34;, oidSignatureSHA1WithRSA, RSA, crypto.SHA1},
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	{SHA1WithRSA, &#34;SHA1-RSA&#34;, oidISOSignatureSHA1WithRSA, RSA, crypto.SHA1},
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	{SHA256WithRSA, &#34;SHA256-RSA&#34;, oidSignatureSHA256WithRSA, RSA, crypto.SHA256},
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	{SHA384WithRSA, &#34;SHA384-RSA&#34;, oidSignatureSHA384WithRSA, RSA, crypto.SHA384},
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	{SHA512WithRSA, &#34;SHA512-RSA&#34;, oidSignatureSHA512WithRSA, RSA, crypto.SHA512},
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	{SHA256WithRSAPSS, &#34;SHA256-RSAPSS&#34;, oidSignatureRSAPSS, RSA, crypto.SHA256},
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	{SHA384WithRSAPSS, &#34;SHA384-RSAPSS&#34;, oidSignatureRSAPSS, RSA, crypto.SHA384},
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	{SHA512WithRSAPSS, &#34;SHA512-RSAPSS&#34;, oidSignatureRSAPSS, RSA, crypto.SHA512},
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	{DSAWithSHA1, &#34;DSA-SHA1&#34;, oidSignatureDSAWithSHA1, DSA, crypto.SHA1},
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	{DSAWithSHA256, &#34;DSA-SHA256&#34;, oidSignatureDSAWithSHA256, DSA, crypto.SHA256},
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	{ECDSAWithSHA1, &#34;ECDSA-SHA1&#34;, oidSignatureECDSAWithSHA1, ECDSA, crypto.SHA1},
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	{ECDSAWithSHA256, &#34;ECDSA-SHA256&#34;, oidSignatureECDSAWithSHA256, ECDSA, crypto.SHA256},
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	{ECDSAWithSHA384, &#34;ECDSA-SHA384&#34;, oidSignatureECDSAWithSHA384, ECDSA, crypto.SHA384},
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	{ECDSAWithSHA512, &#34;ECDSA-SHA512&#34;, oidSignatureECDSAWithSHA512, ECDSA, crypto.SHA512},
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	{PureEd25519, &#34;Ed25519&#34;, oidSignatureEd25519, Ed25519, crypto.Hash(0) <span class="comment">/* no pre-hashing */</span>},
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// hashToPSSParameters contains the DER encoded RSA PSS parameters for the</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// SHA256, SHA384, and SHA512 hashes as defined in RFC 3447, Appendix A.2.3.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// The parameters contain the following values:</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">//   - hashAlgorithm contains the associated hash identifier with NULL parameters</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">//   - maskGenAlgorithm always contains the default mgf1SHA1 identifier</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">//   - saltLength contains the length of the associated hash</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">//   - trailerField always contains the default trailerFieldBC value</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>var hashToPSSParameters = map[crypto.Hash]asn1.RawValue{
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	crypto.SHA256: asn1.RawValue{FullBytes: []byte{48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 162, 3, 2, 1, 32}},
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	crypto.SHA384: asn1.RawValue{FullBytes: []byte{48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 162, 3, 2, 1, 48}},
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	crypto.SHA512: asn1.RawValue{FullBytes: []byte{48, 52, 160, 15, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 161, 28, 48, 26, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 8, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 162, 3, 2, 1, 64}},
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// pssParameters reflects the parameters in an AlgorithmIdentifier that</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// specifies RSA PSS. See RFC 3447, Appendix A.2.3.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>type pssParameters struct {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	<span class="comment">// The following three fields are not marked as</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	<span class="comment">// optional because the default values specify SHA-1,</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	<span class="comment">// which is no longer suitable for use in signatures.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	Hash         pkix.AlgorithmIdentifier `asn1:&#34;explicit,tag:0&#34;`
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	MGF          pkix.AlgorithmIdentifier `asn1:&#34;explicit,tag:1&#34;`
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	SaltLength   int                      `asn1:&#34;explicit,tag:2&#34;`
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	TrailerField int                      `asn1:&#34;optional,explicit,tag:3,default:1&#34;`
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func getSignatureAlgorithmFromAI(ai pkix.AlgorithmIdentifier) SignatureAlgorithm {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if ai.Algorithm.Equal(oidSignatureEd25519) {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		<span class="comment">// RFC 8410, Section 3</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		<span class="comment">// &gt; For all of the OIDs, the parameters MUST be absent.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if len(ai.Parameters.FullBytes) != 0 {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			return UnknownSignatureAlgorithm
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	if !ai.Algorithm.Equal(oidSignatureRSAPSS) {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		for _, details := range signatureAlgorithmDetails {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			if ai.Algorithm.Equal(details.oid) {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				return details.algo
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return UnknownSignatureAlgorithm
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// RSA PSS is special because it encodes important parameters</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// in the Parameters.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	var params pssParameters
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	if _, err := asn1.Unmarshal(ai.Parameters.FullBytes, &amp;params); err != nil {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		return UnknownSignatureAlgorithm
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	var mgf1HashFunc pkix.AlgorithmIdentifier
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	if _, err := asn1.Unmarshal(params.MGF.Parameters.FullBytes, &amp;mgf1HashFunc); err != nil {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		return UnknownSignatureAlgorithm
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// PSS is greatly overburdened with options. This code forces them into</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// three buckets by requiring that the MGF1 hash function always match the</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">// message hash function (as recommended in RFC 3447, Section 8.1), that the</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	<span class="comment">// salt length matches the hash length, and that the trailer field has the</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// default value.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	if (len(params.Hash.Parameters.FullBytes) != 0 &amp;&amp; !bytes.Equal(params.Hash.Parameters.FullBytes, asn1.NullBytes)) ||
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		!params.MGF.Algorithm.Equal(oidMGF1) ||
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		!mgf1HashFunc.Algorithm.Equal(params.Hash.Algorithm) ||
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		(len(mgf1HashFunc.Parameters.FullBytes) != 0 &amp;&amp; !bytes.Equal(mgf1HashFunc.Parameters.FullBytes, asn1.NullBytes)) ||
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		params.TrailerField != 1 {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		return UnknownSignatureAlgorithm
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	switch {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	case params.Hash.Algorithm.Equal(oidSHA256) &amp;&amp; params.SaltLength == 32:
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		return SHA256WithRSAPSS
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	case params.Hash.Algorithm.Equal(oidSHA384) &amp;&amp; params.SaltLength == 48:
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		return SHA384WithRSAPSS
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	case params.Hash.Algorithm.Equal(oidSHA512) &amp;&amp; params.SaltLength == 64:
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return SHA512WithRSAPSS
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	return UnknownSignatureAlgorithm
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>var (
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	<span class="comment">// RFC 3279, 2.3 Public Key Algorithms</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">//	pkcs-1 OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840)</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">//		rsadsi(113549) pkcs(1) 1 }</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// rsaEncryption OBJECT IDENTIFIER ::== { pkcs1-1 1 }</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	<span class="comment">//	id-dsa OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840)</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">//		x9-57(10040) x9cm(4) 1 }</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	oidPublicKeyRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 1}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	oidPublicKeyDSA = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 1}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	<span class="comment">// RFC 5480, 2.1.1 Unrestricted Algorithm Identifier and Parameters</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">//	id-ecPublicKey OBJECT IDENTIFIER ::= {</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	<span class="comment">//		iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	oidPublicKeyECDSA = asn1.ObjectIdentifier{1, 2, 840, 10045, 2, 1}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// RFC 8410, Section 3</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	<span class="comment">//	id-X25519    OBJECT IDENTIFIER ::= { 1 3 101 110 }</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	<span class="comment">//	id-Ed25519   OBJECT IDENTIFIER ::= { 1 3 101 112 }</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	oidPublicKeyX25519  = asn1.ObjectIdentifier{1, 3, 101, 110}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	oidPublicKeyEd25519 = asn1.ObjectIdentifier{1, 3, 101, 112}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// getPublicKeyAlgorithmFromOID returns the exposed PublicKeyAlgorithm</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// identifier for public key types supported in certificates and CSRs. Marshal</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// and Parse functions may support a different set of public key types.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>func getPublicKeyAlgorithmFromOID(oid asn1.ObjectIdentifier) PublicKeyAlgorithm {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	switch {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	case oid.Equal(oidPublicKeyRSA):
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		return RSA
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	case oid.Equal(oidPublicKeyDSA):
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		return DSA
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	case oid.Equal(oidPublicKeyECDSA):
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		return ECDSA
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	case oid.Equal(oidPublicKeyEd25519):
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		return Ed25519
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return UnknownPublicKeyAlgorithm
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// RFC 5480, 2.1.1.1. Named Curve</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">//	secp224r1 OBJECT IDENTIFIER ::= {</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">//	  iso(1) identified-organization(3) certicom(132) curve(0) 33 }</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">//	secp256r1 OBJECT IDENTIFIER ::= {</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">//	  iso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3)</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">//	  prime(1) 7 }</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">//	secp384r1 OBJECT IDENTIFIER ::= {</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">//	  iso(1) identified-organization(3) certicom(132) curve(0) 34 }</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">//	secp521r1 OBJECT IDENTIFIER ::= {</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">//	  iso(1) identified-organization(3) certicom(132) curve(0) 35 }</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// NB: secp256r1 is equivalent to prime256v1</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>var (
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	oidNamedCurveP224 = asn1.ObjectIdentifier{1, 3, 132, 0, 33}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	oidNamedCurveP256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 3, 1, 7}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	oidNamedCurveP384 = asn1.ObjectIdentifier{1, 3, 132, 0, 34}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	oidNamedCurveP521 = asn1.ObjectIdentifier{1, 3, 132, 0, 35}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>func namedCurveFromOID(oid asn1.ObjectIdentifier) elliptic.Curve {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	switch {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	case oid.Equal(oidNamedCurveP224):
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return elliptic.P224()
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	case oid.Equal(oidNamedCurveP256):
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		return elliptic.P256()
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	case oid.Equal(oidNamedCurveP384):
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		return elliptic.P384()
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	case oid.Equal(oidNamedCurveP521):
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		return elliptic.P521()
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	return nil
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>func oidFromNamedCurve(curve elliptic.Curve) (asn1.ObjectIdentifier, bool) {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	switch curve {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	case elliptic.P224():
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		return oidNamedCurveP224, true
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	case elliptic.P256():
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		return oidNamedCurveP256, true
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	case elliptic.P384():
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		return oidNamedCurveP384, true
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	case elliptic.P521():
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		return oidNamedCurveP521, true
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	return nil, false
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>func oidFromECDHCurve(curve ecdh.Curve) (asn1.ObjectIdentifier, bool) {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	switch curve {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	case ecdh.X25519():
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		return oidPublicKeyX25519, true
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	case ecdh.P256():
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		return oidNamedCurveP256, true
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	case ecdh.P384():
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		return oidNamedCurveP384, true
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	case ecdh.P521():
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		return oidNamedCurveP521, true
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	return nil, false
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// KeyUsage represents the set of actions that are valid for a given key. It&#39;s</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// a bitmap of the KeyUsage* constants.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>type KeyUsage int
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>const (
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	KeyUsageDigitalSignature KeyUsage = 1 &lt;&lt; iota
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	KeyUsageContentCommitment
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	KeyUsageKeyEncipherment
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	KeyUsageDataEncipherment
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	KeyUsageKeyAgreement
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	KeyUsageCertSign
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	KeyUsageCRLSign
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	KeyUsageEncipherOnly
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	KeyUsageDecipherOnly
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// RFC 5280, 4.2.1.12  Extended Key Usage</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">//	anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">//	id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">//	id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span><span class="comment">//	id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">//	id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">//	id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">//	id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">//	id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>var (
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	oidExtKeyUsageAny                            = asn1.ObjectIdentifier{2, 5, 29, 37, 0}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	oidExtKeyUsageServerAuth                     = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 1}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	oidExtKeyUsageClientAuth                     = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 2}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	oidExtKeyUsageCodeSigning                    = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 3}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	oidExtKeyUsageEmailProtection                = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 4}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	oidExtKeyUsageIPSECEndSystem                 = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 5}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	oidExtKeyUsageIPSECTunnel                    = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 6}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	oidExtKeyUsageIPSECUser                      = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 7}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	oidExtKeyUsageTimeStamping                   = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 8}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	oidExtKeyUsageOCSPSigning                    = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 9}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	oidExtKeyUsageMicrosoftServerGatedCrypto     = asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 311, 10, 3, 3}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	oidExtKeyUsageNetscapeServerGatedCrypto      = asn1.ObjectIdentifier{2, 16, 840, 1, 113730, 4, 1}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	oidExtKeyUsageMicrosoftCommercialCodeSigning = asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 311, 2, 1, 22}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	oidExtKeyUsageMicrosoftKernelCodeSigning     = asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 311, 61, 1, 1}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// ExtKeyUsage represents an extended set of actions that are valid for a given key.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// Each of the ExtKeyUsage* constants define a unique action.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>type ExtKeyUsage int
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>const (
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	ExtKeyUsageAny ExtKeyUsage = iota
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	ExtKeyUsageServerAuth
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	ExtKeyUsageClientAuth
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	ExtKeyUsageCodeSigning
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	ExtKeyUsageEmailProtection
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	ExtKeyUsageIPSECEndSystem
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	ExtKeyUsageIPSECTunnel
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	ExtKeyUsageIPSECUser
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	ExtKeyUsageTimeStamping
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	ExtKeyUsageOCSPSigning
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	ExtKeyUsageMicrosoftServerGatedCrypto
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	ExtKeyUsageNetscapeServerGatedCrypto
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	ExtKeyUsageMicrosoftCommercialCodeSigning
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	ExtKeyUsageMicrosoftKernelCodeSigning
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span><span class="comment">// extKeyUsageOIDs contains the mapping between an ExtKeyUsage and its OID.</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>var extKeyUsageOIDs = []struct {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	extKeyUsage ExtKeyUsage
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	oid         asn1.ObjectIdentifier
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>}{
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	{ExtKeyUsageAny, oidExtKeyUsageAny},
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	{ExtKeyUsageServerAuth, oidExtKeyUsageServerAuth},
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	{ExtKeyUsageClientAuth, oidExtKeyUsageClientAuth},
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	{ExtKeyUsageCodeSigning, oidExtKeyUsageCodeSigning},
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	{ExtKeyUsageEmailProtection, oidExtKeyUsageEmailProtection},
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	{ExtKeyUsageIPSECEndSystem, oidExtKeyUsageIPSECEndSystem},
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	{ExtKeyUsageIPSECTunnel, oidExtKeyUsageIPSECTunnel},
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	{ExtKeyUsageIPSECUser, oidExtKeyUsageIPSECUser},
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	{ExtKeyUsageTimeStamping, oidExtKeyUsageTimeStamping},
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	{ExtKeyUsageOCSPSigning, oidExtKeyUsageOCSPSigning},
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	{ExtKeyUsageMicrosoftServerGatedCrypto, oidExtKeyUsageMicrosoftServerGatedCrypto},
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	{ExtKeyUsageNetscapeServerGatedCrypto, oidExtKeyUsageNetscapeServerGatedCrypto},
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	{ExtKeyUsageMicrosoftCommercialCodeSigning, oidExtKeyUsageMicrosoftCommercialCodeSigning},
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	{ExtKeyUsageMicrosoftKernelCodeSigning, oidExtKeyUsageMicrosoftKernelCodeSigning},
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>func extKeyUsageFromOID(oid asn1.ObjectIdentifier) (eku ExtKeyUsage, ok bool) {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	for _, pair := range extKeyUsageOIDs {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		if oid.Equal(pair.oid) {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			return pair.extKeyUsage, true
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	return
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>func oidFromExtKeyUsage(eku ExtKeyUsage) (oid asn1.ObjectIdentifier, ok bool) {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	for _, pair := range extKeyUsageOIDs {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		if eku == pair.extKeyUsage {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			return pair.oid, true
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	return
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span><span class="comment">// A Certificate represents an X.509 certificate.</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>type Certificate struct {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	Raw                     []byte <span class="comment">// Complete ASN.1 DER content (certificate, signature algorithm and signature).</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	RawTBSCertificate       []byte <span class="comment">// Certificate part of raw ASN.1 DER content.</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	RawSubjectPublicKeyInfo []byte <span class="comment">// DER encoded SubjectPublicKeyInfo.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	RawSubject              []byte <span class="comment">// DER encoded Subject</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	RawIssuer               []byte <span class="comment">// DER encoded Issuer</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	Signature          []byte
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	SignatureAlgorithm SignatureAlgorithm
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	PublicKeyAlgorithm PublicKeyAlgorithm
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	PublicKey          any
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	Version             int
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	SerialNumber        *big.Int
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	Issuer              pkix.Name
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	Subject             pkix.Name
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	NotBefore, NotAfter time.Time <span class="comment">// Validity bounds.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	KeyUsage            KeyUsage
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	<span class="comment">// Extensions contains raw X.509 extensions. When parsing certificates,</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	<span class="comment">// this can be used to extract non-critical extensions that are not</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	<span class="comment">// parsed by this package. When marshaling certificates, the Extensions</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	<span class="comment">// field is ignored, see ExtraExtensions.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	Extensions []pkix.Extension
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	<span class="comment">// ExtraExtensions contains extensions to be copied, raw, into any</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	<span class="comment">// marshaled certificates. Values override any extensions that would</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	<span class="comment">// otherwise be produced based on the other fields. The ExtraExtensions</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	<span class="comment">// field is not populated when parsing certificates, see Extensions.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	ExtraExtensions []pkix.Extension
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	<span class="comment">// UnhandledCriticalExtensions contains a list of extension IDs that</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	<span class="comment">// were not (fully) processed when parsing. Verify will fail if this</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	<span class="comment">// slice is non-empty, unless verification is delegated to an OS</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	<span class="comment">// library which understands all the critical extensions.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	<span class="comment">// Users can access these extensions using Extensions and can remove</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	<span class="comment">// elements from this slice if they believe that they have been</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	<span class="comment">// handled.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	UnhandledCriticalExtensions []asn1.ObjectIdentifier
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	ExtKeyUsage        []ExtKeyUsage           <span class="comment">// Sequence of extended key usages.</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	UnknownExtKeyUsage []asn1.ObjectIdentifier <span class="comment">// Encountered extended key usages unknown to this package.</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	<span class="comment">// BasicConstraintsValid indicates whether IsCA, MaxPathLen,</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	<span class="comment">// and MaxPathLenZero are valid.</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	BasicConstraintsValid bool
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	IsCA                  bool
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	<span class="comment">// MaxPathLen and MaxPathLenZero indicate the presence and</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	<span class="comment">// value of the BasicConstraints&#39; &#34;pathLenConstraint&#34;.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	<span class="comment">// When parsing a certificate, a positive non-zero MaxPathLen</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	<span class="comment">// means that the field was specified, -1 means it was unset,</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	<span class="comment">// and MaxPathLenZero being true mean that the field was</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	<span class="comment">// explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	<span class="comment">// should be treated equivalent to -1 (unset).</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	<span class="comment">// When generating a certificate, an unset pathLenConstraint</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	<span class="comment">// can be requested with either MaxPathLen == -1 or using the</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	<span class="comment">// zero value for both MaxPathLen and MaxPathLenZero.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	MaxPathLen int
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	<span class="comment">// MaxPathLenZero indicates that BasicConstraintsValid==true</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	<span class="comment">// and MaxPathLen==0 should be interpreted as an actual</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	<span class="comment">// maximum path length of zero. Otherwise, that combination is</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	<span class="comment">// interpreted as MaxPathLen not being set.</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	MaxPathLenZero bool
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	SubjectKeyId   []byte
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	AuthorityKeyId []byte
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	<span class="comment">// RFC 5280, 4.2.2.1 (Authority Information Access)</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	OCSPServer            []string
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	IssuingCertificateURL []string
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	<span class="comment">// Subject Alternate Name values. (Note that these values may not be valid</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	<span class="comment">// if invalid values were contained within a parsed certificate. For</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	<span class="comment">// example, an element of DNSNames may not be a valid DNS domain name.)</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	DNSNames       []string
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	EmailAddresses []string
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	IPAddresses    []net.IP
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	URIs           []*url.URL
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	<span class="comment">// Name constraints</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	PermittedDNSDomainsCritical bool <span class="comment">// if true then the name constraints are marked critical.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	PermittedDNSDomains         []string
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	ExcludedDNSDomains          []string
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	PermittedIPRanges           []*net.IPNet
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	ExcludedIPRanges            []*net.IPNet
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	PermittedEmailAddresses     []string
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	ExcludedEmailAddresses      []string
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	PermittedURIDomains         []string
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	ExcludedURIDomains          []string
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	<span class="comment">// CRL Distribution Points</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	CRLDistributionPoints []string
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	<span class="comment">// PolicyIdentifiers contains asn1.ObjectIdentifiers, the components</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	<span class="comment">// of which are limited to int32. If a certificate contains a policy which</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	<span class="comment">// cannot be represented by asn1.ObjectIdentifier, it will not be included in</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	<span class="comment">// PolicyIdentifiers, but will be present in Policies, which contains all parsed</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	<span class="comment">// policy OIDs.</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	PolicyIdentifiers []asn1.ObjectIdentifier
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	<span class="comment">// Policies contains all policy identifiers included in the certificate.</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	<span class="comment">// In Go 1.22, encoding/gob cannot handle and ignores this field.</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	Policies []OID
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span><span class="comment">// ErrUnsupportedAlgorithm results from attempting to perform an operation that</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span><span class="comment">// involves algorithms that are not currently implemented.</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>var ErrUnsupportedAlgorithm = errors.New(&#34;x509: cannot verify signature: algorithm unimplemented&#34;)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span><span class="comment">// An InsecureAlgorithmError indicates that the [SignatureAlgorithm] used to</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span><span class="comment">// generate the signature is not secure, and the signature has been rejected.</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// To temporarily restore support for SHA-1 signatures, include the value</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// &#34;x509sha1=1&#34; in the GODEBUG environment variable. Note that this option will</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span><span class="comment">// be removed in a future release.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>type InsecureAlgorithmError SignatureAlgorithm
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>func (e InsecureAlgorithmError) Error() string {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	var override string
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	if SignatureAlgorithm(e) == SHA1WithRSA || SignatureAlgorithm(e) == ECDSAWithSHA1 {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		override = &#34; (temporarily override with GODEBUG=x509sha1=1)&#34;
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;x509: cannot verify signature: insecure algorithm %v&#34;, SignatureAlgorithm(e)) + override
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// ConstraintViolationError results when a requested usage is not permitted by</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// a certificate. For example: checking a signature when the public key isn&#39;t a</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">// certificate signing key.</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>type ConstraintViolationError struct{}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>func (ConstraintViolationError) Error() string {
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	return &#34;x509: invalid signature: parent certificate cannot sign this kind of certificate&#34;
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>func (c *Certificate) Equal(other *Certificate) bool {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if c == nil || other == nil {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		return c == other
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	return bytes.Equal(c.Raw, other.Raw)
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func (c *Certificate) hasSANExtension() bool {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	return oidInExtensions(oidExtensionSubjectAltName, c.Extensions)
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>}
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span><span class="comment">// CheckSignatureFrom verifies that the signature on c is a valid signature from parent.</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// This is a low-level API that performs very limited checks, and not a full</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">// path verifier. Most users should use [Certificate.Verify] instead.</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>func (c *Certificate) CheckSignatureFrom(parent *Certificate) error {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	<span class="comment">// RFC 5280, 4.2.1.9:</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	<span class="comment">// &#34;If the basic constraints extension is not present in a version 3</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	<span class="comment">// certificate, or the extension is present but the cA boolean is not</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	<span class="comment">// asserted, then the certified public key MUST NOT be used to verify</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	<span class="comment">// certificate signatures.&#34;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	if parent.Version == 3 &amp;&amp; !parent.BasicConstraintsValid ||
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		parent.BasicConstraintsValid &amp;&amp; !parent.IsCA {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		return ConstraintViolationError{}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	}
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	if parent.KeyUsage != 0 &amp;&amp; parent.KeyUsage&amp;KeyUsageCertSign == 0 {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		return ConstraintViolationError{}
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	if parent.PublicKeyAlgorithm == UnknownPublicKeyAlgorithm {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		return ErrUnsupportedAlgorithm
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	return checkSignature(c.SignatureAlgorithm, c.RawTBSCertificate, c.Signature, parent.PublicKey, false)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>
<span id="L853" class="ln">   853&nbsp;&nbsp;</span><span class="comment">// CheckSignature verifies that signature is a valid signature over signed from</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span><span class="comment">// c&#39;s public key.</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span><span class="comment">// This is a low-level API that performs no validity checks on the certificate.</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span><span class="comment">// [MD5WithRSA] signatures are rejected, while [SHA1WithRSA] and [ECDSAWithSHA1]</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span><span class="comment">// signatures are currently accepted.</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>func (c *Certificate) CheckSignature(algo SignatureAlgorithm, signed, signature []byte) error {
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	return checkSignature(algo, signed, signature, c.PublicKey, true)
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>func (c *Certificate) hasNameConstraints() bool {
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	return oidInExtensions(oidExtensionNameConstraints, c.Extensions)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>}
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>func (c *Certificate) getSANExtension() []byte {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	for _, e := range c.Extensions {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		if e.Id.Equal(oidExtensionSubjectAltName) {
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>			return e.Value
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	}
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	return nil
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>func signaturePublicKeyAlgoMismatchError(expectedPubKeyAlgo PublicKeyAlgorithm, pubKey any) error {
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	return fmt.Errorf(&#34;x509: signature algorithm specifies an %s public key, but have public key of type %T&#34;, expectedPubKeyAlgo.String(), pubKey)
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>}
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>var x509sha1 = godebug.New(&#34;x509sha1&#34;)
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// checkSignature verifies that signature is a valid signature over signed from</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// a crypto.PublicKey.</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>func checkSignature(algo SignatureAlgorithm, signed, signature []byte, publicKey crypto.PublicKey, allowSHA1 bool) (err error) {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	var hashType crypto.Hash
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	var pubKeyAlgo PublicKeyAlgorithm
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	for _, details := range signatureAlgorithmDetails {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		if details.algo == algo {
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>			hashType = details.hash
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			pubKeyAlgo = details.pubKeyAlgo
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>			break
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	switch hashType {
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>	case crypto.Hash(0):
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		if pubKeyAlgo != Ed25519 {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			return ErrUnsupportedAlgorithm
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	case crypto.MD5:
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>		return InsecureAlgorithmError(algo)
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	case crypto.SHA1:
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		<span class="comment">// SHA-1 signatures are mostly disabled. See go.dev/issue/41682.</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		if !allowSHA1 {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>			if x509sha1.Value() != &#34;1&#34; {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>				return InsecureAlgorithmError(algo)
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>			x509sha1.IncNonDefault()
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		fallthrough
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	default:
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		if !hashType.Available() {
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			return ErrUnsupportedAlgorithm
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		}
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		h := hashType.New()
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		h.Write(signed)
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		signed = h.Sum(nil)
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	switch pub := publicKey.(type) {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	case *rsa.PublicKey:
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		if pubKeyAlgo != RSA {
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>			return signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub)
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		}
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		if algo.isRSAPSS() {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>			return rsa.VerifyPSS(pub, hashType, signed, signature, &amp;rsa.PSSOptions{SaltLength: rsa.PSSSaltLengthEqualsHash})
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		} else {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>			return rsa.VerifyPKCS1v15(pub, hashType, signed, signature)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	case *ecdsa.PublicKey:
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		if pubKeyAlgo != ECDSA {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>			return signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub)
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>		}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		if !ecdsa.VerifyASN1(pub, signed, signature) {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>			return errors.New(&#34;x509: ECDSA verification failure&#34;)
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		}
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		return
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	case ed25519.PublicKey:
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>		if pubKeyAlgo != Ed25519 {
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			return signaturePublicKeyAlgoMismatchError(pubKeyAlgo, pub)
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>		if !ed25519.Verify(pub, signed, signature) {
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>			return errors.New(&#34;x509: Ed25519 verification failure&#34;)
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		return
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	return ErrUnsupportedAlgorithm
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span><span class="comment">// CheckCRLSignature checks that the signature in crl is from c.</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [RevocationList.CheckSignatureFrom] instead.</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>func (c *Certificate) CheckCRLSignature(crl *pkix.CertificateList) error {
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	algo := getSignatureAlgorithmFromAI(crl.SignatureAlgorithm)
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	return c.CheckSignature(algo, crl.TBSCertList.Raw, crl.SignatureValue.RightAlign())
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>}
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>type UnhandledCriticalExtension struct{}
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>func (h UnhandledCriticalExtension) Error() string {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	return &#34;x509: unhandled critical extension&#34;
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>type basicConstraints struct {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	IsCA       bool `asn1:&#34;optional&#34;`
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	MaxPathLen int  `asn1:&#34;optional,default:-1&#34;`
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>}
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span><span class="comment">// RFC 5280 4.2.1.4</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>type policyInformation struct {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	Policy asn1.ObjectIdentifier
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	<span class="comment">// policyQualifiers omitted</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>const (
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	nameTypeEmail = 1
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	nameTypeDNS   = 2
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	nameTypeURI   = 6
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	nameTypeIP    = 7
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>)
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span><span class="comment">// RFC 5280, 4.2.2.1</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>type authorityInfoAccess struct {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	Method   asn1.ObjectIdentifier
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	Location asn1.RawValue
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span><span class="comment">// RFC 5280, 4.2.1.14</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>type distributionPoint struct {
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	DistributionPoint distributionPointName `asn1:&#34;optional,tag:0&#34;`
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	Reason            asn1.BitString        `asn1:&#34;optional,tag:1&#34;`
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	CRLIssuer         asn1.RawValue         `asn1:&#34;optional,tag:2&#34;`
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>}
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>type distributionPointName struct {
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	FullName     []asn1.RawValue  `asn1:&#34;optional,tag:0&#34;`
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	RelativeName pkix.RDNSequence `asn1:&#34;optional,tag:1&#34;`
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>}
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>func reverseBitsInAByte(in byte) byte {
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	b1 := in&gt;&gt;4 | in&lt;&lt;4
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	b2 := b1&gt;&gt;2&amp;0x33 | b1&lt;&lt;2&amp;0xcc
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	b3 := b2&gt;&gt;1&amp;0x55 | b2&lt;&lt;1&amp;0xaa
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	return b3
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// asn1BitLength returns the bit-length of bitString by considering the</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span><span class="comment">// most-significant bit in a byte to be the &#34;first&#34; bit. This convention</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">// matches ASN.1, but differs from almost everything else.</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>func asn1BitLength(bitString []byte) int {
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	bitLen := len(bitString) * 8
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	for i := range bitString {
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>		b := bitString[len(bitString)-i-1]
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		for bit := uint(0); bit &lt; 8; bit++ {
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>			if (b&gt;&gt;bit)&amp;1 == 1 {
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>				return bitLen
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>			}
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>			bitLen--
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		}
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	}
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	return 0
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>}
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>var (
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	oidExtensionSubjectKeyId          = []int{2, 5, 29, 14}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	oidExtensionKeyUsage              = []int{2, 5, 29, 15}
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	oidExtensionExtendedKeyUsage      = []int{2, 5, 29, 37}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	oidExtensionAuthorityKeyId        = []int{2, 5, 29, 35}
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	oidExtensionBasicConstraints      = []int{2, 5, 29, 19}
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	oidExtensionSubjectAltName        = []int{2, 5, 29, 17}
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	oidExtensionCertificatePolicies   = []int{2, 5, 29, 32}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	oidExtensionNameConstraints       = []int{2, 5, 29, 30}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	oidExtensionCRLDistributionPoints = []int{2, 5, 29, 31}
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	oidExtensionAuthorityInfoAccess   = []int{1, 3, 6, 1, 5, 5, 7, 1, 1}
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	oidExtensionCRLNumber             = []int{2, 5, 29, 20}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	oidExtensionReasonCode            = []int{2, 5, 29, 21}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>var (
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	oidAuthorityInfoAccessOcsp    = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 1}
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	oidAuthorityInfoAccessIssuers = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 2}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span><span class="comment">// oidInExtensions reports whether an extension with the given oid exists in</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span><span class="comment">// extensions.</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>func oidInExtensions(oid asn1.ObjectIdentifier, extensions []pkix.Extension) bool {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	for _, e := range extensions {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		if e.Id.Equal(oid) {
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>			return true
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>		}
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	}
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	return false
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>}
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span><span class="comment">// marshalSANs marshals a list of addresses into a the contents of an X.509</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span><span class="comment">// SubjectAlternativeName extension.</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>func marshalSANs(dnsNames, emailAddresses []string, ipAddresses []net.IP, uris []*url.URL) (derBytes []byte, err error) {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	var rawValues []asn1.RawValue
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	for _, name := range dnsNames {
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		if err := isIA5String(name); err != nil {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>			return nil, err
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>		}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		rawValues = append(rawValues, asn1.RawValue{Tag: nameTypeDNS, Class: 2, Bytes: []byte(name)})
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	for _, email := range emailAddresses {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		if err := isIA5String(email); err != nil {
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			return nil, err
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		rawValues = append(rawValues, asn1.RawValue{Tag: nameTypeEmail, Class: 2, Bytes: []byte(email)})
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	for _, rawIP := range ipAddresses {
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>		<span class="comment">// If possible, we always want to encode IPv4 addresses in 4 bytes.</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		ip := rawIP.To4()
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		if ip == nil {
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>			ip = rawIP
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		}
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		rawValues = append(rawValues, asn1.RawValue{Tag: nameTypeIP, Class: 2, Bytes: ip})
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	}
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	for _, uri := range uris {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		uriStr := uri.String()
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		if err := isIA5String(uriStr); err != nil {
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>			return nil, err
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>		rawValues = append(rawValues, asn1.RawValue{Tag: nameTypeURI, Class: 2, Bytes: []byte(uriStr)})
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	}
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	return asn1.Marshal(rawValues)
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>func isIA5String(s string) error {
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	for _, r := range s {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		<span class="comment">// Per RFC5280 &#34;IA5String is limited to the set of ASCII characters&#34;</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		if r &gt; unicode.MaxASCII {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;x509: %q cannot be encoded as an IA5String&#34;, s)
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>		}
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	}
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	return nil
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>}
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>var usePoliciesField = godebug.New(&#34;x509usepolicies&#34;)
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>func buildCertExtensions(template *Certificate, subjectIsEmpty bool, authorityKeyId []byte, subjectKeyId []byte) (ret []pkix.Extension, err error) {
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	ret = make([]pkix.Extension, 10 <span class="comment">/* maximum number of elements. */</span>)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	n := 0
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	if template.KeyUsage != 0 &amp;&amp;
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionKeyUsage, template.ExtraExtensions) {
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		ret[n], err = marshalKeyUsage(template.KeyUsage)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>		if err != nil {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			return nil, err
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>		}
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>		n++
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	}
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	if (len(template.ExtKeyUsage) &gt; 0 || len(template.UnknownExtKeyUsage) &gt; 0) &amp;&amp;
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionExtendedKeyUsage, template.ExtraExtensions) {
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		ret[n], err = marshalExtKeyUsage(template.ExtKeyUsage, template.UnknownExtKeyUsage)
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		if err != nil {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>			return nil, err
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		}
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		n++
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	if template.BasicConstraintsValid &amp;&amp; !oidInExtensions(oidExtensionBasicConstraints, template.ExtraExtensions) {
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>		ret[n], err = marshalBasicConstraints(template.IsCA, template.MaxPathLen, template.MaxPathLenZero)
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		if err != nil {
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>			return nil, err
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>		}
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		n++
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	}
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	if len(subjectKeyId) &gt; 0 &amp;&amp; !oidInExtensions(oidExtensionSubjectKeyId, template.ExtraExtensions) {
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionSubjectKeyId
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>		ret[n].Value, err = asn1.Marshal(subjectKeyId)
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		if err != nil {
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>			return
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		}
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		n++
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	if len(authorityKeyId) &gt; 0 &amp;&amp; !oidInExtensions(oidExtensionAuthorityKeyId, template.ExtraExtensions) {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionAuthorityKeyId
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		ret[n].Value, err = asn1.Marshal(authKeyId{authorityKeyId})
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>		if err != nil {
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>			return
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>		}
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		n++
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	}
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	if (len(template.OCSPServer) &gt; 0 || len(template.IssuingCertificateURL) &gt; 0) &amp;&amp;
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionAuthorityInfoAccess, template.ExtraExtensions) {
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionAuthorityInfoAccess
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		var aiaValues []authorityInfoAccess
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>		for _, name := range template.OCSPServer {
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>			aiaValues = append(aiaValues, authorityInfoAccess{
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>				Method:   oidAuthorityInfoAccessOcsp,
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>				Location: asn1.RawValue{Tag: 6, Class: 2, Bytes: []byte(name)},
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			})
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>		}
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		for _, name := range template.IssuingCertificateURL {
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			aiaValues = append(aiaValues, authorityInfoAccess{
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>				Method:   oidAuthorityInfoAccessIssuers,
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>				Location: asn1.RawValue{Tag: 6, Class: 2, Bytes: []byte(name)},
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			})
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		}
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		ret[n].Value, err = asn1.Marshal(aiaValues)
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		if err != nil {
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>			return
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		}
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		n++
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	}
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	if (len(template.DNSNames) &gt; 0 || len(template.EmailAddresses) &gt; 0 || len(template.IPAddresses) &gt; 0 || len(template.URIs) &gt; 0) &amp;&amp;
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionSubjectAltName, template.ExtraExtensions) {
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionSubjectAltName
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		<span class="comment">// From RFC 5280, Section 4.2.1.6:</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>		<span class="comment">// “If the subject field contains an empty sequence ... then</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		<span class="comment">// subjectAltName extension ... is marked as critical”</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		ret[n].Critical = subjectIsEmpty
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		ret[n].Value, err = marshalSANs(template.DNSNames, template.EmailAddresses, template.IPAddresses, template.URIs)
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		if err != nil {
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>			return
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		}
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		n++
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	}
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	usePolicies := usePoliciesField.Value() == &#34;1&#34;
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	if ((!usePolicies &amp;&amp; len(template.PolicyIdentifiers) &gt; 0) || (usePolicies &amp;&amp; len(template.Policies) &gt; 0)) &amp;&amp;
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionCertificatePolicies, template.ExtraExtensions) {
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		ret[n], err = marshalCertificatePolicies(template.Policies, template.PolicyIdentifiers)
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>		if err != nil {
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>			return nil, err
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		n++
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	}
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	if (len(template.PermittedDNSDomains) &gt; 0 || len(template.ExcludedDNSDomains) &gt; 0 ||
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>		len(template.PermittedIPRanges) &gt; 0 || len(template.ExcludedIPRanges) &gt; 0 ||
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>		len(template.PermittedEmailAddresses) &gt; 0 || len(template.ExcludedEmailAddresses) &gt; 0 ||
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		len(template.PermittedURIDomains) &gt; 0 || len(template.ExcludedURIDomains) &gt; 0) &amp;&amp;
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionNameConstraints, template.ExtraExtensions) {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionNameConstraints
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		ret[n].Critical = template.PermittedDNSDomainsCritical
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		ipAndMask := func(ipNet *net.IPNet) []byte {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>			maskedIP := ipNet.IP.Mask(ipNet.Mask)
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>			ipAndMask := make([]byte, 0, len(maskedIP)+len(ipNet.Mask))
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>			ipAndMask = append(ipAndMask, maskedIP...)
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>			ipAndMask = append(ipAndMask, ipNet.Mask...)
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>			return ipAndMask
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>		}
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		serialiseConstraints := func(dns []string, ips []*net.IPNet, emails []string, uriDomains []string) (der []byte, err error) {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>			var b cryptobyte.Builder
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			for _, name := range dns {
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>				if err = isIA5String(name); err != nil {
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>					return nil, err
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>				}
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>					b.AddASN1(cryptobyte_asn1.Tag(2).ContextSpecific(), func(b *cryptobyte.Builder) {
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>						b.AddBytes([]byte(name))
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>					})
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>				})
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>			}
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			for _, ipNet := range ips {
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>					b.AddASN1(cryptobyte_asn1.Tag(7).ContextSpecific(), func(b *cryptobyte.Builder) {
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>						b.AddBytes(ipAndMask(ipNet))
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>					})
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>				})
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>			}
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>			for _, email := range emails {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>				if err = isIA5String(email); err != nil {
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>					return nil, err
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>				}
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>					b.AddASN1(cryptobyte_asn1.Tag(1).ContextSpecific(), func(b *cryptobyte.Builder) {
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>						b.AddBytes([]byte(email))
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>					})
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>				})
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>			}
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			for _, uriDomain := range uriDomains {
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>				if err = isIA5String(uriDomain); err != nil {
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>					return nil, err
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>				}
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>					b.AddASN1(cryptobyte_asn1.Tag(6).ContextSpecific(), func(b *cryptobyte.Builder) {
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>						b.AddBytes([]byte(uriDomain))
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>					})
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>				})
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>			}
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>			return b.Bytes()
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		}
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>		permitted, err := serialiseConstraints(template.PermittedDNSDomains, template.PermittedIPRanges, template.PermittedEmailAddresses, template.PermittedURIDomains)
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		if err != nil {
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>			return nil, err
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		}
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>		excluded, err := serialiseConstraints(template.ExcludedDNSDomains, template.ExcludedIPRanges, template.ExcludedEmailAddresses, template.ExcludedURIDomains)
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		if err != nil {
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>			return nil, err
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>		}
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>		var b cryptobyte.Builder
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		b.AddASN1(cryptobyte_asn1.SEQUENCE, func(b *cryptobyte.Builder) {
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>			if len(permitted) &gt; 0 {
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.Tag(0).ContextSpecific().Constructed(), func(b *cryptobyte.Builder) {
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>					b.AddBytes(permitted)
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>				})
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>			}
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>			if len(excluded) &gt; 0 {
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>				b.AddASN1(cryptobyte_asn1.Tag(1).ContextSpecific().Constructed(), func(b *cryptobyte.Builder) {
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>					b.AddBytes(excluded)
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>				})
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>			}
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>		})
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>		ret[n].Value, err = b.Bytes()
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>		if err != nil {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>			return nil, err
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>		}
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>		n++
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>	}
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	if len(template.CRLDistributionPoints) &gt; 0 &amp;&amp;
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionCRLDistributionPoints, template.ExtraExtensions) {
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>		ret[n].Id = oidExtensionCRLDistributionPoints
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>		var crlDp []distributionPoint
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>		for _, name := range template.CRLDistributionPoints {
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>			dp := distributionPoint{
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>				DistributionPoint: distributionPointName{
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>					FullName: []asn1.RawValue{
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>						{Tag: 6, Class: 2, Bytes: []byte(name)},
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>					},
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>				},
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>			}
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>			crlDp = append(crlDp, dp)
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>		}
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>		ret[n].Value, err = asn1.Marshal(crlDp)
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>		if err != nil {
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>			return
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>		}
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>		n++
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	<span class="comment">// Adding another extension here? Remember to update the maximum number</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	<span class="comment">// of elements in the make() at the top of the function and the list of</span>
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	<span class="comment">// template fields used in CreateCertificate documentation.</span>
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>	return append(ret[:n], template.ExtraExtensions...), nil
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>}
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>func marshalKeyUsage(ku KeyUsage) (pkix.Extension, error) {
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	ext := pkix.Extension{Id: oidExtensionKeyUsage, Critical: true}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>	var a [2]byte
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	a[0] = reverseBitsInAByte(byte(ku))
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>	a[1] = reverseBitsInAByte(byte(ku &gt;&gt; 8))
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>	l := 1
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>	if a[1] != 0 {
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>		l = 2
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	}
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	bitString := a[:l]
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	var err error
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>	ext.Value, err = asn1.Marshal(asn1.BitString{Bytes: bitString, BitLength: asn1BitLength(bitString)})
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	return ext, err
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>}
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>func marshalExtKeyUsage(extUsages []ExtKeyUsage, unknownUsages []asn1.ObjectIdentifier) (pkix.Extension, error) {
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>	ext := pkix.Extension{Id: oidExtensionExtendedKeyUsage}
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	oids := make([]asn1.ObjectIdentifier, len(extUsages)+len(unknownUsages))
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	for i, u := range extUsages {
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		if oid, ok := oidFromExtKeyUsage(u); ok {
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>			oids[i] = oid
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		} else {
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>			return ext, errors.New(&#34;x509: unknown extended key usage&#34;)
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>		}
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>	}
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>	copy(oids[len(extUsages):], unknownUsages)
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	var err error
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>	ext.Value, err = asn1.Marshal(oids)
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	return ext, err
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>}
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>func marshalBasicConstraints(isCA bool, maxPathLen int, maxPathLenZero bool) (pkix.Extension, error) {
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>	ext := pkix.Extension{Id: oidExtensionBasicConstraints, Critical: true}
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	<span class="comment">// Leaving MaxPathLen as zero indicates that no maximum path</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>	<span class="comment">// length is desired, unless MaxPathLenZero is set. A value of</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	<span class="comment">// -1 causes encoding/asn1 to omit the value as desired.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	if maxPathLen == 0 &amp;&amp; !maxPathLenZero {
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>		maxPathLen = -1
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>	}
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	var err error
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>	ext.Value, err = asn1.Marshal(basicConstraints{isCA, maxPathLen})
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	return ext, err
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>}
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>func marshalCertificatePolicies(policies []OID, policyIdentifiers []asn1.ObjectIdentifier) (pkix.Extension, error) {
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	ext := pkix.Extension{Id: oidExtensionCertificatePolicies}
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	b := cryptobyte.NewBuilder(make([]byte, 0, 128))
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	b.AddASN1(cryptobyte_asn1.SEQUENCE, func(child *cryptobyte.Builder) {
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>		if usePoliciesField.Value() == &#34;1&#34; {
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>			usePoliciesField.IncNonDefault()
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>			for _, v := range policies {
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>				child.AddASN1(cryptobyte_asn1.SEQUENCE, func(child *cryptobyte.Builder) {
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>					child.AddASN1(cryptobyte_asn1.OBJECT_IDENTIFIER, func(child *cryptobyte.Builder) {
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>						if len(v.der) == 0 {
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>							child.SetError(errors.New(&#34;invalid policy object identifier&#34;))
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>							return
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>						}
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>						child.AddBytes(v.der)
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>					})
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>				})
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>			}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>		} else {
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>			for _, v := range policyIdentifiers {
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>				child.AddASN1(cryptobyte_asn1.SEQUENCE, func(child *cryptobyte.Builder) {
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>					child.AddASN1ObjectIdentifier(v)
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>				})
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>			}
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>		}
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	})
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	var err error
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>	ext.Value, err = b.Bytes()
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>	return ext, err
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>func buildCSRExtensions(template *CertificateRequest) ([]pkix.Extension, error) {
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>	var ret []pkix.Extension
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	if (len(template.DNSNames) &gt; 0 || len(template.EmailAddresses) &gt; 0 || len(template.IPAddresses) &gt; 0 || len(template.URIs) &gt; 0) &amp;&amp;
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>		!oidInExtensions(oidExtensionSubjectAltName, template.ExtraExtensions) {
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		sanBytes, err := marshalSANs(template.DNSNames, template.EmailAddresses, template.IPAddresses, template.URIs)
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>		if err != nil {
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>			return nil, err
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>		}
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>		ret = append(ret, pkix.Extension{
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>			Id:    oidExtensionSubjectAltName,
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>			Value: sanBytes,
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>		})
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>	}
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	return append(ret, template.ExtraExtensions...), nil
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>}
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>func subjectBytes(cert *Certificate) ([]byte, error) {
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	if len(cert.RawSubject) &gt; 0 {
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>		return cert.RawSubject, nil
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	}
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>	return asn1.Marshal(cert.Subject.ToRDNSequence())
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>}
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// signingParamsForPublicKey returns the parameters to use for signing with</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span><span class="comment">// priv. If requestedSigAlgo is not zero then it overrides the default</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span><span class="comment">// signature algorithm.</span>
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>func signingParamsForPublicKey(pub any, requestedSigAlgo SignatureAlgorithm) (hashFunc crypto.Hash, sigAlgo pkix.AlgorithmIdentifier, err error) {
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>	var pubType PublicKeyAlgorithm
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	switch pub := pub.(type) {
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>	case *rsa.PublicKey:
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>		pubType = RSA
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>		hashFunc = crypto.SHA256
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>		sigAlgo.Algorithm = oidSignatureSHA256WithRSA
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>		sigAlgo.Parameters = asn1.NullRawValue
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	case *ecdsa.PublicKey:
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		pubType = ECDSA
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>		switch pub.Curve {
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>		case elliptic.P224(), elliptic.P256():
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>			hashFunc = crypto.SHA256
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>			sigAlgo.Algorithm = oidSignatureECDSAWithSHA256
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>		case elliptic.P384():
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>			hashFunc = crypto.SHA384
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>			sigAlgo.Algorithm = oidSignatureECDSAWithSHA384
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>		case elliptic.P521():
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>			hashFunc = crypto.SHA512
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>			sigAlgo.Algorithm = oidSignatureECDSAWithSHA512
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>		default:
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>			err = errors.New(&#34;x509: unknown elliptic curve&#34;)
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>		}
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	case ed25519.PublicKey:
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>		pubType = Ed25519
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>		sigAlgo.Algorithm = oidSignatureEd25519
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>	default:
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		err = errors.New(&#34;x509: only RSA, ECDSA and Ed25519 keys supported&#34;)
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>	}
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	if err != nil {
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>		return
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>	}
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>	if requestedSigAlgo == 0 {
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>		return
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>	}
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>	found := false
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	for _, details := range signatureAlgorithmDetails {
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>		if details.algo == requestedSigAlgo {
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>			if details.pubKeyAlgo != pubType {
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>				err = errors.New(&#34;x509: requested SignatureAlgorithm does not match private key type&#34;)
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>				return
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>			}
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>			sigAlgo.Algorithm, hashFunc = details.oid, details.hash
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>			if hashFunc == 0 &amp;&amp; pubType != Ed25519 {
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>				err = errors.New(&#34;x509: cannot sign with hash function requested&#34;)
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>				return
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>			}
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>			if hashFunc == crypto.MD5 {
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>				err = errors.New(&#34;x509: signing with MD5 is not supported&#34;)
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>				return
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>			}
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>			if requestedSigAlgo.isRSAPSS() {
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>				sigAlgo.Parameters = hashToPSSParameters[hashFunc]
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>			}
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>			found = true
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>			break
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>		}
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	}
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	if !found {
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>		err = errors.New(&#34;x509: unknown SignatureAlgorithm&#34;)
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	}
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	return
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>}
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span><span class="comment">// emptyASN1Subject is the ASN.1 DER encoding of an empty Subject, which is</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span><span class="comment">// just an empty SEQUENCE.</span>
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>var emptyASN1Subject = []byte{0x30, 0}
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span><span class="comment">// CreateCertificate creates a new X.509 v3 certificate based on a template.</span>
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span><span class="comment">// The following members of template are currently used:</span>
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span><span class="comment">//   - AuthorityKeyId</span>
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span><span class="comment">//   - BasicConstraintsValid</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span><span class="comment">//   - CRLDistributionPoints</span>
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span><span class="comment">//   - DNSNames</span>
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span><span class="comment">//   - EmailAddresses</span>
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span><span class="comment">//   - ExcludedDNSDomains</span>
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span><span class="comment">//   - ExcludedEmailAddresses</span>
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span><span class="comment">//   - ExcludedIPRanges</span>
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span><span class="comment">//   - ExcludedURIDomains</span>
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span><span class="comment">//   - ExtKeyUsage</span>
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span><span class="comment">//   - ExtraExtensions</span>
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span><span class="comment">//   - IPAddresses</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span><span class="comment">//   - IsCA</span>
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span><span class="comment">//   - IssuingCertificateURL</span>
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span><span class="comment">//   - KeyUsage</span>
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span><span class="comment">//   - MaxPathLen</span>
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span><span class="comment">//   - MaxPathLenZero</span>
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span><span class="comment">//   - NotAfter</span>
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span><span class="comment">//   - NotBefore</span>
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span><span class="comment">//   - OCSPServer</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span><span class="comment">//   - PermittedDNSDomains</span>
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span><span class="comment">//   - PermittedDNSDomainsCritical</span>
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span><span class="comment">//   - PermittedEmailAddresses</span>
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span><span class="comment">//   - PermittedIPRanges</span>
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span><span class="comment">//   - PermittedURIDomains</span>
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span><span class="comment">//   - PolicyIdentifiers (see note below)</span>
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span><span class="comment">//   - Policies (see note below)</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span><span class="comment">//   - SerialNumber</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span><span class="comment">//   - SignatureAlgorithm</span>
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span><span class="comment">//   - Subject</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span><span class="comment">//   - SubjectKeyId</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span><span class="comment">//   - URIs</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span><span class="comment">//   - UnknownExtKeyUsage</span>
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span><span class="comment">// The certificate is signed by parent. If parent is equal to template then the</span>
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span><span class="comment">// certificate is self-signed. The parameter pub is the public key of the</span>
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span><span class="comment">// certificate to be generated and priv is the private key of the signer.</span>
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span><span class="comment">// The returned slice is the certificate in DER encoding.</span>
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span><span class="comment">// The currently supported key types are *rsa.PublicKey, *ecdsa.PublicKey and</span>
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span><span class="comment">// ed25519.PublicKey. pub must be a supported key type, and priv must be a</span>
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span><span class="comment">// crypto.Signer with a supported public key.</span>
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span><span class="comment">// The AuthorityKeyId will be taken from the SubjectKeyId of parent, if any,</span>
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span><span class="comment">// unless the resulting certificate is self-signed. Otherwise the value from</span>
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span><span class="comment">// template will be used.</span>
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span><span class="comment">// If SubjectKeyId from template is empty and the template is a CA, SubjectKeyId</span>
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span><span class="comment">// will be generated from the hash of the public key.</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span><span class="comment">// The PolicyIdentifier and Policies fields are both used to marshal certificate</span>
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span><span class="comment">// policy OIDs. By default, only the PolicyIdentifier is marshaled, but if the</span>
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span><span class="comment">// GODEBUG setting &#34;x509usepolicies&#34; has the value &#34;1&#34;, the Policies field will</span>
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span><span class="comment">// be marshalled instead of the PolicyIdentifier field. The Policies field can</span>
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span><span class="comment">// be used to marshal policy OIDs which have components that are larger than 31</span>
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span><span class="comment">// bits.</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>func CreateCertificate(rand io.Reader, template, parent *Certificate, pub, priv any) ([]byte, error) {
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>	key, ok := priv.(crypto.Signer)
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>	if !ok {
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: certificate private key does not implement crypto.Signer&#34;)
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>	}
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>	if template.SerialNumber == nil {
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: no SerialNumber given&#34;)
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>	}
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>	<span class="comment">// RFC 5280 Section 4.1.2.2: serial number must positive</span>
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>	<span class="comment">// We _should_ also restrict serials to &lt;= 20 octets, but it turns out a lot of people</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>	<span class="comment">// get this wrong, in part because the encoding can itself alter the length of the</span>
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>	<span class="comment">// serial. For now we accept these non-conformant serials.</span>
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>	if template.SerialNumber.Sign() == -1 {
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: serial number must be positive&#34;)
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>	}
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>	if template.BasicConstraintsValid &amp;&amp; !template.IsCA &amp;&amp; template.MaxPathLen != -1 &amp;&amp; (template.MaxPathLen != 0 || template.MaxPathLenZero) {
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: only CAs are allowed to specify MaxPathLen&#34;)
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>	}
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>	hashFunc, signatureAlgorithm, err := signingParamsForPublicKey(key.Public(), template.SignatureAlgorithm)
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>	if err != nil {
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>		return nil, err
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>	}
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>	publicKeyBytes, publicKeyAlgorithm, err := marshalPublicKey(pub)
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>	if err != nil {
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>		return nil, err
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	}
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>	if getPublicKeyAlgorithmFromOID(publicKeyAlgorithm.Algorithm) == UnknownPublicKeyAlgorithm {
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;x509: unsupported public key type: %T&#34;, pub)
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	}
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	asn1Issuer, err := subjectBytes(parent)
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>	if err != nil {
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>		return nil, err
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>	}
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>	asn1Subject, err := subjectBytes(template)
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>	if err != nil {
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>		return nil, err
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>	}
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>	authorityKeyId := template.AuthorityKeyId
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>	if !bytes.Equal(asn1Issuer, asn1Subject) &amp;&amp; len(parent.SubjectKeyId) &gt; 0 {
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>		authorityKeyId = parent.SubjectKeyId
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>	}
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>	subjectKeyId := template.SubjectKeyId
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>	if len(subjectKeyId) == 0 &amp;&amp; template.IsCA {
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>		<span class="comment">// SubjectKeyId generated using method 1 in RFC 5280, Section 4.2.1.2:</span>
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>		<span class="comment">//   (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the</span>
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>		<span class="comment">//   value of the BIT STRING subjectPublicKey (excluding the tag,</span>
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>		<span class="comment">//   length, and number of unused bits).</span>
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>		h := sha1.Sum(publicKeyBytes)
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>		subjectKeyId = h[:]
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>	}
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>	<span class="comment">// Check that the signer&#39;s public key matches the private key, if available.</span>
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>	type privateKey interface {
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>		Equal(crypto.PublicKey) bool
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>	}
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>	if privPub, ok := key.Public().(privateKey); !ok {
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: internal error: supported public key does not implement Equal&#34;)
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>	} else if parent.PublicKey != nil &amp;&amp; !privPub.Equal(parent.PublicKey) {
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: provided PrivateKey doesn&#39;t match parent&#39;s PublicKey&#34;)
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>	}
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>	extensions, err := buildCertExtensions(template, bytes.Equal(asn1Subject, emptyASN1Subject), authorityKeyId, subjectKeyId)
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>	if err != nil {
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>		return nil, err
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>	}
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>	encodedPublicKey := asn1.BitString{BitLength: len(publicKeyBytes) * 8, Bytes: publicKeyBytes}
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>	c := tbsCertificate{
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>		Version:            2,
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>		SerialNumber:       template.SerialNumber,
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>		SignatureAlgorithm: signatureAlgorithm,
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>		Issuer:             asn1.RawValue{FullBytes: asn1Issuer},
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>		Validity:           validity{template.NotBefore.UTC(), template.NotAfter.UTC()},
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>		Subject:            asn1.RawValue{FullBytes: asn1Subject},
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>		PublicKey:          publicKeyInfo{nil, publicKeyAlgorithm, encodedPublicKey},
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>		Extensions:         extensions,
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>	}
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>	tbsCertContents, err := asn1.Marshal(c)
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>	if err != nil {
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>		return nil, err
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>	}
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>	c.Raw = tbsCertContents
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	signed := tbsCertContents
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>	if hashFunc != 0 {
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>		h := hashFunc.New()
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>		h.Write(signed)
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>		signed = h.Sum(nil)
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>	}
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	var signerOpts crypto.SignerOpts = hashFunc
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>	if template.SignatureAlgorithm != 0 &amp;&amp; template.SignatureAlgorithm.isRSAPSS() {
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>		signerOpts = &amp;rsa.PSSOptions{
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>			SaltLength: rsa.PSSSaltLengthEqualsHash,
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>			Hash:       hashFunc,
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>		}
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>	}
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	var signature []byte
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>	signature, err = key.Sign(rand, signed, signerOpts)
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	if err != nil {
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>		return nil, err
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>	}
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	signedCert, err := asn1.Marshal(certificate{
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>		c,
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>		signatureAlgorithm,
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>		asn1.BitString{Bytes: signature, BitLength: len(signature) * 8},
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>	})
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>	if err != nil {
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>		return nil, err
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>	}
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>	<span class="comment">// Check the signature to ensure the crypto.Signer behaved correctly.</span>
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>	if err := checkSignature(getSignatureAlgorithmFromAI(signatureAlgorithm), c.Raw, signature, key.Public(), true); err != nil {
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;x509: signature over certificate returned by signer is invalid: %w&#34;, err)
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>	}
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>	return signedCert, nil
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>}
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span><span class="comment">// pemCRLPrefix is the magic string that indicates that we have a PEM encoded</span>
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span><span class="comment">// CRL.</span>
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>var pemCRLPrefix = []byte(&#34;-----BEGIN X509 CRL&#34;)
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span><span class="comment">// pemType is the type of a PEM encoded CRL.</span>
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>var pemType = &#34;X509 CRL&#34;
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span><span class="comment">// ParseCRL parses a CRL from the given bytes. It&#39;s often the case that PEM</span>
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span><span class="comment">// encoded CRLs will appear where they should be DER encoded, so this function</span>
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span><span class="comment">// will transparently handle PEM encoding as long as there isn&#39;t any leading</span>
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span><span class="comment">// garbage.</span>
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [ParseRevocationList] instead.</span>
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>func ParseCRL(crlBytes []byte) (*pkix.CertificateList, error) {
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>	if bytes.HasPrefix(crlBytes, pemCRLPrefix) {
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>		block, _ := pem.Decode(crlBytes)
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>		if block != nil &amp;&amp; block.Type == pemType {
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>			crlBytes = block.Bytes
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>		}
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>	}
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	return ParseDERCRL(crlBytes)
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>}
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span><span class="comment">// ParseDERCRL parses a DER encoded CRL from the given bytes.</span>
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [ParseRevocationList] instead.</span>
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>func ParseDERCRL(derBytes []byte) (*pkix.CertificateList, error) {
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>	certList := new(pkix.CertificateList)
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	if rest, err := asn1.Unmarshal(derBytes, certList); err != nil {
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>		return nil, err
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>	} else if len(rest) != 0 {
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: trailing data after CRL&#34;)
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	}
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>	return certList, nil
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>}
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span><span class="comment">// CreateCRL returns a DER encoded CRL, signed by this Certificate, that</span>
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span><span class="comment">// contains the given list of revoked certificates.</span>
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span><span class="comment">// Deprecated: this method does not generate an RFC 5280 conformant X.509 v2 CRL.</span>
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span><span class="comment">// To generate a standards compliant CRL, use [CreateRevocationList] instead.</span>
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>func (c *Certificate) CreateCRL(rand io.Reader, priv any, revokedCerts []pkix.RevokedCertificate, now, expiry time.Time) (crlBytes []byte, err error) {
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>	key, ok := priv.(crypto.Signer)
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>	if !ok {
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: certificate private key does not implement crypto.Signer&#34;)
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>	}
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>	hashFunc, signatureAlgorithm, err := signingParamsForPublicKey(key.Public(), 0)
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>	if err != nil {
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>		return nil, err
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>	}
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>	<span class="comment">// Force revocation times to UTC per RFC 5280.</span>
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>	revokedCertsUTC := make([]pkix.RevokedCertificate, len(revokedCerts))
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>	for i, rc := range revokedCerts {
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>		rc.RevocationTime = rc.RevocationTime.UTC()
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>		revokedCertsUTC[i] = rc
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>	}
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>	tbsCertList := pkix.TBSCertificateList{
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>		Version:             1,
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>		Signature:           signatureAlgorithm,
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>		Issuer:              c.Subject.ToRDNSequence(),
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>		ThisUpdate:          now.UTC(),
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>		NextUpdate:          expiry.UTC(),
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>		RevokedCertificates: revokedCertsUTC,
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>	}
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>	<span class="comment">// Authority Key Id</span>
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>	if len(c.SubjectKeyId) &gt; 0 {
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>		var aki pkix.Extension
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		aki.Id = oidExtensionAuthorityKeyId
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>		aki.Value, err = asn1.Marshal(authKeyId{Id: c.SubjectKeyId})
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>		if err != nil {
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>			return
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		}
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>		tbsCertList.Extensions = append(tbsCertList.Extensions, aki)
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>	}
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>	tbsCertListContents, err := asn1.Marshal(tbsCertList)
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>	if err != nil {
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>		return
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>	}
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>	signed := tbsCertListContents
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>	if hashFunc != 0 {
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>		h := hashFunc.New()
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>		h.Write(signed)
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>		signed = h.Sum(nil)
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>	}
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>	var signature []byte
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>	signature, err = key.Sign(rand, signed, hashFunc)
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	if err != nil {
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>		return
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>	}
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>	return asn1.Marshal(pkix.CertificateList{
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>		TBSCertList:        tbsCertList,
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>		SignatureAlgorithm: signatureAlgorithm,
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>		SignatureValue:     asn1.BitString{Bytes: signature, BitLength: len(signature) * 8},
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>	})
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>}
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span><span class="comment">// CertificateRequest represents a PKCS #10, certificate signature request.</span>
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>type CertificateRequest struct {
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>	Raw                      []byte <span class="comment">// Complete ASN.1 DER content (CSR, signature algorithm and signature).</span>
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>	RawTBSCertificateRequest []byte <span class="comment">// Certificate request info part of raw ASN.1 DER content.</span>
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>	RawSubjectPublicKeyInfo  []byte <span class="comment">// DER encoded SubjectPublicKeyInfo.</span>
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>	RawSubject               []byte <span class="comment">// DER encoded Subject.</span>
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>	Version            int
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>	Signature          []byte
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>	SignatureAlgorithm SignatureAlgorithm
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>	PublicKeyAlgorithm PublicKeyAlgorithm
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>	PublicKey          any
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>	Subject pkix.Name
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>	<span class="comment">// Attributes contains the CSR attributes that can parse as</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>	<span class="comment">// pkix.AttributeTypeAndValueSET.</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use Extensions and ExtraExtensions instead for parsing and</span>
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>	<span class="comment">// generating the requestedExtensions attribute.</span>
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>	Attributes []pkix.AttributeTypeAndValueSET
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>	<span class="comment">// Extensions contains all requested extensions, in raw form. When parsing</span>
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>	<span class="comment">// CSRs, this can be used to extract extensions that are not parsed by this</span>
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>	<span class="comment">// package.</span>
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>	Extensions []pkix.Extension
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	<span class="comment">// ExtraExtensions contains extensions to be copied, raw, into any CSR</span>
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>	<span class="comment">// marshaled by CreateCertificateRequest. Values override any extensions</span>
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>	<span class="comment">// that would otherwise be produced based on the other fields but are</span>
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>	<span class="comment">// overridden by any extensions specified in Attributes.</span>
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>	<span class="comment">// The ExtraExtensions field is not populated by ParseCertificateRequest,</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>	<span class="comment">// see Extensions instead.</span>
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	ExtraExtensions []pkix.Extension
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>	<span class="comment">// Subject Alternate Name values.</span>
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>	DNSNames       []string
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>	EmailAddresses []string
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>	IPAddresses    []net.IP
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span>	URIs           []*url.URL
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>}
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span><span class="comment">// These structures reflect the ASN.1 structure of X.509 certificate</span>
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span><span class="comment">// signature requests (see RFC 2986):</span>
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>type tbsCertificateRequest struct {
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>	Raw           asn1.RawContent
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>	Version       int
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>	Subject       asn1.RawValue
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>	PublicKey     publicKeyInfo
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>	RawAttributes []asn1.RawValue `asn1:&#34;tag:0&#34;`
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>}
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>type certificateRequest struct {
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>	Raw                asn1.RawContent
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>	TBSCSR             tbsCertificateRequest
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>	SignatureAlgorithm pkix.AlgorithmIdentifier
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>	SignatureValue     asn1.BitString
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>}
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span><span class="comment">// oidExtensionRequest is a PKCS #9 OBJECT IDENTIFIER that indicates requested</span>
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span><span class="comment">// extensions in a CSR.</span>
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>var oidExtensionRequest = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 9, 14}
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span><span class="comment">// newRawAttributes converts AttributeTypeAndValueSETs from a template</span>
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span><span class="comment">// CertificateRequest&#39;s Attributes into tbsCertificateRequest RawAttributes.</span>
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>func newRawAttributes(attributes []pkix.AttributeTypeAndValueSET) ([]asn1.RawValue, error) {
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>	var rawAttributes []asn1.RawValue
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>	b, err := asn1.Marshal(attributes)
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>	if err != nil {
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span>		return nil, err
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>	}
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	rest, err := asn1.Unmarshal(b, &amp;rawAttributes)
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>	if err != nil {
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>		return nil, err
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>	}
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>	if len(rest) != 0 {
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: failed to unmarshal raw CSR Attributes&#34;)
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>	}
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>	return rawAttributes, nil
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>}
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span><span class="comment">// parseRawAttributes Unmarshals RawAttributes into AttributeTypeAndValueSETs.</span>
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>func parseRawAttributes(rawAttributes []asn1.RawValue) []pkix.AttributeTypeAndValueSET {
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>	var attributes []pkix.AttributeTypeAndValueSET
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	for _, rawAttr := range rawAttributes {
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>		var attr pkix.AttributeTypeAndValueSET
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>		rest, err := asn1.Unmarshal(rawAttr.FullBytes, &amp;attr)
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>		<span class="comment">// Ignore attributes that don&#39;t parse into pkix.AttributeTypeAndValueSET</span>
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>		<span class="comment">// (i.e.: challengePassword or unstructuredName).</span>
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>		if err == nil &amp;&amp; len(rest) == 0 {
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>			attributes = append(attributes, attr)
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>		}
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>	}
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>	return attributes
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>}
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span><span class="comment">// parseCSRExtensions parses the attributes from a CSR and extracts any</span>
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span><span class="comment">// requested extensions.</span>
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>func parseCSRExtensions(rawAttributes []asn1.RawValue) ([]pkix.Extension, error) {
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>	<span class="comment">// pkcs10Attribute reflects the Attribute structure from RFC 2986, Section 4.1.</span>
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>	type pkcs10Attribute struct {
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>		Id     asn1.ObjectIdentifier
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>		Values []asn1.RawValue `asn1:&#34;set&#34;`
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>	}
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>	var ret []pkix.Extension
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>	requestedExts := make(map[string]bool)
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>	for _, rawAttr := range rawAttributes {
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>		var attr pkcs10Attribute
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>		if rest, err := asn1.Unmarshal(rawAttr.FullBytes, &amp;attr); err != nil || len(rest) != 0 || len(attr.Values) == 0 {
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>			<span class="comment">// Ignore attributes that don&#39;t parse.</span>
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>			continue
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>		}
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>		if !attr.Id.Equal(oidExtensionRequest) {
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>			continue
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>		}
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>		var extensions []pkix.Extension
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>		if _, err := asn1.Unmarshal(attr.Values[0].FullBytes, &amp;extensions); err != nil {
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>			return nil, err
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>		}
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>		for _, ext := range extensions {
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>			oidStr := ext.Id.String()
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>			if requestedExts[oidStr] {
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>				return nil, errors.New(&#34;x509: certificate request contains duplicate requested extensions&#34;)
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>			}
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>			requestedExts[oidStr] = true
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>		}
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>		ret = append(ret, extensions...)
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>	}
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>	return ret, nil
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>}
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span><span class="comment">// CreateCertificateRequest creates a new certificate request based on a</span>
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span><span class="comment">// template. The following members of template are used:</span>
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span><span class="comment">//   - SignatureAlgorithm</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span><span class="comment">//   - Subject</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span><span class="comment">//   - DNSNames</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span><span class="comment">//   - EmailAddresses</span>
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span><span class="comment">//   - IPAddresses</span>
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span><span class="comment">//   - URIs</span>
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span><span class="comment">//   - ExtraExtensions</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span><span class="comment">//   - Attributes (deprecated)</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span><span class="comment">// priv is the private key to sign the CSR with, and the corresponding public</span>
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span><span class="comment">// key will be included in the CSR. It must implement crypto.Signer and its</span>
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span><span class="comment">// Public() method must return a *rsa.PublicKey or a *ecdsa.PublicKey or a</span>
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span><span class="comment">// ed25519.PublicKey. (A *rsa.PrivateKey, *ecdsa.PrivateKey or</span>
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span><span class="comment">// ed25519.PrivateKey satisfies this.)</span>
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span><span class="comment">// The returned slice is the certificate request in DER encoding.</span>
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>func CreateCertificateRequest(rand io.Reader, template *CertificateRequest, priv any) (csr []byte, err error) {
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>	key, ok := priv.(crypto.Signer)
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	if !ok {
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: certificate private key does not implement crypto.Signer&#34;)
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>	}
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>	var hashFunc crypto.Hash
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>	var sigAlgo pkix.AlgorithmIdentifier
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>	hashFunc, sigAlgo, err = signingParamsForPublicKey(key.Public(), template.SignatureAlgorithm)
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>	if err != nil {
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>		return nil, err
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	}
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>	var publicKeyBytes []byte
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>	var publicKeyAlgorithm pkix.AlgorithmIdentifier
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>	publicKeyBytes, publicKeyAlgorithm, err = marshalPublicKey(key.Public())
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>	if err != nil {
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>		return nil, err
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>	}
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>	extensions, err := buildCSRExtensions(template)
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>	if err != nil {
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>		return nil, err
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>	}
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>	<span class="comment">// Make a copy of template.Attributes because we may alter it below.</span>
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>	attributes := make([]pkix.AttributeTypeAndValueSET, 0, len(template.Attributes))
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>	for _, attr := range template.Attributes {
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>		values := make([][]pkix.AttributeTypeAndValue, len(attr.Value))
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>		copy(values, attr.Value)
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>		attributes = append(attributes, pkix.AttributeTypeAndValueSET{
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>			Type:  attr.Type,
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>			Value: values,
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>		})
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>	}
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>	extensionsAppended := false
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>	if len(extensions) &gt; 0 {
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>		<span class="comment">// Append the extensions to an existing attribute if possible.</span>
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>		for _, atvSet := range attributes {
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>			if !atvSet.Type.Equal(oidExtensionRequest) || len(atvSet.Value) == 0 {
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>				continue
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>			}
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>			<span class="comment">// specifiedExtensions contains all the extensions that we</span>
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>			<span class="comment">// found specified via template.Attributes.</span>
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>			specifiedExtensions := make(map[string]bool)
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>			for _, atvs := range atvSet.Value {
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>				for _, atv := range atvs {
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>					specifiedExtensions[atv.Type.String()] = true
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>				}
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>			}
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>			newValue := make([]pkix.AttributeTypeAndValue, 0, len(atvSet.Value[0])+len(extensions))
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>			newValue = append(newValue, atvSet.Value[0]...)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>			for _, e := range extensions {
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>				if specifiedExtensions[e.Id.String()] {
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>					<span class="comment">// Attributes already contained a value for</span>
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>					<span class="comment">// this extension and it takes priority.</span>
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>					continue
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>				}
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>				newValue = append(newValue, pkix.AttributeTypeAndValue{
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>					<span class="comment">// There is no place for the critical</span>
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>					<span class="comment">// flag in an AttributeTypeAndValue.</span>
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>					Type:  e.Id,
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>					Value: e.Value,
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>				})
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>			}
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>			atvSet.Value[0] = newValue
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>			extensionsAppended = true
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>			break
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>		}
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>	}
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>	rawAttributes, err := newRawAttributes(attributes)
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>	if err != nil {
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>		return
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>	}
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>	<span class="comment">// If not included in attributes, add a new attribute for the</span>
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>	<span class="comment">// extensions.</span>
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>	if len(extensions) &gt; 0 &amp;&amp; !extensionsAppended {
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>		attr := struct {
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>			Type  asn1.ObjectIdentifier
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>			Value [][]pkix.Extension `asn1:&#34;set&#34;`
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>		}{
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>			Type:  oidExtensionRequest,
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>			Value: [][]pkix.Extension{extensions},
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>		}
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>		b, err := asn1.Marshal(attr)
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>		if err != nil {
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>			return nil, errors.New(&#34;x509: failed to serialise extensions attribute: &#34; + err.Error())
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>		}
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>		var rawValue asn1.RawValue
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>		if _, err := asn1.Unmarshal(b, &amp;rawValue); err != nil {
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>			return nil, err
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>		}
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>		rawAttributes = append(rawAttributes, rawValue)
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>	}
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>	asn1Subject := template.RawSubject
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>	if len(asn1Subject) == 0 {
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>		asn1Subject, err = asn1.Marshal(template.Subject.ToRDNSequence())
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>		if err != nil {
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>			return nil, err
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>		}
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>	}
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>	tbsCSR := tbsCertificateRequest{
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>		Version: 0, <span class="comment">// PKCS #10, RFC 2986</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>		Subject: asn1.RawValue{FullBytes: asn1Subject},
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>		PublicKey: publicKeyInfo{
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>			Algorithm: publicKeyAlgorithm,
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>			PublicKey: asn1.BitString{
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>				Bytes:     publicKeyBytes,
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>				BitLength: len(publicKeyBytes) * 8,
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>			},
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>		},
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>		RawAttributes: rawAttributes,
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>	}
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	tbsCSRContents, err := asn1.Marshal(tbsCSR)
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	if err != nil {
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>		return
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>	}
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	tbsCSR.Raw = tbsCSRContents
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>	signed := tbsCSRContents
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>	if hashFunc != 0 {
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>		h := hashFunc.New()
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>		h.Write(signed)
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>		signed = h.Sum(nil)
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>	}
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>	var signature []byte
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>	signature, err = key.Sign(rand, signed, hashFunc)
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	if err != nil {
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>		return
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>	}
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>	return asn1.Marshal(certificateRequest{
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>		TBSCSR:             tbsCSR,
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>		SignatureAlgorithm: sigAlgo,
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>		SignatureValue: asn1.BitString{
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>			Bytes:     signature,
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>			BitLength: len(signature) * 8,
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>		},
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>	})
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>}
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span><span class="comment">// ParseCertificateRequest parses a single certificate request from the</span>
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span><span class="comment">// given ASN.1 DER data.</span>
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>func ParseCertificateRequest(asn1Data []byte) (*CertificateRequest, error) {
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>	var csr certificateRequest
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>	rest, err := asn1.Unmarshal(asn1Data, &amp;csr)
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>	if err != nil {
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>		return nil, err
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>	} else if len(rest) != 0 {
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>		return nil, asn1.SyntaxError{Msg: &#34;trailing data&#34;}
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span>	}
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>	return parseCertificateRequest(&amp;csr)
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>}
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>func parseCertificateRequest(in *certificateRequest) (*CertificateRequest, error) {
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span>	out := &amp;CertificateRequest{
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span>		Raw:                      in.Raw,
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span>		RawTBSCertificateRequest: in.TBSCSR.Raw,
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>		RawSubjectPublicKeyInfo:  in.TBSCSR.PublicKey.Raw,
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>		RawSubject:               in.TBSCSR.Subject.FullBytes,
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>		Signature:          in.SignatureValue.RightAlign(),
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>		SignatureAlgorithm: getSignatureAlgorithmFromAI(in.SignatureAlgorithm),
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span>		PublicKeyAlgorithm: getPublicKeyAlgorithmFromOID(in.TBSCSR.PublicKey.Algorithm.Algorithm),
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>		Version:    in.TBSCSR.Version,
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>		Attributes: parseRawAttributes(in.TBSCSR.RawAttributes),
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>	}
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>	var err error
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>	if out.PublicKeyAlgorithm != UnknownPublicKeyAlgorithm {
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>		out.PublicKey, err = parsePublicKey(&amp;in.TBSCSR.PublicKey)
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>		if err != nil {
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span>			return nil, err
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span>		}
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>	}
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>	var subject pkix.RDNSequence
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>	if rest, err := asn1.Unmarshal(in.TBSCSR.Subject.FullBytes, &amp;subject); err != nil {
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>		return nil, err
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>	} else if len(rest) != 0 {
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: trailing data after X.509 Subject&#34;)
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>	}
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>	out.Subject.FillFromRDNSequence(&amp;subject)
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>	if out.Extensions, err = parseCSRExtensions(in.TBSCSR.RawAttributes); err != nil {
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>		return nil, err
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>	}
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>	for _, extension := range out.Extensions {
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>		switch {
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>		case extension.Id.Equal(oidExtensionSubjectAltName):
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>			out.DNSNames, out.EmailAddresses, out.IPAddresses, out.URIs, err = parseSANExtension(extension.Value)
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>			if err != nil {
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>				return nil, err
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>			}
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>		}
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>	}
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>	return out, nil
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>}
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span><span class="comment">// CheckSignature reports whether the signature on c is valid.</span>
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>func (c *CertificateRequest) CheckSignature() error {
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span>	return checkSignature(c.SignatureAlgorithm, c.RawTBSCertificateRequest, c.Signature, c.PublicKey, true)
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span>}
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span><span class="comment">// RevocationListEntry represents an entry in the revokedCertificates</span>
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span><span class="comment">// sequence of a CRL.</span>
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span><span class="selection">type RevocationListEntry struct {
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Raw contains the raw bytes of the revokedCertificates entry. It is set when</span><span class="selection">
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>	</span><span class="selection-comment">// parsing a CRL; it is ignored when generating a CRL.</span><span class="selection">
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>	Raw []byte
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>	</span><span class="selection-comment">// SerialNumber represents the serial number of a revoked certificate. It is</span><span class="selection">
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>	</span><span class="selection-comment">// both used when creating a CRL and populated when parsing a CRL. It must not</span><span class="selection">
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>	</span><span class="selection-comment">// be nil.</span><span class="selection">
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>	SerialNumber *big.Int
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>	</span><span class="selection-comment">// RevocationTime represents the time at which the certificate was revoked. It</span><span class="selection">
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>	</span><span class="selection-comment">// is both used when creating a CRL and populated when parsing a CRL. It must</span><span class="selection">
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>	</span><span class="selection-comment">// not be the zero time.</span><span class="selection">
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>	RevocationTime time.Time
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>	</span><span class="selection-comment">// ReasonCode represents the reason for revocation, using the integer enum</span><span class="selection">
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>	</span><span class="selection-comment">// values specified in RFC 5280 Section 5.3.1. When creating a CRL, the zero</span><span class="selection">
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>	</span><span class="selection-comment">// value will result in the reasonCode extension being omitted. When parsing a</span><span class="selection">
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>	</span><span class="selection-comment">// CRL, the zero value may represent either the reasonCode extension being</span><span class="selection">
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>	</span><span class="selection-comment">// absent (which implies the default revocation reason of 0/Unspecified), or</span><span class="selection">
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>	</span><span class="selection-comment">// it may represent the reasonCode extension being present and explicitly</span><span class="selection">
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>	</span><span class="selection-comment">// containing a value of 0/Unspecified (which should not happen according to</span><span class="selection">
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the DER encoding rules, but can and does happen anyway).</span><span class="selection">
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>	ReasonCode int
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Extensions contains raw X.509 extensions. When parsing CRL entries,</span><span class="selection">
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>	</span><span class="selection-comment">// this can be used to extract non-critical extensions that are not</span><span class="selection">
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>	</span><span class="selection-comment">// parsed by this package. When marshaling CRL entries, the Extensions</span><span class="selection">
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>	</span><span class="selection-comment">// field is ignored, see ExtraExtensions.</span><span class="selection">
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>	Extensions []pkix.Extension
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>	</span><span class="selection-comment">// ExtraExtensions contains extensions to be copied, raw, into any</span><span class="selection">
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>	</span><span class="selection-comment">// marshaled CRL entries. Values override any extensions that would</span><span class="selection">
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>	</span><span class="selection-comment">// otherwise be produced based on the other fields. The ExtraExtensions</span><span class="selection">
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>	</span><span class="selection-comment">// field is not populated when parsing CRL entries, see Extensions.</span><span class="selection">
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>	ExtraExtensions []pkix.Extension
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>}</span>
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span><span class="comment">// RevocationList represents a [Certificate] Revocation List (CRL) as specified</span>
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span><span class="comment">// by RFC 5280.</span>
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>type RevocationList struct {
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>	<span class="comment">// Raw contains the complete ASN.1 DER content of the CRL (tbsCertList,</span>
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>	<span class="comment">// signatureAlgorithm, and signatureValue.)</span>
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>	Raw []byte
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>	<span class="comment">// RawTBSRevocationList contains just the tbsCertList portion of the ASN.1</span>
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>	<span class="comment">// DER.</span>
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>	RawTBSRevocationList []byte
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>	<span class="comment">// RawIssuer contains the DER encoded Issuer.</span>
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>	RawIssuer []byte
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>	<span class="comment">// Issuer contains the DN of the issuing certificate.</span>
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>	Issuer pkix.Name
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>	<span class="comment">// AuthorityKeyId is used to identify the public key associated with the</span>
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span>	<span class="comment">// issuing certificate. It is populated from the authorityKeyIdentifier</span>
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span>	<span class="comment">// extension when parsing a CRL. It is ignored when creating a CRL; the</span>
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>	<span class="comment">// extension is populated from the issuing certificate itself.</span>
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>	AuthorityKeyId []byte
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>	Signature []byte
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>	<span class="comment">// SignatureAlgorithm is used to determine the signature algorithm to be</span>
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>	<span class="comment">// used when signing the CRL. If 0 the default algorithm for the signing</span>
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>	<span class="comment">// key will be used.</span>
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>	SignatureAlgorithm SignatureAlgorithm
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>	<span class="comment">// RevokedCertificateEntries represents the revokedCertificates sequence in</span>
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>	<span class="comment">// the CRL. It is used when creating a CRL and also populated when parsing a</span>
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>	<span class="comment">// CRL. When creating a CRL, it may be empty or nil, in which case the</span>
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>	<span class="comment">// revokedCertificates ASN.1 sequence will be omitted from the CRL entirely.</span>
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>	RevokedCertificateEntries []RevocationListEntry
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>	<span class="comment">// RevokedCertificates is used to populate the revokedCertificates</span>
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	<span class="comment">// sequence in the CRL if RevokedCertificateEntries is empty. It may be empty</span>
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	<span class="comment">// or nil, in which case an empty CRL will be created.</span>
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use RevokedCertificateEntries instead.</span>
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>	RevokedCertificates []pkix.RevokedCertificate
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>	<span class="comment">// Number is used to populate the X.509 v2 cRLNumber extension in the CRL,</span>
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>	<span class="comment">// which should be a monotonically increasing sequence number for a given</span>
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>	<span class="comment">// CRL scope and CRL issuer. It is also populated from the cRLNumber</span>
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>	<span class="comment">// extension when parsing a CRL.</span>
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	Number *big.Int
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>	<span class="comment">// ThisUpdate is used to populate the thisUpdate field in the CRL, which</span>
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>	<span class="comment">// indicates the issuance date of the CRL.</span>
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>	ThisUpdate time.Time
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>	<span class="comment">// NextUpdate is used to populate the nextUpdate field in the CRL, which</span>
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>	<span class="comment">// indicates the date by which the next CRL will be issued. NextUpdate</span>
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>	<span class="comment">// must be greater than ThisUpdate.</span>
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>	NextUpdate time.Time
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>	<span class="comment">// Extensions contains raw X.509 extensions. When creating a CRL,</span>
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	<span class="comment">// the Extensions field is ignored, see ExtraExtensions.</span>
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>	Extensions []pkix.Extension
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>	<span class="comment">// ExtraExtensions contains any additional extensions to add directly to</span>
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>	<span class="comment">// the CRL.</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>	ExtraExtensions []pkix.Extension
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>}
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span><span class="comment">// These structures reflect the ASN.1 structure of X.509 CRLs better than</span>
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span><span class="comment">// the existing crypto/x509/pkix variants do. These mirror the existing</span>
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span><span class="comment">// certificate structs in this file.</span>
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span><span class="comment">// Notably, we include issuer as an asn1.RawValue, mirroring the behavior of</span>
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span><span class="comment">// tbsCertificate and allowing raw (unparsed) subjects to be passed cleanly.</span>
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>type certificateList struct {
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>	TBSCertList        tbsCertificateList
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>	SignatureAlgorithm pkix.AlgorithmIdentifier
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>	SignatureValue     asn1.BitString
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>}
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>type tbsCertificateList struct {
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>	Raw                 asn1.RawContent
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>	Version             int `asn1:&#34;optional,default:0&#34;`
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span>	Signature           pkix.AlgorithmIdentifier
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span>	Issuer              asn1.RawValue
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>	ThisUpdate          time.Time
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>	NextUpdate          time.Time                 `asn1:&#34;optional&#34;`
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>	RevokedCertificates []pkix.RevokedCertificate `asn1:&#34;optional&#34;`
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>	Extensions          []pkix.Extension          `asn1:&#34;tag:0,optional,explicit&#34;`
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>}
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span><span class="comment">// CreateRevocationList creates a new X.509 v2 [Certificate] Revocation List,</span>
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span><span class="comment">// according to RFC 5280, based on template.</span>
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span><span class="comment">// The CRL is signed by priv which should be the private key associated with</span>
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span><span class="comment">// the public key in the issuer certificate.</span>
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span><span class="comment">// The issuer may not be nil, and the crlSign bit must be set in [KeyUsage] in</span>
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span><span class="comment">// order to use it as a CRL issuer.</span>
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span><span class="comment">// The issuer distinguished name CRL field and authority key identifier</span>
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span><span class="comment">// extension are populated using the issuer certificate. issuer must have</span>
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span><span class="comment">// SubjectKeyId set.</span>
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>func CreateRevocationList(rand io.Reader, template *RevocationList, issuer *Certificate, priv crypto.Signer) ([]byte, error) {
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span>	if template == nil {
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: template can not be nil&#34;)
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span>	}
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span>	if issuer == nil {
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: issuer can not be nil&#34;)
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>	}
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>	if (issuer.KeyUsage &amp; KeyUsageCRLSign) == 0 {
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: issuer must have the crlSign key usage bit set&#34;)
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>	}
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>	if len(issuer.SubjectKeyId) == 0 {
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: issuer certificate doesn&#39;t contain a subject key identifier&#34;)
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span>	}
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span>	if template.NextUpdate.Before(template.ThisUpdate) {
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: template.ThisUpdate is after template.NextUpdate&#34;)
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span>	}
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span>	if template.Number == nil {
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: template contains nil Number field&#34;)
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span>	}
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span>	hashFunc, signatureAlgorithm, err := signingParamsForPublicKey(priv.Public(), template.SignatureAlgorithm)
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span>	if err != nil {
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span>		return nil, err
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span>	}
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span>
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span>	var revokedCerts []pkix.RevokedCertificate
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span>	<span class="comment">// Only process the deprecated RevokedCertificates field if it is populated</span>
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span>	<span class="comment">// and the new RevokedCertificateEntries field is not populated.</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>	if len(template.RevokedCertificates) &gt; 0 &amp;&amp; len(template.RevokedCertificateEntries) == 0 {
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>		<span class="comment">// Force revocation times to UTC per RFC 5280.</span>
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>		revokedCerts = make([]pkix.RevokedCertificate, len(template.RevokedCertificates))
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>		for i, rc := range template.RevokedCertificates {
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>			rc.RevocationTime = rc.RevocationTime.UTC()
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>			revokedCerts[i] = rc
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>		}
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>	} else {
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>		<span class="comment">// Convert the ReasonCode field to a proper extension, and force revocation</span>
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>		<span class="comment">// times to UTC per RFC 5280.</span>
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>		revokedCerts = make([]pkix.RevokedCertificate, len(template.RevokedCertificateEntries))
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>		for i, rce := range template.RevokedCertificateEntries {
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>			if rce.SerialNumber == nil {
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>				return nil, errors.New(&#34;x509: template contains entry with nil SerialNumber field&#34;)
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>			}
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>			if rce.RevocationTime.IsZero() {
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>				return nil, errors.New(&#34;x509: template contains entry with zero RevocationTime field&#34;)
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>			}
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span>			rc := pkix.RevokedCertificate{
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span>				SerialNumber:   rce.SerialNumber,
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span>				RevocationTime: rce.RevocationTime.UTC(),
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span>			}
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span>
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>			<span class="comment">// Copy over any extra extensions, except for a Reason Code extension,</span>
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>			<span class="comment">// because we&#39;ll synthesize that ourselves to ensure it is correct.</span>
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>			exts := make([]pkix.Extension, 0, len(rce.ExtraExtensions))
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>			for _, ext := range rce.ExtraExtensions {
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>				if ext.Id.Equal(oidExtensionReasonCode) {
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>					return nil, errors.New(&#34;x509: template contains entry with ReasonCode ExtraExtension; use ReasonCode field instead&#34;)
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>				}
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>				exts = append(exts, ext)
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>			}
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span>			<span class="comment">// Only add a reasonCode extension if the reason is non-zero, as per</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span>			<span class="comment">// RFC 5280 Section 5.3.1.</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>			if rce.ReasonCode != 0 {
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>				reasonBytes, err := asn1.Marshal(asn1.Enumerated(rce.ReasonCode))
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>				if err != nil {
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>					return nil, err
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>				}
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>				exts = append(exts, pkix.Extension{
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>					Id:    oidExtensionReasonCode,
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>					Value: reasonBytes,
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>				})
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>			}
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>			if len(exts) &gt; 0 {
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>				rc.Extensions = exts
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>			}
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>			revokedCerts[i] = rc
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>		}
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span>	}
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span>
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span>	aki, err := asn1.Marshal(authKeyId{Id: issuer.SubjectKeyId})
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>	if err != nil {
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>		return nil, err
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>	}
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>	if numBytes := template.Number.Bytes(); len(numBytes) &gt; 20 || (len(numBytes) == 20 &amp;&amp; numBytes[0]&amp;0x80 != 0) {
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>		return nil, errors.New(&#34;x509: CRL number exceeds 20 octets&#34;)
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>	}
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>	crlNum, err := asn1.Marshal(template.Number)
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>	if err != nil {
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>		return nil, err
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span>	}
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span>
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span>	<span class="comment">// Correctly use the issuer&#39;s subject sequence if one is specified.</span>
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>	issuerSubject, err := subjectBytes(issuer)
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>	if err != nil {
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>		return nil, err
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>	}
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>	tbsCertList := tbsCertificateList{
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>		Version:    1, <span class="comment">// v2</span>
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>		Signature:  signatureAlgorithm,
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>		Issuer:     asn1.RawValue{FullBytes: issuerSubject},
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>		ThisUpdate: template.ThisUpdate.UTC(),
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>		NextUpdate: template.NextUpdate.UTC(),
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>		Extensions: []pkix.Extension{
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>			{
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>				Id:    oidExtensionAuthorityKeyId,
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span>				Value: aki,
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>			},
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>			{
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>				Id:    oidExtensionCRLNumber,
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>				Value: crlNum,
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>			},
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>		},
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>	}
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>	if len(revokedCerts) &gt; 0 {
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>		tbsCertList.RevokedCertificates = revokedCerts
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span>	}
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>	if len(template.ExtraExtensions) &gt; 0 {
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>		tbsCertList.Extensions = append(tbsCertList.Extensions, template.ExtraExtensions...)
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>	}
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>	tbsCertListContents, err := asn1.Marshal(tbsCertList)
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>	if err != nil {
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>		return nil, err
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>	}
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span>	<span class="comment">// Optimization to only marshal this struct once, when signing and</span>
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>	<span class="comment">// then embedding in certificateList below.</span>
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>	tbsCertList.Raw = tbsCertListContents
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>	input := tbsCertListContents
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>	if hashFunc != 0 {
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>		h := hashFunc.New()
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>		h.Write(tbsCertListContents)
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>		input = h.Sum(nil)
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>	}
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>	var signerOpts crypto.SignerOpts = hashFunc
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>	if template.SignatureAlgorithm.isRSAPSS() {
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>		signerOpts = &amp;rsa.PSSOptions{
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>			SaltLength: rsa.PSSSaltLengthEqualsHash,
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>			Hash:       hashFunc,
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>		}
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>	}
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>	signature, err := priv.Sign(rand, input, signerOpts)
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>	if err != nil {
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>		return nil, err
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>	}
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span>
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>	return asn1.Marshal(certificateList{
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span>		TBSCertList:        tbsCertList,
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span>		SignatureAlgorithm: signatureAlgorithm,
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span>		SignatureValue:     asn1.BitString{Bytes: signature, BitLength: len(signature) * 8},
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span>	})
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span>}
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span>
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span><span class="comment">// CheckSignatureFrom verifies that the signature on rl is a valid signature</span>
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span><span class="comment">// from issuer.</span>
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span>func (rl *RevocationList) CheckSignatureFrom(parent *Certificate) error {
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span>	if parent.Version == 3 &amp;&amp; !parent.BasicConstraintsValid ||
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span>		parent.BasicConstraintsValid &amp;&amp; !parent.IsCA {
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>		return ConstraintViolationError{}
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>	}
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>	if parent.KeyUsage != 0 &amp;&amp; parent.KeyUsage&amp;KeyUsageCRLSign == 0 {
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>		return ConstraintViolationError{}
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	}
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>	if parent.PublicKeyAlgorithm == UnknownPublicKeyAlgorithm {
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>		return ErrUnsupportedAlgorithm
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span>	}
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span>
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span>	return parent.CheckSignature(rl.SignatureAlgorithm, rl.RawTBSRevocationList, rl.Signature)
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span>}
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span>
</pre><p><a href="x509.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
