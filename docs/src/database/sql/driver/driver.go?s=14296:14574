<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/database/sql/driver/driver.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./driver.go?s=14296:14574#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/database">database</a>/<a href="http://localhost:8080/src/database/sql">sql</a>/<a href="http://localhost:8080/src/database/sql/driver">driver</a>/<span class="text-muted">driver.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/database/sql/driver">database/sql/driver</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package driver defines interfaces to be implemented by database</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// drivers as used by package sql.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// Most code should use the [database/sql] package.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// The driver interface has evolved over time. Drivers should implement</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// [Connector] and [DriverContext] interfaces.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// The Connector.Connect and Driver.Open methods should never return [ErrBadConn].</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// [ErrBadConn] should only be returned from [Validator], [SessionResetter], or</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// a query method if the connection is already in an invalid (e.g. closed) state.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// All [Conn] implementations should implement the following interfaces:</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// [Pinger], [SessionResetter], and [Validator].</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// If named parameters or context are supported, the driver&#39;s [Conn] should implement:</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// [ExecerContext], [QueryerContext], [ConnPrepareContext], and [ConnBeginTx].</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// To support custom data types, implement [NamedValueChecker]. [NamedValueChecker]</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// also allows queries to accept per-query options as a parameter by returning</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// [ErrRemoveArgument] from CheckNamedValue.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// If multiple result sets are supported, [Rows] should implement [RowsNextResultSet].</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// If the driver knows how to describe the types present in the returned result</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// it should implement the following interfaces: [RowsColumnTypeScanType],</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// [RowsColumnTypeDatabaseTypeName], [RowsColumnTypeLength], [RowsColumnTypeNullable],</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// and [RowsColumnTypePrecisionScale]. A given row value may also return a [Rows]</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// type, which may represent a database cursor value.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// If a [Conn] implements [Validator], then the IsValid method is called</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// before returning the connection to the connection pool. If an entry in the</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// connection pool implements [SessionResetter], then ResetSession</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// is called before reusing the connection for another query. If a connection is</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// never returned to the connection pool but is immediately reused, then</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// ResetSession is called prior to reuse but IsValid is not called.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>package driver
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>import (
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// Value is a value that drivers must be able to handle.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// It is either nil, a type handled by a database driver&#39;s [NamedValueChecker]</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// interface, or an instance of one of these types:</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	int64</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//	float64</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	bool</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//	[]byte</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//	string</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//	time.Time</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// If the driver supports cursors, a returned Value may also implement the [Rows] interface</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// in this package. This is used, for example, when a user selects a cursor</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// such as &#34;select cursor(select * from my_table) from dual&#34;. If the [Rows]</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// from the select is closed, the cursor [Rows] will also be closed.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>type Value any
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// NamedValue holds both the value name and value.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>type NamedValue struct {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// If the Name is not empty it should be used for the parameter identifier and</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// not the ordinal position.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// Name will not have a symbol prefix.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	Name string
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Ordinal position of the parameter starting from one and is always set.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	Ordinal int
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// Value is the parameter value.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	Value Value
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// Driver is the interface that must be implemented by a database</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// driver.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Database drivers may implement [DriverContext] for access</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// to contexts and to parse the name only once for a pool of connections,</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// instead of once per connection.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>type Driver interface {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// Open returns a new connection to the database.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// The name is a string in a driver-specific format.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// Open may return a cached connection (one previously</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// closed), but doing so is unnecessary; the sql package</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// maintains a pool of idle connections for efficient re-use.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// The returned connection is only used by one goroutine at a</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// time.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	Open(name string) (Conn, error)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// If a [Driver] implements DriverContext, then [database/sql.DB] will call</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// OpenConnector to obtain a [Connector] and then invoke</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// that [Connector]&#39;s Connect method to obtain each needed connection,</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// instead of invoking the [Driver]&#39;s Open method for each connection.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// The two-step sequence allows drivers to parse the name just once</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// and also provides access to per-[Conn] contexts.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>type DriverContext interface {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// OpenConnector must parse the name in the same format that Driver.Open</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// parses the name parameter.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	OpenConnector(name string) (Connector, error)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// A Connector represents a driver in a fixed configuration</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// and can create any number of equivalent Conns for use</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// by multiple goroutines.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// A Connector can be passed to [database/sql.OpenDB], to allow drivers</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// to implement their own [database/sql.DB] constructors, or returned by</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// [DriverContext]&#39;s OpenConnector method, to allow drivers</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// access to context and to avoid repeated parsing of driver</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// configuration.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// If a Connector implements [io.Closer], the [database/sql.DB.Close]</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// method will call the Close method and return error (if any).</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>type Connector interface {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// Connect returns a connection to the database.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// Connect may return a cached connection (one previously</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// closed), but doing so is unnecessary; the sql package</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// maintains a pool of idle connections for efficient re-use.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// The provided context.Context is for dialing purposes only</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// (see net.DialContext) and should not be stored or used for</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// other purposes. A default timeout should still be used</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// when dialing as a connection pool may call Connect</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// asynchronously to any query.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// The returned connection is only used by one goroutine at a</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// time.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	Connect(context.Context) (Conn, error)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// Driver returns the underlying Driver of the Connector,</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// mainly to maintain compatibility with the Driver method</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// on sql.DB.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	Driver() Driver
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// ErrSkip may be returned by some optional interfaces&#39; methods to</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// indicate at runtime that the fast path is unavailable and the sql</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// package should continue as if the optional interface was not</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// implemented. ErrSkip is only supported where explicitly</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// documented.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>var ErrSkip = errors.New(&#34;driver: skip fast-path; continue as if unimplemented&#34;)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// ErrBadConn should be returned by a driver to signal to the [database/sql]</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// package that a driver.[Conn] is in a bad state (such as the server</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// having earlier closed the connection) and the [database/sql] package should</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// retry on a new connection.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// To prevent duplicate operations, ErrBadConn should NOT be returned</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// if there&#39;s a possibility that the database server might have</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// performed the operation. Even if the server sends back an error,</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// you shouldn&#39;t return ErrBadConn.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// Errors will be checked using [errors.Is]. An error may</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// wrap ErrBadConn or implement the Is(error) bool method.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>var ErrBadConn = errors.New(&#34;driver: bad connection&#34;)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// Pinger is an optional interface that may be implemented by a [Conn].</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// If a [Conn] does not implement Pinger, the [database/sql.DB.Ping] and</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// [database/sql.DB.PingContext] will check if there is at least one [Conn] available.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// If Conn.Ping returns [ErrBadConn], [database/sql.DB.Ping] and [database/sql.DB.PingContext] will remove</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// the [Conn] from pool.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>type Pinger interface {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	Ping(ctx context.Context) error
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Execer is an optional interface that may be implemented by a [Conn].</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// If a [Conn] implements neither [ExecerContext] nor [Execer],</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// the [database/sql.DB.Exec] will first prepare a query, execute the statement,</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// and then close the statement.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// Exec may return [ErrSkip].</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// Deprecated: Drivers should implement [ExecerContext] instead.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>type Execer interface {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	Exec(query string, args []Value) (Result, error)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// ExecerContext is an optional interface that may be implemented by a [Conn].</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// If a [Conn] does not implement [ExecerContext], the [database/sql.DB.Exec]</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// will fall back to [Execer]; if the Conn does not implement Execer either,</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// [database/sql.DB.Exec] will first prepare a query, execute the statement, and then</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// close the statement.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// ExecContext may return [ErrSkip].</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// ExecContext must honor the context timeout and return when the context is canceled.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>type ExecerContext interface {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	ExecContext(ctx context.Context, query string, args []NamedValue) (Result, error)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Queryer is an optional interface that may be implemented by a [Conn].</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// If a [Conn] implements neither [QueryerContext] nor [Queryer],</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// the [database/sql.DB.Query] will first prepare a query, execute the statement,</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// and then close the statement.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// Query may return [ErrSkip].</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Deprecated: Drivers should implement [QueryerContext] instead.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>type Queryer interface {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	Query(query string, args []Value) (Rows, error)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// QueryerContext is an optional interface that may be implemented by a [Conn].</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// If a [Conn] does not implement QueryerContext, the [database/sql.DB.Query]</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// will fall back to [Queryer]; if the [Conn] does not implement [Queryer] either,</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// [database/sql.DB.Query] will first prepare a query, execute the statement, and then</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// close the statement.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// QueryContext may return [ErrSkip].</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// QueryContext must honor the context timeout and return when the context is canceled.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>type QueryerContext interface {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	QueryContext(ctx context.Context, query string, args []NamedValue) (Rows, error)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// Conn is a connection to a database. It is not used concurrently</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// by multiple goroutines.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// Conn is assumed to be stateful.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>type Conn interface {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// Prepare returns a prepared statement, bound to this connection.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	Prepare(query string) (Stmt, error)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// Close invalidates and potentially stops any current</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// prepared statements and transactions, marking this</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// connection as no longer in use.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">// Because the sql package maintains a free pool of</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	<span class="comment">// connections and only calls Close when there&#39;s a surplus of</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// idle connections, it shouldn&#39;t be necessary for drivers to</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// do their own connection caching.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// Drivers must ensure all network calls made by Close</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// do not block indefinitely (e.g. apply a timeout).</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	Close() error
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// Begin starts and returns a new transaction.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Drivers should implement ConnBeginTx instead (or additionally).</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	Begin() (Tx, error)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// ConnPrepareContext enhances the [Conn] interface with context.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>type ConnPrepareContext interface {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// PrepareContext returns a prepared statement, bound to this connection.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// context is for the preparation of the statement,</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	<span class="comment">// it must not store the context within the statement itself.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	PrepareContext(ctx context.Context, query string) (Stmt, error)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// IsolationLevel is the transaction isolation level stored in [TxOptions].</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// This type should be considered identical to [database/sql.IsolationLevel] along</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// with any values defined on it.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>type IsolationLevel int
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// TxOptions holds the transaction options.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// This type should be considered identical to [database/sql.TxOptions].</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>type TxOptions struct {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	Isolation IsolationLevel
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	ReadOnly  bool
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// ConnBeginTx enhances the [Conn] interface with context and [TxOptions].</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>type ConnBeginTx interface {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">// BeginTx starts and returns a new transaction.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">// If the context is canceled by the user the sql package will</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// call Tx.Rollback before discarding and closing the connection.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// This must check opts.Isolation to determine if there is a set</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// isolation level. If the driver does not support a non-default</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// level and one is set or if there is a non-default isolation level</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// that is not supported, an error must be returned.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// This must also check opts.ReadOnly to determine if the read-only</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// value is true to either set the read-only transaction property if supported</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// or return an error if it is not supported.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	BeginTx(ctx context.Context, opts TxOptions) (Tx, error)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// SessionResetter may be implemented by [Conn] to allow drivers to reset the</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// session state associated with the connection and to signal a bad connection.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>type SessionResetter interface {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// ResetSession is called prior to executing a query on the connection</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// if the connection has been used before. If the driver returns ErrBadConn</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// the connection is discarded.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	ResetSession(ctx context.Context) error
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// Validator may be implemented by [Conn] to allow drivers to</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// signal if a connection is valid or if it should be discarded.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// If implemented, drivers may return the underlying error from queries,</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// even if the connection should be discarded by the connection pool.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>type Validator interface {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// IsValid is called prior to placing the connection into the</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// connection pool. The connection will be discarded if false is returned.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	IsValid() bool
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// Result is the result of a query execution.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>type Result interface {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// LastInsertId returns the database&#39;s auto-generated ID</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// after, for example, an INSERT into a table with primary</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// key.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	LastInsertId() (int64, error)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// RowsAffected returns the number of rows affected by the</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// query.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	RowsAffected() (int64, error)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// Stmt is a prepared statement. It is bound to a [Conn] and not</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// used by multiple goroutines concurrently.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>type Stmt interface {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// Close closes the statement.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	<span class="comment">// As of Go 1.1, a Stmt will not be closed if it&#39;s in use</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// by any queries.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// Drivers must ensure all network calls made by Close</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// do not block indefinitely (e.g. apply a timeout).</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	Close() error
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// NumInput returns the number of placeholder parameters.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// If NumInput returns &gt;= 0, the sql package will sanity check</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// argument counts from callers and return errors to the caller</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// before the statement&#39;s Exec or Query methods are called.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// NumInput may also return -1, if the driver doesn&#39;t know</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// its number of placeholders. In that case, the sql package</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// will not sanity check Exec or Query argument counts.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	NumInput() int
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	<span class="comment">// Exec executes a query that doesn&#39;t return rows, such</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	<span class="comment">// as an INSERT or UPDATE.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Drivers should implement StmtExecContext instead (or additionally).</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	Exec(args []Value) (Result, error)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// Query executes a query that may return rows, such as a</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// SELECT.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Drivers should implement StmtQueryContext instead (or additionally).</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	Query(args []Value) (Rows, error)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// StmtExecContext enhances the [Stmt] interface by providing Exec with context.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="selection">type StmtExecContext interface {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	</span><span class="selection-comment">// ExecContext executes a query that doesn&#39;t return rows, such</span><span class="selection">
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	</span><span class="selection-comment">// as an INSERT or UPDATE.</span><span class="selection">
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	</span><span class="selection-comment">// ExecContext must honor the context timeout and return when it is canceled.</span><span class="selection">
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	ExecContext(ctx context.Context, args []NamedValue) (Result, error)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// StmtQueryContext enhances the [Stmt] interface by providing Query with context.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>type StmtQueryContext interface {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	<span class="comment">// QueryContext executes a query that may return rows, such as a</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	<span class="comment">// SELECT.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	<span class="comment">// QueryContext must honor the context timeout and return when it is canceled.</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	QueryContext(ctx context.Context, args []NamedValue) (Rows, error)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// ErrRemoveArgument may be returned from [NamedValueChecker] to instruct the</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// [database/sql] package to not pass the argument to the driver query interface.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// Return when accepting query specific options or structures that aren&#39;t</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// SQL query arguments.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>var ErrRemoveArgument = errors.New(&#34;driver: remove argument from query&#34;)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// NamedValueChecker may be optionally implemented by [Conn] or [Stmt]. It provides</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// the driver more control to handle Go and database types beyond the default</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// [Value] types allowed.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// The [database/sql] package checks for value checkers in the following order,</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// stopping at the first found match: Stmt.NamedValueChecker, Conn.NamedValueChecker,</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// Stmt.ColumnConverter, [DefaultParameterConverter].</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// If CheckNamedValue returns [ErrRemoveArgument], the [NamedValue] will not be included in</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// the final query arguments. This may be used to pass special options to</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// the query itself.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// If [ErrSkip] is returned the column converter error checking</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// path is used for the argument. Drivers may wish to return [ErrSkip] after</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// they have exhausted their own special cases.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>type NamedValueChecker interface {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// CheckNamedValue is called before passing arguments to the driver</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// and is called in place of any ColumnConverter. CheckNamedValue must do type</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// validation and conversion as appropriate for the driver.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	CheckNamedValue(*NamedValue) error
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// ColumnConverter may be optionally implemented by [Stmt] if the</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// statement is aware of its own columns&#39; types and can convert from</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// any type to a driver [Value].</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// Deprecated: Drivers should implement [NamedValueChecker].</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>type ColumnConverter interface {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	<span class="comment">// ColumnConverter returns a ValueConverter for the provided</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	<span class="comment">// column index. If the type of a specific column isn&#39;t known</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// or shouldn&#39;t be handled specially, DefaultValueConverter</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// can be returned.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	ColumnConverter(idx int) ValueConverter
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// Rows is an iterator over an executed query&#39;s results.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>type Rows interface {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// Columns returns the names of the columns. The number of</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	<span class="comment">// columns of the result is inferred from the length of the</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// slice. If a particular column name isn&#39;t known, an empty</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	<span class="comment">// string should be returned for that entry.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	Columns() []string
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">// Close closes the rows iterator.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	Close() error
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// Next is called to populate the next row of data into</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// the provided slice. The provided slice will be the same</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// size as the Columns() are wide.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// Next should return io.EOF when there are no more rows.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	<span class="comment">// The dest should not be written to outside of Next. Care</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// should be taken when closing Rows not to modify</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// a buffer held in dest.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	Next(dest []Value) error
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// RowsNextResultSet extends the [Rows] interface by providing a way to signal</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// the driver to advance to the next result set.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>type RowsNextResultSet interface {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	Rows
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// HasNextResultSet is called at the end of the current result set and</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// reports whether there is another result set after the current one.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	HasNextResultSet() bool
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	<span class="comment">// NextResultSet advances the driver to the next result set even</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// if there are remaining rows in the current result set.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// NextResultSet should return io.EOF when there are no more result sets.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	NextResultSet() error
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// RowsColumnTypeScanType may be implemented by [Rows]. It should return</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// the value type that can be used to scan types into. For example, the database</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// column type &#34;bigint&#34; this should return &#34;[reflect.TypeOf](int64(0))&#34;.</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>type RowsColumnTypeScanType interface {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	Rows
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	ColumnTypeScanType(index int) reflect.Type
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// RowsColumnTypeDatabaseTypeName may be implemented by [Rows]. It should return the</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// database system type name without the length. Type names should be uppercase.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// Examples of returned types: &#34;VARCHAR&#34;, &#34;NVARCHAR&#34;, &#34;VARCHAR2&#34;, &#34;CHAR&#34;, &#34;TEXT&#34;,</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// &#34;DECIMAL&#34;, &#34;SMALLINT&#34;, &#34;INT&#34;, &#34;BIGINT&#34;, &#34;BOOL&#34;, &#34;[]BIGINT&#34;, &#34;JSONB&#34;, &#34;XML&#34;,</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// &#34;TIMESTAMP&#34;.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>type RowsColumnTypeDatabaseTypeName interface {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	Rows
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	ColumnTypeDatabaseTypeName(index int) string
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// RowsColumnTypeLength may be implemented by [Rows]. It should return the length</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// of the column type if the column is a variable length type. If the column is</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// not a variable length type ok should return false.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// If length is not limited other than system limits, it should return [math.MaxInt64].</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// The following are examples of returned values for various types:</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">//	TEXT          (math.MaxInt64, true)</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">//	varchar(10)   (10, true)</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">//	nvarchar(10)  (10, true)</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">//	decimal       (0, false)</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">//	int           (0, false)</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">//	bytea(30)     (30, true)</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>type RowsColumnTypeLength interface {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	Rows
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	ColumnTypeLength(index int) (length int64, ok bool)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// RowsColumnTypeNullable may be implemented by [Rows]. The nullable value should</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// be true if it is known the column may be null, or false if the column is known</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// to be not nullable.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// If the column nullability is unknown, ok should be false.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>type RowsColumnTypeNullable interface {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	Rows
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	ColumnTypeNullable(index int) (nullable, ok bool)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// RowsColumnTypePrecisionScale may be implemented by [Rows]. It should return</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">// the precision and scale for decimal types. If not applicable, ok should be false.</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// The following are examples of returned values for various types:</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">//	decimal(38, 4)    (38, 4, true)</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">//	int               (0, 0, false)</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">//	decimal           (math.MaxInt64, math.MaxInt64, true)</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>type RowsColumnTypePrecisionScale interface {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	Rows
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	ColumnTypePrecisionScale(index int) (precision, scale int64, ok bool)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">// Tx is a transaction.</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>type Tx interface {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	Commit() error
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	Rollback() error
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// RowsAffected implements [Result] for an INSERT or UPDATE operation</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// which mutates a number of rows.</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>type RowsAffected int64
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>var _ Result = RowsAffected(0)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>func (RowsAffected) LastInsertId() (int64, error) {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	return 0, errors.New(&#34;LastInsertId is not supported by this driver&#34;)
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>func (v RowsAffected) RowsAffected() (int64, error) {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return int64(v), nil
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// ResultNoRows is a pre-defined [Result] for drivers to return when a DDL</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// command (such as a CREATE TABLE) succeeds. It returns an error for both</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// LastInsertId and [RowsAffected].</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>var ResultNoRows noRows
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>type noRows struct{}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>var _ Result = noRows{}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>func (noRows) LastInsertId() (int64, error) {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	return 0, errors.New(&#34;no LastInsertId available after DDL statement&#34;)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>func (noRows) RowsAffected() (int64, error) {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	return 0, errors.New(&#34;no RowsAffected available after DDL statement&#34;)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
</pre><p><a href="driver.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
