<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/database/sql/sql.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./sql.go?s=63878:63906#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/database">database</a>/<a href="http://localhost:8080/src/database/sql">sql</a>/<span class="text-muted">sql.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/database/sql">database/sql</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package sql provides a generic interface around SQL (or SQL-like)</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// databases.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// The sql package must be used in conjunction with a database driver.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// See https://golang.org/s/sqldrivers for a list of drivers.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// Drivers that do not support context cancellation will not return until</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// after the query is completed.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// For usage examples, see the wiki page at</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// https://golang.org/s/sqlwiki.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>package sql
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>import (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;database/sql/driver&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>var (
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	driversMu sync.RWMutex
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	drivers   = make(map[string]driver.Driver)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// nowFunc returns the current time; it&#39;s overridden in tests.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>var nowFunc = time.Now
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Register makes a database driver available by the provided name.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// If Register is called twice with the same name or if driver is nil,</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// it panics.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func Register(name string, driver driver.Driver) {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	driversMu.Lock()
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	defer driversMu.Unlock()
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	if driver == nil {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		panic(&#34;sql: Register driver is nil&#34;)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if _, dup := drivers[name]; dup {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		panic(&#34;sql: Register called twice for driver &#34; + name)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	drivers[name] = driver
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func unregisterAllDrivers() {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	driversMu.Lock()
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	defer driversMu.Unlock()
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// For tests.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	drivers = make(map[string]driver.Driver)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Drivers returns a sorted list of the names of the registered drivers.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func Drivers() []string {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	driversMu.RLock()
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	defer driversMu.RUnlock()
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	list := make([]string, 0, len(drivers))
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	for name := range drivers {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		list = append(list, name)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	sort.Strings(list)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return list
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// A NamedArg is a named argument. NamedArg values may be used as</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// arguments to [DB.Query] or [DB.Exec] and bind to the corresponding named</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// parameter in the SQL statement.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// For a more concise way to create NamedArg values, see</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// the [Named] function.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>type NamedArg struct {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	_NamedFieldsRequired struct{}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// Name is the name of the parameter placeholder.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// If empty, the ordinal position in the argument list will be</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// used.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// Name must omit any symbol prefix.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	Name string
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// Value is the value of the parameter.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// It may be assigned the same value types as the query</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// arguments.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	Value any
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Named provides a more concise way to create [NamedArg] values.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Example usage:</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//	db.ExecContext(ctx, `</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">//	    delete from Invoice</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//	    where</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//	        TimeCreated &lt; @end</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//	        and TimeCreated &gt;= @start;`,</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//	    sql.Named(&#34;start&#34;, startTime),</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//	    sql.Named(&#34;end&#34;, endTime),</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//	)</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func Named(name string, value any) NamedArg {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// This method exists because the go1compat promise</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// doesn&#39;t guarantee that structs don&#39;t grow more fields,</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// so unkeyed struct literals are a vet error. Thus, we don&#39;t</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// want to allow sql.NamedArg{name, value}.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return NamedArg{Name: name, Value: value}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// IsolationLevel is the transaction isolation level used in [TxOptions].</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>type IsolationLevel int
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// Various isolation levels that drivers may support in [DB.BeginTx].</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// If a driver does not support a given isolation level an error may be returned.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// See https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>const (
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	LevelDefault IsolationLevel = iota
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	LevelReadUncommitted
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	LevelReadCommitted
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	LevelWriteCommitted
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	LevelRepeatableRead
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	LevelSnapshot
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	LevelSerializable
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	LevelLinearizable
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// String returns the name of the transaction isolation level.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (i IsolationLevel) String() string {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	switch i {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	case LevelDefault:
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		return &#34;Default&#34;
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	case LevelReadUncommitted:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return &#34;Read Uncommitted&#34;
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	case LevelReadCommitted:
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		return &#34;Read Committed&#34;
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	case LevelWriteCommitted:
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		return &#34;Write Committed&#34;
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	case LevelRepeatableRead:
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		return &#34;Repeatable Read&#34;
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	case LevelSnapshot:
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return &#34;Snapshot&#34;
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	case LevelSerializable:
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		return &#34;Serializable&#34;
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	case LevelLinearizable:
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return &#34;Linearizable&#34;
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	default:
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return &#34;IsolationLevel(&#34; + strconv.Itoa(int(i)) + &#34;)&#34;
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>var _ fmt.Stringer = LevelDefault
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// TxOptions holds the transaction options to be used in [DB.BeginTx].</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>type TxOptions struct {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// Isolation is the transaction isolation level.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// If zero, the driver or database&#39;s default level is used.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	Isolation IsolationLevel
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	ReadOnly  bool
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// RawBytes is a byte slice that holds a reference to memory owned by</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// the database itself. After a [Rows.Scan] into a RawBytes, the slice is only</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// valid until the next call to [Rows.Next], [Rows.Scan], or [Rows.Close].</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>type RawBytes []byte
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// NullString represents a string that may be null.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// NullString implements the [Scanner] interface so</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination:</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//	var s NullString</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//	err := db.QueryRow(&#34;SELECT name FROM foo WHERE id=?&#34;, id).Scan(&amp;s)</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">//	if s.Valid {</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//	   // use s.String</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//	} else {</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//	   // NULL value</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>type NullString struct {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	String string
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	Valid  bool <span class="comment">// Valid is true if String is not NULL</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func (ns *NullString) Scan(value any) error {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if value == nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		ns.String, ns.Valid = &#34;&#34;, false
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		return nil
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	ns.Valid = true
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	return convertAssign(&amp;ns.String, value)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>func (ns NullString) Value() (driver.Value, error) {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	if !ns.Valid {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return nil, nil
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return ns.String, nil
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// NullInt64 represents an int64 that may be null.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// NullInt64 implements the [Scanner] interface so</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>type NullInt64 struct {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	Int64 int64
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Int64 is not NULL</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (n *NullInt64) Scan(value any) error {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	if value == nil {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		n.Int64, n.Valid = 0, false
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return nil
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	n.Valid = true
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return convertAssign(&amp;n.Int64, value)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func (n NullInt64) Value() (driver.Value, error) {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		return nil, nil
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	return n.Int64, nil
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// NullInt32 represents an int32 that may be null.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// NullInt32 implements the [Scanner] interface so</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>type NullInt32 struct {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	Int32 int32
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Int32 is not NULL</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func (n *NullInt32) Scan(value any) error {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if value == nil {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		n.Int32, n.Valid = 0, false
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return nil
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	n.Valid = true
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	return convertAssign(&amp;n.Int32, value)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>func (n NullInt32) Value() (driver.Value, error) {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		return nil, nil
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	return int64(n.Int32), nil
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// NullInt16 represents an int16 that may be null.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// NullInt16 implements the [Scanner] interface so</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>type NullInt16 struct {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	Int16 int16
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Int16 is not NULL</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func (n *NullInt16) Scan(value any) error {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if value == nil {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		n.Int16, n.Valid = 0, false
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return nil
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	err := convertAssign(&amp;n.Int16, value)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	n.Valid = err == nil
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return err
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func (n NullInt16) Value() (driver.Value, error) {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		return nil, nil
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return int64(n.Int16), nil
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// NullByte represents a byte that may be null.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// NullByte implements the [Scanner] interface so</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>type NullByte struct {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	Byte  byte
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Byte is not NULL</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func (n *NullByte) Scan(value any) error {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if value == nil {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		n.Byte, n.Valid = 0, false
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return nil
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	err := convertAssign(&amp;n.Byte, value)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	n.Valid = err == nil
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	return err
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>func (n NullByte) Value() (driver.Value, error) {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		return nil, nil
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	return int64(n.Byte), nil
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// NullFloat64 represents a float64 that may be null.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// NullFloat64 implements the [Scanner] interface so</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>type NullFloat64 struct {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	Float64 float64
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	Valid   bool <span class="comment">// Valid is true if Float64 is not NULL</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>func (n *NullFloat64) Scan(value any) error {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	if value == nil {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		n.Float64, n.Valid = 0, false
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		return nil
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	n.Valid = true
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	return convertAssign(&amp;n.Float64, value)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func (n NullFloat64) Value() (driver.Value, error) {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		return nil, nil
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return n.Float64, nil
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// NullBool represents a bool that may be null.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// NullBool implements the [Scanner] interface so</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>type NullBool struct {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	Bool  bool
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Bool is not NULL</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func (n *NullBool) Scan(value any) error {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	if value == nil {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		n.Bool, n.Valid = false, false
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		return nil
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	n.Valid = true
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	return convertAssign(&amp;n.Bool, value)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func (n NullBool) Value() (driver.Value, error) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		return nil, nil
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return n.Bool, nil
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// NullTime represents a [time.Time] that may be null.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// NullTime implements the [Scanner] interface so</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination, similar to [NullString].</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>type NullTime struct {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	Time  time.Time
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	Valid bool <span class="comment">// Valid is true if Time is not NULL</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// Scan implements the [Scanner] interface.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>func (n *NullTime) Scan(value any) error {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	if value == nil {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		n.Time, n.Valid = time.Time{}, false
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		return nil
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	n.Valid = true
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	return convertAssign(&amp;n.Time, value)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// Value implements the [driver.Valuer] interface.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>func (n NullTime) Value() (driver.Value, error) {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		return nil, nil
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	return n.Time, nil
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// Null represents a value that may be null.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// Null implements the [Scanner] interface so</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// it can be used as a scan destination:</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">//	var s Null[string]</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">//	err := db.QueryRow(&#34;SELECT name FROM foo WHERE id=?&#34;, id).Scan(&amp;s)</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">//	if s.Valid {</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">//	   // use s.V</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">//	} else {</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">//	   // NULL value</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>type Null[T any] struct {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	V     T
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	Valid bool
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>func (n *Null[T]) Scan(value any) error {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	if value == nil {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		n.V, n.Valid = *new(T), false
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return nil
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	n.Valid = true
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	return convertAssign(&amp;n.V, value)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func (n Null[T]) Value() (driver.Value, error) {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	if !n.Valid {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		return nil, nil
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	return n.V, nil
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">// Scanner is an interface used by [Rows.Scan].</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>type Scanner interface {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	<span class="comment">// Scan assigns a value from a database driver.</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">// The src value will be of one of the following types:</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">//    int64</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">//    float64</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">//    bool</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">//    []byte</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">//    string</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">//    time.Time</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">//    nil - for NULL values</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// An error should be returned if the value cannot be stored</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// without loss of information.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	<span class="comment">// Reference types such as []byte are only valid until the next call to Scan</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// and should not be retained. Their underlying memory is owned by the driver.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	<span class="comment">// If retention is necessary, copy their values before the next call to Scan.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	Scan(src any) error
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// Out may be used to retrieve OUTPUT value parameters from stored procedures.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// Not all drivers and databases support OUTPUT value parameters.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// Example usage:</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">//	var outArg string</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">//	_, err := db.ExecContext(ctx, &#34;ProcName&#34;, sql.Named(&#34;Arg1&#34;, sql.Out{Dest: &amp;outArg}))</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>type Out struct {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	_NamedFieldsRequired struct{}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">// Dest is a pointer to the value that will be set to the result of the</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">// stored procedure&#39;s OUTPUT parameter.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	Dest any
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">// In is whether the parameter is an INOUT parameter. If so, the input value to the stored</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">// procedure is the dereferenced value of Dest&#39;s pointer, which is then replaced with</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// the output value.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	In bool
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// ErrNoRows is returned by [Row.Scan] when [DB.QueryRow] doesn&#39;t return a</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// row. In such a case, QueryRow returns a placeholder [*Row] value that</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// defers this error until a Scan.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>var ErrNoRows = errors.New(&#34;sql: no rows in result set&#34;)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// DB is a database handle representing a pool of zero or more</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// underlying connections. It&#39;s safe for concurrent use by multiple</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// goroutines.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// The sql package creates and frees connections automatically; it</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// also maintains a free pool of idle connections. If the database has</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// a concept of per-connection state, such state can be reliably observed</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// within a transaction ([Tx]) or connection ([Conn]). Once [DB.Begin] is called, the</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// returned [Tx] is bound to a single connection. Once [Tx.Commit] or</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// [Tx.Rollback] is called on the transaction, that transaction&#39;s</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// connection is returned to [DB]&#39;s idle connection pool. The pool size</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// can be controlled with [DB.SetMaxIdleConns].</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>type DB struct {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// Total time waited for new connections.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	waitDuration atomic.Int64
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	connector driver.Connector
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	<span class="comment">// numClosed is an atomic counter which represents a total number of</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	<span class="comment">// closed connections. Stmt.openStmt checks it before cleaning closed</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	<span class="comment">// connections in Stmt.css.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	numClosed atomic.Uint64
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	mu           sync.Mutex    <span class="comment">// protects following fields</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	freeConn     []*driverConn <span class="comment">// free connections ordered by returnedAt oldest to newest</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	connRequests map[uint64]chan connRequest
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	nextRequest  uint64 <span class="comment">// Next key to use in connRequests.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	numOpen      int    <span class="comment">// number of opened and pending open connections</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	<span class="comment">// Used to signal the need for new connections</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	<span class="comment">// a goroutine running connectionOpener() reads on this chan and</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	<span class="comment">// maybeOpenNewConnections sends on the chan (one send per needed connection)</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	<span class="comment">// It is closed during db.Close(). The close tells the connectionOpener</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	<span class="comment">// goroutine to exit.</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	openerCh          chan struct{}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	closed            bool
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	dep               map[finalCloser]depSet
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	lastPut           map[*driverConn]string <span class="comment">// stacktrace of last conn&#39;s put; debug only</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	maxIdleCount      int                    <span class="comment">// zero means defaultMaxIdleConns; negative means 0</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	maxOpen           int                    <span class="comment">// &lt;= 0 means unlimited</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	maxLifetime       time.Duration          <span class="comment">// maximum amount of time a connection may be reused</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	maxIdleTime       time.Duration          <span class="comment">// maximum amount of time a connection may be idle before being closed</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	cleanerCh         chan struct{}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	waitCount         int64 <span class="comment">// Total number of connections waited for.</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	maxIdleClosed     int64 <span class="comment">// Total number of connections closed due to idle count.</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	maxIdleTimeClosed int64 <span class="comment">// Total number of connections closed due to idle time.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	maxLifetimeClosed int64 <span class="comment">// Total number of connections closed due to max connection lifetime limit.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	stop func() <span class="comment">// stop cancels the connection opener.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// connReuseStrategy determines how (*DB).conn returns database connections.</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>type connReuseStrategy uint8
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>const (
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	<span class="comment">// alwaysNewConn forces a new connection to the database.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	alwaysNewConn connReuseStrategy = iota
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	<span class="comment">// cachedOrNewConn returns a cached connection, if available, else waits</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	<span class="comment">// for one to become available (if MaxOpenConns has been reached) or</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	<span class="comment">// creates a new database connection.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	cachedOrNewConn
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">// driverConn wraps a driver.Conn with a mutex, to</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// be held during all calls into the Conn. (including any calls onto</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// interfaces returned via that Conn, such as calls on Tx, Stmt,</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// Result, Rows)</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>type driverConn struct {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	db        *DB
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	createdAt time.Time
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	sync.Mutex  <span class="comment">// guards following</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	ci          driver.Conn
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	needReset   bool <span class="comment">// The connection session should be reset before use if true.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	closed      bool
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	finalClosed bool <span class="comment">// ci.Close has been called</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	openStmt    map[*driverStmt]bool
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	<span class="comment">// guarded by db.mu</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	inUse      bool
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	returnedAt time.Time <span class="comment">// Time the connection was created or returned.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	onPut      []func()  <span class="comment">// code (with db.mu held) run when conn is next returned</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	dbmuClosed bool      <span class="comment">// same as closed, but guarded by db.mu, for removeClosedStmtLocked</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func (dc *driverConn) releaseConn(err error) {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	dc.db.putConn(dc, err, true)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>func (dc *driverConn) removeOpenStmt(ds *driverStmt) {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	dc.Lock()
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	defer dc.Unlock()
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	delete(dc.openStmt, ds)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>func (dc *driverConn) expired(timeout time.Duration) bool {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	if timeout &lt;= 0 {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		return false
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	return dc.createdAt.Add(timeout).Before(nowFunc())
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// resetSession checks if the driver connection needs the</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// session to be reset and if required, resets it.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>func (dc *driverConn) resetSession(ctx context.Context) error {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	dc.Lock()
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	defer dc.Unlock()
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	if !dc.needReset {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		return nil
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	if cr, ok := dc.ci.(driver.SessionResetter); ok {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		return cr.ResetSession(ctx)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	return nil
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">// validateConnection checks if the connection is valid and can</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// still be used. It also marks the session for reset if required.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>func (dc *driverConn) validateConnection(needsReset bool) bool {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	dc.Lock()
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	defer dc.Unlock()
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	if needsReset {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		dc.needReset = true
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	if cv, ok := dc.ci.(driver.Validator); ok {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		return cv.IsValid()
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	return true
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">// prepareLocked prepares the query on dc. When cg == nil the dc must keep track of</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span><span class="comment">// the prepared statements in a pool.</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>func (dc *driverConn) prepareLocked(ctx context.Context, cg stmtConnGrabber, query string) (*driverStmt, error) {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	si, err := ctxDriverPrepare(ctx, dc.ci, query)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	if err != nil {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		return nil, err
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	ds := &amp;driverStmt{Locker: dc, si: si}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// No need to manage open statements if there is a single connection grabber.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	if cg != nil {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		return ds, nil
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	<span class="comment">// Track each driverConn&#39;s open statements, so we can close them</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// before closing the conn.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// Wrap all driver.Stmt is *driverStmt to ensure they are only closed once.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	if dc.openStmt == nil {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		dc.openStmt = make(map[*driverStmt]bool)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	dc.openStmt[ds] = true
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	return ds, nil
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span><span class="comment">// the dc.db&#39;s Mutex is held.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>func (dc *driverConn) closeDBLocked() func() error {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	dc.Lock()
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	defer dc.Unlock()
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	if dc.closed {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return func() error { return errors.New(&#34;sql: duplicate driverConn close&#34;) }
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	dc.closed = true
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	return dc.db.removeDepLocked(dc, dc)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>func (dc *driverConn) Close() error {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	dc.Lock()
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	if dc.closed {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		dc.Unlock()
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		return errors.New(&#34;sql: duplicate driverConn close&#34;)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	dc.closed = true
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	dc.Unlock() <span class="comment">// not defer; removeDep finalClose calls may need to lock</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	<span class="comment">// And now updates that require holding dc.mu.Lock.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	dc.db.mu.Lock()
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	dc.dbmuClosed = true
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	fn := dc.db.removeDepLocked(dc, dc)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	dc.db.mu.Unlock()
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	return fn()
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>func (dc *driverConn) finalClose() error {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	var err error
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	<span class="comment">// Each *driverStmt has a lock to the dc. Copy the list out of the dc</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	<span class="comment">// before calling close on each stmt.</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	var openStmt []*driverStmt
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		openStmt = make([]*driverStmt, 0, len(dc.openStmt))
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		for ds := range dc.openStmt {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			openStmt = append(openStmt, ds)
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		dc.openStmt = nil
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	})
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	for _, ds := range openStmt {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		ds.Close()
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		dc.finalClosed = true
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		err = dc.ci.Close()
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		dc.ci = nil
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	})
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	dc.db.mu.Lock()
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	dc.db.numOpen--
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	dc.db.maybeOpenNewConnections()
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	dc.db.mu.Unlock()
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	dc.db.numClosed.Add(1)
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	return err
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// driverStmt associates a driver.Stmt with the</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// *driverConn from which it came, so the driverConn&#39;s lock can be</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// held during calls.</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>type driverStmt struct {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	sync.Locker <span class="comment">// the *driverConn</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	si          driver.Stmt
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	closed      bool
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	closeErr    error <span class="comment">// return value of previous Close call</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// Close ensures driver.Stmt is only closed once and always returns the same</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// result.</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>func (ds *driverStmt) Close() error {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	ds.Lock()
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	defer ds.Unlock()
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	if ds.closed {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		return ds.closeErr
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	ds.closed = true
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	ds.closeErr = ds.si.Close()
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	return ds.closeErr
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// depSet is a finalCloser&#39;s outstanding dependencies</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>type depSet map[any]bool <span class="comment">// set of true bools</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// The finalCloser interface is used by (*DB).addDep and related</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">// dependency reference counting.</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>type finalCloser interface {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	<span class="comment">// finalClose is called when the reference count of an object</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	<span class="comment">// goes to zero. (*DB).mu is not held while calling it.</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	finalClose() error
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span><span class="comment">// addDep notes that x now depends on dep, and x&#39;s finalClose won&#39;t be</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span><span class="comment">// called until all of x&#39;s dependencies are removed with removeDep.</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>func (db *DB) addDep(x finalCloser, dep any) {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	defer db.mu.Unlock()
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	db.addDepLocked(x, dep)
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>func (db *DB) addDepLocked(x finalCloser, dep any) {
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	if db.dep == nil {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		db.dep = make(map[finalCloser]depSet)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	xdep := db.dep[x]
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	if xdep == nil {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		xdep = make(depSet)
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		db.dep[x] = xdep
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	xdep[dep] = true
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">// removeDep notes that x no longer depends on dep.</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">// If x still has dependencies, nil is returned.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">// If x no longer has any dependencies, its finalClose method will be</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// called and its error value will be returned.</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>func (db *DB) removeDep(x finalCloser, dep any) error {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	fn := db.removeDepLocked(x, dep)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	return fn()
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>func (db *DB) removeDepLocked(x finalCloser, dep any) func() error {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	xdep, ok := db.dep[x]
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	if !ok {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unpaired removeDep: no deps for %T&#34;, x))
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	l0 := len(xdep)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	delete(xdep, dep)
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	switch len(xdep) {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	case l0:
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		<span class="comment">// Nothing removed. Shouldn&#39;t happen.</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unpaired removeDep: no %T dep on %T&#34;, dep, x))
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	case 0:
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		<span class="comment">// No more dependencies.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		delete(db.dep, x)
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		return x.finalClose
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	default:
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		<span class="comment">// Dependencies remain.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		return func() error { return nil }
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span><span class="comment">// This is the size of the connectionOpener request chan (DB.openerCh).</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// This value should be larger than the maximum typical value</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span><span class="comment">// used for DB.maxOpen. If maxOpen is significantly larger than</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span><span class="comment">// connectionRequestQueueSize then it is possible for ALL calls into the *DB</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span><span class="comment">// to block until the connectionOpener can satisfy the backlog of requests.</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>var connectionRequestQueueSize = 1000000
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>type dsnConnector struct {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	dsn    string
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	driver driver.Driver
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>func (t dsnConnector) Connect(_ context.Context) (driver.Conn, error) {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	return t.driver.Open(t.dsn)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>func (t dsnConnector) Driver() driver.Driver {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	return t.driver
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span><span class="comment">// OpenDB opens a database using a [driver.Connector], allowing drivers to</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span><span class="comment">// bypass a string based data source name.</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span><span class="comment">// Most users will open a database via a driver-specific connection</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span><span class="comment">// helper function that returns a [*DB]. No database drivers are included</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span><span class="comment">// in the Go standard library. See https://golang.org/s/sqldrivers for</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span><span class="comment">// a list of third-party drivers.</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span><span class="comment">// OpenDB may just validate its arguments without creating a connection</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// to the database. To verify that the data source name is valid, call</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// [DB.Ping].</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span><span class="comment">// The returned [DB] is safe for concurrent use by multiple goroutines</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span><span class="comment">// and maintains its own pool of idle connections. Thus, the OpenDB</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span><span class="comment">// function should be called just once. It is rarely necessary to</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span><span class="comment">// close a [DB].</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>func OpenDB(c driver.Connector) *DB {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	ctx, cancel := context.WithCancel(context.Background())
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	db := &amp;DB{
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		connector:    c,
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		openerCh:     make(chan struct{}, connectionRequestQueueSize),
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		lastPut:      make(map[*driverConn]string),
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		connRequests: make(map[uint64]chan connRequest),
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		stop:         cancel,
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	go db.connectionOpener(ctx)
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	return db
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// Open opens a database specified by its database driver name and a</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">// driver-specific data source name, usually consisting of at least a</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span><span class="comment">// database name and connection information.</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span><span class="comment">// Most users will open a database via a driver-specific connection</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span><span class="comment">// helper function that returns a [*DB]. No database drivers are included</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span><span class="comment">// in the Go standard library. See https://golang.org/s/sqldrivers for</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span><span class="comment">// a list of third-party drivers.</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span><span class="comment">// Open may just validate its arguments without creating a connection</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span><span class="comment">// to the database. To verify that the data source name is valid, call</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span><span class="comment">// [DB.Ping].</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span><span class="comment">// The returned [DB] is safe for concurrent use by multiple goroutines</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span><span class="comment">// and maintains its own pool of idle connections. Thus, the Open</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span><span class="comment">// function should be called just once. It is rarely necessary to</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span><span class="comment">// close a [DB].</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>func Open(driverName, dataSourceName string) (*DB, error) {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	driversMu.RLock()
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	driveri, ok := drivers[driverName]
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	driversMu.RUnlock()
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	if !ok {
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;sql: unknown driver %q (forgotten import?)&#34;, driverName)
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	if driverCtx, ok := driveri.(driver.DriverContext); ok {
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		connector, err := driverCtx.OpenConnector(dataSourceName)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>		if err != nil {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>			return nil, err
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		}
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>		return OpenDB(connector), nil
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	}
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	return OpenDB(dsnConnector{dsn: dataSourceName, driver: driveri}), nil
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>func (db *DB) pingDC(ctx context.Context, dc *driverConn, release func(error)) error {
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	var err error
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	if pinger, ok := dc.ci.(driver.Pinger); ok {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		withLock(dc, func() {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			err = pinger.Ping(ctx)
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		})
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	release(err)
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	return err
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>}
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// PingContext verifies a connection to the database is still alive,</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// establishing a connection if necessary.</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>func (db *DB) PingContext(ctx context.Context) error {
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	var dc *driverConn
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	var err error
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>		dc, err = db.conn(ctx, strategy)
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>		return err
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	})
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	if err != nil {
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		return err
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	return db.pingDC(ctx, dc, dc.releaseConn)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>}
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span><span class="comment">// Ping verifies a connection to the database is still alive,</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span><span class="comment">// establishing a connection if necessary.</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span><span class="comment">// Ping uses [context.Background] internally; to specify the context, use</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// [DB.PingContext].</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>func (db *DB) Ping() error {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	return db.PingContext(context.Background())
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span><span class="comment">// Close closes the database and prevents new queries from starting.</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span><span class="comment">// Close then waits for all queries that have started processing on the server</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span><span class="comment">// to finish.</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">// It is rare to Close a [DB], as the [DB] handle is meant to be</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// long-lived and shared between many goroutines.</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>func (db *DB) Close() error {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	if db.closed { <span class="comment">// Make DB.Close idempotent</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		return nil
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	if db.cleanerCh != nil {
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		close(db.cleanerCh)
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	}
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	var err error
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	fns := make([]func() error, 0, len(db.freeConn))
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	for _, dc := range db.freeConn {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		fns = append(fns, dc.closeDBLocked())
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	}
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	db.freeConn = nil
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	db.closed = true
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	for _, req := range db.connRequests {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		close(req)
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	for _, fn := range fns {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		err1 := fn()
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		if err1 != nil {
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>			err = err1
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		}
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	db.stop()
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	if c, ok := db.connector.(io.Closer); ok {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>		err1 := c.Close()
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		if err1 != nil {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			err = err1
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>		}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	return err
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>const defaultMaxIdleConns = 2
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>func (db *DB) maxIdleConnsLocked() int {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	n := db.maxIdleCount
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	switch {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	case n == 0:
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>		<span class="comment">// TODO(bradfitz): ask driver, if supported, for its default preference</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		return defaultMaxIdleConns
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	case n &lt; 0:
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>		return 0
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	default:
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>		return n
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	}
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>}
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>func (db *DB) shortestIdleTimeLocked() time.Duration {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	if db.maxIdleTime &lt;= 0 {
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		return db.maxLifetime
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	}
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	if db.maxLifetime &lt;= 0 {
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		return db.maxIdleTime
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	}
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	return min(db.maxIdleTime, db.maxLifetime)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>}
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span><span class="comment">// SetMaxIdleConns sets the maximum number of connections in the idle</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span><span class="comment">// connection pool.</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L973" class="ln">   973&nbsp;&nbsp;</span><span class="comment">// If MaxOpenConns is greater than 0 but less than the new MaxIdleConns,</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span><span class="comment">// then the new MaxIdleConns will be reduced to match the MaxOpenConns limit.</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span><span class="comment">// If n &lt;= 0, no idle connections are retained.</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span><span class="comment">// The default max idle connections is currently 2. This may change in</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span><span class="comment">// a future release.</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>func (db *DB) SetMaxIdleConns(n int) {
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		db.maxIdleCount = n
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	} else {
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		<span class="comment">// No idle connections.</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		db.maxIdleCount = -1
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	<span class="comment">// Make sure maxIdle doesn&#39;t exceed maxOpen</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	if db.maxOpen &gt; 0 &amp;&amp; db.maxIdleConnsLocked() &gt; db.maxOpen {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		db.maxIdleCount = db.maxOpen
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	var closing []*driverConn
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	idleCount := len(db.freeConn)
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	maxIdle := db.maxIdleConnsLocked()
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	if idleCount &gt; maxIdle {
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		closing = db.freeConn[maxIdle:]
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		db.freeConn = db.freeConn[:maxIdle]
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	db.maxIdleClosed += int64(len(closing))
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	for _, c := range closing {
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		c.Close()
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>}
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">// SetMaxOpenConns sets the maximum number of open connections to the database.</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span><span class="comment">// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// MaxIdleConns, then MaxIdleConns will be reduced to match the new</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span><span class="comment">// MaxOpenConns limit.</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span><span class="comment">// If n &lt;= 0, then there is no limit on the number of open connections.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span><span class="comment">// The default is 0 (unlimited).</span>
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>func (db *DB) SetMaxOpenConns(n int) {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	db.maxOpen = n
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		db.maxOpen = 0
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	}
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	syncMaxIdle := db.maxOpen &gt; 0 &amp;&amp; db.maxIdleConnsLocked() &gt; db.maxOpen
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	if syncMaxIdle {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		db.SetMaxIdleConns(n)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	}
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>}
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span><span class="comment">// SetConnMaxLifetime sets the maximum amount of time a connection may be reused.</span>
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span><span class="comment">// Expired connections may be closed lazily before reuse.</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span><span class="comment">// If d &lt;= 0, connections are not closed due to a connection&#39;s age.</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>func (db *DB) SetConnMaxLifetime(d time.Duration) {
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	if d &lt; 0 {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>		d = 0
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	}
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	<span class="comment">// Wake cleaner up when lifetime is shortened.</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	if d &gt; 0 &amp;&amp; d &lt; db.maxLifetime &amp;&amp; db.cleanerCh != nil {
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		select {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>		case db.cleanerCh &lt;- struct{}{}:
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>		default:
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	db.maxLifetime = d
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	db.startCleanerLocked()
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>}
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span><span class="comment">// SetConnMaxIdleTime sets the maximum amount of time a connection may be idle.</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span><span class="comment">// Expired connections may be closed lazily before reuse.</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span><span class="comment">// If d &lt;= 0, connections are not closed due to a connection&#39;s idle time.</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>func (db *DB) SetConnMaxIdleTime(d time.Duration) {
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	if d &lt; 0 {
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		d = 0
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	defer db.mu.Unlock()
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	<span class="comment">// Wake cleaner up when idle time is shortened.</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	if d &gt; 0 &amp;&amp; d &lt; db.maxIdleTime &amp;&amp; db.cleanerCh != nil {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		select {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		case db.cleanerCh &lt;- struct{}{}:
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		default:
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>		}
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	db.maxIdleTime = d
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	db.startCleanerLocked()
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>}
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span><span class="comment">// startCleanerLocked starts connectionCleaner if needed.</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>func (db *DB) startCleanerLocked() {
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	if (db.maxLifetime &gt; 0 || db.maxIdleTime &gt; 0) &amp;&amp; db.numOpen &gt; 0 &amp;&amp; db.cleanerCh == nil {
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>		db.cleanerCh = make(chan struct{}, 1)
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		go db.connectionCleaner(db.shortestIdleTimeLocked())
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	}
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>}
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>func (db *DB) connectionCleaner(d time.Duration) {
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	const minInterval = time.Second
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	if d &lt; minInterval {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		d = minInterval
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	t := time.NewTimer(d)
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	for {
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>		select {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>		case &lt;-t.C:
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>		case &lt;-db.cleanerCh: <span class="comment">// maxLifetime was changed or db was closed.</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>		}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		db.mu.Lock()
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		d = db.shortestIdleTimeLocked()
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		if db.closed || db.numOpen == 0 || d &lt;= 0 {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>			db.cleanerCh = nil
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>			db.mu.Unlock()
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>			return
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		}
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		d, closing := db.connectionCleanerRunLocked(d)
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		for _, c := range closing {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>			c.Close()
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>		if d &lt; minInterval {
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>			d = minInterval
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		}
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		if !t.Stop() {
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>			select {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			case &lt;-t.C:
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>			default:
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>			}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		}
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>		t.Reset(d)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	}
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>}
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span><span class="comment">// connectionCleanerRunLocked removes connections that should be closed from</span>
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span><span class="comment">// freeConn and returns them along side an updated duration to the next check</span>
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span><span class="comment">// if a quicker check is required to ensure connections are checked appropriately.</span>
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>func (db *DB) connectionCleanerRunLocked(d time.Duration) (time.Duration, []*driverConn) {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	var idleClosing int64
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>	var closing []*driverConn
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	if db.maxIdleTime &gt; 0 {
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>		<span class="comment">// As freeConn is ordered by returnedAt process</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		<span class="comment">// in reverse order to minimise the work needed.</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>		idleSince := nowFunc().Add(-db.maxIdleTime)
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>		last := len(db.freeConn) - 1
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		for i := last; i &gt;= 0; i-- {
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>			c := db.freeConn[i]
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>			if c.returnedAt.Before(idleSince) {
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>				i++
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>				closing = db.freeConn[:i:i]
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>				db.freeConn = db.freeConn[i:]
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>				idleClosing = int64(len(closing))
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>				db.maxIdleTimeClosed += idleClosing
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>				break
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>			}
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		if len(db.freeConn) &gt; 0 {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>			c := db.freeConn[0]
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>			if d2 := c.returnedAt.Sub(idleSince); d2 &lt; d {
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>				<span class="comment">// Ensure idle connections are cleaned up as soon as</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>				<span class="comment">// possible.</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>				d = d2
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>			}
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		}
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	if db.maxLifetime &gt; 0 {
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		expiredSince := nowFunc().Add(-db.maxLifetime)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		for i := 0; i &lt; len(db.freeConn); i++ {
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>			c := db.freeConn[i]
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>			if c.createdAt.Before(expiredSince) {
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>				closing = append(closing, c)
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>				last := len(db.freeConn) - 1
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>				<span class="comment">// Use slow delete as order is required to ensure</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>				<span class="comment">// connections are reused least idle time first.</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>				copy(db.freeConn[i:], db.freeConn[i+1:])
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>				db.freeConn[last] = nil
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>				db.freeConn = db.freeConn[:last]
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>				i--
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			} else if d2 := c.createdAt.Sub(expiredSince); d2 &lt; d {
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>				<span class="comment">// Prevent connections sitting the freeConn when they</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>				<span class="comment">// have expired by updating our next deadline d.</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>				d = d2
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>			}
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		}
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>		db.maxLifetimeClosed += int64(len(closing)) - idleClosing
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	return d, closing
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>}
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span><span class="comment">// DBStats contains database statistics.</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>type DBStats struct {
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	MaxOpenConnections int <span class="comment">// Maximum number of open connections to the database.</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	<span class="comment">// Pool Status</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>	OpenConnections int <span class="comment">// The number of established connections both in use and idle.</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>	InUse           int <span class="comment">// The number of connections currently in use.</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	Idle            int <span class="comment">// The number of idle connections.</span>
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	<span class="comment">// Counters</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	WaitCount         int64         <span class="comment">// The total number of connections waited for.</span>
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	WaitDuration      time.Duration <span class="comment">// The total time blocked waiting for a new connection.</span>
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	MaxIdleClosed     int64         <span class="comment">// The total number of connections closed due to SetMaxIdleConns.</span>
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>	MaxIdleTimeClosed int64         <span class="comment">// The total number of connections closed due to SetConnMaxIdleTime.</span>
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	MaxLifetimeClosed int64         <span class="comment">// The total number of connections closed due to SetConnMaxLifetime.</span>
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>}
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span><span class="comment">// Stats returns database statistics.</span>
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>func (db *DB) Stats() DBStats {
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	wait := db.waitDuration.Load()
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	defer db.mu.Unlock()
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	stats := DBStats{
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		MaxOpenConnections: db.maxOpen,
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		Idle:            len(db.freeConn),
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		OpenConnections: db.numOpen,
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>		InUse:           db.numOpen - len(db.freeConn),
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		WaitCount:         db.waitCount,
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		WaitDuration:      time.Duration(wait),
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>		MaxIdleClosed:     db.maxIdleClosed,
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>		MaxIdleTimeClosed: db.maxIdleTimeClosed,
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>		MaxLifetimeClosed: db.maxLifetimeClosed,
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>	}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	return stats
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span><span class="comment">// Assumes db.mu is locked.</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span><span class="comment">// If there are connRequests and the connection limit hasn&#39;t been reached,</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span><span class="comment">// then tell the connectionOpener to open new connections.</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>func (db *DB) maybeOpenNewConnections() {
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	numRequests := len(db.connRequests)
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>	if db.maxOpen &gt; 0 {
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		numCanOpen := db.maxOpen - db.numOpen
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>		if numRequests &gt; numCanOpen {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>			numRequests = numCanOpen
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>		}
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	}
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>	for numRequests &gt; 0 {
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		db.numOpen++ <span class="comment">// optimistically</span>
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>		numRequests--
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>		if db.closed {
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>			return
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		}
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>		db.openerCh &lt;- struct{}{}
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>	}
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>}
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span><span class="comment">// Runs in a separate goroutine, opens new connections when requested.</span>
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>func (db *DB) connectionOpener(ctx context.Context) {
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>	for {
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>		select {
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>			return
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		case &lt;-db.openerCh:
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>			db.openNewConnection(ctx)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>		}
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>	}
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>}
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span><span class="comment">// Open one new connection</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>func (db *DB) openNewConnection(ctx context.Context) {
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>	<span class="comment">// maybeOpenNewConnections has already executed db.numOpen++ before it sent</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>	<span class="comment">// on db.openerCh. This function must execute db.numOpen-- if the</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>	<span class="comment">// connection fails or is closed before returning.</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	ci, err := db.connector.Connect(ctx)
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>	defer db.mu.Unlock()
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>	if db.closed {
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>		if err == nil {
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>			ci.Close()
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		}
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		db.numOpen--
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>		return
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	}
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	if err != nil {
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		db.numOpen--
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>		db.putConnDBLocked(nil, err)
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>		db.maybeOpenNewConnections()
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		return
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>	}
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	dc := &amp;driverConn{
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>		db:         db,
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>		createdAt:  nowFunc(),
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		returnedAt: nowFunc(),
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>		ci:         ci,
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>	}
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>	if db.putConnDBLocked(dc, err) {
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>		db.addDepLocked(dc, dc)
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	} else {
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>		db.numOpen--
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>		ci.Close()
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	}
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>}
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span><span class="comment">// connRequest represents one request for a new connection</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span><span class="comment">// When there are no idle connections available, DB.conn will create</span>
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span><span class="comment">// a new connRequest and put it on the db.connRequests list.</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>type connRequest struct {
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	conn *driverConn
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	err  error
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>}
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>var errDBClosed = errors.New(&#34;sql: database is closed&#34;)
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span><span class="comment">// nextRequestKeyLocked returns the next connection request key.</span>
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span><span class="comment">// It is assumed that nextRequest will not overflow.</span>
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>func (db *DB) nextRequestKeyLocked() uint64 {
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>	next := db.nextRequest
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>	db.nextRequest++
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	return next
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>}
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span><span class="comment">// conn returns a newly-opened or cached *driverConn.</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>func (db *DB) conn(ctx context.Context, strategy connReuseStrategy) (*driverConn, error) {
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>	if db.closed {
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>		return nil, errDBClosed
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	}
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>	<span class="comment">// Check if the context is expired.</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>	select {
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	default:
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>		return nil, ctx.Err()
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	lifetime := db.maxLifetime
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	<span class="comment">// Prefer a free connection, if possible.</span>
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	last := len(db.freeConn) - 1
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>	if strategy == cachedOrNewConn &amp;&amp; last &gt;= 0 {
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>		<span class="comment">// Reuse the lowest idle time connection so we can close</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>		<span class="comment">// connections which remain idle as soon as possible.</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>		conn := db.freeConn[last]
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>		db.freeConn = db.freeConn[:last]
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>		conn.inUse = true
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>		if conn.expired(lifetime) {
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>			db.maxLifetimeClosed++
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>			db.mu.Unlock()
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>			conn.Close()
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>			return nil, driver.ErrBadConn
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>		}
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>		<span class="comment">// Reset the session if required.</span>
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>		if err := conn.resetSession(ctx); errors.Is(err, driver.ErrBadConn) {
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>			conn.Close()
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>			return nil, err
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		}
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>		return conn, nil
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>	}
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>	<span class="comment">// Out of free connections or we were asked not to use one. If we&#39;re not</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>	<span class="comment">// allowed to open any more connections, make a request and wait.</span>
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	if db.maxOpen &gt; 0 &amp;&amp; db.numOpen &gt;= db.maxOpen {
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>		<span class="comment">// Make the connRequest channel. It&#39;s buffered so that the</span>
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		<span class="comment">// connectionOpener doesn&#39;t block while waiting for the req to be read.</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>		req := make(chan connRequest, 1)
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		reqKey := db.nextRequestKeyLocked()
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>		db.connRequests[reqKey] = req
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>		db.waitCount++
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>		waitStart := nowFunc()
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>		<span class="comment">// Timeout the connection request with the context.</span>
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>		select {
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>			<span class="comment">// Remove the connection request and ensure no value has been sent</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>			<span class="comment">// on it after removing.</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>			db.mu.Lock()
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>			delete(db.connRequests, reqKey)
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>			db.mu.Unlock()
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>			db.waitDuration.Add(int64(time.Since(waitStart)))
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>			select {
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>			default:
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>			case ret, ok := &lt;-req:
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>				if ok &amp;&amp; ret.conn != nil {
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>					db.putConn(ret.conn, ret.err, false)
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>				}
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>			}
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>			return nil, ctx.Err()
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>		case ret, ok := &lt;-req:
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>			db.waitDuration.Add(int64(time.Since(waitStart)))
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>			if !ok {
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>				return nil, errDBClosed
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>			}
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>			<span class="comment">// Only check if the connection is expired if the strategy is cachedOrNewConns.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>			<span class="comment">// If we require a new connection, just re-use the connection without looking</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>			<span class="comment">// at the expiry time. If it is expired, it will be checked when it is placed</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>			<span class="comment">// back into the connection pool.</span>
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>			<span class="comment">// This prioritizes giving a valid connection to a client over the exact connection</span>
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>			<span class="comment">// lifetime, which could expire exactly after this point anyway.</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>			if strategy == cachedOrNewConn &amp;&amp; ret.err == nil &amp;&amp; ret.conn.expired(lifetime) {
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>				db.mu.Lock()
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>				db.maxLifetimeClosed++
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>				db.mu.Unlock()
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>				ret.conn.Close()
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>				return nil, driver.ErrBadConn
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>			}
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>			if ret.conn == nil {
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>				return nil, ret.err
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>			}
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>			<span class="comment">// Reset the session if required.</span>
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>			if err := ret.conn.resetSession(ctx); errors.Is(err, driver.ErrBadConn) {
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>				ret.conn.Close()
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>				return nil, err
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>			}
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>			return ret.conn, ret.err
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>		}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>	}
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>	db.numOpen++ <span class="comment">// optimistically</span>
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	ci, err := db.connector.Connect(ctx)
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>	if err != nil {
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		db.mu.Lock()
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>		db.numOpen-- <span class="comment">// correct for earlier optimism</span>
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>		db.maybeOpenNewConnections()
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>		return nil, err
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	}
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	dc := &amp;driverConn{
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>		db:         db,
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		createdAt:  nowFunc(),
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>		returnedAt: nowFunc(),
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>		ci:         ci,
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>		inUse:      true,
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>	}
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	db.addDepLocked(dc, dc)
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	return dc, nil
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>}
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span><span class="comment">// putConnHook is a hook for testing.</span>
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>var putConnHook func(*DB, *driverConn)
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// noteUnusedDriverStatement notes that ds is no longer used and should</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span><span class="comment">// be closed whenever possible (when c is next not in use), unless c is</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span><span class="comment">// already closed.</span>
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>func (db *DB) noteUnusedDriverStatement(c *driverConn, ds *driverStmt) {
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>	defer db.mu.Unlock()
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	if c.inUse {
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>		c.onPut = append(c.onPut, func() {
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>			ds.Close()
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>		})
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>	} else {
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>		c.Lock()
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>		fc := c.finalClosed
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		c.Unlock()
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		if !fc {
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>			ds.Close()
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>		}
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>	}
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>}
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span><span class="comment">// debugGetPut determines whether getConn &amp; putConn calls&#39; stack traces</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span><span class="comment">// are returned for more verbose crashes.</span>
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>const debugGetPut = false
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span><span class="comment">// putConn adds a connection to the db&#39;s free pool.</span>
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span><span class="comment">// err is optionally the last error that occurred on this connection.</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>func (db *DB) putConn(dc *driverConn, err error, resetSession bool) {
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>	if !errors.Is(err, driver.ErrBadConn) {
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>		if !dc.validateConnection(resetSession) {
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>			err = driver.ErrBadConn
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>		}
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	}
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>	db.mu.Lock()
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	if !dc.inUse {
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		if debugGetPut {
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>			fmt.Printf(&#34;putConn(%v) DUPLICATE was: %s\n\nPREVIOUS was: %s&#34;, dc, stack(), db.lastPut[dc])
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>		}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>		panic(&#34;sql: connection returned that was never out&#34;)
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	}
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>	if !errors.Is(err, driver.ErrBadConn) &amp;&amp; dc.expired(db.maxLifetime) {
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>		db.maxLifetimeClosed++
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>		err = driver.ErrBadConn
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>	}
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>	if debugGetPut {
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>		db.lastPut[dc] = stack()
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	}
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>	dc.inUse = false
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>	dc.returnedAt = nowFunc()
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	for _, fn := range dc.onPut {
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>		fn()
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>	}
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>	dc.onPut = nil
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>	if errors.Is(err, driver.ErrBadConn) {
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t reuse bad connections.</span>
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>		<span class="comment">// Since the conn is considered bad and is being discarded, treat it</span>
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>		<span class="comment">// as closed. Don&#39;t decrement the open count here, finalClose will</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>		<span class="comment">// take care of that.</span>
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>		db.maybeOpenNewConnections()
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>		db.mu.Unlock()
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>		dc.Close()
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>		return
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>	}
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>	if putConnHook != nil {
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>		putConnHook(db, dc)
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	}
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>	added := db.putConnDBLocked(dc, nil)
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	db.mu.Unlock()
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	if !added {
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>		dc.Close()
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>		return
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	}
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>}
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span><span class="comment">// Satisfy a connRequest or put the driverConn in the idle pool and return true</span>
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span><span class="comment">// or return false.</span>
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span><span class="comment">// putConnDBLocked will satisfy a connRequest if there is one, or it will</span>
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span><span class="comment">// return the *driverConn to the freeConn list if err == nil and the idle</span>
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span><span class="comment">// connection limit will not be exceeded.</span>
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span><span class="comment">// If err != nil, the value of dc is ignored.</span>
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span><span class="comment">// If err == nil, then dc must not equal nil.</span>
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span><span class="comment">// If a connRequest was fulfilled or the *driverConn was placed in the</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span><span class="comment">// freeConn list, then true is returned, otherwise false is returned.</span>
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>func (db *DB) putConnDBLocked(dc *driverConn, err error) bool {
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>	if db.closed {
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>		return false
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>	}
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>	if db.maxOpen &gt; 0 &amp;&amp; db.numOpen &gt; db.maxOpen {
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>		return false
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>	}
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>	if c := len(db.connRequests); c &gt; 0 {
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>		var req chan connRequest
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>		var reqKey uint64
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>		for reqKey, req = range db.connRequests {
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>			break
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>		}
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>		delete(db.connRequests, reqKey) <span class="comment">// Remove from pending requests.</span>
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>		if err == nil {
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>			dc.inUse = true
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>		}
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>		req &lt;- connRequest{
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>			conn: dc,
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>			err:  err,
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>		}
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>		return true
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>	} else if err == nil &amp;&amp; !db.closed {
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>		if db.maxIdleConnsLocked() &gt; len(db.freeConn) {
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>			db.freeConn = append(db.freeConn, dc)
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>			db.startCleanerLocked()
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>			return true
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>		}
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>		db.maxIdleClosed++
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>	}
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>	return false
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>}
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span><span class="comment">// maxBadConnRetries is the number of maximum retries if the driver returns</span>
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span><span class="comment">// driver.ErrBadConn to signal a broken connection before forcing a new</span>
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span><span class="comment">// connection to be opened.</span>
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>const maxBadConnRetries = 2
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>func (db *DB) retry(fn func(strategy connReuseStrategy) error) error {
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>	for i := int64(0); i &lt; maxBadConnRetries; i++ {
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>		err := fn(cachedOrNewConn)
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>		<span class="comment">// retry if err is driver.ErrBadConn</span>
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		if err == nil || !errors.Is(err, driver.ErrBadConn) {
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>			return err
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>		}
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>	}
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>	return fn(alwaysNewConn)
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>}
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span><span class="comment">// PrepareContext creates a prepared statement for later queries or executions.</span>
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span><span class="comment">// Multiple queries or executions may be run concurrently from the</span>
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span><span class="comment">// returned statement.</span>
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span><span class="comment">// The caller must call the statement&#39;s [*Stmt.Close] method</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span><span class="comment">// when the statement is no longer needed.</span>
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span><span class="comment">// The provided context is used for the preparation of the statement, not for the</span>
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span><span class="comment">// execution of the statement.</span>
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>func (db *DB) PrepareContext(ctx context.Context, query string) (*Stmt, error) {
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>	var stmt *Stmt
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>	var err error
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>		stmt, err = db.prepare(ctx, query, strategy)
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>		return err
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>	})
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>	return stmt, err
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>}
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span><span class="comment">// Prepare creates a prepared statement for later queries or executions.</span>
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span><span class="comment">// Multiple queries or executions may be run concurrently from the</span>
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span><span class="comment">// returned statement.</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span><span class="comment">// The caller must call the statement&#39;s [*Stmt.Close] method</span>
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span><span class="comment">// when the statement is no longer needed.</span>
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span><span class="comment">// Prepare uses [context.Background] internally; to specify the context, use</span>
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span><span class="comment">// [DB.PrepareContext].</span>
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>func (db *DB) Prepare(query string) (*Stmt, error) {
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>	return db.PrepareContext(context.Background(), query)
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>}
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>func (db *DB) prepare(ctx context.Context, query string, strategy connReuseStrategy) (*Stmt, error) {
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>	<span class="comment">// TODO: check if db.driver supports an optional</span>
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>	<span class="comment">// driver.Preparer interface and call that instead, if so,</span>
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	<span class="comment">// otherwise we make a prepared statement that&#39;s bound</span>
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>	<span class="comment">// to a connection, and to execute this prepared statement</span>
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>	<span class="comment">// we either need to use this connection (if it&#39;s free), else</span>
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	<span class="comment">// get a new connection + re-prepare + execute on that one.</span>
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>	dc, err := db.conn(ctx, strategy)
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	if err != nil {
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>		return nil, err
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>	}
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>	return db.prepareDC(ctx, dc, dc.releaseConn, nil, query)
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>}
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span><span class="comment">// prepareDC prepares a query on the driverConn and calls release before</span>
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span><span class="comment">// returning. When cg == nil it implies that a connection pool is used, and</span>
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span><span class="comment">// when cg != nil only a single driver connection is used.</span>
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>func (db *DB) prepareDC(ctx context.Context, dc *driverConn, release func(error), cg stmtConnGrabber, query string) (*Stmt, error) {
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>	var ds *driverStmt
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>	var err error
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>	defer func() {
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>		release(err)
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>	}()
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>		ds, err = dc.prepareLocked(ctx, cg, query)
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>	})
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>	if err != nil {
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>		return nil, err
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>	}
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>	stmt := &amp;Stmt{
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>		db:    db,
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>		query: query,
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>		cg:    cg,
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>		cgds:  ds,
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>	}
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>	<span class="comment">// When cg == nil this statement will need to keep track of various</span>
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>	<span class="comment">// connections they are prepared on and record the stmt dependency on</span>
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>	<span class="comment">// the DB.</span>
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>	if cg == nil {
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>		stmt.css = []connStmt{{dc, ds}}
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>		stmt.lastNumClosed = db.numClosed.Load()
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>		db.addDep(stmt, stmt)
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>	}
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>	return stmt, nil
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>}
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span><span class="comment">// ExecContext executes a query without returning any rows.</span>
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>func (db *DB) ExecContext(ctx context.Context, query string, args ...any) (Result, error) {
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>	var res Result
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	var err error
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>		res, err = db.exec(ctx, query, args, strategy)
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>		return err
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>	})
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>	return res, err
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>}
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span><span class="comment">// Exec executes a query without returning any rows.</span>
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span><span class="comment">// Exec uses [context.Background] internally; to specify the context, use</span>
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span><span class="comment">// [DB.ExecContext].</span>
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>func (db *DB) Exec(query string, args ...any) (Result, error) {
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>	return db.ExecContext(context.Background(), query, args...)
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>}
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>func (db *DB) exec(ctx context.Context, query string, args []any, strategy connReuseStrategy) (Result, error) {
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>	dc, err := db.conn(ctx, strategy)
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	if err != nil {
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>		return nil, err
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>	}
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>	return db.execDC(ctx, dc, dc.releaseConn, query, args)
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>}
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>func (db *DB) execDC(ctx context.Context, dc *driverConn, release func(error), query string, args []any) (res Result, err error) {
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>	defer func() {
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>		release(err)
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	}()
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>	execerCtx, ok := dc.ci.(driver.ExecerContext)
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	var execer driver.Execer
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>	if !ok {
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>		execer, ok = dc.ci.(driver.Execer)
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>	}
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	if ok {
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>		var nvdargs []driver.NamedValue
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>		var resi driver.Result
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>		withLock(dc, func() {
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>			nvdargs, err = driverArgsConnLocked(dc.ci, nil, args)
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>			if err != nil {
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>				return
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>			}
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>			resi, err = ctxDriverExec(ctx, execerCtx, execer, query, nvdargs)
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>		})
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>		if err != driver.ErrSkip {
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>			if err != nil {
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>				return nil, err
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>			}
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>			return driverResult{dc, resi}, nil
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>		}
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>	}
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>	var si driver.Stmt
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>		si, err = ctxDriverPrepare(ctx, dc.ci, query)
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	})
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>	if err != nil {
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>		return nil, err
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>	}
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>	ds := &amp;driverStmt{Locker: dc, si: si}
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>	defer ds.Close()
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>	return resultFromStatement(ctx, dc.ci, ds, args...)
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>}
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span><span class="comment">// QueryContext executes a query that returns rows, typically a SELECT.</span>
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>func (db *DB) QueryContext(ctx context.Context, query string, args ...any) (*Rows, error) {
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>	var rows *Rows
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>	var err error
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>		rows, err = db.query(ctx, query, args, strategy)
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>		return err
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>	})
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>	return rows, err
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>}
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span><span class="comment">// Query executes a query that returns rows, typically a SELECT.</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span><span class="comment">// Query uses [context.Background] internally; to specify the context, use</span>
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span><span class="comment">// [DB.QueryContext].</span>
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>func (db *DB) Query(query string, args ...any) (*Rows, error) {
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>	return db.QueryContext(context.Background(), query, args...)
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>}
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>func (db *DB) query(ctx context.Context, query string, args []any, strategy connReuseStrategy) (*Rows, error) {
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>	dc, err := db.conn(ctx, strategy)
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>	if err != nil {
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		return nil, err
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>	}
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>	return db.queryDC(ctx, nil, dc, dc.releaseConn, query, args)
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>}
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span><span class="comment">// queryDC executes a query on the given connection.</span>
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span><span class="comment">// The connection gets released by the releaseConn function.</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span><span class="comment">// The ctx context is from a query method and the txctx context is from an</span>
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span><span class="comment">// optional transaction context.</span>
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>func (db *DB) queryDC(ctx, txctx context.Context, dc *driverConn, releaseConn func(error), query string, args []any) (*Rows, error) {
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>	queryerCtx, ok := dc.ci.(driver.QueryerContext)
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>	var queryer driver.Queryer
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>	if !ok {
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>		queryer, ok = dc.ci.(driver.Queryer)
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>	}
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>	if ok {
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>		var nvdargs []driver.NamedValue
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>		var rowsi driver.Rows
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>		var err error
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>		withLock(dc, func() {
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>			nvdargs, err = driverArgsConnLocked(dc.ci, nil, args)
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>			if err != nil {
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>				return
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>			}
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>			rowsi, err = ctxDriverQuery(ctx, queryerCtx, queryer, query, nvdargs)
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>		})
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>		if err != driver.ErrSkip {
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>			if err != nil {
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>				releaseConn(err)
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>				return nil, err
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>			}
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>			<span class="comment">// Note: ownership of dc passes to the *Rows, to be freed</span>
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>			<span class="comment">// with releaseConn.</span>
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>			rows := &amp;Rows{
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>				dc:          dc,
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>				releaseConn: releaseConn,
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>				rowsi:       rowsi,
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>			}
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>			rows.initContextClose(ctx, txctx)
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>			return rows, nil
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>		}
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>	}
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>	var si driver.Stmt
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>	var err error
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>		si, err = ctxDriverPrepare(ctx, dc.ci, query)
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>	})
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>	if err != nil {
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>		releaseConn(err)
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>		return nil, err
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>	}
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	ds := &amp;driverStmt{Locker: dc, si: si}
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>	rowsi, err := rowsiFromStatement(ctx, dc.ci, ds, args...)
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>	if err != nil {
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>		ds.Close()
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>		releaseConn(err)
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>		return nil, err
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>	}
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>	<span class="comment">// Note: ownership of ci passes to the *Rows, to be freed</span>
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>	<span class="comment">// with releaseConn.</span>
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>	rows := &amp;Rows{
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>		dc:          dc,
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>		releaseConn: releaseConn,
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>		rowsi:       rowsi,
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>		closeStmt:   ds,
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>	}
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>	rows.initContextClose(ctx, txctx)
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>	return rows, nil
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>}
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span><span class="comment">// QueryRowContext executes a query that is expected to return at most one row.</span>
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span><span class="comment">// QueryRowContext always returns a non-nil value. Errors are deferred until</span>
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span><span class="comment">// [Row]&#39;s Scan method is called.</span>
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span><span class="comment">// Otherwise, [*Row.Scan] scans the first selected row and discards</span>
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>func (db *DB) QueryRowContext(ctx context.Context, query string, args ...any) *Row {
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>	rows, err := db.QueryContext(ctx, query, args...)
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>	return &amp;Row{rows: rows, err: err}
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>}
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span><span class="comment">// QueryRow executes a query that is expected to return at most one row.</span>
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span><span class="comment">// QueryRow always returns a non-nil value. Errors are deferred until</span>
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span><span class="comment">// [Row]&#39;s Scan method is called.</span>
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span><span class="comment">// Otherwise, [*Row.Scan] scans the first selected row and discards</span>
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span><span class="comment">// QueryRow uses [context.Background] internally; to specify the context, use</span>
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span><span class="comment">// [DB.QueryRowContext].</span>
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>func (db *DB) QueryRow(query string, args ...any) *Row {
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>	return db.QueryRowContext(context.Background(), query, args...)
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>}
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span><span class="comment">// BeginTx starts a transaction.</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span><span class="comment">// The provided context is used until the transaction is committed or rolled back.</span>
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span><span class="comment">// If the context is canceled, the sql package will roll back</span>
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span><span class="comment">// the transaction. [Tx.Commit] will return an error if the context provided to</span>
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span><span class="comment">// BeginTx is canceled.</span>
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span><span class="comment">// The provided [TxOptions] is optional and may be nil if defaults should be used.</span>
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span><span class="comment">// If a non-default isolation level is used that the driver doesn&#39;t support,</span>
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span><span class="comment">// an error will be returned.</span>
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>func (db *DB) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error) {
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>	var tx *Tx
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>	var err error
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>		tx, err = db.begin(ctx, opts, strategy)
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>		return err
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>	})
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>	return tx, err
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>}
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span><span class="comment">// Begin starts a transaction. The default isolation level is dependent on</span>
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span><span class="comment">// the driver.</span>
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span><span class="comment">// Begin uses [context.Background] internally; to specify the context, use</span>
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span><span class="comment">// [DB.BeginTx].</span>
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>func (db *DB) Begin() (*Tx, error) {
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>	return db.BeginTx(context.Background(), nil)
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>}
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>func (db *DB) begin(ctx context.Context, opts *TxOptions, strategy connReuseStrategy) (tx *Tx, err error) {
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>	dc, err := db.conn(ctx, strategy)
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>	if err != nil {
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>		return nil, err
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>	}
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>	return db.beginDC(ctx, dc, dc.releaseConn, opts)
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>}
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span><span class="comment">// beginDC starts a transaction. The provided dc must be valid and ready to use.</span>
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>func (db *DB) beginDC(ctx context.Context, dc *driverConn, release func(error), opts *TxOptions) (tx *Tx, err error) {
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	var txi driver.Tx
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>	keepConnOnRollback := false
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>		_, hasSessionResetter := dc.ci.(driver.SessionResetter)
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>		_, hasConnectionValidator := dc.ci.(driver.Validator)
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>		keepConnOnRollback = hasSessionResetter &amp;&amp; hasConnectionValidator
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>		txi, err = ctxDriverBegin(ctx, opts, dc.ci)
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>	})
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>	if err != nil {
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>		release(err)
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>		return nil, err
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>	}
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	<span class="comment">// Schedule the transaction to rollback when the context is canceled.</span>
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>	<span class="comment">// The cancel function in Tx will be called after done is set to true.</span>
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>	ctx, cancel := context.WithCancel(ctx)
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>	tx = &amp;Tx{
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>		db:                 db,
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>		dc:                 dc,
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>		releaseConn:        release,
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>		txi:                txi,
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>		cancel:             cancel,
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>		keepConnOnRollback: keepConnOnRollback,
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>		ctx:                ctx,
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>	}
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>	go tx.awaitDone()
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>	return tx, nil
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>}
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span><span class="comment">// Driver returns the database&#39;s underlying driver.</span>
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>func (db *DB) Driver() driver.Driver {
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>	return db.connector.Driver()
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>}
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span><span class="comment">// ErrConnDone is returned by any operation that is performed on a connection</span>
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span><span class="comment">// that has already been returned to the connection pool.</span>
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>var ErrConnDone = errors.New(&#34;sql: connection is already closed&#34;)
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span><span class="comment">// Conn returns a single connection by either opening a new connection</span>
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span><span class="comment">// or returning an existing connection from the connection pool. Conn will</span>
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span><span class="comment">// block until either a connection is returned or ctx is canceled.</span>
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span><span class="comment">// Queries run on the same Conn will be run in the same database session.</span>
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span><span class="comment">// Every Conn must be returned to the database pool after use by</span>
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span><span class="comment">// calling [Conn.Close].</span>
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>func (db *DB) Conn(ctx context.Context) (*Conn, error) {
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>	var dc *driverConn
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>	var err error
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>	err = db.retry(func(strategy connReuseStrategy) error {
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>		dc, err = db.conn(ctx, strategy)
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>		return err
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>	})
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>	if err != nil {
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>		return nil, err
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>	}
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>	conn := &amp;Conn{
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>		db: db,
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>		dc: dc,
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>	}
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>	return conn, nil
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>}
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>type releaseConn func(error)
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span><span class="comment">// Conn represents a single database connection rather than a pool of database</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span><span class="comment">// connections. Prefer running queries from [DB] unless there is a specific</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span><span class="comment">// need for a continuous single database connection.</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span><span class="comment">// A Conn must call [Conn.Close] to return the connection to the database pool</span>
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span><span class="comment">// and may do so concurrently with a running query.</span>
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span><span class="comment">// After a call to [Conn.Close], all operations on the</span>
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span><span class="comment">// connection fail with [ErrConnDone].</span>
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>type Conn struct {
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>	db *DB
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>	<span class="comment">// closemu prevents the connection from closing while there</span>
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>	<span class="comment">// is an active query. It is held for read during queries</span>
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>	<span class="comment">// and exclusively during close.</span>
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>	closemu sync.RWMutex
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>	<span class="comment">// dc is owned until close, at which point</span>
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	<span class="comment">// it&#39;s returned to the connection pool.</span>
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>	dc *driverConn
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>	<span class="comment">// done transitions from false to true exactly once, on close.</span>
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>	<span class="comment">// Once done, all operations fail with ErrConnDone.</span>
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>	done atomic.Bool
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>	releaseConnOnce sync.Once
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>	<span class="comment">// releaseConnCache is a cache of c.closemuRUnlockCondReleaseConn</span>
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	<span class="comment">// to save allocations in a call to grabConn.</span>
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>	releaseConnCache releaseConn
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>}
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span><span class="comment">// grabConn takes a context to implement stmtConnGrabber</span>
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span><span class="comment">// but the context is not used.</span>
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>func (c *Conn) grabConn(context.Context) (*driverConn, releaseConn, error) {
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>	if c.done.Load() {
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>		return nil, nil, ErrConnDone
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>	}
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>	c.releaseConnOnce.Do(func() {
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>		c.releaseConnCache = c.closemuRUnlockCondReleaseConn
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>	})
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>	c.closemu.RLock()
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>	return c.dc, c.releaseConnCache, nil
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>}
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span><span class="comment">// PingContext verifies the connection to the database is still alive.</span>
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>func (c *Conn) PingContext(ctx context.Context) error {
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>	dc, release, err := c.grabConn(ctx)
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>	if err != nil {
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>		return err
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>	}
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>	return c.db.pingDC(ctx, dc, release)
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>}
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span><span class="comment">// ExecContext executes a query without returning any rows.</span>
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>func (c *Conn) ExecContext(ctx context.Context, query string, args ...any) (Result, error) {
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>	dc, release, err := c.grabConn(ctx)
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>	if err != nil {
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>		return nil, err
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>	}
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>	return c.db.execDC(ctx, dc, release, query, args)
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>}
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span><span class="comment">// QueryContext executes a query that returns rows, typically a SELECT.</span>
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span><span class="comment">// The args are for any placeholder parameters in the query.</span>
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>func (c *Conn) QueryContext(ctx context.Context, query string, args ...any) (*Rows, error) {
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>	dc, release, err := c.grabConn(ctx)
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>	if err != nil {
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>		return nil, err
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>	}
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>	return c.db.queryDC(ctx, nil, dc, release, query, args)
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>}
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span><span class="comment">// QueryRowContext executes a query that is expected to return at most one row.</span>
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span><span class="comment">// QueryRowContext always returns a non-nil value. Errors are deferred until</span>
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span><span class="comment">// the [*Row.Scan] method is called.</span>
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [*Row.Scan] scans the first selected row and discards</span>
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>func (c *Conn) QueryRowContext(ctx context.Context, query string, args ...any) *Row {
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>	rows, err := c.QueryContext(ctx, query, args...)
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>	return &amp;Row{rows: rows, err: err}
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>}
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span><span class="comment">// PrepareContext creates a prepared statement for later queries or executions.</span>
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span><span class="comment">// Multiple queries or executions may be run concurrently from the</span>
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span><span class="comment">// returned statement.</span>
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span><span class="comment">// The caller must call the statement&#39;s [*Stmt.Close] method</span>
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span><span class="comment">// when the statement is no longer needed.</span>
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span><span class="comment">// The provided context is used for the preparation of the statement, not for the</span>
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span><span class="comment">// execution of the statement.</span>
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>func (c *Conn) PrepareContext(ctx context.Context, query string) (*Stmt, error) {
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>	dc, release, err := c.grabConn(ctx)
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>	if err != nil {
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>		return nil, err
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>	}
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>	return c.db.prepareDC(ctx, dc, release, c, query)
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>}
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span><span class="comment">// Raw executes f exposing the underlying driver connection for the</span>
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span><span class="comment">// duration of f. The driverConn must not be used outside of f.</span>
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span><span class="comment">// Once f returns and err is not [driver.ErrBadConn], the [Conn] will continue to be usable</span>
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span><span class="comment">// until [Conn.Close] is called.</span>
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>func (c *Conn) Raw(f func(driverConn any) error) (err error) {
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>	var dc *driverConn
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>	var release releaseConn
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>	<span class="comment">// grabConn takes a context to implement stmtConnGrabber, but the context is not used.</span>
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>	dc, release, err = c.grabConn(nil)
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>	if err != nil {
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>		return
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>	}
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>	fPanic := true
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>	dc.Mutex.Lock()
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>	defer func() {
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>		dc.Mutex.Unlock()
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>		<span class="comment">// If f panics fPanic will remain true.</span>
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>		<span class="comment">// Ensure an error is passed to release so the connection</span>
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>		<span class="comment">// may be discarded.</span>
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>		if fPanic {
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>			err = driver.ErrBadConn
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>		}
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>		release(err)
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>	}()
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>	err = f(dc.ci)
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>	fPanic = false
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>	return
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>}
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span><span class="comment">// BeginTx starts a transaction.</span>
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span><span class="comment">// The provided context is used until the transaction is committed or rolled back.</span>
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span><span class="comment">// If the context is canceled, the sql package will roll back</span>
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span><span class="comment">// the transaction. [Tx.Commit] will return an error if the context provided to</span>
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span><span class="comment">// BeginTx is canceled.</span>
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span><span class="comment">// The provided [TxOptions] is optional and may be nil if defaults should be used.</span>
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span><span class="comment">// If a non-default isolation level is used that the driver doesn&#39;t support,</span>
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span><span class="comment">// an error will be returned.</span>
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>func (c *Conn) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error) {
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	dc, release, err := c.grabConn(ctx)
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	if err != nil {
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>		return nil, err
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>	}
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	return c.db.beginDC(ctx, dc, release, opts)
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>}
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span><span class="comment">// closemuRUnlockCondReleaseConn read unlocks closemu</span>
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span><span class="comment">// as the sql operation is done with the dc.</span>
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>func (c *Conn) closemuRUnlockCondReleaseConn(err error) {
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	c.closemu.RUnlock()
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>	if errors.Is(err, driver.ErrBadConn) {
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>		c.close(err)
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>	}
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>}
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>func (c *Conn) txCtx() context.Context {
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>	return nil
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>}
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>func (c *Conn) close(err error) error {
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>	if !c.done.CompareAndSwap(false, true) {
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>		return ErrConnDone
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>	}
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>	<span class="comment">// Lock around releasing the driver connection</span>
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>	<span class="comment">// to ensure all queries have been stopped before doing so.</span>
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>	c.closemu.Lock()
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>	defer c.closemu.Unlock()
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>	c.dc.releaseConn(err)
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>	c.dc = nil
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>	c.db = nil
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>	return err
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>}
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span><span class="comment">// Close returns the connection to the connection pool.</span>
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span><span class="comment">// All operations after a Close will return with [ErrConnDone].</span>
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span><span class="comment">// Close is safe to call concurrently with other operations and will</span>
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span><span class="comment">// block until all other operations finish. It may be useful to first</span>
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span><span class="comment">// cancel any used context and then call close directly after.</span>
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>func (c *Conn) Close() error {
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>	return c.close(nil)
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>}
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span><span class="comment">// Tx is an in-progress database transaction.</span>
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span><span class="comment">// A transaction must end with a call to [Tx.Commit] or [Tx.Rollback].</span>
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span><span class="comment">// After a call to [Tx.Commit] or [Tx.Rollback], all operations on the</span>
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span><span class="comment">// transaction fail with [ErrTxDone].</span>
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span><span class="comment">// The statements prepared for a transaction by calling</span>
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span><span class="comment">// the transaction&#39;s [Tx.Prepare] or [Tx.Stmt] methods are closed</span>
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span><span class="comment">// by the call to [Tx.Commit] or [Tx.Rollback].</span>
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>type Tx struct {
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>	db *DB
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>	<span class="comment">// closemu prevents the transaction from closing while there</span>
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>	<span class="comment">// is an active query. It is held for read during queries</span>
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>	<span class="comment">// and exclusively during close.</span>
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>	closemu sync.RWMutex
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>	<span class="comment">// dc is owned exclusively until Commit or Rollback, at which point</span>
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span>	<span class="comment">// it&#39;s returned with putConn.</span>
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span>	dc  *driverConn
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>	txi driver.Tx
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>	<span class="comment">// releaseConn is called once the Tx is closed to release</span>
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>	<span class="comment">// any held driverConn back to the pool.</span>
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>	releaseConn func(error)
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>	<span class="comment">// done transitions from false to true exactly once, on Commit</span>
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>	<span class="comment">// or Rollback. once done, all operations fail with</span>
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>	<span class="comment">// ErrTxDone.</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>	done atomic.Bool
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>	<span class="comment">// keepConnOnRollback is true if the driver knows</span>
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>	<span class="comment">// how to reset the connection&#39;s session and if need be discard</span>
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>	<span class="comment">// the connection.</span>
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>	keepConnOnRollback bool
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>	<span class="comment">// All Stmts prepared for this transaction. These will be closed after the</span>
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>	<span class="comment">// transaction has been committed or rolled back.</span>
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>	stmts struct {
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>		sync.Mutex
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>		v []*Stmt
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>	}
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>	<span class="comment">// cancel is called after done transitions from 0 to 1.</span>
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>	cancel func()
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>	<span class="comment">// ctx lives for the life of the transaction.</span>
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>	ctx context.Context
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>}
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span><span class="comment">// awaitDone blocks until the context in Tx is canceled and rolls back</span>
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span><span class="comment">// the transaction if it&#39;s not already done.</span>
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>func (tx *Tx) awaitDone() {
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>	<span class="comment">// Wait for either the transaction to be committed or rolled</span>
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>	<span class="comment">// back, or for the associated context to be closed.</span>
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>	&lt;-tx.ctx.Done()
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>	<span class="comment">// Discard and close the connection used to ensure the</span>
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>	<span class="comment">// transaction is closed and the resources are released.  This</span>
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>	<span class="comment">// rollback does nothing if the transaction has already been</span>
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>	<span class="comment">// committed or rolled back.</span>
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>	<span class="comment">// Do not discard the connection if the connection knows</span>
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>	<span class="comment">// how to reset the session.</span>
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>	discardConnection := !tx.keepConnOnRollback
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>	tx.rollback(discardConnection)
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>}
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>func (tx *Tx) isDone() bool {
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>	return tx.done.Load()
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>}
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span><span class="comment">// ErrTxDone is returned by any operation that is performed on a transaction</span>
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span><span class="comment">// that has already been committed or rolled back.</span>
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>var ErrTxDone = errors.New(&#34;sql: transaction has already been committed or rolled back&#34;)
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span><span class="comment">// close returns the connection to the pool and</span>
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span><span class="comment">// must only be called by Tx.rollback or Tx.Commit while</span>
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span><span class="comment">// tx is already canceled and won&#39;t be executed concurrently.</span>
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>func (tx *Tx) close(err error) {
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>	tx.releaseConn(err)
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>	tx.dc = nil
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>	tx.txi = nil
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>}
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span><span class="comment">// hookTxGrabConn specifies an optional hook to be called on</span>
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span><span class="comment">// a successful call to (*Tx).grabConn. For tests.</span>
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>var hookTxGrabConn func()
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>func (tx *Tx) grabConn(ctx context.Context) (*driverConn, releaseConn, error) {
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>	select {
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>	default:
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>		return nil, nil, ctx.Err()
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>	}
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>	<span class="comment">// closemu.RLock must come before the check for isDone to prevent the Tx from</span>
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>	<span class="comment">// closing while a query is executing.</span>
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>	tx.closemu.RLock()
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>	if tx.isDone() {
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>		tx.closemu.RUnlock()
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>		return nil, nil, ErrTxDone
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>	}
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>	if hookTxGrabConn != nil { <span class="comment">// test hook</span>
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>		hookTxGrabConn()
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>	}
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span>	return tx.dc, tx.closemuRUnlockRelease, nil
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span>}
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>func (tx *Tx) txCtx() context.Context {
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>	return tx.ctx
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>}
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span><span class="comment">// closemuRUnlockRelease is used as a func(error) method value in</span>
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span><span class="comment">// [DB.ExecContext] and [DB.QueryContext]. Unlocking in the releaseConn keeps</span>
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span><span class="comment">// the driver conn from being returned to the connection pool until</span>
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span><span class="comment">// the Rows has been closed.</span>
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>func (tx *Tx) closemuRUnlockRelease(error) {
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>	tx.closemu.RUnlock()
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>}
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span><span class="comment">// Closes all Stmts prepared for this transaction.</span>
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>func (tx *Tx) closePrepared() {
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>	tx.stmts.Lock()
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	defer tx.stmts.Unlock()
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	for _, stmt := range tx.stmts.v {
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>		stmt.Close()
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>	}
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>}
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span><span class="comment">// Commit commits the transaction.</span>
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span><span class="selection">func (tx *Tx) Commit() error</span> {
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>	<span class="comment">// Check context first to avoid transaction leak.</span>
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>	<span class="comment">// If put it behind tx.done CompareAndSwap statement, we can&#39;t ensure</span>
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	<span class="comment">// the consistency between tx.done and the real COMMIT operation.</span>
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>	select {
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>	default:
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>	case &lt;-tx.ctx.Done():
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>		if tx.done.Load() {
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>			return ErrTxDone
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>		}
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>		return tx.ctx.Err()
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>	}
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>	if !tx.done.CompareAndSwap(false, true) {
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>		return ErrTxDone
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	}
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>	<span class="comment">// Cancel the Tx to release any active R-closemu locks.</span>
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>	<span class="comment">// This is safe to do because tx.done has already transitioned</span>
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>	<span class="comment">// from 0 to 1. Hold the W-closemu lock prior to rollback</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>	<span class="comment">// to ensure no other connection has an active query.</span>
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>	tx.cancel()
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>	tx.closemu.Lock()
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>	tx.closemu.Unlock()
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>	var err error
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>	withLock(tx.dc, func() {
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>		err = tx.txi.Commit()
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>	})
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>	if !errors.Is(err, driver.ErrBadConn) {
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>		tx.closePrepared()
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>	}
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>	tx.close(err)
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>	return err
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>}
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>var rollbackHook func()
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span><span class="comment">// rollback aborts the transaction and optionally forces the pool to discard</span>
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span><span class="comment">// the connection.</span>
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>func (tx *Tx) rollback(discardConn bool) error {
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>	if !tx.done.CompareAndSwap(false, true) {
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>		return ErrTxDone
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>	}
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>	if rollbackHook != nil {
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>		rollbackHook()
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>	}
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>	<span class="comment">// Cancel the Tx to release any active R-closemu locks.</span>
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>	<span class="comment">// This is safe to do because tx.done has already transitioned</span>
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>	<span class="comment">// from 0 to 1. Hold the W-closemu lock prior to rollback</span>
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span>	<span class="comment">// to ensure no other connection has an active query.</span>
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span>	tx.cancel()
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span>	tx.closemu.Lock()
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span>	tx.closemu.Unlock()
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span>
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span>	var err error
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>	withLock(tx.dc, func() {
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span>		err = tx.txi.Rollback()
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span>	})
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span>	if !errors.Is(err, driver.ErrBadConn) {
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span>		tx.closePrepared()
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span>	}
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>	if discardConn {
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>		err = driver.ErrBadConn
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>	}
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>	tx.close(err)
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>	return err
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span>}
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span>
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span><span class="comment">// Rollback aborts the transaction.</span>
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>func (tx *Tx) Rollback() error {
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span>	return tx.rollback(false)
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span>}
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span><span class="comment">// PrepareContext creates a prepared statement for use within a transaction.</span>
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span><span class="comment">// The returned statement operates within the transaction and will be closed</span>
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span><span class="comment">// when the transaction has been committed or rolled back.</span>
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span><span class="comment">// To use an existing prepared statement on this transaction, see [Tx.Stmt].</span>
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span><span class="comment">// The provided context will be used for the preparation of the context, not</span>
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span><span class="comment">// for the execution of the returned statement. The returned statement</span>
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span><span class="comment">// will run in the transaction context.</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>func (tx *Tx) PrepareContext(ctx context.Context, query string) (*Stmt, error) {
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>	dc, release, err := tx.grabConn(ctx)
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>	if err != nil {
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>		return nil, err
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>	}
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>	stmt, err := tx.db.prepareDC(ctx, dc, release, tx, query)
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>	if err != nil {
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>		return nil, err
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>	}
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>	tx.stmts.Lock()
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>	tx.stmts.v = append(tx.stmts.v, stmt)
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>	tx.stmts.Unlock()
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>	return stmt, nil
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>}
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span><span class="comment">// Prepare creates a prepared statement for use within a transaction.</span>
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span><span class="comment">// The returned statement operates within the transaction and will be closed</span>
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span><span class="comment">// when the transaction has been committed or rolled back.</span>
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span><span class="comment">// To use an existing prepared statement on this transaction, see [Tx.Stmt].</span>
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span><span class="comment">// Prepare uses [context.Background] internally; to specify the context, use</span>
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span><span class="comment">// [Tx.PrepareContext].</span>
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>func (tx *Tx) Prepare(query string) (*Stmt, error) {
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>	return tx.PrepareContext(context.Background(), query)
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>}
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span><span class="comment">// StmtContext returns a transaction-specific prepared statement from</span>
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span><span class="comment">// an existing statement.</span>
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span><span class="comment">// Example:</span>
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span><span class="comment">//	updateMoney, err := db.Prepare(&#34;UPDATE balance SET money=money+? WHERE id=?&#34;)</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span><span class="comment">//	tx, err := db.Begin()</span>
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span><span class="comment">//	res, err := tx.StmtContext(ctx, updateMoney).Exec(123.45, 98293203)</span>
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span><span class="comment">// The provided context is used for the preparation of the statement, not for the</span>
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span><span class="comment">// execution of the statement.</span>
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span><span class="comment">// The returned statement operates within the transaction and will be closed</span>
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span><span class="comment">// when the transaction has been committed or rolled back.</span>
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>func (tx *Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt {
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>	dc, release, err := tx.grabConn(ctx)
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>	if err != nil {
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>		return &amp;Stmt{stickyErr: err}
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>	}
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>	defer release(nil)
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>	if tx.db != stmt.db {
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span>		return &amp;Stmt{stickyErr: errors.New(&#34;sql: Tx.Stmt: statement from different database used&#34;)}
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span>	}
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span>	var si driver.Stmt
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>	var parentStmt *Stmt
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>	stmt.mu.Lock()
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>	if stmt.closed || stmt.cg != nil {
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>		<span class="comment">// If the statement has been closed or already belongs to a</span>
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>		<span class="comment">// transaction, we can&#39;t reuse it in this connection.</span>
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>		<span class="comment">// Since tx.StmtContext should never need to be called with a</span>
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>		<span class="comment">// Stmt already belonging to tx, we ignore this edge case and</span>
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>		<span class="comment">// re-prepare the statement in this case. No need to add</span>
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>		<span class="comment">// code-complexity for this.</span>
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>		stmt.mu.Unlock()
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span>		withLock(dc, func() {
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span>			si, err = ctxDriverPrepare(ctx, dc.ci, stmt.query)
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span>		})
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>		if err != nil {
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>			return &amp;Stmt{stickyErr: err}
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>		}
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>	} else {
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>		stmt.removeClosedStmtLocked()
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>		<span class="comment">// See if the statement has already been prepared on this connection,</span>
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>		<span class="comment">// and reuse it if possible.</span>
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>		for _, v := range stmt.css {
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>			if v.dc == dc {
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>				si = v.ds.si
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>				break
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>			}
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>		}
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span>		stmt.mu.Unlock()
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>		if si == nil {
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>			var ds *driverStmt
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>			withLock(dc, func() {
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>				ds, err = stmt.prepareOnConnLocked(ctx, dc)
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>			})
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>			if err != nil {
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>				return &amp;Stmt{stickyErr: err}
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>			}
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span>			si = ds.si
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>		}
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>		parentStmt = stmt
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>	}
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>	txs := &amp;Stmt{
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>		db: tx.db,
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>		cg: tx,
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>		cgds: &amp;driverStmt{
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>			Locker: dc,
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>			si:     si,
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span>		},
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>		parentStmt: parentStmt,
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>		query:      stmt.query,
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>	}
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>	if parentStmt != nil {
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>		tx.db.addDep(parentStmt, txs)
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>	}
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>	tx.stmts.Lock()
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>	tx.stmts.v = append(tx.stmts.v, txs)
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>	tx.stmts.Unlock()
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>	return txs
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>}
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span><span class="comment">// Stmt returns a transaction-specific prepared statement from</span>
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span><span class="comment">// an existing statement.</span>
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span><span class="comment">// Example:</span>
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span><span class="comment">//	updateMoney, err := db.Prepare(&#34;UPDATE balance SET money=money+? WHERE id=?&#34;)</span>
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span><span class="comment">//	tx, err := db.Begin()</span>
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span><span class="comment">//	res, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)</span>
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span><span class="comment">// The returned statement operates within the transaction and will be closed</span>
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span><span class="comment">// when the transaction has been committed or rolled back.</span>
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span><span class="comment">// Stmt uses [context.Background] internally; to specify the context, use</span>
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span><span class="comment">// [Tx.StmtContext].</span>
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span>func (tx *Tx) Stmt(stmt *Stmt) *Stmt {
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span>	return tx.StmtContext(context.Background(), stmt)
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span>}
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span>
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span><span class="comment">// ExecContext executes a query that doesn&#39;t return rows.</span>
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span><span class="comment">// For example: an INSERT and UPDATE.</span>
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>func (tx *Tx) ExecContext(ctx context.Context, query string, args ...any) (Result, error) {
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>	dc, release, err := tx.grabConn(ctx)
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>	if err != nil {
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>		return nil, err
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>	}
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	return tx.db.execDC(ctx, dc, release, query, args)
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>}
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span><span class="comment">// Exec executes a query that doesn&#39;t return rows.</span>
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span><span class="comment">// For example: an INSERT and UPDATE.</span>
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span><span class="comment">// Exec uses [context.Background] internally; to specify the context, use</span>
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span><span class="comment">// [Tx.ExecContext].</span>
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span>func (tx *Tx) Exec(query string, args ...any) (Result, error) {
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span>	return tx.ExecContext(context.Background(), query, args...)
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span>}
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span><span class="comment">// QueryContext executes a query that returns rows, typically a SELECT.</span>
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>func (tx *Tx) QueryContext(ctx context.Context, query string, args ...any) (*Rows, error) {
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>	dc, release, err := tx.grabConn(ctx)
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>	if err != nil {
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>		return nil, err
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span>	}
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span>
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>	return tx.db.queryDC(ctx, tx.ctx, dc, release, query, args)
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>}
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span><span class="comment">// Query executes a query that returns rows, typically a SELECT.</span>
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span><span class="comment">// Query uses [context.Background] internally; to specify the context, use</span>
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span><span class="comment">// [Tx.QueryContext].</span>
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span>func (tx *Tx) Query(query string, args ...any) (*Rows, error) {
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span>	return tx.QueryContext(context.Background(), query, args...)
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span>}
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span>
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span><span class="comment">// QueryRowContext executes a query that is expected to return at most one row.</span>
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span><span class="comment">// QueryRowContext always returns a non-nil value. Errors are deferred until</span>
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span><span class="comment">// [Row]&#39;s Scan method is called.</span>
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [*Row.Scan] scans the first selected row and discards</span>
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>func (tx *Tx) QueryRowContext(ctx context.Context, query string, args ...any) *Row {
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>	rows, err := tx.QueryContext(ctx, query, args...)
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>	return &amp;Row{rows: rows, err: err}
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span>}
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span>
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span><span class="comment">// QueryRow executes a query that is expected to return at most one row.</span>
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span><span class="comment">// QueryRow always returns a non-nil value. Errors are deferred until</span>
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span><span class="comment">// [Row]&#39;s Scan method is called.</span>
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [*Row.Scan] scans the first selected row and discards</span>
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span><span class="comment">// QueryRow uses [context.Background] internally; to specify the context, use</span>
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span><span class="comment">// [Tx.QueryRowContext].</span>
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span>func (tx *Tx) QueryRow(query string, args ...any) *Row {
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span>	return tx.QueryRowContext(context.Background(), query, args...)
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span>}
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span>
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span><span class="comment">// connStmt is a prepared statement on a particular connection.</span>
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span>type connStmt struct {
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>	dc *driverConn
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>	ds *driverStmt
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>}
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span><span class="comment">// stmtConnGrabber represents a Tx or Conn that will return the underlying</span>
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span><span class="comment">// driverConn and release function.</span>
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span>type stmtConnGrabber interface {
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span>	<span class="comment">// grabConn returns the driverConn and the associated release function</span>
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>	<span class="comment">// that must be called when the operation completes.</span>
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>	grabConn(context.Context) (*driverConn, releaseConn, error)
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span>	<span class="comment">// txCtx returns the transaction context if available.</span>
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span>	<span class="comment">// The returned context should be selected on along with</span>
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span>	<span class="comment">// any query context when awaiting a cancel.</span>
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span>	txCtx() context.Context
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span>}
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span>
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>var (
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>	_ stmtConnGrabber = &amp;Tx{}
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>	_ stmtConnGrabber = &amp;Conn{}
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>)
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span><span class="comment">// Stmt is a prepared statement.</span>
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span><span class="comment">// A Stmt is safe for concurrent use by multiple goroutines.</span>
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span><span class="comment">// If a Stmt is prepared on a [Tx] or [Conn], it will be bound to a single</span>
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span><span class="comment">// underlying connection forever. If the [Tx] or [Conn] closes, the Stmt will</span>
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span><span class="comment">// become unusable and all operations will return an error.</span>
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span><span class="comment">// If a Stmt is prepared on a [DB], it will remain usable for the lifetime of the</span>
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span><span class="comment">// [DB]. When the Stmt needs to execute on a new underlying connection, it will</span>
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span><span class="comment">// prepare itself on the new connection automatically.</span>
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span>type Stmt struct {
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span>	<span class="comment">// Immutable:</span>
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span>	db        *DB    <span class="comment">// where we came from</span>
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span>	query     string <span class="comment">// that created the Stmt</span>
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span>	stickyErr error  <span class="comment">// if non-nil, this error is returned for all operations</span>
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span>
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span>	closemu sync.RWMutex <span class="comment">// held exclusively during close, for read otherwise.</span>
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span>
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span>	<span class="comment">// If Stmt is prepared on a Tx or Conn then cg is present and will</span>
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span>	<span class="comment">// only ever grab a connection from cg.</span>
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span>	<span class="comment">// If cg is nil then the Stmt must grab an arbitrary connection</span>
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span>	<span class="comment">// from db and determine if it must prepare the stmt again by</span>
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span>	<span class="comment">// inspecting css.</span>
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span>	cg   stmtConnGrabber
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span>	cgds *driverStmt
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span>
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span>	<span class="comment">// parentStmt is set when a transaction-specific statement</span>
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span>	<span class="comment">// is requested from an identical statement prepared on the same</span>
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span>	<span class="comment">// conn. parentStmt is used to track the dependency of this statement</span>
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span>	<span class="comment">// on its originating (&#34;parent&#34;) statement so that parentStmt may</span>
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span>	<span class="comment">// be closed by the user without them having to know whether or not</span>
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span>	<span class="comment">// any transactions are still using it.</span>
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span>	parentStmt *Stmt
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span>
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span>	mu     sync.Mutex <span class="comment">// protects the rest of the fields</span>
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span>	closed bool
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span>
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span>	<span class="comment">// css is a list of underlying driver statement interfaces</span>
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span>	<span class="comment">// that are valid on particular connections. This is only</span>
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span>	<span class="comment">// used if cg == nil and one is found that has idle</span>
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>	<span class="comment">// connections. If cg != nil, cgds is always used.</span>
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span>	css []connStmt
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span>
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span>	<span class="comment">// lastNumClosed is copied from db.numClosed when Stmt is created</span>
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span>	<span class="comment">// without tx and closed connections in css are removed.</span>
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span>	lastNumClosed uint64
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span>}
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span>
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span><span class="comment">// ExecContext executes a prepared statement with the given arguments and</span>
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span><span class="comment">// returns a [Result] summarizing the effect of the statement.</span>
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>func (s *Stmt) ExecContext(ctx context.Context, args ...any) (Result, error) {
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>	s.closemu.RLock()
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>	defer s.closemu.RUnlock()
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>	var res Result
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>	err := s.db.retry(func(strategy connReuseStrategy) error {
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>		dc, releaseConn, ds, err := s.connStmt(ctx, strategy)
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span>		if err != nil {
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span>			return err
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>		}
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>		res, err = resultFromStatement(ctx, dc.ci, ds, args...)
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span>		releaseConn(err)
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span>		return err
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span>	})
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span>
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span>	return res, err
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span>}
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span><span class="comment">// Exec executes a prepared statement with the given arguments and</span>
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span><span class="comment">// returns a [Result] summarizing the effect of the statement.</span>
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span><span class="comment">// Exec uses [context.Background] internally; to specify the context, use</span>
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span><span class="comment">// [Stmt.ExecContext].</span>
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>func (s *Stmt) Exec(args ...any) (Result, error) {
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>	return s.ExecContext(context.Background(), args...)
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>}
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>func resultFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...any) (Result, error) {
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>	ds.Lock()
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span>	defer ds.Unlock()
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span>
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span>	dargs, err := driverArgsConnLocked(ci, ds, args)
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span>	if err != nil {
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span>		return nil, err
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span>	}
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span>
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span>	resi, err := ctxDriverStmtExec(ctx, ds.si, dargs)
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span>	if err != nil {
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span>		return nil, err
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span>	}
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>	return driverResult{ds.Locker, resi}, nil
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>}
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span><span class="comment">// removeClosedStmtLocked removes closed conns in s.css.</span>
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span><span class="comment">// To avoid lock contention on DB.mu, we do it only when</span>
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span><span class="comment">// s.db.numClosed - s.lastNum is large enough.</span>
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span>func (s *Stmt) removeClosedStmtLocked() {
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span>	t := len(s.css)/2 + 1
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>	if t &gt; 10 {
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>		t = 10
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>	}
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>	dbClosed := s.db.numClosed.Load()
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>	if dbClosed-s.lastNumClosed &lt; uint64(t) {
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>		return
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span>	}
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span>	s.db.mu.Lock()
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s.css); i++ {
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>		if s.css[i].dc.dbmuClosed {
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span>			s.css[i] = s.css[len(s.css)-1]
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span>			s.css = s.css[:len(s.css)-1]
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span>			i--
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>		}
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>	}
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>	s.db.mu.Unlock()
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>	s.lastNumClosed = dbClosed
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>}
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span><span class="comment">// connStmt returns a free driver connection on which to execute the</span>
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span><span class="comment">// statement, a function to call to release the connection, and a</span>
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span><span class="comment">// statement bound to that connection.</span>
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span>func (s *Stmt) connStmt(ctx context.Context, strategy connReuseStrategy) (dc *driverConn, releaseConn func(error), ds *driverStmt, err error) {
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span>	if err = s.stickyErr; err != nil {
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span>		return
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>	}
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>	if s.closed {
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>		s.mu.Unlock()
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>		err = errors.New(&#34;sql: statement is closed&#34;)
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>		return
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>	}
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span>
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span>	<span class="comment">// In a transaction or connection, we always use the connection that the</span>
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>	<span class="comment">// stmt was created on.</span>
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>	if s.cg != nil {
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>		s.mu.Unlock()
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>		dc, releaseConn, err = s.cg.grabConn(ctx) <span class="comment">// blocks, waiting for the connection.</span>
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>		if err != nil {
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>			return
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>		}
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span>		return dc, releaseConn, s.cgds, nil
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span>	}
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span>
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span>	s.removeClosedStmtLocked()
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span>
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span>	dc, err = s.db.conn(ctx, strategy)
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span>	if err != nil {
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span>		return nil, nil, nil, err
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span>	}
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span>
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span>	for _, v := range s.css {
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span>		if v.dc == dc {
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span>			s.mu.Unlock()
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span>			return dc, dc.releaseConn, v.ds, nil
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>		}
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>	}
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>	<span class="comment">// No luck; we need to prepare the statement on this connection</span>
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>	withLock(dc, func() {
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>		ds, err = s.prepareOnConnLocked(ctx, dc)
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>	})
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>	if err != nil {
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>		dc.releaseConn(err)
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>		return nil, nil, nil, err
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>	}
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>	return dc, dc.releaseConn, ds, nil
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>}
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span><span class="comment">// prepareOnConnLocked prepares the query in Stmt s on dc and adds it to the list of</span>
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span><span class="comment">// open connStmt on the statement. It assumes the caller is holding the lock on dc.</span>
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>func (s *Stmt) prepareOnConnLocked(ctx context.Context, dc *driverConn) (*driverStmt, error) {
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span>	si, err := dc.prepareLocked(ctx, s.cg, s.query)
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span>	if err != nil {
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span>		return nil, err
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span>	}
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span>	cs := connStmt{dc, si}
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span>	s.css = append(s.css, cs)
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span>	return cs.ds, nil
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>}
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span><span class="comment">// QueryContext executes a prepared query statement with the given arguments</span>
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span><span class="comment">// and returns the query results as a [*Rows].</span>
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>func (s *Stmt) QueryContext(ctx context.Context, args ...any) (*Rows, error) {
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>	s.closemu.RLock()
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>	defer s.closemu.RUnlock()
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>	var rowsi driver.Rows
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>	var rows *Rows
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>	err := s.db.retry(func(strategy connReuseStrategy) error {
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span>		dc, releaseConn, ds, err := s.connStmt(ctx, strategy)
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span>		if err != nil {
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span>			return err
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span>		}
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span>
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span>		rowsi, err = rowsiFromStatement(ctx, dc.ci, ds, args...)
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span>		if err == nil {
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span>			<span class="comment">// Note: ownership of ci passes to the *Rows, to be freed</span>
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span>			<span class="comment">// with releaseConn.</span>
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span>			rows = &amp;Rows{
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span>				dc:    dc,
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span>				rowsi: rowsi,
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span>				<span class="comment">// releaseConn set below</span>
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span>			}
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span>			<span class="comment">// addDep must be added before initContextClose or it could attempt</span>
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span>			<span class="comment">// to removeDep before it has been added.</span>
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span>			s.db.addDep(s, rows)
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span>
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span>			<span class="comment">// releaseConn must be set before initContextClose or it could</span>
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span>			<span class="comment">// release the connection before it is set.</span>
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span>			rows.releaseConn = func(err error) {
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span>				releaseConn(err)
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span>				s.db.removeDep(s, rows)
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span>			}
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span>			var txctx context.Context
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span>			if s.cg != nil {
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span>				txctx = s.cg.txCtx()
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span>			}
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span>			rows.initContextClose(ctx, txctx)
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span>			return nil
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span>		}
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span>
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span>		releaseConn(err)
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>		return err
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>	})
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>	return rows, err
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>}
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span>
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span><span class="comment">// Query executes a prepared query statement with the given arguments</span>
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span><span class="comment">// and returns the query results as a *Rows.</span>
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span><span class="comment">// Query uses [context.Background] internally; to specify the context, use</span>
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span><span class="comment">// [Stmt.QueryContext].</span>
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>func (s *Stmt) Query(args ...any) (*Rows, error) {
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span>	return s.QueryContext(context.Background(), args...)
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span>}
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span>
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span>func rowsiFromStatement(ctx context.Context, ci driver.Conn, ds *driverStmt, args ...any) (driver.Rows, error) {
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span>	ds.Lock()
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span>	defer ds.Unlock()
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span>	dargs, err := driverArgsConnLocked(ci, ds, args)
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span>	if err != nil {
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span>		return nil, err
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span>	}
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span>	return ctxDriverStmtQuery(ctx, ds.si, dargs)
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span>}
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span>
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span><span class="comment">// QueryRowContext executes a prepared query statement with the given arguments.</span>
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span><span class="comment">// If an error occurs during the execution of the statement, that error will</span>
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span><span class="comment">// be returned by a call to Scan on the returned [*Row], which is always non-nil.</span>
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [*Row.Scan] scans the first selected row and discards</span>
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span>func (s *Stmt) QueryRowContext(ctx context.Context, args ...any) *Row {
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span>	rows, err := s.QueryContext(ctx, args...)
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span>	if err != nil {
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span>		return &amp;Row{err: err}
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span>	}
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span>	return &amp;Row{rows: rows}
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span>}
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span>
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span><span class="comment">// QueryRow executes a prepared query statement with the given arguments.</span>
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span><span class="comment">// If an error occurs during the execution of the statement, that error will</span>
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span><span class="comment">// be returned by a call to Scan on the returned [*Row], which is always non-nil.</span>
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span><span class="comment">// If the query selects no rows, the [*Row.Scan] will return [ErrNoRows].</span>
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span><span class="comment">// Otherwise, the [*Row.Scan] scans the first selected row and discards</span>
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span><span class="comment">// the rest.</span>
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span><span class="comment">// Example usage:</span>
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span><span class="comment">//	var name string</span>
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span><span class="comment">//	err := nameByUseridStmt.QueryRow(id).Scan(&amp;name)</span>
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span><span class="comment">// QueryRow uses [context.Background] internally; to specify the context, use</span>
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span><span class="comment">// [Stmt.QueryRowContext].</span>
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span>func (s *Stmt) QueryRow(args ...any) *Row {
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span>	return s.QueryRowContext(context.Background(), args...)
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span>}
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span>
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span><span class="comment">// Close closes the statement.</span>
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>func (s *Stmt) Close() error {
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>	s.closemu.Lock()
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>	defer s.closemu.Unlock()
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span>	if s.stickyErr != nil {
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span>		return s.stickyErr
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span>	}
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span>	if s.closed {
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span>		s.mu.Unlock()
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span>		return nil
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>	}
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>	s.closed = true
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>	txds := s.cgds
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>	s.cgds = nil
<span id="L2887" class="ln">  2887&nbsp;&nbsp;</span>
<span id="L2888" class="ln">  2888&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L2889" class="ln">  2889&nbsp;&nbsp;</span>
<span id="L2890" class="ln">  2890&nbsp;&nbsp;</span>	if s.cg == nil {
<span id="L2891" class="ln">  2891&nbsp;&nbsp;</span>		return s.db.removeDep(s, s)
<span id="L2892" class="ln">  2892&nbsp;&nbsp;</span>	}
<span id="L2893" class="ln">  2893&nbsp;&nbsp;</span>
<span id="L2894" class="ln">  2894&nbsp;&nbsp;</span>	if s.parentStmt != nil {
<span id="L2895" class="ln">  2895&nbsp;&nbsp;</span>		<span class="comment">// If parentStmt is set, we must not close s.txds since it&#39;s stored</span>
<span id="L2896" class="ln">  2896&nbsp;&nbsp;</span>		<span class="comment">// in the css array of the parentStmt.</span>
<span id="L2897" class="ln">  2897&nbsp;&nbsp;</span>		return s.db.removeDep(s.parentStmt, s)
<span id="L2898" class="ln">  2898&nbsp;&nbsp;</span>	}
<span id="L2899" class="ln">  2899&nbsp;&nbsp;</span>	return txds.Close()
<span id="L2900" class="ln">  2900&nbsp;&nbsp;</span>}
<span id="L2901" class="ln">  2901&nbsp;&nbsp;</span>
<span id="L2902" class="ln">  2902&nbsp;&nbsp;</span>func (s *Stmt) finalClose() error {
<span id="L2903" class="ln">  2903&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L2904" class="ln">  2904&nbsp;&nbsp;</span>	defer s.mu.Unlock()
<span id="L2905" class="ln">  2905&nbsp;&nbsp;</span>	if s.css != nil {
<span id="L2906" class="ln">  2906&nbsp;&nbsp;</span>		for _, v := range s.css {
<span id="L2907" class="ln">  2907&nbsp;&nbsp;</span>			s.db.noteUnusedDriverStatement(v.dc, v.ds)
<span id="L2908" class="ln">  2908&nbsp;&nbsp;</span>			v.dc.removeOpenStmt(v.ds)
<span id="L2909" class="ln">  2909&nbsp;&nbsp;</span>		}
<span id="L2910" class="ln">  2910&nbsp;&nbsp;</span>		s.css = nil
<span id="L2911" class="ln">  2911&nbsp;&nbsp;</span>	}
<span id="L2912" class="ln">  2912&nbsp;&nbsp;</span>	return nil
<span id="L2913" class="ln">  2913&nbsp;&nbsp;</span>}
<span id="L2914" class="ln">  2914&nbsp;&nbsp;</span>
<span id="L2915" class="ln">  2915&nbsp;&nbsp;</span><span class="comment">// Rows is the result of a query. Its cursor starts before the first row</span>
<span id="L2916" class="ln">  2916&nbsp;&nbsp;</span><span class="comment">// of the result set. Use [Rows.Next] to advance from row to row.</span>
<span id="L2917" class="ln">  2917&nbsp;&nbsp;</span>type Rows struct {
<span id="L2918" class="ln">  2918&nbsp;&nbsp;</span>	dc          *driverConn <span class="comment">// owned; must call releaseConn when closed to release</span>
<span id="L2919" class="ln">  2919&nbsp;&nbsp;</span>	releaseConn func(error)
<span id="L2920" class="ln">  2920&nbsp;&nbsp;</span>	rowsi       driver.Rows
<span id="L2921" class="ln">  2921&nbsp;&nbsp;</span>	cancel      func()      <span class="comment">// called when Rows is closed, may be nil.</span>
<span id="L2922" class="ln">  2922&nbsp;&nbsp;</span>	closeStmt   *driverStmt <span class="comment">// if non-nil, statement to Close on close</span>
<span id="L2923" class="ln">  2923&nbsp;&nbsp;</span>
<span id="L2924" class="ln">  2924&nbsp;&nbsp;</span>	contextDone atomic.Pointer[error] <span class="comment">// error that awaitDone saw; set before close attempt</span>
<span id="L2925" class="ln">  2925&nbsp;&nbsp;</span>
<span id="L2926" class="ln">  2926&nbsp;&nbsp;</span>	<span class="comment">// closemu prevents Rows from closing while there</span>
<span id="L2927" class="ln">  2927&nbsp;&nbsp;</span>	<span class="comment">// is an active streaming result. It is held for read during non-close operations</span>
<span id="L2928" class="ln">  2928&nbsp;&nbsp;</span>	<span class="comment">// and exclusively during close.</span>
<span id="L2929" class="ln">  2929&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2930" class="ln">  2930&nbsp;&nbsp;</span>	<span class="comment">// closemu guards lasterr and closed.</span>
<span id="L2931" class="ln">  2931&nbsp;&nbsp;</span>	closemu sync.RWMutex
<span id="L2932" class="ln">  2932&nbsp;&nbsp;</span>	closed  bool
<span id="L2933" class="ln">  2933&nbsp;&nbsp;</span>	lasterr error <span class="comment">// non-nil only if closed is true</span>
<span id="L2934" class="ln">  2934&nbsp;&nbsp;</span>
<span id="L2935" class="ln">  2935&nbsp;&nbsp;</span>	<span class="comment">// lastcols is only used in Scan, Next, and NextResultSet which are expected</span>
<span id="L2936" class="ln">  2936&nbsp;&nbsp;</span>	<span class="comment">// not to be called concurrently.</span>
<span id="L2937" class="ln">  2937&nbsp;&nbsp;</span>	lastcols []driver.Value
<span id="L2938" class="ln">  2938&nbsp;&nbsp;</span>
<span id="L2939" class="ln">  2939&nbsp;&nbsp;</span>	<span class="comment">// closemuScanHold is whether the previous call to Scan kept closemu RLock&#39;ed</span>
<span id="L2940" class="ln">  2940&nbsp;&nbsp;</span>	<span class="comment">// without unlocking it. It does that when the user passes a *RawBytes scan</span>
<span id="L2941" class="ln">  2941&nbsp;&nbsp;</span>	<span class="comment">// target. In that case, we need to prevent awaitDone from closing the Rows</span>
<span id="L2942" class="ln">  2942&nbsp;&nbsp;</span>	<span class="comment">// while the user&#39;s still using the memory. See go.dev/issue/60304.</span>
<span id="L2943" class="ln">  2943&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2944" class="ln">  2944&nbsp;&nbsp;</span>	<span class="comment">// It is only used by Scan, Next, and NextResultSet which are expected</span>
<span id="L2945" class="ln">  2945&nbsp;&nbsp;</span>	<span class="comment">// not to be called concurrently.</span>
<span id="L2946" class="ln">  2946&nbsp;&nbsp;</span>	closemuScanHold bool
<span id="L2947" class="ln">  2947&nbsp;&nbsp;</span>
<span id="L2948" class="ln">  2948&nbsp;&nbsp;</span>	<span class="comment">// hitEOF is whether Next hit the end of the rows without</span>
<span id="L2949" class="ln">  2949&nbsp;&nbsp;</span>	<span class="comment">// encountering an error. It&#39;s set in Next before</span>
<span id="L2950" class="ln">  2950&nbsp;&nbsp;</span>	<span class="comment">// returning. It&#39;s only used by Next and Err which are</span>
<span id="L2951" class="ln">  2951&nbsp;&nbsp;</span>	<span class="comment">// expected not to be called concurrently.</span>
<span id="L2952" class="ln">  2952&nbsp;&nbsp;</span>	hitEOF bool
<span id="L2953" class="ln">  2953&nbsp;&nbsp;</span>}
<span id="L2954" class="ln">  2954&nbsp;&nbsp;</span>
<span id="L2955" class="ln">  2955&nbsp;&nbsp;</span><span class="comment">// lasterrOrErrLocked returns either lasterr or the provided err.</span>
<span id="L2956" class="ln">  2956&nbsp;&nbsp;</span><span class="comment">// rs.closemu must be read-locked.</span>
<span id="L2957" class="ln">  2957&nbsp;&nbsp;</span>func (rs *Rows) lasterrOrErrLocked(err error) error {
<span id="L2958" class="ln">  2958&nbsp;&nbsp;</span>	if rs.lasterr != nil &amp;&amp; rs.lasterr != io.EOF {
<span id="L2959" class="ln">  2959&nbsp;&nbsp;</span>		return rs.lasterr
<span id="L2960" class="ln">  2960&nbsp;&nbsp;</span>	}
<span id="L2961" class="ln">  2961&nbsp;&nbsp;</span>	return err
<span id="L2962" class="ln">  2962&nbsp;&nbsp;</span>}
<span id="L2963" class="ln">  2963&nbsp;&nbsp;</span>
<span id="L2964" class="ln">  2964&nbsp;&nbsp;</span><span class="comment">// bypassRowsAwaitDone is only used for testing.</span>
<span id="L2965" class="ln">  2965&nbsp;&nbsp;</span><span class="comment">// If true, it will not close the Rows automatically from the context.</span>
<span id="L2966" class="ln">  2966&nbsp;&nbsp;</span>var bypassRowsAwaitDone = false
<span id="L2967" class="ln">  2967&nbsp;&nbsp;</span>
<span id="L2968" class="ln">  2968&nbsp;&nbsp;</span>func (rs *Rows) initContextClose(ctx, txctx context.Context) {
<span id="L2969" class="ln">  2969&nbsp;&nbsp;</span>	if ctx.Done() == nil &amp;&amp; (txctx == nil || txctx.Done() == nil) {
<span id="L2970" class="ln">  2970&nbsp;&nbsp;</span>		return
<span id="L2971" class="ln">  2971&nbsp;&nbsp;</span>	}
<span id="L2972" class="ln">  2972&nbsp;&nbsp;</span>	if bypassRowsAwaitDone {
<span id="L2973" class="ln">  2973&nbsp;&nbsp;</span>		return
<span id="L2974" class="ln">  2974&nbsp;&nbsp;</span>	}
<span id="L2975" class="ln">  2975&nbsp;&nbsp;</span>	closectx, cancel := context.WithCancel(ctx)
<span id="L2976" class="ln">  2976&nbsp;&nbsp;</span>	rs.cancel = cancel
<span id="L2977" class="ln">  2977&nbsp;&nbsp;</span>	go rs.awaitDone(ctx, txctx, closectx)
<span id="L2978" class="ln">  2978&nbsp;&nbsp;</span>}
<span id="L2979" class="ln">  2979&nbsp;&nbsp;</span>
<span id="L2980" class="ln">  2980&nbsp;&nbsp;</span><span class="comment">// awaitDone blocks until ctx, txctx, or closectx is canceled.</span>
<span id="L2981" class="ln">  2981&nbsp;&nbsp;</span><span class="comment">// The ctx is provided from the query context.</span>
<span id="L2982" class="ln">  2982&nbsp;&nbsp;</span><span class="comment">// If the query was issued in a transaction, the transaction&#39;s context</span>
<span id="L2983" class="ln">  2983&nbsp;&nbsp;</span><span class="comment">// is also provided in txctx, to ensure Rows is closed if the Tx is closed.</span>
<span id="L2984" class="ln">  2984&nbsp;&nbsp;</span><span class="comment">// The closectx is closed by an explicit call to rs.Close.</span>
<span id="L2985" class="ln">  2985&nbsp;&nbsp;</span>func (rs *Rows) awaitDone(ctx, txctx, closectx context.Context) {
<span id="L2986" class="ln">  2986&nbsp;&nbsp;</span>	var txctxDone &lt;-chan struct{}
<span id="L2987" class="ln">  2987&nbsp;&nbsp;</span>	if txctx != nil {
<span id="L2988" class="ln">  2988&nbsp;&nbsp;</span>		txctxDone = txctx.Done()
<span id="L2989" class="ln">  2989&nbsp;&nbsp;</span>	}
<span id="L2990" class="ln">  2990&nbsp;&nbsp;</span>	select {
<span id="L2991" class="ln">  2991&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L2992" class="ln">  2992&nbsp;&nbsp;</span>		err := ctx.Err()
<span id="L2993" class="ln">  2993&nbsp;&nbsp;</span>		rs.contextDone.Store(&amp;err)
<span id="L2994" class="ln">  2994&nbsp;&nbsp;</span>	case &lt;-txctxDone:
<span id="L2995" class="ln">  2995&nbsp;&nbsp;</span>		err := txctx.Err()
<span id="L2996" class="ln">  2996&nbsp;&nbsp;</span>		rs.contextDone.Store(&amp;err)
<span id="L2997" class="ln">  2997&nbsp;&nbsp;</span>	case &lt;-closectx.Done():
<span id="L2998" class="ln">  2998&nbsp;&nbsp;</span>		<span class="comment">// rs.cancel was called via Close(); don&#39;t store this into contextDone</span>
<span id="L2999" class="ln">  2999&nbsp;&nbsp;</span>		<span class="comment">// to ensure Err() is unaffected.</span>
<span id="L3000" class="ln">  3000&nbsp;&nbsp;</span>	}
<span id="L3001" class="ln">  3001&nbsp;&nbsp;</span>	rs.close(ctx.Err())
<span id="L3002" class="ln">  3002&nbsp;&nbsp;</span>}
<span id="L3003" class="ln">  3003&nbsp;&nbsp;</span>
<span id="L3004" class="ln">  3004&nbsp;&nbsp;</span><span class="comment">// Next prepares the next result row for reading with the [Rows.Scan] method. It</span>
<span id="L3005" class="ln">  3005&nbsp;&nbsp;</span><span class="comment">// returns true on success, or false if there is no next result row or an error</span>
<span id="L3006" class="ln">  3006&nbsp;&nbsp;</span><span class="comment">// happened while preparing it. [Rows.Err] should be consulted to distinguish between</span>
<span id="L3007" class="ln">  3007&nbsp;&nbsp;</span><span class="comment">// the two cases.</span>
<span id="L3008" class="ln">  3008&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3009" class="ln">  3009&nbsp;&nbsp;</span><span class="comment">// Every call to [Rows.Scan], even the first one, must be preceded by a call to [Rows.Next].</span>
<span id="L3010" class="ln">  3010&nbsp;&nbsp;</span>func (rs *Rows) Next() bool {
<span id="L3011" class="ln">  3011&nbsp;&nbsp;</span>	<span class="comment">// If the user&#39;s calling Next, they&#39;re done with their previous row&#39;s Scan</span>
<span id="L3012" class="ln">  3012&nbsp;&nbsp;</span>	<span class="comment">// results (any RawBytes memory), so we can release the read lock that would</span>
<span id="L3013" class="ln">  3013&nbsp;&nbsp;</span>	<span class="comment">// be preventing awaitDone from calling close.</span>
<span id="L3014" class="ln">  3014&nbsp;&nbsp;</span>	rs.closemuRUnlockIfHeldByScan()
<span id="L3015" class="ln">  3015&nbsp;&nbsp;</span>
<span id="L3016" class="ln">  3016&nbsp;&nbsp;</span>	if rs.contextDone.Load() != nil {
<span id="L3017" class="ln">  3017&nbsp;&nbsp;</span>		return false
<span id="L3018" class="ln">  3018&nbsp;&nbsp;</span>	}
<span id="L3019" class="ln">  3019&nbsp;&nbsp;</span>
<span id="L3020" class="ln">  3020&nbsp;&nbsp;</span>	var doClose, ok bool
<span id="L3021" class="ln">  3021&nbsp;&nbsp;</span>	withLock(rs.closemu.RLocker(), func() {
<span id="L3022" class="ln">  3022&nbsp;&nbsp;</span>		doClose, ok = rs.nextLocked()
<span id="L3023" class="ln">  3023&nbsp;&nbsp;</span>	})
<span id="L3024" class="ln">  3024&nbsp;&nbsp;</span>	if doClose {
<span id="L3025" class="ln">  3025&nbsp;&nbsp;</span>		rs.Close()
<span id="L3026" class="ln">  3026&nbsp;&nbsp;</span>	}
<span id="L3027" class="ln">  3027&nbsp;&nbsp;</span>	if doClose &amp;&amp; !ok {
<span id="L3028" class="ln">  3028&nbsp;&nbsp;</span>		rs.hitEOF = true
<span id="L3029" class="ln">  3029&nbsp;&nbsp;</span>	}
<span id="L3030" class="ln">  3030&nbsp;&nbsp;</span>	return ok
<span id="L3031" class="ln">  3031&nbsp;&nbsp;</span>}
<span id="L3032" class="ln">  3032&nbsp;&nbsp;</span>
<span id="L3033" class="ln">  3033&nbsp;&nbsp;</span>func (rs *Rows) nextLocked() (doClose, ok bool) {
<span id="L3034" class="ln">  3034&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3035" class="ln">  3035&nbsp;&nbsp;</span>		return false, false
<span id="L3036" class="ln">  3036&nbsp;&nbsp;</span>	}
<span id="L3037" class="ln">  3037&nbsp;&nbsp;</span>
<span id="L3038" class="ln">  3038&nbsp;&nbsp;</span>	<span class="comment">// Lock the driver connection before calling the driver interface</span>
<span id="L3039" class="ln">  3039&nbsp;&nbsp;</span>	<span class="comment">// rowsi to prevent a Tx from rolling back the connection at the same time.</span>
<span id="L3040" class="ln">  3040&nbsp;&nbsp;</span>	rs.dc.Lock()
<span id="L3041" class="ln">  3041&nbsp;&nbsp;</span>	defer rs.dc.Unlock()
<span id="L3042" class="ln">  3042&nbsp;&nbsp;</span>
<span id="L3043" class="ln">  3043&nbsp;&nbsp;</span>	if rs.lastcols == nil {
<span id="L3044" class="ln">  3044&nbsp;&nbsp;</span>		rs.lastcols = make([]driver.Value, len(rs.rowsi.Columns()))
<span id="L3045" class="ln">  3045&nbsp;&nbsp;</span>	}
<span id="L3046" class="ln">  3046&nbsp;&nbsp;</span>
<span id="L3047" class="ln">  3047&nbsp;&nbsp;</span>	rs.lasterr = rs.rowsi.Next(rs.lastcols)
<span id="L3048" class="ln">  3048&nbsp;&nbsp;</span>	if rs.lasterr != nil {
<span id="L3049" class="ln">  3049&nbsp;&nbsp;</span>		<span class="comment">// Close the connection if there is a driver error.</span>
<span id="L3050" class="ln">  3050&nbsp;&nbsp;</span>		if rs.lasterr != io.EOF {
<span id="L3051" class="ln">  3051&nbsp;&nbsp;</span>			return true, false
<span id="L3052" class="ln">  3052&nbsp;&nbsp;</span>		}
<span id="L3053" class="ln">  3053&nbsp;&nbsp;</span>		nextResultSet, ok := rs.rowsi.(driver.RowsNextResultSet)
<span id="L3054" class="ln">  3054&nbsp;&nbsp;</span>		if !ok {
<span id="L3055" class="ln">  3055&nbsp;&nbsp;</span>			return true, false
<span id="L3056" class="ln">  3056&nbsp;&nbsp;</span>		}
<span id="L3057" class="ln">  3057&nbsp;&nbsp;</span>		<span class="comment">// The driver is at the end of the current result set.</span>
<span id="L3058" class="ln">  3058&nbsp;&nbsp;</span>		<span class="comment">// Test to see if there is another result set after the current one.</span>
<span id="L3059" class="ln">  3059&nbsp;&nbsp;</span>		<span class="comment">// Only close Rows if there is no further result sets to read.</span>
<span id="L3060" class="ln">  3060&nbsp;&nbsp;</span>		if !nextResultSet.HasNextResultSet() {
<span id="L3061" class="ln">  3061&nbsp;&nbsp;</span>			doClose = true
<span id="L3062" class="ln">  3062&nbsp;&nbsp;</span>		}
<span id="L3063" class="ln">  3063&nbsp;&nbsp;</span>		return doClose, false
<span id="L3064" class="ln">  3064&nbsp;&nbsp;</span>	}
<span id="L3065" class="ln">  3065&nbsp;&nbsp;</span>	return false, true
<span id="L3066" class="ln">  3066&nbsp;&nbsp;</span>}
<span id="L3067" class="ln">  3067&nbsp;&nbsp;</span>
<span id="L3068" class="ln">  3068&nbsp;&nbsp;</span><span class="comment">// NextResultSet prepares the next result set for reading. It reports whether</span>
<span id="L3069" class="ln">  3069&nbsp;&nbsp;</span><span class="comment">// there is further result sets, or false if there is no further result set</span>
<span id="L3070" class="ln">  3070&nbsp;&nbsp;</span><span class="comment">// or if there is an error advancing to it. The [Rows.Err] method should be consulted</span>
<span id="L3071" class="ln">  3071&nbsp;&nbsp;</span><span class="comment">// to distinguish between the two cases.</span>
<span id="L3072" class="ln">  3072&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3073" class="ln">  3073&nbsp;&nbsp;</span><span class="comment">// After calling NextResultSet, the [Rows.Next] method should always be called before</span>
<span id="L3074" class="ln">  3074&nbsp;&nbsp;</span><span class="comment">// scanning. If there are further result sets they may not have rows in the result</span>
<span id="L3075" class="ln">  3075&nbsp;&nbsp;</span><span class="comment">// set.</span>
<span id="L3076" class="ln">  3076&nbsp;&nbsp;</span>func (rs *Rows) NextResultSet() bool {
<span id="L3077" class="ln">  3077&nbsp;&nbsp;</span>	<span class="comment">// If the user&#39;s calling NextResultSet, they&#39;re done with their previous</span>
<span id="L3078" class="ln">  3078&nbsp;&nbsp;</span>	<span class="comment">// row&#39;s Scan results (any RawBytes memory), so we can release the read lock</span>
<span id="L3079" class="ln">  3079&nbsp;&nbsp;</span>	<span class="comment">// that would be preventing awaitDone from calling close.</span>
<span id="L3080" class="ln">  3080&nbsp;&nbsp;</span>	rs.closemuRUnlockIfHeldByScan()
<span id="L3081" class="ln">  3081&nbsp;&nbsp;</span>
<span id="L3082" class="ln">  3082&nbsp;&nbsp;</span>	var doClose bool
<span id="L3083" class="ln">  3083&nbsp;&nbsp;</span>	defer func() {
<span id="L3084" class="ln">  3084&nbsp;&nbsp;</span>		if doClose {
<span id="L3085" class="ln">  3085&nbsp;&nbsp;</span>			rs.Close()
<span id="L3086" class="ln">  3086&nbsp;&nbsp;</span>		}
<span id="L3087" class="ln">  3087&nbsp;&nbsp;</span>	}()
<span id="L3088" class="ln">  3088&nbsp;&nbsp;</span>	rs.closemu.RLock()
<span id="L3089" class="ln">  3089&nbsp;&nbsp;</span>	defer rs.closemu.RUnlock()
<span id="L3090" class="ln">  3090&nbsp;&nbsp;</span>
<span id="L3091" class="ln">  3091&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3092" class="ln">  3092&nbsp;&nbsp;</span>		return false
<span id="L3093" class="ln">  3093&nbsp;&nbsp;</span>	}
<span id="L3094" class="ln">  3094&nbsp;&nbsp;</span>
<span id="L3095" class="ln">  3095&nbsp;&nbsp;</span>	rs.lastcols = nil
<span id="L3096" class="ln">  3096&nbsp;&nbsp;</span>	nextResultSet, ok := rs.rowsi.(driver.RowsNextResultSet)
<span id="L3097" class="ln">  3097&nbsp;&nbsp;</span>	if !ok {
<span id="L3098" class="ln">  3098&nbsp;&nbsp;</span>		doClose = true
<span id="L3099" class="ln">  3099&nbsp;&nbsp;</span>		return false
<span id="L3100" class="ln">  3100&nbsp;&nbsp;</span>	}
<span id="L3101" class="ln">  3101&nbsp;&nbsp;</span>
<span id="L3102" class="ln">  3102&nbsp;&nbsp;</span>	<span class="comment">// Lock the driver connection before calling the driver interface</span>
<span id="L3103" class="ln">  3103&nbsp;&nbsp;</span>	<span class="comment">// rowsi to prevent a Tx from rolling back the connection at the same time.</span>
<span id="L3104" class="ln">  3104&nbsp;&nbsp;</span>	rs.dc.Lock()
<span id="L3105" class="ln">  3105&nbsp;&nbsp;</span>	defer rs.dc.Unlock()
<span id="L3106" class="ln">  3106&nbsp;&nbsp;</span>
<span id="L3107" class="ln">  3107&nbsp;&nbsp;</span>	rs.lasterr = nextResultSet.NextResultSet()
<span id="L3108" class="ln">  3108&nbsp;&nbsp;</span>	if rs.lasterr != nil {
<span id="L3109" class="ln">  3109&nbsp;&nbsp;</span>		doClose = true
<span id="L3110" class="ln">  3110&nbsp;&nbsp;</span>		return false
<span id="L3111" class="ln">  3111&nbsp;&nbsp;</span>	}
<span id="L3112" class="ln">  3112&nbsp;&nbsp;</span>	return true
<span id="L3113" class="ln">  3113&nbsp;&nbsp;</span>}
<span id="L3114" class="ln">  3114&nbsp;&nbsp;</span>
<span id="L3115" class="ln">  3115&nbsp;&nbsp;</span><span class="comment">// Err returns the error, if any, that was encountered during iteration.</span>
<span id="L3116" class="ln">  3116&nbsp;&nbsp;</span><span class="comment">// Err may be called after an explicit or implicit [Rows.Close].</span>
<span id="L3117" class="ln">  3117&nbsp;&nbsp;</span>func (rs *Rows) Err() error {
<span id="L3118" class="ln">  3118&nbsp;&nbsp;</span>	<span class="comment">// Return any context error that might&#39;ve happened during row iteration,</span>
<span id="L3119" class="ln">  3119&nbsp;&nbsp;</span>	<span class="comment">// but only if we haven&#39;t reported the final Next() = false after rows</span>
<span id="L3120" class="ln">  3120&nbsp;&nbsp;</span>	<span class="comment">// are done, in which case the user might&#39;ve canceled their own context</span>
<span id="L3121" class="ln">  3121&nbsp;&nbsp;</span>	<span class="comment">// before calling Rows.Err.</span>
<span id="L3122" class="ln">  3122&nbsp;&nbsp;</span>	if !rs.hitEOF {
<span id="L3123" class="ln">  3123&nbsp;&nbsp;</span>		if errp := rs.contextDone.Load(); errp != nil {
<span id="L3124" class="ln">  3124&nbsp;&nbsp;</span>			return *errp
<span id="L3125" class="ln">  3125&nbsp;&nbsp;</span>		}
<span id="L3126" class="ln">  3126&nbsp;&nbsp;</span>	}
<span id="L3127" class="ln">  3127&nbsp;&nbsp;</span>
<span id="L3128" class="ln">  3128&nbsp;&nbsp;</span>	rs.closemu.RLock()
<span id="L3129" class="ln">  3129&nbsp;&nbsp;</span>	defer rs.closemu.RUnlock()
<span id="L3130" class="ln">  3130&nbsp;&nbsp;</span>	return rs.lasterrOrErrLocked(nil)
<span id="L3131" class="ln">  3131&nbsp;&nbsp;</span>}
<span id="L3132" class="ln">  3132&nbsp;&nbsp;</span>
<span id="L3133" class="ln">  3133&nbsp;&nbsp;</span>var errRowsClosed = errors.New(&#34;sql: Rows are closed&#34;)
<span id="L3134" class="ln">  3134&nbsp;&nbsp;</span>var errNoRows = errors.New(&#34;sql: no Rows available&#34;)
<span id="L3135" class="ln">  3135&nbsp;&nbsp;</span>
<span id="L3136" class="ln">  3136&nbsp;&nbsp;</span><span class="comment">// Columns returns the column names.</span>
<span id="L3137" class="ln">  3137&nbsp;&nbsp;</span><span class="comment">// Columns returns an error if the rows are closed.</span>
<span id="L3138" class="ln">  3138&nbsp;&nbsp;</span>func (rs *Rows) Columns() ([]string, error) {
<span id="L3139" class="ln">  3139&nbsp;&nbsp;</span>	rs.closemu.RLock()
<span id="L3140" class="ln">  3140&nbsp;&nbsp;</span>	defer rs.closemu.RUnlock()
<span id="L3141" class="ln">  3141&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3142" class="ln">  3142&nbsp;&nbsp;</span>		return nil, rs.lasterrOrErrLocked(errRowsClosed)
<span id="L3143" class="ln">  3143&nbsp;&nbsp;</span>	}
<span id="L3144" class="ln">  3144&nbsp;&nbsp;</span>	if rs.rowsi == nil {
<span id="L3145" class="ln">  3145&nbsp;&nbsp;</span>		return nil, rs.lasterrOrErrLocked(errNoRows)
<span id="L3146" class="ln">  3146&nbsp;&nbsp;</span>	}
<span id="L3147" class="ln">  3147&nbsp;&nbsp;</span>	rs.dc.Lock()
<span id="L3148" class="ln">  3148&nbsp;&nbsp;</span>	defer rs.dc.Unlock()
<span id="L3149" class="ln">  3149&nbsp;&nbsp;</span>
<span id="L3150" class="ln">  3150&nbsp;&nbsp;</span>	return rs.rowsi.Columns(), nil
<span id="L3151" class="ln">  3151&nbsp;&nbsp;</span>}
<span id="L3152" class="ln">  3152&nbsp;&nbsp;</span>
<span id="L3153" class="ln">  3153&nbsp;&nbsp;</span><span class="comment">// ColumnTypes returns column information such as column type, length,</span>
<span id="L3154" class="ln">  3154&nbsp;&nbsp;</span><span class="comment">// and nullable. Some information may not be available from some drivers.</span>
<span id="L3155" class="ln">  3155&nbsp;&nbsp;</span>func (rs *Rows) ColumnTypes() ([]*ColumnType, error) {
<span id="L3156" class="ln">  3156&nbsp;&nbsp;</span>	rs.closemu.RLock()
<span id="L3157" class="ln">  3157&nbsp;&nbsp;</span>	defer rs.closemu.RUnlock()
<span id="L3158" class="ln">  3158&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3159" class="ln">  3159&nbsp;&nbsp;</span>		return nil, rs.lasterrOrErrLocked(errRowsClosed)
<span id="L3160" class="ln">  3160&nbsp;&nbsp;</span>	}
<span id="L3161" class="ln">  3161&nbsp;&nbsp;</span>	if rs.rowsi == nil {
<span id="L3162" class="ln">  3162&nbsp;&nbsp;</span>		return nil, rs.lasterrOrErrLocked(errNoRows)
<span id="L3163" class="ln">  3163&nbsp;&nbsp;</span>	}
<span id="L3164" class="ln">  3164&nbsp;&nbsp;</span>	rs.dc.Lock()
<span id="L3165" class="ln">  3165&nbsp;&nbsp;</span>	defer rs.dc.Unlock()
<span id="L3166" class="ln">  3166&nbsp;&nbsp;</span>
<span id="L3167" class="ln">  3167&nbsp;&nbsp;</span>	return rowsColumnInfoSetupConnLocked(rs.rowsi), nil
<span id="L3168" class="ln">  3168&nbsp;&nbsp;</span>}
<span id="L3169" class="ln">  3169&nbsp;&nbsp;</span>
<span id="L3170" class="ln">  3170&nbsp;&nbsp;</span><span class="comment">// ColumnType contains the name and type of a column.</span>
<span id="L3171" class="ln">  3171&nbsp;&nbsp;</span>type ColumnType struct {
<span id="L3172" class="ln">  3172&nbsp;&nbsp;</span>	name string
<span id="L3173" class="ln">  3173&nbsp;&nbsp;</span>
<span id="L3174" class="ln">  3174&nbsp;&nbsp;</span>	hasNullable       bool
<span id="L3175" class="ln">  3175&nbsp;&nbsp;</span>	hasLength         bool
<span id="L3176" class="ln">  3176&nbsp;&nbsp;</span>	hasPrecisionScale bool
<span id="L3177" class="ln">  3177&nbsp;&nbsp;</span>
<span id="L3178" class="ln">  3178&nbsp;&nbsp;</span>	nullable     bool
<span id="L3179" class="ln">  3179&nbsp;&nbsp;</span>	length       int64
<span id="L3180" class="ln">  3180&nbsp;&nbsp;</span>	databaseType string
<span id="L3181" class="ln">  3181&nbsp;&nbsp;</span>	precision    int64
<span id="L3182" class="ln">  3182&nbsp;&nbsp;</span>	scale        int64
<span id="L3183" class="ln">  3183&nbsp;&nbsp;</span>	scanType     reflect.Type
<span id="L3184" class="ln">  3184&nbsp;&nbsp;</span>}
<span id="L3185" class="ln">  3185&nbsp;&nbsp;</span>
<span id="L3186" class="ln">  3186&nbsp;&nbsp;</span><span class="comment">// Name returns the name or alias of the column.</span>
<span id="L3187" class="ln">  3187&nbsp;&nbsp;</span>func (ci *ColumnType) Name() string {
<span id="L3188" class="ln">  3188&nbsp;&nbsp;</span>	return ci.name
<span id="L3189" class="ln">  3189&nbsp;&nbsp;</span>}
<span id="L3190" class="ln">  3190&nbsp;&nbsp;</span>
<span id="L3191" class="ln">  3191&nbsp;&nbsp;</span><span class="comment">// Length returns the column type length for variable length column types such</span>
<span id="L3192" class="ln">  3192&nbsp;&nbsp;</span><span class="comment">// as text and binary field types. If the type length is unbounded the value will</span>
<span id="L3193" class="ln">  3193&nbsp;&nbsp;</span><span class="comment">// be [math.MaxInt64] (any database limits will still apply).</span>
<span id="L3194" class="ln">  3194&nbsp;&nbsp;</span><span class="comment">// If the column type is not variable length, such as an int, or if not supported</span>
<span id="L3195" class="ln">  3195&nbsp;&nbsp;</span><span class="comment">// by the driver ok is false.</span>
<span id="L3196" class="ln">  3196&nbsp;&nbsp;</span>func (ci *ColumnType) Length() (length int64, ok bool) {
<span id="L3197" class="ln">  3197&nbsp;&nbsp;</span>	return ci.length, ci.hasLength
<span id="L3198" class="ln">  3198&nbsp;&nbsp;</span>}
<span id="L3199" class="ln">  3199&nbsp;&nbsp;</span>
<span id="L3200" class="ln">  3200&nbsp;&nbsp;</span><span class="comment">// DecimalSize returns the scale and precision of a decimal type.</span>
<span id="L3201" class="ln">  3201&nbsp;&nbsp;</span><span class="comment">// If not applicable or if not supported ok is false.</span>
<span id="L3202" class="ln">  3202&nbsp;&nbsp;</span>func (ci *ColumnType) DecimalSize() (precision, scale int64, ok bool) {
<span id="L3203" class="ln">  3203&nbsp;&nbsp;</span>	return ci.precision, ci.scale, ci.hasPrecisionScale
<span id="L3204" class="ln">  3204&nbsp;&nbsp;</span>}
<span id="L3205" class="ln">  3205&nbsp;&nbsp;</span>
<span id="L3206" class="ln">  3206&nbsp;&nbsp;</span><span class="comment">// ScanType returns a Go type suitable for scanning into using [Rows.Scan].</span>
<span id="L3207" class="ln">  3207&nbsp;&nbsp;</span><span class="comment">// If a driver does not support this property ScanType will return</span>
<span id="L3208" class="ln">  3208&nbsp;&nbsp;</span><span class="comment">// the type of an empty interface.</span>
<span id="L3209" class="ln">  3209&nbsp;&nbsp;</span>func (ci *ColumnType) ScanType() reflect.Type {
<span id="L3210" class="ln">  3210&nbsp;&nbsp;</span>	return ci.scanType
<span id="L3211" class="ln">  3211&nbsp;&nbsp;</span>}
<span id="L3212" class="ln">  3212&nbsp;&nbsp;</span>
<span id="L3213" class="ln">  3213&nbsp;&nbsp;</span><span class="comment">// Nullable reports whether the column may be null.</span>
<span id="L3214" class="ln">  3214&nbsp;&nbsp;</span><span class="comment">// If a driver does not support this property ok will be false.</span>
<span id="L3215" class="ln">  3215&nbsp;&nbsp;</span>func (ci *ColumnType) Nullable() (nullable, ok bool) {
<span id="L3216" class="ln">  3216&nbsp;&nbsp;</span>	return ci.nullable, ci.hasNullable
<span id="L3217" class="ln">  3217&nbsp;&nbsp;</span>}
<span id="L3218" class="ln">  3218&nbsp;&nbsp;</span>
<span id="L3219" class="ln">  3219&nbsp;&nbsp;</span><span class="comment">// DatabaseTypeName returns the database system name of the column type. If an empty</span>
<span id="L3220" class="ln">  3220&nbsp;&nbsp;</span><span class="comment">// string is returned, then the driver type name is not supported.</span>
<span id="L3221" class="ln">  3221&nbsp;&nbsp;</span><span class="comment">// Consult your driver documentation for a list of driver data types. [ColumnType.Length] specifiers</span>
<span id="L3222" class="ln">  3222&nbsp;&nbsp;</span><span class="comment">// are not included.</span>
<span id="L3223" class="ln">  3223&nbsp;&nbsp;</span><span class="comment">// Common type names include &#34;VARCHAR&#34;, &#34;TEXT&#34;, &#34;NVARCHAR&#34;, &#34;DECIMAL&#34;, &#34;BOOL&#34;,</span>
<span id="L3224" class="ln">  3224&nbsp;&nbsp;</span><span class="comment">// &#34;INT&#34;, and &#34;BIGINT&#34;.</span>
<span id="L3225" class="ln">  3225&nbsp;&nbsp;</span>func (ci *ColumnType) DatabaseTypeName() string {
<span id="L3226" class="ln">  3226&nbsp;&nbsp;</span>	return ci.databaseType
<span id="L3227" class="ln">  3227&nbsp;&nbsp;</span>}
<span id="L3228" class="ln">  3228&nbsp;&nbsp;</span>
<span id="L3229" class="ln">  3229&nbsp;&nbsp;</span>func rowsColumnInfoSetupConnLocked(rowsi driver.Rows) []*ColumnType {
<span id="L3230" class="ln">  3230&nbsp;&nbsp;</span>	names := rowsi.Columns()
<span id="L3231" class="ln">  3231&nbsp;&nbsp;</span>
<span id="L3232" class="ln">  3232&nbsp;&nbsp;</span>	list := make([]*ColumnType, len(names))
<span id="L3233" class="ln">  3233&nbsp;&nbsp;</span>	for i := range list {
<span id="L3234" class="ln">  3234&nbsp;&nbsp;</span>		ci := &amp;ColumnType{
<span id="L3235" class="ln">  3235&nbsp;&nbsp;</span>			name: names[i],
<span id="L3236" class="ln">  3236&nbsp;&nbsp;</span>		}
<span id="L3237" class="ln">  3237&nbsp;&nbsp;</span>		list[i] = ci
<span id="L3238" class="ln">  3238&nbsp;&nbsp;</span>
<span id="L3239" class="ln">  3239&nbsp;&nbsp;</span>		if prop, ok := rowsi.(driver.RowsColumnTypeScanType); ok {
<span id="L3240" class="ln">  3240&nbsp;&nbsp;</span>			ci.scanType = prop.ColumnTypeScanType(i)
<span id="L3241" class="ln">  3241&nbsp;&nbsp;</span>		} else {
<span id="L3242" class="ln">  3242&nbsp;&nbsp;</span>			ci.scanType = reflect.TypeFor[any]()
<span id="L3243" class="ln">  3243&nbsp;&nbsp;</span>		}
<span id="L3244" class="ln">  3244&nbsp;&nbsp;</span>		if prop, ok := rowsi.(driver.RowsColumnTypeDatabaseTypeName); ok {
<span id="L3245" class="ln">  3245&nbsp;&nbsp;</span>			ci.databaseType = prop.ColumnTypeDatabaseTypeName(i)
<span id="L3246" class="ln">  3246&nbsp;&nbsp;</span>		}
<span id="L3247" class="ln">  3247&nbsp;&nbsp;</span>		if prop, ok := rowsi.(driver.RowsColumnTypeLength); ok {
<span id="L3248" class="ln">  3248&nbsp;&nbsp;</span>			ci.length, ci.hasLength = prop.ColumnTypeLength(i)
<span id="L3249" class="ln">  3249&nbsp;&nbsp;</span>		}
<span id="L3250" class="ln">  3250&nbsp;&nbsp;</span>		if prop, ok := rowsi.(driver.RowsColumnTypeNullable); ok {
<span id="L3251" class="ln">  3251&nbsp;&nbsp;</span>			ci.nullable, ci.hasNullable = prop.ColumnTypeNullable(i)
<span id="L3252" class="ln">  3252&nbsp;&nbsp;</span>		}
<span id="L3253" class="ln">  3253&nbsp;&nbsp;</span>		if prop, ok := rowsi.(driver.RowsColumnTypePrecisionScale); ok {
<span id="L3254" class="ln">  3254&nbsp;&nbsp;</span>			ci.precision, ci.scale, ci.hasPrecisionScale = prop.ColumnTypePrecisionScale(i)
<span id="L3255" class="ln">  3255&nbsp;&nbsp;</span>		}
<span id="L3256" class="ln">  3256&nbsp;&nbsp;</span>	}
<span id="L3257" class="ln">  3257&nbsp;&nbsp;</span>	return list
<span id="L3258" class="ln">  3258&nbsp;&nbsp;</span>}
<span id="L3259" class="ln">  3259&nbsp;&nbsp;</span>
<span id="L3260" class="ln">  3260&nbsp;&nbsp;</span><span class="comment">// Scan copies the columns in the current row into the values pointed</span>
<span id="L3261" class="ln">  3261&nbsp;&nbsp;</span><span class="comment">// at by dest. The number of values in dest must be the same as the</span>
<span id="L3262" class="ln">  3262&nbsp;&nbsp;</span><span class="comment">// number of columns in [Rows].</span>
<span id="L3263" class="ln">  3263&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3264" class="ln">  3264&nbsp;&nbsp;</span><span class="comment">// Scan converts columns read from the database into the following</span>
<span id="L3265" class="ln">  3265&nbsp;&nbsp;</span><span class="comment">// common Go types and special types provided by the sql package:</span>
<span id="L3266" class="ln">  3266&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3267" class="ln">  3267&nbsp;&nbsp;</span><span class="comment">//	*string</span>
<span id="L3268" class="ln">  3268&nbsp;&nbsp;</span><span class="comment">//	*[]byte</span>
<span id="L3269" class="ln">  3269&nbsp;&nbsp;</span><span class="comment">//	*int, *int8, *int16, *int32, *int64</span>
<span id="L3270" class="ln">  3270&nbsp;&nbsp;</span><span class="comment">//	*uint, *uint8, *uint16, *uint32, *uint64</span>
<span id="L3271" class="ln">  3271&nbsp;&nbsp;</span><span class="comment">//	*bool</span>
<span id="L3272" class="ln">  3272&nbsp;&nbsp;</span><span class="comment">//	*float32, *float64</span>
<span id="L3273" class="ln">  3273&nbsp;&nbsp;</span><span class="comment">//	*interface{}</span>
<span id="L3274" class="ln">  3274&nbsp;&nbsp;</span><span class="comment">//	*RawBytes</span>
<span id="L3275" class="ln">  3275&nbsp;&nbsp;</span><span class="comment">//	*Rows (cursor value)</span>
<span id="L3276" class="ln">  3276&nbsp;&nbsp;</span><span class="comment">//	any type implementing Scanner (see Scanner docs)</span>
<span id="L3277" class="ln">  3277&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3278" class="ln">  3278&nbsp;&nbsp;</span><span class="comment">// In the most simple case, if the type of the value from the source</span>
<span id="L3279" class="ln">  3279&nbsp;&nbsp;</span><span class="comment">// column is an integer, bool or string type T and dest is of type *T,</span>
<span id="L3280" class="ln">  3280&nbsp;&nbsp;</span><span class="comment">// Scan simply assigns the value through the pointer.</span>
<span id="L3281" class="ln">  3281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3282" class="ln">  3282&nbsp;&nbsp;</span><span class="comment">// Scan also converts between string and numeric types, as long as no</span>
<span id="L3283" class="ln">  3283&nbsp;&nbsp;</span><span class="comment">// information would be lost. While Scan stringifies all numbers</span>
<span id="L3284" class="ln">  3284&nbsp;&nbsp;</span><span class="comment">// scanned from numeric database columns into *string, scans into</span>
<span id="L3285" class="ln">  3285&nbsp;&nbsp;</span><span class="comment">// numeric types are checked for overflow. For example, a float64 with</span>
<span id="L3286" class="ln">  3286&nbsp;&nbsp;</span><span class="comment">// value 300 or a string with value &#34;300&#34; can scan into a uint16, but</span>
<span id="L3287" class="ln">  3287&nbsp;&nbsp;</span><span class="comment">// not into a uint8, though float64(255) or &#34;255&#34; can scan into a</span>
<span id="L3288" class="ln">  3288&nbsp;&nbsp;</span><span class="comment">// uint8. One exception is that scans of some float64 numbers to</span>
<span id="L3289" class="ln">  3289&nbsp;&nbsp;</span><span class="comment">// strings may lose information when stringifying. In general, scan</span>
<span id="L3290" class="ln">  3290&nbsp;&nbsp;</span><span class="comment">// floating point columns into *float64.</span>
<span id="L3291" class="ln">  3291&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3292" class="ln">  3292&nbsp;&nbsp;</span><span class="comment">// If a dest argument has type *[]byte, Scan saves in that argument a</span>
<span id="L3293" class="ln">  3293&nbsp;&nbsp;</span><span class="comment">// copy of the corresponding data. The copy is owned by the caller and</span>
<span id="L3294" class="ln">  3294&nbsp;&nbsp;</span><span class="comment">// can be modified and held indefinitely. The copy can be avoided by</span>
<span id="L3295" class="ln">  3295&nbsp;&nbsp;</span><span class="comment">// using an argument of type [*RawBytes] instead; see the documentation</span>
<span id="L3296" class="ln">  3296&nbsp;&nbsp;</span><span class="comment">// for [RawBytes] for restrictions on its use.</span>
<span id="L3297" class="ln">  3297&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3298" class="ln">  3298&nbsp;&nbsp;</span><span class="comment">// If an argument has type *interface{}, Scan copies the value</span>
<span id="L3299" class="ln">  3299&nbsp;&nbsp;</span><span class="comment">// provided by the underlying driver without conversion. When scanning</span>
<span id="L3300" class="ln">  3300&nbsp;&nbsp;</span><span class="comment">// from a source value of type []byte to *interface{}, a copy of the</span>
<span id="L3301" class="ln">  3301&nbsp;&nbsp;</span><span class="comment">// slice is made and the caller owns the result.</span>
<span id="L3302" class="ln">  3302&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3303" class="ln">  3303&nbsp;&nbsp;</span><span class="comment">// Source values of type [time.Time] may be scanned into values of type</span>
<span id="L3304" class="ln">  3304&nbsp;&nbsp;</span><span class="comment">// *time.Time, *interface{}, *string, or *[]byte. When converting to</span>
<span id="L3305" class="ln">  3305&nbsp;&nbsp;</span><span class="comment">// the latter two, [time.RFC3339Nano] is used.</span>
<span id="L3306" class="ln">  3306&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3307" class="ln">  3307&nbsp;&nbsp;</span><span class="comment">// Source values of type bool may be scanned into types *bool,</span>
<span id="L3308" class="ln">  3308&nbsp;&nbsp;</span><span class="comment">// *interface{}, *string, *[]byte, or [*RawBytes].</span>
<span id="L3309" class="ln">  3309&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3310" class="ln">  3310&nbsp;&nbsp;</span><span class="comment">// For scanning into *bool, the source may be true, false, 1, 0, or</span>
<span id="L3311" class="ln">  3311&nbsp;&nbsp;</span><span class="comment">// string inputs parseable by [strconv.ParseBool].</span>
<span id="L3312" class="ln">  3312&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3313" class="ln">  3313&nbsp;&nbsp;</span><span class="comment">// Scan can also convert a cursor returned from a query, such as</span>
<span id="L3314" class="ln">  3314&nbsp;&nbsp;</span><span class="comment">// &#34;select cursor(select * from my_table) from dual&#34;, into a</span>
<span id="L3315" class="ln">  3315&nbsp;&nbsp;</span><span class="comment">// [*Rows] value that can itself be scanned from. The parent</span>
<span id="L3316" class="ln">  3316&nbsp;&nbsp;</span><span class="comment">// select query will close any cursor [*Rows] if the parent [*Rows] is closed.</span>
<span id="L3317" class="ln">  3317&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3318" class="ln">  3318&nbsp;&nbsp;</span><span class="comment">// If any of the first arguments implementing [Scanner] returns an error,</span>
<span id="L3319" class="ln">  3319&nbsp;&nbsp;</span><span class="comment">// that error will be wrapped in the returned error.</span>
<span id="L3320" class="ln">  3320&nbsp;&nbsp;</span>func (rs *Rows) Scan(dest ...any) error {
<span id="L3321" class="ln">  3321&nbsp;&nbsp;</span>	if rs.closemuScanHold {
<span id="L3322" class="ln">  3322&nbsp;&nbsp;</span>		<span class="comment">// This should only be possible if the user calls Scan twice in a row</span>
<span id="L3323" class="ln">  3323&nbsp;&nbsp;</span>		<span class="comment">// without calling Next.</span>
<span id="L3324" class="ln">  3324&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;sql: Scan called without calling Next (closemuScanHold)&#34;)
<span id="L3325" class="ln">  3325&nbsp;&nbsp;</span>	}
<span id="L3326" class="ln">  3326&nbsp;&nbsp;</span>	rs.closemu.RLock()
<span id="L3327" class="ln">  3327&nbsp;&nbsp;</span>
<span id="L3328" class="ln">  3328&nbsp;&nbsp;</span>	if rs.lasterr != nil &amp;&amp; rs.lasterr != io.EOF {
<span id="L3329" class="ln">  3329&nbsp;&nbsp;</span>		rs.closemu.RUnlock()
<span id="L3330" class="ln">  3330&nbsp;&nbsp;</span>		return rs.lasterr
<span id="L3331" class="ln">  3331&nbsp;&nbsp;</span>	}
<span id="L3332" class="ln">  3332&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3333" class="ln">  3333&nbsp;&nbsp;</span>		err := rs.lasterrOrErrLocked(errRowsClosed)
<span id="L3334" class="ln">  3334&nbsp;&nbsp;</span>		rs.closemu.RUnlock()
<span id="L3335" class="ln">  3335&nbsp;&nbsp;</span>		return err
<span id="L3336" class="ln">  3336&nbsp;&nbsp;</span>	}
<span id="L3337" class="ln">  3337&nbsp;&nbsp;</span>
<span id="L3338" class="ln">  3338&nbsp;&nbsp;</span>	if scanArgsContainRawBytes(dest) {
<span id="L3339" class="ln">  3339&nbsp;&nbsp;</span>		rs.closemuScanHold = true
<span id="L3340" class="ln">  3340&nbsp;&nbsp;</span>	} else {
<span id="L3341" class="ln">  3341&nbsp;&nbsp;</span>		rs.closemu.RUnlock()
<span id="L3342" class="ln">  3342&nbsp;&nbsp;</span>	}
<span id="L3343" class="ln">  3343&nbsp;&nbsp;</span>
<span id="L3344" class="ln">  3344&nbsp;&nbsp;</span>	if rs.lastcols == nil {
<span id="L3345" class="ln">  3345&nbsp;&nbsp;</span>		rs.closemuRUnlockIfHeldByScan()
<span id="L3346" class="ln">  3346&nbsp;&nbsp;</span>		return errors.New(&#34;sql: Scan called without calling Next&#34;)
<span id="L3347" class="ln">  3347&nbsp;&nbsp;</span>	}
<span id="L3348" class="ln">  3348&nbsp;&nbsp;</span>	if len(dest) != len(rs.lastcols) {
<span id="L3349" class="ln">  3349&nbsp;&nbsp;</span>		rs.closemuRUnlockIfHeldByScan()
<span id="L3350" class="ln">  3350&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;sql: expected %d destination arguments in Scan, not %d&#34;, len(rs.lastcols), len(dest))
<span id="L3351" class="ln">  3351&nbsp;&nbsp;</span>	}
<span id="L3352" class="ln">  3352&nbsp;&nbsp;</span>
<span id="L3353" class="ln">  3353&nbsp;&nbsp;</span>	for i, sv := range rs.lastcols {
<span id="L3354" class="ln">  3354&nbsp;&nbsp;</span>		err := convertAssignRows(dest[i], sv, rs)
<span id="L3355" class="ln">  3355&nbsp;&nbsp;</span>		if err != nil {
<span id="L3356" class="ln">  3356&nbsp;&nbsp;</span>			rs.closemuRUnlockIfHeldByScan()
<span id="L3357" class="ln">  3357&nbsp;&nbsp;</span>			return fmt.Errorf(`sql: Scan error on column index %d, name %q: %w`, i, rs.rowsi.Columns()[i], err)
<span id="L3358" class="ln">  3358&nbsp;&nbsp;</span>		}
<span id="L3359" class="ln">  3359&nbsp;&nbsp;</span>	}
<span id="L3360" class="ln">  3360&nbsp;&nbsp;</span>	return nil
<span id="L3361" class="ln">  3361&nbsp;&nbsp;</span>}
<span id="L3362" class="ln">  3362&nbsp;&nbsp;</span>
<span id="L3363" class="ln">  3363&nbsp;&nbsp;</span><span class="comment">// closemuRUnlockIfHeldByScan releases any closemu.RLock held open by a previous</span>
<span id="L3364" class="ln">  3364&nbsp;&nbsp;</span><span class="comment">// call to Scan with *RawBytes.</span>
<span id="L3365" class="ln">  3365&nbsp;&nbsp;</span>func (rs *Rows) closemuRUnlockIfHeldByScan() {
<span id="L3366" class="ln">  3366&nbsp;&nbsp;</span>	if rs.closemuScanHold {
<span id="L3367" class="ln">  3367&nbsp;&nbsp;</span>		rs.closemuScanHold = false
<span id="L3368" class="ln">  3368&nbsp;&nbsp;</span>		rs.closemu.RUnlock()
<span id="L3369" class="ln">  3369&nbsp;&nbsp;</span>	}
<span id="L3370" class="ln">  3370&nbsp;&nbsp;</span>}
<span id="L3371" class="ln">  3371&nbsp;&nbsp;</span>
<span id="L3372" class="ln">  3372&nbsp;&nbsp;</span>func scanArgsContainRawBytes(args []any) bool {
<span id="L3373" class="ln">  3373&nbsp;&nbsp;</span>	for _, a := range args {
<span id="L3374" class="ln">  3374&nbsp;&nbsp;</span>		if _, ok := a.(*RawBytes); ok {
<span id="L3375" class="ln">  3375&nbsp;&nbsp;</span>			return true
<span id="L3376" class="ln">  3376&nbsp;&nbsp;</span>		}
<span id="L3377" class="ln">  3377&nbsp;&nbsp;</span>	}
<span id="L3378" class="ln">  3378&nbsp;&nbsp;</span>	return false
<span id="L3379" class="ln">  3379&nbsp;&nbsp;</span>}
<span id="L3380" class="ln">  3380&nbsp;&nbsp;</span>
<span id="L3381" class="ln">  3381&nbsp;&nbsp;</span><span class="comment">// rowsCloseHook returns a function so tests may install the</span>
<span id="L3382" class="ln">  3382&nbsp;&nbsp;</span><span class="comment">// hook through a test only mutex.</span>
<span id="L3383" class="ln">  3383&nbsp;&nbsp;</span>var rowsCloseHook = func() func(*Rows, *error) { return nil }
<span id="L3384" class="ln">  3384&nbsp;&nbsp;</span>
<span id="L3385" class="ln">  3385&nbsp;&nbsp;</span><span class="comment">// Close closes the [Rows], preventing further enumeration. If [Rows.Next] is called</span>
<span id="L3386" class="ln">  3386&nbsp;&nbsp;</span><span class="comment">// and returns false and there are no further result sets,</span>
<span id="L3387" class="ln">  3387&nbsp;&nbsp;</span><span class="comment">// the [Rows] are closed automatically and it will suffice to check the</span>
<span id="L3388" class="ln">  3388&nbsp;&nbsp;</span><span class="comment">// result of [Rows.Err]. Close is idempotent and does not affect the result of [Rows.Err].</span>
<span id="L3389" class="ln">  3389&nbsp;&nbsp;</span>func (rs *Rows) Close() error {
<span id="L3390" class="ln">  3390&nbsp;&nbsp;</span>	<span class="comment">// If the user&#39;s calling Close, they&#39;re done with their previous row&#39;s Scan</span>
<span id="L3391" class="ln">  3391&nbsp;&nbsp;</span>	<span class="comment">// results (any RawBytes memory), so we can release the read lock that would</span>
<span id="L3392" class="ln">  3392&nbsp;&nbsp;</span>	<span class="comment">// be preventing awaitDone from calling the unexported close before we do so.</span>
<span id="L3393" class="ln">  3393&nbsp;&nbsp;</span>	rs.closemuRUnlockIfHeldByScan()
<span id="L3394" class="ln">  3394&nbsp;&nbsp;</span>
<span id="L3395" class="ln">  3395&nbsp;&nbsp;</span>	return rs.close(nil)
<span id="L3396" class="ln">  3396&nbsp;&nbsp;</span>}
<span id="L3397" class="ln">  3397&nbsp;&nbsp;</span>
<span id="L3398" class="ln">  3398&nbsp;&nbsp;</span>func (rs *Rows) close(err error) error {
<span id="L3399" class="ln">  3399&nbsp;&nbsp;</span>	rs.closemu.Lock()
<span id="L3400" class="ln">  3400&nbsp;&nbsp;</span>	defer rs.closemu.Unlock()
<span id="L3401" class="ln">  3401&nbsp;&nbsp;</span>
<span id="L3402" class="ln">  3402&nbsp;&nbsp;</span>	if rs.closed {
<span id="L3403" class="ln">  3403&nbsp;&nbsp;</span>		return nil
<span id="L3404" class="ln">  3404&nbsp;&nbsp;</span>	}
<span id="L3405" class="ln">  3405&nbsp;&nbsp;</span>	rs.closed = true
<span id="L3406" class="ln">  3406&nbsp;&nbsp;</span>
<span id="L3407" class="ln">  3407&nbsp;&nbsp;</span>	if rs.lasterr == nil {
<span id="L3408" class="ln">  3408&nbsp;&nbsp;</span>		rs.lasterr = err
<span id="L3409" class="ln">  3409&nbsp;&nbsp;</span>	}
<span id="L3410" class="ln">  3410&nbsp;&nbsp;</span>
<span id="L3411" class="ln">  3411&nbsp;&nbsp;</span>	withLock(rs.dc, func() {
<span id="L3412" class="ln">  3412&nbsp;&nbsp;</span>		err = rs.rowsi.Close()
<span id="L3413" class="ln">  3413&nbsp;&nbsp;</span>	})
<span id="L3414" class="ln">  3414&nbsp;&nbsp;</span>	if fn := rowsCloseHook(); fn != nil {
<span id="L3415" class="ln">  3415&nbsp;&nbsp;</span>		fn(rs, &amp;err)
<span id="L3416" class="ln">  3416&nbsp;&nbsp;</span>	}
<span id="L3417" class="ln">  3417&nbsp;&nbsp;</span>	if rs.cancel != nil {
<span id="L3418" class="ln">  3418&nbsp;&nbsp;</span>		rs.cancel()
<span id="L3419" class="ln">  3419&nbsp;&nbsp;</span>	}
<span id="L3420" class="ln">  3420&nbsp;&nbsp;</span>
<span id="L3421" class="ln">  3421&nbsp;&nbsp;</span>	if rs.closeStmt != nil {
<span id="L3422" class="ln">  3422&nbsp;&nbsp;</span>		rs.closeStmt.Close()
<span id="L3423" class="ln">  3423&nbsp;&nbsp;</span>	}
<span id="L3424" class="ln">  3424&nbsp;&nbsp;</span>	rs.releaseConn(err)
<span id="L3425" class="ln">  3425&nbsp;&nbsp;</span>
<span id="L3426" class="ln">  3426&nbsp;&nbsp;</span>	rs.lasterr = rs.lasterrOrErrLocked(err)
<span id="L3427" class="ln">  3427&nbsp;&nbsp;</span>	return err
<span id="L3428" class="ln">  3428&nbsp;&nbsp;</span>}
<span id="L3429" class="ln">  3429&nbsp;&nbsp;</span>
<span id="L3430" class="ln">  3430&nbsp;&nbsp;</span><span class="comment">// Row is the result of calling [DB.QueryRow] to select a single row.</span>
<span id="L3431" class="ln">  3431&nbsp;&nbsp;</span>type Row struct {
<span id="L3432" class="ln">  3432&nbsp;&nbsp;</span>	<span class="comment">// One of these two will be non-nil:</span>
<span id="L3433" class="ln">  3433&nbsp;&nbsp;</span>	err  error <span class="comment">// deferred error for easy chaining</span>
<span id="L3434" class="ln">  3434&nbsp;&nbsp;</span>	rows *Rows
<span id="L3435" class="ln">  3435&nbsp;&nbsp;</span>}
<span id="L3436" class="ln">  3436&nbsp;&nbsp;</span>
<span id="L3437" class="ln">  3437&nbsp;&nbsp;</span><span class="comment">// Scan copies the columns from the matched row into the values</span>
<span id="L3438" class="ln">  3438&nbsp;&nbsp;</span><span class="comment">// pointed at by dest. See the documentation on [Rows.Scan] for details.</span>
<span id="L3439" class="ln">  3439&nbsp;&nbsp;</span><span class="comment">// If more than one row matches the query,</span>
<span id="L3440" class="ln">  3440&nbsp;&nbsp;</span><span class="comment">// Scan uses the first row and discards the rest. If no row matches</span>
<span id="L3441" class="ln">  3441&nbsp;&nbsp;</span><span class="comment">// the query, Scan returns [ErrNoRows].</span>
<span id="L3442" class="ln">  3442&nbsp;&nbsp;</span>func (r *Row) Scan(dest ...any) error {
<span id="L3443" class="ln">  3443&nbsp;&nbsp;</span>	if r.err != nil {
<span id="L3444" class="ln">  3444&nbsp;&nbsp;</span>		return r.err
<span id="L3445" class="ln">  3445&nbsp;&nbsp;</span>	}
<span id="L3446" class="ln">  3446&nbsp;&nbsp;</span>
<span id="L3447" class="ln">  3447&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): for now we need to defensively clone all</span>
<span id="L3448" class="ln">  3448&nbsp;&nbsp;</span>	<span class="comment">// []byte that the driver returned (not permitting</span>
<span id="L3449" class="ln">  3449&nbsp;&nbsp;</span>	<span class="comment">// *RawBytes in Rows.Scan), since we&#39;re about to close</span>
<span id="L3450" class="ln">  3450&nbsp;&nbsp;</span>	<span class="comment">// the Rows in our defer, when we return from this function.</span>
<span id="L3451" class="ln">  3451&nbsp;&nbsp;</span>	<span class="comment">// the contract with the driver.Next(...) interface is that it</span>
<span id="L3452" class="ln">  3452&nbsp;&nbsp;</span>	<span class="comment">// can return slices into read-only temporary memory that&#39;s</span>
<span id="L3453" class="ln">  3453&nbsp;&nbsp;</span>	<span class="comment">// only valid until the next Scan/Close. But the TODO is that</span>
<span id="L3454" class="ln">  3454&nbsp;&nbsp;</span>	<span class="comment">// for a lot of drivers, this copy will be unnecessary. We</span>
<span id="L3455" class="ln">  3455&nbsp;&nbsp;</span>	<span class="comment">// should provide an optional interface for drivers to</span>
<span id="L3456" class="ln">  3456&nbsp;&nbsp;</span>	<span class="comment">// implement to say, &#34;don&#39;t worry, the []bytes that I return</span>
<span id="L3457" class="ln">  3457&nbsp;&nbsp;</span>	<span class="comment">// from Next will not be modified again.&#34; (for instance, if</span>
<span id="L3458" class="ln">  3458&nbsp;&nbsp;</span>	<span class="comment">// they were obtained from the network anyway) But for now we</span>
<span id="L3459" class="ln">  3459&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t care.</span>
<span id="L3460" class="ln">  3460&nbsp;&nbsp;</span>	defer r.rows.Close()
<span id="L3461" class="ln">  3461&nbsp;&nbsp;</span>	for _, dp := range dest {
<span id="L3462" class="ln">  3462&nbsp;&nbsp;</span>		if _, ok := dp.(*RawBytes); ok {
<span id="L3463" class="ln">  3463&nbsp;&nbsp;</span>			return errors.New(&#34;sql: RawBytes isn&#39;t allowed on Row.Scan&#34;)
<span id="L3464" class="ln">  3464&nbsp;&nbsp;</span>		}
<span id="L3465" class="ln">  3465&nbsp;&nbsp;</span>	}
<span id="L3466" class="ln">  3466&nbsp;&nbsp;</span>
<span id="L3467" class="ln">  3467&nbsp;&nbsp;</span>	if !r.rows.Next() {
<span id="L3468" class="ln">  3468&nbsp;&nbsp;</span>		if err := r.rows.Err(); err != nil {
<span id="L3469" class="ln">  3469&nbsp;&nbsp;</span>			return err
<span id="L3470" class="ln">  3470&nbsp;&nbsp;</span>		}
<span id="L3471" class="ln">  3471&nbsp;&nbsp;</span>		return ErrNoRows
<span id="L3472" class="ln">  3472&nbsp;&nbsp;</span>	}
<span id="L3473" class="ln">  3473&nbsp;&nbsp;</span>	err := r.rows.Scan(dest...)
<span id="L3474" class="ln">  3474&nbsp;&nbsp;</span>	if err != nil {
<span id="L3475" class="ln">  3475&nbsp;&nbsp;</span>		return err
<span id="L3476" class="ln">  3476&nbsp;&nbsp;</span>	}
<span id="L3477" class="ln">  3477&nbsp;&nbsp;</span>	<span class="comment">// Make sure the query can be processed to completion with no errors.</span>
<span id="L3478" class="ln">  3478&nbsp;&nbsp;</span>	return r.rows.Close()
<span id="L3479" class="ln">  3479&nbsp;&nbsp;</span>}
<span id="L3480" class="ln">  3480&nbsp;&nbsp;</span>
<span id="L3481" class="ln">  3481&nbsp;&nbsp;</span><span class="comment">// Err provides a way for wrapping packages to check for</span>
<span id="L3482" class="ln">  3482&nbsp;&nbsp;</span><span class="comment">// query errors without calling [Row.Scan].</span>
<span id="L3483" class="ln">  3483&nbsp;&nbsp;</span><span class="comment">// Err returns the error, if any, that was encountered while running the query.</span>
<span id="L3484" class="ln">  3484&nbsp;&nbsp;</span><span class="comment">// If this error is not nil, this error will also be returned from [Row.Scan].</span>
<span id="L3485" class="ln">  3485&nbsp;&nbsp;</span>func (r *Row) Err() error {
<span id="L3486" class="ln">  3486&nbsp;&nbsp;</span>	return r.err
<span id="L3487" class="ln">  3487&nbsp;&nbsp;</span>}
<span id="L3488" class="ln">  3488&nbsp;&nbsp;</span>
<span id="L3489" class="ln">  3489&nbsp;&nbsp;</span><span class="comment">// A Result summarizes an executed SQL command.</span>
<span id="L3490" class="ln">  3490&nbsp;&nbsp;</span>type Result interface {
<span id="L3491" class="ln">  3491&nbsp;&nbsp;</span>	<span class="comment">// LastInsertId returns the integer generated by the database</span>
<span id="L3492" class="ln">  3492&nbsp;&nbsp;</span>	<span class="comment">// in response to a command. Typically this will be from an</span>
<span id="L3493" class="ln">  3493&nbsp;&nbsp;</span>	<span class="comment">// &#34;auto increment&#34; column when inserting a new row. Not all</span>
<span id="L3494" class="ln">  3494&nbsp;&nbsp;</span>	<span class="comment">// databases support this feature, and the syntax of such</span>
<span id="L3495" class="ln">  3495&nbsp;&nbsp;</span>	<span class="comment">// statements varies.</span>
<span id="L3496" class="ln">  3496&nbsp;&nbsp;</span>	LastInsertId() (int64, error)
<span id="L3497" class="ln">  3497&nbsp;&nbsp;</span>
<span id="L3498" class="ln">  3498&nbsp;&nbsp;</span>	<span class="comment">// RowsAffected returns the number of rows affected by an</span>
<span id="L3499" class="ln">  3499&nbsp;&nbsp;</span>	<span class="comment">// update, insert, or delete. Not every database or database</span>
<span id="L3500" class="ln">  3500&nbsp;&nbsp;</span>	<span class="comment">// driver may support this.</span>
<span id="L3501" class="ln">  3501&nbsp;&nbsp;</span>	RowsAffected() (int64, error)
<span id="L3502" class="ln">  3502&nbsp;&nbsp;</span>}
<span id="L3503" class="ln">  3503&nbsp;&nbsp;</span>
<span id="L3504" class="ln">  3504&nbsp;&nbsp;</span>type driverResult struct {
<span id="L3505" class="ln">  3505&nbsp;&nbsp;</span>	sync.Locker <span class="comment">// the *driverConn</span>
<span id="L3506" class="ln">  3506&nbsp;&nbsp;</span>	resi        driver.Result
<span id="L3507" class="ln">  3507&nbsp;&nbsp;</span>}
<span id="L3508" class="ln">  3508&nbsp;&nbsp;</span>
<span id="L3509" class="ln">  3509&nbsp;&nbsp;</span>func (dr driverResult) LastInsertId() (int64, error) {
<span id="L3510" class="ln">  3510&nbsp;&nbsp;</span>	dr.Lock()
<span id="L3511" class="ln">  3511&nbsp;&nbsp;</span>	defer dr.Unlock()
<span id="L3512" class="ln">  3512&nbsp;&nbsp;</span>	return dr.resi.LastInsertId()
<span id="L3513" class="ln">  3513&nbsp;&nbsp;</span>}
<span id="L3514" class="ln">  3514&nbsp;&nbsp;</span>
<span id="L3515" class="ln">  3515&nbsp;&nbsp;</span>func (dr driverResult) RowsAffected() (int64, error) {
<span id="L3516" class="ln">  3516&nbsp;&nbsp;</span>	dr.Lock()
<span id="L3517" class="ln">  3517&nbsp;&nbsp;</span>	defer dr.Unlock()
<span id="L3518" class="ln">  3518&nbsp;&nbsp;</span>	return dr.resi.RowsAffected()
<span id="L3519" class="ln">  3519&nbsp;&nbsp;</span>}
<span id="L3520" class="ln">  3520&nbsp;&nbsp;</span>
<span id="L3521" class="ln">  3521&nbsp;&nbsp;</span>func stack() string {
<span id="L3522" class="ln">  3522&nbsp;&nbsp;</span>	var buf [2 &lt;&lt; 10]byte
<span id="L3523" class="ln">  3523&nbsp;&nbsp;</span>	return string(buf[:runtime.Stack(buf[:], false)])
<span id="L3524" class="ln">  3524&nbsp;&nbsp;</span>}
<span id="L3525" class="ln">  3525&nbsp;&nbsp;</span>
<span id="L3526" class="ln">  3526&nbsp;&nbsp;</span><span class="comment">// withLock runs while holding lk.</span>
<span id="L3527" class="ln">  3527&nbsp;&nbsp;</span>func withLock(lk sync.Locker, fn func()) {
<span id="L3528" class="ln">  3528&nbsp;&nbsp;</span>	lk.Lock()
<span id="L3529" class="ln">  3529&nbsp;&nbsp;</span>	defer lk.Unlock() <span class="comment">// in case fn panics</span>
<span id="L3530" class="ln">  3530&nbsp;&nbsp;</span>	fn()
<span id="L3531" class="ln">  3531&nbsp;&nbsp;</span>}
<span id="L3532" class="ln">  3532&nbsp;&nbsp;</span>
</pre><p><a href="sql.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
