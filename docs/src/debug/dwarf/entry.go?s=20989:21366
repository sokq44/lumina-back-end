<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/debug/dwarf/entry.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./entry.go?s=20989:21366#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/debug">debug</a>/<a href="http://localhost:8080/src/debug/dwarf">dwarf</a>/<span class="text-muted">entry.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/debug/dwarf">debug/dwarf</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// DWARF debug information entry parser.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// An entry is a sequence of data items of a given format.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The first word in the entry is an index into what DWARF</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// calls the ``abbreviation table.&#39;&#39;  An abbreviation is really</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// just a type descriptor: it&#39;s an array of attribute tag/value format pairs.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package dwarf
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import (
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// a single entry&#39;s description: a sequence of attributes</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type abbrev struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	tag      Tag
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	children bool
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	field    []afield
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>type afield struct {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	attr  Attr
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	fmt   format
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	class Class
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	val   int64 <span class="comment">// for formImplicitConst</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// a map from entry format ids to their descriptions</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>type abbrevTable map[uint32]abbrev
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// parseAbbrev returns the abbreviation table that starts at byte off</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// in the .debug_abbrev section.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (d *Data) parseAbbrev(off uint64, vers int) (abbrevTable, error) {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	if m, ok := d.abbrevCache[off]; ok {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		return m, nil
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	data := d.abbrev
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	if off &gt; uint64(len(data)) {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		data = nil
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	} else {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		data = data[off:]
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	b := makeBuf(d, unknownFormat{}, &#34;abbrev&#34;, 0, data)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// Error handling is simplified by the buf getters</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// returning an endless stream of 0s after an error.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	m := make(abbrevTable)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	for {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		<span class="comment">// Table ends with id == 0.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		id := uint32(b.uint())
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		if id == 0 {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			break
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		<span class="comment">// Walk over attributes, counting.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		n := 0
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		b1 := b <span class="comment">// Read from copy of b.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		b1.uint()
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		b1.uint8()
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		for {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			tag := b1.uint()
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			fmt := b1.uint()
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			if tag == 0 &amp;&amp; fmt == 0 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>				break
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>			}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			if format(fmt) == formImplicitConst {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>				b1.int()
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			n++
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		if b1.err != nil {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			return nil, b1.err
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		<span class="comment">// Walk over attributes again, this time writing them down.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		var a abbrev
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		a.tag = Tag(b.uint())
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		a.children = b.uint8() != 0
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		a.field = make([]afield, n)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		for i := range a.field {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			a.field[i].attr = Attr(b.uint())
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			a.field[i].fmt = format(b.uint())
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			a.field[i].class = formToClass(a.field[i].fmt, a.field[i].attr, vers, &amp;b)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			if a.field[i].fmt == formImplicitConst {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>				a.field[i].val = b.int()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>			}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		b.uint()
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		b.uint()
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		m[id] = a
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		return nil, b.err
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	d.abbrevCache[off] = m
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return m, nil
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// attrIsExprloc indicates attributes that allow exprloc values that</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// are encoded as block values in DWARF 2 and 3. See DWARF 4, Figure</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// 20.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>var attrIsExprloc = map[Attr]bool{
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	AttrLocation:      true,
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	AttrByteSize:      true,
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	AttrBitOffset:     true,
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	AttrBitSize:       true,
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	AttrStringLength:  true,
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	AttrLowerBound:    true,
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	AttrReturnAddr:    true,
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	AttrStrideSize:    true,
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	AttrUpperBound:    true,
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	AttrCount:         true,
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	AttrDataMemberLoc: true,
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	AttrFrameBase:     true,
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	AttrSegment:       true,
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	AttrStaticLink:    true,
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	AttrUseLocation:   true,
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	AttrVtableElemLoc: true,
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	AttrAllocated:     true,
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	AttrAssociated:    true,
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	AttrDataLocation:  true,
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	AttrStride:        true,
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// attrPtrClass indicates the *ptr class of attributes that have</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// encoding formSecOffset in DWARF 4 or formData* in DWARF 2 and 3.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>var attrPtrClass = map[Attr]Class{
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	AttrLocation:      ClassLocListPtr,
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	AttrStmtList:      ClassLinePtr,
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	AttrStringLength:  ClassLocListPtr,
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	AttrReturnAddr:    ClassLocListPtr,
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	AttrStartScope:    ClassRangeListPtr,
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	AttrDataMemberLoc: ClassLocListPtr,
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	AttrFrameBase:     ClassLocListPtr,
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	AttrMacroInfo:     ClassMacPtr,
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	AttrSegment:       ClassLocListPtr,
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	AttrStaticLink:    ClassLocListPtr,
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	AttrUseLocation:   ClassLocListPtr,
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	AttrVtableElemLoc: ClassLocListPtr,
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	AttrRanges:        ClassRangeListPtr,
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// The following are new in DWARF 5.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	AttrStrOffsetsBase: ClassStrOffsetsPtr,
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	AttrAddrBase:       ClassAddrPtr,
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	AttrRnglistsBase:   ClassRngListsPtr,
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	AttrLoclistsBase:   ClassLocListPtr,
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// formToClass returns the DWARF 4 Class for the given form. If the</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// DWARF version is less then 4, it will disambiguate some forms</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// depending on the attribute.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func formToClass(form format, attr Attr, vers int, b *buf) Class {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	switch form {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	default:
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		b.error(&#34;cannot determine class of unknown attribute form&#34;)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		return 0
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	case formIndirect:
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return ClassUnknown
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	case formAddr, formAddrx, formAddrx1, formAddrx2, formAddrx3, formAddrx4:
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return ClassAddress
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	case formDwarfBlock1, formDwarfBlock2, formDwarfBlock4, formDwarfBlock:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		<span class="comment">// In DWARF 2 and 3, ClassExprLoc was encoded as a</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// block. DWARF 4 distinguishes ClassBlock and</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		<span class="comment">// ClassExprLoc, but there are no attributes that can</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		<span class="comment">// be both, so we also promote ClassBlock values in</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// DWARF 4 that should be ClassExprLoc in case</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// producers get this wrong.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		if attrIsExprloc[attr] {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			return ClassExprLoc
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		return ClassBlock
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	case formData1, formData2, formData4, formData8, formSdata, formUdata, formData16, formImplicitConst:
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		<span class="comment">// In DWARF 2 and 3, ClassPtr was encoded as a</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		<span class="comment">// constant. Unlike ClassExprLoc/ClassBlock, some</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		<span class="comment">// DWARF 4 attributes need to distinguish Class*Ptr</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		<span class="comment">// from ClassConstant, so we only do this promotion</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		<span class="comment">// for versions 2 and 3.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if class, ok := attrPtrClass[attr]; vers &lt; 4 &amp;&amp; ok {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			return class
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		return ClassConstant
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	case formFlag, formFlagPresent:
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return ClassFlag
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	case formRefAddr, formRef1, formRef2, formRef4, formRef8, formRefUdata, formRefSup4, formRefSup8:
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		return ClassReference
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	case formRefSig8:
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return ClassReferenceSig
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	case formString, formStrp, formStrx, formStrpSup, formLineStrp, formStrx1, formStrx2, formStrx3, formStrx4:
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return ClassString
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	case formSecOffset:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		<span class="comment">// DWARF 4 defines four *ptr classes, but doesn&#39;t</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		<span class="comment">// distinguish them in the encoding. Disambiguate</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		<span class="comment">// these classes using the attribute.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		if class, ok := attrPtrClass[attr]; ok {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			return class
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return ClassUnknown
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	case formExprloc:
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return ClassExprLoc
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	case formGnuRefAlt:
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return ClassReferenceAlt
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	case formGnuStrpAlt:
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return ClassStringAlt
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	case formLoclistx:
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return ClassLocList
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	case formRnglistx:
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		return ClassRngList
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// An entry is a sequence of attribute/value pairs.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>type Entry struct {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	Offset   Offset <span class="comment">// offset of Entry in DWARF info</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	Tag      Tag    <span class="comment">// tag (kind of Entry)</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	Children bool   <span class="comment">// whether Entry is followed by children</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	Field    []Field
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// A Field is a single attribute/value pair in an [Entry].</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// A value can be one of several &#34;attribute classes&#34; defined by DWARF.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// The Go types corresponding to each class are:</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">//	DWARF class       Go type        Class</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">//	-----------       -------        -----</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">//	address           uint64         ClassAddress</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//	block             []byte         ClassBlock</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">//	constant          int64          ClassConstant</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">//	flag              bool           ClassFlag</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">//	reference</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">//	  to info         dwarf.Offset   ClassReference</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//	  to type unit    uint64         ClassReferenceSig</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">//	string            string         ClassString</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//	exprloc           []byte         ClassExprLoc</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//	lineptr           int64          ClassLinePtr</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//	loclistptr        int64          ClassLocListPtr</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">//	macptr            int64          ClassMacPtr</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//	rangelistptr      int64          ClassRangeListPtr</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// For unrecognized or vendor-defined attributes, [Class] may be</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// [ClassUnknown].</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>type Field struct {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	Attr  Attr
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	Val   any
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	Class Class
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// A Class is the DWARF 4 class of an attribute value.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// In general, a given attribute&#39;s value may take on one of several</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// possible classes defined by DWARF, each of which leads to a</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// slightly different interpretation of the attribute.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// DWARF version 4 distinguishes attribute value classes more finely</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// than previous versions of DWARF. The reader will disambiguate</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// coarser classes from earlier versions of DWARF into the appropriate</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// DWARF 4 class. For example, DWARF 2 uses &#34;constant&#34; for constants</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// as well as all types of section offsets, but the reader will</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// canonicalize attributes in DWARF 2 files that refer to section</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// offsets to one of the Class*Ptr classes, even though these classes</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// were only defined in DWARF 3.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>type Class int
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>const (
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// ClassUnknown represents values of unknown DWARF class.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	ClassUnknown Class = iota
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// ClassAddress represents values of type uint64 that are</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// addresses on the target machine.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	ClassAddress
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	<span class="comment">// ClassBlock represents values of type []byte whose</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// interpretation depends on the attribute.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	ClassBlock
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	<span class="comment">// ClassConstant represents values of type int64 that are</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// constants. The interpretation of this constant depends on</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// the attribute.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	ClassConstant
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// ClassExprLoc represents values of type []byte that contain</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// an encoded DWARF expression or location description.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	ClassExprLoc
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// ClassFlag represents values of type bool.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	ClassFlag
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// ClassLinePtr represents values that are an int64 offset</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">// into the &#34;line&#34; section.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	ClassLinePtr
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// ClassLocListPtr represents values that are an int64 offset</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// into the &#34;loclist&#34; section.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	ClassLocListPtr
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// ClassMacPtr represents values that are an int64 offset into</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// the &#34;mac&#34; section.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	ClassMacPtr
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	<span class="comment">// ClassRangeListPtr represents values that are an int64 offset into</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	<span class="comment">// the &#34;rangelist&#34; section.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	ClassRangeListPtr
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// ClassReference represents values that are an Offset offset</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// of an Entry in the info section (for use with Reader.Seek).</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// The DWARF specification combines ClassReference and</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// ClassReferenceSig into class &#34;reference&#34;.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	ClassReference
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// ClassReferenceSig represents values that are a uint64 type</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// signature referencing a type Entry.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	ClassReferenceSig
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// ClassString represents values that are strings. If the</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// compilation unit specifies the AttrUseUTF8 flag (strongly</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// recommended), the string value will be encoded in UTF-8.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, the encoding is unspecified.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	ClassString
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// ClassReferenceAlt represents values of type int64 that are</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// an offset into the DWARF &#34;info&#34; section of an alternate</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// object file.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	ClassReferenceAlt
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// ClassStringAlt represents values of type int64 that are an</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// offset into the DWARF string section of an alternate object</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// file.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	ClassStringAlt
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	<span class="comment">// ClassAddrPtr represents values that are an int64 offset</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	<span class="comment">// into the &#34;addr&#34; section.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	ClassAddrPtr
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// ClassLocList represents values that are an int64 offset</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// into the &#34;loclists&#34; section.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	ClassLocList
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// ClassRngList represents values that are a uint64 offset</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// from the base of the &#34;rnglists&#34; section.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	ClassRngList
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	<span class="comment">// ClassRngListsPtr represents values that are an int64 offset</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// into the &#34;rnglists&#34; section. These are used as the base for</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// ClassRngList values.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	ClassRngListsPtr
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	<span class="comment">// ClassStrOffsetsPtr represents values that are an int64</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	<span class="comment">// offset into the &#34;str_offsets&#34; section.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	ClassStrOffsetsPtr
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">//go:generate stringer -type=Class</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>func (i Class) GoString() string {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	return &#34;dwarf.&#34; + i.String()
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// Val returns the value associated with attribute [Attr] in [Entry],</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// or nil if there is no such attribute.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// A common idiom is to merge the check for nil return with</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// the check that the value has the expected dynamic type, as in:</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">//	v, ok := e.Val(AttrSibling).(int64)</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func (e *Entry) Val(a Attr) any {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	if f := e.AttrField(a); f != nil {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		return f.Val
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	return nil
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// AttrField returns the [Field] associated with attribute [Attr] in</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// [Entry], or nil if there is no such attribute.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>func (e *Entry) AttrField(a Attr) *Field {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	for i, f := range e.Field {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		if f.Attr == a {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			return &amp;e.Field[i]
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return nil
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// An Offset represents the location of an [Entry] within the DWARF info.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// (See [Reader.Seek].)</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>type Offset uint32
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">// Entry reads a single entry from buf, decoding</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// according to the given abbreviation table.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>func (b *buf) entry(cu *Entry, atab abbrevTable, ubase Offset, vers int) *Entry {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	off := b.off
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	id := uint32(b.uint())
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	if id == 0 {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return &amp;Entry{}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	a, ok := atab[id]
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if !ok {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		b.error(&#34;unknown abbreviation table index&#34;)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		return nil
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	e := &amp;Entry{
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		Offset:   off,
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		Tag:      a.tag,
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		Children: a.children,
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		Field:    make([]Field, len(a.field)),
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	<span class="comment">// If we are currently parsing the compilation unit,</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	<span class="comment">// we can&#39;t evaluate Addrx or Strx until we&#39;ve seen the</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	<span class="comment">// relevant base entry.</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	type delayed struct {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		idx int
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		off uint64
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		fmt format
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	var delay []delayed
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	resolveStrx := func(strBase, off uint64) string {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		off += strBase
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		if uint64(int(off)) != off {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			b.error(&#34;DW_FORM_strx offset out of range&#34;)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		b1 := makeBuf(b.dwarf, b.format, &#34;str_offsets&#34;, 0, b.dwarf.strOffsets)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		b1.skip(int(off))
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		is64, _ := b.format.dwarf64()
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		if is64 {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			off = b1.uint64()
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		} else {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			off = uint64(b1.uint32())
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		if b1.err != nil {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			b.err = b1.err
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			return &#34;&#34;
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		if uint64(int(off)) != off {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			b.error(&#34;DW_FORM_strx indirect offset out of range&#34;)
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		b1 = makeBuf(b.dwarf, b.format, &#34;str&#34;, 0, b.dwarf.str)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		b1.skip(int(off))
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		val := b1.string()
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		if b1.err != nil {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			b.err = b1.err
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		return val
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	resolveRnglistx := func(rnglistsBase, off uint64) uint64 {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		is64, _ := b.format.dwarf64()
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		if is64 {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			off *= 8
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		} else {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			off *= 4
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		off += rnglistsBase
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		if uint64(int(off)) != off {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			b.error(&#34;DW_FORM_rnglistx offset out of range&#34;)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		b1 := makeBuf(b.dwarf, b.format, &#34;rnglists&#34;, 0, b.dwarf.rngLists)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		b1.skip(int(off))
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		if is64 {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			off = b1.uint64()
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		} else {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>			off = uint64(b1.uint32())
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		if b1.err != nil {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			b.err = b1.err
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			return 0
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		if uint64(int(off)) != off {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			b.error(&#34;DW_FORM_rnglistx indirect offset out of range&#34;)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		return rnglistsBase + off
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	for i := range e.Field {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		e.Field[i].Attr = a.field[i].attr
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		e.Field[i].Class = a.field[i].class
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		fmt := a.field[i].fmt
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		if fmt == formIndirect {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			fmt = format(b.uint())
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			e.Field[i].Class = formToClass(fmt, a.field[i].attr, vers, b)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		var val any
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		switch fmt {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		default:
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			b.error(&#34;unknown entry attr format 0x&#34; + strconv.FormatInt(int64(fmt), 16))
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		<span class="comment">// address</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		case formAddr:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			val = b.addr()
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		case formAddrx, formAddrx1, formAddrx2, formAddrx3, formAddrx4:
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			var off uint64
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			switch fmt {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			case formAddrx:
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>				off = b.uint()
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			case formAddrx1:
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>				off = uint64(b.uint8())
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			case formAddrx2:
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>				off = uint64(b.uint16())
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			case formAddrx3:
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>				off = uint64(b.uint24())
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			case formAddrx4:
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>				off = uint64(b.uint32())
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			if b.dwarf.addr == nil {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>				b.error(&#34;DW_FORM_addrx with no .debug_addr section&#34;)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			if b.err != nil {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>				return nil
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			<span class="comment">// We have to adjust by the offset of the</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			<span class="comment">// compilation unit. This won&#39;t work if the</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			<span class="comment">// program uses Reader.Seek to skip over the</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			<span class="comment">// unit. Not much we can do about that.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			var addrBase int64
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			if cu != nil {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>				addrBase, _ = cu.Val(AttrAddrBase).(int64)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			} else if a.tag == TagCompileUnit {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>				delay = append(delay, delayed{i, off, formAddrx})
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				break
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			var err error
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			val, err = b.dwarf.debugAddr(b.format, uint64(addrBase), off)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			if err != nil {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>				if b.err == nil {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>					b.err = err
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>				}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>				return nil
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		<span class="comment">// block</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		case formDwarfBlock1:
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			val = b.bytes(int(b.uint8()))
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		case formDwarfBlock2:
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			val = b.bytes(int(b.uint16()))
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		case formDwarfBlock4:
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			val = b.bytes(int(b.uint32()))
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		case formDwarfBlock:
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			val = b.bytes(int(b.uint()))
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		<span class="comment">// constant</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		case formData1:
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			val = int64(b.uint8())
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		case formData2:
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			val = int64(b.uint16())
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		case formData4:
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			val = int64(b.uint32())
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		case formData8:
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			val = int64(b.uint64())
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		case formData16:
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			val = b.bytes(16)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		case formSdata:
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			val = int64(b.int())
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		case formUdata:
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			val = int64(b.uint())
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		case formImplicitConst:
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			val = a.field[i].val
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		<span class="comment">// flag</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		case formFlag:
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			val = b.uint8() == 1
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		<span class="comment">// New in DWARF 4.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		case formFlagPresent:
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			<span class="comment">// The attribute is implicitly indicated as present, and no value is</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			<span class="comment">// encoded in the debugging information entry itself.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			val = true
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		<span class="comment">// reference to other entry</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		case formRefAddr:
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			vers := b.format.version()
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			if vers == 0 {
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>				b.error(&#34;unknown version for DW_FORM_ref_addr&#34;)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			} else if vers == 2 {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>				val = Offset(b.addr())
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			} else {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>				is64, known := b.format.dwarf64()
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>				if !known {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>					b.error(&#34;unknown size for DW_FORM_ref_addr&#34;)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>				} else if is64 {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>					val = Offset(b.uint64())
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>				} else {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>					val = Offset(b.uint32())
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>				}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		case formRef1:
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			val = Offset(b.uint8()) + ubase
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		case formRef2:
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>			val = Offset(b.uint16()) + ubase
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		case formRef4:
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>			val = Offset(b.uint32()) + ubase
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		case formRef8:
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>			val = Offset(b.uint64()) + ubase
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		case formRefUdata:
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			val = Offset(b.uint()) + ubase
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		<span class="comment">// string</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		case formString:
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			val = b.string()
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		case formStrp, formLineStrp:
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			var off uint64 <span class="comment">// offset into .debug_str</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			is64, known := b.format.dwarf64()
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			if !known {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>				b.error(&#34;unknown size for DW_FORM_strp/line_strp&#34;)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			} else if is64 {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>				off = b.uint64()
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			} else {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>				off = uint64(b.uint32())
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			if uint64(int(off)) != off {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>				b.error(&#34;DW_FORM_strp/line_strp offset out of range&#34;)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			if b.err != nil {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>				return nil
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			var b1 buf
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if fmt == formStrp {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				b1 = makeBuf(b.dwarf, b.format, &#34;str&#34;, 0, b.dwarf.str)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			} else {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>				if len(b.dwarf.lineStr) == 0 {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>					b.error(&#34;DW_FORM_line_strp with no .debug_line_str section&#34;)
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>					return nil
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>				}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				b1 = makeBuf(b.dwarf, b.format, &#34;line_str&#34;, 0, b.dwarf.lineStr)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			b1.skip(int(off))
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			val = b1.string()
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			if b1.err != nil {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>				b.err = b1.err
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>				return nil
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		case formStrx, formStrx1, formStrx2, formStrx3, formStrx4:
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			var off uint64
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			switch fmt {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>			case formStrx:
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>				off = b.uint()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			case formStrx1:
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>				off = uint64(b.uint8())
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			case formStrx2:
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>				off = uint64(b.uint16())
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			case formStrx3:
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				off = uint64(b.uint24())
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			case formStrx4:
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>				off = uint64(b.uint32())
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			if len(b.dwarf.strOffsets) == 0 {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>				b.error(&#34;DW_FORM_strx with no .debug_str_offsets section&#34;)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			is64, known := b.format.dwarf64()
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			if !known {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>				b.error(&#34;unknown offset size for DW_FORM_strx&#34;)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			if b.err != nil {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>				return nil
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			if is64 {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>				off *= 8
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			} else {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>				off *= 4
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			<span class="comment">// We have to adjust by the offset of the</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			<span class="comment">// compilation unit. This won&#39;t work if the</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>			<span class="comment">// program uses Reader.Seek to skip over the</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			<span class="comment">// unit. Not much we can do about that.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			var strBase int64
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			if cu != nil {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>				strBase, _ = cu.Val(AttrStrOffsetsBase).(int64)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			} else if a.tag == TagCompileUnit {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>				delay = append(delay, delayed{i, off, formStrx})
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>				break
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			val = resolveStrx(uint64(strBase), off)
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		case formStrpSup:
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			is64, known := b.format.dwarf64()
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			if !known {
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>				b.error(&#34;unknown size for DW_FORM_strp_sup&#34;)
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			} else if is64 {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				val = b.uint64()
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			} else {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				val = b.uint32()
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		<span class="comment">// lineptr, loclistptr, macptr, rangelistptr</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		<span class="comment">// New in DWARF 4, but clang can generate them with -gdwarf-2.</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		<span class="comment">// Section reference, replacing use of formData4 and formData8.</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		case formSecOffset, formGnuRefAlt, formGnuStrpAlt:
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			is64, known := b.format.dwarf64()
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			if !known {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>				b.error(&#34;unknown size for form 0x&#34; + strconv.FormatInt(int64(fmt), 16))
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			} else if is64 {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>				val = int64(b.uint64())
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			} else {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>				val = int64(b.uint32())
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		<span class="comment">// exprloc</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		<span class="comment">// New in DWARF 4.</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		case formExprloc:
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			val = b.bytes(int(b.uint()))
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		<span class="comment">// reference</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		<span class="comment">// New in DWARF 4.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		case formRefSig8:
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			<span class="comment">// 64-bit type signature.</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			val = b.uint64()
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		case formRefSup4:
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			val = b.uint32()
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		case formRefSup8:
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>			val = b.uint64()
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		<span class="comment">// loclist</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		case formLoclistx:
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			val = b.uint()
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		<span class="comment">// rnglist</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		case formRnglistx:
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			off := b.uint()
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			<span class="comment">// We have to adjust by the rnglists_base of</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			<span class="comment">// the compilation unit. This won&#39;t work if</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			<span class="comment">// the program uses Reader.Seek to skip over</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			<span class="comment">// the unit. Not much we can do about that.</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			var rnglistsBase int64
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			if cu != nil {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>				rnglistsBase, _ = cu.Val(AttrRnglistsBase).(int64)
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>			} else if a.tag == TagCompileUnit {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>				delay = append(delay, delayed{i, off, formRnglistx})
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>				break
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>			}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			val = resolveRnglistx(uint64(rnglistsBase), off)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		e.Field[i].Val = val
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		return nil
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	for _, del := range delay {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		switch del.fmt {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		case formAddrx:
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			addrBase, _ := e.Val(AttrAddrBase).(int64)
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>			val, err := b.dwarf.debugAddr(b.format, uint64(addrBase), del.off)
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			if err != nil {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>				b.err = err
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>				return nil
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			e.Field[del.idx].Val = val
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		case formStrx:
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			strBase, _ := e.Val(AttrStrOffsetsBase).(int64)
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>			e.Field[del.idx].Val = resolveStrx(uint64(strBase), del.off)
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			if b.err != nil {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>				return nil
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>			}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		case formRnglistx:
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			rnglistsBase, _ := e.Val(AttrRnglistsBase).(int64)
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			e.Field[del.idx].Val = resolveRnglistx(uint64(rnglistsBase), del.off)
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			if b.err != nil {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>				return nil
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	return e
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// A Reader allows reading [Entry] structures from a DWARF “info” section.</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// The [Entry] structures are arranged in a tree. The [Reader.Next] function</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span><span class="comment">// return successive entries from a pre-order traversal of the tree.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span><span class="comment">// If an entry has children, its Children field will be true, and the children</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span><span class="comment">// follow, terminated by an [Entry] with [Tag] 0.</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span><span class="selection">type Reader struct {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	b            buf
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	d            *Data
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	err          error
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	unit         int
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	lastUnit     bool   </span><span class="selection-comment">// set if last entry returned by Next is TagCompileUnit/TagPartialUnit</span><span class="selection">
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	lastChildren bool   </span><span class="selection-comment">// .Children of last entry returned by Next</span><span class="selection">
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	lastSibling  Offset </span><span class="selection-comment">// .Val(AttrSibling) of last entry returned by Next</span><span class="selection">
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	cu           *Entry </span><span class="selection-comment">// current compilation unit</span><span class="selection">
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>}</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span><span class="comment">// Reader returns a new Reader for [Data].</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span><span class="comment">// The reader is positioned at byte offset 0 in the DWARF “info” section.</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>func (d *Data) Reader() *Reader {
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	r := &amp;Reader{d: d}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	r.Seek(0)
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	return r
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// AddressSize returns the size in bytes of addresses in the current compilation</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// unit.</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>func (r *Reader) AddressSize() int {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	return r.d.unit[r.unit].asize
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">// ByteOrder returns the byte order in the current compilation unit.</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>func (r *Reader) ByteOrder() binary.ByteOrder {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	return r.b.order
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// Seek positions the [Reader] at offset off in the encoded entry stream.</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">// Offset 0 can be used to denote the first entry.</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>func (r *Reader) Seek(off Offset) {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	d := r.d
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	r.err = nil
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	r.lastChildren = false
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	if off == 0 {
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		if len(d.unit) == 0 {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>			return
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		u := &amp;d.unit[0]
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		r.unit = 0
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		r.b = makeBuf(r.d, u, &#34;info&#34;, u.off, u.data)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>		r.cu = nil
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		return
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	i := d.offsetToUnit(off)
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	if i == -1 {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		r.err = errors.New(&#34;offset out of range&#34;)
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		return
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	if i != r.unit {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		r.cu = nil
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	}
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	u := &amp;d.unit[i]
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	r.unit = i
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	r.b = makeBuf(r.d, u, &#34;info&#34;, off, u.data[off-u.off:])
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span><span class="comment">// maybeNextUnit advances to the next unit if this one is finished.</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>func (r *Reader) maybeNextUnit() {
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	for len(r.b.data) == 0 &amp;&amp; r.unit+1 &lt; len(r.d.unit) {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		r.nextUnit()
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span><span class="comment">// nextUnit advances to the next unit.</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>func (r *Reader) nextUnit() {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	r.unit++
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	u := &amp;r.d.unit[r.unit]
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	r.b = makeBuf(r.d, u, &#34;info&#34;, u.off, u.data)
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	r.cu = nil
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// Next reads the next entry from the encoded entry stream.</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// It returns nil, nil when it reaches the end of the section.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// It returns an error if the current offset is invalid or the data at the</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// offset cannot be decoded as a valid [Entry].</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>func (r *Reader) Next() (*Entry, error) {
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	if r.err != nil {
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>		return nil, r.err
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	r.maybeNextUnit()
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	if len(r.b.data) == 0 {
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>		return nil, nil
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	}
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	u := &amp;r.d.unit[r.unit]
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	e := r.b.entry(r.cu, u.atable, u.base, u.vers)
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	if r.b.err != nil {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		r.err = r.b.err
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		return nil, r.err
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	r.lastUnit = false
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	if e != nil {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		r.lastChildren = e.Children
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		if r.lastChildren {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			r.lastSibling, _ = e.Val(AttrSibling).(Offset)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		if e.Tag == TagCompileUnit || e.Tag == TagPartialUnit {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>			r.lastUnit = true
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			r.cu = e
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	} else {
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>		r.lastChildren = false
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	return e, nil
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>}
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// SkipChildren skips over the child entries associated with</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">// the last [Entry] returned by [Reader.Next]. If that [Entry] did not have</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">// children or [Reader.Next] has not been called, SkipChildren is a no-op.</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>func (r *Reader) SkipChildren() {
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	if r.err != nil || !r.lastChildren {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		return
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	<span class="comment">// If the last entry had a sibling attribute,</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	<span class="comment">// that attribute gives the offset of the next</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	<span class="comment">// sibling, so we can avoid decoding the</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	<span class="comment">// child subtrees.</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	if r.lastSibling &gt;= r.b.off {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		r.Seek(r.lastSibling)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>		return
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	if r.lastUnit &amp;&amp; r.unit+1 &lt; len(r.d.unit) {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		r.nextUnit()
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		return
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	}
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	for {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		e, err := r.Next()
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		if err != nil || e == nil || e.Tag == 0 {
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>			break
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>		if e.Children {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>			r.SkipChildren()
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>		}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	}
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>}
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span><span class="comment">// clone returns a copy of the reader. This is used by the typeReader</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span><span class="comment">// interface.</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func (r *Reader) clone() typeReader {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	return r.d.Reader()
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span><span class="comment">// offset returns the current buffer offset. This is used by the</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span><span class="comment">// typeReader interface.</span>
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>func (r *Reader) offset() Offset {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	return r.b.off
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>}
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span><span class="comment">// SeekPC returns the [Entry] for the compilation unit that includes pc,</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// and positions the reader to read the children of that unit.  If pc</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">// is not covered by any unit, SeekPC returns [ErrUnknownPC] and the</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span><span class="comment">// position of the reader is undefined.</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span><span class="comment">// Because compilation units can describe multiple regions of the</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span><span class="comment">// executable, in the worst case SeekPC must search through all the</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span><span class="comment">// ranges in all the compilation units. Each call to SeekPC starts the</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span><span class="comment">// search at the compilation unit of the last call, so in general</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span><span class="comment">// looking up a series of PCs will be faster if they are sorted. If</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span><span class="comment">// the caller wishes to do repeated fast PC lookups, it should build</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span><span class="comment">// an appropriate index using the Ranges method.</span>
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>func (r *Reader) SeekPC(pc uint64) (*Entry, error) {
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	unit := r.unit
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	for i := 0; i &lt; len(r.d.unit); i++ {
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		if unit &gt;= len(r.d.unit) {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			unit = 0
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>		}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		r.err = nil
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		r.lastChildren = false
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		r.unit = unit
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		r.cu = nil
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		u := &amp;r.d.unit[unit]
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		r.b = makeBuf(r.d, u, &#34;info&#34;, u.off, u.data)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		e, err := r.Next()
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		if err != nil {
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			return nil, err
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		}
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		if e == nil || e.Tag == 0 {
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			return nil, ErrUnknownPC
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		ranges, err := r.d.Ranges(e)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		if err != nil {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>			return nil, err
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		for _, pcs := range ranges {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			if pcs[0] &lt;= pc &amp;&amp; pc &lt; pcs[1] {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>				return e, nil
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>			}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		}
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		unit++
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	}
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	return nil, ErrUnknownPC
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>}
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span><span class="comment">// Ranges returns the PC ranges covered by e, a slice of [low,high) pairs.</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span><span class="comment">// Only some entry types, such as [TagCompileUnit] or [TagSubprogram], have PC</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span><span class="comment">// ranges; for others, this will return nil with no error.</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>func (d *Data) Ranges(e *Entry) ([][2]uint64, error) {
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	var ret [][2]uint64
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	low, lowOK := e.Val(AttrLowpc).(uint64)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	var high uint64
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>	var highOK bool
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	highField := e.AttrField(AttrHighpc)
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	if highField != nil {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		switch highField.Class {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		case ClassAddress:
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			high, highOK = highField.Val.(uint64)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		case ClassConstant:
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>			off, ok := highField.Val.(int64)
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>			if ok {
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>				high = low + uint64(off)
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>				highOK = true
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>			}
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		}
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	if lowOK &amp;&amp; highOK {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		ret = append(ret, [2]uint64{low, high})
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	}
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	var u *unit
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	if uidx := d.offsetToUnit(e.Offset); uidx &gt;= 0 &amp;&amp; uidx &lt; len(d.unit) {
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		u = &amp;d.unit[uidx]
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	}
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	if u != nil &amp;&amp; u.vers &gt;= 5 &amp;&amp; d.rngLists != nil {
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>		<span class="comment">// DWARF version 5 and later</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		field := e.AttrField(AttrRanges)
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>		if field == nil {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>			return ret, nil
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>		}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>		switch field.Class {
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>		case ClassRangeListPtr:
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>			ranges, rangesOK := field.Val.(int64)
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>			if !rangesOK {
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>				return ret, nil
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>			}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>			cu, base, err := d.baseAddressForEntry(e)
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>			if err != nil {
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>				return nil, err
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>			}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>			return d.dwarf5Ranges(u, cu, base, ranges, ret)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>		case ClassRngList:
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>			rnglist, ok := field.Val.(uint64)
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>			if !ok {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>				return ret, nil
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>			}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>			cu, base, err := d.baseAddressForEntry(e)
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>			if err != nil {
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>				return nil, err
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>			}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>			return d.dwarf5Ranges(u, cu, base, int64(rnglist), ret)
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		default:
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>			return ret, nil
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>		}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	}
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	<span class="comment">// DWARF version 2 through 4</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	ranges, rangesOK := e.Val(AttrRanges).(int64)
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	if rangesOK &amp;&amp; d.ranges != nil {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		_, base, err := d.baseAddressForEntry(e)
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>		if err != nil {
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>			return nil, err
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		}
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>		return d.dwarf2Ranges(u, base, ranges, ret)
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	return ret, nil
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span><span class="comment">// baseAddressForEntry returns the initial base address to be used when</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span><span class="comment">// looking up the range list of entry e.</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">// DWARF specifies that this should be the lowpc attribute of the enclosing</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">// compilation unit, however comments in gdb/dwarf2read.c say that some</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span><span class="comment">// versions of GCC use the entrypc attribute, so we check that too.</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>func (d *Data) baseAddressForEntry(e *Entry) (*Entry, uint64, error) {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	var cu *Entry
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	if e.Tag == TagCompileUnit {
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		cu = e
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	} else {
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		i := d.offsetToUnit(e.Offset)
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>		if i == -1 {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>			return nil, 0, errors.New(&#34;no unit for entry&#34;)
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>		}
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>		u := &amp;d.unit[i]
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>		b := makeBuf(d, u, &#34;info&#34;, u.off, u.data)
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		cu = b.entry(nil, u.atable, u.base, u.vers)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>			return nil, 0, b.err
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	}
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	if cuEntry, cuEntryOK := cu.Val(AttrEntrypc).(uint64); cuEntryOK {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		return cu, cuEntry, nil
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	} else if cuLow, cuLowOK := cu.Val(AttrLowpc).(uint64); cuLowOK {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		return cu, cuLow, nil
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	return cu, 0, nil
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>func (d *Data) dwarf2Ranges(u *unit, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error) {
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	if ranges &lt; 0 || ranges &gt; int64(len(d.ranges)) {
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;invalid range offset %d (max %d)&#34;, ranges, len(d.ranges))
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	}
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	buf := makeBuf(d, u, &#34;ranges&#34;, Offset(ranges), d.ranges[ranges:])
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	for len(buf.data) &gt; 0 {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>		low := buf.addr()
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>		high := buf.addr()
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		if low == 0 &amp;&amp; high == 0 {
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>			break
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		}
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		if low == ^uint64(0)&gt;&gt;uint((8-u.addrsize())*8) {
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>			base = high
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		} else {
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{base + low, base + high})
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		}
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	return ret, nil
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>}
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span><span class="comment">// dwarf5Ranges interprets a debug_rnglists sequence, see DWARFv5 section</span>
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span><span class="comment">// 2.17.3 (page 53).</span>
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>func (d *Data) dwarf5Ranges(u *unit, cu *Entry, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error) {
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	if ranges &lt; 0 || ranges &gt; int64(len(d.rngLists)) {
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;invalid rnglist offset %d (max %d)&#34;, ranges, len(d.ranges))
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	}
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	var addrBase int64
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	if cu != nil {
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		addrBase, _ = cu.Val(AttrAddrBase).(int64)
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	}
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	buf := makeBuf(d, u, &#34;rnglists&#34;, 0, d.rngLists)
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	buf.skip(int(ranges))
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	for {
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		opcode := buf.uint8()
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		switch opcode {
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		case rleEndOfList:
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>			if buf.err != nil {
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>				return nil, buf.err
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>			}
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>			return ret, nil
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>		case rleBaseAddressx:
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>			baseIdx := buf.uint()
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>			var err error
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>			base, err = d.debugAddr(u, uint64(addrBase), baseIdx)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>			if err != nil {
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>				return nil, err
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>			}
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		case rleStartxEndx:
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			startIdx := buf.uint()
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			endIdx := buf.uint()
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			start, err := d.debugAddr(u, uint64(addrBase), startIdx)
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>			if err != nil {
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>				return nil, err
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			}
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			end, err := d.debugAddr(u, uint64(addrBase), endIdx)
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>			if err != nil {
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>				return nil, err
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>			}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{start, end})
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>		case rleStartxLength:
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>			startIdx := buf.uint()
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>			len := buf.uint()
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>			start, err := d.debugAddr(u, uint64(addrBase), startIdx)
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>			if err != nil {
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>				return nil, err
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>			}
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{start, start + len})
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		case rleOffsetPair:
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>			off1 := buf.uint()
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>			off2 := buf.uint()
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{base + off1, base + off2})
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		case rleBaseAddress:
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>			base = buf.addr()
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		case rleStartEnd:
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>			start := buf.addr()
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>			end := buf.addr()
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{start, end})
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		case rleStartLength:
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>			start := buf.addr()
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>			len := buf.uint()
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>			ret = append(ret, [2]uint64{start, start + len})
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		}
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	}
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>}
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span><span class="comment">// debugAddr returns the address at idx in debug_addr</span>
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>func (d *Data) debugAddr(format dataFormat, addrBase, idx uint64) (uint64, error) {
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	off := idx*uint64(format.addrsize()) + addrBase
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	if uint64(int(off)) != off {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>		return 0, errors.New(&#34;offset out of range&#34;)
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>	}
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>	b := makeBuf(d, format, &#34;addr&#34;, 0, d.addr)
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>	b.skip(int(off))
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>	val := b.addr()
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		return 0, b.err
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	}
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	return val, nil
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>}
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>
</pre><p><a href="entry.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
