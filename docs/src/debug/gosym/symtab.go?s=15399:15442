<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/debug/gosym/symtab.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./symtab.go?s=15399:15442#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/debug">debug</a>/<a href="http://localhost:8080/src/debug/gosym">gosym</a>/<span class="text-muted">symtab.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/debug/gosym">debug/gosym</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package gosym implements access to the Go symbol</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// and line number tables embedded in Go binaries generated</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// by the gc compilers.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package gosym
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">/*
<span id="L19" class="ln">    19&nbsp;&nbsp;</span> * Symbols
<span id="L20" class="ln">    20&nbsp;&nbsp;</span> */</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// A Sym represents a single symbol table entry.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>type Sym struct {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Value  uint64
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Type   byte
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Name   string
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	GoType uint64
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// If this symbol is a function symbol, the corresponding Func</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Func *Func
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	goVersion version
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Static reports whether this symbol is static (not visible outside its file).</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func (s *Sym) Static() bool { return s.Type &gt;= &#39;a&#39; }
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// nameWithoutInst returns s.Name if s.Name has no brackets (does not reference an</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// instantiated type, function, or method). If s.Name contains brackets, then it</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// returns s.Name with all the contents between (and including) the outermost left</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// and right bracket removed. This is useful to ignore any extra slashes or dots</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// inside the brackets from the string searches below, where needed.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (s *Sym) nameWithoutInst() string {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	start := strings.Index(s.Name, &#34;[&#34;)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if start &lt; 0 {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return s.Name
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	end := strings.LastIndex(s.Name, &#34;]&#34;)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if end &lt; 0 {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		<span class="comment">// Malformed name, should contain closing bracket too.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		return s.Name
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	return s.Name[0:start] + s.Name[end+1:]
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// PackageName returns the package part of the symbol name,</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// or the empty string if there is none.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func (s *Sym) PackageName() string {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	name := s.nameWithoutInst()
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Since go1.20, a prefix of &#34;type:&#34; and &#34;go:&#34; is a compiler-generated symbol,</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// they do not belong to any package.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// See cmd/compile/internal/base/link.go:ReservedImports variable.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if s.goVersion &gt;= ver120 &amp;&amp; (strings.HasPrefix(name, &#34;go:&#34;) || strings.HasPrefix(name, &#34;type:&#34;)) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// For go1.18 and below, the prefix are &#34;type.&#34; and &#34;go.&#34; instead.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	if s.goVersion &lt;= ver118 &amp;&amp; (strings.HasPrefix(name, &#34;go.&#34;) || strings.HasPrefix(name, &#34;type.&#34;)) {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	pathend := strings.LastIndex(name, &#34;/&#34;)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if pathend &lt; 0 {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		pathend = 0
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if i := strings.Index(name[pathend:], &#34;.&#34;); i != -1 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		return name[:pathend+i]
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// ReceiverName returns the receiver type name of this symbol,</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// or the empty string if there is none.  A receiver name is only detected in</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// the case that s.Name is fully-specified with a package name.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>func (s *Sym) ReceiverName() string {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	name := s.nameWithoutInst()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// If we find a slash in name, it should precede any bracketed expression</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// that was removed, so pathend will apply correctly to name and s.Name.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	pathend := strings.LastIndex(name, &#34;/&#34;)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if pathend &lt; 0 {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		pathend = 0
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// Find the first dot after pathend (or from the beginning, if there was</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// no slash in name).</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	l := strings.Index(name[pathend:], &#34;.&#34;)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// Find the last dot after pathend (or the beginning).</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	r := strings.LastIndex(name[pathend:], &#34;.&#34;)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if l == -1 || r == -1 || l == r {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		<span class="comment">// There is no receiver if we didn&#39;t find two distinct dots after pathend.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// Given there is a trailing &#39;.&#39; that is in name, find it now in s.Name.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// pathend+l should apply to s.Name, because it should be the dot in the</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// package name.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	r = strings.LastIndex(s.Name[pathend:], &#34;.&#34;)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	return s.Name[pathend+l+1 : pathend+r]
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// BaseName returns the symbol name without the package or receiver name.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func (s *Sym) BaseName() string {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	name := s.nameWithoutInst()
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	if i := strings.LastIndex(name, &#34;.&#34;); i != -1 {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		if s.Name != name {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			brack := strings.Index(s.Name, &#34;[&#34;)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			if i &gt; brack {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>				<span class="comment">// BaseName is a method name after the brackets, so</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>				<span class="comment">// recalculate for s.Name. Otherwise, i applies</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				<span class="comment">// correctly to s.Name, since it is before the</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				<span class="comment">// brackets.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				i = strings.LastIndex(s.Name, &#34;.&#34;)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return s.Name[i+1:]
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return s.Name
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// A Func collects information about a single function.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>type Func struct {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	Entry uint64
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	*Sym
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	End       uint64
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	Params    []*Sym <span class="comment">// nil for Go 1.3 and later binaries</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	Locals    []*Sym <span class="comment">// nil for Go 1.3 and later binaries</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	FrameSize int
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	LineTable *LineTable
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	Obj       *Obj
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// An Obj represents a collection of functions in a symbol table.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// The exact method of division of a binary into separate Objs is an internal detail</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// of the symbol table format.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// In early versions of Go each source file became a different Obj.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// In Go 1 and Go 1.1, each package produced one Obj for all Go sources</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// and one Obj per C source file.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// In Go 1.2, there is a single Obj for the entire program.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>type Obj struct {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// Funcs is a list of functions in the Obj.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	Funcs []Func
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// In Go 1.1 and earlier, Paths is a list of symbols corresponding</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// to the source file names that produced the Obj.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// In Go 1.2, Paths is nil.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// Use the keys of Table.Files to obtain a list of source files.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	Paths []Sym <span class="comment">// meta</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">/*
<span id="L165" class="ln">   165&nbsp;&nbsp;</span> * Symbol tables
<span id="L166" class="ln">   166&nbsp;&nbsp;</span> */</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Table represents a Go symbol table. It stores all of the</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// symbols decoded from the program and provides methods to translate</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// between symbols, names, and addresses.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>type Table struct {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	Syms  []Sym <span class="comment">// nil for Go 1.3 and later binaries</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	Funcs []Func
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	Files map[string]*Obj <span class="comment">// for Go 1.2 and later all files map to one Obj</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	Objs  []Obj           <span class="comment">// for Go 1.2 and later only one Obj in slice</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	go12line *LineTable <span class="comment">// Go 1.2 line number table</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>type sym struct {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	value  uint64
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	gotype uint64
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	typ    byte
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	name   []byte
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>var (
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	littleEndianSymtab    = []byte{0xFD, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	bigEndianSymtab       = []byte{0xFF, 0xFF, 0xFF, 0xFD, 0x00, 0x00, 0x00}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	oldLittleEndianSymtab = []byte{0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func walksymtab(data []byte, fn func(sym) error) error {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if len(data) == 0 { <span class="comment">// missing symtab is okay</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return nil
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	var order binary.ByteOrder = binary.BigEndian
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	newTable := false
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	switch {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	case bytes.HasPrefix(data, oldLittleEndianSymtab):
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		<span class="comment">// Same as Go 1.0, but little endian.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		<span class="comment">// Format was used during interim development between Go 1.0 and Go 1.1.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		<span class="comment">// Should not be widespread, but easy to support.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		data = data[6:]
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		order = binary.LittleEndian
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	case bytes.HasPrefix(data, bigEndianSymtab):
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		newTable = true
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	case bytes.HasPrefix(data, littleEndianSymtab):
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		newTable = true
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		order = binary.LittleEndian
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	var ptrsz int
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if newTable {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if len(data) &lt; 8 {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		ptrsz = int(data[7])
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		if ptrsz != 4 &amp;&amp; ptrsz != 8 {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			return &amp;DecodingError{7, &#34;invalid pointer size&#34;, ptrsz}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		data = data[8:]
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	var s sym
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	p := data
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	for len(p) &gt;= 4 {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		var typ byte
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if newTable {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			<span class="comment">// Symbol type, value, Go type.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			typ = p[0] &amp; 0x3F
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			wideValue := p[0]&amp;0x40 != 0
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			goType := p[0]&amp;0x80 != 0
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			if typ &lt; 26 {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				typ += &#39;A&#39;
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			} else {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				typ += &#39;a&#39; - 26
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			s.typ = typ
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			p = p[1:]
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			if wideValue {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				if len(p) &lt; ptrsz {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>					return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				<span class="comment">// fixed-width value</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				if ptrsz == 8 {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>					s.value = order.Uint64(p[0:8])
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>					p = p[8:]
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				} else {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>					s.value = uint64(order.Uint32(p[0:4]))
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>					p = p[4:]
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			} else {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>				<span class="comment">// varint value</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>				s.value = 0
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>				shift := uint(0)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>				for len(p) &gt; 0 &amp;&amp; p[0]&amp;0x80 != 0 {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>					s.value |= uint64(p[0]&amp;0x7F) &lt;&lt; shift
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>					shift += 7
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>					p = p[1:]
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				if len(p) == 0 {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>					return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>				s.value |= uint64(p[0]) &lt;&lt; shift
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>				p = p[1:]
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			if goType {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				if len(p) &lt; ptrsz {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>					return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>				}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>				<span class="comment">// fixed-width go type</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>				if ptrsz == 8 {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>					s.gotype = order.Uint64(p[0:8])
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>					p = p[8:]
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>				} else {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>					s.gotype = uint64(order.Uint32(p[0:4]))
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>					p = p[4:]
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>				}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		} else {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			<span class="comment">// Value, symbol type.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			s.value = uint64(order.Uint32(p[0:4]))
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			if len(p) &lt; 5 {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>				return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			typ = p[4]
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			if typ&amp;0x80 == 0 {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>				return &amp;DecodingError{len(data) - len(p) + 4, &#34;bad symbol type&#34;, typ}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			typ &amp;^= 0x80
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			s.typ = typ
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			p = p[5:]
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		<span class="comment">// Name.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		var i int
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		var nnul int
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		for i = 0; i &lt; len(p); i++ {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			if p[i] == 0 {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>				nnul = 1
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>				break
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		switch typ {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		case &#39;z&#39;, &#39;Z&#39;:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			p = p[i+nnul:]
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			for i = 0; i+2 &lt;= len(p); i += 2 {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>				if p[i] == 0 &amp;&amp; p[i+1] == 0 {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>					nnul = 2
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>					break
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>				}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if len(p) &lt; i+nnul {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		s.name = p[0:i]
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		i += nnul
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		p = p[i:]
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		if !newTable {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			if len(p) &lt; 4 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>				return &amp;DecodingError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			<span class="comment">// Go type.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			s.gotype = uint64(order.Uint32(p[:4]))
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			p = p[4:]
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		fn(s)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	return nil
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// NewTable decodes the Go symbol table (the &#34;.gosymtab&#34; section in ELF),</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// returning an in-memory representation.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// Starting with Go 1.3, the Go symbol table no longer includes symbol data.</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>func NewTable(symtab []byte, pcln *LineTable) (*Table, error) {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	var n int
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	err := walksymtab(symtab, func(s sym) error {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		n++
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		return nil
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	})
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if err != nil {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		return nil, err
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	var t Table
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	if pcln.isGo12() {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		t.go12line = pcln
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	fname := make(map[uint16]string)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	t.Syms = make([]Sym, 0, n)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	nf := 0
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	nz := 0
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	lasttyp := uint8(0)
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	err = walksymtab(symtab, func(s sym) error {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		n := len(t.Syms)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		t.Syms = t.Syms[0 : n+1]
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		ts := &amp;t.Syms[n]
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		ts.Type = s.typ
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		ts.Value = s.value
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		ts.GoType = s.gotype
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		ts.goVersion = pcln.version
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		switch s.typ {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		default:
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			<span class="comment">// rewrite name to use . instead of · (c2 b7)</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			w := 0
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			b := s.name
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			for i := 0; i &lt; len(b); i++ {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				if b[i] == 0xc2 &amp;&amp; i+1 &lt; len(b) &amp;&amp; b[i+1] == 0xb7 {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>					i++
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>					b[i] = &#39;.&#39;
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>				}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				b[w] = b[i]
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				w++
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			ts.Name = string(s.name[0:w])
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		case &#39;z&#39;, &#39;Z&#39;:
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			if lasttyp != &#39;z&#39; &amp;&amp; lasttyp != &#39;Z&#39; {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				nz++
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			for i := 0; i &lt; len(s.name); i += 2 {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				eltIdx := binary.BigEndian.Uint16(s.name[i : i+2])
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				elt, ok := fname[eltIdx]
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				if !ok {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>					return &amp;DecodingError{-1, &#34;bad filename code&#34;, eltIdx}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>				}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>				if n := len(ts.Name); n &gt; 0 &amp;&amp; ts.Name[n-1] != &#39;/&#39; {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>					ts.Name += &#34;/&#34;
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				ts.Name += elt
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		switch s.typ {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		case &#39;T&#39;, &#39;t&#39;, &#39;L&#39;, &#39;l&#39;:
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			nf++
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		case &#39;f&#39;:
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			fname[uint16(s.value)] = ts.Name
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		lasttyp = s.typ
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		return nil
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	})
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	if err != nil {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		return nil, err
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	t.Funcs = make([]Func, 0, nf)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	t.Files = make(map[string]*Obj)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	var obj *Obj
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	if t.go12line != nil {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		<span class="comment">// Put all functions into one Obj.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		t.Objs = make([]Obj, 1)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		obj = &amp;t.Objs[0]
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		t.go12line.go12MapFiles(t.Files, obj)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	} else {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		t.Objs = make([]Obj, 0, nz)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// Count text symbols and attach frame sizes, parameters, and</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// locals to them. Also, find object file boundaries.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	lastf := 0
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	for i := 0; i &lt; len(t.Syms); i++ {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		sym := &amp;t.Syms[i]
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		switch sym.Type {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		case &#39;Z&#39;, &#39;z&#39;: <span class="comment">// path symbol</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			if t.go12line != nil {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				<span class="comment">// Go 1.2 binaries have the file information elsewhere. Ignore.</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>				break
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			<span class="comment">// Finish the current object</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			if obj != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				obj.Funcs = t.Funcs[lastf:]
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			lastf = len(t.Funcs)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			<span class="comment">// Start new object</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			n := len(t.Objs)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			t.Objs = t.Objs[0 : n+1]
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			obj = &amp;t.Objs[n]
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			<span class="comment">// Count &amp; copy path symbols</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			var end int
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			for end = i + 1; end &lt; len(t.Syms); end++ {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				if c := t.Syms[end].Type; c != &#39;Z&#39; &amp;&amp; c != &#39;z&#39; {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>					break
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			obj.Paths = t.Syms[i:end]
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			i = end - 1 <span class="comment">// loop will i++</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			<span class="comment">// Record file names</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			depth := 0
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			for j := range obj.Paths {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				s := &amp;obj.Paths[j]
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				if s.Name == &#34;&#34; {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>					depth--
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				} else {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>					if depth == 0 {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>						t.Files[s.Name] = obj
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>					}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>					depth++
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		case &#39;T&#39;, &#39;t&#39;, &#39;L&#39;, &#39;l&#39;: <span class="comment">// text symbol</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			if n := len(t.Funcs); n &gt; 0 {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>				t.Funcs[n-1].End = sym.Value
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			if sym.Name == &#34;runtime.etext&#34; || sym.Name == &#34;etext&#34; {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>				continue
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			<span class="comment">// Count parameter and local (auto) syms</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			var np, na int
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			var end int
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		countloop:
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			for end = i + 1; end &lt; len(t.Syms); end++ {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>				switch t.Syms[end].Type {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>				case &#39;T&#39;, &#39;t&#39;, &#39;L&#39;, &#39;l&#39;, &#39;Z&#39;, &#39;z&#39;:
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>					break countloop
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>				case &#39;p&#39;:
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>					np++
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>				case &#39;a&#39;:
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>					na++
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			<span class="comment">// Fill in the function symbol</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			n := len(t.Funcs)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			t.Funcs = t.Funcs[0 : n+1]
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			fn := &amp;t.Funcs[n]
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			sym.Func = fn
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			fn.Params = make([]*Sym, 0, np)
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			fn.Locals = make([]*Sym, 0, na)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			fn.Sym = sym
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			fn.Entry = sym.Value
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			fn.Obj = obj
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			if t.go12line != nil {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>				<span class="comment">// All functions share the same line table.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>				<span class="comment">// It knows how to narrow down to a specific</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>				<span class="comment">// function quickly.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>				fn.LineTable = t.go12line
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			} else if pcln != nil {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>				fn.LineTable = pcln.slice(fn.Entry)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>				pcln = fn.LineTable
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			for j := i; j &lt; end; j++ {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>				s := &amp;t.Syms[j]
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>				switch s.Type {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>				case &#39;m&#39;:
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>					fn.FrameSize = int(s.Value)
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>				case &#39;p&#39;:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>					n := len(fn.Params)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>					fn.Params = fn.Params[0 : n+1]
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>					fn.Params[n] = s
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>				case &#39;a&#39;:
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>					n := len(fn.Locals)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>					fn.Locals = fn.Locals[0 : n+1]
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>					fn.Locals[n] = s
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			i = end - 1 <span class="comment">// loop will i++</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	if t.go12line != nil &amp;&amp; nf == 0 {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		t.Funcs = t.go12line.go12Funcs()
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if obj != nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		obj.Funcs = t.Funcs[lastf:]
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	return &amp;t, nil
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">// PCToFunc returns the function containing the program counter pc,</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// or nil if there is no such function.</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>func (t *Table) PCToFunc(pc uint64) *Func {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	funcs := t.Funcs
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	for len(funcs) &gt; 0 {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		m := len(funcs) / 2
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		fn := &amp;funcs[m]
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		switch {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		case pc &lt; fn.Entry:
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			funcs = funcs[0:m]
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		case fn.Entry &lt;= pc &amp;&amp; pc &lt; fn.End:
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			return fn
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		default:
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			funcs = funcs[m+1:]
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	return nil
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// PCToLine looks up line number information for a program counter.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span><span class="comment">// If there is no information, it returns fn == nil.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func) {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if fn = t.PCToFunc(pc); fn == nil {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		return
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	if t.go12line != nil {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		file = t.go12line.go12PCToFile(pc)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		line = t.go12line.go12PCToLine(pc)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	} else {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		file, line = fn.Obj.lineFromAline(fn.LineTable.PCToLine(pc))
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// LineToPC looks up the first program counter on the given line in</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">// the named file. It returns [UnknownFileError] or [UnknownLineError] if</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// there is an error looking up this line.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error) {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	obj, ok := t.Files[file]
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	if !ok {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		return 0, nil, UnknownFileError(file)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	if t.go12line != nil {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		pc := t.go12line.go12LineToPC(file, line)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		if pc == 0 {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			return 0, nil, &amp;UnknownLineError{file, line}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		return pc, t.PCToFunc(pc), nil
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	abs, err := obj.alineFromLine(file, line)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	if err != nil {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		return
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	for i := range obj.Funcs {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		f := &amp;obj.Funcs[i]
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		pc := f.LineTable.LineToPC(abs, f.End)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		if pc != 0 {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			return pc, f, nil
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	return 0, nil, &amp;UnknownLineError{file, line}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// LookupSym returns the text, data, or bss symbol with the given name,</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">// or nil if no such symbol is found.</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>func (t *Table) LookupSym(name string) *Sym {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// TODO(austin) Maybe make a map</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	for i := range t.Syms {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		s := &amp;t.Syms[i]
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		switch s.Type {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		case &#39;T&#39;, &#39;t&#39;, &#39;L&#39;, &#39;l&#39;, &#39;D&#39;, &#39;d&#39;, &#39;B&#39;, &#39;b&#39;:
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			if s.Name == name {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>				return s
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	return nil
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// LookupFunc returns the text, data, or bss symbol with the given name,</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// or nil if no such symbol is found.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>func (t *Table) LookupFunc(name string) *Func {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	for i := range t.Funcs {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		f := &amp;t.Funcs[i]
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		if f.Sym.Name == name {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			return f
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	return nil
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span><span class="comment">// SymByAddr returns the text, data, or bss symbol starting at the given address.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span><span class="selection">func (t *Table) SymByAddr(addr uint64) *Sym</span> {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	for i := range t.Syms {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		s := &amp;t.Syms[i]
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		switch s.Type {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		case &#39;T&#39;, &#39;t&#39;, &#39;L&#39;, &#39;l&#39;, &#39;D&#39;, &#39;d&#39;, &#39;B&#39;, &#39;b&#39;:
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			if s.Value == addr {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>				return s
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	return nil
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">/*
<span id="L643" class="ln">   643&nbsp;&nbsp;</span> * Object files
<span id="L644" class="ln">   644&nbsp;&nbsp;</span> */</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span><span class="comment">// This is legacy code for Go 1.1 and earlier, which used the</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span><span class="comment">// Plan 9 format for pc-line tables. This code was never quite</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span><span class="comment">// correct. It&#39;s probably very close, and it&#39;s usually correct, but</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span><span class="comment">// we never quite found all the corner cases.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// Go 1.2 and later use a simpler format, documented at golang.org/s/go12symtab.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>func (o *Obj) lineFromAline(aline int) (string, int) {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	type stackEnt struct {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		path   string
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		start  int
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		offset int
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		prev   *stackEnt
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	noPath := &amp;stackEnt{&#34;&#34;, 0, 0, nil}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	tos := noPath
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>pathloop:
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	for _, s := range o.Paths {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		val := int(s.Value)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		switch {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		case val &gt; aline:
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			break pathloop
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		case val == 1:
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			<span class="comment">// Start a new stack</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			tos = &amp;stackEnt{s.Name, val, 0, noPath}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		case s.Name == &#34;&#34;:
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			<span class="comment">// Pop</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			if tos == noPath {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>				return &#34;&lt;malformed symbol table&gt;&#34;, 0
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			tos.prev.offset += val - tos.start
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			tos = tos.prev
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		default:
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			<span class="comment">// Push</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			tos = &amp;stackEnt{s.Name, val, 0, tos}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	if tos == noPath {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		return &#34;&#34;, 0
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	return tos.path, aline - tos.start - tos.offset + 1
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>func (o *Obj) alineFromLine(path string, line int) (int, error) {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	if line &lt; 1 {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		return 0, &amp;UnknownLineError{path, line}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	for i, s := range o.Paths {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		<span class="comment">// Find this path</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		if s.Name != path {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			continue
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		<span class="comment">// Find this line at this stack level</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		depth := 0
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		var incstart int
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		line += int(s.Value)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	pathloop:
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		for _, s := range o.Paths[i:] {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>			val := int(s.Value)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			switch {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			case depth == 1 &amp;&amp; val &gt;= line:
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>				return line - 1, nil
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			case s.Name == &#34;&#34;:
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>				depth--
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>				if depth == 0 {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>					break pathloop
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>				} else if depth == 1 {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>					line += val - incstart
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>				}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			default:
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				if depth == 1 {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>					incstart = val
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>				}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>				depth++
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		return 0, &amp;UnknownLineError{path, line}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	return 0, UnknownFileError(path)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">/*
<span id="L738" class="ln">   738&nbsp;&nbsp;</span> * Errors
<span id="L739" class="ln">   739&nbsp;&nbsp;</span> */</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">// UnknownFileError represents a failure to find the specific file in</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// the symbol table.</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>type UnknownFileError string
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>func (e UnknownFileError) Error() string { return &#34;unknown file: &#34; + string(e) }
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// UnknownLineError represents a failure to map a line to a program</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">// counter, either because the line is beyond the bounds of the file</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// or because there is no code on the given line.</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>type UnknownLineError struct {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	File string
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	Line int
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>func (e *UnknownLineError) Error() string {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	return &#34;no code at &#34; + e.File + &#34;:&#34; + strconv.Itoa(e.Line)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// DecodingError represents an error during the decoding of</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">// the symbol table.</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>type DecodingError struct {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	off int
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	msg string
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	val any
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func (e *DecodingError) Error() string {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	msg := e.msg
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	if e.val != nil {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		msg += fmt.Sprintf(&#34; &#39;%v&#39;&#34;, e.val)
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	msg += fmt.Sprintf(&#34; at byte %#x&#34;, e.off)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	return msg
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>
</pre><p><a href="symtab.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
