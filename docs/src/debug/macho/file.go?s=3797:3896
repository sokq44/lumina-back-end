<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/debug/macho/file.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./file.go?s=3797:3896#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/debug">debug</a>/<a href="http://localhost:8080/src/debug/macho">macho</a>/<span class="text-muted">file.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/debug/macho">debug/macho</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package macho implements access to Mach-O object files.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span># Security
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>This package is not designed to be hardened against adversarial inputs, and is
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>outside the scope of https://go.dev/security/policy. In particular, only basic
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>validation is done when parsing object files. As such, care should be taken when
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>parsing untrusted inputs, as parsing malformed files may consume significant
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>resources, or cause panics.
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>*/</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>package macho
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// High level access to low level data structures.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>import (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;compress/zlib&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;debug/dwarf&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;internal/saferio&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// A File represents an open Mach-O file.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>type File struct {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	FileHeader
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	ByteOrder binary.ByteOrder
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	Loads     []Load
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	Sections  []*Section
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Symtab   *Symtab
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Dysymtab *Dysymtab
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	closer io.Closer
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// A Load represents any Mach-O load command.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type Load interface {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Raw() []byte
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// A LoadBytes is the uninterpreted bytes of a Mach-O load command.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>type LoadBytes []byte
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (b LoadBytes) Raw() []byte { return b }
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// A SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>type SegmentHeader struct {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	Cmd     LoadCmd
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	Len     uint32
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	Name    string
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Addr    uint64
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	Memsz   uint64
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	Offset  uint64
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	Filesz  uint64
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	Maxprot uint32
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	Prot    uint32
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	Nsect   uint32
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	Flag    uint32
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// A Segment represents a Mach-O 32-bit or 64-bit load segment command.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type Segment struct {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	LoadBytes
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	SegmentHeader
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// Do not embed SectionReader directly</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// to avoid having Read and Seek.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// If a client wants Read and Seek it must use</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// Open() to avoid fighting over the seek offset</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// with other clients.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	io.ReaderAt
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	sr *io.SectionReader
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// Data reads and returns the contents of the segment.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (s *Segment) Data() ([]byte, error) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	return saferio.ReadDataAt(s.sr, s.Filesz, 0)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Open returns a new ReadSeeker reading the segment.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (s *Segment) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>type SectionHeader struct {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	Name   string
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	Seg    string
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	Addr   uint64
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	Size   uint64
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	Offset uint32
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	Align  uint32
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	Reloff uint32
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	Nreloc uint32
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	Flags  uint32
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// A Reloc represents a Mach-O relocation.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>type Reloc struct {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	Addr  uint32
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	Value uint32
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// when Scattered == false &amp;&amp; Extern == true, Value is the symbol number.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// when Scattered == false &amp;&amp; Extern == false, Value is the section number.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// when Scattered == true, Value is the value that this reloc refers to.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	Type      uint8
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	Len       uint8 <span class="comment">// 0=byte, 1=word, 2=long, 3=quad</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	Pcrel     bool
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	Extern    bool <span class="comment">// valid if Scattered == false</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	Scattered bool
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>type Section struct {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	SectionHeader
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	Relocs []Reloc
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// Do not embed SectionReader directly</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// to avoid having Read and Seek.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// If a client wants Read and Seek it must use</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Open() to avoid fighting over the seek offset</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// with other clients.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	io.ReaderAt
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	sr *io.SectionReader
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// Data reads and returns the contents of the Mach-O section.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (s *Section) Data() ([]byte, error) {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	return saferio.ReadDataAt(s.sr, s.Size, 0)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Open returns a new ReadSeeker reading the Mach-O section.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (s *Section) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// A Dylib represents a Mach-O load dynamic library command.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>type Dylib struct {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	LoadBytes
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	Name           string
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	Time           uint32
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	CurrentVersion uint32
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	CompatVersion  uint32
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// A Symtab represents a Mach-O symbol table command.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>type Symtab struct {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	LoadBytes
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	SymtabCmd
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	Syms []Symbol
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// A Dysymtab represents a Mach-O dynamic symbol table command.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="selection">type Dysymtab struct {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	LoadBytes
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	DysymtabCmd
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	IndirectSyms []uint32 </span><span class="selection-comment">// indices into Symtab.Syms</span><span class="selection">
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// A Rpath represents a Mach-O rpath command.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>type Rpath struct {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	LoadBytes
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	Path string
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// A Symbol is a Mach-O 32-bit or 64-bit symbol table entry.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>type Symbol struct {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	Name  string
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	Type  uint8
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	Sect  uint8
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	Desc  uint16
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	Value uint64
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">/*
<span id="L180" class="ln">   180&nbsp;&nbsp;</span> * Mach-O reader
<span id="L181" class="ln">   181&nbsp;&nbsp;</span> */</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// FormatError is returned by some operations if the data does</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// not have the correct format for an object file.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>type FormatError struct {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	off int64
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	msg string
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	val any
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (e *FormatError) Error() string {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	msg := e.msg
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if e.val != nil {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		msg += fmt.Sprintf(&#34; &#39;%v&#39;&#34;, e.val)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	msg += fmt.Sprintf(&#34; in record at byte %#x&#34;, e.off)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return msg
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// Open opens the named file using [os.Open] and prepares it for use as a Mach-O binary.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func Open(name string) (*File, error) {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	f, err := os.Open(name)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if err != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return nil, err
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	ff, err := NewFile(f)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	if err != nil {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		f.Close()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return nil, err
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	ff.closer = f
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	return ff, nil
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// Close closes the [File].</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// If the [File] was created using [NewFile] directly instead of [Open],</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// Close has no effect.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (f *File) Close() error {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	var err error
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	if f.closer != nil {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		err = f.closer.Close()
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		f.closer = nil
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return err
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// NewFile creates a new [File] for accessing a Mach-O binary in an underlying reader.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// The Mach-O binary is expected to start at position 0 in the ReaderAt.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func NewFile(r io.ReaderAt) (*File, error) {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	f := new(File)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	sr := io.NewSectionReader(r, 0, 1&lt;&lt;63-1)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// Read and decode Mach magic to determine byte order, size.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// Magic32 and Magic64 differ only in the bottom bit.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	var ident [4]byte
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if _, err := r.ReadAt(ident[0:], 0); err != nil {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return nil, err
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	be := binary.BigEndian.Uint32(ident[0:])
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	le := binary.LittleEndian.Uint32(ident[0:])
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	switch Magic32 &amp;^ 1 {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	case be &amp;^ 1:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		f.ByteOrder = binary.BigEndian
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		f.Magic = be
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	case le &amp;^ 1:
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		f.ByteOrder = binary.LittleEndian
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		f.Magic = le
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	default:
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return nil, &amp;FormatError{0, &#34;invalid magic number&#34;, nil}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Read entire file header.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	if err := binary.Read(sr, f.ByteOrder, &amp;f.FileHeader); err != nil {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		return nil, err
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Then load commands.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	offset := int64(fileHeaderSize32)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if f.Magic == Magic64 {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		offset = fileHeaderSize64
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	dat, err := saferio.ReadDataAt(r, uint64(f.Cmdsz), offset)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if err != nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		return nil, err
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	c := saferio.SliceCap[Load](uint64(f.Ncmd))
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	if c &lt; 0 {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		return nil, &amp;FormatError{offset, &#34;too many load commands&#34;, nil}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	f.Loads = make([]Load, 0, c)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	bo := f.ByteOrder
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	for i := uint32(0); i &lt; f.Ncmd; i++ {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		<span class="comment">// Each load command begins with uint32 command and length.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		if len(dat) &lt; 8 {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			return nil, &amp;FormatError{offset, &#34;command block too small&#34;, nil}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		cmd, siz := LoadCmd(bo.Uint32(dat[0:4])), bo.Uint32(dat[4:8])
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		if siz &lt; 8 || siz &gt; uint32(len(dat)) {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			return nil, &amp;FormatError{offset, &#34;invalid command block size&#34;, nil}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		var cmddat []byte
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		cmddat, dat = dat[0:siz], dat[siz:]
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		offset += int64(siz)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		var s *Segment
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		switch cmd {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		default:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, LoadBytes(cmddat))
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		case LoadCmdRpath:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			var hdr RpathCmd
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;hdr); err != nil {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>				return nil, err
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			l := new(Rpath)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			if hdr.Path &gt;= uint32(len(cmddat)) {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, &#34;invalid path in rpath command&#34;, hdr.Path}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			l.Path = cstring(cmddat[hdr.Path:])
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			l.LoadBytes = LoadBytes(cmddat)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, l)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		case LoadCmdDylib:
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			var hdr DylibCmd
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;hdr); err != nil {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>				return nil, err
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			l := new(Dylib)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			if hdr.Name &gt;= uint32(len(cmddat)) {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, &#34;invalid name in dynamic library command&#34;, hdr.Name}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			l.Name = cstring(cmddat[hdr.Name:])
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			l.Time = hdr.Time
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			l.CurrentVersion = hdr.CurrentVersion
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			l.CompatVersion = hdr.CompatVersion
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			l.LoadBytes = LoadBytes(cmddat)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, l)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		case LoadCmdSymtab:
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			var hdr SymtabCmd
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;hdr); err != nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>				return nil, err
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			strtab, err := saferio.ReadDataAt(r, uint64(hdr.Strsize), int64(hdr.Stroff))
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			if err != nil {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>				return nil, err
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			var symsz int
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			if f.Magic == Magic64 {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>				symsz = 16
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			} else {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				symsz = 12
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			symdat, err := saferio.ReadDataAt(r, uint64(hdr.Nsyms)*uint64(symsz), int64(hdr.Symoff))
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			if err != nil {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>				return nil, err
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			st, err := f.parseSymtab(symdat, strtab, cmddat, &amp;hdr, offset)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			if err != nil {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>				return nil, err
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, st)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			f.Symtab = st
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		case LoadCmdDysymtab:
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			var hdr DysymtabCmd
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;hdr); err != nil {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>				return nil, err
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			if f.Symtab == nil {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, &#34;dynamic symbol table seen before any ordinary symbol table&#34;, nil}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			} else if hdr.Iundefsym &gt; uint32(len(f.Symtab.Syms)) {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, fmt.Sprintf(
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>					&#34;undefined symbols index in dynamic symbol table command is greater than symbol table length (%d &gt; %d)&#34;,
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>					hdr.Iundefsym, len(f.Symtab.Syms)), nil}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			} else if hdr.Iundefsym+hdr.Nundefsym &gt; uint32(len(f.Symtab.Syms)) {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, fmt.Sprintf(
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>					&#34;number of undefined symbols after index in dynamic symbol table command is greater than symbol table length (%d &gt; %d)&#34;,
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>					hdr.Iundefsym+hdr.Nundefsym, len(f.Symtab.Syms)), nil}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			dat, err := saferio.ReadDataAt(r, uint64(hdr.Nindirectsyms)*4, int64(hdr.Indirectsymoff))
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			if err != nil {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>				return nil, err
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			x := make([]uint32, hdr.Nindirectsyms)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			if err := binary.Read(bytes.NewReader(dat), bo, x); err != nil {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				return nil, err
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			st := new(Dysymtab)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			st.LoadBytes = LoadBytes(cmddat)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			st.DysymtabCmd = hdr
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			st.IndirectSyms = x
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, st)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			f.Dysymtab = st
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		case LoadCmdSegment:
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			var seg32 Segment32
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;seg32); err != nil {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				return nil, err
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			s = new(Segment)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			s.LoadBytes = cmddat
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			s.Cmd = cmd
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			s.Len = siz
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			s.Name = cstring(seg32.Name[0:])
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			s.Addr = uint64(seg32.Addr)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			s.Memsz = uint64(seg32.Memsz)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			s.Offset = uint64(seg32.Offset)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			s.Filesz = uint64(seg32.Filesz)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			s.Maxprot = seg32.Maxprot
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			s.Prot = seg32.Prot
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			s.Nsect = seg32.Nsect
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			s.Flag = seg32.Flag
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, s)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			for i := 0; i &lt; int(s.Nsect); i++ {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>				var sh32 Section32
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				if err := binary.Read(b, bo, &amp;sh32); err != nil {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>					return nil, err
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				sh := new(Section)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				sh.Name = cstring(sh32.Name[0:])
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				sh.Seg = cstring(sh32.Seg[0:])
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				sh.Addr = uint64(sh32.Addr)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				sh.Size = uint64(sh32.Size)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				sh.Offset = sh32.Offset
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				sh.Align = sh32.Align
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				sh.Reloff = sh32.Reloff
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				sh.Nreloc = sh32.Nreloc
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				sh.Flags = sh32.Flags
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				if err := f.pushSection(sh, r); err != nil {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>					return nil, err
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		case LoadCmdSegment64:
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			var seg64 Segment64
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			b := bytes.NewReader(cmddat)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;seg64); err != nil {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				return nil, err
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			s = new(Segment)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			s.LoadBytes = cmddat
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			s.Cmd = cmd
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			s.Len = siz
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			s.Name = cstring(seg64.Name[0:])
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			s.Addr = seg64.Addr
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			s.Memsz = seg64.Memsz
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			s.Offset = seg64.Offset
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			s.Filesz = seg64.Filesz
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			s.Maxprot = seg64.Maxprot
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			s.Prot = seg64.Prot
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			s.Nsect = seg64.Nsect
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			s.Flag = seg64.Flag
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			f.Loads = append(f.Loads, s)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			for i := 0; i &lt; int(s.Nsect); i++ {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>				var sh64 Section64
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>				if err := binary.Read(b, bo, &amp;sh64); err != nil {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					return nil, err
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				sh := new(Section)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				sh.Name = cstring(sh64.Name[0:])
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				sh.Seg = cstring(sh64.Seg[0:])
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>				sh.Addr = sh64.Addr
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>				sh.Size = sh64.Size
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				sh.Offset = sh64.Offset
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>				sh.Align = sh64.Align
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>				sh.Reloff = sh64.Reloff
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>				sh.Nreloc = sh64.Nreloc
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				sh.Flags = sh64.Flags
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				if err := f.pushSection(sh, r); err != nil {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>					return nil, err
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		if s != nil {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			if int64(s.Offset) &lt; 0 {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, &#34;invalid section offset&#34;, s.Offset}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			if int64(s.Filesz) &lt; 0 {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>				return nil, &amp;FormatError{offset, &#34;invalid section file size&#34;, s.Filesz}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			s.sr = io.NewSectionReader(r, int64(s.Offset), int64(s.Filesz))
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			s.ReaderAt = s.sr
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	return f, nil
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>func (f *File) parseSymtab(symdat, strtab, cmddat []byte, hdr *SymtabCmd, offset int64) (*Symtab, error) {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	bo := f.ByteOrder
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	c := saferio.SliceCap[Symbol](uint64(hdr.Nsyms))
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	if c &lt; 0 {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		return nil, &amp;FormatError{offset, &#34;too many symbols&#34;, nil}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	symtab := make([]Symbol, 0, c)
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	b := bytes.NewReader(symdat)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	for i := 0; i &lt; int(hdr.Nsyms); i++ {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		var n Nlist64
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		if f.Magic == Magic64 {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;n); err != nil {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				return nil, err
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		} else {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			var n32 Nlist32
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;n32); err != nil {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>				return nil, err
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			n.Name = n32.Name
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			n.Type = n32.Type
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			n.Sect = n32.Sect
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			n.Desc = n32.Desc
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			n.Value = uint64(n32.Value)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		if n.Name &gt;= uint32(len(strtab)) {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			return nil, &amp;FormatError{offset, &#34;invalid name in symbol table&#34;, n.Name}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		<span class="comment">// We add &#34;_&#34; to Go symbols. Strip it here. See issue 33808.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		name := cstring(strtab[n.Name:])
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		if strings.Contains(name, &#34;.&#34;) &amp;&amp; name[0] == &#39;_&#39; {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			name = name[1:]
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		symtab = append(symtab, Symbol{
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			Name:  name,
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			Type:  n.Type,
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>			Sect:  n.Sect,
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			Desc:  n.Desc,
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			Value: n.Value,
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		})
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	st := new(Symtab)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	st.LoadBytes = LoadBytes(cmddat)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	st.Syms = symtab
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	return st, nil
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>type relocInfo struct {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	Addr   uint32
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	Symnum uint32
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>func (f *File) pushSection(sh *Section, r io.ReaderAt) error {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	f.Sections = append(f.Sections, sh)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	sh.sr = io.NewSectionReader(r, int64(sh.Offset), int64(sh.Size))
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	sh.ReaderAt = sh.sr
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if sh.Nreloc &gt; 0 {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		reldat, err := saferio.ReadDataAt(r, uint64(sh.Nreloc)*8, int64(sh.Reloff))
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		if err != nil {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			return err
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		b := bytes.NewReader(reldat)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		bo := f.ByteOrder
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		sh.Relocs = make([]Reloc, sh.Nreloc)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		for i := range sh.Relocs {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			rel := &amp;sh.Relocs[i]
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			var ri relocInfo
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			if err := binary.Read(b, bo, &amp;ri); err != nil {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>				return err
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			if ri.Addr&amp;(1&lt;&lt;31) != 0 { <span class="comment">// scattered</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>				rel.Addr = ri.Addr &amp; (1&lt;&lt;24 - 1)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>				rel.Type = uint8((ri.Addr &gt;&gt; 24) &amp; (1&lt;&lt;4 - 1))
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>				rel.Len = uint8((ri.Addr &gt;&gt; 28) &amp; (1&lt;&lt;2 - 1))
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>				rel.Pcrel = ri.Addr&amp;(1&lt;&lt;30) != 0
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>				rel.Value = ri.Symnum
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>				rel.Scattered = true
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			} else {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>				switch bo {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>				case binary.LittleEndian:
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>					rel.Addr = ri.Addr
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>					rel.Value = ri.Symnum &amp; (1&lt;&lt;24 - 1)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>					rel.Pcrel = ri.Symnum&amp;(1&lt;&lt;24) != 0
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>					rel.Len = uint8((ri.Symnum &gt;&gt; 25) &amp; (1&lt;&lt;2 - 1))
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>					rel.Extern = ri.Symnum&amp;(1&lt;&lt;27) != 0
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>					rel.Type = uint8((ri.Symnum &gt;&gt; 28) &amp; (1&lt;&lt;4 - 1))
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>				case binary.BigEndian:
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>					rel.Addr = ri.Addr
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>					rel.Value = ri.Symnum &gt;&gt; 8
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>					rel.Pcrel = ri.Symnum&amp;(1&lt;&lt;7) != 0
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>					rel.Len = uint8((ri.Symnum &gt;&gt; 5) &amp; (1&lt;&lt;2 - 1))
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>					rel.Extern = ri.Symnum&amp;(1&lt;&lt;4) != 0
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>					rel.Type = uint8(ri.Symnum &amp; (1&lt;&lt;4 - 1))
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>				default:
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>					panic(&#34;unreachable&#34;)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>				}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	return nil
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>func cstring(b []byte) string {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	i := bytes.IndexByte(b, 0)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	if i == -1 {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		i = len(b)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	return string(b[0:i])
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// Segment returns the first Segment with the given name, or nil if no such segment exists.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>func (f *File) Segment(name string) *Segment {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	for _, l := range f.Loads {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		if s, ok := l.(*Segment); ok &amp;&amp; s.Name == name {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			return s
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	return nil
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// Section returns the first section with the given name, or nil if no such</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// section exists.</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>func (f *File) Section(name string) *Section {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	for _, s := range f.Sections {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		if s.Name == name {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			return s
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	return nil
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">// DWARF returns the DWARF debug information for the Mach-O file.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>func (f *File) DWARF() (*dwarf.Data, error) {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	dwarfSuffix := func(s *Section) string {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		switch {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		case strings.HasPrefix(s.Name, &#34;__debug_&#34;):
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			return s.Name[8:]
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		case strings.HasPrefix(s.Name, &#34;__zdebug_&#34;):
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			return s.Name[9:]
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		default:
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			return &#34;&#34;
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	sectionData := func(s *Section) ([]byte, error) {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		b, err := s.Data()
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		if err != nil &amp;&amp; uint64(len(b)) &lt; s.Size {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			return nil, err
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		if len(b) &gt;= 12 &amp;&amp; string(b[:4]) == &#34;ZLIB&#34; {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			dlen := binary.BigEndian.Uint64(b[4:12])
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			dbuf := make([]byte, dlen)
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			r, err := zlib.NewReader(bytes.NewBuffer(b[12:]))
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			if err != nil {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>				return nil, err
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			if _, err := io.ReadFull(r, dbuf); err != nil {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>				return nil, err
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			if err := r.Close(); err != nil {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>				return nil, err
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			b = dbuf
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		return b, nil
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	<span class="comment">// There are many other DWARF sections, but these</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	<span class="comment">// are the ones the debug/dwarf package uses.</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t bother loading others.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	var dat = map[string][]byte{&#34;abbrev&#34;: nil, &#34;info&#34;: nil, &#34;str&#34;: nil, &#34;line&#34;: nil, &#34;ranges&#34;: nil}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	for _, s := range f.Sections {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		suffix := dwarfSuffix(s)
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		if suffix == &#34;&#34; {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			continue
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		if _, ok := dat[suffix]; !ok {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			continue
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		b, err := sectionData(s)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		if err != nil {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			return nil, err
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		dat[suffix] = b
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	d, err := dwarf.New(dat[&#34;abbrev&#34;], nil, nil, dat[&#34;info&#34;], dat[&#34;line&#34;], nil, dat[&#34;ranges&#34;], dat[&#34;str&#34;])
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	if err != nil {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		return nil, err
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	<span class="comment">// Look for DWARF4 .debug_types sections and DWARF5 sections.</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	for i, s := range f.Sections {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		suffix := dwarfSuffix(s)
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		if suffix == &#34;&#34; {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			continue
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		if _, ok := dat[suffix]; ok {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			<span class="comment">// Already handled.</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			continue
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		b, err := sectionData(s)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		if err != nil {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			return nil, err
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		if suffix == &#34;types&#34; {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			err = d.AddTypes(fmt.Sprintf(&#34;types-%d&#34;, i), b)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		} else {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			err = d.AddSection(&#34;.debug_&#34;+suffix, b)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		if err != nil {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			return nil, err
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	return d, nil
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// ImportedSymbols returns the names of all symbols</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// referred to by the binary f that are expected to be</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// satisfied by other libraries at dynamic load time.</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>func (f *File) ImportedSymbols() ([]string, error) {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	if f.Dysymtab == nil || f.Symtab == nil {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		return nil, &amp;FormatError{0, &#34;missing symbol table&#34;, nil}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	st := f.Symtab
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	dt := f.Dysymtab
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	var all []string
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	for _, s := range st.Syms[dt.Iundefsym : dt.Iundefsym+dt.Nundefsym] {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		all = append(all, s.Name)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	return all, nil
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">// ImportedLibraries returns the paths of all libraries</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">// referred to by the binary f that are expected to be</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span><span class="comment">// linked with the binary at dynamic link time.</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>func (f *File) ImportedLibraries() ([]string, error) {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	var all []string
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	for _, l := range f.Loads {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		if lib, ok := l.(*Dylib); ok {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			all = append(all, lib.Name)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	return all, nil
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>
</pre><p><a href="file.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
