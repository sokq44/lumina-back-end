<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/debug/pe/symbol.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./symbol.go?s=341:528#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/debug">debug</a>/<a href="http://localhost:8080/src/debug/pe">pe</a>/<span class="text-muted">symbol.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/debug/pe">debug/pe</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package pe
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;internal/saferio&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>const COFFSymbolSize = 18
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// COFFSymbol represents single COFF symbol table record.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="selection">type COFFSymbol struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	Name               [8]uint8
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	Value              uint32
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	SectionNumber      int16
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Type               uint16
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	StorageClass       uint8
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	NumberOfAuxSymbols uint8
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// readCOFFSymbols reads in the symbol table for a PE file, returning</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// a slice of COFFSymbol objects. The PE format includes both primary</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// symbols (whose fields are described by COFFSymbol above) and</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// auxiliary symbols; all symbols are 18 bytes in size. The auxiliary</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// symbols for a given primary symbol are placed following it in the</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// array, e.g.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	k+0:  regular sym k</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	k+1:    1st aux symbol for k</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//	k+2:    2nd aux symbol for k</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//	k+3:  regular sym k+3</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//	k+4:    1st aux symbol for k+3</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//	k+5:  regular sym k+5</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	k+6:  regular sym k+6</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// The PE format allows for several possible aux symbol formats. For</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// more info see:</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//	https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#auxiliary-symbol-records</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// At the moment this package only provides APIs for looking at</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// aux symbols of format 5 (associated with section definition symbols).</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func readCOFFSymbols(fh *FileHeader, r io.ReadSeeker) ([]COFFSymbol, error) {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	if fh.PointerToSymbolTable == 0 {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		return nil, nil
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if fh.NumberOfSymbols &lt;= 0 {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		return nil, nil
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	_, err := r.Seek(int64(fh.PointerToSymbolTable), io.SeekStart)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if err != nil {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;fail to seek to symbol table: %v&#34;, err)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	c := saferio.SliceCap[COFFSymbol](uint64(fh.NumberOfSymbols))
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	if c &lt; 0 {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		return nil, errors.New(&#34;too many symbols; file may be corrupt&#34;)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	syms := make([]COFFSymbol, 0, c)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	naux := 0
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	for k := uint32(0); k &lt; fh.NumberOfSymbols; k++ {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		var sym COFFSymbol
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		if naux == 0 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>			<span class="comment">// Read a primary symbol.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>			err = binary.Read(r, binary.LittleEndian, &amp;sym)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			if err != nil {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;fail to read symbol table: %v&#34;, err)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			<span class="comment">// Record how many auxiliary symbols it has.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			naux = int(sym.NumberOfAuxSymbols)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		} else {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			<span class="comment">// Read an aux symbol. At the moment we assume all</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			<span class="comment">// aux symbols are format 5 (obviously this doesn&#39;t always</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			<span class="comment">// hold; more cases will be needed below if more aux formats</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>			<span class="comment">// are supported in the future).</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			naux--
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			aux := (*COFFSymbolAuxFormat5)(unsafe.Pointer(&amp;sym))
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			err = binary.Read(r, binary.LittleEndian, aux)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			if err != nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;fail to read symbol table: %v&#34;, err)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		syms = append(syms, sym)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if naux != 0 {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;fail to read symbol table: %d aux symbols unread&#34;, naux)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	return syms, nil
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// isSymNameOffset checks symbol name if it is encoded as offset into string table.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func isSymNameOffset(name [8]byte) (bool, uint32) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if name[0] == 0 &amp;&amp; name[1] == 0 &amp;&amp; name[2] == 0 &amp;&amp; name[3] == 0 {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		return true, binary.LittleEndian.Uint32(name[4:])
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return false, 0
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// FullName finds real name of symbol sym. Normally name is stored</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// in sym.Name, but if it is longer then 8 characters, it is stored</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// in COFF string table st instead.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func (sym *COFFSymbol) FullName(st StringTable) (string, error) {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if ok, offset := isSymNameOffset(sym.Name); ok {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		return st.String(offset)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	return cstring(sym.Name[:]), nil
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func removeAuxSymbols(allsyms []COFFSymbol, st StringTable) ([]*Symbol, error) {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if len(allsyms) == 0 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		return nil, nil
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	syms := make([]*Symbol, 0)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	aux := uint8(0)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	for _, sym := range allsyms {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		if aux &gt; 0 {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			aux--
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			continue
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		name, err := sym.FullName(st)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if err != nil {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			return nil, err
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		aux = sym.NumberOfAuxSymbols
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		s := &amp;Symbol{
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			Name:          name,
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			Value:         sym.Value,
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			SectionNumber: sym.SectionNumber,
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			Type:          sym.Type,
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			StorageClass:  sym.StorageClass,
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		syms = append(syms, s)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	return syms, nil
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// Symbol is similar to [COFFSymbol] with Name field replaced</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// by Go string. Symbol also does not have NumberOfAuxSymbols.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>type Symbol struct {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	Name          string
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	Value         uint32
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	SectionNumber int16
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	Type          uint16
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	StorageClass  uint8
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// COFFSymbolAuxFormat5 describes the expected form of an aux symbol</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// attached to a section definition symbol. The PE format defines a</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// number of different aux symbol formats: format 1 for function</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// definitions, format 2 for .be and .ef symbols, and so on. Format 5</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// holds extra info associated with a section definition, including</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// number of relocations + line numbers, as well as COMDAT info. See</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#auxiliary-format-5-section-definitions</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// for more on what&#39;s going on here.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>type COFFSymbolAuxFormat5 struct {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	Size           uint32
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	NumRelocs      uint16
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	NumLineNumbers uint16
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	Checksum       uint32
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	SecNum         uint16
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	Selection      uint8
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	_              [3]uint8 <span class="comment">// padding</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// These constants make up the possible values for the &#39;Selection&#39;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// field in an AuxFormat5.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>const (
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_NODUPLICATES = 1
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_ANY          = 2
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_SAME_SIZE    = 3
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_EXACT_MATCH  = 4
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_ASSOCIATIVE  = 5
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	IMAGE_COMDAT_SELECT_LARGEST      = 6
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// COFFSymbolReadSectionDefAux returns a blob of auxiliary information</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// (including COMDAT info) for a section definition symbol. Here &#39;idx&#39;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// is the index of a section symbol in the main [COFFSymbol] array for</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// the File. Return value is a pointer to the appropriate aux symbol</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// struct. For more info, see:</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// auxiliary symbols: https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#auxiliary-symbol-records</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// COMDAT sections: https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#comdat-sections-object-only</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// auxiliary info for section definitions: https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#auxiliary-format-5-section-definitions</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (f *File) COFFSymbolReadSectionDefAux(idx int) (*COFFSymbolAuxFormat5, error) {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	var rv *COFFSymbolAuxFormat5
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if idx &lt; 0 || idx &gt;= len(f.COFFSymbols) {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return rv, fmt.Errorf(&#34;invalid symbol index&#34;)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	pesym := &amp;f.COFFSymbols[idx]
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	const IMAGE_SYM_CLASS_STATIC = 3
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if pesym.StorageClass != uint8(IMAGE_SYM_CLASS_STATIC) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		return rv, fmt.Errorf(&#34;incorrect symbol storage class&#34;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if pesym.NumberOfAuxSymbols == 0 || idx+1 &gt;= len(f.COFFSymbols) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return rv, fmt.Errorf(&#34;aux symbol unavailable&#34;)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// Locate and return a pointer to the successor aux symbol.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	pesymn := &amp;f.COFFSymbols[idx+1]
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	rv = (*COFFSymbolAuxFormat5)(unsafe.Pointer(pesymn))
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	return rv, nil
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
</pre><p><a href="symbol.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
