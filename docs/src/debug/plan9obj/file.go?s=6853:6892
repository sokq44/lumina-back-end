<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/debug/plan9obj/file.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./file.go?s=6853:6892#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/debug">debug</a>/<a href="http://localhost:8080/src/debug/plan9obj">plan9obj</a>/<span class="text-muted">file.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/debug/plan9obj">debug/plan9obj</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2014 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package plan9obj implements access to Plan 9 a.out object files.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span># Security
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>This package is not designed to be hardened against adversarial inputs, and is
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>outside the scope of https://go.dev/security/policy. In particular, only basic
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>validation is done when parsing object files. As such, care should be taken when
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>parsing untrusted inputs, as parsing malformed files may consume significant
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>resources, or cause panics.
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>*/</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>package plan9obj
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>import (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;internal/saferio&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// A FileHeader represents a Plan 9 a.out file header.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>type FileHeader struct {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Magic       uint32
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Bss         uint32
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Entry       uint64
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	PtrSize     int
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	LoadAddress uint64
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	HdrSize     uint64
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// A File represents an open Plan 9 a.out file.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type File struct {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	FileHeader
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Sections []*Section
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	closer   io.Closer
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// A SectionHeader represents a single Plan 9 a.out section header.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// This structure doesn&#39;t exist on-disk, but eases navigation</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// through the object file.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>type SectionHeader struct {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Name   string
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	Size   uint32
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	Offset uint32
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// A Section represents a single section in a Plan 9 a.out file.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type Section struct {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	SectionHeader
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// Do not embed SectionReader directly</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// to avoid having Read and Seek.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// If a client wants Read and Seek it must use</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// Open() to avoid fighting over the seek offset</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// with other clients.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	io.ReaderAt
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	sr *io.SectionReader
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// Data reads and returns the contents of the Plan 9 a.out section.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func (s *Section) Data() ([]byte, error) {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return saferio.ReadDataAt(s.sr, uint64(s.Size), 0)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// Open returns a new ReadSeeker reading the Plan 9 a.out section.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>func (s *Section) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// A Symbol represents an entry in a Plan 9 a.out symbol table section.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>type Sym struct {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	Value uint64
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	Type  rune
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	Name  string
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">/*
<span id="L83" class="ln">    83&nbsp;&nbsp;</span> * Plan 9 a.out reader
<span id="L84" class="ln">    84&nbsp;&nbsp;</span> */</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// formatError is returned by some operations if the data does</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// not have the correct format for an object file.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>type formatError struct {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	off int
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	msg string
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	val any
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func (e *formatError) Error() string {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	msg := e.msg
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	if e.val != nil {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		msg += fmt.Sprintf(&#34; &#39;%v&#39;&#34;, e.val)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	msg += fmt.Sprintf(&#34; in record at byte %#x&#34;, e.off)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	return msg
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Open opens the named file using [os.Open] and prepares it for use as a Plan 9 a.out binary.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func Open(name string) (*File, error) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	f, err := os.Open(name)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if err != nil {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		return nil, err
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	ff, err := NewFile(f)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if err != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		f.Close()
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		return nil, err
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	ff.closer = f
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return ff, nil
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// Close closes the [File].</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// If the [File] was created using [NewFile] directly instead of [Open],</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// Close has no effect.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (f *File) Close() error {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	var err error
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	if f.closer != nil {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		err = f.closer.Close()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		f.closer = nil
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return err
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func parseMagic(magic []byte) (uint32, error) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	m := binary.BigEndian.Uint32(magic)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	switch m {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	case Magic386, MagicAMD64, MagicARM:
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		return m, nil
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return 0, &amp;formatError{0, &#34;bad magic number&#34;, magic}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// NewFile creates a new [File] for accessing a Plan 9 binary in an underlying reader.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// The Plan 9 binary is expected to start at position 0 in the ReaderAt.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func NewFile(r io.ReaderAt) (*File, error) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	sr := io.NewSectionReader(r, 0, 1&lt;&lt;63-1)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Read and decode Plan 9 magic</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	var magic [4]byte
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if _, err := r.ReadAt(magic[:], 0); err != nil {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		return nil, err
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	_, err := parseMagic(magic[:])
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if err != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return nil, err
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	ph := new(prog)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	if err := binary.Read(sr, binary.BigEndian, ph); err != nil {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		return nil, err
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	f := &amp;File{FileHeader: FileHeader{
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		Magic:       ph.Magic,
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		Bss:         ph.Bss,
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		Entry:       uint64(ph.Entry),
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		PtrSize:     4,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		LoadAddress: 0x1000,
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		HdrSize:     4 * 8,
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if ph.Magic&amp;Magic64 != 0 {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		if err := binary.Read(sr, binary.BigEndian, &amp;f.Entry); err != nil {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			return nil, err
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		f.PtrSize = 8
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		f.LoadAddress = 0x200000
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		f.HdrSize += 8
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	var sects = []struct {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		name string
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		size uint32
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}{
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		{&#34;text&#34;, ph.Text},
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		{&#34;data&#34;, ph.Data},
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		{&#34;syms&#34;, ph.Syms},
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		{&#34;spsz&#34;, ph.Spsz},
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		{&#34;pcsz&#34;, ph.Pcsz},
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	f.Sections = make([]*Section, 5)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	off := uint32(f.HdrSize)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	for i, sect := range sects {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		s := new(Section)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		s.SectionHeader = SectionHeader{
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			Name:   sect.name,
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			Size:   sect.size,
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			Offset: off,
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		off += sect.size
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		s.sr = io.NewSectionReader(r, int64(s.Offset), int64(s.Size))
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		s.ReaderAt = s.sr
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		f.Sections[i] = s
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	return f, nil
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func walksymtab(data []byte, ptrsz int, fn func(sym) error) error {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	var order binary.ByteOrder = binary.BigEndian
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	var s sym
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	p := data
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	for len(p) &gt;= 4 {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		<span class="comment">// Symbol type, value.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if len(p) &lt; ptrsz {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return &amp;formatError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		<span class="comment">// fixed-width value</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		if ptrsz == 8 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			s.value = order.Uint64(p[0:8])
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			p = p[8:]
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		} else {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			s.value = uint64(order.Uint32(p[0:4]))
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			p = p[4:]
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if len(p) &lt; 1 {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return &amp;formatError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		typ := p[0] &amp; 0x7F
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		s.typ = typ
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		p = p[1:]
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		<span class="comment">// Name.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		var i int
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		var nnul int
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		for i = 0; i &lt; len(p); i++ {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			if p[i] == 0 {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				nnul = 1
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				break
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		switch typ {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		case &#39;z&#39;, &#39;Z&#39;:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			p = p[i+nnul:]
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			for i = 0; i+2 &lt;= len(p); i += 2 {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				if p[i] == 0 &amp;&amp; p[i+1] == 0 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>					nnul = 2
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>					break
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>				}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		if len(p) &lt; i+nnul {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			return &amp;formatError{len(data), &#34;unexpected EOF&#34;, nil}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		s.name = p[0:i]
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		i += nnul
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		p = p[i:]
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		fn(s)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	return nil
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// newTable decodes the Go symbol table in data,</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// returning an in-memory representation.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func newTable(symtab []byte, ptrsz int) ([]Sym, error) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	var n int
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	err := walksymtab(symtab, ptrsz, func(s sym) error {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		n++
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return nil
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	})
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if err != nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return nil, err
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	fname := make(map[uint16]string)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	syms := make([]Sym, 0, n)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	err = walksymtab(symtab, ptrsz, func(s sym) error {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		n := len(syms)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		syms = syms[0 : n+1]
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		ts := &amp;syms[n]
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		ts.Type = rune(s.typ)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		ts.Value = s.value
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		switch s.typ {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		default:
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			ts.Name = string(s.name)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		case &#39;z&#39;, &#39;Z&#39;:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			for i := 0; i &lt; len(s.name); i += 2 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>				eltIdx := binary.BigEndian.Uint16(s.name[i : i+2])
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>				elt, ok := fname[eltIdx]
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>				if !ok {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>					return &amp;formatError{-1, &#34;bad filename code&#34;, eltIdx}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>				}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>				if n := len(ts.Name); n &gt; 0 &amp;&amp; ts.Name[n-1] != &#39;/&#39; {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>					ts.Name += &#34;/&#34;
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>				}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>				ts.Name += elt
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		switch s.typ {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		case &#39;f&#39;:
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			fname[uint16(s.value)] = ts.Name
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		return nil
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	})
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if err != nil {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		return nil, err
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	return syms, nil
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// ErrNoSymbols is returned by [File.Symbols] if there is no such section</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// in the File.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>var ErrNoSymbols = errors.New(&#34;no symbol section&#34;)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// Symbols returns the symbol table for f.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="selection">func (f *File) Symbols() ([]Sym, error)</span> {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	symtabSection := f.Section(&#34;syms&#34;)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if symtabSection == nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		return nil, ErrNoSymbols
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	symtab, err := symtabSection.Data()
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if err != nil {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		return nil, errors.New(&#34;cannot load symbol section&#34;)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	return newTable(symtab, f.PtrSize)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// Section returns a section with the given name, or nil if no such</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// section exists.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>func (f *File) Section(name string) *Section {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	for _, s := range f.Sections {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		if s.Name == name {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			return s
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return nil
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
</pre><p><a href="file.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
