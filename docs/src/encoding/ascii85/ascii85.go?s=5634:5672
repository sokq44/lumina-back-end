<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/ascii85/ascii85.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./ascii85.go?s=5634:5672#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/ascii85">ascii85</a>/<span class="text-muted">ascii85.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/ascii85">encoding/ascii85</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package ascii85 implements the ascii85 data encoding</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// as used in the btoa tool and Adobe&#39;s PostScript and PDF document formats.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package ascii85
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">/*
<span id="L15" class="ln">    15&nbsp;&nbsp;</span> * Encoder
<span id="L16" class="ln">    16&nbsp;&nbsp;</span> */</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Encode encodes src into at most [MaxEncodedLen](len(src))</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// bytes of dst, returning the actual number of bytes written.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// The encoding handles 4-byte chunks, using a special encoding</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// for the last fragment, so Encode is not appropriate for use on</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// individual blocks of a large data stream. Use [NewEncoder] instead.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Often, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Encode does not add these.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func Encode(dst, src []byte) int {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	if len(src) == 0 {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		return 0
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	n := 0
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	for len(src) &gt; 0 {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		dst[0] = 0
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		dst[1] = 0
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		dst[2] = 0
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		dst[3] = 0
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		dst[4] = 0
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		<span class="comment">// Unpack 4 bytes into uint32 to repack into base 85 5-byte.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		var v uint32
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		switch len(src) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		default:
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			v |= uint32(src[3])
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			fallthrough
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		case 3:
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			v |= uint32(src[2]) &lt;&lt; 8
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			fallthrough
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		case 2:
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			v |= uint32(src[1]) &lt;&lt; 16
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>			fallthrough
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		case 1:
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>			v |= uint32(src[0]) &lt;&lt; 24
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		<span class="comment">// Special case: zero (!!!!!) shortens to z.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		if v == 0 &amp;&amp; len(src) &gt;= 4 {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>			dst[0] = &#39;z&#39;
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			dst = dst[1:]
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>			src = src[4:]
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			n++
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			continue
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		<span class="comment">// Otherwise, 5 base 85 digits starting at !.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		for i := 4; i &gt;= 0; i-- {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			dst[i] = &#39;!&#39; + byte(v%85)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			v /= 85
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		<span class="comment">// If src was short, discard the low destination bytes.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		m := 5
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		if len(src) &lt; 4 {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			m -= 4 - len(src)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			src = nil
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		} else {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			src = src[4:]
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		dst = dst[m:]
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		n += m
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	return n
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// MaxEncodedLen returns the maximum length of an encoding of n source bytes.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func MaxEncodedLen(n int) int { return (n + 3) / 4 * 5 }
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// NewEncoder returns a new ascii85 stream encoder. Data written to</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// the returned writer will be encoded and then written to w.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Ascii85 encodings operate in 32-bit blocks; when finished</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// writing, the caller must Close the returned encoder to flush any</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// trailing partial block.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func NewEncoder(w io.Writer) io.WriteCloser { return &amp;encoder{w: w} }
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>type encoder struct {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	err  error
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	w    io.Writer
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	buf  [4]byte    <span class="comment">// buffered data waiting to be encoded</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	nbuf int        <span class="comment">// number of bytes in buf</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	out  [1024]byte <span class="comment">// output buffer</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (e *encoder) Write(p []byte) (n int, err error) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		return 0, e.err
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// Leading fringe.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if e.nbuf &gt; 0 {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		var i int
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		for i = 0; i &lt; len(p) &amp;&amp; e.nbuf &lt; 4; i++ {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			e.buf[e.nbuf] = p[i]
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			e.nbuf++
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		n += i
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		p = p[i:]
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		if e.nbuf &lt; 4 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			return
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		nout := Encode(e.out[0:], e.buf[0:])
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		if _, e.err = e.w.Write(e.out[0:nout]); e.err != nil {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			return n, e.err
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		e.nbuf = 0
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Large interior chunks.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	for len(p) &gt;= 4 {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		nn := len(e.out) / 5 * 4
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		if nn &gt; len(p) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			nn = len(p)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		nn -= nn % 4
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		if nn &gt; 0 {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			nout := Encode(e.out[0:], p[0:nn])
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			if _, e.err = e.w.Write(e.out[0:nout]); e.err != nil {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>				return n, e.err
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		n += nn
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		p = p[nn:]
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// Trailing fringe.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	copy(e.buf[:], p)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	e.nbuf = len(p)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	n += len(p)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// Close flushes any pending output from the encoder.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// It is an error to call Write after calling Close.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func (e *encoder) Close() error {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// If there&#39;s anything left in the buffer, flush it out</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if e.err == nil &amp;&amp; e.nbuf &gt; 0 {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		nout := Encode(e.out[0:], e.buf[0:e.nbuf])
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		e.nbuf = 0
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		_, e.err = e.w.Write(e.out[0:nout])
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	return e.err
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">/*
<span id="L164" class="ln">   164&nbsp;&nbsp;</span> * Decoder
<span id="L165" class="ln">   165&nbsp;&nbsp;</span> */</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>type CorruptInputError int64
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (e CorruptInputError) Error() string {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return &#34;illegal ascii85 data at input byte &#34; + strconv.FormatInt(int64(e), 10)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// Decode decodes src into dst, returning both the number</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// of bytes written to dst and the number consumed from src.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// If src contains invalid ascii85 data, Decode will return the</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// number of bytes successfully written and a [CorruptInputError].</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// Decode ignores space and control characters in src.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// Often, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Decode expects these to have been stripped by the caller.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// If flush is true, Decode assumes that src represents the</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// end of the input stream and processes it completely rather</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// than wait for the completion of another 32-bit block.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// [NewDecoder] wraps an [io.Reader] interface around Decode.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func Decode(dst, src []byte, flush bool) (ndst, nsrc int, err error) {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	var v uint32
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	var nb int
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	for i, b := range src {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		if len(dst)-ndst &lt; 4 {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			return
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		switch {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		case b &lt;= &#39; &#39;:
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			continue
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		case b == &#39;z&#39; &amp;&amp; nb == 0:
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			nb = 5
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			v = 0
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		case &#39;!&#39; &lt;= b &amp;&amp; b &lt;= &#39;u&#39;:
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			v = v*85 + uint32(b-&#39;!&#39;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			nb++
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		default:
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			return 0, 0, CorruptInputError(i)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		if nb == 5 {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			nsrc = i + 1
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			dst[ndst] = byte(v &gt;&gt; 24)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			dst[ndst+1] = byte(v &gt;&gt; 16)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			dst[ndst+2] = byte(v &gt;&gt; 8)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			dst[ndst+3] = byte(v)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			ndst += 4
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			nb = 0
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			v = 0
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if flush {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		nsrc = len(src)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		if nb &gt; 0 {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			<span class="comment">// The number of output bytes in the last fragment</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			<span class="comment">// is the number of leftover input bytes - 1:</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			<span class="comment">// the extra byte provides enough bits to cover</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			<span class="comment">// the inefficiency of the encoding for the block.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			if nb == 1 {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				return 0, 0, CorruptInputError(len(src))
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			for i := nb; i &lt; 5; i++ {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>				<span class="comment">// The short encoding truncated the output value.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>				<span class="comment">// We have to assume the worst case values (digit 84)</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				<span class="comment">// in order to ensure that the top bits are correct.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				v = v*85 + 84
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			for i := 0; i &lt; nb-1; i++ {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				dst[ndst] = byte(v &gt;&gt; 24)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				v &lt;&lt;= 8
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				ndst++
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// NewDecoder constructs a new ascii85 stream decoder.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="selection">func NewDecoder(r io.Reader) io.Reader</span> { return &amp;decoder{r: r} }
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>type decoder struct {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	err     error
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	readErr error
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	r       io.Reader
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	buf     [1024]byte <span class="comment">// leftover input</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	nbuf    int
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	out     []byte <span class="comment">// leftover decoded output</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	outbuf  [1024]byte
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>func (d *decoder) Read(p []byte) (n int, err error) {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if len(p) == 0 {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		return 0, nil
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if d.err != nil {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		return 0, d.err
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	for {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		<span class="comment">// Copy leftover output from last decode.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if len(d.out) &gt; 0 {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			n = copy(p, d.out)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			d.out = d.out[n:]
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			return
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		<span class="comment">// Decode leftover input from last read.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		var nn, nsrc, ndst int
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if d.nbuf &gt; 0 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			ndst, nsrc, d.err = Decode(d.outbuf[0:], d.buf[0:d.nbuf], d.readErr != nil)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			if ndst &gt; 0 {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>				d.out = d.outbuf[0:ndst]
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>				d.nbuf = copy(d.buf[0:], d.buf[nsrc:d.nbuf])
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>				continue <span class="comment">// copy out and return</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			if ndst == 0 &amp;&amp; d.err == nil {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>				<span class="comment">// Special case: input buffer is mostly filled with non-data bytes.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>				<span class="comment">// Filter out such bytes to make room for more input.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>				off := 0
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>				for i := 0; i &lt; d.nbuf; i++ {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>					if d.buf[i] &gt; &#39; &#39; {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>						d.buf[off] = d.buf[i]
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>						off++
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>					}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>				}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>				d.nbuf = off
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		<span class="comment">// Out of input, out of decoded output. Check errors.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		if d.err != nil {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			return 0, d.err
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		if d.readErr != nil {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			d.err = d.readErr
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			return 0, d.err
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		<span class="comment">// Read more data.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		nn, d.readErr = d.r.Read(d.buf[d.nbuf:])
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		d.nbuf += nn
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
</pre><p><a href="ascii85.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
