<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/asn1/asn1.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./asn1.go?s=1437:1472#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/asn1">asn1</a>/<span class="text-muted">asn1.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/asn1">encoding/asn1</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package asn1 implements parsing of DER-encoded ASN.1 data structures,</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// as defined in ITU-T Rec X.690.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// See also “A Layman&#39;s Guide to a Subset of ASN.1, BER, and DER,”</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// http://luca.ntop.org/Teaching/Appunti/asn1.html.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>package asn1
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// ASN.1 is a syntax for specifying abstract objects and BER, DER, PER, XER etc</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// are different encoding formats for those objects. Here, we&#39;ll be dealing</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// with DER, the Distinguished Encoding Rules. DER is used in X.509 because</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// it&#39;s fast to parse and, unlike BER, has a unique encoding for every object.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// When calculating hashes over objects, it&#39;s important that the resulting</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// bytes be the same at both ends and DER removes this margin of error.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// ASN.1 is very complex and this package doesn&#39;t attempt to implement</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// everything by any means.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>import (
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;unicode/utf16&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// A StructuralError suggests that the ASN.1 data is valid, but the Go type</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// which is receiving it doesn&#39;t match.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type StructuralError struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	Msg string
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>func (e StructuralError) Error() string { return &#34;asn1: structure error: &#34; + e.Msg }
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// A SyntaxError suggests that the ASN.1 data is invalid.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type SyntaxError struct {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	Msg string
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="selection">func (e SyntaxError) Error() string</span> { return &#34;asn1: syntax error: &#34; + e.Msg }
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// We start by dealing with each of the primitive types in turn.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// BOOLEAN</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func parseBool(bytes []byte) (ret bool, err error) {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if len(bytes) != 1 {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		err = SyntaxError{&#34;invalid boolean&#34;}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		return
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// DER demands that &#34;If the encoding represents the boolean value TRUE,</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// its single contents octet shall have all eight bits set to one.&#34;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// Thus only 0 and 255 are valid encoded values.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	switch bytes[0] {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	case 0:
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		ret = false
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	case 0xff:
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		ret = true
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	default:
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		err = SyntaxError{&#34;invalid boolean&#34;}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// INTEGER</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// checkInteger returns nil if the given bytes are a valid DER-encoded</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// INTEGER and an error otherwise.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>func checkInteger(bytes []byte) error {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	if len(bytes) == 0 {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		return StructuralError{&#34;empty integer&#34;}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if len(bytes) == 1 {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		return nil
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if (bytes[0] == 0 &amp;&amp; bytes[1]&amp;0x80 == 0) || (bytes[0] == 0xff &amp;&amp; bytes[1]&amp;0x80 == 0x80) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		return StructuralError{&#34;integer not minimally-encoded&#34;}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	return nil
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// parseInt64 treats the given bytes as a big-endian, signed integer and</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// returns the result.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func parseInt64(bytes []byte) (ret int64, err error) {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	err = checkInteger(bytes)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	if err != nil {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		return
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if len(bytes) &gt; 8 {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		<span class="comment">// We&#39;ll overflow an int64 in this case.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		err = StructuralError{&#34;integer too large&#34;}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		return
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	for bytesRead := 0; bytesRead &lt; len(bytes); bytesRead++ {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		ret &lt;&lt;= 8
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		ret |= int64(bytes[bytesRead])
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// Shift up and down in order to sign extend the result.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	ret &lt;&lt;= 64 - uint8(len(bytes))*8
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	ret &gt;&gt;= 64 - uint8(len(bytes))*8
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	return
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// parseInt32 treats the given bytes as a big-endian, signed integer and returns</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// the result.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func parseInt32(bytes []byte) (int32, error) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if err := checkInteger(bytes); err != nil {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return 0, err
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	ret64, err := parseInt64(bytes)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if err != nil {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		return 0, err
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if ret64 != int64(int32(ret64)) {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return 0, StructuralError{&#34;integer too large&#34;}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	return int32(ret64), nil
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>var bigOne = big.NewInt(1)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// parseBigInt treats the given bytes as a big-endian, signed integer and returns</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// the result.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func parseBigInt(bytes []byte) (*big.Int, error) {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if err := checkInteger(bytes); err != nil {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		return nil, err
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	ret := new(big.Int)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if len(bytes) &gt; 0 &amp;&amp; bytes[0]&amp;0x80 == 0x80 {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// This is a negative number.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		notBytes := make([]byte, len(bytes))
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		for i := range notBytes {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			notBytes[i] = ^bytes[i]
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		ret.SetBytes(notBytes)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		ret.Add(ret, bigOne)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		ret.Neg(ret)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return ret, nil
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	ret.SetBytes(bytes)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return ret, nil
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// BIT STRING</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// BitString is the structure to use when you want an ASN.1 BIT STRING type. A</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// bit string is padded up to the nearest byte in memory and the number of</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// valid bits is recorded. Padding bits will be zero.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>type BitString struct {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	Bytes     []byte <span class="comment">// bits packed into bytes.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	BitLength int    <span class="comment">// length in bits.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// At returns the bit at the given index. If the index is out of range it</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// returns 0.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (b BitString) At(i int) int {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if i &lt; 0 || i &gt;= b.BitLength {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return 0
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	x := i / 8
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	y := 7 - uint(i%8)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return int(b.Bytes[x]&gt;&gt;y) &amp; 1
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// RightAlign returns a slice where the padding bits are at the beginning. The</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// slice may share memory with the BitString.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (b BitString) RightAlign() []byte {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	shift := uint(8 - (b.BitLength % 8))
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if shift == 8 || len(b.Bytes) == 0 {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		return b.Bytes
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	a := make([]byte, len(b.Bytes))
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	a[0] = b.Bytes[0] &gt;&gt; shift
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	for i := 1; i &lt; len(b.Bytes); i++ {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		a[i] = b.Bytes[i-1] &lt;&lt; (8 - shift)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		a[i] |= b.Bytes[i] &gt;&gt; shift
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return a
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// parseBitString parses an ASN.1 bit string from the given byte slice and returns it.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func parseBitString(bytes []byte) (ret BitString, err error) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if len(bytes) == 0 {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		err = SyntaxError{&#34;zero length BIT STRING&#34;}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		return
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	paddingBits := int(bytes[0])
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	if paddingBits &gt; 7 ||
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		len(bytes) == 1 &amp;&amp; paddingBits &gt; 0 ||
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		bytes[len(bytes)-1]&amp;((1&lt;&lt;bytes[0])-1) != 0 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		err = SyntaxError{&#34;invalid padding bits in BIT STRING&#34;}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	ret.BitLength = (len(bytes)-1)*8 - paddingBits
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	ret.Bytes = bytes[1:]
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	return
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// NULL</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// NullRawValue is a [RawValue] with its Tag set to the ASN.1 NULL type tag (5).</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>var NullRawValue = RawValue{Tag: TagNull}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// NullBytes contains bytes representing the DER-encoded ASN.1 NULL type.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>var NullBytes = []byte{TagNull, 0}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// OBJECT IDENTIFIER</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// An ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>type ObjectIdentifier []int
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// Equal reports whether oi and other represent the same identifier.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	if len(oi) != len(other) {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		return false
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	for i := 0; i &lt; len(oi); i++ {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		if oi[i] != other[i] {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			return false
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	return true
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func (oi ObjectIdentifier) String() string {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	var s strings.Builder
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	s.Grow(32)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	buf := make([]byte, 0, 19)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	for i, v := range oi {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			s.WriteByte(&#39;.&#39;)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		s.Write(strconv.AppendInt(buf, int64(v), 10))
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	return s.String()
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// parseObjectIdentifier parses an OBJECT IDENTIFIER from the given bytes and</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// returns it. An object identifier is a sequence of variable length integers</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// that are assigned in a hierarchy.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>func parseObjectIdentifier(bytes []byte) (s ObjectIdentifier, err error) {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if len(bytes) == 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		err = SyntaxError{&#34;zero length OBJECT IDENTIFIER&#34;}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		return
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// In the worst case, we get two elements from the first byte (which is</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// encoded differently) and then every varint is a single byte long.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	s = make([]int, len(bytes)+1)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// The first varint is 40*value1 + value2:</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// According to this packing, value1 can take the values 0, 1 and 2 only.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// When value1 = 0 or value1 = 1, then value2 is &lt;= 39. When value1 = 2,</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// then there are no restrictions on value2.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	v, offset, err := parseBase128Int(bytes, 0)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if err != nil {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		return
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if v &lt; 80 {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		s[0] = v / 40
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		s[1] = v % 40
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	} else {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		s[0] = 2
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		s[1] = v - 80
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	i := 2
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	for ; offset &lt; len(bytes); i++ {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		v, offset, err = parseBase128Int(bytes, offset)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		if err != nil {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			return
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		s[i] = v
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	s = s[0:i]
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	return
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// ENUMERATED</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// An Enumerated is represented as a plain int.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>type Enumerated int
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// FLAG</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// A Flag accepts any data and is set to true if present.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>type Flag bool
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// parseBase128Int parses a base-128 encoded int from the given offset in the</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// given byte slice. It returns the value and the new offset.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func parseBase128Int(bytes []byte, initOffset int) (ret, offset int, err error) {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	offset = initOffset
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	var ret64 int64
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for shifted := 0; offset &lt; len(bytes); shifted++ {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		<span class="comment">// 5 * 7 bits per byte == 35 bits of data</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// Thus the representation is either non-minimal or too large for an int32</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if shifted == 5 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			err = StructuralError{&#34;base 128 integer too large&#34;}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			return
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		ret64 &lt;&lt;= 7
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		b := bytes[offset]
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		<span class="comment">// integers should be minimally encoded, so the leading octet should</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		<span class="comment">// never be 0x80</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if shifted == 0 &amp;&amp; b == 0x80 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			err = SyntaxError{&#34;integer is not minimally encoded&#34;}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			return
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		ret64 |= int64(b &amp; 0x7f)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		offset++
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if b&amp;0x80 == 0 {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			ret = int(ret64)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			<span class="comment">// Ensure that the returned value fits in an int on all platforms</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			if ret64 &gt; math.MaxInt32 {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>				err = StructuralError{&#34;base 128 integer too large&#34;}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			return
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	err = SyntaxError{&#34;truncated base 128 integer&#34;}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	return
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// UTCTime</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func parseUTCTime(bytes []byte) (ret time.Time, err error) {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	s := string(bytes)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	formatStr := &#34;0601021504Z0700&#34;
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	ret, err = time.Parse(formatStr, s)
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	if err != nil {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		formatStr = &#34;060102150405Z0700&#34;
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		ret, err = time.Parse(formatStr, s)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	if err != nil {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		return
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if serialized := ret.Format(formatStr); serialized != s {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;asn1: time did not serialize back to the original value and may be invalid: given %q, but serialized as %q&#34;, s, serialized)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		return
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if ret.Year() &gt;= 2050 {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		<span class="comment">// UTCTime only encodes times prior to 2050. See https://tools.ietf.org/html/rfc5280#section-4.1.2.5.1</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		ret = ret.AddDate(-100, 0, 0)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// parseGeneralizedTime parses the GeneralizedTime from the given byte slice</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// and returns the resulting time.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>func parseGeneralizedTime(bytes []byte) (ret time.Time, err error) {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	const formatStr = &#34;20060102150405.999999999Z0700&#34;
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	s := string(bytes)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	if ret, err = time.Parse(formatStr, s); err != nil {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		return
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	if serialized := ret.Format(formatStr); serialized != s {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;asn1: time did not serialize back to the original value and may be invalid: given %q, but serialized as %q&#34;, s, serialized)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	return
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// NumericString</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// parseNumericString parses an ASN.1 NumericString from the given byte array</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// and returns it.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func parseNumericString(bytes []byte) (ret string, err error) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	for _, b := range bytes {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		if !isNumeric(b) {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			return &#34;&#34;, SyntaxError{&#34;NumericString contains invalid character&#34;}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	return string(bytes), nil
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// isNumeric reports whether the given b is in the ASN.1 NumericString set.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func isNumeric(b byte) bool {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	return &#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39; ||
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		b == &#39; &#39;
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// PrintableString</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// parsePrintableString parses an ASN.1 PrintableString from the given byte</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// array and returns it.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func parsePrintableString(bytes []byte) (ret string, err error) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	for _, b := range bytes {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if !isPrintable(b, allowAsterisk, allowAmpersand) {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			err = SyntaxError{&#34;PrintableString contains invalid character&#34;}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			return
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	ret = string(bytes)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	return
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>type asteriskFlag bool
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>type ampersandFlag bool
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>const (
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	allowAsterisk  asteriskFlag = true
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	rejectAsterisk asteriskFlag = false
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	allowAmpersand  ampersandFlag = true
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	rejectAmpersand ampersandFlag = false
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// isPrintable reports whether the given b is in the ASN.1 PrintableString set.</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">// If asterisk is allowAsterisk then &#39;*&#39; is also allowed, reflecting existing</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// practice. If ampersand is allowAmpersand then &#39;&amp;&#39; is allowed as well.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>func isPrintable(b byte, asterisk asteriskFlag, ampersand ampersandFlag) bool {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	return &#39;a&#39; &lt;= b &amp;&amp; b &lt;= &#39;z&#39; ||
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		&#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; ||
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		&#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39; ||
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		&#39;\&#39;&#39; &lt;= b &amp;&amp; b &lt;= &#39;)&#39; ||
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		&#39;+&#39; &lt;= b &amp;&amp; b &lt;= &#39;/&#39; ||
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		b == &#39; &#39; ||
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		b == &#39;:&#39; ||
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		b == &#39;=&#39; ||
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		b == &#39;?&#39; ||
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		<span class="comment">// This is technically not allowed in a PrintableString.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		<span class="comment">// However, x509 certificates with wildcard strings don&#39;t</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		<span class="comment">// always use the correct string type so we permit it.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		(bool(asterisk) &amp;&amp; b == &#39;*&#39;) ||
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		<span class="comment">// This is not technically allowed either. However, not</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// only is it relatively common, but there are also a</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">// handful of CA certificates that contain it. At least</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">// one of which will not expire until 2027.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		(bool(ampersand) &amp;&amp; b == &#39;&amp;&#39;)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// IA5String</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// parseIA5String parses an ASN.1 IA5String (ASCII string) from the given</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// byte slice and returns it.</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>func parseIA5String(bytes []byte) (ret string, err error) {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	for _, b := range bytes {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		if b &gt;= utf8.RuneSelf {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			err = SyntaxError{&#34;IA5String contains invalid character&#34;}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			return
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	ret = string(bytes)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	return
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// T61String</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// parseT61String parses an ASN.1 T61String (8-bit clean string) from the given</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// byte slice and returns it.</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>func parseT61String(bytes []byte) (ret string, err error) {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	return string(bytes), nil
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// UTF8String</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// parseUTF8String parses an ASN.1 UTF8String (raw UTF-8) from the given byte</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// array and returns it.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>func parseUTF8String(bytes []byte) (ret string, err error) {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	if !utf8.Valid(bytes) {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;asn1: invalid UTF-8 string&#34;)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	return string(bytes), nil
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// BMPString</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// parseBMPString parses an ASN.1 BMPString (Basic Multilingual Plane of</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// ISO/IEC/ITU 10646-1) from the given byte slice and returns it.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>func parseBMPString(bmpString []byte) (string, error) {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	if len(bmpString)%2 != 0 {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;pkcs12: odd-length BMP string&#34;)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	<span class="comment">// Strip terminator if present.</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	if l := len(bmpString); l &gt;= 2 &amp;&amp; bmpString[l-1] == 0 &amp;&amp; bmpString[l-2] == 0 {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		bmpString = bmpString[:l-2]
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	s := make([]uint16, 0, len(bmpString)/2)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	for len(bmpString) &gt; 0 {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		s = append(s, uint16(bmpString[0])&lt;&lt;8+uint16(bmpString[1]))
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		bmpString = bmpString[2:]
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	return string(utf16.Decode(s)), nil
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// A RawValue represents an undecoded ASN.1 object.</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>type RawValue struct {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	Class, Tag int
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	IsCompound bool
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	Bytes      []byte
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	FullBytes  []byte <span class="comment">// includes the tag and length</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// RawContent is used to signal that the undecoded, DER data needs to be</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// preserved for a struct. To use it, the first field of the struct must have</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">// this type. It&#39;s an error for any of the other fields to have this type.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>type RawContent []byte
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// Tagging</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// parseTagAndLength parses an ASN.1 tag and length pair from the given offset</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// into a byte slice. It returns the parsed data and the new offset. SET and</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span><span class="comment">// SET OF (tag 17) are mapped to SEQUENCE and SEQUENCE OF (tag 16) since we</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span><span class="comment">// don&#39;t distinguish between ordered and unordered objects in this code.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>func parseTagAndLength(bytes []byte, initOffset int) (ret tagAndLength, offset int, err error) {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	offset = initOffset
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	<span class="comment">// parseTagAndLength should not be called without at least a single</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	<span class="comment">// byte to read. Thus this check is for robustness:</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	if offset &gt;= len(bytes) {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		err = errors.New(&#34;asn1: internal error in parseTagAndLength&#34;)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		return
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	b := bytes[offset]
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	offset++
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	ret.class = int(b &gt;&gt; 6)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	ret.isCompound = b&amp;0x20 == 0x20
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	ret.tag = int(b &amp; 0x1f)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	<span class="comment">// If the bottom five bits are set, then the tag number is actually base 128</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	<span class="comment">// encoded afterwards</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	if ret.tag == 0x1f {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		ret.tag, offset, err = parseBase128Int(bytes, offset)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		if err != nil {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			return
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		<span class="comment">// Tags should be encoded in minimal form.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		if ret.tag &lt; 0x1f {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			err = SyntaxError{&#34;non-minimal tag&#34;}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			return
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if offset &gt;= len(bytes) {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		err = SyntaxError{&#34;truncated tag or length&#34;}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		return
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	b = bytes[offset]
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	offset++
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	if b&amp;0x80 == 0 {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		<span class="comment">// The length is encoded in the bottom 7 bits.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		ret.length = int(b &amp; 0x7f)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	} else {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		<span class="comment">// Bottom 7 bits give the number of length bytes to follow.</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		numBytes := int(b &amp; 0x7f)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		if numBytes == 0 {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			err = SyntaxError{&#34;indefinite length found (not DER)&#34;}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			return
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		ret.length = 0
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		for i := 0; i &lt; numBytes; i++ {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			if offset &gt;= len(bytes) {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>				err = SyntaxError{&#34;truncated tag or length&#34;}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>				return
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			b = bytes[offset]
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>			offset++
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			if ret.length &gt;= 1&lt;&lt;23 {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>				<span class="comment">// We can&#39;t shift ret.length up without</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>				<span class="comment">// overflowing.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>				err = StructuralError{&#34;length too large&#34;}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>				return
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			ret.length &lt;&lt;= 8
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			ret.length |= int(b)
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			if ret.length == 0 {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>				<span class="comment">// DER requires that lengths be minimal.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>				err = StructuralError{&#34;superfluous leading zeros in length&#34;}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>				return
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		<span class="comment">// Short lengths must be encoded in short form.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		if ret.length &lt; 0x80 {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			err = StructuralError{&#34;non-minimal length&#34;}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>			return
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	return
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span><span class="comment">// parseSequenceOf is used for SEQUENCE OF and SET OF values. It tries to parse</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">// a number of ASN.1 values from the given byte slice and returns them as a</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span><span class="comment">// slice of Go values of the given type.</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>func parseSequenceOf(bytes []byte, sliceType reflect.Type, elemType reflect.Type) (ret reflect.Value, err error) {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	matchAny, expectedTag, compoundType, ok := getUniversalType(elemType)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	if !ok {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		err = StructuralError{&#34;unknown Go type for slice&#34;}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		return
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// First we iterate over the input and count the number of elements,</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	<span class="comment">// checking that the types are correct in each case.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	numElements := 0
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	for offset := 0; offset &lt; len(bytes); {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		var t tagAndLength
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		t, offset, err = parseTagAndLength(bytes, offset)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		if err != nil {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			return
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		switch t.tag {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		case TagIA5String, TagGeneralString, TagT61String, TagUTF8String, TagNumericString, TagBMPString:
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			<span class="comment">// We pretend that various other string types are</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			<span class="comment">// PRINTABLE STRINGs so that a sequence of them can be</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			<span class="comment">// parsed into a []string.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			t.tag = TagPrintableString
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		case TagGeneralizedTime, TagUTCTime:
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			<span class="comment">// Likewise, both time types are treated the same.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			t.tag = TagUTCTime
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		if !matchAny &amp;&amp; (t.class != ClassUniversal || t.isCompound != compoundType || t.tag != expectedTag) {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			err = StructuralError{&#34;sequence tag mismatch&#34;}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			return
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		if invalidLength(offset, t.length, len(bytes)) {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			err = SyntaxError{&#34;truncated sequence&#34;}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			return
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		offset += t.length
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		numElements++
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	ret = reflect.MakeSlice(sliceType, numElements, numElements)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	params := fieldParameters{}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	offset := 0
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	for i := 0; i &lt; numElements; i++ {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		offset, err = parseField(ret.Index(i), bytes, offset, params)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		if err != nil {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>			return
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	return
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>var (
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	bitStringType        = reflect.TypeFor[BitString]()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	objectIdentifierType = reflect.TypeFor[ObjectIdentifier]()
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	enumeratedType       = reflect.TypeFor[Enumerated]()
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	flagType             = reflect.TypeFor[Flag]()
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	timeType             = reflect.TypeFor[time.Time]()
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	rawValueType         = reflect.TypeFor[RawValue]()
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	rawContentsType      = reflect.TypeFor[RawContent]()
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	bigIntType           = reflect.TypeFor[*big.Int]()
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// invalidLength reports whether offset + length &gt; sliceLength, or if the</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// addition would overflow.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>func invalidLength(offset, length, sliceLength int) bool {
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	return offset+length &lt; offset || offset+length &gt; sliceLength
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">// parseField is the main parsing function. Given a byte slice and an offset</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span><span class="comment">// into the array, it will try to parse a suitable ASN.1 value out and store it</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span><span class="comment">// in the given Value.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>func parseField(v reflect.Value, bytes []byte, initOffset int, params fieldParameters) (offset int, err error) {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	offset = initOffset
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	fieldType := v.Type()
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	<span class="comment">// If we have run out of data, it may be that there are optional elements at the end.</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	if offset == len(bytes) {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		if !setDefaultValue(v, params) {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			err = SyntaxError{&#34;sequence truncated&#34;}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		return
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	<span class="comment">// Deal with the ANY type.</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	if ifaceType := fieldType; ifaceType.Kind() == reflect.Interface &amp;&amp; ifaceType.NumMethod() == 0 {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		var t tagAndLength
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		t, offset, err = parseTagAndLength(bytes, offset)
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		if err != nil {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			return
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		if invalidLength(offset, t.length, len(bytes)) {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			err = SyntaxError{&#34;data truncated&#34;}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			return
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		var result any
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		if !t.isCompound &amp;&amp; t.class == ClassUniversal {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			innerBytes := bytes[offset : offset+t.length]
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>			switch t.tag {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			case TagPrintableString:
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				result, err = parsePrintableString(innerBytes)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			case TagNumericString:
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>				result, err = parseNumericString(innerBytes)
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>			case TagIA5String:
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>				result, err = parseIA5String(innerBytes)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			case TagT61String:
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>				result, err = parseT61String(innerBytes)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			case TagUTF8String:
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>				result, err = parseUTF8String(innerBytes)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			case TagInteger:
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>				result, err = parseInt64(innerBytes)
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			case TagBitString:
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>				result, err = parseBitString(innerBytes)
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			case TagOID:
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>				result, err = parseObjectIdentifier(innerBytes)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			case TagUTCTime:
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>				result, err = parseUTCTime(innerBytes)
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			case TagGeneralizedTime:
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				result, err = parseGeneralizedTime(innerBytes)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			case TagOctetString:
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				result = innerBytes
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			case TagBMPString:
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>				result, err = parseBMPString(innerBytes)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			default:
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>				<span class="comment">// If we don&#39;t know how to handle the type, we just leave Value as nil.</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		offset += t.length
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		if err != nil {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>			return
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		if result != nil {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			v.Set(reflect.ValueOf(result))
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		return
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	}
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	t, offset, err := parseTagAndLength(bytes, offset)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	if err != nil {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		return
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	if params.explicit {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		expectedClass := ClassContextSpecific
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		if params.application {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			expectedClass = ClassApplication
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		if offset == len(bytes) {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			err = StructuralError{&#34;explicit tag has no child&#34;}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			return
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		if t.class == expectedClass &amp;&amp; t.tag == *params.tag &amp;&amp; (t.length == 0 || t.isCompound) {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			if fieldType == rawValueType {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>				<span class="comment">// The inner element should not be parsed for RawValues.</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			} else if t.length &gt; 0 {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>				t, offset, err = parseTagAndLength(bytes, offset)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>				if err != nil {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>					return
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>				}
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			} else {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>				if fieldType != flagType {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>					err = StructuralError{&#34;zero length explicit tag was not an asn1.Flag&#34;}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>					return
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>				}
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>				v.SetBool(true)
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>				return
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		} else {
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			<span class="comment">// The tags didn&#39;t match, it might be an optional element.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			ok := setDefaultValue(v, params)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			if ok {
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>				offset = initOffset
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			} else {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>				err = StructuralError{&#34;explicitly tagged member didn&#39;t match&#34;}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			return
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	matchAny, universalTag, compoundType, ok1 := getUniversalType(fieldType)
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	if !ok1 {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		err = StructuralError{fmt.Sprintf(&#34;unknown Go type: %v&#34;, fieldType)}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		return
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	<span class="comment">// Special case for strings: all the ASN.1 string types map to the Go</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	<span class="comment">// type string. getUniversalType returns the tag for PrintableString</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	<span class="comment">// when it sees a string, so if we see a different string type on the</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	<span class="comment">// wire, we change the universal type to match.</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	if universalTag == TagPrintableString {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		if t.class == ClassUniversal {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			switch t.tag {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			case TagIA5String, TagGeneralString, TagT61String, TagUTF8String, TagNumericString, TagBMPString:
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>				universalTag = t.tag
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		} else if params.stringType != 0 {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			universalTag = params.stringType
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	<span class="comment">// Special case for time: UTCTime and GeneralizedTime both map to the</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	<span class="comment">// Go type time.Time.</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	if universalTag == TagUTCTime &amp;&amp; t.tag == TagGeneralizedTime &amp;&amp; t.class == ClassUniversal {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		universalTag = TagGeneralizedTime
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if params.set {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		universalTag = TagSet
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	matchAnyClassAndTag := matchAny
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	expectedClass := ClassUniversal
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	expectedTag := universalTag
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	if !params.explicit &amp;&amp; params.tag != nil {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		expectedClass = ClassContextSpecific
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		expectedTag = *params.tag
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>		matchAnyClassAndTag = false
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	if !params.explicit &amp;&amp; params.application &amp;&amp; params.tag != nil {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		expectedClass = ClassApplication
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		expectedTag = *params.tag
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		matchAnyClassAndTag = false
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	if !params.explicit &amp;&amp; params.private &amp;&amp; params.tag != nil {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		expectedClass = ClassPrivate
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		expectedTag = *params.tag
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		matchAnyClassAndTag = false
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	<span class="comment">// We have unwrapped any explicit tagging at this point.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	if !matchAnyClassAndTag &amp;&amp; (t.class != expectedClass || t.tag != expectedTag) ||
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		(!matchAny &amp;&amp; t.isCompound != compoundType) {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		<span class="comment">// Tags don&#39;t match. Again, it could be an optional element.</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		ok := setDefaultValue(v, params)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>		if ok {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>			offset = initOffset
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>		} else {
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>			err = StructuralError{fmt.Sprintf(&#34;tags don&#39;t match (%d vs %+v) %+v %s @%d&#34;, expectedTag, t, params, fieldType.Name(), offset)}
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		return
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	if invalidLength(offset, t.length, len(bytes)) {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		err = SyntaxError{&#34;data truncated&#34;}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		return
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	innerBytes := bytes[offset : offset+t.length]
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	offset += t.length
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	<span class="comment">// We deal with the structures defined in this package first.</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	switch v := v.Addr().Interface().(type) {
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	case *RawValue:
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>		*v = RawValue{t.class, t.tag, t.isCompound, innerBytes, bytes[initOffset:offset]}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		return
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	case *ObjectIdentifier:
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		*v, err = parseObjectIdentifier(innerBytes)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		return
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	case *BitString:
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		*v, err = parseBitString(innerBytes)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>		return
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	case *time.Time:
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		if universalTag == TagUTCTime {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			*v, err = parseUTCTime(innerBytes)
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>			return
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		*v, err = parseGeneralizedTime(innerBytes)
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		return
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	case *Enumerated:
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		parsedInt, err1 := parseInt32(innerBytes)
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>		if err1 == nil {
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>			*v = Enumerated(parsedInt)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>		err = err1
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>		return
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	case *Flag:
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>		*v = true
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>		return
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	case **big.Int:
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>		parsedInt, err1 := parseBigInt(innerBytes)
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>		if err1 == nil {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>			*v = parsedInt
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		err = err1
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		return
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	switch val := v; val.Kind() {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		parsedBool, err1 := parseBool(innerBytes)
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		if err1 == nil {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			val.SetBool(parsedBool)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		err = err1
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		return
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int32, reflect.Int64:
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		if val.Type().Size() == 4 {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			parsedInt, err1 := parseInt32(innerBytes)
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>			if err1 == nil {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>				val.SetInt(int64(parsedInt))
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>			}
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>			err = err1
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		} else {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>			parsedInt, err1 := parseInt64(innerBytes)
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			if err1 == nil {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>				val.SetInt(parsedInt)
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>			err = err1
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		return
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	<span class="comment">// TODO(dfc) Add support for the remaining integer types</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		structType := fieldType
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		for i := 0; i &lt; structType.NumField(); i++ {
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>			if !structType.Field(i).IsExported() {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>				err = StructuralError{&#34;struct contains unexported fields&#34;}
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>				return
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>			}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		if structType.NumField() &gt; 0 &amp;&amp;
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>			structType.Field(0).Type == rawContentsType {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>			bytes := bytes[initOffset:offset]
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>			val.Field(0).Set(reflect.ValueOf(RawContent(bytes)))
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		innerOffset := 0
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		for i := 0; i &lt; structType.NumField(); i++ {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>			field := structType.Field(i)
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			if i == 0 &amp;&amp; field.Type == rawContentsType {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				continue
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>			}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>			innerOffset, err = parseField(val.Field(i), innerBytes, innerOffset, parseFieldParameters(field.Tag.Get(&#34;asn1&#34;)))
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			if err != nil {
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>				return
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>		}
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		<span class="comment">// We allow extra bytes at the end of the SEQUENCE because</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>		<span class="comment">// adding elements to the end has been used in X.509 as the</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		<span class="comment">// version numbers have increased.</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		return
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		sliceType := fieldType
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		if sliceType.Elem().Kind() == reflect.Uint8 {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>			val.Set(reflect.MakeSlice(sliceType, len(innerBytes), len(innerBytes)))
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>			reflect.Copy(val, reflect.ValueOf(innerBytes))
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>			return
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>		}
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>		newSlice, err1 := parseSequenceOf(innerBytes, sliceType, sliceType.Elem())
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		if err1 == nil {
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>			val.Set(newSlice)
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>		}
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		err = err1
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		return
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	case reflect.String:
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>		var v string
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		switch universalTag {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		case TagPrintableString:
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>			v, err = parsePrintableString(innerBytes)
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		case TagNumericString:
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>			v, err = parseNumericString(innerBytes)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		case TagIA5String:
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>			v, err = parseIA5String(innerBytes)
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		case TagT61String:
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			v, err = parseT61String(innerBytes)
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		case TagUTF8String:
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			v, err = parseUTF8String(innerBytes)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		case TagGeneralString:
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			<span class="comment">// GeneralString is specified in ISO-2022/ECMA-35,</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			<span class="comment">// A brief review suggests that it includes structures</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>			<span class="comment">// that allow the encoding to change midstring and</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			<span class="comment">// such. We give up and pass it as an 8-bit string.</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			v, err = parseT61String(innerBytes)
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>		case TagBMPString:
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			v, err = parseBMPString(innerBytes)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>		default:
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			err = SyntaxError{fmt.Sprintf(&#34;internal error: unknown string type %d&#34;, universalTag)}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		}
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		if err == nil {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>			val.SetString(v)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		return
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	err = StructuralError{&#34;unsupported: &#34; + v.Type().String()}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	return
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>}
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span><span class="comment">// canHaveDefaultValue reports whether k is a Kind that we will set a default</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span><span class="comment">// value for. (A signed integer, essentially.)</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>func canHaveDefaultValue(k reflect.Kind) bool {
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	switch k {
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		return true
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	}
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return false
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span><span class="comment">// setDefaultValue is used to install a default value, from a tag string, into</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">// a Value. It is successful if the field was optional, even if a default value</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span><span class="comment">// wasn&#39;t provided or it failed to install it into the Value.</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>func setDefaultValue(v reflect.Value, params fieldParameters) (ok bool) {
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	if !params.optional {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		return
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	ok = true
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	if params.defaultValue == nil {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		return
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	if canHaveDefaultValue(v.Kind()) {
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>		v.SetInt(*params.defaultValue)
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	}
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	return
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span><span class="comment">// Unmarshal parses the DER-encoded ASN.1 data structure b</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span><span class="comment">// and uses the reflect package to fill in an arbitrary value pointed at by val.</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span><span class="comment">// Because Unmarshal uses the reflect package, the structs</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span><span class="comment">// being written to must use upper case field names. If val</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span><span class="comment">// is nil or not a pointer, Unmarshal returns an error.</span>
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span><span class="comment">// After parsing b, any bytes that were leftover and not used to fill</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span><span class="comment">// val will be returned in rest. When parsing a SEQUENCE into a struct,</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span><span class="comment">// any trailing elements of the SEQUENCE that do not have matching</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span><span class="comment">// fields in val will not be included in rest, as these are considered</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span><span class="comment">// valid elements of the SEQUENCE and not trailing data.</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 INTEGER can be written to an int, int32, int64,</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">//     or *[big.Int].</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">//     If the encoded value does not fit in the Go type,</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">//     Unmarshal returns a parse error.</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 BIT STRING can be written to a [BitString].</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 OCTET STRING can be written to a []byte.</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 OBJECT IDENTIFIER can be written to an [ObjectIdentifier].</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 ENUMERATED can be written to an [Enumerated].</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 UTCTIME or GENERALIZEDTIME can be written to a [time.Time].</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 PrintableString, IA5String, or NumericString can be written to a string.</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span><span class="comment">//   - Any of the above ASN.1 values can be written to an interface{}.</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span><span class="comment">//     The value stored in the interface has the corresponding Go type.</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span><span class="comment">//     For integers, that type is int64.</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 SEQUENCE OF x or SET OF x can be written</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span><span class="comment">//     to a slice if an x can be written to the slice&#39;s element type.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span><span class="comment">//   - An ASN.1 SEQUENCE or SET can be written to a struct</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span><span class="comment">//     if each of the elements in the sequence can be</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span><span class="comment">//     written to the corresponding element in the struct.</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span><span class="comment">// The following tags on struct fields have special meaning to Unmarshal:</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">//	application specifies that an APPLICATION tag is used</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span><span class="comment">//	private     specifies that a PRIVATE tag is used</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span><span class="comment">//	default:x   sets the default value for optional integer fields (only used if optional is also present)</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span><span class="comment">//	explicit    specifies that an additional, explicit tag wraps the implicit one</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span><span class="comment">//	optional    marks the field as ASN.1 OPTIONAL</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span><span class="comment">//	set         causes a SET, rather than a SEQUENCE type to be expected</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span><span class="comment">//	tag:x       specifies the ASN.1 tag number; implies ASN.1 CONTEXT SPECIFIC</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span><span class="comment">// When decoding an ASN.1 value with an IMPLICIT tag into a string field,</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span><span class="comment">// Unmarshal will default to a PrintableString, which doesn&#39;t support</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span><span class="comment">// characters such as &#39;@&#39; and &#39;&amp;&#39;. To force other encodings, use the following</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span><span class="comment">// tags:</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span><span class="comment">//	ia5     causes strings to be unmarshaled as ASN.1 IA5String values</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span><span class="comment">//	numeric causes strings to be unmarshaled as ASN.1 NumericString values</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span><span class="comment">//	utf8    causes strings to be unmarshaled as ASN.1 UTF8String values</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">// If the type of the first field of a structure is RawContent then the raw</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span><span class="comment">// ASN1 contents of the struct will be stored in it.</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span><span class="comment">// If the name of a slice type ends with &#34;SET&#34; then it&#39;s treated as if</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span><span class="comment">// the &#34;set&#34; tag was set on it. This results in interpreting the type as a</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span><span class="comment">// SET OF x rather than a SEQUENCE OF x. This can be used with nested slices</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span><span class="comment">// where a struct tag cannot be given.</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span><span class="comment">// Other ASN.1 types are not supported; if it encounters them,</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span><span class="comment">// Unmarshal returns a parse error.</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>func Unmarshal(b []byte, val any) (rest []byte, err error) {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	return UnmarshalWithParams(b, val, &#34;&#34;)
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>}
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span><span class="comment">// An invalidUnmarshalError describes an invalid argument passed to Unmarshal.</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span><span class="comment">// (The argument to Unmarshal must be a non-nil pointer.)</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>type invalidUnmarshalError struct {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	Type reflect.Type
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>}
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>func (e *invalidUnmarshalError) Error() string {
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	if e.Type == nil {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		return &#34;asn1: Unmarshal recipient value is nil&#34;
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	if e.Type.Kind() != reflect.Pointer {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		return &#34;asn1: Unmarshal recipient value is non-pointer &#34; + e.Type.String()
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	return &#34;asn1: Unmarshal recipient value is nil &#34; + e.Type.String()
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>}
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span><span class="comment">// UnmarshalWithParams allows field parameters to be specified for the</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span><span class="comment">// top-level element. The form of the params is the same as the field tags.</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>func UnmarshalWithParams(b []byte, val any, params string) (rest []byte, err error) {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	v := reflect.ValueOf(val)
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	if v.Kind() != reflect.Pointer || v.IsNil() {
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>		return nil, &amp;invalidUnmarshalError{reflect.TypeOf(val)}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	}
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	offset, err := parseField(v.Elem(), b, 0, parseFieldParameters(params))
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	if err != nil {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		return nil, err
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	return b[offset:], nil
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>
</pre><p><a href="asn1.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
