<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/asn1/marshal.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./marshal.go?s=17350:17412#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/asn1">asn1</a>/<span class="text-muted">marshal.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/asn1">encoding/asn1</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package asn1
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>var (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	byte00Encoder encoder = byteEncoder(0x00)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	byteFFEncoder encoder = byteEncoder(0xff)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// encoder represents an ASN.1 element that is waiting to be marshaled.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>type encoder interface {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// Len returns the number of bytes needed to marshal this element.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Len() int
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// Encode encodes this element by writing Len() bytes to dst.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	Encode(dst []byte)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>type byteEncoder byte
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func (c byteEncoder) Len() int {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	return 1
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func (c byteEncoder) Encode(dst []byte) {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	dst[0] = byte(c)
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>type bytesEncoder []byte
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (b bytesEncoder) Len() int {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return len(b)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func (b bytesEncoder) Encode(dst []byte) {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if copy(dst, b) != len(b) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		panic(&#34;internal error&#34;)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>type stringEncoder string
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func (s stringEncoder) Len() int {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	return len(s)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func (s stringEncoder) Encode(dst []byte) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if copy(dst, s) != len(s) {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		panic(&#34;internal error&#34;)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>type multiEncoder []encoder
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func (m multiEncoder) Len() int {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	var size int
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	for _, e := range m {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		size += e.Len()
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return size
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func (m multiEncoder) Encode(dst []byte) {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	var off int
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	for _, e := range m {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		e.Encode(dst[off:])
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		off += e.Len()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>type setEncoder []encoder
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (s setEncoder) Len() int {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	var size int
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	for _, e := range s {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		size += e.Len()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return size
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func (s setEncoder) Encode(dst []byte) {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// Per X690 Section 11.6: The encodings of the component values of a</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// set-of value shall appear in ascending order, the encodings being</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// compared as octet strings with the shorter components being padded</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// at their trailing end with 0-octets.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// First we encode each element to its TLV encoding and then use</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// octetSort to get the ordering expected by X690 DER rules before</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// writing the sorted encodings out to dst.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	l := make([][]byte, len(s))
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	for i, e := range s {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		l[i] = make([]byte, e.Len())
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		e.Encode(l[i])
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	sort.Slice(l, func(i, j int) bool {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		<span class="comment">// Since we are using bytes.Compare to compare TLV encodings we</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		<span class="comment">// don&#39;t need to right pad s[i] and s[j] to the same length as</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		<span class="comment">// suggested in X690. If len(s[i]) &lt; len(s[j]) the length octet of</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		<span class="comment">// s[i], which is the first determining byte, will inherently be</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		<span class="comment">// smaller than the length octet of s[j]. This lets us skip the</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		<span class="comment">// padding step.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		return bytes.Compare(l[i], l[j]) &lt; 0
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	})
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	var off int
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	for _, b := range l {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		copy(dst[off:], b)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		off += len(b)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>type taggedEncoder struct {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// scratch contains temporary space for encoding the tag and length of</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// an element in order to avoid extra allocations.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	scratch [8]byte
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	tag     encoder
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	body    encoder
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (t *taggedEncoder) Len() int {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return t.tag.Len() + t.body.Len()
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (t *taggedEncoder) Encode(dst []byte) {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	t.tag.Encode(dst)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	t.body.Encode(dst[t.tag.Len():])
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>type int64Encoder int64
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (i int64Encoder) Len() int {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	n := 1
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	for i &gt; 127 {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		n++
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		i &gt;&gt;= 8
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	for i &lt; -128 {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		n++
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		i &gt;&gt;= 8
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return n
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (i int64Encoder) Encode(dst []byte) {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	n := i.Len()
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	for j := 0; j &lt; n; j++ {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		dst[j] = byte(i &gt;&gt; uint((n-1-j)*8))
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>func base128IntLength(n int64) int {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if n == 0 {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return 1
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	l := 0
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for i := n; i &gt; 0; i &gt;&gt;= 7 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		l++
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	return l
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func appendBase128Int(dst []byte, n int64) []byte {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	l := base128IntLength(n)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	for i := l - 1; i &gt;= 0; i-- {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		o := byte(n &gt;&gt; uint(i*7))
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		o &amp;= 0x7f
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		if i != 0 {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			o |= 0x80
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		dst = append(dst, o)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return dst
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func makeBigInt(n *big.Int) (encoder, error) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if n == nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;empty integer&#34;}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if n.Sign() &lt; 0 {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		<span class="comment">// A negative number has to be converted to two&#39;s-complement</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		<span class="comment">// form. So we&#39;ll invert and subtract 1. If the</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		<span class="comment">// most-significant-bit isn&#39;t set then we&#39;ll need to pad the</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		<span class="comment">// beginning with 0xff in order to keep the number negative.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		nMinus1 := new(big.Int).Neg(n)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		nMinus1.Sub(nMinus1, bigOne)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		bytes := nMinus1.Bytes()
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		for i := range bytes {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			bytes[i] ^= 0xff
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if len(bytes) == 0 || bytes[0]&amp;0x80 == 0 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return multiEncoder([]encoder{byteFFEncoder, bytesEncoder(bytes)}), nil
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return bytesEncoder(bytes), nil
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	} else if n.Sign() == 0 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		<span class="comment">// Zero is written as a single 0 zero rather than no bytes.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return byte00Encoder, nil
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	} else {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		bytes := n.Bytes()
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		if len(bytes) &gt; 0 &amp;&amp; bytes[0]&amp;0x80 != 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ll have to pad this with 0x00 in order to stop it</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			<span class="comment">// looking like a negative number.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			return multiEncoder([]encoder{byte00Encoder, bytesEncoder(bytes)}), nil
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		return bytesEncoder(bytes), nil
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func appendLength(dst []byte, i int) []byte {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	n := lengthLength(i)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	for ; n &gt; 0; n-- {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		dst = append(dst, byte(i&gt;&gt;uint((n-1)*8)))
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return dst
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>func lengthLength(i int) (numBytes int) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	numBytes = 1
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	for i &gt; 255 {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		numBytes++
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		i &gt;&gt;= 8
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>func appendTagAndLength(dst []byte, t tagAndLength) []byte {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	b := uint8(t.class) &lt;&lt; 6
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if t.isCompound {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		b |= 0x20
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if t.tag &gt;= 31 {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		b |= 0x1f
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		dst = append(dst, b)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		dst = appendBase128Int(dst, int64(t.tag))
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	} else {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		b |= uint8(t.tag)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		dst = append(dst, b)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	if t.length &gt;= 128 {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		l := lengthLength(t.length)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		dst = append(dst, 0x80|byte(l))
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		dst = appendLength(dst, t.length)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	} else {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		dst = append(dst, byte(t.length))
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return dst
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>type bitStringEncoder BitString
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func (b bitStringEncoder) Len() int {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return len(b.Bytes) + 1
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (b bitStringEncoder) Encode(dst []byte) {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	dst[0] = byte((8 - b.BitLength%8) % 8)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if copy(dst[1:], b.Bytes) != len(b.Bytes) {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		panic(&#34;internal error&#34;)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>type oidEncoder []int
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func (oid oidEncoder) Len() int {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	l := base128IntLength(int64(oid[0]*40 + oid[1]))
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	for i := 2; i &lt; len(oid); i++ {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		l += base128IntLength(int64(oid[i]))
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return l
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func (oid oidEncoder) Encode(dst []byte) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	dst = appendBase128Int(dst[:0], int64(oid[0]*40+oid[1]))
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	for i := 2; i &lt; len(oid); i++ {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		dst = appendBase128Int(dst, int64(oid[i]))
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>func makeObjectIdentifier(oid []int) (e encoder, err error) {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	if len(oid) &lt; 2 || oid[0] &gt; 2 || (oid[0] &lt; 2 &amp;&amp; oid[1] &gt;= 40) {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;invalid object identifier&#34;}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return oidEncoder(oid), nil
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func makePrintableString(s string) (e encoder, err error) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		<span class="comment">// The asterisk is often used in PrintableString, even though</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		<span class="comment">// it is invalid. If a PrintableString was specifically</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// requested then the asterisk is permitted by this code.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		<span class="comment">// Ampersand is allowed in parsing due a handful of CA</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		<span class="comment">// certificates, however when making new certificates</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		<span class="comment">// it is rejected.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if !isPrintable(s[i], allowAsterisk, rejectAmpersand) {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			return nil, StructuralError{&#34;PrintableString contains invalid character&#34;}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	return stringEncoder(s), nil
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>func makeIA5String(s string) (e encoder, err error) {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		if s[i] &gt; 127 {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			return nil, StructuralError{&#34;IA5String contains invalid character&#34;}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return stringEncoder(s), nil
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func makeNumericString(s string) (e encoder, err error) {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		if !isNumeric(s[i]) {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			return nil, StructuralError{&#34;NumericString contains invalid character&#34;}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return stringEncoder(s), nil
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func makeUTF8String(s string) encoder {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return stringEncoder(s)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func appendTwoDigits(dst []byte, v int) []byte {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	return append(dst, byte(&#39;0&#39;+(v/10)%10), byte(&#39;0&#39;+v%10))
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func appendFourDigits(dst []byte, v int) []byte {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	var bytes [4]byte
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	for i := range bytes {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		bytes[3-i] = &#39;0&#39; + byte(v%10)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		v /= 10
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	return append(dst, bytes[:]...)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func outsideUTCRange(t time.Time) bool {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	year := t.Year()
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return year &lt; 1950 || year &gt;= 2050
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func makeUTCTime(t time.Time) (e encoder, err error) {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	dst := make([]byte, 0, 18)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	dst, err = appendUTCTime(dst, t)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if err != nil {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		return nil, err
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	return bytesEncoder(dst), nil
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func makeGeneralizedTime(t time.Time) (e encoder, err error) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	dst := make([]byte, 0, 20)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	dst, err = appendGeneralizedTime(dst, t)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if err != nil {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		return nil, err
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	return bytesEncoder(dst), nil
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>func appendUTCTime(dst []byte, t time.Time) (ret []byte, err error) {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	year := t.Year()
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	switch {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	case 1950 &lt;= year &amp;&amp; year &lt; 2000:
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		dst = appendTwoDigits(dst, year-1900)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	case 2000 &lt;= year &amp;&amp; year &lt; 2050:
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		dst = appendTwoDigits(dst, year-2000)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	default:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;cannot represent time as UTCTime&#34;}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	return appendTimeCommon(dst, t), nil
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func appendGeneralizedTime(dst []byte, t time.Time) (ret []byte, err error) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	year := t.Year()
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	if year &lt; 0 || year &gt; 9999 {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;cannot represent time as GeneralizedTime&#34;}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	dst = appendFourDigits(dst, year)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	return appendTimeCommon(dst, t), nil
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>func appendTimeCommon(dst []byte, t time.Time) []byte {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	_, month, day := t.Date()
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, int(month))
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, day)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	hour, min, sec := t.Clock()
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, hour)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, min)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, sec)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	_, offset := t.Zone()
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	switch {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	case offset/60 == 0:
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		return append(dst, &#39;Z&#39;)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	case offset &gt; 0:
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		dst = append(dst, &#39;+&#39;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	case offset &lt; 0:
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	offsetMinutes := offset / 60
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	if offsetMinutes &lt; 0 {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		offsetMinutes = -offsetMinutes
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, offsetMinutes/60)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	dst = appendTwoDigits(dst, offsetMinutes%60)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	return dst
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>func stripTagAndLength(in []byte) []byte {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	_, offset, err := parseTagAndLength(in, 0)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	if err != nil {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return in
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	return in[offset:]
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>func makeBody(value reflect.Value, params fieldParameters) (e encoder, err error) {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	switch value.Type() {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	case flagType:
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		return bytesEncoder(nil), nil
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	case timeType:
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		t := value.Interface().(time.Time)
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		if params.timeType == TagGeneralizedTime || outsideUTCRange(t) {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			return makeGeneralizedTime(t)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		return makeUTCTime(t)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	case bitStringType:
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		return bitStringEncoder(value.Interface().(BitString)), nil
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	case objectIdentifierType:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		return makeObjectIdentifier(value.Interface().(ObjectIdentifier))
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	case bigIntType:
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		return makeBigInt(value.Interface().(*big.Int))
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	switch v := value; v.Kind() {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		if v.Bool() {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			return byteFFEncoder, nil
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return byte00Encoder, nil
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		return int64Encoder(v.Int()), nil
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		t := v.Type()
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		for i := 0; i &lt; t.NumField(); i++ {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			if !t.Field(i).IsExported() {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>				return nil, StructuralError{&#34;struct contains unexported fields&#34;}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		startingField := 0
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		n := t.NumField()
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		if n == 0 {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			return bytesEncoder(nil), nil
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		<span class="comment">// If the first element of the structure is a non-empty</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		<span class="comment">// RawContents, then we don&#39;t bother serializing the rest.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		if t.Field(0).Type == rawContentsType {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			s := v.Field(0)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			if s.Len() &gt; 0 {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>				bytes := s.Bytes()
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>				<span class="comment">/* The RawContents will contain the tag and
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>				 * length fields but we&#39;ll also be writing
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>				 * those ourselves, so we strip them out of
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>				 * bytes */</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>				return bytesEncoder(stripTagAndLength(bytes)), nil
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			startingField = 1
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		switch n1 := n - startingField; n1 {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		case 0:
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			return bytesEncoder(nil), nil
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		case 1:
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			return makeField(v.Field(startingField), parseFieldParameters(t.Field(startingField).Tag.Get(&#34;asn1&#34;)))
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		default:
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			m := make([]encoder, n1)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			for i := 0; i &lt; n1; i++ {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>				m[i], err = makeField(v.Field(i+startingField), parseFieldParameters(t.Field(i+startingField).Tag.Get(&#34;asn1&#34;)))
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>				if err != nil {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>					return nil, err
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>				}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			return multiEncoder(m), nil
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		sliceType := v.Type()
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		if sliceType.Elem().Kind() == reflect.Uint8 {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			return bytesEncoder(v.Bytes()), nil
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		var fp fieldParameters
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		switch l := v.Len(); l {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		case 0:
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			return bytesEncoder(nil), nil
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		case 1:
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			return makeField(v.Index(0), fp)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		default:
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			m := make([]encoder, l)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			for i := 0; i &lt; l; i++ {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>				m[i], err = makeField(v.Index(i), fp)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>				if err != nil {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>					return nil, err
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>				}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			if params.set {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>				return setEncoder(m), nil
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			return multiEncoder(m), nil
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	case reflect.String:
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		switch params.stringType {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		case TagIA5String:
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			return makeIA5String(v.String())
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		case TagPrintableString:
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			return makePrintableString(v.String())
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		case TagNumericString:
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			return makeNumericString(v.String())
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		default:
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			return makeUTF8String(v.String()), nil
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	return nil, StructuralError{&#34;unknown Go type&#34;}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>func makeField(v reflect.Value, params fieldParameters) (e encoder, err error) {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	if !v.IsValid() {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;asn1: cannot marshal nil value&#34;)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// If the field is an interface{} then recurse into it.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	if v.Kind() == reflect.Interface &amp;&amp; v.Type().NumMethod() == 0 {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		return makeField(v.Elem(), params)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	if v.Kind() == reflect.Slice &amp;&amp; v.Len() == 0 &amp;&amp; params.omitEmpty {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		return bytesEncoder(nil), nil
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	if params.optional &amp;&amp; params.defaultValue != nil &amp;&amp; canHaveDefaultValue(v.Kind()) {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		defaultValue := reflect.New(v.Type()).Elem()
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		defaultValue.SetInt(*params.defaultValue)
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		if reflect.DeepEqual(v.Interface(), defaultValue.Interface()) {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			return bytesEncoder(nil), nil
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	<span class="comment">// If no default value is given then the zero value for the type is</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// assumed to be the default value. This isn&#39;t obviously the correct</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// behavior, but it&#39;s what Go has traditionally done.</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	if params.optional &amp;&amp; params.defaultValue == nil {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		if reflect.DeepEqual(v.Interface(), reflect.Zero(v.Type()).Interface()) {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>			return bytesEncoder(nil), nil
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	if v.Type() == rawValueType {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		rv := v.Interface().(RawValue)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		if len(rv.FullBytes) != 0 {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			return bytesEncoder(rv.FullBytes), nil
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		t := new(taggedEncoder)
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		t.tag = bytesEncoder(appendTagAndLength(t.scratch[:0], tagAndLength{rv.Class, rv.Tag, len(rv.Bytes), rv.IsCompound}))
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		t.body = bytesEncoder(rv.Bytes)
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		return t, nil
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	matchAny, tag, isCompound, ok := getUniversalType(v.Type())
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	if !ok || matchAny {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		return nil, StructuralError{fmt.Sprintf(&#34;unknown Go type: %v&#34;, v.Type())}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	if params.timeType != 0 &amp;&amp; tag != TagUTCTime {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;explicit time type given to non-time member&#34;}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	if params.stringType != 0 &amp;&amp; tag != TagPrintableString {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		return nil, StructuralError{&#34;explicit string type given to non-string member&#34;}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	switch tag {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	case TagPrintableString:
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		if params.stringType == 0 {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			<span class="comment">// This is a string without an explicit string type. We&#39;ll use</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			<span class="comment">// a PrintableString if the character set in the string is</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			<span class="comment">// sufficiently limited, otherwise we&#39;ll use a UTF8String.</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			for _, r := range v.String() {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>				if r &gt;= utf8.RuneSelf || !isPrintable(byte(r), rejectAsterisk, rejectAmpersand) {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>					if !utf8.ValidString(v.String()) {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>						return nil, errors.New(&#34;asn1: string not valid UTF-8&#34;)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>					}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>					tag = TagUTF8String
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>					break
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>				}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		} else {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			tag = params.stringType
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	case TagUTCTime:
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		if params.timeType == TagGeneralizedTime || outsideUTCRange(v.Interface().(time.Time)) {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			tag = TagGeneralizedTime
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	if params.set {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		if tag != TagSequence {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			return nil, StructuralError{&#34;non sequence tagged as set&#34;}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		tag = TagSet
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	<span class="comment">// makeField can be called for a slice that should be treated as a SET</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	<span class="comment">// but doesn&#39;t have params.set set, for instance when using a slice</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	<span class="comment">// with the SET type name suffix. In this case getUniversalType returns</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	<span class="comment">// TagSet, but makeBody doesn&#39;t know about that so will treat the slice</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	<span class="comment">// as a sequence. To work around this we set params.set.</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if tag == TagSet &amp;&amp; !params.set {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		params.set = true
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	t := new(taggedEncoder)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	t.body, err = makeBody(v, params)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	if err != nil {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		return nil, err
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	bodyLen := t.body.Len()
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	class := ClassUniversal
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	if params.tag != nil {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		if params.application {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			class = ClassApplication
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		} else if params.private {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			class = ClassPrivate
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		} else {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			class = ClassContextSpecific
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		if params.explicit {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			t.tag = bytesEncoder(appendTagAndLength(t.scratch[:0], tagAndLength{ClassUniversal, tag, bodyLen, isCompound}))
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			tt := new(taggedEncoder)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			tt.body = t
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			tt.tag = bytesEncoder(appendTagAndLength(tt.scratch[:0], tagAndLength{
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				class:      class,
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>				tag:        *params.tag,
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				length:     bodyLen + t.tag.Len(),
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>				isCompound: true,
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			}))
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>			return tt, nil
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		<span class="comment">// implicit tag.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		tag = *params.tag
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	t.tag = bytesEncoder(appendTagAndLength(t.scratch[:0], tagAndLength{class, tag, bodyLen, isCompound}))
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	return t, nil
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span><span class="comment">// Marshal returns the ASN.1 encoding of val.</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span><span class="comment">// In addition to the struct tags recognized by Unmarshal, the following can be</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span><span class="comment">// used:</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span><span class="comment">//	ia5:         causes strings to be marshaled as ASN.1, IA5String values</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span><span class="comment">//	omitempty:   causes empty slices to be skipped</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span><span class="comment">//	printable:   causes strings to be marshaled as ASN.1, PrintableString values</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span><span class="comment">//	utf8:        causes strings to be marshaled as ASN.1, UTF8String values</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span><span class="comment">//	utc:         causes time.Time to be marshaled as ASN.1, UTCTime values</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span><span class="comment">//	generalized: causes time.Time to be marshaled as ASN.1, GeneralizedTime values</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>func Marshal(val any) ([]byte, error) {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	return MarshalWithParams(val, &#34;&#34;)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// MarshalWithParams allows field parameters to be specified for the</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// top-level element. The form of the params is the same as the field tags.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span><span class="selection">func MarshalWithParams(val any, params string) ([]byte, error)</span> {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	e, err := makeField(reflect.ValueOf(val), parseFieldParameters(params))
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	if err != nil {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		return nil, err
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	b := make([]byte, e.Len())
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	e.Encode(b)
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	return b, nil
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>
</pre><p><a href="marshal.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
