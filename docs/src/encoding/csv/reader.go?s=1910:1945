<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/csv/reader.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./reader.go?s=1910:1945#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/csv">csv</a>/<span class="text-muted">reader.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/csv">encoding/csv</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package csv reads and writes comma-separated values (CSV) files.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// There are many kinds of CSV files; this package supports the format</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// described in RFC 4180.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// A csv file contains zero or more records of one or more fields per record.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Each record is separated by the newline character. The final record may</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// optionally be followed by a newline character.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//	field1,field2,field3</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// White space is considered part of a field.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Carriage returns before newline characters are silently removed.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Blank lines are ignored. A line with only whitespace characters (excluding</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// the ending newline character) is not considered a blank line.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Fields which start and stop with the quote character &#34; are called</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// quoted-fields. The beginning and ending quote are not part of the</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// field.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// The source:</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//	normal string,&#34;quoted-field&#34;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// results in the fields</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//	{`normal string`, `quoted-field`}</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Within a quoted-field a quote character followed by a second quote</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// character is considered a single quote.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	&#34;the &#34;&#34;word&#34;&#34; is true&#34;,&#34;a &#34;&#34;quoted-field&#34;&#34;&#34;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// results in</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//	{`the &#34;word&#34; is true`, `a &#34;quoted-field&#34;`}</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Newlines and commas may be included in a quoted-field</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	&#34;Multi-line</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//	field&#34;,&#34;comma is ,&#34;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// results in</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	{`Multi-line</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	field`, `comma is ,`}</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>package csv
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>import (
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// A ParseError is returned for parsing errors.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Line and column numbers are 1-indexed.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>type ParseError struct {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	StartLine int   <span class="comment">// Line where the record starts</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Line      int   <span class="comment">// Line where the error occurred</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	Column    int   <span class="comment">// Column (1-based byte index) where the error occurred</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	Err       error <span class="comment">// The actual error</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="selection">func (e *ParseError) Error() string</span> {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if e.Err == ErrFieldCount {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;record on line %d: %v&#34;, e.Line, e.Err)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	if e.StartLine != e.Line {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;record on line %d; parse error on line %d, column %d: %v&#34;, e.StartLine, e.Line, e.Column, e.Err)
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;parse error on line %d, column %d: %v&#34;, e.Line, e.Column, e.Err)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func (e *ParseError) Unwrap() error { return e.Err }
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// These are the errors that can be returned in [ParseError.Err].</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>var (
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	ErrBareQuote  = errors.New(&#34;bare \&#34; in non-quoted-field&#34;)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	ErrQuote      = errors.New(&#34;extraneous or missing \&#34; in quoted-field&#34;)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	ErrFieldCount = errors.New(&#34;wrong number of fields&#34;)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrTrailingComma is no longer used.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	ErrTrailingComma = errors.New(&#34;extra delimiter at end of line&#34;)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>var errInvalidDelim = errors.New(&#34;csv: invalid field or comment delimiter&#34;)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func validDelim(r rune) bool {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	return r != 0 &amp;&amp; r != &#39;&#34;&#39; &amp;&amp; r != &#39;\r&#39; &amp;&amp; r != &#39;\n&#39; &amp;&amp; utf8.ValidRune(r) &amp;&amp; r != utf8.RuneError
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// A Reader reads records from a CSV-encoded file.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// As returned by [NewReader], a Reader expects input conforming to RFC 4180.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// The exported fields can be changed to customize the details before the</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// first call to [Reader.Read] or [Reader.ReadAll].</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// The Reader converts all \r\n sequences in its input to plain \n,</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// including in multiline field values, so that the returned data does</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// not depend on which line-ending convention an input file uses.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>type Reader struct {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// Comma is the field delimiter.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// It is set to comma (&#39;,&#39;) by NewReader.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// Comma must be a valid rune and must not be \r, \n,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// or the Unicode replacement character (0xFFFD).</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	Comma rune
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Comment, if not 0, is the comment character. Lines beginning with the</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// Comment character without preceding whitespace are ignored.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// With leading whitespace the Comment character becomes part of the</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// field, even if TrimLeadingSpace is true.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// Comment must be a valid rune and must not be \r, \n,</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// or the Unicode replacement character (0xFFFD).</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// It must also not be equal to Comma.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	Comment rune
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// FieldsPerRecord is the number of expected fields per record.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// If FieldsPerRecord is positive, Read requires each record to</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// have the given number of fields. If FieldsPerRecord is 0, Read sets it to</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// the number of fields in the first record, so that future records must</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// have the same field count. If FieldsPerRecord is negative, no check is</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// made and records may have a variable number of fields.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	FieldsPerRecord int
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// If LazyQuotes is true, a quote may appear in an unquoted field and a</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// non-doubled quote may appear in a quoted field.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	LazyQuotes bool
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// If TrimLeadingSpace is true, leading white space in a field is ignored.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// This is done even if the field delimiter, Comma, is white space.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	TrimLeadingSpace bool
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// ReuseRecord controls whether calls to Read may return a slice sharing</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// the backing array of the previous call&#39;s returned slice for performance.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// By default, each call to Read returns newly allocated memory owned by the caller.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	ReuseRecord bool
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: TrailingComma is no longer used.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	TrailingComma bool
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	r *bufio.Reader
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// numLine is the current line being read in the CSV file.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	numLine int
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// offset is the input stream byte offset of the current reader position.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	offset int64
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// rawBuffer is a line buffer only used by the readLine method.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	rawBuffer []byte
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// recordBuffer holds the unescaped fields, one after another.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// The fields can be accessed by using the indexes in fieldIndexes.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// E.g., For the row `a,&#34;b&#34;,&#34;c&#34;&#34;d&#34;,e`, recordBuffer will contain `abc&#34;de`</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// and fieldIndexes will contain the indexes [1, 2, 5, 6].</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	recordBuffer []byte
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// fieldIndexes is an index of fields inside recordBuffer.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// The i&#39;th field ends at offset fieldIndexes[i] in recordBuffer.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	fieldIndexes []int
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// fieldPositions is an index of field positions for the</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// last record returned by Read.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	fieldPositions []position
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// lastRecord is a record cache and only used when ReuseRecord == true.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	lastRecord []string
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// NewReader returns a new Reader that reads from r.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func NewReader(r io.Reader) *Reader {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return &amp;Reader{
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		Comma: &#39;,&#39;,
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		r:     bufio.NewReader(r),
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// Read reads one record (a slice of fields) from r.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// If the record has an unexpected number of fields,</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// Read returns the record along with the error [ErrFieldCount].</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// If the record contains a field that cannot be parsed,</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// Read returns a partial record along with the parse error.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// The partial record contains all fields read before the error.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// If there is no data left to be read, Read returns nil, [io.EOF].</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// If [Reader.ReuseRecord] is true, the returned slice may be shared</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// between multiple calls to Read.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func (r *Reader) Read() (record []string, err error) {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	if r.ReuseRecord {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		record, err = r.readRecord(r.lastRecord)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		r.lastRecord = record
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	} else {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		record, err = r.readRecord(nil)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	return record, err
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// FieldPos returns the line and column corresponding to</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// the start of the field with the given index in the slice most recently</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// returned by [Reader.Read]. Numbering of lines and columns starts at 1;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// columns are counted in bytes, not runes.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// If this is called with an out-of-bounds index, it panics.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (r *Reader) FieldPos(field int) (line, column int) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if field &lt; 0 || field &gt;= len(r.fieldPositions) {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		panic(&#34;out of range index passed to FieldPos&#34;)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	p := &amp;r.fieldPositions[field]
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return p.line, p.col
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// InputOffset returns the input stream byte offset of the current reader</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// position. The offset gives the location of the end of the most recently</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// read row and the beginning of the next row.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (r *Reader) InputOffset() int64 {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return r.offset
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// pos holds the position of a field in the current line.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>type position struct {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	line, col int
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// ReadAll reads all the remaining records from r.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// Each record is a slice of fields.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// A successful call returns err == nil, not err == [io.EOF]. Because ReadAll is</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// defined to read until EOF, it does not treat end of file as an error to be</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// reported.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func (r *Reader) ReadAll() (records [][]string, err error) {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	for {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		record, err := r.readRecord(nil)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if err == io.EOF {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			return records, nil
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		if err != nil {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			return nil, err
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		records = append(records, record)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// readLine reads the next line (with the trailing endline).</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// If EOF is hit without a trailing endline, it will be omitted.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// If some bytes were read, then the error is never [io.EOF].</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// The result is only valid until the next call to readLine.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>func (r *Reader) readLine() ([]byte, error) {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	line, err := r.r.ReadSlice(&#39;\n&#39;)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if err == bufio.ErrBufferFull {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		r.rawBuffer = append(r.rawBuffer[:0], line...)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		for err == bufio.ErrBufferFull {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			line, err = r.r.ReadSlice(&#39;\n&#39;)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			r.rawBuffer = append(r.rawBuffer, line...)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		line = r.rawBuffer
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	readSize := len(line)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if readSize &gt; 0 &amp;&amp; err == io.EOF {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		err = nil
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		<span class="comment">// For backwards compatibility, drop trailing \r before EOF.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		if line[readSize-1] == &#39;\r&#39; {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			line = line[:readSize-1]
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	r.numLine++
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	r.offset += int64(readSize)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// Normalize \r\n to \n on all input lines.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if n := len(line); n &gt;= 2 &amp;&amp; line[n-2] == &#39;\r&#39; &amp;&amp; line[n-1] == &#39;\n&#39; {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		line[n-2] = &#39;\n&#39;
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		line = line[:n-1]
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	return line, err
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// lengthNL reports the number of bytes for the trailing \n.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func lengthNL(b []byte) int {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	if len(b) &gt; 0 &amp;&amp; b[len(b)-1] == &#39;\n&#39; {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return 1
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	return 0
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// nextRune returns the next rune in b or utf8.RuneError.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func nextRune(b []byte) rune {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	r, _ := utf8.DecodeRune(b)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	return r
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>func (r *Reader) readRecord(dst []string) ([]string, error) {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	if r.Comma == r.Comment || !validDelim(r.Comma) || (r.Comment != 0 &amp;&amp; !validDelim(r.Comment)) {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		return nil, errInvalidDelim
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// Read line (automatically skipping past empty lines and any comments).</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	var line []byte
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	var errRead error
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	for errRead == nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		line, errRead = r.readLine()
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if r.Comment != 0 &amp;&amp; nextRune(line) == r.Comment {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			line = nil
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			continue <span class="comment">// Skip comment lines</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if errRead == nil &amp;&amp; len(line) == lengthNL(line) {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			line = nil
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			continue <span class="comment">// Skip empty lines</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		break
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if errRead == io.EOF {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		return nil, errRead
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// Parse each field in the record.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	var err error
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	const quoteLen = len(`&#34;`)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	commaLen := utf8.RuneLen(r.Comma)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	recLine := r.numLine <span class="comment">// Starting line for record</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	r.recordBuffer = r.recordBuffer[:0]
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	r.fieldIndexes = r.fieldIndexes[:0]
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	r.fieldPositions = r.fieldPositions[:0]
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	pos := position{line: r.numLine, col: 1}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>parseField:
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	for {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		if r.TrimLeadingSpace {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			i := bytes.IndexFunc(line, func(r rune) bool {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				return !unicode.IsSpace(r)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			})
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			if i &lt; 0 {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				i = len(line)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>				pos.col -= lengthNL(line)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			line = line[i:]
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			pos.col += i
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		if len(line) == 0 || line[0] != &#39;&#34;&#39; {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			<span class="comment">// Non-quoted string field</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			i := bytes.IndexRune(line, r.Comma)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			field := line
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			if i &gt;= 0 {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				field = field[:i]
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			} else {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>				field = field[:len(field)-lengthNL(field)]
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			<span class="comment">// Check to make sure a quote does not appear in field.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			if !r.LazyQuotes {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				if j := bytes.IndexByte(field, &#39;&#34;&#39;); j &gt;= 0 {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>					col := pos.col + j
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>					err = &amp;ParseError{StartLine: recLine, Line: r.numLine, Column: col, Err: ErrBareQuote}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>					break parseField
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>				}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			r.recordBuffer = append(r.recordBuffer, field...)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			r.fieldIndexes = append(r.fieldIndexes, len(r.recordBuffer))
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			r.fieldPositions = append(r.fieldPositions, pos)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			if i &gt;= 0 {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>				line = line[i+commaLen:]
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>				pos.col += i + commaLen
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				continue parseField
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			break parseField
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		} else {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			<span class="comment">// Quoted string field</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			fieldPos := pos
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			line = line[quoteLen:]
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			pos.col += quoteLen
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			for {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				i := bytes.IndexByte(line, &#39;&#34;&#39;)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>				if i &gt;= 0 {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>					<span class="comment">// Hit next quote.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>					r.recordBuffer = append(r.recordBuffer, line[:i]...)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>					line = line[i+quoteLen:]
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>					pos.col += i + quoteLen
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>					switch rn := nextRune(line); {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>					case rn == &#39;&#34;&#39;:
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>						<span class="comment">// `&#34;&#34;` sequence (append quote).</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>						r.recordBuffer = append(r.recordBuffer, &#39;&#34;&#39;)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>						line = line[quoteLen:]
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>						pos.col += quoteLen
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>					case rn == r.Comma:
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>						<span class="comment">// `&#34;,` sequence (end of field).</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>						line = line[commaLen:]
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>						pos.col += commaLen
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>						r.fieldIndexes = append(r.fieldIndexes, len(r.recordBuffer))
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>						r.fieldPositions = append(r.fieldPositions, fieldPos)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>						continue parseField
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>					case lengthNL(line) == len(line):
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>						<span class="comment">// `&#34;\n` sequence (end of line).</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>						r.fieldIndexes = append(r.fieldIndexes, len(r.recordBuffer))
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>						r.fieldPositions = append(r.fieldPositions, fieldPos)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>						break parseField
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>					case r.LazyQuotes:
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>						<span class="comment">// `&#34;` sequence (bare quote).</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>						r.recordBuffer = append(r.recordBuffer, &#39;&#34;&#39;)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>					default:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>						<span class="comment">// `&#34;*` sequence (invalid non-escaped quote).</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>						err = &amp;ParseError{StartLine: recLine, Line: r.numLine, Column: pos.col - quoteLen, Err: ErrQuote}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>						break parseField
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>					}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				} else if len(line) &gt; 0 {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>					<span class="comment">// Hit end of line (copy all data so far).</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>					r.recordBuffer = append(r.recordBuffer, line...)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					if errRead != nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>						break parseField
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>					}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>					pos.col += len(line)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>					line, errRead = r.readLine()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>					if len(line) &gt; 0 {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>						pos.line++
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>						pos.col = 1
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>					}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>					if errRead == io.EOF {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>						errRead = nil
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>					}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				} else {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>					<span class="comment">// Abrupt end of file (EOF or error).</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>					if !r.LazyQuotes &amp;&amp; errRead == nil {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>						err = &amp;ParseError{StartLine: recLine, Line: pos.line, Column: pos.col, Err: ErrQuote}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>						break parseField
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>					}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>					r.fieldIndexes = append(r.fieldIndexes, len(r.recordBuffer))
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>					r.fieldPositions = append(r.fieldPositions, fieldPos)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>					break parseField
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>				}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	if err == nil {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		err = errRead
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// Create a single string and create slices out of it.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">// This pins the memory of the fields together, but allocates once.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	str := string(r.recordBuffer) <span class="comment">// Convert to string once to batch allocations</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	dst = dst[:0]
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	if cap(dst) &lt; len(r.fieldIndexes) {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		dst = make([]string, len(r.fieldIndexes))
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	dst = dst[:len(r.fieldIndexes)]
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	var preIdx int
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	for i, idx := range r.fieldIndexes {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		dst[i] = str[preIdx:idx]
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		preIdx = idx
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// Check or update the expected fields per record.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	if r.FieldsPerRecord &gt; 0 {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		if len(dst) != r.FieldsPerRecord &amp;&amp; err == nil {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			err = &amp;ParseError{
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				StartLine: recLine,
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				Line:      recLine,
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>				Column:    1,
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>				Err:       ErrFieldCount,
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	} else if r.FieldsPerRecord == 0 {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		r.FieldsPerRecord = len(dst)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	return dst, err
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
</pre><p><a href="reader.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
