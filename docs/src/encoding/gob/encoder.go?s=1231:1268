<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/gob/encoder.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./encoder.go?s=1231:1268#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/gob">gob</a>/<span class="text-muted">encoder.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/gob">encoding/gob</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package gob
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// An Encoder manages the transmission of type and data information to the</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// other side of a connection.  It is safe for concurrent use by multiple</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// goroutines.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type Encoder struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	mutex      sync.Mutex              <span class="comment">// each item must be sent atomically</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	w          []io.Writer             <span class="comment">// where to send the data</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	sent       map[reflect.Type]typeId <span class="comment">// which types we&#39;ve already sent</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	countState *encoderState           <span class="comment">// stage for writing counts</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	freeList   *encoderState           <span class="comment">// list of free encoderStates; avoids reallocation</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	byteBuf    encBuffer               <span class="comment">// buffer for top-level encoderState</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	err        error
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Before we encode a message, we reserve space at the head of the</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// buffer in which to encode its length. This means we can use the</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// buffer to assemble the message without another allocation.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>const maxLength = 9 <span class="comment">// Maximum size of an encoded length.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>var spaceForLength = make([]byte, maxLength)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// NewEncoder returns a new encoder that will transmit on the [io.Writer].</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="selection">func NewEncoder(w io.Writer) *Encoder</span> {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	enc := new(Encoder)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	enc.w = []io.Writer{w}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	enc.sent = make(map[reflect.Type]typeId)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	enc.countState = enc.newEncoderState(new(encBuffer))
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	return enc
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// writer returns the innermost writer the encoder is using.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (enc *Encoder) writer() io.Writer {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return enc.w[len(enc.w)-1]
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// pushWriter adds a writer to the encoder.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (enc *Encoder) pushWriter(w io.Writer) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	enc.w = append(enc.w, w)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// popWriter pops the innermost writer.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (enc *Encoder) popWriter() {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	enc.w = enc.w[0 : len(enc.w)-1]
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func (enc *Encoder) setError(err error) {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	if enc.err == nil { <span class="comment">// remember the first.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		enc.err = err
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// writeMessage sends the data item preceded by an unsigned count of its length.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func (enc *Encoder) writeMessage(w io.Writer, b *encBuffer) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// Space has been reserved for the length at the head of the message.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// This is a little dirty: we grab the slice from the bytes.Buffer and massage</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// it by hand.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	message := b.Bytes()
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	messageLen := len(message) - maxLength
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// Length cannot be bigger than the decoder can handle.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	if messageLen &gt;= tooBig {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		enc.setError(errors.New(&#34;gob: encoder: message too big&#34;))
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		return
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// Encode the length.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	enc.countState.b.Reset()
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	enc.countState.encodeUint(uint64(messageLen))
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// Copy the length to be a prefix of the message.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	offset := maxLength - enc.countState.b.Len()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	copy(message[offset:], enc.countState.b.Bytes())
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// Write the data.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	_, err := w.Write(message[offset:])
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// Drain the buffer and restore the space at the front for the count of the next message.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	b.Reset()
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	b.Write(spaceForLength)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if err != nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		enc.setError(err)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// sendActualType sends the requested type, without further investigation, unless</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// it&#39;s been sent before.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func (enc *Encoder) sendActualType(w io.Writer, state *encoderState, ut *userTypeInfo, actual reflect.Type) (sent bool) {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	if _, alreadySent := enc.sent[actual]; alreadySent {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		return false
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	info, err := getTypeInfo(ut)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if err != nil {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		enc.setError(err)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		return
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Send the pair (-id, type)</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// Id:</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	state.encodeInt(-int64(info.id))
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// Type:</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	enc.encode(state.b, reflect.ValueOf(info.wire), wireTypeUserInfo)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	enc.writeMessage(w, state.b)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	if enc.err != nil {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		return
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Remember we&#39;ve sent this type, both what the user gave us and the base type.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	enc.sent[ut.base] = info.id
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	if ut.user != ut.base {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		enc.sent[ut.user] = info.id
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Now send the inner types</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	switch st := actual; st.Kind() {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		for i := 0; i &lt; st.NumField(); i++ {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			if isExported(st.Field(i).Name) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				enc.sendType(w, state, st.Field(i).Type)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	case reflect.Array, reflect.Slice:
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		enc.sendType(w, state, st.Elem())
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		enc.sendType(w, state, st.Key())
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		enc.sendType(w, state, st.Elem())
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return true
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// sendType sends the type info to the other side, if necessary.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (enc *Encoder) sendType(w io.Writer, state *encoderState, origt reflect.Type) (sent bool) {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	ut := userType(origt)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if ut.externalEnc != 0 {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		<span class="comment">// The rules are different: regardless of the underlying type&#39;s representation,</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		<span class="comment">// we need to tell the other side that the base type is a GobEncoder.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		return enc.sendActualType(w, state, ut, ut.base)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s a concrete value, so drill down to the base type.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	switch rt := ut.base; rt.Kind() {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	default:
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// Basic types and interfaces do not need to be described.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		return
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		<span class="comment">// If it&#39;s []uint8, don&#39;t send; it&#39;s considered basic.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		if rt.Elem().Kind() == reflect.Uint8 {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			return
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		<span class="comment">// Otherwise we do send.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		break
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	case reflect.Array:
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		<span class="comment">// arrays must be sent so we know their lengths and element types.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		break
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		<span class="comment">// maps must be sent so we know their lengths and key/value types.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		break
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		<span class="comment">// structs must be sent so we know their fields.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		break
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func:
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		<span class="comment">// If we get here, it&#39;s a field of a struct; ignore it.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return enc.sendActualType(w, state, ut, ut.base)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// Encode transmits the data item represented by the empty interface value,</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// guaranteeing that all necessary type information has been transmitted first.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// Passing a nil pointer to Encoder will panic, as they cannot be transmitted by gob.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func (enc *Encoder) Encode(e any) error {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	return enc.EncodeValue(reflect.ValueOf(e))
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// sendTypeDescriptor makes sure the remote side knows about this type.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// It will send a descriptor if this is the first time the type has been</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// sent.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>func (enc *Encoder) sendTypeDescriptor(w io.Writer, state *encoderState, ut *userTypeInfo) {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// Make sure the type is known to the other side.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// First, have we already sent this type?</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	rt := ut.base
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if ut.externalEnc != 0 {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		rt = ut.user
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if _, alreadySent := enc.sent[rt]; !alreadySent {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// No, so send it.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		sent := enc.sendType(w, state, rt)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if enc.err != nil {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			return
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		<span class="comment">// If the type info has still not been transmitted, it means we have</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		<span class="comment">// a singleton basic type (int, []byte etc.) at top level. We don&#39;t</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">// need to send the type info but we do need to update enc.sent.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		if !sent {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			info, err := getTypeInfo(ut)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			if err != nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>				enc.setError(err)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				return
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			enc.sent[rt] = info.id
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// sendTypeId sends the id, which must have already been defined.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (enc *Encoder) sendTypeId(state *encoderState, ut *userTypeInfo) {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// Identify the type of this top-level value.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	state.encodeInt(int64(enc.sent[ut.base]))
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// EncodeValue transmits the data item represented by the reflection value,</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// guaranteeing that all necessary type information has been transmitted first.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// Passing a nil pointer to EncodeValue will panic, as they cannot be transmitted by gob.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (enc *Encoder) EncodeValue(value reflect.Value) error {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if value.Kind() == reflect.Invalid {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return errors.New(&#34;gob: cannot encode nil value&#34;)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if value.Kind() == reflect.Pointer &amp;&amp; value.IsNil() {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		panic(&#34;gob: cannot encode nil pointer of type &#34; + value.Type().String())
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// Make sure we&#39;re single-threaded through here, so multiple</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// goroutines can share an encoder.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	enc.mutex.Lock()
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	defer enc.mutex.Unlock()
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// Remove any nested writers remaining due to previous errors.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	enc.w = enc.w[0:1]
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	ut, err := validUserType(value.Type())
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if err != nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return err
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	enc.err = nil
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	enc.byteBuf.Reset()
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	enc.byteBuf.Write(spaceForLength)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	state := enc.newEncoderState(&amp;enc.byteBuf)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	enc.sendTypeDescriptor(enc.writer(), state, ut)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	enc.sendTypeId(state, ut)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if enc.err != nil {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		return enc.err
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// Encode the object.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	enc.encode(state.b, value, ut)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if enc.err == nil {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		enc.writeMessage(enc.writer(), state.b)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	enc.freeEncoderState(state)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	return enc.err
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
</pre><p><a href="encoder.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
