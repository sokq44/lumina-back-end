<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/gob/type.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./type.go?s=26213:26237#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/gob">gob</a>/<span class="text-muted">type.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/gob">encoding/gob</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package gob
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;encoding&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// userTypeInfo stores the information associated with a type the user has handed</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// to the package. It&#39;s computed once and stored in a map keyed by reflection</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// type.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>type userTypeInfo struct {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	user        reflect.Type <span class="comment">// the type the user handed us</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	base        reflect.Type <span class="comment">// the base type after all indirections</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	indir       int          <span class="comment">// number of indirections to reach the base type</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	externalEnc int          <span class="comment">// xGob, xBinary, or xText</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	externalDec int          <span class="comment">// xGob, xBinary, or xText</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	encIndir    int8         <span class="comment">// number of indirections to reach the receiver type; may be negative</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	decIndir    int8         <span class="comment">// number of indirections to reach the receiver type; may be negative</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// externalEncoding bits</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>const (
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	xGob    = 1 + iota <span class="comment">// GobEncoder or GobDecoder</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	xBinary            <span class="comment">// encoding.BinaryMarshaler or encoding.BinaryUnmarshaler</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	xText              <span class="comment">// encoding.TextMarshaler or encoding.TextUnmarshaler</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>var userTypeCache sync.Map <span class="comment">// map[reflect.Type]*userTypeInfo</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// validUserType returns, and saves, the information associated with user-provided type rt.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// If the user type is not valid, err will be non-nil. To be used when the error handler</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// is not set up.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func validUserType(rt reflect.Type) (*userTypeInfo, error) {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	if ui, ok := userTypeCache.Load(rt); ok {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		return ui.(*userTypeInfo), nil
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// Construct a new userTypeInfo and atomically add it to the userTypeCache.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// If we lose the race, we&#39;ll waste a little CPU and create a little garbage</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// but return the existing value anyway.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	ut := new(userTypeInfo)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	ut.base = rt
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	ut.user = rt
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// A type that is just a cycle of pointers (such as type T *T) cannot</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// be represented in gobs, which need some concrete data. We use a</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// cycle detection algorithm from Knuth, Vol 2, Section 3.1, Ex 6,</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// pp 539-540.  As we step through indirections, run another type at</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// half speed. If they meet up, there&#39;s a cycle.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	slowpoke := ut.base <span class="comment">// walks half as fast as ut.base</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	for {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		pt := ut.base
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		if pt.Kind() != reflect.Pointer {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			break
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		ut.base = pt.Elem()
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		if ut.base == slowpoke { <span class="comment">// ut.base lapped slowpoke</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			<span class="comment">// recursive pointer type.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			return nil, errors.New(&#34;can&#39;t represent recursive pointer type &#34; + ut.base.String())
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		if ut.indir%2 == 0 {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			slowpoke = slowpoke.Elem()
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		ut.indir++
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if ok, indir := implementsInterface(ut.user, gobEncoderInterfaceType); ok {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		ut.externalEnc, ut.encIndir = xGob, indir
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	} else if ok, indir := implementsInterface(ut.user, binaryMarshalerInterfaceType); ok {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		ut.externalEnc, ut.encIndir = xBinary, indir
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// NOTE(rsc): Would like to allow MarshalText here, but results in incompatibility</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// with older encodings for net.IP. See golang.org/issue/6760.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// } else if ok, indir := implementsInterface(ut.user, textMarshalerInterfaceType); ok {</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// 	ut.externalEnc, ut.encIndir = xText, indir</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// }</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if ok, indir := implementsInterface(ut.user, gobDecoderInterfaceType); ok {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		ut.externalDec, ut.decIndir = xGob, indir
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	} else if ok, indir := implementsInterface(ut.user, binaryUnmarshalerInterfaceType); ok {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		ut.externalDec, ut.decIndir = xBinary, indir
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// See note above.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// } else if ok, indir := implementsInterface(ut.user, textUnmarshalerInterfaceType); ok {</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// 	ut.externalDec, ut.decIndir = xText, indir</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// }</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	ui, _ := userTypeCache.LoadOrStore(rt, ut)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return ui.(*userTypeInfo), nil
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>var (
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	gobEncoderInterfaceType        = reflect.TypeFor[GobEncoder]()
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	gobDecoderInterfaceType        = reflect.TypeFor[GobDecoder]()
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	binaryMarshalerInterfaceType   = reflect.TypeFor[encoding.BinaryMarshaler]()
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	binaryUnmarshalerInterfaceType = reflect.TypeFor[encoding.BinaryUnmarshaler]()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	textMarshalerInterfaceType     = reflect.TypeFor[encoding.TextMarshaler]()
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	textUnmarshalerInterfaceType   = reflect.TypeFor[encoding.TextUnmarshaler]()
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	wireTypeType = reflect.TypeFor[wireType]()
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// implementsInterface reports whether the type implements the</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// gobEncoder/gobDecoder interface.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// It also returns the number of indirections required to get to the</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// implementation.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func implementsInterface(typ, gobEncDecType reflect.Type) (success bool, indir int8) {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	if typ == nil {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		return
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	rt := typ
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// The type might be a pointer and we need to keep</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// dereferencing to the base type until we find an implementation.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	for {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if rt.Implements(gobEncDecType) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			return true, indir
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if p := rt; p.Kind() == reflect.Pointer {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			indir++
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			if indir &gt; 100 { <span class="comment">// insane number of indirections</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>				return false, 0
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			rt = p.Elem()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			continue
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		break
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// No luck yet, but if this is a base type (non-pointer), the pointer might satisfy.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if typ.Kind() != reflect.Pointer {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		<span class="comment">// Not a pointer, but does the pointer work?</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		if reflect.PointerTo(typ).Implements(gobEncDecType) {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			return true, -1
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return false, 0
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// userType returns, and saves, the information associated with user-provided type rt.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// If the user type is not valid, it calls error.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func userType(rt reflect.Type) *userTypeInfo {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	ut, err := validUserType(rt)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		error_(err)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	return ut
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// A typeId represents a gob Type as an integer that can be passed on the wire.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// Internally, typeIds are used as keys to a map to recover the underlying type info.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>type typeId int32
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>var typeLock sync.Mutex <span class="comment">// set while building a type</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>const firstUserId = 64  <span class="comment">// lowest id number granted to user</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>type gobType interface {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	id() typeId
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	setId(id typeId)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	name() string
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	string() string <span class="comment">// not public; only for debugging</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	safeString(seen map[typeId]bool) string
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>var (
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	types                = make(map[reflect.Type]gobType, 32)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	idToTypeSlice        = make([]gobType, 1, firstUserId)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	builtinIdToTypeSlice [firstUserId]gobType <span class="comment">// set in init() after builtins are established</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>func idToType(id typeId) gobType {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	if id &lt; 0 || int(id) &gt;= len(idToTypeSlice) {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		return nil
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	return idToTypeSlice[id]
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func builtinIdToType(id typeId) gobType {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if id &lt; 0 || int(id) &gt;= len(builtinIdToTypeSlice) {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		return nil
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return builtinIdToTypeSlice[id]
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func setTypeId(typ gobType) {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// When building recursive types, someone may get there before us.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if typ.id() != 0 {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	nextId := typeId(len(idToTypeSlice))
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	typ.setId(nextId)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	idToTypeSlice = append(idToTypeSlice, typ)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (t typeId) gobType() gobType {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	if t == 0 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		return nil
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	return idToType(t)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// string returns the string representation of the type associated with the typeId.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>func (t typeId) string() string {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	if t.gobType() == nil {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return t.gobType().string()
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// Name returns the name of the type associated with the typeId.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>func (t typeId) name() string {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if t.gobType() == nil {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	return t.gobType().name()
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// CommonType holds elements of all types.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// It is a historical artifact, kept for binary compatibility and exported</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// only for the benefit of the package&#39;s encoding of type descriptors. It is</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// not intended for direct use by clients.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>type CommonType struct {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	Name string
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	Id   typeId
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func (t *CommonType) id() typeId { return t.Id }
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>func (t *CommonType) setId(id typeId) { t.Id = id }
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (t *CommonType) string() string { return t.Name }
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (t *CommonType) safeString(seen map[typeId]bool) string {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return t.Name
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func (t *CommonType) name() string { return t.Name }
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// Create and check predefined types</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// The string for tBytes is &#34;bytes&#34; not &#34;[]byte&#34; to signify its specialness.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>var (
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Primordial types, needed during initialization.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// Always passed as pointers so the interface{} type</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// goes through without losing its interfaceness.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	tBool      = bootstrapType(&#34;bool&#34;, (*bool)(nil))
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	tInt       = bootstrapType(&#34;int&#34;, (*int)(nil))
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	tUint      = bootstrapType(&#34;uint&#34;, (*uint)(nil))
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	tFloat     = bootstrapType(&#34;float&#34;, (*float64)(nil))
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	tBytes     = bootstrapType(&#34;bytes&#34;, (*[]byte)(nil))
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	tString    = bootstrapType(&#34;string&#34;, (*string)(nil))
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	tComplex   = bootstrapType(&#34;complex&#34;, (*complex128)(nil))
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	tInterface = bootstrapType(&#34;interface&#34;, (*any)(nil))
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">// Reserve some Ids for compatible expansion</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	tReserved7 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r7 int })(nil))
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	tReserved6 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r6 int })(nil))
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	tReserved5 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r5 int })(nil))
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	tReserved4 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r4 int })(nil))
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	tReserved3 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r3 int })(nil))
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	tReserved2 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r2 int })(nil))
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	tReserved1 = bootstrapType(&#34;_reserved1&#34;, (*struct{ r1 int })(nil))
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// Predefined because it&#39;s needed by the Decoder</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>var tWireType = mustGetTypeInfo(wireTypeType).id
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>var wireTypeUserInfo *userTypeInfo <span class="comment">// userTypeInfo of wireType</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func init() {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// Some magic numbers to make sure there are no surprises.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	checkId(16, tWireType)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	checkId(17, mustGetTypeInfo(reflect.TypeFor[arrayType]()).id)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	checkId(18, mustGetTypeInfo(reflect.TypeFor[CommonType]()).id)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	checkId(19, mustGetTypeInfo(reflect.TypeFor[sliceType]()).id)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	checkId(20, mustGetTypeInfo(reflect.TypeFor[structType]()).id)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	checkId(21, mustGetTypeInfo(reflect.TypeFor[fieldType]()).id)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	checkId(23, mustGetTypeInfo(reflect.TypeFor[mapType]()).id)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	copy(builtinIdToTypeSlice[:], idToTypeSlice)
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// Move the id space upwards to allow for growth in the predefined world</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// without breaking existing files.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if nextId := len(idToTypeSlice); nextId &gt; firstUserId {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		panic(fmt.Sprintln(&#34;nextId too large:&#34;, nextId))
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	idToTypeSlice = idToTypeSlice[:firstUserId]
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	registerBasics()
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	wireTypeUserInfo = userType(wireTypeType)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Array type</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>type arrayType struct {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	CommonType
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	Elem typeId
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	Len  int
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>func newArrayType(name string) *arrayType {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	a := &amp;arrayType{CommonType{Name: name}, 0, 0}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return a
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func (a *arrayType) init(elem gobType, len int) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// Set our type id before evaluating the element&#39;s, in case it&#39;s our own.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	setTypeId(a)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	a.Elem = elem.id()
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	a.Len = len
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func (a *arrayType) safeString(seen map[typeId]bool) string {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if seen[a.Id] {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		return a.Name
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	seen[a.Id] = true
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;[%d]%s&#34;, a.Len, a.Elem.gobType().safeString(seen))
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>func (a *arrayType) string() string { return a.safeString(make(map[typeId]bool)) }
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// GobEncoder type (something that implements the GobEncoder interface)</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>type gobEncoderType struct {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	CommonType
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func newGobEncoderType(name string) *gobEncoderType {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	g := &amp;gobEncoderType{CommonType{Name: name}}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	setTypeId(g)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return g
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>func (g *gobEncoderType) safeString(seen map[typeId]bool) string {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	return g.Name
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>func (g *gobEncoderType) string() string { return g.Name }
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// Map type</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>type mapType struct {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	CommonType
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	Key  typeId
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	Elem typeId
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>func newMapType(name string) *mapType {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	m := &amp;mapType{CommonType{Name: name}, 0, 0}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	return m
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (m *mapType) init(key, elem gobType) {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// Set our type id before evaluating the element&#39;s, in case it&#39;s our own.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	setTypeId(m)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	m.Key = key.id()
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	m.Elem = elem.id()
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func (m *mapType) safeString(seen map[typeId]bool) string {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if seen[m.Id] {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		return m.Name
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	seen[m.Id] = true
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	key := m.Key.gobType().safeString(seen)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	elem := m.Elem.gobType().safeString(seen)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;map[%s]%s&#34;, key, elem)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func (m *mapType) string() string { return m.safeString(make(map[typeId]bool)) }
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// Slice type</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>type sliceType struct {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	CommonType
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	Elem typeId
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>func newSliceType(name string) *sliceType {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	s := &amp;sliceType{CommonType{Name: name}, 0}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	return s
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func (s *sliceType) init(elem gobType) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// Set our type id before evaluating the element&#39;s, in case it&#39;s our own.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	setTypeId(s)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	<span class="comment">// See the comments about ids in newTypeObject. Only slices and</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	<span class="comment">// structs have mutual recursion.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	if elem.id() == 0 {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		setTypeId(elem)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	s.Elem = elem.id()
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (s *sliceType) safeString(seen map[typeId]bool) string {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	if seen[s.Id] {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return s.Name
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	seen[s.Id] = true
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;[]%s&#34;, s.Elem.gobType().safeString(seen))
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func (s *sliceType) string() string { return s.safeString(make(map[typeId]bool)) }
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// Struct type</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>type fieldType struct {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	Name string
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	Id   typeId
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>type structType struct {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	CommonType
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	Field []fieldType
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>func (s *structType) safeString(seen map[typeId]bool) string {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	if s == nil {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	if _, ok := seen[s.Id]; ok {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		return s.Name
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	seen[s.Id] = true
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	str := s.Name + &#34; = struct { &#34;
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	for _, f := range s.Field {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		str += fmt.Sprintf(&#34;%s %s; &#34;, f.Name, f.Id.gobType().safeString(seen))
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	str += &#34;}&#34;
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	return str
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>func (s *structType) string() string { return s.safeString(make(map[typeId]bool)) }
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>func newStructType(name string) *structType {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	s := &amp;structType{CommonType{Name: name}, nil}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// For historical reasons we set the id here rather than init.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// See the comment in newTypeObject for details.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	setTypeId(s)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	return s
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// newTypeObject allocates a gobType for the reflection type rt.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// Unless ut represents a GobEncoder, rt should be the base type</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// of ut.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// This is only called from the encoding side. The decoding side</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// works through typeIds and userTypeInfos alone.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>func newTypeObject(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error) {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	<span class="comment">// Does this type implement GobEncoder?</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if ut.externalEnc != 0 {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		return newGobEncoderType(name), nil
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	var err error
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	var type0, type1 gobType
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	defer func() {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		if err != nil {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			delete(types, rt)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	}()
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	<span class="comment">// Install the top-level type before the subtypes (e.g. struct before</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">// fields) so recursive types can be constructed safely.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	switch t := rt; t.Kind() {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// All basic types are easy: they are predefined.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		return tBool.gobType(), nil
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		return tInt.gobType(), nil
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		return tUint.gobType(), nil
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		return tFloat.gobType(), nil
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	case reflect.Complex64, reflect.Complex128:
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		return tComplex.gobType(), nil
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	case reflect.String:
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return tString.gobType(), nil
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		return tInterface.gobType(), nil
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	case reflect.Array:
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		at := newArrayType(name)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		types[rt] = at
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		type0, err = getBaseType(&#34;&#34;, t.Elem())
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		if err != nil {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			return nil, err
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		<span class="comment">// Historical aside:</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		<span class="comment">// For arrays, maps, and slices, we set the type id after the elements</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		<span class="comment">// are constructed. This is to retain the order of type id allocation after</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		<span class="comment">// a fix made to handle recursive types, which changed the order in</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		<span class="comment">// which types are built. Delaying the setting in this way preserves</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		<span class="comment">// type ids while allowing recursive types to be described. Structs,</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		<span class="comment">// done below, were already handling recursion correctly so they</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		<span class="comment">// assign the top-level id before those of the field.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		at.init(type0, t.Len())
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		return at, nil
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		mt := newMapType(name)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		types[rt] = mt
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		type0, err = getBaseType(&#34;&#34;, t.Key())
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		if err != nil {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			return nil, err
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		type1, err = getBaseType(&#34;&#34;, t.Elem())
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		if err != nil {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			return nil, err
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		mt.init(type0, type1)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		return mt, nil
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		<span class="comment">// []byte == []uint8 is a special case</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		if t.Elem().Kind() == reflect.Uint8 {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			return tBytes.gobType(), nil
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		st := newSliceType(name)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		types[rt] = st
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		type0, err = getBaseType(t.Elem().Name(), t.Elem())
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		if err != nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			return nil, err
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		st.init(type0)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		return st, nil
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		st := newStructType(name)
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		types[rt] = st
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		idToTypeSlice[st.id()] = st
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		for i := 0; i &lt; t.NumField(); i++ {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			f := t.Field(i)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			if !isSent(t, &amp;f) {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>				continue
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			typ := userType(f.Type).base
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			tname := typ.Name()
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			if tname == &#34;&#34; {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				t := userType(f.Type).base
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>				tname = t.String()
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			gt, err := getBaseType(tname, f.Type)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			if err != nil {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>				return nil, err
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			<span class="comment">// Some mutually recursive types can cause us to be here while</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			<span class="comment">// still defining the element. Fix the element type id here.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			<span class="comment">// We could do this more neatly by setting the id at the start of</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			<span class="comment">// building every type, but that would break binary compatibility.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			if gt.id() == 0 {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>				setTypeId(gt)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			st.Field = append(st.Field, fieldType{f.Name, gt.id()})
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		return st, nil
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	default:
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		return nil, errors.New(&#34;gob NewTypeObject can&#39;t handle type: &#34; + rt.String())
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">// isExported reports whether this is an exported - upper case - name.</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func isExported(name string) bool {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	rune, _ := utf8.DecodeRuneInString(name)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	return unicode.IsUpper(rune)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// isSent reports whether this struct field is to be transmitted.</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// It will be transmitted only if it is exported and not a chan or func field</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// or pointer to chan or func.</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>func isSent(struct_ reflect.Type, field *reflect.StructField) bool {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	if !isExported(field.Name) {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		return false
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// If the field is a chan or func or pointer thereto, don&#39;t send it.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	<span class="comment">// That is, treat it like an unexported field.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	typ := field.Type
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	for typ.Kind() == reflect.Pointer {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		typ = typ.Elem()
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if typ.Kind() == reflect.Chan || typ.Kind() == reflect.Func {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		return false
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	<span class="comment">// Special case for Go 1.22: the x509.Certificate.Policies</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	<span class="comment">// field is unencodable but also unused by default.</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// Ignore it, so that x509.Certificate continues to be encodeable.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">// Go 1.23 will add the right methods so that gob can</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// handle the Policies field, and then we can remove this check.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// See go.dev/issue/65633.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if field.Name == &#34;Policies&#34; &amp;&amp; struct_.PkgPath() == &#34;crypto/x509&#34; &amp;&amp; struct_.Name() == &#34;Certificate&#34; {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		return false
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	return true
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">// getBaseType returns the Gob type describing the given reflect.Type&#39;s base type.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span><span class="comment">// typeLock must be held.</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>func getBaseType(name string, rt reflect.Type) (gobType, error) {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	ut := userType(rt)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	return getType(name, ut, ut.base)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// getType returns the Gob type describing the given reflect.Type.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// Should be called only when handling GobEncoders/Decoders,</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// which may be pointers. All other types are handled through the</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// base type, never a pointer.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// typeLock must be held.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>func getType(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error) {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	typ, present := types[rt]
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	if present {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		return typ, nil
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	typ, err := newTypeObject(name, ut, rt)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	if err == nil {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		types[rt] = typ
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	return typ, err
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>func checkId(want, got typeId) {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	if want != got {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		fmt.Fprintf(os.Stderr, &#34;checkId: %d should be %d\n&#34;, int(got), int(want))
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		panic(&#34;bootstrap type wrong id: &#34; + got.name() + &#34; &#34; + got.string() + &#34; not &#34; + want.string())
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span><span class="comment">// used for building the basic types; called only from init().  the incoming</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// interface always refers to a pointer.</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>func bootstrapType(name string, e any) typeId {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	rt := reflect.TypeOf(e).Elem()
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	_, present := types[rt]
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	if present {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		panic(&#34;bootstrap type already present: &#34; + name + &#34;, &#34; + rt.String())
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	typ := &amp;CommonType{Name: name}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	types[rt] = typ
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	setTypeId(typ)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	return typ.id()
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// Representation of the information we send and receive about this type.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// Each value we send is preceded by its type definition: an encoded int.</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// However, the very first time we send the value, we first send the pair</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// (-id, wireType).</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// For bootstrapping purposes, we assume that the recipient knows how</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">// to decode a wireType; it is exactly the wireType struct here, interpreted</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// using the gob rules for sending a structure, except that we assume the</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// ids for wireType and structType etc. are known. The relevant pieces</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// are built in encode.go&#39;s init() function.</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// To maintain binary compatibility, if you extend this type, always put</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">// the new fields last.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>type wireType struct {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	ArrayT           *arrayType
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	SliceT           *sliceType
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	StructT          *structType
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	MapT             *mapType
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	GobEncoderT      *gobEncoderType
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	BinaryMarshalerT *gobEncoderType
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	TextMarshalerT   *gobEncoderType
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>func (w *wireType) string() string {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	const unknown = &#34;unknown type&#34;
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	if w == nil {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		return unknown
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	switch {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	case w.ArrayT != nil:
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		return w.ArrayT.Name
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	case w.SliceT != nil:
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		return w.SliceT.Name
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	case w.StructT != nil:
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		return w.StructT.Name
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	case w.MapT != nil:
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		return w.MapT.Name
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	case w.GobEncoderT != nil:
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		return w.GobEncoderT.Name
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	case w.BinaryMarshalerT != nil:
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		return w.BinaryMarshalerT.Name
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	case w.TextMarshalerT != nil:
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		return w.TextMarshalerT.Name
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	return unknown
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>type typeInfo struct {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	id      typeId
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	encInit sync.Mutex <span class="comment">// protects creation of encoder</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	encoder atomic.Pointer[encEngine]
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	wire    wireType
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">// typeInfoMap is an atomic pointer to map[reflect.Type]*typeInfo.</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// It&#39;s updated copy-on-write. Readers just do an atomic load</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// to get the current version of the map. Writers make a full copy of</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// the map and atomically update the pointer to point to the new map.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// Under heavy read contention, this is significantly faster than a map</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// protected by a mutex.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>var typeInfoMap atomic.Value
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// typeInfoMapInit is used instead of typeInfoMap during init time,</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">// as types are registered sequentially during init and we can save</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// the overhead of making map copies.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">// It is saved to typeInfoMap and set to nil before init finishes.</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>var typeInfoMapInit = make(map[reflect.Type]*typeInfo, 16)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>func lookupTypeInfo(rt reflect.Type) *typeInfo {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	if m := typeInfoMapInit; m != nil {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		return m[rt]
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	m, _ := typeInfoMap.Load().(map[reflect.Type]*typeInfo)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	return m[rt]
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>func getTypeInfo(ut *userTypeInfo) (*typeInfo, error) {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	rt := ut.base
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	if ut.externalEnc != 0 {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		<span class="comment">// We want the user type, not the base type.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		rt = ut.user
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	if info := lookupTypeInfo(rt); info != nil {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		return info, nil
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	return buildTypeInfo(ut, rt)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// buildTypeInfo constructs the type information for the type</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// and stores it in the type info map.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>func buildTypeInfo(ut *userTypeInfo, rt reflect.Type) (*typeInfo, error) {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	typeLock.Lock()
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	defer typeLock.Unlock()
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	if info := lookupTypeInfo(rt); info != nil {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		return info, nil
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	gt, err := getBaseType(rt.Name(), rt)
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	if err != nil {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		return nil, err
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	info := &amp;typeInfo{id: gt.id()}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	if ut.externalEnc != 0 {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		userType, err := getType(rt.Name(), ut, rt)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		if err != nil {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			return nil, err
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		gt := userType.id().gobType().(*gobEncoderType)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		switch ut.externalEnc {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		case xGob:
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			info.wire.GobEncoderT = gt
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		case xBinary:
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			info.wire.BinaryMarshalerT = gt
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		case xText:
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			info.wire.TextMarshalerT = gt
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		rt = ut.user
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	} else {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		t := info.id.gobType()
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		switch typ := rt; typ.Kind() {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		case reflect.Array:
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			info.wire.ArrayT = t.(*arrayType)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		case reflect.Map:
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			info.wire.MapT = t.(*mapType)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		case reflect.Slice:
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			<span class="comment">// []byte == []uint8 is a special case handled separately</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			if typ.Elem().Kind() != reflect.Uint8 {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>				info.wire.SliceT = t.(*sliceType)
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		case reflect.Struct:
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>			info.wire.StructT = t.(*structType)
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	}
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	if m := typeInfoMapInit; m != nil {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		m[rt] = info
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		return info, nil
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	<span class="comment">// Create new map with old contents plus new entry.</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	m, _ := typeInfoMap.Load().(map[reflect.Type]*typeInfo)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	newm := make(map[reflect.Type]*typeInfo, len(m))
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	for k, v := range m {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		newm[k] = v
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	newm[rt] = info
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	typeInfoMap.Store(newm)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	return info, nil
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span><span class="comment">// Called only when a panic is acceptable and unexpected.</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>func mustGetTypeInfo(rt reflect.Type) *typeInfo {
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	t, err := getTypeInfo(userType(rt))
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	if err != nil {
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		panic(&#34;getTypeInfo: &#34; + err.Error())
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	return t
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>}
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span><span class="comment">// GobEncoder is the interface describing data that provides its own</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span><span class="comment">// representation for encoding values for transmission to a GobDecoder.</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span><span class="comment">// A type that implements GobEncoder and GobDecoder has complete</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span><span class="comment">// control over the representation of its data and may therefore</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span><span class="comment">// contain things such as private fields, channels, and functions,</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span><span class="comment">// which are not usually transmissible in gob streams.</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">// Note: Since gobs can be stored permanently, it is good design</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// to guarantee the encoding used by a GobEncoder is stable as the</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// software evolves. For instance, it might make sense for GobEncode</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// to include a version number in the encoding.</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>type GobEncoder interface {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	<span class="comment">// GobEncode returns a byte slice representing the encoding of the</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	<span class="comment">// receiver for transmission to a GobDecoder, usually of the same</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	<span class="comment">// concrete type.</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	GobEncode() ([]byte, error)
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>}
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span><span class="comment">// GobDecoder is the interface describing data that provides its own</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// routine for decoding transmitted values sent by a GobEncoder.</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>type GobDecoder interface {
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	<span class="comment">// GobDecode overwrites the receiver, which must be a pointer,</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	<span class="comment">// with the value represented by the byte slice, which was written</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	<span class="comment">// by GobEncode, usually for the same concrete type.</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	GobDecode([]byte) error
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>var (
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	nameToConcreteType sync.Map <span class="comment">// map[string]reflect.Type</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	concreteTypeToName sync.Map <span class="comment">// map[reflect.Type]string</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>)
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span><span class="comment">// RegisterName is like [Register] but uses the provided name rather than the</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span><span class="comment">// type&#39;s default.</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>func RegisterName(name string, value any) {
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	if name == &#34;&#34; {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		<span class="comment">// reserved for nil</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		panic(&#34;attempt to register empty name&#34;)
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	ut := userType(reflect.TypeOf(value))
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	<span class="comment">// Check for incompatible duplicates. The name must refer to the</span>
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	<span class="comment">// same user type, and vice versa.</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	<span class="comment">// Store the name and type provided by the user....</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	if t, dup := nameToConcreteType.LoadOrStore(name, reflect.TypeOf(value)); dup &amp;&amp; t != ut.user {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;gob: registering duplicate types for %q: %s != %s&#34;, name, t, ut.user))
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	}
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	<span class="comment">// but the flattened type in the type table, since that&#39;s what decode needs.</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	if n, dup := concreteTypeToName.LoadOrStore(ut.base, name); dup &amp;&amp; n != name {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		nameToConcreteType.Delete(name)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;gob: registering duplicate names for %s: %q != %q&#34;, ut.user, n, name))
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span><span class="comment">// Register records a type, identified by a value for that type, under its</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span><span class="comment">// internal type name. That name will identify the concrete type of a value</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span><span class="comment">// sent or received as an interface variable. Only types that will be</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span><span class="comment">// transferred as implementations of interface values need to be registered.</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span><span class="comment">// Expecting to be used only during initialization, it panics if the mapping</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span><span class="comment">// between types and names is not a bijection.</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="selection">func Register(value any)</span> {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	<span class="comment">// Default to printed representation for unnamed types</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	rt := reflect.TypeOf(value)
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	name := rt.String()
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	<span class="comment">// But for named types (or pointers to them), qualify with import path (but see inner comment).</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	<span class="comment">// Dereference one pointer looking for a named type.</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	star := &#34;&#34;
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	if rt.Name() == &#34;&#34; {
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>		if pt := rt; pt.Kind() == reflect.Pointer {
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>			star = &#34;*&#34;
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>			<span class="comment">// NOTE: The following line should be rt = pt.Elem() to implement</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>			<span class="comment">// what the comment above claims, but fixing it would break compatibility</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>			<span class="comment">// with existing gobs.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>			<span class="comment">// Given package p imported as &#34;full/p&#34; with these definitions:</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>			<span class="comment">//     package p</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>			<span class="comment">//     type T1 struct { ... }</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>			<span class="comment">// this table shows the intended and actual strings used by gob to</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			<span class="comment">// name the types:</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>			<span class="comment">// Type      Correct string     Actual string</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			<span class="comment">// T1        full/p.T1          full/p.T1</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>			<span class="comment">// *T1       *full/p.T1         *p.T1</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>			<span class="comment">// The missing full path cannot be fixed without breaking existing gob decoders.</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			rt = pt
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	if rt.Name() != &#34;&#34; {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		if rt.PkgPath() == &#34;&#34; {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>			name = star + rt.Name()
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		} else {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>			name = star + rt.PkgPath() + &#34;.&#34; + rt.Name()
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		}
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	RegisterName(name, value)
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>}
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>func registerBasics() {
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	Register(int(0))
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	Register(int8(0))
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	Register(int16(0))
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	Register(int32(0))
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	Register(int64(0))
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	Register(uint(0))
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	Register(uint8(0))
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	Register(uint16(0))
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	Register(uint32(0))
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	Register(uint64(0))
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	Register(float32(0))
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	Register(float64(0))
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	Register(complex64(0i))
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	Register(complex128(0i))
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	Register(uintptr(0))
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	Register(false)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	Register(&#34;&#34;)
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	Register([]byte(nil))
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	Register([]int(nil))
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	Register([]int8(nil))
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	Register([]int16(nil))
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	Register([]int32(nil))
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	Register([]int64(nil))
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	Register([]uint(nil))
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	Register([]uint8(nil))
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	Register([]uint16(nil))
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	Register([]uint32(nil))
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	Register([]uint64(nil))
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	Register([]float32(nil))
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	Register([]float64(nil))
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	Register([]complex64(nil))
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	Register([]complex128(nil))
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	Register([]uintptr(nil))
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	Register([]bool(nil))
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	Register([]string(nil))
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>func init() {
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	typeInfoMap.Store(typeInfoMapInit)
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	typeInfoMapInit = nil
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>}
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>
</pre><p><a href="type.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
