<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/hex/hex.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./hex.go?s=2624:2650#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/hex">hex</a>/<span class="text-muted">hex.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/hex">encoding/hex</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package hex implements hexadecimal encoding and decoding.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package hex
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;slices&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>const (
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	hextable        = &#34;0123456789abcdef&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	reverseHexTable = &#34;&#34; +
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>		&#34;\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\xff\xff\xff\xff\xff\xff&#34; +
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>		&#34;\xff\x0a\x0b\x0c\x0d\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		&#34;\xff\x0a\x0b\x0c\x0d\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34; +
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		&#34;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// EncodedLen returns the length of an encoding of n source bytes.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Specifically, it returns n * 2.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func EncodedLen(n int) int { return n * 2 }
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Encode encodes src into [EncodedLen](len(src))</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// bytes of dst. As a convenience, it returns the number</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// of bytes written to dst, but this value is always [EncodedLen](len(src)).</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Encode implements hexadecimal encoding.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func Encode(dst, src []byte) int {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	j := 0
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	for _, v := range src {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		dst[j] = hextable[v&gt;&gt;4]
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		dst[j+1] = hextable[v&amp;0x0f]
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		j += 2
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	return len(src) * 2
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// AppendEncode appends the hexadecimally encoded src to dst</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// and returns the extended buffer.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func AppendEncode(dst, src []byte) []byte {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	n := EncodedLen(len(src))
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	dst = slices.Grow(dst, n)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Encode(dst[len(dst):][:n], src)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	return dst[:len(dst)+n]
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// ErrLength reports an attempt to decode an odd-length input</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// using [Decode] or [DecodeString].</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// The stream-based Decoder returns [io.ErrUnexpectedEOF] instead of ErrLength.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>var ErrLength = errors.New(&#34;encoding/hex: odd length hex string&#34;)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// InvalidByteError values describe errors resulting from an invalid byte in a hex string.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="selection">type InvalidByteError byte</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (e InvalidByteError) Error() string {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;encoding/hex: invalid byte: %#U&#34;, rune(e))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// DecodedLen returns the length of a decoding of x source bytes.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// Specifically, it returns x / 2.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func DecodedLen(x int) int { return x / 2 }
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Decode decodes src into [DecodedLen](len(src)) bytes,</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// returning the actual number of bytes written to dst.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Decode expects that src contains only hexadecimal</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// characters and that src has even length.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// If the input is malformed, Decode returns the number</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// of bytes decoded before the error.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>func Decode(dst, src []byte) (int, error) {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	i, j := 0, 1
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	for ; j &lt; len(src); j += 2 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		p := src[j-1]
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		q := src[j]
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		a := reverseHexTable[p]
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		b := reverseHexTable[q]
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if a &gt; 0x0f {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			return i, InvalidByteError(p)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		if b &gt; 0x0f {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			return i, InvalidByteError(q)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		dst[i] = (a &lt;&lt; 4) | b
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		i++
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	if len(src)%2 == 1 {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		<span class="comment">// Check for invalid char before reporting bad length,</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		<span class="comment">// since the invalid char (if present) is an earlier problem.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		if reverseHexTable[src[j-1]] &gt; 0x0f {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			return i, InvalidByteError(src[j-1])
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		return i, ErrLength
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	return i, nil
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// AppendDecode appends the hexadecimally decoded src to dst</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// and returns the extended buffer.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// If the input is malformed, it returns the partially decoded src and an error.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func AppendDecode(dst, src []byte) ([]byte, error) {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	n := DecodedLen(len(src))
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	dst = slices.Grow(dst, n)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	n, err := Decode(dst[len(dst):][:n], src)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return dst[:len(dst)+n], err
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// EncodeToString returns the hexadecimal encoding of src.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func EncodeToString(src []byte) string {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	dst := make([]byte, EncodedLen(len(src)))
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	Encode(dst, src)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return string(dst)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// DecodeString returns the bytes represented by the hexadecimal string s.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// DecodeString expects that src contains only hexadecimal</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// characters and that src has even length.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// If the input is malformed, DecodeString returns</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// the bytes decoded before the error.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func DecodeString(s string) ([]byte, error) {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	src := []byte(s)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// We can use the source slice itself as the destination</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// because the decode loop increments by one and then the &#39;seen&#39; byte is not used anymore.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	n, err := Decode(src, src)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return src[:n], err
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// Dump returns a string that contains a hex dump of the given data. The format</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// of the hex dump matches the output of `hexdump -C` on the command line.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func Dump(data []byte) string {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if len(data) == 0 {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// Dumper will write 79 bytes per complete 16 byte chunk, and at least</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// 64 bytes for whatever remains. Round the allocation up, since only a</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// maximum of 15 bytes will be wasted.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	buf.Grow((1 + ((len(data) - 1) / 16)) * 79)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	dumper := Dumper(&amp;buf)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	dumper.Write(data)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	dumper.Close()
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	return buf.String()
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// bufferSize is the number of hexadecimal characters to buffer in encoder and decoder.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>const bufferSize = 1024
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>type encoder struct {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	w   io.Writer
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	err error
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	out [bufferSize]byte <span class="comment">// output buffer</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// NewEncoder returns an [io.Writer] that writes lowercase hexadecimal characters to w.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func NewEncoder(w io.Writer) io.Writer {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	return &amp;encoder{w: w}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (e *encoder) Write(p []byte) (n int, err error) {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	for len(p) &gt; 0 &amp;&amp; e.err == nil {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		chunkSize := bufferSize / 2
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		if len(p) &lt; chunkSize {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			chunkSize = len(p)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		var written int
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		encoded := Encode(e.out[:], p[:chunkSize])
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		written, e.err = e.w.Write(e.out[:encoded])
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		n += written / 2
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		p = p[chunkSize:]
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	return n, e.err
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>type decoder struct {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	r   io.Reader
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	err error
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	in  []byte           <span class="comment">// input buffer (encoded form)</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	arr [bufferSize]byte <span class="comment">// backing array for in</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// NewDecoder returns an [io.Reader] that decodes hexadecimal characters from r.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// NewDecoder expects that r contain only an even number of hexadecimal characters.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func NewDecoder(r io.Reader) io.Reader {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	return &amp;decoder{r: r}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>func (d *decoder) Read(p []byte) (n int, err error) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// Fill internal buffer with sufficient bytes to decode</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if len(d.in) &lt; 2 &amp;&amp; d.err == nil {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		var numCopy, numRead int
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		numCopy = copy(d.arr[:], d.in) <span class="comment">// Copies either 0 or 1 bytes</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		numRead, d.err = d.r.Read(d.arr[numCopy:])
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		d.in = d.arr[:numCopy+numRead]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		if d.err == io.EOF &amp;&amp; len(d.in)%2 != 0 {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			if a := reverseHexTable[d.in[len(d.in)-1]]; a &gt; 0x0f {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				d.err = InvalidByteError(d.in[len(d.in)-1])
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			} else {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				d.err = io.ErrUnexpectedEOF
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// Decode internal buffer into output buffer</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if numAvail := len(d.in) / 2; len(p) &gt; numAvail {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		p = p[:numAvail]
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	numDec, err := Decode(p, d.in[:len(p)*2])
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	d.in = d.in[2*numDec:]
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if err != nil {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		d.in, d.err = nil, err <span class="comment">// Decode error; discard input remainder</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if len(d.in) &lt; 2 {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return numDec, d.err <span class="comment">// Only expose errors when buffer fully consumed</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return numDec, nil
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// Dumper returns a [io.WriteCloser] that writes a hex dump of all written data to</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// w. The format of the dump matches the output of `hexdump -C` on the command</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// line.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func Dumper(w io.Writer) io.WriteCloser {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return &amp;dumper{w: w}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>type dumper struct {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	w          io.Writer
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	rightChars [18]byte
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	buf        [14]byte
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	used       int  <span class="comment">// number of bytes in the current line</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	n          uint <span class="comment">// number of bytes, total</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	closed     bool
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>func toChar(b byte) byte {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if b &lt; 32 || b &gt; 126 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		return &#39;.&#39;
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	return b
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>func (h *dumper) Write(data []byte) (n int, err error) {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if h.closed {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		return 0, errors.New(&#34;encoding/hex: dumper closed&#34;)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// Output lines look like:</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// 00000010  2e 2f 30 31 32 33 34 35  36 37 38 39 3a 3b 3c 3d  |./0123456789:;&lt;=|</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	<span class="comment">// ^ offset                          ^ extra space              ^ ASCII of line.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	for i := range data {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if h.used == 0 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			<span class="comment">// At the beginning of a line we print the current</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			<span class="comment">// offset in hex.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			h.buf[0] = byte(h.n &gt;&gt; 24)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			h.buf[1] = byte(h.n &gt;&gt; 16)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			h.buf[2] = byte(h.n &gt;&gt; 8)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			h.buf[3] = byte(h.n)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			Encode(h.buf[4:], h.buf[:4])
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			h.buf[12] = &#39; &#39;
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			h.buf[13] = &#39; &#39;
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			_, err = h.w.Write(h.buf[4:])
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			if err != nil {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>				return
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		Encode(h.buf[:], data[i:i+1])
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		h.buf[2] = &#39; &#39;
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		l := 3
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		if h.used == 7 {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			<span class="comment">// There&#39;s an additional space after the 8th byte.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			h.buf[3] = &#39; &#39;
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			l = 4
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		} else if h.used == 15 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			<span class="comment">// At the end of the line there&#39;s an extra space and</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			<span class="comment">// the bar for the right column.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			h.buf[3] = &#39; &#39;
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			h.buf[4] = &#39;|&#39;
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			l = 5
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		_, err = h.w.Write(h.buf[:l])
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		if err != nil {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			return
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		n++
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		h.rightChars[h.used] = toChar(data[i])
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		h.used++
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		h.n++
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if h.used == 16 {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			h.rightChars[16] = &#39;|&#39;
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			h.rightChars[17] = &#39;\n&#39;
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			_, err = h.w.Write(h.rightChars[:])
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			if err != nil {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>				return
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			h.used = 0
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	return
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>func (h *dumper) Close() (err error) {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// See the comments in Write() for the details of this format.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if h.closed {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	h.closed = true
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if h.used == 0 {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		return
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	h.buf[0] = &#39; &#39;
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	h.buf[1] = &#39; &#39;
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	h.buf[2] = &#39; &#39;
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	h.buf[3] = &#39; &#39;
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	h.buf[4] = &#39;|&#39;
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	nBytes := h.used
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	for h.used &lt; 16 {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		l := 3
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		if h.used == 7 {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			l = 4
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		} else if h.used == 15 {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			l = 5
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		_, err = h.w.Write(h.buf[:l])
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		if err != nil {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>			return
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		h.used++
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	h.rightChars[nBytes] = &#39;|&#39;
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	h.rightChars[nBytes+1] = &#39;\n&#39;
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	_, err = h.w.Write(h.rightChars[:nBytes+2])
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	return
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
</pre><p><a href="hex.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
