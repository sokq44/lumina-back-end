<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/json/decode.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./decode.go?s=6069:6113#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/json">json</a>/<span class="text-muted">decode.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/json">encoding/json</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Represents JSON data structure using native Go types: booleans, floats,</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// strings, arrays, and maps.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package json
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;encoding&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;unicode/utf16&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Unmarshal parses the JSON-encoded data and stores the result</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// in the value pointed to by v. If v is nil or not a pointer,</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Unmarshal returns an [InvalidUnmarshalError].</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Unmarshal uses the inverse of the encodings that</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// [Marshal] uses, allocating maps, slices, and pointers as necessary,</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// with the following additional rules:</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// To unmarshal JSON into a pointer, Unmarshal first handles the case of</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// the JSON being the JSON literal null. In that case, Unmarshal sets</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// the value pointed at by the pointer. If the pointer is nil, Unmarshal</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// allocates a new value for it to point to.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// To unmarshal JSON into a value implementing [Unmarshaler],</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Unmarshal calls that value&#39;s [Unmarshaler.UnmarshalJSON] method, including</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// when the input is a JSON null.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Otherwise, if the value implements [encoding.TextUnmarshaler]</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// and the input is a JSON quoted string, Unmarshal calls</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// [encoding.TextUnmarshaler.UnmarshalText] with the unquoted form of the string.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// To unmarshal JSON into a struct, Unmarshal matches incoming object</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// keys to the keys used by [Marshal] (either the struct field name or its tag),</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// preferring an exact match but also accepting a case-insensitive match. By</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// default, object keys which don&#39;t have a corresponding struct field are</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// ignored (see [Decoder.DisallowUnknownFields] for an alternative).</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// To unmarshal JSON into an interface value,</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// Unmarshal stores one of these in the interface value:</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//   - bool, for JSON booleans</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//   - float64, for JSON numbers</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//   - string, for JSON strings</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//   - []interface{}, for JSON arrays</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//   - map[string]interface{}, for JSON objects</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//   - nil for JSON null</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// To unmarshal a JSON array into a slice, Unmarshal resets the slice length</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// to zero and then appends each element to the slice.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// As a special case, to unmarshal an empty JSON array into a slice,</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// Unmarshal replaces the slice with a new empty slice.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// To unmarshal a JSON array into a Go array, Unmarshal decodes</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// JSON array elements into corresponding Go array elements.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// If the Go array is smaller than the JSON array,</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// the additional JSON array elements are discarded.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// If the JSON array is smaller than the Go array,</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// the additional Go array elements are set to zero values.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// To unmarshal a JSON object into a map, Unmarshal first establishes a map to</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// reuses the existing map, keeping existing entries. Unmarshal then stores</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// key-value pairs from the JSON object into the map. The map&#39;s key type must</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// either be any string type, an integer, implement [json.Unmarshaler], or</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// implement [encoding.TextUnmarshaler].</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// If the JSON-encoded data contain a syntax error, Unmarshal returns a [SyntaxError].</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// If a JSON value is not appropriate for a given target type,</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// or if a JSON number overflows the target type, Unmarshal</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// skips that field and completes the unmarshaling as best it can.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// If no more serious errors are encountered, Unmarshal returns</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// an [UnmarshalTypeError] describing the earliest such error. In any</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// case, it&#39;s not guaranteed that all the remaining fields following</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// the problematic one will be unmarshaled into the target object.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// The JSON null value unmarshals into an interface, map, pointer, or slice</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// by setting that Go value to nil. Because null is often used in JSON to mean</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// “not present,” unmarshaling a JSON null into any other Go type has no effect</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// on the value and produces no error.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// When unmarshaling quoted strings, invalid UTF-8 or</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// invalid UTF-16 surrogate pairs are not treated as an error.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Instead, they are replaced by the Unicode replacement</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// character U+FFFD.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func Unmarshal(data []byte, v any) error {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// Check for well-formedness.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// Avoids filling out half a data structure</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// before discovering a JSON syntax error.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	var d decodeState
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	err := checkValid(data, &amp;d.scan)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if err != nil {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return err
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	d.init(data)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	return d.unmarshal(v)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Unmarshaler is the interface implemented by types</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// that can unmarshal a JSON description of themselves.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// The input can be assumed to be a valid encoding of</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// a JSON value. UnmarshalJSON must copy the JSON data</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// if it wishes to retain the data after returning.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// By convention, to approximate the behavior of [Unmarshal] itself,</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// Unmarshalers implement UnmarshalJSON([]byte(&#34;null&#34;)) as a no-op.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>type Unmarshaler interface {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	UnmarshalJSON([]byte) error
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// An UnmarshalTypeError describes a JSON value that was</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// not appropriate for a value of a specific Go type.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>type UnmarshalTypeError struct {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	Value  string       <span class="comment">// description of JSON value - &#34;bool&#34;, &#34;array&#34;, &#34;number -5&#34;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	Type   reflect.Type <span class="comment">// type of Go value it could not be assigned to</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	Offset int64        <span class="comment">// error occurred after reading Offset bytes</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	Struct string       <span class="comment">// name of the struct type containing the field</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	Field  string       <span class="comment">// the full path from root node to the field</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (e *UnmarshalTypeError) Error() string {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if e.Struct != &#34;&#34; || e.Field != &#34;&#34; {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return &#34;json: cannot unmarshal &#34; + e.Value + &#34; into Go struct field &#34; + e.Struct + &#34;.&#34; + e.Field + &#34; of type &#34; + e.Type.String()
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	return &#34;json: cannot unmarshal &#34; + e.Value + &#34; into Go value of type &#34; + e.Type.String()
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// An UnmarshalFieldError describes a JSON object key that</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// led to an unexported (and therefore unwritable) struct field.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Deprecated: No longer used; kept for compatibility.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>type UnmarshalFieldError struct {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	Key   string
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	Type  reflect.Type
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	Field reflect.StructField
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="selection">func (e *UnmarshalFieldError) Error() string</span> {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	return &#34;json: cannot unmarshal object key &#34; + strconv.Quote(e.Key) + &#34; into unexported field &#34; + e.Field.Name + &#34; of type &#34; + e.Type.String()
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// An InvalidUnmarshalError describes an invalid argument passed to [Unmarshal].</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// (The argument to [Unmarshal] must be a non-nil pointer.)</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>type InvalidUnmarshalError struct {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	Type reflect.Type
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (e *InvalidUnmarshalError) Error() string {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if e.Type == nil {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		return &#34;json: Unmarshal(nil)&#34;
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	if e.Type.Kind() != reflect.Pointer {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return &#34;json: Unmarshal(non-pointer &#34; + e.Type.String() + &#34;)&#34;
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return &#34;json: Unmarshal(nil &#34; + e.Type.String() + &#34;)&#34;
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func (d *decodeState) unmarshal(v any) error {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	rv := reflect.ValueOf(v)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if rv.Kind() != reflect.Pointer || rv.IsNil() {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return &amp;InvalidUnmarshalError{reflect.TypeOf(v)}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	d.scan.reset()
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	d.scanWhile(scanSkipSpace)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// We decode rv not rv.Elem because the Unmarshaler interface</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// test must be applied at the top level of the value.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	err := d.value(rv)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if err != nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return d.addErrorContext(err)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return d.savedError
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// A Number represents a JSON number literal.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>type Number string
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// String returns the literal text of the number.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (n Number) String() string { return string(n) }
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Float64 returns the number as a float64.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func (n Number) Float64() (float64, error) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return strconv.ParseFloat(string(n), 64)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// Int64 returns the number as an int64.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>func (n Number) Int64() (int64, error) {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return strconv.ParseInt(string(n), 10, 64)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// An errorContext provides context for type errors during decoding.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>type errorContext struct {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	Struct     reflect.Type
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	FieldStack []string
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// decodeState represents the state while decoding a JSON value.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>type decodeState struct {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	data                  []byte
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	off                   int <span class="comment">// next read offset in data</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	opcode                int <span class="comment">// last read result</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	scan                  scanner
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	errorContext          *errorContext
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	savedError            error
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	useNumber             bool
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	disallowUnknownFields bool
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// readIndex returns the position of the last byte read.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (d *decodeState) readIndex() int {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return d.off - 1
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// phasePanicMsg is used as a panic message when we end up with something that</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// shouldn&#39;t happen. It can indicate a bug in the JSON decoder, or that</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// something is editing the data slice while the decoder executes.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>const phasePanicMsg = &#34;JSON decoder out of sync - data changing underfoot?&#34;
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func (d *decodeState) init(data []byte) *decodeState {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	d.data = data
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	d.off = 0
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	d.savedError = nil
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if d.errorContext != nil {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		d.errorContext.Struct = nil
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// Reuse the allocated space for the FieldStack slice.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		d.errorContext.FieldStack = d.errorContext.FieldStack[:0]
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	return d
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// saveError saves the first err it is called with,</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// for reporting at the end of the unmarshal.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (d *decodeState) saveError(err error) {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if d.savedError == nil {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		d.savedError = d.addErrorContext(err)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// addErrorContext returns a new error enhanced with information from d.errorContext</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func (d *decodeState) addErrorContext(err error) error {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if d.errorContext != nil &amp;&amp; (d.errorContext.Struct != nil || len(d.errorContext.FieldStack) &gt; 0) {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		switch err := err.(type) {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		case *UnmarshalTypeError:
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			err.Struct = d.errorContext.Struct.Name()
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			err.Field = strings.Join(d.errorContext.FieldStack, &#34;.&#34;)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	return err
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// skip scans to the end of what was started.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func (d *decodeState) skip() {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	s, data, i := &amp;d.scan, d.data, d.off
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	depth := len(s.parseState)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	for {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		op := s.step(s, data[i])
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		i++
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		if len(s.parseState) &lt; depth {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			d.off = i
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>			d.opcode = op
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			return
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// scanNext processes the byte at d.data[d.off].</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func (d *decodeState) scanNext() {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if d.off &lt; len(d.data) {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		d.opcode = d.scan.step(&amp;d.scan, d.data[d.off])
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		d.off++
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	} else {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		d.opcode = d.scan.eof()
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		d.off = len(d.data) + 1 <span class="comment">// mark processed EOF with len+1</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// scanWhile processes bytes in d.data[d.off:] until it</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// receives a scan code not equal to op.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func (d *decodeState) scanWhile(op int) {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	s, data, i := &amp;d.scan, d.data, d.off
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	for i &lt; len(data) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		newOp := s.step(s, data[i])
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		i++
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		if newOp != op {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			d.opcode = newOp
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			d.off = i
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			return
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	d.off = len(data) + 1 <span class="comment">// mark processed EOF with len+1</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	d.opcode = d.scan.eof()
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// rescanLiteral is similar to scanWhile(scanContinue), but it specialises the</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// common case where we&#39;re decoding a literal. The decoder scans the input</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// twice, once for syntax errors and to check the length of the value, and the</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// second to perform the decoding.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// Only in the second step do we use decodeState to tokenize literals, so we</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// know there aren&#39;t any syntax errors. We can take advantage of that knowledge,</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// and scan a literal&#39;s bytes much more quickly.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>func (d *decodeState) rescanLiteral() {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	data, i := d.data, d.off
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>Switch:
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	switch data[i-1] {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	case &#39;&#34;&#39;: <span class="comment">// string</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		for ; i &lt; len(data); i++ {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			switch data[i] {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			case &#39;\\&#39;:
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>				i++ <span class="comment">// escaped char</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			case &#39;&#34;&#39;:
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>				i++ <span class="comment">// tokenize the closing quote too</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>				break Switch
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;-&#39;: <span class="comment">// number</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		for ; i &lt; len(data); i++ {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			switch data[i] {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;,
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				&#39;.&#39;, &#39;e&#39;, &#39;E&#39;, &#39;+&#39;, &#39;-&#39;:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			default:
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				break Switch
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	case &#39;t&#39;: <span class="comment">// true</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		i += len(&#34;rue&#34;)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	case &#39;f&#39;: <span class="comment">// false</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		i += len(&#34;alse&#34;)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	case &#39;n&#39;: <span class="comment">// null</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		i += len(&#34;ull&#34;)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if i &lt; len(data) {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		d.opcode = stateEndValue(&amp;d.scan, data[i])
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	} else {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		d.opcode = scanEnd
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	d.off = i + 1
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// value consumes a JSON value from d.data[d.off-1:], decoding into v, and</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// reads the following byte ahead. If v is invalid, the value is discarded.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// The first byte of the value has been read already.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func (d *decodeState) value(v reflect.Value) error {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	switch d.opcode {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	default:
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		panic(phasePanicMsg)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	case scanBeginArray:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		if v.IsValid() {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			if err := d.array(v); err != nil {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				return err
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		} else {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			d.skip()
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		d.scanNext()
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	case scanBeginObject:
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		if v.IsValid() {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			if err := d.object(v); err != nil {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>				return err
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		} else {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			d.skip()
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		d.scanNext()
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	case scanBeginLiteral:
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		<span class="comment">// All bytes inside literal return scanContinue op code.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		start := d.readIndex()
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		d.rescanLiteral()
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		if v.IsValid() {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			if err := d.literalStore(d.data[start:d.readIndex()], v, false); err != nil {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				return err
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return nil
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>type unquotedValue struct{}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// valueQuoted is like value but decodes a</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// quoted string literal or literal null into an interface value.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// If it finds anything other than a quoted string literal or null,</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// valueQuoted returns unquotedValue{}.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func (d *decodeState) valueQuoted() any {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	switch d.opcode {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	default:
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		panic(phasePanicMsg)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	case scanBeginArray, scanBeginObject:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		d.skip()
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		d.scanNext()
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	case scanBeginLiteral:
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		v := d.literalInterface()
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		switch v.(type) {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		case nil, string:
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			return v
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	return unquotedValue{}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// indirect walks down v allocating pointers as needed,</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// until it gets to a non-pointer.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// If it encounters an Unmarshaler, indirect stops and returns that.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// If decodingNull is true, indirect stops at the first settable pointer so it</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">// can be set to nil.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>func indirect(v reflect.Value, decodingNull bool) (Unmarshaler, encoding.TextUnmarshaler, reflect.Value) {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// Issue #24153 indicates that it is generally not a guaranteed property</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	<span class="comment">// that you may round-trip a reflect.Value by calling Value.Addr().Elem()</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	<span class="comment">// and expect the value to still be settable for values derived from</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	<span class="comment">// unexported embedded struct fields.</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	<span class="comment">// The logic below effectively does this when it first addresses the value</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">// (to satisfy possible pointer methods) and continues to dereference</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// subsequent pointers as necessary.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// After the first round-trip, we set v back to the original value to</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// preserve the original RW flags contained in reflect.Value.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	v0 := v
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	haveAddr := false
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// If v is a named type and is addressable,</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// start with its address, so that if the type has pointer methods,</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	<span class="comment">// we find them.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if v.Kind() != reflect.Pointer &amp;&amp; v.Type().Name() != &#34;&#34; &amp;&amp; v.CanAddr() {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		haveAddr = true
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		v = v.Addr()
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	for {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">// Load value from interface, but only if the result will be</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">// usefully addressable.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		if v.Kind() == reflect.Interface &amp;&amp; !v.IsNil() {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			e := v.Elem()
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			if e.Kind() == reflect.Pointer &amp;&amp; !e.IsNil() &amp;&amp; (!decodingNull || e.Elem().Kind() == reflect.Pointer) {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				haveAddr = false
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				v = e
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				continue
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		if v.Kind() != reflect.Pointer {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			break
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		if decodingNull &amp;&amp; v.CanSet() {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			break
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		<span class="comment">// Prevent infinite loop if v is an interface pointing to its own address:</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		<span class="comment">//     var v interface{}</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		<span class="comment">//     v = &amp;v</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		if v.Elem().Kind() == reflect.Interface &amp;&amp; v.Elem().Elem() == v {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			v = v.Elem()
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			break
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		if v.IsNil() {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			v.Set(reflect.New(v.Type().Elem()))
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		if v.Type().NumMethod() &gt; 0 &amp;&amp; v.CanInterface() {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>			if u, ok := v.Interface().(Unmarshaler); ok {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>				return u, nil, reflect.Value{}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>			}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			if !decodingNull {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>				if u, ok := v.Interface().(encoding.TextUnmarshaler); ok {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>					return nil, u, reflect.Value{}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		if haveAddr {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			v = v0 <span class="comment">// restore original value after round-trip Value.Addr().Elem()</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			haveAddr = false
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		} else {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			v = v.Elem()
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return nil, nil, v
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// array consumes an array from d.data[d.off-1:], decoding into v.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// The first byte of the array (&#39;[&#39;) has been read already.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (d *decodeState) array(v reflect.Value) error {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	<span class="comment">// Check for unmarshaler.</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	u, ut, pv := indirect(v, false)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	if u != nil {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		start := d.readIndex()
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		d.skip()
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return u.UnmarshalJSON(d.data[start:d.off])
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	if ut != nil {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		d.saveError(&amp;UnmarshalTypeError{Value: &#34;array&#34;, Type: v.Type(), Offset: int64(d.off)})
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		d.skip()
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		return nil
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	v = pv
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	<span class="comment">// Check type of target.</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		if v.NumMethod() == 0 {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			<span class="comment">// Decoding into nil interface? Switch to non-reflect code.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			ai := d.arrayInterface()
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			v.Set(reflect.ValueOf(ai))
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			return nil
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		<span class="comment">// Otherwise it&#39;s invalid.</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		fallthrough
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	default:
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		d.saveError(&amp;UnmarshalTypeError{Value: &#34;array&#34;, Type: v.Type(), Offset: int64(d.off)})
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		d.skip()
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return nil
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	case reflect.Array, reflect.Slice:
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		break
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	i := 0
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	for {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		<span class="comment">// Look ahead for ] - can only happen on first iteration.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		if d.opcode == scanEndArray {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			break
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		<span class="comment">// Expand slice length, growing the slice if necessary.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		if v.Kind() == reflect.Slice {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			if i &gt;= v.Cap() {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>				v.Grow(1)
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			if i &gt;= v.Len() {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>				v.SetLen(i + 1)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		if i &lt; v.Len() {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			<span class="comment">// Decode into element.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			if err := d.value(v.Index(i)); err != nil {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>				return err
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		} else {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			<span class="comment">// Ran out of fixed array: skip.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			if err := d.value(reflect.Value{}); err != nil {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>				return err
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		i++
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		<span class="comment">// Next token must be , or ].</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		if d.opcode == scanEndArray {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			break
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		if d.opcode != scanArrayValue {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	if i &lt; v.Len() {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		if v.Kind() == reflect.Array {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>			for ; i &lt; v.Len(); i++ {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>				v.Index(i).SetZero() <span class="comment">// zero remainder of array</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		} else {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			v.SetLen(i) <span class="comment">// truncate the slice</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	if i == 0 &amp;&amp; v.Kind() == reflect.Slice {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		v.Set(reflect.MakeSlice(v.Type(), 0, 0))
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	return nil
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>var nullLiteral = []byte(&#34;null&#34;)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>var textUnmarshalerType = reflect.TypeFor[encoding.TextUnmarshaler]()
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// object consumes an object from d.data[d.off-1:], decoding into v.</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">// The first byte (&#39;{&#39;) of the object has been read already.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>func (d *decodeState) object(v reflect.Value) error {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	<span class="comment">// Check for unmarshaler.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	u, ut, pv := indirect(v, false)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	if u != nil {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		start := d.readIndex()
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		d.skip()
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		return u.UnmarshalJSON(d.data[start:d.off])
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if ut != nil {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		d.saveError(&amp;UnmarshalTypeError{Value: &#34;object&#34;, Type: v.Type(), Offset: int64(d.off)})
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		d.skip()
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		return nil
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	v = pv
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	t := v.Type()
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	<span class="comment">// Decoding into nil interface? Switch to non-reflect code.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	if v.Kind() == reflect.Interface &amp;&amp; v.NumMethod() == 0 {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		oi := d.objectInterface()
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		v.Set(reflect.ValueOf(oi))
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		return nil
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	var fields structFields
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// Check type of target:</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	<span class="comment">//   struct or</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">//   map[T1]T2 where T1 is string, an integer type,</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	<span class="comment">//             or an encoding.TextUnmarshaler</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		<span class="comment">// Map key must either have string kind, have an integer kind,</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		<span class="comment">// or be an encoding.TextUnmarshaler.</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		switch t.Key().Kind() {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		case reflect.String,
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		default:
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			if !reflect.PointerTo(t.Key()).Implements(textUnmarshalerType) {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;object&#34;, Type: t, Offset: int64(d.off)})
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>				d.skip()
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>				return nil
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		if v.IsNil() {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			v.Set(reflect.MakeMap(t))
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		fields = cachedTypeFields(t)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		<span class="comment">// ok</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	default:
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		d.saveError(&amp;UnmarshalTypeError{Value: &#34;object&#34;, Type: t, Offset: int64(d.off)})
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		d.skip()
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		return nil
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	var mapElem reflect.Value
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	var origErrorContext errorContext
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	if d.errorContext != nil {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		origErrorContext = *d.errorContext
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	for {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		<span class="comment">// Read opening &#34; of string key or closing }.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		if d.opcode == scanEndObject {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			<span class="comment">// closing } - can only happen on first iteration.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			break
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		if d.opcode != scanBeginLiteral {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		<span class="comment">// Read key.</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		start := d.readIndex()
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		d.rescanLiteral()
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		item := d.data[start:d.readIndex()]
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		key, ok := unquoteBytes(item)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if !ok {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		<span class="comment">// Figure out field corresponding to key.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		var subv reflect.Value
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		destring := false <span class="comment">// whether the value is wrapped in a string to be decoded first</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		if v.Kind() == reflect.Map {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			elemType := t.Elem()
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			if !mapElem.IsValid() {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				mapElem = reflect.New(elemType).Elem()
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			} else {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>				mapElem.SetZero()
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			subv = mapElem
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		} else {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			f := fields.byExactName[string(key)]
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			if f == nil {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>				f = fields.byFoldedName[string(foldName(key))]
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			if f != nil {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>				subv = v
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>				destring = f.quoted
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>				for _, i := range f.index {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>					if subv.Kind() == reflect.Pointer {
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>						if subv.IsNil() {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>							<span class="comment">// If a struct embeds a pointer to an unexported type,</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>							<span class="comment">// it is not possible to set a newly allocated value</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>							<span class="comment">// since the field is unexported.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>							<span class="comment">//</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>							<span class="comment">// See https://golang.org/issue/21357</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>							if !subv.CanSet() {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>								d.saveError(fmt.Errorf(&#34;json: cannot set embedded pointer to unexported struct: %v&#34;, subv.Type().Elem()))
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>								<span class="comment">// Invalidate subv to ensure d.value(subv) skips over</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>								<span class="comment">// the JSON value without assigning it to subv.</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>								subv = reflect.Value{}
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>								destring = false
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>								break
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>							}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>							subv.Set(reflect.New(subv.Type().Elem()))
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>						}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>						subv = subv.Elem()
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>					}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>					subv = subv.Field(i)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>				}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>				if d.errorContext == nil {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>					d.errorContext = new(errorContext)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>				d.errorContext.FieldStack = append(d.errorContext.FieldStack, f.name)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				d.errorContext.Struct = t
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			} else if d.disallowUnknownFields {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>				d.saveError(fmt.Errorf(&#34;json: unknown field %q&#34;, key))
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		<span class="comment">// Read : before value.</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		if d.opcode != scanObjectKey {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		if destring {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			switch qv := d.valueQuoted().(type) {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			case nil:
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>				if err := d.literalStore(nullLiteral, subv, false); err != nil {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>					return err
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>				}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			case string:
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>				if err := d.literalStore([]byte(qv), subv, true); err != nil {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>					return err
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>				}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>			default:
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>				d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v&#34;, subv.Type()))
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>			}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		} else {
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>			if err := d.value(subv); err != nil {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>				return err
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		<span class="comment">// Write value back to map;</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		<span class="comment">// if using struct, subv points into struct already.</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		if v.Kind() == reflect.Map {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			kt := t.Key()
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			var kv reflect.Value
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			if reflect.PointerTo(kt).Implements(textUnmarshalerType) {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>				kv = reflect.New(kt)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>				if err := d.literalStore(item, kv, true); err != nil {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>					return err
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>				}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>				kv = kv.Elem()
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			} else {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>				switch kt.Kind() {
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>				case reflect.String:
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>					kv = reflect.New(kt).Elem()
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>					kv.SetString(string(key))
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>				case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>					s := string(key)
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>					n, err := strconv.ParseInt(s, 10, 64)
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>					if err != nil || reflect.Zero(kt).OverflowInt(n) {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>						d.saveError(&amp;UnmarshalTypeError{Value: &#34;number &#34; + s, Type: kt, Offset: int64(start + 1)})
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>						break
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>					}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>					kv = reflect.New(kt).Elem()
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>					kv.SetInt(n)
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>				case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>					s := string(key)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>					n, err := strconv.ParseUint(s, 10, 64)
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>					if err != nil || reflect.Zero(kt).OverflowUint(n) {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>						d.saveError(&amp;UnmarshalTypeError{Value: &#34;number &#34; + s, Type: kt, Offset: int64(start + 1)})
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>						break
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>					}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>					kv = reflect.New(kt).Elem()
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>					kv.SetUint(n)
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>				default:
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>					panic(&#34;json: Unexpected key type&#34;) <span class="comment">// should never occur</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>				}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			}
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>			if kv.IsValid() {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>				v.SetMapIndex(kv, subv)
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>			}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>		<span class="comment">// Next token must be , or }.</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		if d.errorContext != nil {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			<span class="comment">// Reset errorContext to its original state.</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			<span class="comment">// Keep the same underlying array for FieldStack, to reuse the</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>			<span class="comment">// space and avoid unnecessary allocs.</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			d.errorContext.FieldStack = d.errorContext.FieldStack[:len(origErrorContext.FieldStack)]
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			d.errorContext.Struct = origErrorContext.Struct
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		if d.opcode == scanEndObject {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>			break
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		if d.opcode != scanObjectValue {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	}
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	return nil
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">// convertNumber converts the number literal s to a float64 or a Number</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span><span class="comment">// depending on the setting of d.useNumber.</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>func (d *decodeState) convertNumber(s string) (any, error) {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	if d.useNumber {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return Number(s), nil
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	f, err := strconv.ParseFloat(s, 64)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	if err != nil {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		return nil, &amp;UnmarshalTypeError{Value: &#34;number &#34; + s, Type: reflect.TypeFor[float64](), Offset: int64(d.off)}
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	return f, nil
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>var numberType = reflect.TypeFor[Number]()
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span><span class="comment">// literalStore decodes a literal stored in item into v.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span><span class="comment">// fromQuoted indicates whether this literal came from unwrapping a</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span><span class="comment">// string from the &#34;,string&#34; struct tag option. this is used only to</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span><span class="comment">// produce more helpful error messages.</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>func (d *decodeState) literalStore(item []byte, v reflect.Value, fromQuoted bool) error {
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	<span class="comment">// Check for unmarshaler.</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	if len(item) == 0 {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		<span class="comment">// Empty string given.</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type()))
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		return nil
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	isNull := item[0] == &#39;n&#39; <span class="comment">// null</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	u, ut, pv := indirect(v, isNull)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	if u != nil {
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		return u.UnmarshalJSON(item)
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	if ut != nil {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		if item[0] != &#39;&#34;&#39; {
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>				d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type()))
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>				return nil
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>			}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>			val := &#34;number&#34;
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>			switch item[0] {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>			case &#39;n&#39;:
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>				val = &#34;null&#34;
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>			case &#39;t&#39;, &#39;f&#39;:
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>				val = &#34;bool&#34;
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>			}
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			d.saveError(&amp;UnmarshalTypeError{Value: val, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>			return nil
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		s, ok := unquoteBytes(item)
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		if !ok {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type())
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>			}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>		return ut.UnmarshalText(s)
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	}
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	v = pv
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	switch c := item[0]; c {
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	case &#39;n&#39;: <span class="comment">// null</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>		<span class="comment">// The main parser checks that only true and false can reach here,</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		<span class="comment">// but if this was a quoted string input, it could be anything.</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		if fromQuoted &amp;&amp; string(item) != &#34;null&#34; {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>			d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type()))
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>			break
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>		switch v.Kind() {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		case reflect.Interface, reflect.Pointer, reflect.Map, reflect.Slice:
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>			v.SetZero()
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>			<span class="comment">// otherwise, ignore null for primitives/string</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>		}
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	case &#39;t&#39;, &#39;f&#39;: <span class="comment">// true, false</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		value := item[0] == &#39;t&#39;
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		<span class="comment">// The main parser checks that only true and false can reach here,</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		<span class="comment">// but if this was a quoted string input, it could be anything.</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		if fromQuoted &amp;&amp; string(item) != &#34;true&#34; &amp;&amp; string(item) != &#34;false&#34; {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type()))
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>			break
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		switch v.Kind() {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		default:
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>				d.saveError(fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type()))
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			} else {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;bool&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		case reflect.Bool:
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			v.SetBool(value)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		case reflect.Interface:
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			if v.NumMethod() == 0 {
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>				v.Set(reflect.ValueOf(value))
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>			} else {
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;bool&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>			}
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	case &#39;&#34;&#39;: <span class="comment">// string</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		s, ok := unquoteBytes(item)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		if !ok {
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type())
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>			}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		}
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		switch v.Kind() {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		default:
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>			d.saveError(&amp;UnmarshalTypeError{Value: &#34;string&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		case reflect.Slice:
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>			if v.Type().Elem().Kind() != reflect.Uint8 {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;string&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				break
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>			}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>			b := make([]byte, base64.StdEncoding.DecodedLen(len(s)))
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			n, err := base64.StdEncoding.Decode(b, s)
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>			if err != nil {
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>				d.saveError(err)
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>				break
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>			}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>			v.SetBytes(b[:n])
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		case reflect.String:
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>			if v.Type() == numberType &amp;&amp; !isValidNumber(string(s)) {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;json: invalid number literal, trying to unmarshal %q into Number&#34;, item)
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>			}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>			v.SetString(string(s))
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		case reflect.Interface:
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>			if v.NumMethod() == 0 {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>				v.Set(reflect.ValueOf(string(s)))
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			} else {
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;string&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>			}
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>		}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	default: <span class="comment">// number</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		if c != &#39;-&#39; &amp;&amp; (c &lt; &#39;0&#39; || c &gt; &#39;9&#39;) {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type())
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>			}
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		switch v.Kind() {
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		default:
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>			if v.Kind() == reflect.String &amp;&amp; v.Type() == numberType {
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>				<span class="comment">// s must be a valid number, because it&#39;s</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>				<span class="comment">// already been tokenized.</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>				v.SetString(string(item))
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>				break
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			}
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			if fromQuoted {
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;json: invalid use of ,string struct tag, trying to unmarshal %q into %v&#34;, item, v.Type())
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>			d.saveError(&amp;UnmarshalTypeError{Value: &#34;number&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		case reflect.Interface:
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			n, err := d.convertNumber(string(item))
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			if err != nil {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>				d.saveError(err)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>				break
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			}
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			if v.NumMethod() != 0 {
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;number&#34;, Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>				break
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>			}
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>			v.Set(reflect.ValueOf(n))
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>			n, err := strconv.ParseInt(string(item), 10, 64)
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>			if err != nil || v.OverflowInt(n) {
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;number &#34; + string(item), Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>				break
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>			}
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>			v.SetInt(n)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>			n, err := strconv.ParseUint(string(item), 10, 64)
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>			if err != nil || v.OverflowUint(n) {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;number &#34; + string(item), Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>				break
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>			}
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>			v.SetUint(n)
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		case reflect.Float32, reflect.Float64:
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>			n, err := strconv.ParseFloat(string(item), v.Type().Bits())
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			if err != nil || v.OverflowFloat(n) {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>				d.saveError(&amp;UnmarshalTypeError{Value: &#34;number &#34; + string(item), Type: v.Type(), Offset: int64(d.readIndex())})
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>				break
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			}
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>			v.SetFloat(n)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		}
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	return nil
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span><span class="comment">// The xxxInterface routines build up a value to be stored</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span><span class="comment">// in an empty interface. They are not strictly necessary,</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span><span class="comment">// but they avoid the weight of reflection in this common case.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span><span class="comment">// valueInterface is like value but returns interface{}</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>func (d *decodeState) valueInterface() (val any) {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	switch d.opcode {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	default:
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		panic(phasePanicMsg)
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	case scanBeginArray:
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		val = d.arrayInterface()
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		d.scanNext()
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	case scanBeginObject:
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		val = d.objectInterface()
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		d.scanNext()
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	case scanBeginLiteral:
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		val = d.literalInterface()
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	}
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	return
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">// arrayInterface is like array but returns []interface{}.</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>func (d *decodeState) arrayInterface() []any {
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	var v = make([]any, 0)
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	for {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		<span class="comment">// Look ahead for ] - can only happen on first iteration.</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		if d.opcode == scanEndArray {
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>			break
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>		}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>		v = append(v, d.valueInterface())
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>		<span class="comment">// Next token must be , or ].</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		if d.opcode == scanEndArray {
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>			break
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		}
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		if d.opcode != scanArrayValue {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		}
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	}
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	return v
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// objectInterface is like object but returns map[string]interface{}.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>func (d *decodeState) objectInterface() map[string]any {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	m := make(map[string]any)
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	for {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		<span class="comment">// Read opening &#34; of string key or closing }.</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>		if d.opcode == scanEndObject {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>			<span class="comment">// closing } - can only happen on first iteration.</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			break
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		if d.opcode != scanBeginLiteral {
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		<span class="comment">// Read string key.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		start := d.readIndex()
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		d.rescanLiteral()
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		item := d.data[start:d.readIndex()]
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		key, ok := unquote(item)
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>		if !ok {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>		<span class="comment">// Read : before value.</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>		}
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>		if d.opcode != scanObjectKey {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>		}
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		d.scanWhile(scanSkipSpace)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		<span class="comment">// Read value.</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		m[key] = d.valueInterface()
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>		<span class="comment">// Next token must be , or }.</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>		if d.opcode == scanSkipSpace {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>			d.scanWhile(scanSkipSpace)
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>		}
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		if d.opcode == scanEndObject {
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>			break
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		}
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		if d.opcode != scanObjectValue {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	}
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	return m
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>}
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span><span class="comment">// literalInterface consumes and returns a literal from d.data[d.off-1:] and</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span><span class="comment">// it reads the following byte ahead. The first byte of the literal has been</span>
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span><span class="comment">// read already (that&#39;s how the caller knows it&#39;s a literal).</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>func (d *decodeState) literalInterface() any {
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	<span class="comment">// All bytes inside literal return scanContinue op code.</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	start := d.readIndex()
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	d.rescanLiteral()
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	item := d.data[start:d.readIndex()]
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	switch c := item[0]; c {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	case &#39;n&#39;: <span class="comment">// null</span>
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		return nil
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	case &#39;t&#39;, &#39;f&#39;: <span class="comment">// true, false</span>
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		return c == &#39;t&#39;
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	case &#39;&#34;&#39;: <span class="comment">// string</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		s, ok := unquote(item)
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>		if !ok {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		}
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>		return s
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	default: <span class="comment">// number</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		if c != &#39;-&#39; &amp;&amp; (c &lt; &#39;0&#39; || c &gt; &#39;9&#39;) {
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>			panic(phasePanicMsg)
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		}
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		n, err := d.convertNumber(string(item))
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		if err != nil {
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>			d.saveError(err)
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>		return n
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	}
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>}
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span><span class="comment">// getu4 decodes \uXXXX from the beginning of s, returning the hex value,</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span><span class="comment">// or it returns -1.</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>func getu4(s []byte) rune {
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	if len(s) &lt; 6 || s[0] != &#39;\\&#39; || s[1] != &#39;u&#39; {
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		return -1
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	var r rune
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	for _, c := range s[2:6] {
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		switch {
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>			c = c - &#39;0&#39;
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39;:
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>			c = c - &#39;a&#39; + 10
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		case &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39;:
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			c = c - &#39;A&#39; + 10
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>		default:
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>			return -1
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>		}
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		r = r*16 + rune(c)
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>	}
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	return r
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>}
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span><span class="comment">// unquote converts a quoted JSON string literal s into an actual string t.</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span><span class="comment">// The rules are different than for Go, so cannot use strconv.Unquote.</span>
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>func unquote(s []byte) (t string, ok bool) {
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>	s, ok = unquoteBytes(s)
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	t = string(s)
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	return
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>}
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>func unquoteBytes(s []byte) (t []byte, ok bool) {
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>	if len(s) &lt; 2 || s[0] != &#39;&#34;&#39; || s[len(s)-1] != &#39;&#34;&#39; {
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>		return
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>	}
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	s = s[1 : len(s)-1]
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	<span class="comment">// Check for unusual characters. If there are none,</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>	<span class="comment">// then no unquoting is needed, so return a slice of the</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>	<span class="comment">// original bytes.</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	r := 0
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	for r &lt; len(s) {
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		c := s[r]
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		if c == &#39;\\&#39; || c == &#39;&#34;&#39; || c &lt; &#39; &#39; {
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>			break
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		}
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		if c &lt; utf8.RuneSelf {
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			r++
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>			continue
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		rr, size := utf8.DecodeRune(s[r:])
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>		if rr == utf8.RuneError &amp;&amp; size == 1 {
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>			break
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		}
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>		r += size
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	}
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	if r == len(s) {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		return s, true
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>	b := make([]byte, len(s)+2*utf8.UTFMax)
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	w := copy(b, s[0:r])
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	for r &lt; len(s) {
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>		<span class="comment">// Out of room? Can only happen if s is full of</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		<span class="comment">// malformed UTF-8 and we&#39;re replacing each</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		<span class="comment">// byte with RuneError.</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>		if w &gt;= len(b)-2*utf8.UTFMax {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>			nb := make([]byte, (len(b)+utf8.UTFMax)*2)
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>			copy(nb, b[0:w])
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>			b = nb
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		}
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		switch c := s[r]; {
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>		case c == &#39;\\&#39;:
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>			r++
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>			if r &gt;= len(s) {
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>				return
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>			}
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>			switch s[r] {
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>			default:
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>				return
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>			case &#39;&#34;&#39;, &#39;\\&#39;, &#39;/&#39;, &#39;\&#39;&#39;:
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>				b[w] = s[r]
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>				r++
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>				w++
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			case &#39;b&#39;:
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>				b[w] = &#39;\b&#39;
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>				r++
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>				w++
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>			case &#39;f&#39;:
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>				b[w] = &#39;\f&#39;
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>				r++
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>				w++
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>			case &#39;n&#39;:
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>				b[w] = &#39;\n&#39;
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>				r++
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>				w++
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>			case &#39;r&#39;:
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>				b[w] = &#39;\r&#39;
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>				r++
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>				w++
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>			case &#39;t&#39;:
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>				b[w] = &#39;\t&#39;
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>				r++
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>				w++
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			case &#39;u&#39;:
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>				r--
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>				rr := getu4(s[r:])
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>				if rr &lt; 0 {
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>					return
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>				}
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>				r += 6
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>				if utf16.IsSurrogate(rr) {
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>					rr1 := getu4(s[r:])
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>					if dec := utf16.DecodeRune(rr, rr1); dec != unicode.ReplacementChar {
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>						<span class="comment">// A valid pair; consume.</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>						r += 6
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>						w += utf8.EncodeRune(b[w:], dec)
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>						break
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>					}
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>					<span class="comment">// Invalid surrogate; fall back to replacement rune.</span>
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>					rr = unicode.ReplacementChar
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>				}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>				w += utf8.EncodeRune(b[w:], rr)
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>			}
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		<span class="comment">// Quote, control characters are invalid.</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>		case c == &#39;&#34;&#39;, c &lt; &#39; &#39;:
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>			return
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>		<span class="comment">// ASCII</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		case c &lt; utf8.RuneSelf:
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>			b[w] = c
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>			r++
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>			w++
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>		<span class="comment">// Coerce to well-formed UTF-8.</span>
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>		default:
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>			rr, size := utf8.DecodeRune(s[r:])
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>			r += size
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>			w += utf8.EncodeRune(b[w:], rr)
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>		}
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	}
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	return b[0:w], true
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>}
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>
</pre><p><a href="decode.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
