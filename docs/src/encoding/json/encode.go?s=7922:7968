<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/json/encode.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./encode.go?s=7922:7968#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/json">json</a>/<span class="text-muted">encode.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/json">encoding/json</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package json implements encoding and decoding of JSON as defined in</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// RFC 7159. The mapping between JSON and Go values is described</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// in the documentation for the Marshal and Unmarshal functions.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// See &#34;JSON and Go&#34; for an introduction to this package:</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// https://golang.org/doc/articles/json_and_go.html</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package json
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import (
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;encoding&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;slices&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Marshal returns the JSON encoding of v.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Marshal traverses the value v recursively.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// If an encountered value implements [Marshaler]</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// and is not a nil pointer, Marshal calls [Marshaler.MarshalJSON]</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// to produce JSON. If no [Marshaler.MarshalJSON] method is present but the</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// value implements [encoding.TextMarshaler] instead, Marshal calls</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// [encoding.TextMarshaler.MarshalText] and encodes the result as a JSON string.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// The nil pointer exception is not strictly necessary</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// but mimics a similar, necessary exception in the behavior of</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// [Unmarshaler.UnmarshalJSON].</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// Otherwise, Marshal uses the following type-dependent default encodings:</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Boolean values encode as JSON booleans.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// Floating point, integer, and [Number] values encode as JSON numbers.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// NaN and +/-Inf values will return an [UnsupportedValueError].</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// String values encode as JSON strings coerced to valid UTF-8,</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// replacing invalid bytes with the Unicode replacement rune.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// So that the JSON will be safe to embed inside HTML &lt;script&gt; tags,</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// the string is encoded using [HTMLEscape],</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// which replaces &#34;&lt;&#34;, &#34;&gt;&#34;, &#34;&amp;&#34;, U+2028, and U+2029 are escaped</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// to &#34;\u003c&#34;,&#34;\u003e&#34;, &#34;\u0026&#34;, &#34;\u2028&#34;, and &#34;\u2029&#34;.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// This replacement can be disabled when using an [Encoder],</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// by calling [Encoder.SetEscapeHTML](false).</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// Array and slice values encode as JSON arrays, except that</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// []byte encodes as a base64-encoded string, and a nil slice</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// encodes as the null JSON value.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Struct values encode as JSON objects.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// Each exported struct field becomes a member of the object, using the</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// field name as the object key, unless the field is omitted for one of the</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// reasons given below.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// The encoding of each struct field can be customized by the format string</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// stored under the &#34;json&#34; key in the struct field&#39;s tag.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// The format string gives the name of the field, possibly followed by a</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// comma-separated list of options. The name may be empty in order to</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// specify options without overriding the default field name.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// The &#34;omitempty&#34; option specifies that the field should be omitted</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// from the encoding if the field has an empty value, defined as</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// false, 0, a nil pointer, a nil interface value, and any empty array,</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// slice, map, or string.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// As a special case, if the field tag is &#34;-&#34;, the field is always omitted.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Note that a field with name &#34;-&#34; can still be generated using the tag &#34;-,&#34;.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Examples of struct field tags and their meanings:</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//	// Field appears in JSON as key &#34;myName&#34;.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//	Field int `json:&#34;myName&#34;`</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//	// Field appears in JSON as key &#34;myName&#34; and</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//	// the field is omitted from the object if its value is empty,</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//	// as defined above.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//	Field int `json:&#34;myName,omitempty&#34;`</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//	// Field appears in JSON as key &#34;Field&#34; (the default), but</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//	// the field is skipped if empty.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	// Note the leading comma.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	Field int `json:&#34;,omitempty&#34;`</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	// Field is ignored by this package.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	Field int `json:&#34;-&#34;`</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//	// Field appears in JSON as key &#34;-&#34;.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//	Field int `json:&#34;-,&#34;`</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// The &#34;string&#34; option signals that a field is stored as JSON inside a</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// JSON-encoded string. It applies only to fields of string, floating point,</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// integer, or boolean types. This extra level of encoding is sometimes used</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// when communicating with JavaScript programs:</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//	Int64String int64 `json:&#34;,string&#34;`</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// The key name will be used if it&#39;s a non-empty string consisting of</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// only Unicode letters, digits, and ASCII punctuation except quotation</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// marks, backslash, and comma.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Embedded struct fields are usually marshaled as if their inner exported fields</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// were fields in the outer struct, subject to the usual Go visibility rules amended</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// as described in the next paragraph.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// An anonymous struct field with a name given in its JSON tag is treated as</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// having that name, rather than being anonymous.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// An anonymous struct field of interface type is treated the same as having</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// that type as its name, rather than being anonymous.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// The Go visibility rules for struct fields are amended for JSON when</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// deciding which field to marshal or unmarshal. If there are</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// multiple fields at the same level, and that level is the least</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// nested (and would therefore be the nesting level selected by the</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// usual Go rules), the following extra rules apply:</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// 1) Of those fields, if any are JSON-tagged, only tagged fields are considered,</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// even if there are multiple untagged fields that would otherwise conflict.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// 2) If there is exactly one field (tagged or not according to the first rule), that is selected.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// 3) Otherwise there are multiple fields, and all are ignored; no error occurs.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// Handling of anonymous struct fields is new in Go 1.1.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// an anonymous struct field in both current and earlier versions, give the field</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// a JSON tag of &#34;-&#34;.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Map values encode as JSON objects. The map&#39;s key type must either be a</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// string, an integer type, or implement [encoding.TextMarshaler]. The map keys</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// are sorted and used as JSON object keys by applying the following rules,</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// subject to the UTF-8 coercion described for string values above:</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">//   - keys of any string type are used directly</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">//   - [encoding.TextMarshalers] are marshaled</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//   - integer keys are converted to strings</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// Pointer values encode as the value pointed to.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// A nil pointer encodes as the null JSON value.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// Interface values encode as the value contained in the interface.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// A nil interface value encodes as the null JSON value.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// Channel, complex, and function values cannot be encoded in JSON.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Attempting to encode such a value causes Marshal to return</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// an [UnsupportedTypeError].</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// JSON cannot represent cyclic data structures and Marshal does not</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// handle them. Passing cyclic structures to Marshal will result in</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// an error.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func Marshal(v any) ([]byte, error) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	e := newEncodeState()
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	defer encodeStatePool.Put(e)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	err := e.marshal(v, encOpts{escapeHTML: true})
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if err != nil {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return nil, err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	buf := append([]byte(nil), e.Bytes()...)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return buf, nil
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// MarshalIndent is like [Marshal] but applies [Indent] to format the output.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// Each JSON element in the output will begin on a new line beginning with prefix</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// followed by one or more copies of indent according to the indentation nesting.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func MarshalIndent(v any, prefix, indent string) ([]byte, error) {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	b, err := Marshal(v)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if err != nil {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return nil, err
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	b2 := make([]byte, 0, indentGrowthFactor*len(b))
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	b2, err = appendIndent(b2, b, prefix, indent)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if err != nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return nil, err
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return b2, nil
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// Marshaler is the interface implemented by types that</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// can marshal themselves into valid JSON.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>type Marshaler interface {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	MarshalJSON() ([]byte, error)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// An UnsupportedTypeError is returned by [Marshal] when attempting</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// to encode an unsupported value type.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>type UnsupportedTypeError struct {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	Type reflect.Type
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>func (e *UnsupportedTypeError) Error() string {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return &#34;json: unsupported type: &#34; + e.Type.String()
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// An UnsupportedValueError is returned by [Marshal] when attempting</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// to encode an unsupported value.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>type UnsupportedValueError struct {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	Value reflect.Value
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	Str   string
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="selection">func (e *UnsupportedValueError) Error() string</span> {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	return &#34;json: unsupported value: &#34; + e.Str
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// Before Go 1.2, an InvalidUTF8Error was returned by [Marshal] when</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// attempting to encode a string value with invalid UTF-8 sequences.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// As of Go 1.2, [Marshal] instead coerces the string to valid UTF-8 by</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// replacing invalid bytes with the Unicode replacement rune U+FFFD.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// Deprecated: No longer used; kept for compatibility.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>type InvalidUTF8Error struct {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	S string <span class="comment">// the whole string value that caused the error</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func (e *InvalidUTF8Error) Error() string {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	return &#34;json: invalid UTF-8 in string: &#34; + strconv.Quote(e.S)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// A MarshalerError represents an error from calling a</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// [Marshaler.MarshalJSON] or [encoding.TextMarshaler.MarshalText] method.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>type MarshalerError struct {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	Type       reflect.Type
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	Err        error
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	sourceFunc string
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func (e *MarshalerError) Error() string {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	srcFunc := e.sourceFunc
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	if srcFunc == &#34;&#34; {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		srcFunc = &#34;MarshalJSON&#34;
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	return &#34;json: error calling &#34; + srcFunc +
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		&#34; for type &#34; + e.Type.String() +
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		&#34;: &#34; + e.Err.Error()
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// Unwrap returns the underlying error.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func (e *MarshalerError) Unwrap() error { return e.Err }
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>const hex = &#34;0123456789abcdef&#34;
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// An encodeState encodes JSON into a bytes.Buffer.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>type encodeState struct {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	bytes.Buffer <span class="comment">// accumulated output</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// Keep track of what pointers we&#39;ve seen in the current recursive call</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// path, to avoid cycles that could lead to a stack overflow. Only do</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// the relatively expensive map operations if ptrLevel is larger than</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// startDetectingCyclesAfter, so that we skip the work if we&#39;re within a</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// reasonable amount of nested pointers deep.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	ptrLevel uint
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	ptrSeen  map[any]struct{}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>const startDetectingCyclesAfter = 1000
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>var encodeStatePool sync.Pool
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func newEncodeState() *encodeState {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	if v := encodeStatePool.Get(); v != nil {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		e := v.(*encodeState)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		e.Reset()
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if len(e.ptrSeen) &gt; 0 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			panic(&#34;ptrEncoder.encode should have emptied ptrSeen via defers&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		e.ptrLevel = 0
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		return e
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	return &amp;encodeState{ptrSeen: make(map[any]struct{})}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// jsonError is an error wrapper type for internal use only.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// Panics with errors are wrapped in jsonError so that the top-level recover</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// can distinguish intentional panics from this package.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>type jsonError struct{ error }
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func (e *encodeState) marshal(v any, opts encOpts) (err error) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	defer func() {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		if r := recover(); r != nil {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			if je, ok := r.(jsonError); ok {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>				err = je.error
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			} else {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>				panic(r)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}()
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	e.reflectValue(reflect.ValueOf(v), opts)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return nil
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// error aborts the encoding by panicking with err wrapped in jsonError.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (e *encodeState) error(err error) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	panic(jsonError{err})
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>func isEmptyValue(v reflect.Value) bool {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		return v.Len() == 0
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	case reflect.Bool,
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr,
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		reflect.Float32, reflect.Float64,
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		reflect.Interface, reflect.Pointer:
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		return v.IsZero()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	return false
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func (e *encodeState) reflectValue(v reflect.Value, opts encOpts) {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	valueEncoder(v)(e, v, opts)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>type encOpts struct {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// quoted causes primitive fields to be encoded inside JSON strings.</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	quoted bool
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// escapeHTML causes &#39;&lt;&#39;, &#39;&gt;&#39;, and &#39;&amp;&#39; to be escaped in JSON strings.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	escapeHTML bool
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>type encoderFunc func(e *encodeState, v reflect.Value, opts encOpts)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>var encoderCache sync.Map <span class="comment">// map[reflect.Type]encoderFunc</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func valueEncoder(v reflect.Value) encoderFunc {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if !v.IsValid() {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		return invalidValueEncoder
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return typeEncoder(v.Type())
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func typeEncoder(t reflect.Type) encoderFunc {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if fi, ok := encoderCache.Load(t); ok {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return fi.(encoderFunc)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// To deal with recursive types, populate the map with an</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// indirect func before we build it. This type waits on the</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// real func (f) to be ready and then calls it. This indirect</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	<span class="comment">// func is only used for recursive types.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	var (
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		wg sync.WaitGroup
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		f  encoderFunc
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	)
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	wg.Add(1)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	fi, loaded := encoderCache.LoadOrStore(t, encoderFunc(func(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		wg.Wait()
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		f(e, v, opts)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	}))
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if loaded {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return fi.(encoderFunc)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// Compute the real encoder and replace the indirect func with it.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	f = newTypeEncoder(t, true)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	wg.Done()
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	encoderCache.Store(t, f)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return f
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>var (
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	marshalerType     = reflect.TypeFor[Marshaler]()
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	textMarshalerType = reflect.TypeFor[encoding.TextMarshaler]()
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// newTypeEncoder constructs an encoderFunc for a type.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// The returned encoder only checks CanAddr when allowAddr is true.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>func newTypeEncoder(t reflect.Type, allowAddr bool) encoderFunc {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	<span class="comment">// If we have a non-pointer value whose type implements</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// Marshaler with a value receiver, then we&#39;re better off taking</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	<span class="comment">// the address of the value - otherwise we end up with an</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// allocation as we cast the value to an interface.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	if t.Kind() != reflect.Pointer &amp;&amp; allowAddr &amp;&amp; reflect.PointerTo(t).Implements(marshalerType) {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		return newCondAddrEncoder(addrMarshalerEncoder, newTypeEncoder(t, false))
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if t.Implements(marshalerType) {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		return marshalerEncoder
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	if t.Kind() != reflect.Pointer &amp;&amp; allowAddr &amp;&amp; reflect.PointerTo(t).Implements(textMarshalerType) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		return newCondAddrEncoder(addrTextMarshalerEncoder, newTypeEncoder(t, false))
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	if t.Implements(textMarshalerType) {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		return textMarshalerEncoder
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	switch t.Kind() {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		return boolEncoder
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		return intEncoder
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return uintEncoder
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	case reflect.Float32:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return float32Encoder
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	case reflect.Float64:
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		return float64Encoder
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	case reflect.String:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		return stringEncoder
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		return interfaceEncoder
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		return newStructEncoder(t)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return newMapEncoder(t)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		return newSliceEncoder(t)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	case reflect.Array:
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		return newArrayEncoder(t)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	case reflect.Pointer:
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		return newPtrEncoder(t)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	default:
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		return unsupportedTypeEncoder
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>func invalidValueEncoder(e *encodeState, v reflect.Value, _ encOpts) {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	e.WriteString(&#34;null&#34;)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>func marshalerEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if v.Kind() == reflect.Pointer &amp;&amp; v.IsNil() {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		return
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	m, ok := v.Interface().(Marshaler)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	if !ok {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		return
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	b, err := m.MarshalJSON()
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	if err == nil {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		e.Grow(len(b))
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		out := e.AvailableBuffer()
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		out, err = appendCompact(out, b, opts.escapeHTML)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		e.Buffer.Write(out)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	if err != nil {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		e.error(&amp;MarshalerError{v.Type(), err, &#34;MarshalJSON&#34;})
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>func addrMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	va := v.Addr()
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if va.IsNil() {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	m := va.Interface().(Marshaler)
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	b, err := m.MarshalJSON()
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if err == nil {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		e.Grow(len(b))
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		out := e.AvailableBuffer()
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		out, err = appendCompact(out, b, opts.escapeHTML)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		e.Buffer.Write(out)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	if err != nil {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		e.error(&amp;MarshalerError{v.Type(), err, &#34;MarshalJSON&#34;})
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>func textMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if v.Kind() == reflect.Pointer &amp;&amp; v.IsNil() {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		return
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	m, ok := v.Interface().(encoding.TextMarshaler)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if !ok {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		return
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	b, err := m.MarshalText()
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	if err != nil {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		e.error(&amp;MarshalerError{v.Type(), err, &#34;MarshalText&#34;})
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	e.Write(appendString(e.AvailableBuffer(), b, opts.escapeHTML))
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>func addrTextMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	va := v.Addr()
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	if va.IsNil() {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	m := va.Interface().(encoding.TextMarshaler)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	b, err := m.MarshalText()
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	if err != nil {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		e.error(&amp;MarshalerError{v.Type(), err, &#34;MarshalText&#34;})
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	e.Write(appendString(e.AvailableBuffer(), b, opts.escapeHTML))
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>func boolEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	b := e.AvailableBuffer()
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	b = strconv.AppendBool(b, v.Bool())
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	e.Write(b)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func intEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	b := e.AvailableBuffer()
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	b = strconv.AppendInt(b, v.Int(), 10)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	e.Write(b)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>func uintEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	b := e.AvailableBuffer()
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	b = strconv.AppendUint(b, v.Uint(), 10)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	e.Write(b)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>type floatEncoder int <span class="comment">// number of bits</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func (bits floatEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	f := v.Float()
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if math.IsInf(f, 0) || math.IsNaN(f) {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		e.error(&amp;UnsupportedValueError{v, strconv.FormatFloat(f, &#39;g&#39;, -1, int(bits))})
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	<span class="comment">// Convert as if by ES6 number to string conversion.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	<span class="comment">// This matches most other JSON generators.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	<span class="comment">// See golang.org/issue/6384 and golang.org/issue/14135.</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	<span class="comment">// Like fmt %g, but the exponent cutoffs are different</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	<span class="comment">// and exponents themselves are not padded to two digits.</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	b := e.AvailableBuffer()
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	abs := math.Abs(f)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	fmt := byte(&#39;f&#39;)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	<span class="comment">// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	if abs != 0 {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		if bits == 64 &amp;&amp; (abs &lt; 1e-6 || abs &gt;= 1e21) || bits == 32 &amp;&amp; (float32(abs) &lt; 1e-6 || float32(abs) &gt;= 1e21) {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			fmt = &#39;e&#39;
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	b = strconv.AppendFloat(b, f, fmt, -1, int(bits))
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	if fmt == &#39;e&#39; {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		<span class="comment">// clean up e-09 to e-9</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		n := len(b)
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		if n &gt;= 4 &amp;&amp; b[n-4] == &#39;e&#39; &amp;&amp; b[n-3] == &#39;-&#39; &amp;&amp; b[n-2] == &#39;0&#39; {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			b[n-2] = b[n-1]
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			b = b[:n-1]
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	b = mayAppendQuote(b, opts.quoted)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	e.Write(b)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>var (
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	float32Encoder = (floatEncoder(32)).encode
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	float64Encoder = (floatEncoder(64)).encode
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>func stringEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	if v.Type() == numberType {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		numStr := v.String()
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		<span class="comment">// In Go1.5 the empty string encodes to &#34;0&#34;, while this is not a valid number literal</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		<span class="comment">// we keep compatibility so check validity after this.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		if numStr == &#34;&#34; {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			numStr = &#34;0&#34; <span class="comment">// Number&#39;s zero-val</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		if !isValidNumber(numStr) {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			e.error(fmt.Errorf(&#34;json: invalid number literal %q&#34;, numStr))
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		b := e.AvailableBuffer()
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		b = mayAppendQuote(b, opts.quoted)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		b = append(b, numStr...)
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		b = mayAppendQuote(b, opts.quoted)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		e.Write(b)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		return
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	if opts.quoted {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		b := appendString(nil, v.String(), opts.escapeHTML)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		e.Write(appendString(e.AvailableBuffer(), b, false)) <span class="comment">// no need to escape again since it is already escaped</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	} else {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		e.Write(appendString(e.AvailableBuffer(), v.String(), opts.escapeHTML))
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// isValidNumber reports whether s is a valid JSON number literal.</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>func isValidNumber(s string) bool {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// This function implements the JSON numbers grammar.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">// See https://tools.ietf.org/html/rfc7159#section-6</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// and https://www.json.org/img/number.png</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		return false
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// Optional -</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	if s[0] == &#39;-&#39; {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		s = s[1:]
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		if s == &#34;&#34; {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>			return false
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	<span class="comment">// Digits</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	switch {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	default:
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		return false
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	case s[0] == &#39;0&#39;:
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		s = s[1:]
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	case &#39;1&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39;:
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		s = s[1:]
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		for len(s) &gt; 0 &amp;&amp; &#39;0&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39; {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			s = s[1:]
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	<span class="comment">// . followed by 1 or more digits.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;.&#39; &amp;&amp; &#39;0&#39; &lt;= s[1] &amp;&amp; s[1] &lt;= &#39;9&#39; {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		s = s[2:]
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		for len(s) &gt; 0 &amp;&amp; &#39;0&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39; {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			s = s[1:]
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	<span class="comment">// e or E followed by an optional - or + and</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	<span class="comment">// 1 or more digits.</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	if len(s) &gt;= 2 &amp;&amp; (s[0] == &#39;e&#39; || s[0] == &#39;E&#39;) {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		s = s[1:]
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		if s[0] == &#39;+&#39; || s[0] == &#39;-&#39; {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			s = s[1:]
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if s == &#34;&#34; {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				return false
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		for len(s) &gt; 0 &amp;&amp; &#39;0&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39; {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			s = s[1:]
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	<span class="comment">// Make sure we are at the end.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	return s == &#34;&#34;
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>func interfaceEncoder(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		return
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	e.reflectValue(v.Elem(), opts)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>func unsupportedTypeEncoder(e *encodeState, v reflect.Value, _ encOpts) {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	e.error(&amp;UnsupportedTypeError{v.Type()})
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>type structEncoder struct {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	fields structFields
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>type structFields struct {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	list         []field
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	byExactName  map[string]*field
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	byFoldedName map[string]*field
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>func (se structEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	next := byte(&#39;{&#39;)
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>FieldLoop:
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	for i := range se.fields.list {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		f := &amp;se.fields.list[i]
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		<span class="comment">// Find the nested struct field by following f.index.</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		fv := v
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		for _, i := range f.index {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			if fv.Kind() == reflect.Pointer {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>				if fv.IsNil() {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>					continue FieldLoop
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>				fv = fv.Elem()
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			fv = fv.Field(i)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		if f.omitEmpty &amp;&amp; isEmptyValue(fv) {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			continue
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		e.WriteByte(next)
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		next = &#39;,&#39;
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		if opts.escapeHTML {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			e.WriteString(f.nameEscHTML)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		} else {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			e.WriteString(f.nameNonEsc)
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		opts.quoted = f.quoted
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		f.encoder(e, fv, opts)
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	if next == &#39;{&#39; {
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		e.WriteString(&#34;{}&#34;)
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	} else {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		e.WriteByte(&#39;}&#39;)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>func newStructEncoder(t reflect.Type) encoderFunc {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	se := structEncoder{fields: cachedTypeFields(t)}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	return se.encode
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>}
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>type mapEncoder struct {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	elemEnc encoderFunc
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>func (me mapEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		return
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	if e.ptrLevel++; e.ptrLevel &gt; startDetectingCyclesAfter {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re a large number of nested ptrEncoder.encode calls deep;</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		<span class="comment">// start checking if we&#39;ve run into a pointer cycle.</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		ptr := v.UnsafePointer()
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if _, ok := e.ptrSeen[ptr]; ok {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			e.error(&amp;UnsupportedValueError{v, fmt.Sprintf(&#34;encountered a cycle via %s&#34;, v.Type())})
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		e.ptrSeen[ptr] = struct{}{}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		defer delete(e.ptrSeen, ptr)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	e.WriteByte(&#39;{&#39;)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	<span class="comment">// Extract and sort the keys.</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	var (
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		sv  = make([]reflectWithString, v.Len())
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		mi  = v.MapRange()
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		err error
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	)
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	for i := 0; mi.Next(); i++ {
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		if sv[i].ks, err = resolveKeyName(mi.Key()); err != nil {
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			e.error(fmt.Errorf(&#34;json: encoding error for type %q: %q&#34;, v.Type().String(), err.Error()))
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		sv[i].v = mi.Value()
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	slices.SortFunc(sv, func(i, j reflectWithString) int {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		return strings.Compare(i.ks, j.ks)
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	})
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	for i, kv := range sv {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			e.WriteByte(&#39;,&#39;)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		e.Write(appendString(e.AvailableBuffer(), kv.ks, opts.escapeHTML))
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		e.WriteByte(&#39;:&#39;)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		me.elemEnc(e, kv.v, opts)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	e.WriteByte(&#39;}&#39;)
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	e.ptrLevel--
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func newMapEncoder(t reflect.Type) encoderFunc {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	switch t.Key().Kind() {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	case reflect.String,
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	default:
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		if !t.Key().Implements(textMarshalerType) {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			return unsupportedTypeEncoder
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	me := mapEncoder{typeEncoder(t.Elem())}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	return me.encode
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>func encodeByteSlice(e *encodeState, v reflect.Value, _ encOpts) {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		return
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	s := v.Bytes()
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	b := e.AvailableBuffer()
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	b = append(b, &#39;&#34;&#39;)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	b = base64.StdEncoding.AppendEncode(b, s)
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	b = append(b, &#39;&#34;&#39;)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	e.Write(b)
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// sliceEncoder just wraps an arrayEncoder, checking to make sure the value isn&#39;t nil.</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>type sliceEncoder struct {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	arrayEnc encoderFunc
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>func (se sliceEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>		return
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	if e.ptrLevel++; e.ptrLevel &gt; startDetectingCyclesAfter {
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re a large number of nested ptrEncoder.encode calls deep;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		<span class="comment">// start checking if we&#39;ve run into a pointer cycle.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		<span class="comment">// Here we use a struct to memorize the pointer to the first element of the slice</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		<span class="comment">// and its length.</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		ptr := struct {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			ptr interface{} <span class="comment">// always an unsafe.Pointer, but avoids a dependency on package unsafe</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			len int
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		}{v.UnsafePointer(), v.Len()}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		if _, ok := e.ptrSeen[ptr]; ok {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>			e.error(&amp;UnsupportedValueError{v, fmt.Sprintf(&#34;encountered a cycle via %s&#34;, v.Type())})
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		e.ptrSeen[ptr] = struct{}{}
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		defer delete(e.ptrSeen, ptr)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	se.arrayEnc(e, v, opts)
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	e.ptrLevel--
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>func newSliceEncoder(t reflect.Type) encoderFunc {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	<span class="comment">// Byte slices get special treatment; arrays don&#39;t.</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	if t.Elem().Kind() == reflect.Uint8 {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		p := reflect.PointerTo(t.Elem())
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		if !p.Implements(marshalerType) &amp;&amp; !p.Implements(textMarshalerType) {
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>			return encodeByteSlice
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	enc := sliceEncoder{newArrayEncoder(t)}
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	return enc.encode
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>type arrayEncoder struct {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	elemEnc encoderFunc
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>func (ae arrayEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	e.WriteByte(&#39;[&#39;)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	n := v.Len()
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>			e.WriteByte(&#39;,&#39;)
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		ae.elemEnc(e, v.Index(i), opts)
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	e.WriteByte(&#39;]&#39;)
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>func newArrayEncoder(t reflect.Type) encoderFunc {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	enc := arrayEncoder{typeEncoder(t.Elem())}
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	return enc.encode
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>type ptrEncoder struct {
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	elemEnc encoderFunc
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>func (pe ptrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	if v.IsNil() {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		e.WriteString(&#34;null&#34;)
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>		return
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	if e.ptrLevel++; e.ptrLevel &gt; startDetectingCyclesAfter {
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		<span class="comment">// We&#39;re a large number of nested ptrEncoder.encode calls deep;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		<span class="comment">// start checking if we&#39;ve run into a pointer cycle.</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>		ptr := v.Interface()
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		if _, ok := e.ptrSeen[ptr]; ok {
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>			e.error(&amp;UnsupportedValueError{v, fmt.Sprintf(&#34;encountered a cycle via %s&#34;, v.Type())})
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>		e.ptrSeen[ptr] = struct{}{}
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>		defer delete(e.ptrSeen, ptr)
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	pe.elemEnc(e, v.Elem(), opts)
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	e.ptrLevel--
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>func newPtrEncoder(t reflect.Type) encoderFunc {
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	enc := ptrEncoder{typeEncoder(t.Elem())}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	return enc.encode
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>}
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>type condAddrEncoder struct {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	canAddrEnc, elseEnc encoderFunc
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>}
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>func (ce condAddrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	if v.CanAddr() {
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		ce.canAddrEnc(e, v, opts)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	} else {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		ce.elseEnc(e, v, opts)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span><span class="comment">// newCondAddrEncoder returns an encoder that checks whether its value</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// CanAddr and delegates to canAddrEnc if so, else to elseEnc.</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>func newCondAddrEncoder(canAddrEnc, elseEnc encoderFunc) encoderFunc {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	enc := condAddrEncoder{canAddrEnc: canAddrEnc, elseEnc: elseEnc}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	return enc.encode
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>func isValidTag(s string) bool {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		return false
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	}
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	for _, c := range s {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		switch {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		case strings.ContainsRune(&#34;!#$%&amp;()*+-./:;&lt;=&gt;?@[]^_{|}~ &#34;, c):
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			<span class="comment">// Backslash and quote chars are reserved, but</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>			<span class="comment">// otherwise any punctuation chars are allowed</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			<span class="comment">// in a tag name.</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		case !unicode.IsLetter(c) &amp;&amp; !unicode.IsDigit(c):
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			return false
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		}
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	}
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	return true
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>}
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>func typeByIndex(t reflect.Type, index []int) reflect.Type {
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	for _, i := range index {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		if t.Kind() == reflect.Pointer {
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>			t = t.Elem()
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		}
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		t = t.Field(i).Type
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	return t
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>}
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>type reflectWithString struct {
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	v  reflect.Value
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	ks string
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>func resolveKeyName(k reflect.Value) (string, error) {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	if k.Kind() == reflect.String {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		return k.String(), nil
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	}
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	if tm, ok := k.Interface().(encoding.TextMarshaler); ok {
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>		if k.Kind() == reflect.Pointer &amp;&amp; k.IsNil() {
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			return &#34;&#34;, nil
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>		buf, err := tm.MarshalText()
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		return string(buf), err
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	switch k.Kind() {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		return strconv.FormatInt(k.Int(), 10), nil
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>		return strconv.FormatUint(k.Uint(), 10), nil
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	panic(&#34;unexpected map key type&#34;)
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>}
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>func appendString[Bytes []byte | string](dst []byte, src Bytes, escapeHTML bool) []byte {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	dst = append(dst, &#39;&#34;&#39;)
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	start := 0
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	for i := 0; i &lt; len(src); {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		if b := src[i]; b &lt; utf8.RuneSelf {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>			if htmlSafeSet[b] || (!escapeHTML &amp;&amp; safeSet[b]) {
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>				i++
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>				continue
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>			}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>			dst = append(dst, src[start:i]...)
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>			switch b {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>			case &#39;\\&#39;, &#39;&#34;&#39;:
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, b)
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			case &#39;\b&#39;:
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;b&#39;)
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			case &#39;\f&#39;:
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;f&#39;)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			case &#39;\n&#39;:
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;n&#39;)
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			case &#39;\r&#39;:
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;r&#39;)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			case &#39;\t&#39;:
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;t&#39;)
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			default:
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>				<span class="comment">// This encodes bytes &lt; 0x20 except for \b, \f, \n, \r and \t.</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>				<span class="comment">// If escapeHTML is set, it also escapes &lt;, &gt;, and &amp;</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>				<span class="comment">// because they can lead to security holes when</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>				<span class="comment">// user-controlled strings are rendered into JSON</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>				<span class="comment">// and served to some browsers.</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>				dst = append(dst, &#39;\\&#39;, &#39;u&#39;, &#39;0&#39;, &#39;0&#39;, hex[b&gt;&gt;4], hex[b&amp;0xF])
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>			}
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>			i++
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>			start = i
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			continue
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		<span class="comment">// TODO(https://go.dev/issue/56948): Use generic utf8 functionality.</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		<span class="comment">// For now, cast only a small portion of byte slices to a string</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		<span class="comment">// so that it can be stack allocated. This slows down []byte slightly</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		<span class="comment">// due to the extra copy, but keeps string performance roughly the same.</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		n := len(src) - i
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		if n &gt; utf8.UTFMax {
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>			n = utf8.UTFMax
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		c, size := utf8.DecodeRuneInString(string(src[i : i+n]))
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		if c == utf8.RuneError &amp;&amp; size == 1 {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>			dst = append(dst, src[start:i]...)
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>			dst = append(dst, `\ufffd`...)
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>			i += size
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>			start = i
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>			continue
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		}
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>		<span class="comment">// U+2028 is LINE SEPARATOR.</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		<span class="comment">// U+2029 is PARAGRAPH SEPARATOR.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		<span class="comment">// They are both technically valid characters in JSON strings,</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		<span class="comment">// but don&#39;t work in JSONP, which has to be evaluated as JavaScript,</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		<span class="comment">// and can lead to security holes there. It is valid JSON to</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		<span class="comment">// escape them, so we do so unconditionally.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		<span class="comment">// See https://en.wikipedia.org/wiki/JSON#Safety.</span>
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		if c == &#39;\u2028&#39; || c == &#39;\u2029&#39; {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>			dst = append(dst, src[start:i]...)
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>			dst = append(dst, &#39;\\&#39;, &#39;u&#39;, &#39;2&#39;, &#39;0&#39;, &#39;2&#39;, hex[c&amp;0xF])
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>			i += size
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>			start = i
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>			continue
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		i += size
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	}
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	dst = append(dst, src[start:]...)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	dst = append(dst, &#39;&#34;&#39;)
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	return dst
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span><span class="comment">// A field represents a single field found in a struct.</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>type field struct {
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	name      string
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	nameBytes []byte <span class="comment">// []byte(name)</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	nameNonEsc  string <span class="comment">// `&#34;` + name + `&#34;:`</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	nameEscHTML string <span class="comment">// `&#34;` + HTMLEscape(name) + `&#34;:`</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	tag       bool
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	index     []int
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	typ       reflect.Type
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	omitEmpty bool
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	quoted    bool
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	encoder encoderFunc
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">// byIndex sorts field by index sequence.</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>type byIndex []field
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>func (x byIndex) Len() int { return len(x) }
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>func (x byIndex) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>func (x byIndex) Less(i, j int) bool {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	for k, xik := range x[i].index {
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		if k &gt;= len(x[j].index) {
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>			return false
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		}
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		if xik != x[j].index[k] {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>			return xik &lt; x[j].index[k]
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		}
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	}
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	return len(x[i].index) &lt; len(x[j].index)
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// typeFields returns a list of fields that JSON should recognize for the given type.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span><span class="comment">// The algorithm is breadth-first search over the set of structs to include - the top struct</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span><span class="comment">// and then any reachable anonymous structs.</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>func typeFields(t reflect.Type) structFields {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	<span class="comment">// Anonymous fields to explore at the current level and the next.</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	current := []field{}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	next := []field{{typ: t}}
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	<span class="comment">// Count of queued names for current level and the next.</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	var count, nextCount map[reflect.Type]int
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	<span class="comment">// Types already visited at an earlier level.</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	visited := map[reflect.Type]bool{}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	<span class="comment">// Fields found.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	var fields []field
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	<span class="comment">// Buffer to run appendHTMLEscape on field names.</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	var nameEscBuf []byte
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	for len(next) &gt; 0 {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		current, next = next, current[:0]
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		count, nextCount = nextCount, map[reflect.Type]int{}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		for _, f := range current {
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>			if visited[f.typ] {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>				continue
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>			}
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>			visited[f.typ] = true
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>			<span class="comment">// Scan f.typ for fields to include.</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>			for i := 0; i &lt; f.typ.NumField(); i++ {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>				sf := f.typ.Field(i)
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>				if sf.Anonymous {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>					t := sf.Type
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>					if t.Kind() == reflect.Pointer {
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>						t = t.Elem()
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>					}
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>					if !sf.IsExported() &amp;&amp; t.Kind() != reflect.Struct {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>						<span class="comment">// Ignore embedded fields of unexported non-struct types.</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>						continue
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>					}
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>					<span class="comment">// Do not ignore embedded fields of unexported struct types</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>					<span class="comment">// since they may have exported fields.</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>				} else if !sf.IsExported() {
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>					<span class="comment">// Ignore unexported non-embedded fields.</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>					continue
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>				}
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>				tag := sf.Tag.Get(&#34;json&#34;)
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>				if tag == &#34;-&#34; {
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>					continue
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>				}
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>				name, opts := parseTag(tag)
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>				if !isValidTag(name) {
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>					name = &#34;&#34;
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>				}
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>				index := make([]int, len(f.index)+1)
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>				copy(index, f.index)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>				index[len(f.index)] = i
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>				ft := sf.Type
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>				if ft.Name() == &#34;&#34; &amp;&amp; ft.Kind() == reflect.Pointer {
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>					<span class="comment">// Follow pointer.</span>
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>					ft = ft.Elem()
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>				}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>				<span class="comment">// Only strings, floats, integers, and booleans can be quoted.</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>				quoted := false
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>				if opts.Contains(&#34;string&#34;) {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>					switch ft.Kind() {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>					case reflect.Bool,
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>						reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>						reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr,
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>						reflect.Float32, reflect.Float64,
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>						reflect.String:
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>						quoted = true
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>					}
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>				}
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>				<span class="comment">// Record found field and index sequence.</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>				if name != &#34;&#34; || !sf.Anonymous || ft.Kind() != reflect.Struct {
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>					tagged := name != &#34;&#34;
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>					if name == &#34;&#34; {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>						name = sf.Name
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>					}
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>					field := field{
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>						name:      name,
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>						tag:       tagged,
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>						index:     index,
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>						typ:       ft,
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>						omitEmpty: opts.Contains(&#34;omitempty&#34;),
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>						quoted:    quoted,
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>					}
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>					field.nameBytes = []byte(field.name)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>					<span class="comment">// Build nameEscHTML and nameNonEsc ahead of time.</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>					nameEscBuf = appendHTMLEscape(nameEscBuf[:0], field.nameBytes)
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>					field.nameEscHTML = `&#34;` + string(nameEscBuf) + `&#34;:`
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>					field.nameNonEsc = `&#34;` + field.name + `&#34;:`
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>					fields = append(fields, field)
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>					if count[f.typ] &gt; 1 {
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>						<span class="comment">// If there were multiple instances, add a second,</span>
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>						<span class="comment">// so that the annihilation code will see a duplicate.</span>
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>						<span class="comment">// It only cares about the distinction between 1 and 2,</span>
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>						<span class="comment">// so don&#39;t bother generating any more copies.</span>
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>						fields = append(fields, fields[len(fields)-1])
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>					}
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>					continue
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>				}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>				<span class="comment">// Record new anonymous struct to explore in next round.</span>
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>				nextCount[ft]++
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>				if nextCount[ft] == 1 {
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>					next = append(next, field{name: ft.Name(), index: index, typ: ft})
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>				}
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>			}
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		}
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	}
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	sort.Slice(fields, func(i, j int) bool {
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		x := fields
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		<span class="comment">// sort field by name, breaking ties with depth, then</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		<span class="comment">// breaking ties with &#34;name came from json tag&#34;, then</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		<span class="comment">// breaking ties with index sequence.</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		if x[i].name != x[j].name {
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>			return x[i].name &lt; x[j].name
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		}
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		if len(x[i].index) != len(x[j].index) {
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>			return len(x[i].index) &lt; len(x[j].index)
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		}
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		if x[i].tag != x[j].tag {
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			return x[i].tag
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		}
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		return byIndex(x).Less(i, j)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	})
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	<span class="comment">// Delete all fields that are hidden by the Go rules for embedded fields,</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	<span class="comment">// except that fields with JSON tags are promoted.</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	<span class="comment">// The fields are sorted in primary order of name, secondary order</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	<span class="comment">// of field index length. Loop over names; for each name, delete</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	<span class="comment">// hidden fields by choosing the one dominant field that survives.</span>
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	out := fields[:0]
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	for advance, i := 0, 0; i &lt; len(fields); i += advance {
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		<span class="comment">// One iteration per name.</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		<span class="comment">// Find the sequence of fields with the name of this first field.</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>		fi := fields[i]
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>		name := fi.name
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		for advance = 1; i+advance &lt; len(fields); advance++ {
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>			fj := fields[i+advance]
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>			if fj.name != name {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>				break
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>			}
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		if advance == 1 { <span class="comment">// Only one field with this name</span>
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>			out = append(out, fi)
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			continue
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>		}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>		dominant, ok := dominantField(fields[i : i+advance])
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>		if ok {
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>			out = append(out, dominant)
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>		}
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>	}
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>	fields = out
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>	sort.Sort(byIndex(fields))
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	for i := range fields {
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>		f := &amp;fields[i]
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		f.encoder = typeEncoder(typeByIndex(t, f.index))
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	}
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	exactNameIndex := make(map[string]*field, len(fields))
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>	foldedNameIndex := make(map[string]*field, len(fields))
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>	for i, field := range fields {
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>		exactNameIndex[field.name] = &amp;fields[i]
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>		<span class="comment">// For historical reasons, first folded match takes precedence.</span>
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>		if _, ok := foldedNameIndex[string(foldName(field.nameBytes))]; !ok {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>			foldedNameIndex[string(foldName(field.nameBytes))] = &amp;fields[i]
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>		}
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>	}
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>	return structFields{fields, exactNameIndex, foldedNameIndex}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>}
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span><span class="comment">// dominantField looks through the fields, all of which are known to</span>
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span><span class="comment">// have the same name, to find the single field that dominates the</span>
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span><span class="comment">// others using Go&#39;s embedding rules, modified by the presence of</span>
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span><span class="comment">// JSON tags. If there are multiple top-level fields, the boolean</span>
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span><span class="comment">// will be false: This condition is an error in Go and we skip all</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span><span class="comment">// the fields.</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>func dominantField(fields []field) (field, bool) {
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>	<span class="comment">// The fields are sorted in increasing index-length order, then by presence of tag.</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>	<span class="comment">// That means that the first field is the dominant one. We need only check</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>	<span class="comment">// for error cases: two fields at top level, either both tagged or neither tagged.</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>	if len(fields) &gt; 1 &amp;&amp; len(fields[0].index) == len(fields[1].index) &amp;&amp; fields[0].tag == fields[1].tag {
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>		return field{}, false
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	}
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	return fields[0], true
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>}
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>var fieldCache sync.Map <span class="comment">// map[reflect.Type]structFields</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span><span class="comment">// cachedTypeFields is like typeFields but uses a cache to avoid repeated work.</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>func cachedTypeFields(t reflect.Type) structFields {
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	if f, ok := fieldCache.Load(t); ok {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		return f.(structFields)
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	f, _ := fieldCache.LoadOrStore(t, typeFields(t))
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	return f.(structFields)
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>}
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>func mayAppendQuote(b []byte, quoted bool) []byte {
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	if quoted {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>		b = append(b, &#39;&#34;&#39;)
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>	return b
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>}
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>
</pre><p><a href="encode.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
