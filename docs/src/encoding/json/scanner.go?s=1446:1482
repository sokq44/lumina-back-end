<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/json/scanner.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./scanner.go?s=1446:1482#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/json">json</a>/<span class="text-muted">scanner.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/json">encoding/json</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package json
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// JSON value parser state machine.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// Just about at the limit of what is reasonable to write by hand.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Some parts are a bit tedious, but overall it nicely factors out the</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// otherwise common code from the multiple scanning functions</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// in this package (Compact, Indent, checkValid, etc).</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// This file starts with two simple examples using the scanner</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// before diving into the scanner itself.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>import (
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// Valid reports whether data is a valid JSON encoding.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>func Valid(data []byte) bool {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	scan := newScanner()
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	defer freeScanner(scan)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	return checkValid(data, scan) == nil
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// checkValid verifies that data is valid JSON-encoded data.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// scan is passed in for use by checkValid to avoid an allocation.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// checkValid returns nil or a SyntaxError.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func checkValid(data []byte, scan *scanner) error {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	scan.reset()
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	for _, c := range data {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		scan.bytes++
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		if scan.step(scan, c) == scanError {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>			return scan.err
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	if scan.eof() == scanError {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		return scan.err
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	return nil
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// A SyntaxError is a description of a JSON syntax error.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// [Unmarshal] will return a SyntaxError if the JSON can&#39;t be parsed.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>type SyntaxError struct {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	msg    string <span class="comment">// description of error</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	Offset int64  <span class="comment">// error occurred after reading Offset bytes</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="selection">func (e *SyntaxError) Error() string</span> { return e.msg }
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// A scanner is a JSON scanning state machine.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Callers call scan.reset and then pass bytes in one at a time</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// by calling scan.step(&amp;scan, c) for each byte.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// The return value, referred to as an opcode, tells the</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// caller about significant parsing events like beginning</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// and ending literals, objects, and arrays, so that the</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// caller can follow along if it wishes.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// The return value scanEnd indicates that a single top-level</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// JSON value has been completed, *before* the byte that</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// just got passed in.  (The indication must be delayed in order</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// to recognize the end of numbers: is 123 a whole value or</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// the beginning of 12345e+6?).</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>type scanner struct {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// The step is a func to be called to execute the next transition.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// Also tried using an integer constant and a single func</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// with a switch, but using the func directly was 10% faster</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// on a 64-bit Mac Mini, and it&#39;s nicer to read.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	step func(*scanner, byte) int
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// Reached end of top-level value.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	endTop bool
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// Stack of what we&#39;re in the middle of - array values, object keys, object values.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	parseState []int
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// Error that happened, if any.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	err error
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// total bytes consumed, updated by decoder.Decode (and deliberately</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// not set to zero by scan.reset)</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	bytes int64
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>var scannerPool = sync.Pool{
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	New: func() any {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		return &amp;scanner{}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	},
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func newScanner() *scanner {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	scan := scannerPool.Get().(*scanner)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// scan.reset by design doesn&#39;t set bytes to zero</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	scan.bytes = 0
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	scan.reset()
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	return scan
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func freeScanner(scan *scanner) {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Avoid hanging on to too much memory in extreme cases.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if len(scan.parseState) &gt; 1024 {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		scan.parseState = nil
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	scannerPool.Put(scan)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// These values are returned by the state transition functions</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// assigned to scanner.state and the method scanner.eof.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// They give details about the current state of the scan that</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// callers might be interested to know about.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// It is okay to ignore the return value of any particular</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// call to scanner.state: if one call returns scanError,</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// every subsequent call will return scanError too.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>const (
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Continue.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	scanContinue     = iota <span class="comment">// uninteresting byte</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	scanBeginLiteral        <span class="comment">// end implied by next result != scanContinue</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	scanBeginObject         <span class="comment">// begin object</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	scanObjectKey           <span class="comment">// just finished object key (string)</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	scanObjectValue         <span class="comment">// just finished non-last object value</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	scanEndObject           <span class="comment">// end object (implies scanObjectValue if possible)</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	scanBeginArray          <span class="comment">// begin array</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	scanArrayValue          <span class="comment">// just finished array value</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	scanEndArray            <span class="comment">// end array (implies scanArrayValue if possible)</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	scanSkipSpace           <span class="comment">// space byte; can skip; known to be last &#34;continue&#34; result</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// Stop.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	scanEnd   <span class="comment">// top-level value ended *before* this byte; known to be first &#34;stop&#34; result</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	scanError <span class="comment">// hit an error, scanner.err.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// These values are stored in the parseState stack.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// They give the current state of a composite value</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// being scanned. If the parser is inside a nested value</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// the parseState describes the nested state, outermost at entry 0.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>const (
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	parseObjectKey   = iota <span class="comment">// parsing object key (before colon)</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	parseObjectValue        <span class="comment">// parsing object value (after colon)</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	parseArrayValue         <span class="comment">// parsing array value</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// This limits the max nesting depth to prevent stack overflow.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// This is permitted by https://tools.ietf.org/html/rfc7159#section-9</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>const maxNestingDepth = 10000
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// reset prepares the scanner for use.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// It must be called before calling s.step.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>func (s *scanner) reset() {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	s.step = stateBeginValue
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	s.parseState = s.parseState[0:0]
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	s.err = nil
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	s.endTop = false
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// eof tells the scanner that the end of input has been reached.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// It returns a scan status just as s.step does.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (s *scanner) eof() int {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if s.err != nil {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return scanError
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	if s.endTop {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		return scanEnd
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	s.step(s, &#39; &#39;)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if s.endTop {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return scanEnd
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if s.err == nil {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		s.err = &amp;SyntaxError{&#34;unexpected end of JSON input&#34;, s.bytes}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return scanError
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// pushParseState pushes a new parse state p onto the parse stack.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// an error state is returned if maxNestingDepth was exceeded, otherwise successState is returned.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (s *scanner) pushParseState(c byte, newParseState int, successState int) int {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	s.parseState = append(s.parseState, newParseState)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if len(s.parseState) &lt;= maxNestingDepth {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		return successState
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	return s.error(c, &#34;exceeded max depth&#34;)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// popParseState pops a parse state (already obtained) off the stack</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// and updates s.step accordingly.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (s *scanner) popParseState() {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	n := len(s.parseState) - 1
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	s.parseState = s.parseState[0:n]
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if n == 0 {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		s.step = stateEndTop
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		s.endTop = true
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	} else {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func isSpace(c byte) bool {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return c &lt;= &#39; &#39; &amp;&amp; (c == &#39; &#39; || c == &#39;\t&#39; || c == &#39;\r&#39; || c == &#39;\n&#39;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// stateBeginValueOrEmpty is the state after reading `[`.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func stateBeginValueOrEmpty(s *scanner, c byte) int {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	if isSpace(c) {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		return scanSkipSpace
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if c == &#39;]&#39; {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return stateEndValue(s, c)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return stateBeginValue(s, c)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// stateBeginValue is the state at the beginning of the input.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func stateBeginValue(s *scanner, c byte) int {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if isSpace(c) {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return scanSkipSpace
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	switch c {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	case &#39;{&#39;:
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		s.step = stateBeginStringOrEmpty
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return s.pushParseState(c, parseObjectKey, scanBeginObject)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	case &#39;[&#39;:
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		s.step = stateBeginValueOrEmpty
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return s.pushParseState(c, parseArrayValue, scanBeginArray)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	case &#39;&#34;&#39;:
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		s.step = stateInString
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	case &#39;-&#39;:
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		s.step = stateNeg
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	case &#39;0&#39;: <span class="comment">// beginning of 0.123</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		s.step = state0
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	case &#39;t&#39;: <span class="comment">// beginning of true</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		s.step = stateT
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	case &#39;f&#39;: <span class="comment">// beginning of false</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		s.step = stateF
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	case &#39;n&#39;: <span class="comment">// beginning of null</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		s.step = stateN
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	if &#39;1&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; { <span class="comment">// beginning of 1234.5</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		s.step = state1
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	return s.error(c, &#34;looking for beginning of value&#34;)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// stateBeginStringOrEmpty is the state after reading `{`.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func stateBeginStringOrEmpty(s *scanner, c byte) int {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if isSpace(c) {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return scanSkipSpace
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if c == &#39;}&#39; {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		n := len(s.parseState)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		s.parseState[n-1] = parseObjectValue
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		return stateEndValue(s, c)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return stateBeginString(s, c)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// stateBeginString is the state after reading `{&#34;key&#34;: value,`.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>func stateBeginString(s *scanner, c byte) int {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	if isSpace(c) {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		return scanSkipSpace
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	if c == &#39;&#34;&#39; {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		s.step = stateInString
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return scanBeginLiteral
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return s.error(c, &#34;looking for beginning of object key string&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// stateEndValue is the state after completing a value,</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// such as after reading `{}` or `true` or `[&#34;x&#34;`.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func stateEndValue(s *scanner, c byte) int {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	n := len(s.parseState)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if n == 0 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		<span class="comment">// Completed top-level before the current byte.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		s.step = stateEndTop
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		s.endTop = true
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return stateEndTop(s, c)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	if isSpace(c) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return scanSkipSpace
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	ps := s.parseState[n-1]
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	switch ps {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	case parseObjectKey:
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		if c == &#39;:&#39; {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			s.parseState[n-1] = parseObjectValue
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			s.step = stateBeginValue
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			return scanObjectKey
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		return s.error(c, &#34;after object key&#34;)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	case parseObjectValue:
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		if c == &#39;,&#39; {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			s.parseState[n-1] = parseObjectKey
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			s.step = stateBeginString
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			return scanObjectValue
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if c == &#39;}&#39; {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			s.popParseState()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			return scanEndObject
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return s.error(c, &#34;after object key:value pair&#34;)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	case parseArrayValue:
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		if c == &#39;,&#39; {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			s.step = stateBeginValue
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			return scanArrayValue
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		if c == &#39;]&#39; {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			s.popParseState()
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			return scanEndArray
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		return s.error(c, &#34;after array element&#34;)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	return s.error(c, &#34;&#34;)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">// stateEndTop is the state after finishing the top-level value,</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// such as after reading `{}` or `[1,2,3]`.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// Only space characters should be seen now.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>func stateEndTop(s *scanner, c byte) int {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if !isSpace(c) {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// Complain about non-space byte on next call.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		s.error(c, &#34;after top-level value&#34;)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return scanEnd
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// stateInString is the state after reading `&#34;`.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>func stateInString(s *scanner, c byte) int {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if c == &#39;&#34;&#39; {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		return scanContinue
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if c == &#39;\\&#39; {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		s.step = stateInStringEsc
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return scanContinue
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if c &lt; 0x20 {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		return s.error(c, &#34;in string literal&#34;)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	return scanContinue
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// stateInStringEsc is the state after reading `&#34;\` during a quoted string.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func stateInStringEsc(s *scanner, c byte) int {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	switch c {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	case &#39;b&#39;, &#39;f&#39;, &#39;n&#39;, &#39;r&#39;, &#39;t&#39;, &#39;\\&#39;, &#39;/&#39;, &#39;&#34;&#39;:
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		s.step = stateInString
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		return scanContinue
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	case &#39;u&#39;:
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		s.step = stateInStringEscU
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		return scanContinue
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	return s.error(c, &#34;in string escape code&#34;)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// stateInStringEscU is the state after reading `&#34;\u` during a quoted string.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func stateInStringEscU(s *scanner, c byte) int {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		s.step = stateInStringEscU1
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		return scanContinue
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	<span class="comment">// numbers</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	return s.error(c, &#34;in \\u hexadecimal character escape&#34;)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// stateInStringEscU1 is the state after reading `&#34;\u1` during a quoted string.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func stateInStringEscU1(s *scanner, c byte) int {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		s.step = stateInStringEscU12
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		return scanContinue
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	<span class="comment">// numbers</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	return s.error(c, &#34;in \\u hexadecimal character escape&#34;)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// stateInStringEscU12 is the state after reading `&#34;\u12` during a quoted string.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func stateInStringEscU12(s *scanner, c byte) int {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		s.step = stateInStringEscU123
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		return scanContinue
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	<span class="comment">// numbers</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	return s.error(c, &#34;in \\u hexadecimal character escape&#34;)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// stateInStringEscU123 is the state after reading `&#34;\u123` during a quoted string.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>func stateInStringEscU123(s *scanner, c byte) int {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		s.step = stateInString
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		return scanContinue
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// numbers</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	return s.error(c, &#34;in \\u hexadecimal character escape&#34;)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// stateNeg is the state after reading `-` during a number.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func stateNeg(s *scanner, c byte) int {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if c == &#39;0&#39; {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		s.step = state0
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		return scanContinue
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	if &#39;1&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		s.step = state1
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		return scanContinue
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	return s.error(c, &#34;in numeric literal&#34;)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// state1 is the state after reading a non-zero integer during a number,</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// such as after reading `1` or `100` but not `0`.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func state1(s *scanner, c byte) int {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		s.step = state1
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		return scanContinue
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	return state0(s, c)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// state0 is the state after reading `0` during a number.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>func state0(s *scanner, c byte) int {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	if c == &#39;.&#39; {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		s.step = stateDot
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		return scanContinue
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	if c == &#39;e&#39; || c == &#39;E&#39; {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		s.step = stateE
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		return scanContinue
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	return stateEndValue(s, c)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// stateDot is the state after reading the integer and decimal point in a number,</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// such as after reading `1.`.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>func stateDot(s *scanner, c byte) int {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		s.step = stateDot0
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		return scanContinue
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	return s.error(c, &#34;after decimal point in numeric literal&#34;)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// stateDot0 is the state after reading the integer, decimal point, and subsequent</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// digits of a number, such as after reading `3.14`.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>func stateDot0(s *scanner, c byte) int {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		return scanContinue
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	if c == &#39;e&#39; || c == &#39;E&#39; {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		s.step = stateE
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		return scanContinue
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	return stateEndValue(s, c)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// stateE is the state after reading the mantissa and e in a number,</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// such as after reading `314e` or `0.314e`.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>func stateE(s *scanner, c byte) int {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	if c == &#39;+&#39; || c == &#39;-&#39; {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		s.step = stateESign
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		return scanContinue
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	return stateESign(s, c)
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// stateESign is the state after reading the mantissa, e, and sign in a number,</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// such as after reading `314e-` or `0.314e+`.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>func stateESign(s *scanner, c byte) int {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		s.step = stateE0
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		return scanContinue
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	return s.error(c, &#34;in exponent of numeric literal&#34;)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// stateE0 is the state after reading the mantissa, e, optional sign,</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// and at least one digit of the exponent in a number,</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// such as after reading `314e-2` or `0.314e+1` or `3.14e0`.</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>func stateE0(s *scanner, c byte) int {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		return scanContinue
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	return stateEndValue(s, c)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// stateT is the state after reading `t`.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func stateT(s *scanner, c byte) int {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	if c == &#39;r&#39; {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		s.step = stateTr
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		return scanContinue
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal true (expecting &#39;r&#39;)&#34;)
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">// stateTr is the state after reading `tr`.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func stateTr(s *scanner, c byte) int {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	if c == &#39;u&#39; {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		s.step = stateTru
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return scanContinue
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal true (expecting &#39;u&#39;)&#34;)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// stateTru is the state after reading `tru`.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>func stateTru(s *scanner, c byte) int {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	if c == &#39;e&#39; {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		return scanContinue
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal true (expecting &#39;e&#39;)&#34;)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">// stateF is the state after reading `f`.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>func stateF(s *scanner, c byte) int {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	if c == &#39;a&#39; {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		s.step = stateFa
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		return scanContinue
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal false (expecting &#39;a&#39;)&#34;)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span><span class="comment">// stateFa is the state after reading `fa`.</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>func stateFa(s *scanner, c byte) int {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	if c == &#39;l&#39; {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		s.step = stateFal
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		return scanContinue
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal false (expecting &#39;l&#39;)&#34;)
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// stateFal is the state after reading `fal`.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>func stateFal(s *scanner, c byte) int {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	if c == &#39;s&#39; {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		s.step = stateFals
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		return scanContinue
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal false (expecting &#39;s&#39;)&#34;)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// stateFals is the state after reading `fals`.</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>func stateFals(s *scanner, c byte) int {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	if c == &#39;e&#39; {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return scanContinue
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal false (expecting &#39;e&#39;)&#34;)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// stateN is the state after reading `n`.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>func stateN(s *scanner, c byte) int {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if c == &#39;u&#39; {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		s.step = stateNu
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		return scanContinue
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal null (expecting &#39;u&#39;)&#34;)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span><span class="comment">// stateNu is the state after reading `nu`.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>func stateNu(s *scanner, c byte) int {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	if c == &#39;l&#39; {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		s.step = stateNul
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		return scanContinue
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal null (expecting &#39;l&#39;)&#34;)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// stateNul is the state after reading `nul`.</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>func stateNul(s *scanner, c byte) int {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	if c == &#39;l&#39; {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		s.step = stateEndValue
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		return scanContinue
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	return s.error(c, &#34;in literal null (expecting &#39;l&#39;)&#34;)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// stateError is the state after reaching a syntax error,</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">// such as after reading `[1}` or `5.1.2`.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>func stateError(s *scanner, c byte) int {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	return scanError
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">// error records an error and switches to the error state.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>func (s *scanner) error(c byte, context string) int {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	s.step = stateError
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	s.err = &amp;SyntaxError{&#34;invalid character &#34; + quoteChar(c) + &#34; &#34; + context, s.bytes}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	return scanError
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">// quoteChar formats c as a quoted character literal.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>func quoteChar(c byte) string {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	<span class="comment">// special cases - different from quoted strings</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	if c == &#39;\&#39;&#39; {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		return `&#39;\&#39;&#39;`
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	if c == &#39;&#34;&#39; {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		return `&#39;&#34;&#39;`
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	<span class="comment">// use quoted string with different quotation marks</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	s := strconv.Quote(string(c))
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	return &#34;&#39;&#34; + s[1:len(s)-1] + &#34;&#39;&#34;
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>
</pre><p><a href="scanner.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
