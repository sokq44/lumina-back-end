<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/json/stream.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./stream.go?s=683:720#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/json">json</a>/<span class="text-muted">stream.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/json">encoding/json</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package json
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// A Decoder reads and decodes JSON values from an input stream.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>type Decoder struct {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	r       io.Reader
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	buf     []byte
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	d       decodeState
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	scanp   int   <span class="comment">// start of unread data in buf</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	scanned int64 <span class="comment">// amount of data already scanned</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	scan    scanner
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	err     error
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	tokenState int
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	tokenStack []int
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// NewDecoder returns a new decoder that reads from r.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// The decoder introduces its own buffering and may</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// read data from r beyond the JSON values requested.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="selection">func NewDecoder(r io.Reader) *Decoder</span> {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	return &amp;Decoder{r: r}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// UseNumber causes the Decoder to unmarshal a number into an interface{} as a</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// [Number] instead of as a float64.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func (dec *Decoder) UseNumber() { dec.d.useNumber = true }
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// DisallowUnknownFields causes the Decoder to return an error when the destination</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// is a struct and the input contains object keys which do not match any</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// non-ignored, exported fields in the destination.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (dec *Decoder) DisallowUnknownFields() { dec.d.disallowUnknownFields = true }
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Decode reads the next JSON-encoded value from its</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// input and stores it in the value pointed to by v.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// See the documentation for [Unmarshal] for details about</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// the conversion of JSON into a Go value.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func (dec *Decoder) Decode(v any) error {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if dec.err != nil {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return dec.err
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	if err := dec.tokenPrepareForDecode(); err != nil {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		return err
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	if !dec.tokenValueAllowed() {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		return &amp;SyntaxError{msg: &#34;not at beginning of value&#34;, Offset: dec.InputOffset()}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// Read whole value into buffer.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	n, err := dec.readValue()
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if err != nil {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		return err
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	dec.d.init(dec.buf[dec.scanp : dec.scanp+n])
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	dec.scanp += n
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t save err from unmarshal into dec.err:</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// the connection is still usable since we read a complete JSON</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// object from it before the error happened.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	err = dec.d.unmarshal(v)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// fixup token streaming state</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	dec.tokenValueEnd()
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return err
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// Buffered returns a reader of the data remaining in the Decoder&#39;s</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// buffer. The reader is valid until the next call to [Decoder.Decode].</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func (dec *Decoder) Buffered() io.Reader {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	return bytes.NewReader(dec.buf[dec.scanp:])
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// readValue reads a JSON value into dec.buf.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// It returns the length of the encoding.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (dec *Decoder) readValue() (int, error) {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	dec.scan.reset()
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	scanp := dec.scanp
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	var err error
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>Input:
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// help the compiler see that scanp is never negative, so it can remove</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// some bounds checks below.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	for scanp &gt;= 0 {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		<span class="comment">// Look in the buffer for a new value.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		for ; scanp &lt; len(dec.buf); scanp++ {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			c := dec.buf[scanp]
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			dec.scan.bytes++
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			switch dec.scan.step(&amp;dec.scan, c) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			case scanEnd:
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>				<span class="comment">// scanEnd is delayed one byte so we decrement</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>				<span class="comment">// the scanner bytes count by 1 to ensure that</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>				<span class="comment">// this value is correct in the next call of Decode.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>				dec.scan.bytes--
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>				break Input
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			case scanEndObject, scanEndArray:
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>				<span class="comment">// scanEnd is delayed one byte.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				<span class="comment">// We might block trying to get that byte from src,</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>				<span class="comment">// so instead invent a space byte.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				if stateEndValue(&amp;dec.scan, &#39; &#39;) == scanEnd {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>					scanp++
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>					break Input
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>				}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			case scanError:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>				dec.err = dec.scan.err
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				return 0, dec.scan.err
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		<span class="comment">// Did the last read have an error?</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		<span class="comment">// Delayed until now to allow buffer scan.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		if err != nil {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			if err == io.EOF {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>				if dec.scan.step(&amp;dec.scan, &#39; &#39;) == scanEnd {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>					break Input
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>				}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				if nonSpace(dec.buf) {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>					err = io.ErrUnexpectedEOF
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			dec.err = err
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			return 0, err
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		n := scanp - dec.scanp
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		err = dec.refill()
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		scanp = dec.scanp + n
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return scanp - dec.scanp, nil
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func (dec *Decoder) refill() error {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// Make room to read more into the buffer.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// First slide down data already consumed.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if dec.scanp &gt; 0 {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		dec.scanned += int64(dec.scanp)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		n := copy(dec.buf, dec.buf[dec.scanp:])
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		dec.buf = dec.buf[:n]
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		dec.scanp = 0
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// Grow buffer if not large enough.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	const minRead = 512
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if cap(dec.buf)-len(dec.buf) &lt; minRead {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		newBuf := make([]byte, len(dec.buf), 2*cap(dec.buf)+minRead)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		copy(newBuf, dec.buf)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		dec.buf = newBuf
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// Read. Delay error for next iteration (after scan).</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	n, err := dec.r.Read(dec.buf[len(dec.buf):cap(dec.buf)])
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	dec.buf = dec.buf[0 : len(dec.buf)+n]
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	return err
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func nonSpace(b []byte) bool {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	for _, c := range b {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		if !isSpace(c) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			return true
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	return false
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// An Encoder writes JSON values to an output stream.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>type Encoder struct {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	w          io.Writer
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	err        error
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	escapeHTML bool
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	indentBuf    []byte
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	indentPrefix string
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	indentValue  string
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// NewEncoder returns a new encoder that writes to w.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func NewEncoder(w io.Writer) *Encoder {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return &amp;Encoder{w: w, escapeHTML: true}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// Encode writes the JSON encoding of v to the stream,</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// followed by a newline character.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// See the documentation for [Marshal] for details about the</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// conversion of Go values to JSON.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func (enc *Encoder) Encode(v any) error {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if enc.err != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return enc.err
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	e := newEncodeState()
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	defer encodeStatePool.Put(e)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	err := e.marshal(v, encOpts{escapeHTML: enc.escapeHTML})
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if err != nil {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return err
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// Terminate each value with a newline.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// This makes the output look a little nicer</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// when debugging, and some kind of space</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// is required if the encoded value was a number,</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// so that the reader knows there aren&#39;t more</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// digits coming.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	e.WriteByte(&#39;\n&#39;)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	b := e.Bytes()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if enc.indentPrefix != &#34;&#34; || enc.indentValue != &#34;&#34; {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		enc.indentBuf, err = appendIndent(enc.indentBuf[:0], b, enc.indentPrefix, enc.indentValue)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if err != nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return err
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		b = enc.indentBuf
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	if _, err = enc.w.Write(b); err != nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		enc.err = err
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	return err
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// SetIndent instructs the encoder to format each subsequent encoded</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// value as if indented by the package-level function Indent(dst, src, prefix, indent).</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// Calling SetIndent(&#34;&#34;, &#34;&#34;) disables indentation.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func (enc *Encoder) SetIndent(prefix, indent string) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	enc.indentPrefix = prefix
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	enc.indentValue = indent
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// SetEscapeHTML specifies whether problematic HTML characters</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// should be escaped inside JSON quoted strings.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// The default behavior is to escape &amp;, &lt;, and &gt; to \u0026, \u003c, and \u003e</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// to avoid certain safety problems that can arise when embedding JSON in HTML.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// In non-HTML settings where the escaping interferes with the readability</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// of the output, SetEscapeHTML(false) disables this behavior.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>func (enc *Encoder) SetEscapeHTML(on bool) {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	enc.escapeHTML = on
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// RawMessage is a raw encoded JSON value.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// It implements [Marshaler] and [Unmarshaler] and can</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// be used to delay JSON decoding or precompute a JSON encoding.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>type RawMessage []byte
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// MarshalJSON returns m as the JSON encoding of m.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (m RawMessage) MarshalJSON() ([]byte, error) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	if m == nil {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		return []byte(&#34;null&#34;), nil
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	return m, nil
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// UnmarshalJSON sets *m to a copy of data.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (m *RawMessage) UnmarshalJSON(data []byte) error {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	if m == nil {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		return errors.New(&#34;json.RawMessage: UnmarshalJSON on nil pointer&#34;)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	*m = append((*m)[0:0], data...)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return nil
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>var _ Marshaler = (*RawMessage)(nil)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>var _ Unmarshaler = (*RawMessage)(nil)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// A Token holds a value of one of these types:</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">//   - [Delim], for the four JSON delimiters [ ] { }</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//   - bool, for JSON booleans</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//   - float64, for JSON numbers</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//   - [Number], for JSON numbers</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">//   - string, for JSON string literals</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">//   - nil, for JSON null</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>type Token any
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>const (
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	tokenTopValue = iota
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	tokenArrayStart
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	tokenArrayValue
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	tokenArrayComma
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	tokenObjectStart
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	tokenObjectKey
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	tokenObjectColon
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	tokenObjectValue
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	tokenObjectComma
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// advance tokenstate from a separator state to a value state</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>func (dec *Decoder) tokenPrepareForDecode() error {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// Note: Not calling peek before switch, to avoid</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// putting peek into the standard Decode path.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// peek is only called when using the Token API.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	switch dec.tokenState {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	case tokenArrayComma:
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		c, err := dec.peek()
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if err != nil {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			return err
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if c != &#39;,&#39; {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			return &amp;SyntaxError{&#34;expected comma after array element&#34;, dec.InputOffset()}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		dec.scanp++
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		dec.tokenState = tokenArrayValue
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	case tokenObjectColon:
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		c, err := dec.peek()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		if err != nil {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			return err
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if c != &#39;:&#39; {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			return &amp;SyntaxError{&#34;expected colon after object key&#34;, dec.InputOffset()}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		dec.scanp++
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		dec.tokenState = tokenObjectValue
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return nil
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func (dec *Decoder) tokenValueAllowed() bool {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	switch dec.tokenState {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	case tokenTopValue, tokenArrayStart, tokenArrayValue, tokenObjectValue:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		return true
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	return false
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>func (dec *Decoder) tokenValueEnd() {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	switch dec.tokenState {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	case tokenArrayStart, tokenArrayValue:
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		dec.tokenState = tokenArrayComma
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	case tokenObjectValue:
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		dec.tokenState = tokenObjectComma
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// A Delim is a JSON array or object delimiter, one of [ ] { or }.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>type Delim rune
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>func (d Delim) String() string {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return string(d)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// Token returns the next JSON token in the input stream.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// At the end of the input stream, Token returns nil, [io.EOF].</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// Token guarantees that the delimiters [ ] { } it returns are</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// properly nested and matched: if Token encounters an unexpected</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// delimiter in the input, it will return an error.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// The input stream consists of basic JSON values—bool, string,</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// number, and null—along with delimiters [ ] { } of type [Delim]</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// to mark the start and end of arrays and objects.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// Commas and colons are elided.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>func (dec *Decoder) Token() (Token, error) {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	for {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		c, err := dec.peek()
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if err != nil {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			return nil, err
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		switch c {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		case &#39;[&#39;:
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			if !dec.tokenValueAllowed() {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			dec.scanp++
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			dec.tokenStack = append(dec.tokenStack, dec.tokenState)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			dec.tokenState = tokenArrayStart
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			return Delim(&#39;[&#39;), nil
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		case &#39;]&#39;:
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			if dec.tokenState != tokenArrayStart &amp;&amp; dec.tokenState != tokenArrayComma {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			dec.scanp++
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			dec.tokenState = dec.tokenStack[len(dec.tokenStack)-1]
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			dec.tokenStack = dec.tokenStack[:len(dec.tokenStack)-1]
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			dec.tokenValueEnd()
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			return Delim(&#39;]&#39;), nil
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		case &#39;{&#39;:
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			if !dec.tokenValueAllowed() {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			dec.scanp++
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			dec.tokenStack = append(dec.tokenStack, dec.tokenState)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			dec.tokenState = tokenObjectStart
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			return Delim(&#39;{&#39;), nil
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		case &#39;}&#39;:
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			if dec.tokenState != tokenObjectStart &amp;&amp; dec.tokenState != tokenObjectComma {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			dec.scanp++
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			dec.tokenState = dec.tokenStack[len(dec.tokenStack)-1]
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			dec.tokenStack = dec.tokenStack[:len(dec.tokenStack)-1]
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			dec.tokenValueEnd()
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			return Delim(&#39;}&#39;), nil
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		case &#39;:&#39;:
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			if dec.tokenState != tokenObjectColon {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			dec.scanp++
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			dec.tokenState = tokenObjectValue
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			continue
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		case &#39;,&#39;:
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			if dec.tokenState == tokenArrayComma {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>				dec.scanp++
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				dec.tokenState = tokenArrayValue
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				continue
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			if dec.tokenState == tokenObjectComma {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				dec.scanp++
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>				dec.tokenState = tokenObjectKey
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>				continue
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			return dec.tokenError(c)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		case &#39;&#34;&#39;:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			if dec.tokenState == tokenObjectStart || dec.tokenState == tokenObjectKey {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>				var x string
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>				old := dec.tokenState
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>				dec.tokenState = tokenTopValue
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>				err := dec.Decode(&amp;x)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>				dec.tokenState = old
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>				if err != nil {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>					return nil, err
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>				}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				dec.tokenState = tokenObjectColon
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				return x, nil
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			fallthrough
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		default:
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			if !dec.tokenValueAllowed() {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>				return dec.tokenError(c)
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			var x any
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			if err := dec.Decode(&amp;x); err != nil {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				return nil, err
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			return x, nil
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>func (dec *Decoder) tokenError(c byte) (Token, error) {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	var context string
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	switch dec.tokenState {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	case tokenTopValue:
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		context = &#34; looking for beginning of value&#34;
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	case tokenArrayStart, tokenArrayValue, tokenObjectValue:
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		context = &#34; looking for beginning of value&#34;
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	case tokenArrayComma:
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		context = &#34; after array element&#34;
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	case tokenObjectKey:
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		context = &#34; looking for beginning of object key string&#34;
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	case tokenObjectColon:
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		context = &#34; after object key&#34;
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	case tokenObjectComma:
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		context = &#34; after object key:value pair&#34;
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	return nil, &amp;SyntaxError{&#34;invalid character &#34; + quoteChar(c) + context, dec.InputOffset()}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// More reports whether there is another element in the</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// current array or object being parsed.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (dec *Decoder) More() bool {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	c, err := dec.peek()
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	return err == nil &amp;&amp; c != &#39;]&#39; &amp;&amp; c != &#39;}&#39;
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>func (dec *Decoder) peek() (byte, error) {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	var err error
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	for {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		for i := dec.scanp; i &lt; len(dec.buf); i++ {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			c := dec.buf[i]
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			if isSpace(c) {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>				continue
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			dec.scanp = i
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			return c, nil
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		<span class="comment">// buffer has been scanned, now report any error</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		if err != nil {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			return 0, err
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		err = dec.refill()
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// InputOffset returns the input stream byte offset of the current decoder position.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">// The offset gives the location of the end of the most recently returned token</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// and the beginning of the next token.</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>func (dec *Decoder) InputOffset() int64 {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	return dec.scanned + int64(dec.scanp)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
</pre><p><a href="stream.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
