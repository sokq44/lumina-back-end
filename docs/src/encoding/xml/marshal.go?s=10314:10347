<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/xml/marshal.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./marshal.go?s=10314:10347#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/xml">xml</a>/<span class="text-muted">marshal.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/xml">encoding/xml</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package xml
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;encoding&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>const (
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// Header is a generic XML header suitable for use with the output of [Marshal].</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// This is not automatically added to any output of this package,</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// it is provided as a convenience.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Header = `&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;` + &#34;\n&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Marshal returns the XML encoding of v.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Marshal handles an array or slice by marshaling each of the elements.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Marshal handles a pointer by marshaling the value it points at or, if the</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// pointer is nil, by writing nothing. Marshal handles an interface value by</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// marshaling the value it contains or, if the interface value is nil, by</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// writing nothing. Marshal handles all other data by writing one or more XML</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// elements containing the data.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// The name for the XML elements is taken from, in order of preference:</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//   - the tag on the XMLName field, if the data is a struct</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//   - the value of the XMLName field of type [Name]</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//   - the tag of the struct field used to obtain the data</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//   - the name of the struct field used to obtain the data</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//   - the name of the marshaled type</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// The XML element for a struct contains marshaled elements for each of the</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// exported fields of the struct, with these exceptions:</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//   - the XMLName field, described above, is omitted.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;-&#34; is omitted.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;name,attr&#34; becomes an attribute with</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//     the given name in the XML element.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;,attr&#34; becomes an attribute with the</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//     field name in the XML element.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;,chardata&#34; is written as character data,</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//     not as an XML element.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;,cdata&#34; is written as character data</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//     wrapped in one or more &lt;![CDATA[ ... ]]&gt; tags, not as an XML element.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;,innerxml&#34; is written verbatim, not subject</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//     to the usual marshaling procedure.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//   - a field with tag &#34;,comment&#34; is written as an XML comment, not</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//     subject to the usual marshaling procedure. It must not contain</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//     the &#34;--&#34; string within it.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//   - a field with a tag including the &#34;omitempty&#34; option is omitted</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//     if the field value is empty. The empty values are false, 0, any</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//     nil pointer or interface value, and any array, slice, map, or</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//     string of length zero.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//   - an anonymous struct field is handled as if the fields of its</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//     value were part of the outer struct.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//   - a field implementing [Marshaler] is written by calling its MarshalXML</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//     method.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//   - a field implementing [encoding.TextMarshaler] is written by encoding the</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//     result of its MarshalText method as text.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// If a field uses a tag &#34;a&gt;b&gt;c&#34;, then the element c will be nested inside</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// parent elements a and b. Fields that appear next to each other that name</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// the same parent will be enclosed in one XML element.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// If the XML name for a struct field is defined by both the field tag and the</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// struct&#39;s XMLName field, the names must match.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// See [MarshalIndent] for an example.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// Marshal will return an error if asked to marshal a channel, function, or map.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func Marshal(v any) ([]byte, error) {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	enc := NewEncoder(&amp;b)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if err := enc.Encode(v); err != nil {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		return nil, err
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if err := enc.Close(); err != nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		return nil, err
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	return b.Bytes(), nil
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Marshaler is the interface implemented by objects that can marshal</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// themselves into valid XML elements.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// MarshalXML encodes the receiver as zero or more XML elements.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// By convention, arrays or slices are typically encoded as a sequence</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// of elements, one per entry.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Using start as the element tag is not required, but doing so</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// will enable [Unmarshal] to match the XML elements to the correct</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// struct field.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// One common implementation strategy is to construct a separate</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// value with a layout corresponding to the desired XML and then</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// to encode it using e.EncodeElement.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// Another common strategy is to use repeated calls to e.EncodeToken</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// to generate the XML output one token at a time.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// The sequence of encoded tokens must make up zero or more valid</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// XML elements.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>type Marshaler interface {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	MarshalXML(e *Encoder, start StartElement) error
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// MarshalerAttr is the interface implemented by objects that can marshal</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// themselves into valid XML attributes.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// MarshalXMLAttr returns an XML attribute with the encoded value of the receiver.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// Using name as the attribute name is not required, but doing so</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// will enable [Unmarshal] to match the attribute to the correct</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// struct field.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// If MarshalXMLAttr returns the zero attribute [Attr]{}, no attribute</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// will be generated in the output.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// MarshalXMLAttr is used only for struct fields with the</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// &#34;attr&#34; option in the field tag.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>type MarshalerAttr interface {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	MarshalXMLAttr(name Name) (Attr, error)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// MarshalIndent works like [Marshal], but each XML element begins on a new</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// indented line that starts with prefix and is followed by one or more</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// copies of indent according to the nesting depth.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func MarshalIndent(v any, prefix, indent string) ([]byte, error) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	enc := NewEncoder(&amp;b)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	enc.Indent(prefix, indent)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if err := enc.Encode(v); err != nil {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return nil, err
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if err := enc.Close(); err != nil {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return nil, err
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return b.Bytes(), nil
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// An Encoder writes XML data to an output stream.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>type Encoder struct {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	p printer
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// NewEncoder returns a new encoder that writes to w.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func NewEncoder(w io.Writer) *Encoder {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	e := &amp;Encoder{printer{w: bufio.NewWriter(w)}}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	e.p.encoder = e
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return e
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// Indent sets the encoder to generate XML in which each element</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// begins on a new indented line that starts with prefix and is followed by</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// one or more copies of indent according to the nesting depth.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (enc *Encoder) Indent(prefix, indent string) {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	enc.p.prefix = prefix
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	enc.p.indent = indent
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// Encode writes the XML encoding of v to the stream.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// See the documentation for [Marshal] for details about the conversion</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// of Go values to XML.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Encode calls [Encoder.Flush] before returning.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (enc *Encoder) Encode(v any) error {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	err := enc.p.marshalValue(reflect.ValueOf(v), nil, nil)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if err != nil {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return err
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return enc.p.w.Flush()
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// EncodeElement writes the XML encoding of v to the stream,</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// using start as the outermost tag in the encoding.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// See the documentation for [Marshal] for details about the conversion</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// of Go values to XML.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// EncodeElement calls [Encoder.Flush] before returning.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (enc *Encoder) EncodeElement(v any, start StartElement) error {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	err := enc.p.marshalValue(reflect.ValueOf(v), nil, &amp;start)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if err != nil {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		return err
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return enc.p.w.Flush()
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>var (
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	begComment  = []byte(&#34;&lt;!--&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	endComment  = []byte(&#34;--&gt;&#34;)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	endProcInst = []byte(&#34;?&gt;&#34;)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// EncodeToken writes the given XML token to the stream.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// It returns an error if [StartElement] and [EndElement] tokens are not properly matched.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// EncodeToken does not call [Encoder.Flush], because usually it is part of a larger operation</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// such as [Encoder.Encode] or [Encoder.EncodeElement] (or a custom [Marshaler]&#39;s MarshalXML invoked</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// during those), and those will call Flush when finished.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// Callers that create an Encoder and then invoke EncodeToken directly, without</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// using Encode or EncodeElement, need to call Flush when finished to ensure</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// that the XML is written to the underlying writer.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// EncodeToken allows writing a [ProcInst] with Target set to &#34;xml&#34; only as the first token</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// in the stream.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (enc *Encoder) EncodeToken(t Token) error {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	p := &amp;enc.p
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	switch t := t.(type) {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	case StartElement:
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		if err := p.writeStart(&amp;t); err != nil {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			return err
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	case EndElement:
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		if err := p.writeEnd(t.Name); err != nil {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			return err
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	case CharData:
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		escapeText(p, t, false)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	case Comment:
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if bytes.Contains(t, endComment) {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: EncodeToken of Comment containing --&gt; marker&#34;)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		p.WriteString(&#34;&lt;!--&#34;)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		p.Write(t)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		p.WriteString(&#34;--&gt;&#34;)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		return p.cachedWriteError()
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	case ProcInst:
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// First token to be encoded which is also a ProcInst with target of xml</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		<span class="comment">// is the xml declaration. The only ProcInst where target of xml is allowed.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		if t.Target == &#34;xml&#34; &amp;&amp; p.w.Buffered() != 0 {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: EncodeToken of ProcInst xml target only valid for xml declaration, first token encoded&#34;)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if !isNameString(t.Target) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: EncodeToken of ProcInst with invalid Target&#34;)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		if bytes.Contains(t.Inst, endProcInst) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: EncodeToken of ProcInst containing ?&gt; marker&#34;)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		p.WriteString(&#34;&lt;?&#34;)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		p.WriteString(t.Target)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		if len(t.Inst) &gt; 0 {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			p.WriteByte(&#39; &#39;)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			p.Write(t.Inst)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		p.WriteString(&#34;?&gt;&#34;)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	case Directive:
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if !isValidDirective(t) {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: EncodeToken of Directive containing wrong &lt; or &gt; markers&#34;)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		p.WriteString(&#34;&lt;!&#34;)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		p.Write(t)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		p.WriteString(&#34;&gt;&#34;)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	default:
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: EncodeToken of invalid token type&#34;)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return p.cachedWriteError()
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// isValidDirective reports whether dir is a valid directive text,</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// meaning angle brackets are matched, ignoring comments and strings.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>func isValidDirective(dir Directive) bool {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	var (
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		depth     int
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		inquote   uint8
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		incomment bool
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	for i, c := range dir {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		switch {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		case incomment:
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			if c == &#39;&gt;&#39; {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>				if n := 1 + i - len(endComment); n &gt;= 0 &amp;&amp; bytes.Equal(dir[n:i+1], endComment) {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>					incomment = false
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>				}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			<span class="comment">// Just ignore anything in comment</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		case inquote != 0:
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			if c == inquote {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>				inquote = 0
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			<span class="comment">// Just ignore anything within quotes</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		case c == &#39;\&#39;&#39; || c == &#39;&#34;&#39;:
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			inquote = c
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		case c == &#39;&lt;&#39;:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			if i+len(begComment) &lt; len(dir) &amp;&amp; bytes.Equal(dir[i:i+len(begComment)], begComment) {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>				incomment = true
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			} else {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>				depth++
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		case c == &#39;&gt;&#39;:
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			if depth == 0 {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>				return false
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			depth--
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	return depth == 0 &amp;&amp; inquote == 0 &amp;&amp; !incomment
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// Flush flushes any buffered XML to the underlying writer.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// See the [Encoder.EncodeToken] documentation for details about when it is necessary.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="selection">func (enc *Encoder) Flush() error</span> {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	return enc.p.w.Flush()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// Close the Encoder, indicating that no more data will be written. It flushes</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// any buffered XML to the underlying writer and returns an error if the</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// written XML is invalid (e.g. by containing unclosed elements).</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>func (enc *Encoder) Close() error {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	return enc.p.Close()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>type printer struct {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	w          *bufio.Writer
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	encoder    *Encoder
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	seq        int
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	indent     string
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	prefix     string
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	depth      int
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	indentedIn bool
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	putNewline bool
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	attrNS     map[string]string <span class="comment">// map prefix -&gt; name space</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	attrPrefix map[string]string <span class="comment">// map name space -&gt; prefix</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	prefixes   []string
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	tags       []Name
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	closed     bool
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	err        error
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// createAttrPrefix finds the name space prefix attribute to use for the given name space,</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// defining a new prefix if necessary. It returns the prefix.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>func (p *printer) createAttrPrefix(url string) string {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if prefix := p.attrPrefix[url]; prefix != &#34;&#34; {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		return prefix
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// The &#34;http://www.w3.org/XML/1998/namespace&#34; name space is predefined as &#34;xml&#34;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// and must be referred to that way.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// (The &#34;http://www.w3.org/2000/xmlns/&#34; name space is also predefined as &#34;xmlns&#34;,</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// but users should not be trying to use that one directly - that&#39;s our job.)</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if url == xmlURL {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		return xmlPrefix
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	<span class="comment">// Need to define a new name space.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	if p.attrPrefix == nil {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		p.attrPrefix = make(map[string]string)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		p.attrNS = make(map[string]string)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// Pick a name. We try to use the final element of the path</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// but fall back to _.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	prefix := strings.TrimRight(url, &#34;/&#34;)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	if i := strings.LastIndex(prefix, &#34;/&#34;); i &gt;= 0 {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		prefix = prefix[i+1:]
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	if prefix == &#34;&#34; || !isName([]byte(prefix)) || strings.Contains(prefix, &#34;:&#34;) {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		prefix = &#34;_&#34;
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// xmlanything is reserved and any variant of it regardless of</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">// case should be matched, so:</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	<span class="comment">//    ((&#39;X&#39;|&#39;x&#39;) (&#39;M&#39;|&#39;m&#39;) (&#39;L&#39;|&#39;l&#39;))</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	<span class="comment">// See Section 2.3 of https://www.w3.org/TR/REC-xml/</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	if len(prefix) &gt;= 3 &amp;&amp; strings.EqualFold(prefix[:3], &#34;xml&#34;) {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		prefix = &#34;_&#34; + prefix
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if p.attrNS[prefix] != &#34;&#34; {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		<span class="comment">// Name is taken. Find a better one.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		for p.seq++; ; p.seq++ {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			if id := prefix + &#34;_&#34; + strconv.Itoa(p.seq); p.attrNS[id] == &#34;&#34; {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				prefix = id
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>				break
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	p.attrPrefix[url] = prefix
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	p.attrNS[prefix] = url
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	p.WriteString(`xmlns:`)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	p.WriteString(prefix)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	p.WriteString(`=&#34;`)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	EscapeText(p, []byte(url))
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	p.WriteString(`&#34; `)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	p.prefixes = append(p.prefixes, prefix)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return prefix
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// deleteAttrPrefix removes an attribute name space prefix.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>func (p *printer) deleteAttrPrefix(prefix string) {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	delete(p.attrPrefix, p.attrNS[prefix])
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	delete(p.attrNS, prefix)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func (p *printer) markPrefix() {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	p.prefixes = append(p.prefixes, &#34;&#34;)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func (p *printer) popPrefix() {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	for len(p.prefixes) &gt; 0 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		prefix := p.prefixes[len(p.prefixes)-1]
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		p.prefixes = p.prefixes[:len(p.prefixes)-1]
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if prefix == &#34;&#34; {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			break
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		p.deleteAttrPrefix(prefix)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>var (
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	marshalerType     = reflect.TypeFor[Marshaler]()
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	marshalerAttrType = reflect.TypeFor[MarshalerAttr]()
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	textMarshalerType = reflect.TypeFor[encoding.TextMarshaler]()
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// marshalValue writes one or more XML elements representing val.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// If val was obtained from a struct field, finfo must have its details.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo, startTemplate *StartElement) error {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	if startTemplate != nil &amp;&amp; startTemplate.Name.Local == &#34;&#34; {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: EncodeElement of StartElement with missing name&#34;)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	if !val.IsValid() {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return nil
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	if finfo != nil &amp;&amp; finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; isEmptyValue(val) {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		return nil
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// Drill into interfaces and pointers.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// This can turn into an infinite loop given a cyclic chain,</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">// but it matches the Go 1 behavior.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	for val.Kind() == reflect.Interface || val.Kind() == reflect.Pointer {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if val.IsNil() {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			return nil
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		val = val.Elem()
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	kind := val.Kind()
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	typ := val.Type()
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	<span class="comment">// Check for marshaler.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; typ.Implements(marshalerType) {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		return p.marshalInterface(val.Interface().(Marshaler), defaultStart(typ, finfo, startTemplate))
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(marshalerType) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			return p.marshalInterface(pv.Interface().(Marshaler), defaultStart(pv.Type(), finfo, startTemplate))
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">// Check for text marshaler.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; typ.Implements(textMarshalerType) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		return p.marshalTextInterface(val.Interface().(encoding.TextMarshaler), defaultStart(typ, finfo, startTemplate))
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(textMarshalerType) {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			return p.marshalTextInterface(pv.Interface().(encoding.TextMarshaler), defaultStart(pv.Type(), finfo, startTemplate))
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	<span class="comment">// Slices and arrays iterate over the elements. They do not have an enclosing tag.</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	if (kind == reflect.Slice || kind == reflect.Array) &amp;&amp; typ.Elem().Kind() != reflect.Uint8 {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		for i, n := 0, val.Len(); i &lt; n; i++ {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			if err := p.marshalValue(val.Index(i), finfo, startTemplate); err != nil {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>				return err
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		return nil
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	tinfo, err := getTypeInfo(typ)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if err != nil {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return err
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	<span class="comment">// Create start element.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	<span class="comment">// Precedence for the XML element name is:</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// 0. startTemplate</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	<span class="comment">// 1. XMLName field in underlying struct;</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	<span class="comment">// 2. field name/tag in the struct field; and</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	<span class="comment">// 3. type name</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	var start StartElement
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	if startTemplate != nil {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		start.Name = startTemplate.Name
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		start.Attr = append(start.Attr, startTemplate.Attr...)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	} else if tinfo.xmlname != nil {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		xmlname := tinfo.xmlname
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if xmlname.name != &#34;&#34; {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			start.Name.Space, start.Name.Local = xmlname.xmlns, xmlname.name
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		} else {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			fv := xmlname.value(val, dontInitNilPointers)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			if v, ok := fv.Interface().(Name); ok &amp;&amp; v.Local != &#34;&#34; {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>				start.Name = v
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	if start.Name.Local == &#34;&#34; &amp;&amp; finfo != nil {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		start.Name.Space, start.Name.Local = finfo.xmlns, finfo.name
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	if start.Name.Local == &#34;&#34; {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		name := typ.Name()
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		if i := strings.IndexByte(name, &#39;[&#39;); i &gt;= 0 {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			<span class="comment">// Truncate generic instantiation name. See issue 48318.</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			name = name[:i]
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		if name == &#34;&#34; {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			return &amp;UnsupportedTypeError{typ}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		start.Name.Local = name
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// Attributes</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	for i := range tinfo.fields {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		finfo := &amp;tinfo.fields[i]
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		if finfo.flags&amp;fAttr == 0 {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			continue
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		fv := finfo.value(val, dontInitNilPointers)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		if finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; (!fv.IsValid() || isEmptyValue(fv)) {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			continue
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		if fv.Kind() == reflect.Interface &amp;&amp; fv.IsNil() {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			continue
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		name := Name{Space: finfo.xmlns, Local: finfo.name}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		if err := p.marshalAttr(&amp;start, name, fv); err != nil {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			return err
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	<span class="comment">// If an empty name was found, namespace is overridden with an empty space</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	if tinfo.xmlname != nil &amp;&amp; start.Name.Space == &#34;&#34; &amp;&amp;
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		tinfo.xmlname.xmlns == &#34;&#34; &amp;&amp; tinfo.xmlname.name == &#34;&#34; &amp;&amp;
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		len(p.tags) != 0 &amp;&amp; p.tags[len(p.tags)-1].Space != &#34;&#34; {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		start.Attr = append(start.Attr, Attr{Name{&#34;&#34;, xmlnsPrefix}, &#34;&#34;})
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	if err := p.writeStart(&amp;start); err != nil {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		return err
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	if val.Kind() == reflect.Struct {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		err = p.marshalStruct(tinfo, val)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	} else {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		s, b, err1 := p.marshalSimple(typ, val)
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		if err1 != nil {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			err = err1
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		} else if b != nil {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			EscapeText(p, b)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		} else {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			p.EscapeString(s)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	if err != nil {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		return err
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	if err := p.writeEnd(start.Name); err != nil {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		return err
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	return p.cachedWriteError()
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// marshalAttr marshals an attribute with the given name and value, adding to start.Attr.</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func (p *printer) marshalAttr(start *StartElement, name Name, val reflect.Value) error {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(marshalerAttrType) {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		attr, err := val.Interface().(MarshalerAttr).MarshalXMLAttr(name)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		if err != nil {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			return err
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		if attr.Name.Local != &#34;&#34; {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			start.Attr = append(start.Attr, attr)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		return nil
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(marshalerAttrType) {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			attr, err := pv.Interface().(MarshalerAttr).MarshalXMLAttr(name)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			if err != nil {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>				return err
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>			}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			if attr.Name.Local != &#34;&#34; {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>				start.Attr = append(start.Attr, attr)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			return nil
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(textMarshalerType) {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		text, err := val.Interface().(encoding.TextMarshaler).MarshalText()
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		if err != nil {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>			return err
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		start.Attr = append(start.Attr, Attr{name, string(text)})
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		return nil
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(textMarshalerType) {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			text, err := pv.Interface().(encoding.TextMarshaler).MarshalText()
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			if err != nil {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>				return err
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>			start.Attr = append(start.Attr, Attr{name, string(text)})
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>			return nil
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	<span class="comment">// Dereference or skip nil pointer, interface values.</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	switch val.Kind() {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	case reflect.Pointer, reflect.Interface:
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if val.IsNil() {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			return nil
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		val = val.Elem()
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	<span class="comment">// Walk slices.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	if val.Kind() == reflect.Slice &amp;&amp; val.Type().Elem().Kind() != reflect.Uint8 {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		n := val.Len()
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if err := p.marshalAttr(start, name, val.Index(i)); err != nil {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				return err
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		return nil
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	if val.Type() == attrType {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		start.Attr = append(start.Attr, val.Interface().(Attr))
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		return nil
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	s, b, err := p.marshalSimple(val.Type(), val)
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	if err != nil {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		return err
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	if b != nil {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		s = string(b)
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	start.Attr = append(start.Attr, Attr{name, s})
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	return nil
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">// defaultStart returns the default start element to use,</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// given the reflect type, field info, and start template.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>func defaultStart(typ reflect.Type, finfo *fieldInfo, startTemplate *StartElement) StartElement {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	var start StartElement
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	<span class="comment">// Precedence for the XML element name is as above,</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	<span class="comment">// except that we do not look inside structs for the first field.</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if startTemplate != nil {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		start.Name = startTemplate.Name
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		start.Attr = append(start.Attr, startTemplate.Attr...)
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	} else if finfo != nil &amp;&amp; finfo.name != &#34;&#34; {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		start.Name.Local = finfo.name
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		start.Name.Space = finfo.xmlns
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	} else if typ.Name() != &#34;&#34; {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		start.Name.Local = typ.Name()
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	} else {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		<span class="comment">// Must be a pointer to a named type,</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		<span class="comment">// since it has the Marshaler methods.</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		start.Name.Local = typ.Elem().Name()
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	return start
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span><span class="comment">// marshalInterface marshals a Marshaler interface value.</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>func (p *printer) marshalInterface(val Marshaler, start StartElement) error {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	<span class="comment">// Push a marker onto the tag stack so that MarshalXML</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	<span class="comment">// cannot close the XML tags that it did not open.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	p.tags = append(p.tags, Name{})
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	n := len(p.tags)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	err := val.MarshalXML(p.encoder, start)
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	if err != nil {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		return err
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	<span class="comment">// Make sure MarshalXML closed all its tags. p.tags[n-1] is the mark.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	if len(p.tags) &gt; n {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: %s.MarshalXML wrote invalid XML: &lt;%s&gt; not closed&#34;, receiverType(val), p.tags[len(p.tags)-1].Local)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	p.tags = p.tags[:n-1]
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	return nil
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// marshalTextInterface marshals a TextMarshaler interface value.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>func (p *printer) marshalTextInterface(val encoding.TextMarshaler, start StartElement) error {
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	if err := p.writeStart(&amp;start); err != nil {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		return err
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	text, err := val.MarshalText()
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	if err != nil {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		return err
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	EscapeText(p, text)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	return p.writeEnd(start.Name)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>}
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">// writeStart writes the given start element.</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>func (p *printer) writeStart(start *StartElement) error {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	if start.Name.Local == &#34;&#34; {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: start tag with no name&#34;)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	p.tags = append(p.tags, start.Name)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	p.markPrefix()
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	p.writeIndent(1)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	p.WriteByte(&#39;&lt;&#39;)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	p.WriteString(start.Name.Local)
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	if start.Name.Space != &#34;&#34; {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		p.WriteString(` xmlns=&#34;`)
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		p.EscapeString(start.Name.Space)
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		p.WriteByte(&#39;&#34;&#39;)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	<span class="comment">// Attributes</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	for _, attr := range start.Attr {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		name := attr.Name
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		if name.Local == &#34;&#34; {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			continue
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		p.WriteByte(&#39; &#39;)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		if name.Space != &#34;&#34; {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			p.WriteString(p.createAttrPrefix(name.Space))
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			p.WriteByte(&#39;:&#39;)
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		p.WriteString(name.Local)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		p.WriteString(`=&#34;`)
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		p.EscapeString(attr.Value)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		p.WriteByte(&#39;&#34;&#39;)
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	p.WriteByte(&#39;&gt;&#39;)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	return nil
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>func (p *printer) writeEnd(name Name) error {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	if name.Local == &#34;&#34; {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: end tag with no name&#34;)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	if len(p.tags) == 0 || p.tags[len(p.tags)-1].Local == &#34;&#34; {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: end tag &lt;/%s&gt; without start tag&#34;, name.Local)
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	}
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	if top := p.tags[len(p.tags)-1]; top != name {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		if top.Local != name.Local {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;xml: end tag &lt;/%s&gt; does not match start tag &lt;%s&gt;&#34;, name.Local, top.Local)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: end tag &lt;/%s&gt; in namespace %s does not match start tag &lt;%s&gt; in namespace %s&#34;, name.Local, name.Space, top.Local, top.Space)
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	p.tags = p.tags[:len(p.tags)-1]
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	p.writeIndent(-1)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	p.WriteByte(&#39;&lt;&#39;)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	p.WriteByte(&#39;/&#39;)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	p.WriteString(name.Local)
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	p.WriteByte(&#39;&gt;&#39;)
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	p.popPrefix()
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	return nil
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>func (p *printer) marshalSimple(typ reflect.Type, val reflect.Value) (string, []byte, error) {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	switch val.Kind() {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		return strconv.FormatInt(val.Int(), 10), nil, nil
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		return strconv.FormatUint(val.Uint(), 10), nil, nil
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		return strconv.FormatFloat(val.Float(), &#39;g&#39;, -1, val.Type().Bits()), nil, nil
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	case reflect.String:
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		return val.String(), nil, nil
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		return strconv.FormatBool(val.Bool()), nil, nil
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	case reflect.Array:
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		if typ.Elem().Kind() != reflect.Uint8 {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			break
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		<span class="comment">// [...]byte</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		var bytes []byte
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		if val.CanAddr() {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>			bytes = val.Bytes()
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		} else {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			bytes = make([]byte, val.Len())
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>			reflect.Copy(reflect.ValueOf(bytes), val)
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		return &#34;&#34;, bytes, nil
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		if typ.Elem().Kind() != reflect.Uint8 {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			break
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		<span class="comment">// []byte</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		return &#34;&#34;, val.Bytes(), nil
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	return &#34;&#34;, nil, &amp;UnsupportedTypeError{typ}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>var ddBytes = []byte(&#34;--&#34;)
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// indirect drills into interfaces and pointers, returning the pointed-at value.</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// If it encounters a nil interface or pointer, indirect returns that nil value.</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// This can turn into an infinite loop given a cyclic chain,</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// but it matches the Go 1 behavior.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>func indirect(vf reflect.Value) reflect.Value {
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	for vf.Kind() == reflect.Interface || vf.Kind() == reflect.Pointer {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		if vf.IsNil() {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>			return vf
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		}
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		vf = vf.Elem()
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	return vf
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>func (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	s := parentStack{p: p}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	for i := range tinfo.fields {
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		finfo := &amp;tinfo.fields[i]
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		if finfo.flags&amp;fAttr != 0 {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>			continue
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		vf := finfo.value(val, dontInitNilPointers)
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		if !vf.IsValid() {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>			<span class="comment">// The field is behind an anonymous struct field that&#39;s</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>			<span class="comment">// nil. Skip it.</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>			continue
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>		}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		switch finfo.flags &amp; fMode {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		case fCDATA, fCharData:
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>			emit := EscapeText
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>			if finfo.flags&amp;fMode == fCDATA {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>				emit = emitCDATA
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>			}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>			if err := s.trim(finfo.parents); err != nil {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>				return err
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>			if vf.CanInterface() &amp;&amp; vf.Type().Implements(textMarshalerType) {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>				data, err := vf.Interface().(encoding.TextMarshaler).MarshalText()
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>				if err != nil {
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>					return err
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>				}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>				if err := emit(p, data); err != nil {
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>					return err
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>				}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>				continue
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>			}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>			if vf.CanAddr() {
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>				pv := vf.Addr()
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>				if pv.CanInterface() &amp;&amp; pv.Type().Implements(textMarshalerType) {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>					data, err := pv.Interface().(encoding.TextMarshaler).MarshalText()
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>					if err != nil {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>						return err
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>					}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>					if err := emit(p, data); err != nil {
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>						return err
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>					}
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>					continue
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>				}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>			}
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>			var scratch [64]byte
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>			vf = indirect(vf)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>			switch vf.Kind() {
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>			case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>				if err := emit(p, strconv.AppendInt(scratch[:0], vf.Int(), 10)); err != nil {
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>					return err
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>				}
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>			case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>				if err := emit(p, strconv.AppendUint(scratch[:0], vf.Uint(), 10)); err != nil {
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>					return err
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>				}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>			case reflect.Float32, reflect.Float64:
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>				if err := emit(p, strconv.AppendFloat(scratch[:0], vf.Float(), &#39;g&#39;, -1, vf.Type().Bits())); err != nil {
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>					return err
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>				}
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>			case reflect.Bool:
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>				if err := emit(p, strconv.AppendBool(scratch[:0], vf.Bool())); err != nil {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>					return err
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>				}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>			case reflect.String:
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>				if err := emit(p, []byte(vf.String())); err != nil {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>					return err
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>				}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			case reflect.Slice:
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>				if elem, ok := vf.Interface().([]byte); ok {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>					if err := emit(p, elem); err != nil {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>						return err
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>					}
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>				}
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>			}
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			continue
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		case fComment:
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>			if err := s.trim(finfo.parents); err != nil {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>				return err
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>			}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			vf = indirect(vf)
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>			k := vf.Kind()
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>			if !(k == reflect.String || k == reflect.Slice &amp;&amp; vf.Type().Elem().Kind() == reflect.Uint8) {
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;xml: bad type for comment field of %s&#34;, val.Type())
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>			}
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>			if vf.Len() == 0 {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>				continue
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>			}
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>			p.writeIndent(0)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>			p.WriteString(&#34;&lt;!--&#34;)
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>			dashDash := false
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>			dashLast := false
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>			switch k {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>			case reflect.String:
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>				s := vf.String()
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>				dashDash = strings.Contains(s, &#34;--&#34;)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>				dashLast = s[len(s)-1] == &#39;-&#39;
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>				if !dashDash {
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>					p.WriteString(s)
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>				}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			case reflect.Slice:
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				b := vf.Bytes()
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>				dashDash = bytes.Contains(b, ddBytes)
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>				dashLast = b[len(b)-1] == &#39;-&#39;
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>				if !dashDash {
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>					p.Write(b)
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>				}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			default:
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>				panic(&#34;can&#39;t happen&#34;)
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>			}
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>			if dashDash {
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>				return fmt.Errorf(`xml: comments must not contain &#34;--&#34;`)
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>			}
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>			if dashLast {
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>				<span class="comment">// &#34;---&gt;&#34; is invalid grammar. Make it &#34;- --&gt;&#34;</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>				p.WriteByte(&#39; &#39;)
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>			}
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>			p.WriteString(&#34;--&gt;&#34;)
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			continue
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		case fInnerXML:
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>			vf = indirect(vf)
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>			iface := vf.Interface()
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>			switch raw := iface.(type) {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>			case []byte:
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>				p.Write(raw)
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>				continue
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>			case string:
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>				p.WriteString(raw)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>				continue
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>			}
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		case fElement, fElement | fAny:
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>			if err := s.trim(finfo.parents); err != nil {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>				return err
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			if len(finfo.parents) &gt; len(s.stack) {
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>				if vf.Kind() != reflect.Pointer &amp;&amp; vf.Kind() != reflect.Interface || !vf.IsNil() {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>					if err := s.push(finfo.parents[len(s.stack):]); err != nil {
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>						return err
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>					}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>				}
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			}
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		}
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>		if err := p.marshalValue(vf, finfo, nil); err != nil {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			return err
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	}
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	s.trim(nil)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	return p.cachedWriteError()
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span><span class="comment">// Write implements io.Writer</span>
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>func (p *printer) Write(b []byte) (n int, err error) {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	if p.closed &amp;&amp; p.err == nil {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		p.err = errors.New(&#34;use of closed Encoder&#34;)
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	if p.err == nil {
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		n, p.err = p.w.Write(b)
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	}
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	return n, p.err
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>}
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span><span class="comment">// WriteString implements io.StringWriter</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>func (p *printer) WriteString(s string) (n int, err error) {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	if p.closed &amp;&amp; p.err == nil {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		p.err = errors.New(&#34;use of closed Encoder&#34;)
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	}
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	if p.err == nil {
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		n, p.err = p.w.WriteString(s)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	}
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	return n, p.err
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// WriteByte implements io.ByteWriter</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>func (p *printer) WriteByte(c byte) error {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	if p.closed &amp;&amp; p.err == nil {
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		p.err = errors.New(&#34;use of closed Encoder&#34;)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	if p.err == nil {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		p.err = p.w.WriteByte(c)
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	}
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	return p.err
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>}
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span><span class="comment">// Close the Encoder, indicating that no more data will be written. It flushes</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span><span class="comment">// any buffered XML to the underlying writer and returns an error if the</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span><span class="comment">// written XML is invalid (e.g. by containing unclosed elements).</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>func (p *printer) Close() error {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	if p.closed {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		return nil
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	p.closed = true
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	if err := p.w.Flush(); err != nil {
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		return err
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	if len(p.tags) &gt; 0 {
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;unclosed tag &lt;%s&gt;&#34;, p.tags[len(p.tags)-1].Local)
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	}
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	return nil
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>}
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">// return the bufio Writer&#39;s cached write error</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>func (p *printer) cachedWriteError() error {
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	_, err := p.Write(nil)
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	return err
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>func (p *printer) writeIndent(depthDelta int) {
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	if len(p.prefix) == 0 &amp;&amp; len(p.indent) == 0 {
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>		return
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	if depthDelta &lt; 0 {
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>		p.depth--
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>		if p.indentedIn {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>			p.indentedIn = false
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>			return
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>		}
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		p.indentedIn = false
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	}
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	if p.putNewline {
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		p.WriteByte(&#39;\n&#39;)
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	} else {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>		p.putNewline = true
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	}
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	if len(p.prefix) &gt; 0 {
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		p.WriteString(p.prefix)
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	if len(p.indent) &gt; 0 {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		for i := 0; i &lt; p.depth; i++ {
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>			p.WriteString(p.indent)
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>		}
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	if depthDelta &gt; 0 {
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>		p.depth++
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>		p.indentedIn = true
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	}
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>}
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>type parentStack struct {
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	p     *printer
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	stack []string
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>}
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span><span class="comment">// trim updates the XML context to match the longest common prefix of the stack</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">// and the given parents. A closing tag will be written for every parent</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">// popped. Passing a zero slice or nil will close all the elements.</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>func (s *parentStack) trim(parents []string) error {
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	split := 0
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	for ; split &lt; len(parents) &amp;&amp; split &lt; len(s.stack); split++ {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		if parents[split] != s.stack[split] {
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>			break
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>		}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	for i := len(s.stack) - 1; i &gt;= split; i-- {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>		if err := s.p.writeEnd(Name{Local: s.stack[i]}); err != nil {
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>			return err
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>		}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	}
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	s.stack = s.stack[:split]
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	return nil
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>}
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span><span class="comment">// push adds parent elements to the stack and writes open tags.</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>func (s *parentStack) push(parents []string) error {
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	for i := 0; i &lt; len(parents); i++ {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		if err := s.p.writeStart(&amp;StartElement{Name: Name{Local: parents[i]}}); err != nil {
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>			return err
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		}
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	s.stack = append(s.stack, parents...)
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	return nil
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span><span class="comment">// UnsupportedTypeError is returned when [Marshal] encounters a type</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span><span class="comment">// that cannot be converted into XML.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>type UnsupportedTypeError struct {
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	Type reflect.Type
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>}
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>func (e *UnsupportedTypeError) Error() string {
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	return &#34;xml: unsupported type: &#34; + e.Type.String()
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>func isEmptyValue(v reflect.Value) bool {
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	switch v.Kind() {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		return v.Len() == 0
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	case reflect.Bool,
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr,
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		reflect.Float32, reflect.Float64,
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>		reflect.Interface, reflect.Pointer:
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		return v.IsZero()
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	}
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	return false
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>
</pre><p><a href="marshal.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
