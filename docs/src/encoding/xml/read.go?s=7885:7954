<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/xml/read.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./read.go?s=7885:7954#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/xml">xml</a>/<span class="text-muted">read.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/xml">encoding/xml</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package xml
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;encoding&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// BUG(rsc): Mapping between XML elements and data structures is inherently flawed:</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// an XML element is an order-dependent collection of anonymous</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// values, while a data structure is an order-independent collection</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// of named values.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// See [encoding/json] for a textual representation more suitable</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// to data structures.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Unmarshal parses the XML-encoded data and stores the result in</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// the value pointed to by v, which must be an arbitrary struct,</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// slice, or string. Well-formed data that does not fit into v is</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// discarded.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Because Unmarshal uses the reflect package, it can only assign</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// to exported (upper case) fields. Unmarshal uses a case-sensitive</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// comparison to match XML element names to tag values and struct</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// field names.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element to a struct using the following rules.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// In the rules, the tag of a field refers to the value associated with the</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// key &#39;xml&#39; in the struct field&#39;s tag (see the example above).</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//   - If the struct has a field of type []byte or string with tag</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//     &#34;,innerxml&#34;, Unmarshal accumulates the raw XML nested inside the</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//     element in that field. The rest of the rules still apply.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//   - If the struct has a field named XMLName of type Name,</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//     Unmarshal records the element name in that field.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//   - If the XMLName field has an associated tag of the form</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//     &#34;name&#34; or &#34;namespace-URL name&#34;, the XML element must have</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//     the given name (and, optionally, name space) or else Unmarshal</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//     returns an error.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//   - If the XML element has an attribute whose name matches a</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//     struct field name with an associated tag containing &#34;,attr&#34; or</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//     the explicit name in a struct field tag of the form &#34;name,attr&#34;,</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//     Unmarshal records the attribute value in that field.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//   - If the XML element has an attribute not handled by the previous</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//     rule and the struct has a field with an associated tag containing</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//     &#34;,any,attr&#34;, Unmarshal records the attribute value in the first</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//     such field.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains character data, that data is</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//     accumulated in the first struct field that has tag &#34;,chardata&#34;.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//     The struct field may have type []byte or string.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//     If there is no such field, the character data is discarded.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains comments, they are accumulated in</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//     the first struct field that has tag &#34;,comment&#34;.  The struct</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//     field may have type []byte or string. If there is no such</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//     field, the comments are discarded.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains a sub-element whose name matches</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//     the prefix of a tag formatted as &#34;a&#34; or &#34;a&gt;b&gt;c&#34;, unmarshal</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//     will descend into the XML structure looking for elements with the</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//     given names, and will map the innermost elements to that struct</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//     field. A tag starting with &#34;&gt;&#34; is equivalent to one starting</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//     with the field name followed by &#34;&gt;&#34;.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains a sub-element whose name matches</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//     a struct field&#39;s XMLName tag and the struct field has no</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//     explicit name tag as per the previous rule, unmarshal maps</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//     the sub-element to that struct field.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains a sub-element whose name matches a</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//     field without any mode flags (&#34;,attr&#34;, &#34;,chardata&#34;, etc), Unmarshal</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//     maps the sub-element to that struct field.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//   - If the XML element contains a sub-element that hasn&#39;t matched any</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//     of the above rules and the struct has a field with tag &#34;,any&#34;,</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">//     unmarshal maps the sub-element to that struct field.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//   - An anonymous struct field is handled as if the fields of its</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//     value were part of the outer struct.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//   - A struct field with tag &#34;-&#34; is never unmarshaled into.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// If Unmarshal encounters a field type that implements the Unmarshaler</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// interface, Unmarshal calls its UnmarshalXML method to produce the value from</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// the XML element.  Otherwise, if the value implements</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// [encoding.TextUnmarshaler], Unmarshal calls that value&#39;s UnmarshalText method.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element to a string or []byte by saving the</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// concatenation of that element&#39;s character data in the string or</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// []byte. The saved []byte is never nil.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an attribute value to a string or []byte by saving</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// the value in the string or slice.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an attribute value to an [Attr] by saving the attribute,</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// including its name, in the Attr.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element or attribute value to a slice by</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// extending the length of the slice and mapping the element or attribute</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// to the newly created value.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element or attribute value to a bool by</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// setting it to the boolean value represented by the string. Whitespace</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// is trimmed and ignored.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element or attribute value to an integer or</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// floating-point field by setting the field to the result of</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// interpreting the string value in decimal. There is no check for</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// overflow. Whitespace is trimmed and ignored.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element to a Name by recording the element</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// name.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// Unmarshal maps an XML element to a pointer by setting the pointer</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// to a freshly allocated value and then mapping the element to that value.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// A missing element or empty attribute value will be unmarshaled as a zero value.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// If the field is a slice, a zero value will be appended to the field. Otherwise, the</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// field will be set to its zero value.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func Unmarshal(data []byte, v any) error {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return NewDecoder(bytes.NewReader(data)).Decode(v)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Decode works like [Unmarshal], except it reads the decoder</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// stream to find the start element.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (d *Decoder) Decode(v any) error {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return d.DecodeElement(v, nil)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// DecodeElement works like [Unmarshal] except that it takes</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// a pointer to the start XML element to decode into v.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// It is useful when a client reads some raw XML tokens itself</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// but also wants to defer to [Unmarshal] for some elements.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (d *Decoder) DecodeElement(v any, start *StartElement) error {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	val := reflect.ValueOf(v)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if val.Kind() != reflect.Pointer {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return errors.New(&#34;non-pointer passed to Unmarshal&#34;)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if val.IsNil() {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return errors.New(&#34;nil pointer passed to Unmarshal&#34;)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	return d.unmarshal(val.Elem(), start, 0)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// An UnmarshalError represents an error in the unmarshaling process.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>type UnmarshalError string
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (e UnmarshalError) Error() string { return string(e) }
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// Unmarshaler is the interface implemented by objects that can unmarshal</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// an XML element description of themselves.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// UnmarshalXML decodes a single XML element</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// beginning with the given start element.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// If it returns an error, the outer call to Unmarshal stops and</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// returns that error.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// UnmarshalXML must consume exactly one XML element.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// One common implementation strategy is to unmarshal into</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// a separate value with a layout matching the expected XML</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// using d.DecodeElement, and then to copy the data from</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// that value into the receiver.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Another common strategy is to use d.Token to process the</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// XML object one token at a time.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// UnmarshalXML may not use d.RawToken.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>type Unmarshaler interface {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	UnmarshalXML(d *Decoder, start StartElement) error
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// UnmarshalerAttr is the interface implemented by objects that can unmarshal</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// an XML attribute description of themselves.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// UnmarshalXMLAttr decodes a single XML attribute.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// If it returns an error, the outer call to [Unmarshal] stops and</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// returns that error.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// UnmarshalXMLAttr is used only for struct fields with the</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// &#34;attr&#34; option in the field tag.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="selection">type UnmarshalerAttr interface {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	UnmarshalXMLAttr(attr Attr) error
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// receiverType returns the receiver type to use in an expression like &#34;%s.MethodName&#34;.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func receiverType(val any) string {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	t := reflect.TypeOf(val)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if t.Name() != &#34;&#34; {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return t.String()
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return &#34;(&#34; + t.String() + &#34;)&#34;
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// unmarshalInterface unmarshals a single XML element into val.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// start is the opening tag of the element.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (d *Decoder) unmarshalInterface(val Unmarshaler, start *StartElement) error {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// Record that decoder must stop at end tag corresponding to start.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	d.pushEOF()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	d.unmarshalDepth++
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	err := val.UnmarshalXML(d, *start)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	d.unmarshalDepth--
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if err != nil {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		d.popEOF()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		return err
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if !d.popEOF() {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;xml: %s.UnmarshalXML did not consume entire &lt;%s&gt; element&#34;, receiverType(val), start.Name.Local)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	return nil
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// unmarshalTextInterface unmarshals a single XML element into val.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// The chardata contained in the element (but not its children)</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// is passed to the text unmarshaler.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>func (d *Decoder) unmarshalTextInterface(val encoding.TextUnmarshaler) error {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	var buf []byte
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	depth := 1
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	for depth &gt; 0 {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		t, err := d.Token()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		if err != nil {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			return err
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		switch t := t.(type) {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		case CharData:
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			if depth == 1 {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>				buf = append(buf, t...)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		case StartElement:
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			depth++
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		case EndElement:
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			depth--
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return val.UnmarshalText(buf)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// unmarshalAttr unmarshals a single XML attribute into val.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>func (d *Decoder) unmarshalAttr(val reflect.Value, attr Attr) error {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if val.Kind() == reflect.Pointer {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if val.IsNil() {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			val.Set(reflect.New(val.Type().Elem()))
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		val = val.Elem()
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(unmarshalerAttrType) {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		<span class="comment">// This is an unmarshaler with a non-pointer receiver,</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		<span class="comment">// so it&#39;s likely to be incorrect, but we do what we&#39;re told.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		return val.Interface().(UnmarshalerAttr).UnmarshalXMLAttr(attr)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(unmarshalerAttrType) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			return pv.Interface().(UnmarshalerAttr).UnmarshalXMLAttr(attr)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// Not an UnmarshalerAttr; try encoding.TextUnmarshaler.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(textUnmarshalerType) {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		<span class="comment">// This is an unmarshaler with a non-pointer receiver,</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		<span class="comment">// so it&#39;s likely to be incorrect, but we do what we&#39;re told.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return val.Interface().(encoding.TextUnmarshaler).UnmarshalText([]byte(attr.Value))
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(textUnmarshalerType) {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			return pv.Interface().(encoding.TextUnmarshaler).UnmarshalText([]byte(attr.Value))
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	if val.Type().Kind() == reflect.Slice &amp;&amp; val.Type().Elem().Kind() != reflect.Uint8 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		<span class="comment">// Slice of element values.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		<span class="comment">// Grow slice.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		n := val.Len()
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		val.Grow(1)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		val.SetLen(n + 1)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// Recur to read element into slice.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		if err := d.unmarshalAttr(val.Index(n), attr); err != nil {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			val.SetLen(n)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			return err
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		return nil
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	if val.Type() == attrType {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		val.Set(reflect.ValueOf(attr))
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		return nil
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	return copyValue(val, []byte(attr.Value))
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>var (
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	attrType            = reflect.TypeFor[Attr]()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	unmarshalerType     = reflect.TypeFor[Unmarshaler]()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	unmarshalerAttrType = reflect.TypeFor[UnmarshalerAttr]()
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	textUnmarshalerType = reflect.TypeFor[encoding.TextUnmarshaler]()
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>const (
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	maxUnmarshalDepth     = 10000
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	maxUnmarshalDepthWasm = 5000 <span class="comment">// go.dev/issue/56498</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>var errUnmarshalDepth = errors.New(&#34;exceeded max depth&#34;)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// Unmarshal a single XML element into val.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>func (d *Decoder) unmarshal(val reflect.Value, start *StartElement, depth int) error {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if depth &gt;= maxUnmarshalDepth || runtime.GOARCH == &#34;wasm&#34; &amp;&amp; depth &gt;= maxUnmarshalDepthWasm {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		return errUnmarshalDepth
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// Find start element if we need it.</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	if start == nil {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		for {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			tok, err := d.Token()
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			if err != nil {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>				return err
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			if t, ok := tok.(StartElement); ok {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				start = &amp;t
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				break
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	<span class="comment">// Load value from interface, but only if the result will be</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// usefully addressable.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	if val.Kind() == reflect.Interface &amp;&amp; !val.IsNil() {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		e := val.Elem()
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		if e.Kind() == reflect.Pointer &amp;&amp; !e.IsNil() {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			val = e
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if val.Kind() == reflect.Pointer {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		if val.IsNil() {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			val.Set(reflect.New(val.Type().Elem()))
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		val = val.Elem()
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(unmarshalerType) {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		<span class="comment">// This is an unmarshaler with a non-pointer receiver,</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		<span class="comment">// so it&#39;s likely to be incorrect, but we do what we&#39;re told.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		return d.unmarshalInterface(val.Interface().(Unmarshaler), start)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(unmarshalerType) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			return d.unmarshalInterface(pv.Interface().(Unmarshaler), start)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	if val.CanInterface() &amp;&amp; val.Type().Implements(textUnmarshalerType) {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		return d.unmarshalTextInterface(val.Interface().(encoding.TextUnmarshaler))
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if val.CanAddr() {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		pv := val.Addr()
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(textUnmarshalerType) {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			return d.unmarshalTextInterface(pv.Interface().(encoding.TextUnmarshaler))
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	var (
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		data         []byte
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		saveData     reflect.Value
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		comment      []byte
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		saveComment  reflect.Value
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		saveXML      reflect.Value
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		saveXMLIndex int
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		saveXMLData  []byte
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		saveAny      reflect.Value
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		sv           reflect.Value
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		tinfo        *typeInfo
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		err          error
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	switch v := val; v.Kind() {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	default:
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		return errors.New(&#34;unknown type &#34; + v.Type().String())
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		<span class="comment">// TODO: For now, simply ignore the field. In the near</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		<span class="comment">//       future we may choose to unmarshal the start</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		<span class="comment">//       element on it, if not nil.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		return d.Skip()
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		typ := v.Type()
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		if typ.Elem().Kind() == reflect.Uint8 {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			<span class="comment">// []byte</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			saveData = v
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			break
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		<span class="comment">// Slice of element values.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		<span class="comment">// Grow slice.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		n := v.Len()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		v.Grow(1)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		v.SetLen(n + 1)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		<span class="comment">// Recur to read element into slice.</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		if err := d.unmarshal(v.Index(n), start, depth+1); err != nil {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			v.SetLen(n)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			return err
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		return nil
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	case reflect.Bool, reflect.Float32, reflect.Float64, reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64, reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr, reflect.String:
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		saveData = v
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		typ := v.Type()
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		if typ == nameType {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			v.Set(reflect.ValueOf(start.Name))
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			break
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		sv = v
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		tinfo, err = getTypeInfo(typ)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		if err != nil {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			return err
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		<span class="comment">// Validate and assign element name.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		if tinfo.xmlname != nil {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			finfo := tinfo.xmlname
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			if finfo.name != &#34;&#34; &amp;&amp; finfo.name != start.Name.Local {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				return UnmarshalError(&#34;expected element type &lt;&#34; + finfo.name + &#34;&gt; but have &lt;&#34; + start.Name.Local + &#34;&gt;&#34;)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			if finfo.xmlns != &#34;&#34; &amp;&amp; finfo.xmlns != start.Name.Space {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>				e := &#34;expected element &lt;&#34; + finfo.name + &#34;&gt; in name space &#34; + finfo.xmlns + &#34; but have &#34;
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>				if start.Name.Space == &#34;&#34; {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>					e += &#34;no name space&#34;
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>				} else {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>					e += start.Name.Space
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>				}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				return UnmarshalError(e)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			fv := finfo.value(sv, initNilPointers)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			if _, ok := fv.Interface().(Name); ok {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				fv.Set(reflect.ValueOf(start.Name))
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		<span class="comment">// Assign attributes.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		for _, a := range start.Attr {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			handled := false
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			any := -1
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			for i := range tinfo.fields {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>				finfo := &amp;tinfo.fields[i]
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>				switch finfo.flags &amp; fMode {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				case fAttr:
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>					strv := finfo.value(sv, initNilPointers)
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>					if a.Name.Local == finfo.name &amp;&amp; (finfo.xmlns == &#34;&#34; || finfo.xmlns == a.Name.Space) {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>						if err := d.unmarshalAttr(strv, a); err != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>							return err
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>						}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>						handled = true
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>					}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>				case fAny | fAttr:
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>					if any == -1 {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>						any = i
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>					}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>				}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			if !handled &amp;&amp; any &gt;= 0 {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>				finfo := &amp;tinfo.fields[any]
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				strv := finfo.value(sv, initNilPointers)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>				if err := d.unmarshalAttr(strv, a); err != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>					return err
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>				}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		<span class="comment">// Determine whether we need to save character data or comments.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		for i := range tinfo.fields {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			finfo := &amp;tinfo.fields[i]
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			switch finfo.flags &amp; fMode {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			case fCDATA, fCharData:
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>				if !saveData.IsValid() {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>					saveData = finfo.value(sv, initNilPointers)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>				}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			case fComment:
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>				if !saveComment.IsValid() {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>					saveComment = finfo.value(sv, initNilPointers)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>				}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			case fAny, fAny | fElement:
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>				if !saveAny.IsValid() {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>					saveAny = finfo.value(sv, initNilPointers)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>				}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			case fInnerXML:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>				if !saveXML.IsValid() {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>					saveXML = finfo.value(sv, initNilPointers)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>					if d.saved == nil {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>						saveXMLIndex = 0
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>						d.saved = new(bytes.Buffer)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>					} else {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>						saveXMLIndex = d.savedOffset()
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>					}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// Find end element.</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	<span class="comment">// Process sub-elements along the way.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>Loop:
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	for {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		var savedOffset int
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		if saveXML.IsValid() {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			savedOffset = d.savedOffset()
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		tok, err := d.Token()
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if err != nil {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			return err
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		switch t := tok.(type) {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		case StartElement:
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			consumed := false
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			if sv.IsValid() {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>				<span class="comment">// unmarshalPath can call unmarshal, so we need to pass the depth through so that</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>				<span class="comment">// we can continue to enforce the maximum recursion limit.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>				consumed, err = d.unmarshalPath(tinfo, sv, nil, &amp;t, depth)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>				if err != nil {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>					return err
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>				}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				if !consumed &amp;&amp; saveAny.IsValid() {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>					consumed = true
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>					if err := d.unmarshal(saveAny, &amp;t, depth+1); err != nil {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>						return err
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>					}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>				}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			if !consumed {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>				if err := d.Skip(); err != nil {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>					return err
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>				}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		case EndElement:
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			if saveXML.IsValid() {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>				saveXMLData = d.saved.Bytes()[saveXMLIndex:savedOffset]
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>				if saveXMLIndex == 0 {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>					d.saved = nil
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>				}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			break Loop
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		case CharData:
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			if saveData.IsValid() {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>				data = append(data, t...)
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		case Comment:
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			if saveComment.IsValid() {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>				comment = append(comment, t...)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	if saveData.IsValid() &amp;&amp; saveData.CanInterface() &amp;&amp; saveData.Type().Implements(textUnmarshalerType) {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if err := saveData.Interface().(encoding.TextUnmarshaler).UnmarshalText(data); err != nil {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			return err
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		saveData = reflect.Value{}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	if saveData.IsValid() &amp;&amp; saveData.CanAddr() {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		pv := saveData.Addr()
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		if pv.CanInterface() &amp;&amp; pv.Type().Implements(textUnmarshalerType) {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			if err := pv.Interface().(encoding.TextUnmarshaler).UnmarshalText(data); err != nil {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>				return err
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			saveData = reflect.Value{}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	if err := copyValue(saveData, data); err != nil {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		return err
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	switch t := saveComment; t.Kind() {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	case reflect.String:
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		t.SetString(string(comment))
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		t.Set(reflect.ValueOf(comment))
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	switch t := saveXML; t.Kind() {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	case reflect.String:
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		t.SetString(string(saveXMLData))
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		if t.Type().Elem().Kind() == reflect.Uint8 {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>			t.Set(reflect.ValueOf(saveXMLData))
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	}
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	return nil
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>func copyValue(dst reflect.Value, src []byte) (err error) {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	dst0 := dst
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	if dst.Kind() == reflect.Pointer {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		if dst.IsNil() {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			dst.Set(reflect.New(dst.Type().Elem()))
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		dst = dst.Elem()
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	<span class="comment">// Save accumulated data.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	switch dst.Kind() {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	case reflect.Invalid:
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		<span class="comment">// Probably a comment.</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	default:
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return errors.New(&#34;cannot unmarshal into &#34; + dst0.Type().String())
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		if len(src) == 0 {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			dst.SetInt(0)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			return nil
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		itmp, err := strconv.ParseInt(strings.TrimSpace(string(src)), 10, dst.Type().Bits())
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		if err != nil {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			return err
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		dst.SetInt(itmp)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		if len(src) == 0 {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			dst.SetUint(0)
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			return nil
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		utmp, err := strconv.ParseUint(strings.TrimSpace(string(src)), 10, dst.Type().Bits())
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		if err != nil {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			return err
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		dst.SetUint(utmp)
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	case reflect.Float32, reflect.Float64:
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if len(src) == 0 {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			dst.SetFloat(0)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			return nil
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		ftmp, err := strconv.ParseFloat(strings.TrimSpace(string(src)), dst.Type().Bits())
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		if err != nil {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			return err
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		dst.SetFloat(ftmp)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		if len(src) == 0 {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			dst.SetBool(false)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			return nil
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		value, err := strconv.ParseBool(strings.TrimSpace(string(src)))
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		if err != nil {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			return err
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		dst.SetBool(value)
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	case reflect.String:
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		dst.SetString(string(src))
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		if len(src) == 0 {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			<span class="comment">// non-nil to flag presence</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			src = []byte{}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		dst.SetBytes(src)
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	return nil
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// unmarshalPath walks down an XML structure looking for wanted</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// paths, and calls unmarshal on them.</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// The consumed result tells whether XML elements have been consumed</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// from the Decoder until start&#39;s matching end element, or if it&#39;s</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">// still untouched because start is uninteresting for sv&#39;s fields.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>func (d *Decoder) unmarshalPath(tinfo *typeInfo, sv reflect.Value, parents []string, start *StartElement, depth int) (consumed bool, err error) {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	recurse := false
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>Loop:
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	for i := range tinfo.fields {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		finfo := &amp;tinfo.fields[i]
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		if finfo.flags&amp;fElement == 0 || len(finfo.parents) &lt; len(parents) || finfo.xmlns != &#34;&#34; &amp;&amp; finfo.xmlns != start.Name.Space {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			continue
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		for j := range parents {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			if parents[j] != finfo.parents[j] {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				continue Loop
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		if len(finfo.parents) == len(parents) &amp;&amp; finfo.name == start.Name.Local {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			<span class="comment">// It&#39;s a perfect match, unmarshal the field.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>			return true, d.unmarshal(finfo.value(sv, initNilPointers), start, depth+1)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		if len(finfo.parents) &gt; len(parents) &amp;&amp; finfo.parents[len(parents)] == start.Name.Local {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>			<span class="comment">// It&#39;s a prefix for the field. Break and recurse</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			<span class="comment">// since it&#39;s not ok for one field path to be itself</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			<span class="comment">// the prefix for another field path.</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			recurse = true
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			<span class="comment">// We can reuse the same slice as long as we</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			<span class="comment">// don&#39;t try to append to it.</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			parents = finfo.parents[:len(parents)+1]
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			break
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	if !recurse {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		<span class="comment">// We have no business with this element.</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		return false, nil
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	<span class="comment">// The element is not a perfect match for any field, but one</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	<span class="comment">// or more fields have the path to this element as a parent</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	<span class="comment">// prefix. Recurse and attempt to match these.</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	for {
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		var tok Token
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		tok, err = d.Token()
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		if err != nil {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			return true, err
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		switch t := tok.(type) {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		case StartElement:
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			<span class="comment">// the recursion depth of unmarshalPath is limited to the path length specified</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			<span class="comment">// by the struct field tag, so we don&#39;t increment the depth here.</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>			consumed2, err := d.unmarshalPath(tinfo, sv, parents, &amp;t, depth)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			if err != nil {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>				return true, err
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			if !consumed2 {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>				if err := d.Skip(); err != nil {
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>					return true, err
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>				}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		case EndElement:
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			return true, nil
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span><span class="comment">// Skip reads tokens until it has consumed the end element</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span><span class="comment">// matching the most recent start element already consumed,</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">// skipping nested structures.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">// It returns nil if it finds an end element matching the start</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// element; otherwise it returns an error describing the problem.</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>func (d *Decoder) Skip() error {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	var depth int64
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	for {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		tok, err := d.Token()
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		if err != nil {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			return err
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		switch tok.(type) {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		case StartElement:
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			depth++
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		case EndElement:
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			if depth == 0 {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>				return nil
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			depth--
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
</pre><p><a href="read.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
