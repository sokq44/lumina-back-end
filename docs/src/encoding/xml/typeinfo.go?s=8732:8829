<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/encoding/xml/typeinfo.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./typeinfo.go?s=8732:8829#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/encoding">encoding</a>/<a href="http://localhost:8080/src/encoding/xml">xml</a>/<span class="text-muted">typeinfo.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/encoding/xml">encoding/xml</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package xml
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// typeInfo holds details for the xml representation of a type.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type typeInfo struct {
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	xmlname *fieldInfo
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	fields  []fieldInfo
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>}
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// fieldInfo holds details for the xml representation of a single field.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type fieldInfo struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	idx     []int
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	name    string
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	xmlns   string
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	flags   fieldFlags
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	parents []string
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type fieldFlags int
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>const (
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	fElement fieldFlags = 1 &lt;&lt; iota
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	fAttr
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	fCDATA
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	fCharData
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	fInnerXML
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	fComment
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	fAny
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	fOmitEmpty
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	fMode = fElement | fAttr | fCDATA | fCharData | fInnerXML | fComment | fAny
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	xmlName = &#34;XMLName&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>var tinfoMap sync.Map <span class="comment">// map[reflect.Type]*typeInfo</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>var nameType = reflect.TypeFor[Name]()
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// getTypeInfo returns the typeInfo structure with details necessary</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// for marshaling and unmarshaling typ.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func getTypeInfo(typ reflect.Type) (*typeInfo, error) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	if ti, ok := tinfoMap.Load(typ); ok {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		return ti.(*typeInfo), nil
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	tinfo := &amp;typeInfo{}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if typ.Kind() == reflect.Struct &amp;&amp; typ != nameType {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		n := typ.NumField()
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		for i := 0; i &lt; n; i++ {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			f := typ.Field(i)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			if (!f.IsExported() &amp;&amp; !f.Anonymous) || f.Tag.Get(&#34;xml&#34;) == &#34;-&#34; {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>				continue <span class="comment">// Private field</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			<span class="comment">// For embedded structs, embed its fields.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			if f.Anonymous {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>				t := f.Type
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>				if t.Kind() == reflect.Pointer {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>					t = t.Elem()
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>				}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>				if t.Kind() == reflect.Struct {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>					inner, err := getTypeInfo(t)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>					if err != nil {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>						return nil, err
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>					}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>					if tinfo.xmlname == nil {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>						tinfo.xmlname = inner.xmlname
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>					}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>					for _, finfo := range inner.fields {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>						finfo.idx = append([]int{i}, finfo.idx...)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>						if err := addFieldInfo(typ, tinfo, &amp;finfo); err != nil {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>							return nil, err
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>						}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>					}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>					continue
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>				}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			finfo, err := structFieldInfo(typ, &amp;f)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>			if err != nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>				return nil, err
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			if f.Name == xmlName {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>				tinfo.xmlname = finfo
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>				continue
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			<span class="comment">// Add the field if it doesn&#39;t conflict with other fields.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			if err := addFieldInfo(typ, tinfo, finfo); err != nil {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				return nil, err
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	ti, _ := tinfoMap.LoadOrStore(typ, tinfo)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return ti.(*typeInfo), nil
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// structFieldInfo builds and returns a fieldInfo for f.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func structFieldInfo(typ reflect.Type, f *reflect.StructField) (*fieldInfo, error) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	finfo := &amp;fieldInfo{idx: f.Index}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// Split the tag from the xml namespace if necessary.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	tag := f.Tag.Get(&#34;xml&#34;)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if ns, t, ok := strings.Cut(tag, &#34; &#34;); ok {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		finfo.xmlns, tag = ns, t
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// Parse flags.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	tokens := strings.Split(tag, &#34;,&#34;)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if len(tokens) == 1 {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		finfo.flags = fElement
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	} else {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		tag = tokens[0]
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		for _, flag := range tokens[1:] {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			switch flag {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			case &#34;attr&#34;:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				finfo.flags |= fAttr
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			case &#34;cdata&#34;:
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				finfo.flags |= fCDATA
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			case &#34;chardata&#34;:
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>				finfo.flags |= fCharData
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			case &#34;innerxml&#34;:
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>				finfo.flags |= fInnerXML
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			case &#34;comment&#34;:
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>				finfo.flags |= fComment
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			case &#34;any&#34;:
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>				finfo.flags |= fAny
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			case &#34;omitempty&#34;:
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>				finfo.flags |= fOmitEmpty
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		<span class="comment">// Validate the flags used.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		valid := true
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		switch mode := finfo.flags &amp; fMode; mode {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		case 0:
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			finfo.flags |= fElement
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		case fAttr, fCDATA, fCharData, fInnerXML, fComment, fAny, fAny | fAttr:
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			if f.Name == xmlName || tag != &#34;&#34; &amp;&amp; mode != fAttr {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				valid = false
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		default:
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			<span class="comment">// This will also catch multiple modes in a single field.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			valid = false
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		if finfo.flags&amp;fMode == fAny {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			finfo.flags |= fElement
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		if finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; finfo.flags&amp;(fElement|fAttr) == 0 {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			valid = false
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if !valid {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;xml: invalid tag in field %s of type %s: %q&#34;,
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>				f.Name, typ, f.Tag.Get(&#34;xml&#34;))
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// Use of xmlns without a name is not allowed.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if finfo.xmlns != &#34;&#34; &amp;&amp; tag == &#34;&#34; {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;xml: namespace without name in field %s of type %s: %q&#34;,
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			f.Name, typ, f.Tag.Get(&#34;xml&#34;))
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	if f.Name == xmlName {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		<span class="comment">// The XMLName field records the XML element name. Don&#39;t</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		<span class="comment">// process it as usual because its name should default to</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		<span class="comment">// empty rather than to the field name.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		finfo.name = tag
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return finfo, nil
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if tag == &#34;&#34; {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		<span class="comment">// If the name part of the tag is completely empty, get</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		<span class="comment">// default from XMLName of underlying struct if feasible,</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		<span class="comment">// or field name otherwise.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		if xmlname := lookupXMLName(f.Type); xmlname != nil {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			finfo.xmlns, finfo.name = xmlname.xmlns, xmlname.name
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		} else {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			finfo.name = f.Name
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return finfo, nil
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Prepare field name and parents.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	parents := strings.Split(tag, &#34;&gt;&#34;)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if parents[0] == &#34;&#34; {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		parents[0] = f.Name
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if parents[len(parents)-1] == &#34;&#34; {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;xml: trailing &#39;&gt;&#39; in field %s of type %s&#34;, f.Name, typ)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	finfo.name = parents[len(parents)-1]
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	if len(parents) &gt; 1 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		if (finfo.flags &amp; fElement) == 0 {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;xml: %s chain not valid with %s flag&#34;, tag, strings.Join(tokens[1:], &#34;,&#34;))
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		finfo.parents = parents[:len(parents)-1]
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// If the field type has an XMLName field, the names must match</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// so that the behavior of both marshaling and unmarshaling</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// is straightforward and unambiguous.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	if finfo.flags&amp;fElement != 0 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		ftyp := f.Type
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		xmlname := lookupXMLName(ftyp)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		if xmlname != nil &amp;&amp; xmlname.name != finfo.name {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;xml: name %q in tag of %s.%s conflicts with name %q in %s.XMLName&#34;,
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				finfo.name, typ, f.Name, xmlname.name, ftyp)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return finfo, nil
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// lookupXMLName returns the fieldInfo for typ&#39;s XMLName field</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// in case it exists and has a valid xml field tag, otherwise</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// it returns nil.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func lookupXMLName(typ reflect.Type) (xmlname *fieldInfo) {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	for typ.Kind() == reflect.Pointer {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		typ = typ.Elem()
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if typ.Kind() != reflect.Struct {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return nil
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	for i, n := 0, typ.NumField(); i &lt; n; i++ {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		f := typ.Field(i)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		if f.Name != xmlName {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			continue
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		finfo, err := structFieldInfo(typ, &amp;f)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		if err == nil &amp;&amp; finfo.name != &#34;&#34; {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			return finfo
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		<span class="comment">// Also consider errors as a non-existent field tag</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		<span class="comment">// and let getTypeInfo itself report the error.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		break
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	return nil
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// addFieldInfo adds finfo to tinfo.fields if there are no</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// conflicts, or if conflicts arise from previous fields that were</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// obtained from deeper embedded structures than finfo. In the latter</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// case, the conflicting entries are dropped.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// A conflict occurs when the path (parent + name) to a field is</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// itself a prefix of another path, or when two paths match exactly.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// It is okay for field paths to share a common, shorter prefix.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func addFieldInfo(typ reflect.Type, tinfo *typeInfo, newf *fieldInfo) error {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	var conflicts []int
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>Loop:
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// First, figure all conflicts. Most working code will have none.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	for i := range tinfo.fields {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		oldf := &amp;tinfo.fields[i]
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		if oldf.flags&amp;fMode != newf.flags&amp;fMode {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			continue
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		if oldf.xmlns != &#34;&#34; &amp;&amp; newf.xmlns != &#34;&#34; &amp;&amp; oldf.xmlns != newf.xmlns {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			continue
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		minl := min(len(newf.parents), len(oldf.parents))
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		for p := 0; p &lt; minl; p++ {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			if oldf.parents[p] != newf.parents[p] {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>				continue Loop
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		if len(oldf.parents) &gt; len(newf.parents) {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			if oldf.parents[len(newf.parents)] == newf.name {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>				conflicts = append(conflicts, i)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		} else if len(oldf.parents) &lt; len(newf.parents) {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			if newf.parents[len(oldf.parents)] == oldf.name {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>				conflicts = append(conflicts, i)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		} else {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			if newf.name == oldf.name &amp;&amp; newf.xmlns == oldf.xmlns {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>				conflicts = append(conflicts, i)
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	<span class="comment">// Without conflicts, add the new field and return.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if conflicts == nil {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		tinfo.fields = append(tinfo.fields, *newf)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		return nil
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// If any conflict is shallower, ignore the new field.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// This matches the Go field resolution on embedding.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	for _, i := range conflicts {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		if len(tinfo.fields[i].idx) &lt; len(newf.idx) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			return nil
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, if any of them is at the same depth level, it&#39;s an error.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	for _, i := range conflicts {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		oldf := &amp;tinfo.fields[i]
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if len(oldf.idx) == len(newf.idx) {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			f1 := typ.FieldByIndex(oldf.idx)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			f2 := typ.FieldByIndex(newf.idx)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			return &amp;TagPathError{typ, f1.Name, f1.Tag.Get(&#34;xml&#34;), f2.Name, f2.Tag.Get(&#34;xml&#34;)}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, the new field is shallower, and thus takes precedence,</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// so drop the conflicting fields from tinfo and append the new one.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	for c := len(conflicts) - 1; c &gt;= 0; c-- {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		i := conflicts[c]
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		copy(tinfo.fields[i:], tinfo.fields[i+1:])
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		tinfo.fields = tinfo.fields[:len(tinfo.fields)-1]
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	tinfo.fields = append(tinfo.fields, *newf)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return nil
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// A TagPathError represents an error in the unmarshaling process</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// caused by the use of field tags with conflicting paths.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="selection">type TagPathError struct {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	Struct       reflect.Type
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	Field1, Tag1 string
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	Field2, Tag2 string
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>func (e *TagPathError) Error() string {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%s field %q with tag %q conflicts with field %q with tag %q&#34;, e.Struct, e.Field1, e.Tag1, e.Field2, e.Tag2)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>const (
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	initNilPointers     = true
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	dontInitNilPointers = false
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// value returns v&#39;s field value corresponding to finfo.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// It&#39;s equivalent to v.FieldByIndex(finfo.idx), but when passed</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// initNilPointers, it initializes and dereferences pointers as necessary.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// When passed dontInitNilPointers and a nil pointer is reached, the function</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// returns a zero reflect.Value.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>func (finfo *fieldInfo) value(v reflect.Value, shouldInitNilPointers bool) reflect.Value {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	for i, x := range finfo.idx {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			t := v.Type()
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			if t.Kind() == reflect.Pointer &amp;&amp; t.Elem().Kind() == reflect.Struct {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>				if v.IsNil() {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>					if !shouldInitNilPointers {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>						return reflect.Value{}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>					}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>					v.Set(reflect.New(v.Type().Elem()))
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>				}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>				v = v.Elem()
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		v = v.Field(x)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return v
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
</pre><p><a href="typeinfo.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
