<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/expvar/expvar.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./expvar.go?s=1471:1500#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/expvar">expvar</a>/<span class="text-muted">expvar.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/expvar">expvar</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package expvar provides a standardized interface to public variables, such</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// as operation counters in servers. It exposes these variables via HTTP at</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// /debug/vars in JSON format.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Operations to set or modify these public variables are atomic.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// In addition to adding the HTTP handler, this package registers the</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// following variables:</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//	cmdline   os.Args</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//	memstats  runtime.Memstats</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// The package is sometimes only imported for the side effect of</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// registering its HTTP handler and the above variables. To use it</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// this way, link this package into your program:</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//	import _ &#34;expvar&#34;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>package expvar
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>import (
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;encoding/json&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Var is an abstract type for all exported variables.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type Var interface {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// String returns a valid JSON value for the variable.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// Types with String methods that do not return valid JSON</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// (such as time.Time) must not be used as a Var.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	String() string
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type jsonVar interface {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// appendJSON appends the JSON representation of the receiver to b.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	appendJSON(b []byte) []byte
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Int is a 64-bit integer variable that satisfies the [Var] interface.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>type Int struct {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	i atomic.Int64
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func (v *Int) Value() int64 {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	return v.i.Load()
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="selection">func (v *Int) String() string</span> {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	return string(v.appendJSON(nil))
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func (v *Int) appendJSON(b []byte) []byte {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return strconv.AppendInt(b, v.i.Load(), 10)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func (v *Int) Add(delta int64) {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	v.i.Add(delta)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (v *Int) Set(value int64) {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	v.i.Store(value)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Float is a 64-bit float variable that satisfies the [Var] interface.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>type Float struct {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	f atomic.Uint64
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func (v *Float) Value() float64 {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	return math.Float64frombits(v.f.Load())
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (v *Float) String() string {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return string(v.appendJSON(nil))
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (v *Float) appendJSON(b []byte) []byte {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return strconv.AppendFloat(b, math.Float64frombits(v.f.Load()), &#39;g&#39;, -1, 64)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Add adds delta to v.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func (v *Float) Add(delta float64) {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	for {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		cur := v.f.Load()
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		curVal := math.Float64frombits(cur)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		nxtVal := curVal + delta
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		nxt := math.Float64bits(nxtVal)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		if v.f.CompareAndSwap(cur, nxt) {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			return
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// Set sets v to value.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (v *Float) Set(value float64) {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	v.f.Store(math.Float64bits(value))
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Map is a string-to-Var map variable that satisfies the [Var] interface.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>type Map struct {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	m      sync.Map <span class="comment">// map[string]Var</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	keysMu sync.RWMutex
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	keys   []string <span class="comment">// sorted</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// KeyValue represents a single entry in a [Map].</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>type KeyValue struct {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	Key   string
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	Value Var
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func (v *Map) String() string {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	return string(v.appendJSON(nil))
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (v *Map) appendJSON(b []byte) []byte {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return v.appendJSONMayExpand(b, false)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>func (v *Map) appendJSONMayExpand(b []byte, expand bool) []byte {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	afterCommaDelim := byte(&#39; &#39;)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	mayAppendNewline := func(b []byte) []byte { return b }
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if expand {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		afterCommaDelim = &#39;\n&#39;
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		mayAppendNewline = func(b []byte) []byte { return append(b, &#39;\n&#39;) }
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	b = append(b, &#39;{&#39;)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	b = mayAppendNewline(b)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	first := true
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	v.Do(func(kv KeyValue) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		if !first {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			b = append(b, &#39;,&#39;, afterCommaDelim)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		first = false
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		b = appendJSONQuote(b, kv.Key)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		b = append(b, &#39;:&#39;, &#39; &#39;)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		switch v := kv.Value.(type) {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		case nil:
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			b = append(b, &#34;null&#34;...)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		case jsonVar:
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			b = v.appendJSON(b)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		default:
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			b = append(b, v.String()...)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	})
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	b = mayAppendNewline(b)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	b = append(b, &#39;}&#39;)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	b = mayAppendNewline(b)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	return b
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// Init removes all keys from the map.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func (v *Map) Init() *Map {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	v.keysMu.Lock()
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	defer v.keysMu.Unlock()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	v.keys = v.keys[:0]
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	v.m.Range(func(k, _ any) bool {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		v.m.Delete(k)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return true
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	})
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return v
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// addKey updates the sorted list of keys in v.keys.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (v *Map) addKey(key string) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	v.keysMu.Lock()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	defer v.keysMu.Unlock()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// Using insertion sort to place key into the already-sorted v.keys.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if i := sort.SearchStrings(v.keys, key); i &gt;= len(v.keys) {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		v.keys = append(v.keys, key)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	} else if v.keys[i] != key {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		v.keys = append(v.keys, &#34;&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		copy(v.keys[i+1:], v.keys[i:])
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		v.keys[i] = key
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (v *Map) Get(key string) Var {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	i, _ := v.m.Load(key)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	av, _ := i.(Var)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return av
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func (v *Map) Set(key string, av Var) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Before we store the value, check to see whether the key is new. Try a Load</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// before LoadOrStore: LoadOrStore causes the key interface to escape even on</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// the Load path.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	if _, ok := v.m.Load(key); !ok {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		if _, dup := v.m.LoadOrStore(key, av); !dup {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			v.addKey(key)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	v.m.Store(key, av)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Add adds delta to the *[Int] value stored under the given map key.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (v *Map) Add(key string, delta int64) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	i, ok := v.m.Load(key)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if !ok {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		var dup bool
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		i, dup = v.m.LoadOrStore(key, new(Int))
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		if !dup {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			v.addKey(key)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">// Add to Int; ignore otherwise.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if iv, ok := i.(*Int); ok {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		iv.Add(delta)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// AddFloat adds delta to the *[Float] value stored under the given map key.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func (v *Map) AddFloat(key string, delta float64) {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	i, ok := v.m.Load(key)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if !ok {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		var dup bool
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		i, dup = v.m.LoadOrStore(key, new(Float))
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		if !dup {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			v.addKey(key)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Add to Float; ignore otherwise.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if iv, ok := i.(*Float); ok {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		iv.Add(delta)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// Delete deletes the given key from the map.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (v *Map) Delete(key string) {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	v.keysMu.Lock()
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	defer v.keysMu.Unlock()
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	i := sort.SearchStrings(v.keys, key)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	if i &lt; len(v.keys) &amp;&amp; key == v.keys[i] {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		v.keys = append(v.keys[:i], v.keys[i+1:]...)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		v.m.Delete(key)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// Do calls f for each entry in the map.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// The map is locked during the iteration,</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// but existing entries may be concurrently updated.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func (v *Map) Do(f func(KeyValue)) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	v.keysMu.RLock()
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	defer v.keysMu.RUnlock()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	for _, k := range v.keys {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		i, _ := v.m.Load(k)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		val, _ := i.(Var)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		f(KeyValue{k, val})
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// String is a string variable, and satisfies the [Var] interface.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>type String struct {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	s atomic.Value <span class="comment">// string</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>func (v *String) Value() string {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	p, _ := v.s.Load().(string)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	return p
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// String implements the [Var] interface. To get the unquoted string</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// use [String.Value].</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (v *String) String() string {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return string(v.appendJSON(nil))
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func (v *String) appendJSON(b []byte) []byte {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return appendJSONQuote(b, v.Value())
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>func (v *String) Set(value string) {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	v.s.Store(value)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// Func implements [Var] by calling the function</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// and formatting the returned value using JSON.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>type Func func() any
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (f Func) Value() any {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return f()
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>func (f Func) String() string {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	v, _ := json.Marshal(f())
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	return string(v)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// All published variables.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>var vars Map
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// Publish declares a named exported variable. This should be called from a</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// package&#39;s init function when it creates its Vars. If the name is already</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// registered then this will log.Panic.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>func Publish(name string, v Var) {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if _, dup := vars.m.LoadOrStore(name, v); dup {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		log.Panicln(&#34;Reuse of exported var name:&#34;, name)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	vars.keysMu.Lock()
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	defer vars.keysMu.Unlock()
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	vars.keys = append(vars.keys, name)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	sort.Strings(vars.keys)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// Get retrieves a named exported variable. It returns nil if the name has</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// not been registered.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func Get(name string) Var {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return vars.Get(name)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// Convenience functions for creating new exported variables.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func NewInt(name string) *Int {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	v := new(Int)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	Publish(name, v)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return v
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>func NewFloat(name string) *Float {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	v := new(Float)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	Publish(name, v)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return v
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func NewMap(name string) *Map {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	v := new(Map).Init()
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	Publish(name, v)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	return v
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>func NewString(name string) *String {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	v := new(String)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	Publish(name, v)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	return v
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// Do calls f for each exported variable.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// The global variable map is locked during the iteration,</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// but existing entries may be concurrently updated.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func Do(f func(KeyValue)) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	vars.Do(f)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func expvarHandler(w http.ResponseWriter, r *http.Request) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	w.Header().Set(&#34;Content-Type&#34;, &#34;application/json; charset=utf-8&#34;)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	w.Write(vars.appendJSONMayExpand(nil, true))
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// Handler returns the expvar HTTP Handler.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// This is only needed to install the handler in a non-standard location.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>func Handler() http.Handler {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	return http.HandlerFunc(expvarHandler)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func cmdline() any {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	return os.Args
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>func memstats() any {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	stats := new(runtime.MemStats)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	runtime.ReadMemStats(stats)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	return *stats
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func init() {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	http.HandleFunc(&#34;/debug/vars&#34;, expvarHandler)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	Publish(&#34;cmdline&#34;, Func(cmdline))
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	Publish(&#34;memstats&#34;, Func(memstats))
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// TODO: Use json.appendString instead.</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>func appendJSONQuote(b []byte, s string) []byte {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	const hex = &#34;0123456789abcdef&#34;
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	b = append(b, &#39;&#34;&#39;)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	for _, r := range s {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		switch {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		case r &lt; &#39; &#39; || r == &#39;\\&#39; || r == &#39;&#34;&#39; || r == &#39;&lt;&#39; || r == &#39;&gt;&#39; || r == &#39;&amp;&#39; || r == &#39;\u2028&#39; || r == &#39;\u2029&#39;:
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			switch r {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			case &#39;\\&#39;, &#39;&#34;&#39;:
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				b = append(b, &#39;\\&#39;, byte(r))
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			case &#39;\n&#39;:
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>				b = append(b, &#39;\\&#39;, &#39;n&#39;)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			case &#39;\r&#39;:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>				b = append(b, &#39;\\&#39;, &#39;r&#39;)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			case &#39;\t&#39;:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				b = append(b, &#39;\\&#39;, &#39;t&#39;)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			default:
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				b = append(b, &#39;\\&#39;, &#39;u&#39;, hex[(r&gt;&gt;12)&amp;0xf], hex[(r&gt;&gt;8)&amp;0xf], hex[(r&gt;&gt;4)&amp;0xf], hex[(r&gt;&gt;0)&amp;0xf])
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		case r &lt; utf8.RuneSelf:
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			b = append(b, byte(r))
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		default:
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			b = utf8.AppendRune(b, r)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	b = append(b, &#39;&#34;&#39;)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	return b
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
</pre><p><a href="expvar.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
