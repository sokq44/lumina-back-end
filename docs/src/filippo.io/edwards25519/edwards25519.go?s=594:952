<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/filippo.io/edwards25519/edwards25519.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./edwards25519.go?s=594:952#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/filippo.io">filippo.io</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519">edwards25519</a>/<span class="text-muted">edwards25519.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/filippo.io/edwards25519">filippo.io/edwards25519</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright (c) 2017 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package edwards25519
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;filippo.io/edwards25519/field&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// Point types.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type projP1xP1 struct {
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	X, Y, Z, T field.Element
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>}
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>type projP2 struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	X, Y, Z field.Element
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// Point represents a point on the edwards25519 curve.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// This type works similarly to math/big.Int, and all arguments and receivers</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// are allowed to alias.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// The zero value is NOT valid, and it may be used only as a receiver.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="selection">type Point struct {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Make the type not comparable (i.e. used with == or as a map key), as</span><span class="selection">
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	</span><span class="selection-comment">// equivalent points can be represented by different Go values.</span><span class="selection">
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	_ incomparable
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	</span><span class="selection-comment">// The point is internally represented in extended coordinates (X, Y, Z, T)</span><span class="selection">
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	</span><span class="selection-comment">// where x = X/Z, y = Y/Z, and xy = T/Z per https://eprint.iacr.org/2008/522.</span><span class="selection">
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	x, y, z, t field.Element
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type incomparable [0]func()
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>func checkInitialized(points ...*Point) {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	for _, p := range points {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		if p.x == (field.Element{}) &amp;&amp; p.y == (field.Element{}) {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			panic(&#34;edwards25519: use of uninitialized Point&#34;)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>type projCached struct {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	YplusX, YminusX, Z, T2d field.Element
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>type affineCached struct {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	YplusX, YminusX, T2d field.Element
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// Constructors.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func (v *projP2) Zero() *projP2 {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	v.X.Zero()
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	v.Y.One()
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	v.Z.One()
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	return v
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// identity is the point at infinity.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>var identity, _ = new(Point).SetBytes([]byte{
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// NewIdentityPoint returns a new Point set to the identity.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func NewIdentityPoint() *Point {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return new(Point).Set(identity)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// generator is the canonical curve basepoint. See TestGenerator for the</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// correspondence of this encoding with the values in RFC 8032.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>var generator, _ = new(Point).SetBytes([]byte{
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66})
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// NewGeneratorPoint returns a new Point set to the canonical generator.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func NewGeneratorPoint() *Point {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return new(Point).Set(generator)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (v *projCached) Zero() *projCached {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	v.YplusX.One()
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	v.YminusX.One()
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	v.Z.One()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	v.T2d.Zero()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	return v
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func (v *affineCached) Zero() *affineCached {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	v.YplusX.One()
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	v.YminusX.One()
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	v.T2d.Zero()
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return v
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// Assignments.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// Set sets v = u, and returns v.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (v *Point) Set(u *Point) *Point {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	*v = *u
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return v
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Encoding.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// Bytes returns the canonical 32-byte encoding of v, according to RFC 8032,</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Section 5.1.2.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (v *Point) Bytes() []byte {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// This function is outlined to make the allocations inline in the caller</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// rather than happen on the heap.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	var buf [32]byte
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return v.bytes(&amp;buf)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (v *Point) bytes(buf *[32]byte) []byte {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	checkInitialized(v)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	var zInv, x, y field.Element
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	zInv.Invert(&amp;v.z)       <span class="comment">// zInv = 1 / Z</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	x.Multiply(&amp;v.x, &amp;zInv) <span class="comment">// x = X / Z</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	y.Multiply(&amp;v.y, &amp;zInv) <span class="comment">// y = Y / Z</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	out := copyFieldElement(buf, &amp;y)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	out[31] |= byte(x.IsNegative() &lt;&lt; 7)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return out
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>var feOne = new(field.Element).One()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// SetBytes sets v = x, where x is a 32-byte encoding of v. If x does not</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// represent a valid point on the curve, SetBytes returns nil and an error and</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// the receiver is unchanged. Otherwise, SetBytes returns v.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// Note that SetBytes accepts all non-canonical encodings of valid points.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// That is, it follows decoding rules that match most implementations in</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// the ecosystem rather than RFC 8032.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (v *Point) SetBytes(x []byte) (*Point, error) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// Specifically, the non-canonical encodings that are accepted are</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//   1) the ones where the field element is not reduced (see the</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">//      (*field.Element).SetBytes docs) and</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//   2) the ones where the x-coordinate is zero and the sign bit is set.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// Read more at https://hdevalence.ca/blog/2020-10-04-its-25519am,</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// specifically the &#34;Canonical A, R&#34; section.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	y, err := new(field.Element).SetBytes(x)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return nil, errors.New(&#34;edwards25519: invalid point encoding length&#34;)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// -x² + y² = 1 + dx²y²</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// x² + dx²y² = x²(dy² + 1) = y² - 1</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// x² = (y² - 1) / (dy² + 1)</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// u = y² - 1</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	y2 := new(field.Element).Square(y)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	u := new(field.Element).Subtract(y2, feOne)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// v = dy² + 1</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	vv := new(field.Element).Multiply(y2, d)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	vv = vv.Add(vv, feOne)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// x = +√(u/v)</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	xx, wasSquare := new(field.Element).SqrtRatio(u, vv)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if wasSquare == 0 {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return nil, errors.New(&#34;edwards25519: invalid point encoding&#34;)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// Select the negative square root if the sign bit is set.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	xxNeg := new(field.Element).Negate(xx)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	xx = xx.Select(xxNeg, xx, int(x[31]&gt;&gt;7))
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	v.x.Set(xx)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	v.y.Set(y)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	v.z.One()
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	v.t.Multiply(xx, y) <span class="comment">// xy = T / Z</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	return v, nil
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func copyFieldElement(buf *[32]byte, v *field.Element) []byte {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	copy(buf[:], v.Bytes())
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return buf[:]
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Conversions.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func (v *projP2) FromP1xP1(p *projP1xP1) *projP2 {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	v.X.Multiply(&amp;p.X, &amp;p.T)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	v.Y.Multiply(&amp;p.Y, &amp;p.Z)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	v.Z.Multiply(&amp;p.Z, &amp;p.T)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return v
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>func (v *projP2) FromP3(p *Point) *projP2 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	v.X.Set(&amp;p.x)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	v.Y.Set(&amp;p.y)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	v.Z.Set(&amp;p.z)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return v
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (v *Point) fromP1xP1(p *projP1xP1) *Point {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	v.x.Multiply(&amp;p.X, &amp;p.T)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	v.y.Multiply(&amp;p.Y, &amp;p.Z)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	v.z.Multiply(&amp;p.Z, &amp;p.T)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	v.t.Multiply(&amp;p.X, &amp;p.Y)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	return v
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (v *Point) fromP2(p *projP2) *Point {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	v.x.Multiply(&amp;p.X, &amp;p.Z)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	v.y.Multiply(&amp;p.Y, &amp;p.Z)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	v.z.Square(&amp;p.Z)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	v.t.Multiply(&amp;p.X, &amp;p.Y)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	return v
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// d is a constant in the curve equation.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>var d, _ = new(field.Element).SetBytes([]byte{
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	0xa3, 0x78, 0x59, 0x13, 0xca, 0x4d, 0xeb, 0x75,
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	0xab, 0xd8, 0x41, 0x41, 0x4d, 0x0a, 0x70, 0x00,
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52})
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>var d2 = new(field.Element).Add(d, d)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func (v *projCached) FromP3(p *Point) *projCached {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	v.YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	v.YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	v.Z.Set(&amp;p.z)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	v.T2d.Multiply(&amp;p.t, d2)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return v
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (v *affineCached) FromP3(p *Point) *affineCached {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	v.YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	v.YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	v.T2d.Multiply(&amp;p.t, d2)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	var invZ field.Element
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	invZ.Invert(&amp;p.z)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	v.YplusX.Multiply(&amp;v.YplusX, &amp;invZ)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	v.YminusX.Multiply(&amp;v.YminusX, &amp;invZ)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	v.T2d.Multiply(&amp;v.T2d, &amp;invZ)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	return v
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// (Re)addition and subtraction.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// Add sets v = p + q, and returns v.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>func (v *Point) Add(p, q *Point) *Point {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	checkInitialized(p, q)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	qCached := new(projCached).FromP3(q)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	result := new(projP1xP1).Add(p, qCached)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return v.fromP1xP1(result)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// Subtract sets v = p - q, and returns v.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>func (v *Point) Subtract(p, q *Point) *Point {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	checkInitialized(p, q)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	qCached := new(projCached).FromP3(q)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	result := new(projP1xP1).Sub(p, qCached)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return v.fromP1xP1(result)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func (v *projP1xP1) Add(p *Point, q *projCached) *projP1xP1 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	var YplusX, YminusX, PP, MM, TT2d, ZZ2 field.Element
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	PP.Multiply(&amp;YplusX, &amp;q.YplusX)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	MM.Multiply(&amp;YminusX, &amp;q.YminusX)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	TT2d.Multiply(&amp;p.t, &amp;q.T2d)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	ZZ2.Multiply(&amp;p.z, &amp;q.Z)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	ZZ2.Add(&amp;ZZ2, &amp;ZZ2)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	v.X.Subtract(&amp;PP, &amp;MM)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	v.Y.Add(&amp;PP, &amp;MM)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	v.Z.Add(&amp;ZZ2, &amp;TT2d)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	v.T.Subtract(&amp;ZZ2, &amp;TT2d)
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	return v
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>func (v *projP1xP1) Sub(p *Point, q *projCached) *projP1xP1 {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	var YplusX, YminusX, PP, MM, TT2d, ZZ2 field.Element
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	PP.Multiply(&amp;YplusX, &amp;q.YminusX) <span class="comment">// flipped sign</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	MM.Multiply(&amp;YminusX, &amp;q.YplusX) <span class="comment">// flipped sign</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	TT2d.Multiply(&amp;p.t, &amp;q.T2d)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	ZZ2.Multiply(&amp;p.z, &amp;q.Z)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	ZZ2.Add(&amp;ZZ2, &amp;ZZ2)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	v.X.Subtract(&amp;PP, &amp;MM)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	v.Y.Add(&amp;PP, &amp;MM)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	v.Z.Subtract(&amp;ZZ2, &amp;TT2d) <span class="comment">// flipped sign</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	v.T.Add(&amp;ZZ2, &amp;TT2d)      <span class="comment">// flipped sign</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return v
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func (v *projP1xP1) AddAffine(p *Point, q *affineCached) *projP1xP1 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	var YplusX, YminusX, PP, MM, TT2d, Z2 field.Element
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	PP.Multiply(&amp;YplusX, &amp;q.YplusX)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	MM.Multiply(&amp;YminusX, &amp;q.YminusX)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	TT2d.Multiply(&amp;p.t, &amp;q.T2d)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	Z2.Add(&amp;p.z, &amp;p.z)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	v.X.Subtract(&amp;PP, &amp;MM)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	v.Y.Add(&amp;PP, &amp;MM)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	v.Z.Add(&amp;Z2, &amp;TT2d)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	v.T.Subtract(&amp;Z2, &amp;TT2d)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return v
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func (v *projP1xP1) SubAffine(p *Point, q *affineCached) *projP1xP1 {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	var YplusX, YminusX, PP, MM, TT2d, Z2 field.Element
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	YplusX.Add(&amp;p.y, &amp;p.x)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	YminusX.Subtract(&amp;p.y, &amp;p.x)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	PP.Multiply(&amp;YplusX, &amp;q.YminusX) <span class="comment">// flipped sign</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	MM.Multiply(&amp;YminusX, &amp;q.YplusX) <span class="comment">// flipped sign</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	TT2d.Multiply(&amp;p.t, &amp;q.T2d)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	Z2.Add(&amp;p.z, &amp;p.z)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	v.X.Subtract(&amp;PP, &amp;MM)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	v.Y.Add(&amp;PP, &amp;MM)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	v.Z.Subtract(&amp;Z2, &amp;TT2d) <span class="comment">// flipped sign</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	v.T.Add(&amp;Z2, &amp;TT2d)      <span class="comment">// flipped sign</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	return v
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// Doubling.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func (v *projP1xP1) Double(p *projP2) *projP1xP1 {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	var XX, YY, ZZ2, XplusYsq field.Element
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	XX.Square(&amp;p.X)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	YY.Square(&amp;p.Y)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	ZZ2.Square(&amp;p.Z)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	ZZ2.Add(&amp;ZZ2, &amp;ZZ2)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	XplusYsq.Add(&amp;p.X, &amp;p.Y)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	XplusYsq.Square(&amp;XplusYsq)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	v.Y.Add(&amp;YY, &amp;XX)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	v.Z.Subtract(&amp;YY, &amp;XX)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	v.X.Subtract(&amp;XplusYsq, &amp;v.Y)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	v.T.Subtract(&amp;ZZ2, &amp;v.Z)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return v
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// Negation.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// Negate sets v = -p, and returns v.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>func (v *Point) Negate(p *Point) *Point {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	checkInitialized(p)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	v.x.Negate(&amp;p.x)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	v.y.Set(&amp;p.y)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	v.z.Set(&amp;p.z)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	v.t.Negate(&amp;p.t)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	return v
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// Equal returns 1 if v is equivalent to u, and 0 otherwise.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>func (v *Point) Equal(u *Point) int {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	checkInitialized(v, u)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	var t1, t2, t3, t4 field.Element
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	t1.Multiply(&amp;v.x, &amp;u.z)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	t2.Multiply(&amp;u.x, &amp;v.z)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	t3.Multiply(&amp;v.y, &amp;u.z)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	t4.Multiply(&amp;u.y, &amp;v.z)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return t1.Equal(&amp;t2) &amp; t3.Equal(&amp;t4)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// Constant-time operations</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// Select sets v to a if cond == 1 and to b if cond == 0.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func (v *projCached) Select(a, b *projCached, cond int) *projCached {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	v.YplusX.Select(&amp;a.YplusX, &amp;b.YplusX, cond)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	v.YminusX.Select(&amp;a.YminusX, &amp;b.YminusX, cond)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	v.Z.Select(&amp;a.Z, &amp;b.Z, cond)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	v.T2d.Select(&amp;a.T2d, &amp;b.T2d, cond)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	return v
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// Select sets v to a if cond == 1 and to b if cond == 0.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func (v *affineCached) Select(a, b *affineCached, cond int) *affineCached {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	v.YplusX.Select(&amp;a.YplusX, &amp;b.YplusX, cond)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	v.YminusX.Select(&amp;a.YminusX, &amp;b.YminusX, cond)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	v.T2d.Select(&amp;a.T2d, &amp;b.T2d, cond)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	return v
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// CondNeg negates v if cond == 1 and leaves it unchanged if cond == 0.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>func (v *projCached) CondNeg(cond int) *projCached {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	v.YplusX.Swap(&amp;v.YminusX, cond)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	v.T2d.Select(new(field.Element).Negate(&amp;v.T2d), &amp;v.T2d, cond)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	return v
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// CondNeg negates v if cond == 1 and leaves it unchanged if cond == 0.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>func (v *affineCached) CondNeg(cond int) *affineCached {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	v.YplusX.Swap(&amp;v.YminusX, cond)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	v.T2d.Select(new(field.Element).Negate(&amp;v.T2d), &amp;v.T2d, cond)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	return v
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
</pre><p><a href="edwards25519.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
