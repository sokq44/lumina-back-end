<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/filippo.io/edwards25519/extra.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./extra.go?s=8975:9056#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/filippo.io">filippo.io</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519">edwards25519</a>/<span class="text-muted">extra.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/filippo.io/edwards25519">filippo.io/edwards25519</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright (c) 2021 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package edwards25519
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file contains additional functionality that is not included in the</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// upstream crypto/internal/edwards25519 package.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;filippo.io/edwards25519/field&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// ExtendedCoordinates returns v in extended coordinates (X:Y:Z:T) where</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// x = X/Z, y = Y/Z, and xy = T/Z as in https://eprint.iacr.org/2008/522.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func (v *Point) ExtendedCoordinates() (X, Y, Z, T *field.Element) {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// This function is outlined to make the allocations inline in the caller</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// rather than happen on the heap. Don&#39;t change the style without making</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// sure it doesn&#39;t increase the inliner cost.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	var e [4]field.Element
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	X, Y, Z, T = v.extendedCoordinates(&amp;e)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	return
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func (v *Point) extendedCoordinates(e *[4]field.Element) (X, Y, Z, T *field.Element) {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	checkInitialized(v)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	X = e[0].Set(&amp;v.x)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Y = e[1].Set(&amp;v.y)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Z = e[2].Set(&amp;v.z)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	T = e[3].Set(&amp;v.t)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// SetExtendedCoordinates sets v = (X:Y:Z:T) in extended coordinates where</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// x = X/Z, y = Y/Z, and xy = T/Z as in https://eprint.iacr.org/2008/522.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// If the coordinates are invalid or don&#39;t represent a valid point on the curve,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// SetExtendedCoordinates returns nil and an error and the receiver is</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// unchanged. Otherwise, SetExtendedCoordinates returns v.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (v *Point) SetExtendedCoordinates(X, Y, Z, T *field.Element) (*Point, error) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	if !isOnCurve(X, Y, Z, T) {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		return nil, errors.New(&#34;edwards25519: invalid point coordinates&#34;)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	v.x.Set(X)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	v.y.Set(Y)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	v.z.Set(Z)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	v.t.Set(T)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	return v, nil
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func isOnCurve(X, Y, Z, T *field.Element) bool {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	var lhs, rhs field.Element
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	XX := new(field.Element).Square(X)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	YY := new(field.Element).Square(Y)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	ZZ := new(field.Element).Square(Z)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	TT := new(field.Element).Square(T)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// -x² + y² = 1 + dx²y²</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// -(X/Z)² + (Y/Z)² = 1 + d(T/Z)²</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// -X² + Y² = Z² + dT²</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	lhs.Subtract(YY, XX)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	rhs.Multiply(d, TT).Add(&amp;rhs, ZZ)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if lhs.Equal(&amp;rhs) != 1 {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		return false
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// xy = T/Z</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// XY/Z² = T/Z</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// XY = TZ</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	lhs.Multiply(X, Y)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	rhs.Multiply(T, Z)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return lhs.Equal(&amp;rhs) == 1
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// BytesMontgomery converts v to a point on the birationally-equivalent</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Curve25519 Montgomery curve, and returns its canonical 32 bytes encoding</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// according to RFC 7748.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// Note that BytesMontgomery only encodes the u-coordinate, so v and -v encode</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// to the same value. If v is the identity point, BytesMontgomery returns 32</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// zero bytes, analogously to the X25519 function.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// The lack of an inverse operation (such as SetMontgomeryBytes) is deliberate:</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// while every valid edwards25519 point has a unique u-coordinate Montgomery</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// encoding, X25519 accepts inputs on the quadratic twist, which don&#39;t correspond</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// to any edwards25519 point, and every other X25519 input corresponds to two</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// edwards25519 points.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (v *Point) BytesMontgomery() []byte {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// This function is outlined to make the allocations inline in the caller</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// rather than happen on the heap.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	var buf [32]byte
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return v.bytesMontgomery(&amp;buf)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func (v *Point) bytesMontgomery(buf *[32]byte) []byte {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	checkInitialized(v)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// RFC 7748, Section 4.1 provides the bilinear map to calculate the</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// Montgomery u-coordinate</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">//              u = (1 + y) / (1 - y)</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// where y = Y / Z.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	var y, recip, u field.Element
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	y.Multiply(&amp;v.y, y.Invert(&amp;v.z))        <span class="comment">// y = Y / Z</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	recip.Invert(recip.Subtract(feOne, &amp;y)) <span class="comment">// r = 1/(1 - y)</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	u.Multiply(u.Add(feOne, &amp;y), &amp;recip)    <span class="comment">// u = (1 + y)*r</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return copyFieldElement(buf, &amp;u)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// MultByCofactor sets v = 8 * p, and returns v.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>func (v *Point) MultByCofactor(p *Point) *Point {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	checkInitialized(p)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	result := projP1xP1{}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	pp := (&amp;projP2{}).FromP3(p)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	result.Double(pp)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	pp.FromP1xP1(&amp;result)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	result.Double(pp)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	pp.FromP1xP1(&amp;result)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	result.Double(pp)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return v.fromP1xP1(&amp;result)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// Given k &gt; 0, set s = s**(2*i).</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (s *Scalar) pow2k(k int) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	for i := 0; i &lt; k; i++ {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		s.Multiply(s, s)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Invert sets s to the inverse of a nonzero scalar v, and returns s.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// If t is zero, Invert returns zero.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (s *Scalar) Invert(t *Scalar) *Scalar {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// Uses a hardcoded sliding window of width 4.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	var table [8]Scalar
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	var tt Scalar
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	tt.Multiply(t, t)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	table[0] = *t
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	for i := 0; i &lt; 7; i++ {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		table[i+1].Multiply(&amp;table[i], &amp;tt)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// Now table = [t**1, t**3, t**5, t**7, t**9, t**11, t**13, t**15]</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// so t**k = t[k/2] for odd k</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// To compute the sliding window digits, use the following Sage script:</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// sage: import itertools</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// sage: def sliding_window(w,k):</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// ....:     digits = []</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// ....:     while k &gt; 0:</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// ....:         if k % 2 == 1:</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// ....:             kmod = k % (2**w)</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// ....:             digits.append(kmod)</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// ....:             k = k - kmod</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// ....:         else:</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// ....:             digits.append(0)</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// ....:         k = k // 2</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// ....:     return digits</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// Now we can compute s roughly as follows:</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// sage: s = 1</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// sage: for coeff in reversed(sliding_window(4,l-2)):</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// ....:     s = s*s</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// ....:     if coeff &gt; 0 :</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// ....:         s = s*t**coeff</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// This works on one bit at a time, with many runs of zeros.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// The digits can be collapsed into [(count, coeff)] as follows:</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// sage: [(len(list(group)),d) for d,group in itertools.groupby(sliding_window(4,l-2))]</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// Entries of the form (k, 0) turn into pow2k(k)</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// Entries of the form (1, coeff) turn into a squaring and then a table lookup.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// We can fold the squaring into the previous pow2k(k) as pow2k(k+1).</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	*s = table[1/2]
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	s.pow2k(127 + 1)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[1/2])
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[9/2])
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[11/2])
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[13/2])
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[15/2])
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[7/2])
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[15/2])
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[5/2])
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[1/2])
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[15/2])
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[15/2])
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[7/2])
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[3/2])
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[11/2])
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	s.pow2k(5 + 1)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[11/2])
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	s.pow2k(9 + 1)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[9/2])
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[3/2])
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[3/2])
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[3/2])
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[9/2])
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[7/2])
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[3/2])
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[13/2])
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[7/2])
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[9/2])
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	s.pow2k(3 + 1)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[15/2])
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	s.pow2k(4 + 1)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	s.Multiply(s, &amp;table[11/2])
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return s
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// MultiScalarMult sets v = sum(scalars[i] * points[i]), and returns v.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// Execution time depends only on the lengths of the two slices, which must match.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (v *Point) MultiScalarMult(scalars []*Scalar, points []*Point) *Point {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	if len(scalars) != len(points) {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		panic(&#34;edwards25519: called MultiScalarMult with different size inputs&#34;)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	checkInitialized(points...)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// Proceed as in the single-base case, but share doublings</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// between each point in the multiscalar equation.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Build lookup tables for each point</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	tables := make([]projLookupTable, len(points))
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	for i := range tables {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		tables[i].FromP3(points[i])
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Compute signed radix-16 digits for each scalar</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	digits := make([][64]int8, len(scalars))
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	for i := range digits {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		digits[i] = scalars[i].signedRadix16()
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// Unwrap first loop iteration to save computing 16*identity</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	multiple := &amp;projCached{}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	tmp1 := &amp;projP1xP1{}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	tmp2 := &amp;projP2{}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// Lookup-and-add the appropriate multiple of each input point</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	for j := range tables {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		tables[j].SelectInto(multiple, digits[j][63])
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		tmp1.Add(v, multiple) <span class="comment">// tmp1 = v + x_(j,63)*Q in P1xP1 coords</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		v.fromP1xP1(tmp1)     <span class="comment">// update v</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	tmp2.FromP3(v) <span class="comment">// set up tmp2 = v in P2 coords for next iteration</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	for i := 62; i &gt;= 0; i-- {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  2*(prev) in P1xP1 coords</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  2*(prev) in P2 coords</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  4*(prev) in P1xP1 coords</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  4*(prev) in P2 coords</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  8*(prev) in P1xP1 coords</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  8*(prev) in P2 coords</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 = 16*(prev) in P1xP1 coords</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		v.fromP1xP1(tmp1)    <span class="comment">//    v = 16*(prev) in P3 coords</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		<span class="comment">// Lookup-and-add the appropriate multiple of each input point</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		for j := range tables {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			tables[j].SelectInto(multiple, digits[j][i])
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			tmp1.Add(v, multiple) <span class="comment">// tmp1 = v + x_(j,i)*Q in P1xP1 coords</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			v.fromP1xP1(tmp1)     <span class="comment">// update v</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		tmp2.FromP3(v) <span class="comment">// set up tmp2 = v in P2 coords for next iteration</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	return v
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// VarTimeMultiScalarMult sets v = sum(scalars[i] * points[i]), and returns v.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// Execution time depends on the inputs.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="selection">func (v *Point) VarTimeMultiScalarMult(scalars []*Scalar, points []*Point) *Point</span> {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	if len(scalars) != len(points) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		panic(&#34;edwards25519: called VarTimeMultiScalarMult with different size inputs&#34;)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	checkInitialized(points...)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// Generalize double-base NAF computation to arbitrary sizes.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// Here all the points are dynamic, so we only use the smaller</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// tables.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// Build lookup tables for each point</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	tables := make([]nafLookupTable5, len(points))
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	for i := range tables {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		tables[i].FromP3(points[i])
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// Compute a NAF for each scalar</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	nafs := make([][256]int8, len(scalars))
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	for i := range nafs {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		nafs[i] = scalars[i].nonAdjacentForm(5)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	multiple := &amp;projCached{}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	tmp1 := &amp;projP1xP1{}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	tmp2 := &amp;projP2{}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	tmp2.Zero()
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// Move from high to low bits, doubling the accumulator</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// at each iteration and checking whether there is a nonzero</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// coefficient to look up a multiple of.</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// Skip trying to find the first nonzero coefficent, because</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// searching might be more work than a few extra doublings.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	for i := 255; i &gt;= 0; i-- {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		tmp1.Double(tmp2)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		for j := range nafs {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			if nafs[j][i] &gt; 0 {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				v.fromP1xP1(tmp1)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				tables[j].SelectInto(multiple, nafs[j][i])
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				tmp1.Add(v, multiple)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			} else if nafs[j][i] &lt; 0 {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>				v.fromP1xP1(tmp1)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>				tables[j].SelectInto(multiple, -nafs[j][i])
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>				tmp1.Sub(v, multiple)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	v.fromP2(tmp2)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	return v
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
</pre><p><a href="extra.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
