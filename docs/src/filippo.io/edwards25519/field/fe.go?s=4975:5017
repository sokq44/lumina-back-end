<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/filippo.io/edwards25519/field/fe.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./fe.go?s=4975:5017#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/filippo.io">filippo.io</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519">edwards25519</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519/field">field</a>/<span class="text-muted">fe.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/filippo.io/edwards25519/field">filippo.io/edwards25519/field</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright (c) 2017 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package field implements fast arithmetic modulo 2^255-19.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package field
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/subtle&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Element represents an element of the field GF(2^255-19). Note that this</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// is not a cryptographically secure group, and should only be used to interact</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// with edwards25519.Point coordinates.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// This type works similarly to math/big.Int, and all arguments and receivers</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// are allowed to alias.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// The zero value is a valid zero element.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>type Element struct {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// An element t represents the integer</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">//     t.l0 + t.l1*2^51 + t.l2*2^102 + t.l3*2^153 + t.l4*2^204</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// Between operations, all limbs are expected to be lower than 2^52.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	l0 uint64
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	l1 uint64
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	l2 uint64
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	l3 uint64
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	l4 uint64
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>const maskLow51Bits uint64 = (1 &lt;&lt; 51) - 1
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>var feZero = &amp;Element{0, 0, 0, 0, 0}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Zero sets v = 0, and returns v.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func (v *Element) Zero() *Element {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	*v = *feZero
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	return v
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>var feOne = &amp;Element{1, 0, 0, 0, 0}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// One sets v = 1, and returns v.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (v *Element) One() *Element {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	*v = *feOne
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	return v
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// reduce reduces v modulo 2^255 - 19 and returns it.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (v *Element) reduce() *Element {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	v.carryPropagate()
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// After the light reduction we now have a field element representation</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// v &lt; 2^255 + 2^13 * 19, but need v &lt; 2^255 - 19.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// If v &gt;= 2^255 - 19, then v + 19 &gt;= 2^255, which would overflow 2^255 - 1,</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// generating a carry. That is, c will be 0 if v &lt; 2^255 - 19, and 1 otherwise.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	c := (v.l0 + 19) &gt;&gt; 51
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	c = (v.l1 + c) &gt;&gt; 51
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	c = (v.l2 + c) &gt;&gt; 51
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	c = (v.l3 + c) &gt;&gt; 51
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	c = (v.l4 + c) &gt;&gt; 51
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// If v &lt; 2^255 - 19 and c = 0, this will be a no-op. Otherwise, it&#39;s</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// effectively applying the reduction identity to the carry.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	v.l0 += 19 * c
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	v.l1 += v.l0 &gt;&gt; 51
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	v.l0 = v.l0 &amp; maskLow51Bits
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	v.l2 += v.l1 &gt;&gt; 51
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	v.l1 = v.l1 &amp; maskLow51Bits
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	v.l3 += v.l2 &gt;&gt; 51
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	v.l2 = v.l2 &amp; maskLow51Bits
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	v.l4 += v.l3 &gt;&gt; 51
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	v.l3 = v.l3 &amp; maskLow51Bits
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// no additional carry</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	v.l4 = v.l4 &amp; maskLow51Bits
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	return v
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// Add sets v = a + b, and returns v.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>func (v *Element) Add(a, b *Element) *Element {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	v.l0 = a.l0 + b.l0
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	v.l1 = a.l1 + b.l1
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	v.l2 = a.l2 + b.l2
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	v.l3 = a.l3 + b.l3
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	v.l4 = a.l4 + b.l4
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// Using the generic implementation here is actually faster than the</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// assembly. Probably because the body of this function is so simple that</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// the compiler can figure out better optimizations by inlining the carry</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// propagation.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return v.carryPropagateGeneric()
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Subtract sets v = a - b, and returns v.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func (v *Element) Subtract(a, b *Element) *Element {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// We first add 2 * p, to guarantee the subtraction won&#39;t underflow, and</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// then subtract b (which can be up to 2^255 + 2^13 * 19).</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	v.l0 = (a.l0 + 0xFFFFFFFFFFFDA) - b.l0
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	v.l1 = (a.l1 + 0xFFFFFFFFFFFFE) - b.l1
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	v.l2 = (a.l2 + 0xFFFFFFFFFFFFE) - b.l2
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	v.l3 = (a.l3 + 0xFFFFFFFFFFFFE) - b.l3
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	v.l4 = (a.l4 + 0xFFFFFFFFFFFFE) - b.l4
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return v.carryPropagate()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Negate sets v = -a, and returns v.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (v *Element) Negate(a *Element) *Element {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return v.Subtract(feZero, a)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Invert sets v = 1/z mod p, and returns v.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// If z == 0, Invert returns v = 0.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (v *Element) Invert(z *Element) *Element {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// Inversion is implemented as exponentiation with exponent p − 2. It uses the</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// same sequence of 255 squarings and 11 multiplications as [Curve25519].</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	var z2, z9, z11, z2_5_0, z2_10_0, z2_20_0, z2_50_0, z2_100_0, t Element
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	z2.Square(z)             <span class="comment">// 2</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	t.Square(&amp;z2)            <span class="comment">// 4</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	t.Square(&amp;t)             <span class="comment">// 8</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	z9.Multiply(&amp;t, z)       <span class="comment">// 9</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	z11.Multiply(&amp;z9, &amp;z2)   <span class="comment">// 11</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	t.Square(&amp;z11)           <span class="comment">// 22</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	z2_5_0.Multiply(&amp;t, &amp;z9) <span class="comment">// 31 = 2^5 - 2^0</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	t.Square(&amp;z2_5_0) <span class="comment">// 2^6 - 2^1</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	for i := 0; i &lt; 4; i++ {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^10 - 2^5</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	z2_10_0.Multiply(&amp;t, &amp;z2_5_0) <span class="comment">// 2^10 - 2^0</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	t.Square(&amp;z2_10_0) <span class="comment">// 2^11 - 2^1</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	for i := 0; i &lt; 9; i++ {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^20 - 2^10</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	z2_20_0.Multiply(&amp;t, &amp;z2_10_0) <span class="comment">// 2^20 - 2^0</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	t.Square(&amp;z2_20_0) <span class="comment">// 2^21 - 2^1</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	for i := 0; i &lt; 19; i++ {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^40 - 2^20</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	t.Multiply(&amp;t, &amp;z2_20_0) <span class="comment">// 2^40 - 2^0</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^41 - 2^1</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	for i := 0; i &lt; 9; i++ {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^50 - 2^10</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	z2_50_0.Multiply(&amp;t, &amp;z2_10_0) <span class="comment">// 2^50 - 2^0</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	t.Square(&amp;z2_50_0) <span class="comment">// 2^51 - 2^1</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	for i := 0; i &lt; 49; i++ {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^100 - 2^50</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	z2_100_0.Multiply(&amp;t, &amp;z2_50_0) <span class="comment">// 2^100 - 2^0</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	t.Square(&amp;z2_100_0) <span class="comment">// 2^101 - 2^1</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	for i := 0; i &lt; 99; i++ {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^200 - 2^100</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	t.Multiply(&amp;t, &amp;z2_100_0) <span class="comment">// 2^200 - 2^0</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^201 - 2^1</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	for i := 0; i &lt; 49; i++ {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		t.Square(&amp;t) <span class="comment">// 2^250 - 2^50</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	t.Multiply(&amp;t, &amp;z2_50_0) <span class="comment">// 2^250 - 2^0</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^251 - 2^1</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^252 - 2^2</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^253 - 2^3</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^254 - 2^4</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	t.Square(&amp;t) <span class="comment">// 2^255 - 2^5</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return v.Multiply(&amp;t, &amp;z11) <span class="comment">// 2^255 - 21</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// Set sets v = a, and returns v.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="selection">func (v *Element) Set(a *Element) *Element</span> {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	*v = *a
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	return v
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// SetBytes sets v to x, where x is a 32-byte little-endian encoding. If x is</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// not of the right length, SetBytes returns nil and an error, and the</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// receiver is unchanged.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Consistent with RFC 7748, the most significant bit (the high bit of the</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// last byte) is ignored, and non-canonical values (2^255-19 through 2^255-1)</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// are accepted. Note that this is laxer than specified by RFC 8032, but</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// consistent with most Ed25519 implementations.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func (v *Element) SetBytes(x []byte) (*Element, error) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if len(x) != 32 {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		return nil, errors.New(&#34;edwards25519: invalid field element input size&#34;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// Bits 0:51 (bytes 0:8, bits 0:64, shift 0, mask 51).</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	v.l0 = binary.LittleEndian.Uint64(x[0:8])
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	v.l0 &amp;= maskLow51Bits
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// Bits 51:102 (bytes 6:14, bits 48:112, shift 3, mask 51).</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	v.l1 = binary.LittleEndian.Uint64(x[6:14]) &gt;&gt; 3
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	v.l1 &amp;= maskLow51Bits
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// Bits 102:153 (bytes 12:20, bits 96:160, shift 6, mask 51).</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	v.l2 = binary.LittleEndian.Uint64(x[12:20]) &gt;&gt; 6
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	v.l2 &amp;= maskLow51Bits
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// Bits 153:204 (bytes 19:27, bits 152:216, shift 1, mask 51).</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	v.l3 = binary.LittleEndian.Uint64(x[19:27]) &gt;&gt; 1
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	v.l3 &amp;= maskLow51Bits
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// Bits 204:255 (bytes 24:32, bits 192:256, shift 12, mask 51).</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// Note: not bytes 25:33, shift 4, to avoid overread.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	v.l4 = binary.LittleEndian.Uint64(x[24:32]) &gt;&gt; 12
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	v.l4 &amp;= maskLow51Bits
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	return v, nil
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// Bytes returns the canonical 32-byte little-endian encoding of v.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>func (v *Element) Bytes() []byte {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// This function is outlined to make the allocations inline in the caller</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// rather than happen on the heap.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	var out [32]byte
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return v.bytes(&amp;out)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func (v *Element) bytes(out *[32]byte) []byte {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	t := *v
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	t.reduce()
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	var buf [8]byte
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	for i, l := range [5]uint64{t.l0, t.l1, t.l2, t.l3, t.l4} {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		bitsOffset := i * 51
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		binary.LittleEndian.PutUint64(buf[:], l&lt;&lt;uint(bitsOffset%8))
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		for i, bb := range buf {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			off := bitsOffset/8 + i
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			if off &gt;= len(out) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				break
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			out[off] |= bb
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	return out[:]
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// Equal returns 1 if v and u are equal, and 0 otherwise.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>func (v *Element) Equal(u *Element) int {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	sa, sv := u.Bytes(), v.Bytes()
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	return subtle.ConstantTimeCompare(sa, sv)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// mask64Bits returns 0xffffffff if cond is 1, and 0 otherwise.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>func mask64Bits(cond int) uint64 { return ^(uint64(cond) - 1) }
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// Select sets v to a if cond == 1, and to b if cond == 0.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (v *Element) Select(a, b *Element, cond int) *Element {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	m := mask64Bits(cond)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	v.l0 = (m &amp; a.l0) | (^m &amp; b.l0)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	v.l1 = (m &amp; a.l1) | (^m &amp; b.l1)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	v.l2 = (m &amp; a.l2) | (^m &amp; b.l2)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	v.l3 = (m &amp; a.l3) | (^m &amp; b.l3)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	v.l4 = (m &amp; a.l4) | (^m &amp; b.l4)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	return v
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// Swap swaps v and u if cond == 1 or leaves them unchanged if cond == 0, and returns v.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (v *Element) Swap(u *Element, cond int) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	m := mask64Bits(cond)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	t := m &amp; (v.l0 ^ u.l0)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	v.l0 ^= t
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	u.l0 ^= t
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	t = m &amp; (v.l1 ^ u.l1)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	v.l1 ^= t
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	u.l1 ^= t
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	t = m &amp; (v.l2 ^ u.l2)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	v.l2 ^= t
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	u.l2 ^= t
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	t = m &amp; (v.l3 ^ u.l3)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	v.l3 ^= t
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	u.l3 ^= t
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	t = m &amp; (v.l4 ^ u.l4)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	v.l4 ^= t
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	u.l4 ^= t
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// IsNegative returns 1 if v is negative, and 0 otherwise.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func (v *Element) IsNegative() int {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	return int(v.Bytes()[0] &amp; 1)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// Absolute sets v to |u|, and returns v.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (v *Element) Absolute(u *Element) *Element {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return v.Select(new(Element).Negate(u), u, u.IsNegative())
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Multiply sets v = x * y, and returns v.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (v *Element) Multiply(x, y *Element) *Element {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	feMul(v, x, y)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	return v
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// Square sets v = x * x, and returns v.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>func (v *Element) Square(x *Element) *Element {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	feSquare(v, x)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return v
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// Mult32 sets v = x * y, and returns v.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>func (v *Element) Mult32(x *Element, y uint32) *Element {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	x0lo, x0hi := mul51(x.l0, y)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	x1lo, x1hi := mul51(x.l1, y)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	x2lo, x2hi := mul51(x.l2, y)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	x3lo, x3hi := mul51(x.l3, y)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	x4lo, x4hi := mul51(x.l4, y)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	v.l0 = x0lo + 19*x4hi <span class="comment">// carried over per the reduction identity</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	v.l1 = x1lo + x0hi
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	v.l2 = x2lo + x1hi
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	v.l3 = x3lo + x2hi
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	v.l4 = x4lo + x3hi
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// The hi portions are going to be only 32 bits, plus any previous excess,</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// so we can skip the carry propagation.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	return v
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// mul51 returns lo + hi * 2⁵¹ = a * b.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>func mul51(a uint64, b uint32) (lo uint64, hi uint64) {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	mh, ml := bits.Mul64(a, uint64(b))
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	lo = ml &amp; maskLow51Bits
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	hi = (mh &lt;&lt; 13) | (ml &gt;&gt; 51)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	return
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// Pow22523 set v = x^((p-5)/8), and returns v. (p-5)/8 is 2^252-3.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func (v *Element) Pow22523(x *Element) *Element {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	var t0, t1, t2 Element
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	t0.Square(x)             <span class="comment">// x^2</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	t1.Square(&amp;t0)           <span class="comment">// x^4</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	t1.Square(&amp;t1)           <span class="comment">// x^8</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	t1.Multiply(x, &amp;t1)      <span class="comment">// x^9</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	t0.Multiply(&amp;t0, &amp;t1)    <span class="comment">// x^11</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	t0.Square(&amp;t0)           <span class="comment">// x^22</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	t0.Multiply(&amp;t1, &amp;t0)    <span class="comment">// x^31</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	t1.Square(&amp;t0)           <span class="comment">// x^62</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	for i := 1; i &lt; 5; i++ { <span class="comment">// x^992</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		t1.Square(&amp;t1)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	t0.Multiply(&amp;t1, &amp;t0)     <span class="comment">// x^1023 -&gt; 1023 = 2^10 - 1</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	t1.Square(&amp;t0)            <span class="comment">// 2^11 - 2</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	for i := 1; i &lt; 10; i++ { <span class="comment">// 2^20 - 2^10</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		t1.Square(&amp;t1)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	t1.Multiply(&amp;t1, &amp;t0)     <span class="comment">// 2^20 - 1</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	t2.Square(&amp;t1)            <span class="comment">// 2^21 - 2</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	for i := 1; i &lt; 20; i++ { <span class="comment">// 2^40 - 2^20</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		t2.Square(&amp;t2)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	t1.Multiply(&amp;t2, &amp;t1)     <span class="comment">// 2^40 - 1</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	t1.Square(&amp;t1)            <span class="comment">// 2^41 - 2</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	for i := 1; i &lt; 10; i++ { <span class="comment">// 2^50 - 2^10</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		t1.Square(&amp;t1)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	t0.Multiply(&amp;t1, &amp;t0)     <span class="comment">// 2^50 - 1</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	t1.Square(&amp;t0)            <span class="comment">// 2^51 - 2</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	for i := 1; i &lt; 50; i++ { <span class="comment">// 2^100 - 2^50</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		t1.Square(&amp;t1)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	t1.Multiply(&amp;t1, &amp;t0)      <span class="comment">// 2^100 - 1</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	t2.Square(&amp;t1)             <span class="comment">// 2^101 - 2</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	for i := 1; i &lt; 100; i++ { <span class="comment">// 2^200 - 2^100</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		t2.Square(&amp;t2)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	t1.Multiply(&amp;t2, &amp;t1)     <span class="comment">// 2^200 - 1</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	t1.Square(&amp;t1)            <span class="comment">// 2^201 - 2</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	for i := 1; i &lt; 50; i++ { <span class="comment">// 2^250 - 2^50</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		t1.Square(&amp;t1)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	t0.Multiply(&amp;t1, &amp;t0)     <span class="comment">// 2^250 - 1</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	t0.Square(&amp;t0)            <span class="comment">// 2^251 - 2</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	t0.Square(&amp;t0)            <span class="comment">// 2^252 - 4</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	return v.Multiply(&amp;t0, x) <span class="comment">// 2^252 - 3 -&gt; x^(2^252-3)</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// sqrtM1 is 2^((p-1)/4), which squared is equal to -1 by Euler&#39;s Criterion.</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>var sqrtM1 = &amp;Element{1718705420411056, 234908883556509,
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	2233514472574048, 2117202627021982, 765476049583133}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// SqrtRatio sets r to the non-negative square root of the ratio of u and v.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// If u/v is square, SqrtRatio returns r and 1. If u/v is not square, SqrtRatio</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// sets r according to Section 4.3 of draft-irtf-cfrg-ristretto255-decaf448-00,</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// and returns r and 0.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>func (r *Element) SqrtRatio(u, v *Element) (R *Element, wasSquare int) {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	t0 := new(Element)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// r = (u * v3) * (u * v7)^((p-5)/8)</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	v2 := new(Element).Square(v)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	uv3 := new(Element).Multiply(u, t0.Multiply(v2, v))
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	uv7 := new(Element).Multiply(uv3, t0.Square(v2))
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	rr := new(Element).Multiply(uv3, t0.Pow22523(uv7))
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	check := new(Element).Multiply(v, t0.Square(rr)) <span class="comment">// check = v * r^2</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	uNeg := new(Element).Negate(u)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	correctSignSqrt := check.Equal(u)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	flippedSignSqrt := check.Equal(uNeg)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	flippedSignSqrtI := check.Equal(t0.Multiply(uNeg, sqrtM1))
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	rPrime := new(Element).Multiply(rr, sqrtM1) <span class="comment">// r_prime = SQRT_M1 * r</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	<span class="comment">// r = CT_SELECT(r_prime IF flipped_sign_sqrt | flipped_sign_sqrt_i ELSE r)</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	rr.Select(rPrime, rr, flippedSignSqrt|flippedSignSqrtI)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	r.Absolute(rr) <span class="comment">// Choose the nonnegative square root.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	return r, correctSignSqrt | flippedSignSqrt
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
</pre><p><a href="fe.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
