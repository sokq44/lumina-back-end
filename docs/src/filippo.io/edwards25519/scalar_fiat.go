<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/filippo.io/edwards25519/scalar_fiat.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="scalar_fiat.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/filippo.io">filippo.io</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519">edwards25519</a>/<span class="text-muted">scalar_fiat.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/filippo.io/edwards25519">filippo.io/edwards25519</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by Fiat Cryptography. DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Autogenerated: word_by_word_montgomery --lang Go --cmovznz-by-mul --relax-primitive-carry-to-bitwidth 32,64 --public-function-case camelCase --public-type-case camelCase --private-function-case camelCase --private-type-case camelCase --doc-text-before-function-name &#39;&#39; --doc-newline-before-package-declaration --doc-prepend-header &#39;Code generated by Fiat Cryptography. DO NOT EDIT.&#39; --package-name edwards25519 Scalar 64 &#39;2^252 + 27742317777372353535851937790883648493&#39; mul add sub opp nonzero from_montgomery to_montgomery to_bytes from_bytes</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// curve description: Scalar</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// machine_wordsize = 64 (from &#34;64&#34;)</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// requested operations: mul, add, sub, opp, nonzero, from_montgomery, to_montgomery, to_bytes, from_bytes</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// m = 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed (from &#34;2^252 + 27742317777372353535851937790883648493&#34;)</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// NOTE: In addition to the bounds specified above each function, all</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//   functions synthesized for this Montgomery arithmetic require the</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//   input to be strictly less than the prime modulus (m), and also</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//   require the input to be in the unique saturated representation.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//   All functions also ensure that these two properties are true of</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//   return values.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Computed values:</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//   eval z = z[0] + (z[1] &lt;&lt; 64) + (z[2] &lt;&lt; 128) + (z[3] &lt;&lt; 192)</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//   bytes_eval z = z[0] + (z[1] &lt;&lt; 8) + (z[2] &lt;&lt; 16) + (z[3] &lt;&lt; 24) + (z[4] &lt;&lt; 32) + (z[5] &lt;&lt; 40) + (z[6] &lt;&lt; 48) + (z[7] &lt;&lt; 56) + (z[8] &lt;&lt; 64) + (z[9] &lt;&lt; 72) + (z[10] &lt;&lt; 80) + (z[11] &lt;&lt; 88) + (z[12] &lt;&lt; 96) + (z[13] &lt;&lt; 104) + (z[14] &lt;&lt; 112) + (z[15] &lt;&lt; 120) + (z[16] &lt;&lt; 128) + (z[17] &lt;&lt; 136) + (z[18] &lt;&lt; 144) + (z[19] &lt;&lt; 152) + (z[20] &lt;&lt; 160) + (z[21] &lt;&lt; 168) + (z[22] &lt;&lt; 176) + (z[23] &lt;&lt; 184) + (z[24] &lt;&lt; 192) + (z[25] &lt;&lt; 200) + (z[26] &lt;&lt; 208) + (z[27] &lt;&lt; 216) + (z[28] &lt;&lt; 224) + (z[29] &lt;&lt; 232) + (z[30] &lt;&lt; 240) + (z[31] &lt;&lt; 248)</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//   twos_complement_eval z = let x1 := z[0] + (z[1] &lt;&lt; 64) + (z[2] &lt;&lt; 128) + (z[3] &lt;&lt; 192) in</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//                            if x1 &amp; (2^256-1) &lt; 2^255 then x1 &amp; (2^256-1) else (x1 &amp; (2^256-1)) - 2^256</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>package edwards25519
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>import &#34;math/bits&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type fiatScalarUint1 uint64 <span class="comment">// We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type fiatScalarInt1 int64   <span class="comment">// We use uint64 instead of a more narrow type for performance reasons; see https://github.com/mit-plv/fiat-crypto/pull/1006#issuecomment-892625927</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// The type fiatScalarMontgomeryDomainFieldElement is a field element in the Montgomery domain.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Bounds: [[0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff]]</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>type fiatScalarMontgomeryDomainFieldElement [4]uint64
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// The type fiatScalarNonMontgomeryDomainFieldElement is a field element NOT in the Montgomery domain.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Bounds: [[0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff]]</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type fiatScalarNonMontgomeryDomainFieldElement [4]uint64
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// fiatScalarCmovznzU64 is a single-word conditional move.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//	out1 = (if arg1 = 0 then arg2 else arg3)</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// Input Bounds:</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//	arg1: [0x0 ~&gt; 0x1]</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//	arg2: [0x0 ~&gt; 0xffffffffffffffff]</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//	arg3: [0x0 ~&gt; 0xffffffffffffffff]</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Output Bounds:</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//	out1: [0x0 ~&gt; 0xffffffffffffffff]</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func fiatScalarCmovznzU64(out1 *uint64, arg1 fiatScalarUint1, arg2 uint64, arg3 uint64) {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	x1 := (uint64(arg1) * 0xffffffffffffffff)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	x2 := ((x1 &amp; arg3) | ((^x1) &amp; arg2))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	*out1 = x2
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// fiatScalarMul multiplies two field elements in the Montgomery domain.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg2 &lt; m</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//	eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func fiatScalarMul(out1 *fiatScalarMontgomeryDomainFieldElement, arg1 *fiatScalarMontgomeryDomainFieldElement, arg2 *fiatScalarMontgomeryDomainFieldElement) {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	x1 := arg1[1]
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	x2 := arg1[2]
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	x3 := arg1[3]
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	x4 := arg1[0]
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	var x5 uint64
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	var x6 uint64
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	x6, x5 = bits.Mul64(x4, arg2[3])
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	var x7 uint64
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	var x8 uint64
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	x8, x7 = bits.Mul64(x4, arg2[2])
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	var x9 uint64
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	var x10 uint64
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	x10, x9 = bits.Mul64(x4, arg2[1])
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	var x11 uint64
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	var x12 uint64
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	x12, x11 = bits.Mul64(x4, arg2[0])
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	var x13 uint64
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	var x14 uint64
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	x13, x14 = bits.Add64(x12, x9, uint64(0x0))
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	var x15 uint64
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	var x16 uint64
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	x15, x16 = bits.Add64(x10, x7, uint64(fiatScalarUint1(x14)))
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	var x17 uint64
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	var x18 uint64
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	x17, x18 = bits.Add64(x8, x5, uint64(fiatScalarUint1(x16)))
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	x19 := (uint64(fiatScalarUint1(x18)) + x6)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	var x20 uint64
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	_, x20 = bits.Mul64(x11, 0xd2b51da312547e1b)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	var x22 uint64
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	var x23 uint64
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	x23, x22 = bits.Mul64(x20, 0x1000000000000000)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	var x24 uint64
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	var x25 uint64
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	x25, x24 = bits.Mul64(x20, 0x14def9dea2f79cd6)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	var x26 uint64
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	var x27 uint64
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	x27, x26 = bits.Mul64(x20, 0x5812631a5cf5d3ed)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	var x28 uint64
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	var x29 uint64
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	x28, x29 = bits.Add64(x27, x24, uint64(0x0))
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	x30 := (uint64(fiatScalarUint1(x29)) + x25)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	var x32 uint64
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	_, x32 = bits.Add64(x11, x26, uint64(0x0))
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	var x33 uint64
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	var x34 uint64
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	x33, x34 = bits.Add64(x13, x28, uint64(fiatScalarUint1(x32)))
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	var x35 uint64
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	var x36 uint64
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	x35, x36 = bits.Add64(x15, x30, uint64(fiatScalarUint1(x34)))
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	var x37 uint64
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	var x38 uint64
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	x37, x38 = bits.Add64(x17, x22, uint64(fiatScalarUint1(x36)))
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	var x39 uint64
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	var x40 uint64
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	x39, x40 = bits.Add64(x19, x23, uint64(fiatScalarUint1(x38)))
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	var x41 uint64
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	var x42 uint64
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	x42, x41 = bits.Mul64(x1, arg2[3])
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	var x43 uint64
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	var x44 uint64
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	x44, x43 = bits.Mul64(x1, arg2[2])
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	var x45 uint64
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	var x46 uint64
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	x46, x45 = bits.Mul64(x1, arg2[1])
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	var x47 uint64
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	var x48 uint64
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	x48, x47 = bits.Mul64(x1, arg2[0])
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	var x49 uint64
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	var x50 uint64
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	x49, x50 = bits.Add64(x48, x45, uint64(0x0))
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	var x51 uint64
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	var x52 uint64
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	x51, x52 = bits.Add64(x46, x43, uint64(fiatScalarUint1(x50)))
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	var x53 uint64
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	var x54 uint64
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	x53, x54 = bits.Add64(x44, x41, uint64(fiatScalarUint1(x52)))
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	x55 := (uint64(fiatScalarUint1(x54)) + x42)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	var x56 uint64
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	var x57 uint64
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	x56, x57 = bits.Add64(x33, x47, uint64(0x0))
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	var x58 uint64
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	var x59 uint64
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	x58, x59 = bits.Add64(x35, x49, uint64(fiatScalarUint1(x57)))
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	var x60 uint64
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	var x61 uint64
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	x60, x61 = bits.Add64(x37, x51, uint64(fiatScalarUint1(x59)))
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	var x62 uint64
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	var x63 uint64
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	x62, x63 = bits.Add64(x39, x53, uint64(fiatScalarUint1(x61)))
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	var x64 uint64
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	var x65 uint64
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	x64, x65 = bits.Add64(uint64(fiatScalarUint1(x40)), x55, uint64(fiatScalarUint1(x63)))
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	var x66 uint64
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	_, x66 = bits.Mul64(x56, 0xd2b51da312547e1b)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	var x68 uint64
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	var x69 uint64
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	x69, x68 = bits.Mul64(x66, 0x1000000000000000)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	var x70 uint64
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	var x71 uint64
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	x71, x70 = bits.Mul64(x66, 0x14def9dea2f79cd6)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	var x72 uint64
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	var x73 uint64
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	x73, x72 = bits.Mul64(x66, 0x5812631a5cf5d3ed)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	var x74 uint64
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	var x75 uint64
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	x74, x75 = bits.Add64(x73, x70, uint64(0x0))
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	x76 := (uint64(fiatScalarUint1(x75)) + x71)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	var x78 uint64
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	_, x78 = bits.Add64(x56, x72, uint64(0x0))
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	var x79 uint64
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	var x80 uint64
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	x79, x80 = bits.Add64(x58, x74, uint64(fiatScalarUint1(x78)))
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	var x81 uint64
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	var x82 uint64
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	x81, x82 = bits.Add64(x60, x76, uint64(fiatScalarUint1(x80)))
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	var x83 uint64
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	var x84 uint64
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	x83, x84 = bits.Add64(x62, x68, uint64(fiatScalarUint1(x82)))
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	var x85 uint64
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	var x86 uint64
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	x85, x86 = bits.Add64(x64, x69, uint64(fiatScalarUint1(x84)))
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	x87 := (uint64(fiatScalarUint1(x86)) + uint64(fiatScalarUint1(x65)))
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	var x88 uint64
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	var x89 uint64
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	x89, x88 = bits.Mul64(x2, arg2[3])
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	var x90 uint64
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	var x91 uint64
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	x91, x90 = bits.Mul64(x2, arg2[2])
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	var x92 uint64
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	var x93 uint64
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	x93, x92 = bits.Mul64(x2, arg2[1])
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	var x94 uint64
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	var x95 uint64
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	x95, x94 = bits.Mul64(x2, arg2[0])
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	var x96 uint64
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	var x97 uint64
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	x96, x97 = bits.Add64(x95, x92, uint64(0x0))
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	var x98 uint64
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	var x99 uint64
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	x98, x99 = bits.Add64(x93, x90, uint64(fiatScalarUint1(x97)))
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	var x100 uint64
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	var x101 uint64
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	x100, x101 = bits.Add64(x91, x88, uint64(fiatScalarUint1(x99)))
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	x102 := (uint64(fiatScalarUint1(x101)) + x89)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	var x103 uint64
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	var x104 uint64
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	x103, x104 = bits.Add64(x79, x94, uint64(0x0))
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	var x105 uint64
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	var x106 uint64
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	x105, x106 = bits.Add64(x81, x96, uint64(fiatScalarUint1(x104)))
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	var x107 uint64
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	var x108 uint64
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	x107, x108 = bits.Add64(x83, x98, uint64(fiatScalarUint1(x106)))
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	var x109 uint64
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	var x110 uint64
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	x109, x110 = bits.Add64(x85, x100, uint64(fiatScalarUint1(x108)))
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	var x111 uint64
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	var x112 uint64
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	x111, x112 = bits.Add64(x87, x102, uint64(fiatScalarUint1(x110)))
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	var x113 uint64
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	_, x113 = bits.Mul64(x103, 0xd2b51da312547e1b)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	var x115 uint64
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	var x116 uint64
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	x116, x115 = bits.Mul64(x113, 0x1000000000000000)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	var x117 uint64
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	var x118 uint64
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	x118, x117 = bits.Mul64(x113, 0x14def9dea2f79cd6)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	var x119 uint64
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	var x120 uint64
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	x120, x119 = bits.Mul64(x113, 0x5812631a5cf5d3ed)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	var x121 uint64
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	var x122 uint64
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	x121, x122 = bits.Add64(x120, x117, uint64(0x0))
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	x123 := (uint64(fiatScalarUint1(x122)) + x118)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	var x125 uint64
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	_, x125 = bits.Add64(x103, x119, uint64(0x0))
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	var x126 uint64
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	var x127 uint64
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	x126, x127 = bits.Add64(x105, x121, uint64(fiatScalarUint1(x125)))
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	var x128 uint64
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	var x129 uint64
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	x128, x129 = bits.Add64(x107, x123, uint64(fiatScalarUint1(x127)))
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	var x130 uint64
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	var x131 uint64
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	x130, x131 = bits.Add64(x109, x115, uint64(fiatScalarUint1(x129)))
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	var x132 uint64
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	var x133 uint64
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	x132, x133 = bits.Add64(x111, x116, uint64(fiatScalarUint1(x131)))
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	x134 := (uint64(fiatScalarUint1(x133)) + uint64(fiatScalarUint1(x112)))
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	var x135 uint64
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	var x136 uint64
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	x136, x135 = bits.Mul64(x3, arg2[3])
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	var x137 uint64
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	var x138 uint64
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	x138, x137 = bits.Mul64(x3, arg2[2])
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	var x139 uint64
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	var x140 uint64
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	x140, x139 = bits.Mul64(x3, arg2[1])
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	var x141 uint64
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	var x142 uint64
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	x142, x141 = bits.Mul64(x3, arg2[0])
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	var x143 uint64
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	var x144 uint64
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	x143, x144 = bits.Add64(x142, x139, uint64(0x0))
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	var x145 uint64
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	var x146 uint64
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	x145, x146 = bits.Add64(x140, x137, uint64(fiatScalarUint1(x144)))
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	var x147 uint64
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	var x148 uint64
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	x147, x148 = bits.Add64(x138, x135, uint64(fiatScalarUint1(x146)))
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	x149 := (uint64(fiatScalarUint1(x148)) + x136)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	var x150 uint64
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	var x151 uint64
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	x150, x151 = bits.Add64(x126, x141, uint64(0x0))
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	var x152 uint64
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	var x153 uint64
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	x152, x153 = bits.Add64(x128, x143, uint64(fiatScalarUint1(x151)))
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	var x154 uint64
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	var x155 uint64
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	x154, x155 = bits.Add64(x130, x145, uint64(fiatScalarUint1(x153)))
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	var x156 uint64
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	var x157 uint64
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	x156, x157 = bits.Add64(x132, x147, uint64(fiatScalarUint1(x155)))
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	var x158 uint64
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	var x159 uint64
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	x158, x159 = bits.Add64(x134, x149, uint64(fiatScalarUint1(x157)))
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	var x160 uint64
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	_, x160 = bits.Mul64(x150, 0xd2b51da312547e1b)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	var x162 uint64
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	var x163 uint64
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	x163, x162 = bits.Mul64(x160, 0x1000000000000000)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	var x164 uint64
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	var x165 uint64
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	x165, x164 = bits.Mul64(x160, 0x14def9dea2f79cd6)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	var x166 uint64
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	var x167 uint64
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	x167, x166 = bits.Mul64(x160, 0x5812631a5cf5d3ed)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	var x168 uint64
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	var x169 uint64
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	x168, x169 = bits.Add64(x167, x164, uint64(0x0))
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	x170 := (uint64(fiatScalarUint1(x169)) + x165)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	var x172 uint64
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	_, x172 = bits.Add64(x150, x166, uint64(0x0))
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	var x173 uint64
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	var x174 uint64
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	x173, x174 = bits.Add64(x152, x168, uint64(fiatScalarUint1(x172)))
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	var x175 uint64
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	var x176 uint64
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	x175, x176 = bits.Add64(x154, x170, uint64(fiatScalarUint1(x174)))
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	var x177 uint64
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	var x178 uint64
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	x177, x178 = bits.Add64(x156, x162, uint64(fiatScalarUint1(x176)))
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	var x179 uint64
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	var x180 uint64
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	x179, x180 = bits.Add64(x158, x163, uint64(fiatScalarUint1(x178)))
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	x181 := (uint64(fiatScalarUint1(x180)) + uint64(fiatScalarUint1(x159)))
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	var x182 uint64
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	var x183 uint64
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	x182, x183 = bits.Sub64(x173, 0x5812631a5cf5d3ed, uint64(0x0))
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	var x184 uint64
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	var x185 uint64
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	x184, x185 = bits.Sub64(x175, 0x14def9dea2f79cd6, uint64(fiatScalarUint1(x183)))
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	var x186 uint64
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	var x187 uint64
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	x186, x187 = bits.Sub64(x177, uint64(0x0), uint64(fiatScalarUint1(x185)))
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	var x188 uint64
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	var x189 uint64
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	x188, x189 = bits.Sub64(x179, 0x1000000000000000, uint64(fiatScalarUint1(x187)))
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	var x191 uint64
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	_, x191 = bits.Sub64(x181, uint64(0x0), uint64(fiatScalarUint1(x189)))
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	var x192 uint64
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x192, fiatScalarUint1(x191), x182, x173)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	var x193 uint64
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x193, fiatScalarUint1(x191), x184, x175)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	var x194 uint64
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x194, fiatScalarUint1(x191), x186, x177)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	var x195 uint64
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x195, fiatScalarUint1(x191), x188, x179)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	out1[0] = x192
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	out1[1] = x193
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	out1[2] = x194
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	out1[3] = x195
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// fiatScalarAdd adds two field elements in the Montgomery domain.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg2 &lt; m</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">//	eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>func fiatScalarAdd(out1 *fiatScalarMontgomeryDomainFieldElement, arg1 *fiatScalarMontgomeryDomainFieldElement, arg2 *fiatScalarMontgomeryDomainFieldElement) {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	var x1 uint64
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	var x2 uint64
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	x1, x2 = bits.Add64(arg1[0], arg2[0], uint64(0x0))
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	var x3 uint64
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	var x4 uint64
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	x3, x4 = bits.Add64(arg1[1], arg2[1], uint64(fiatScalarUint1(x2)))
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	var x5 uint64
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	var x6 uint64
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	x5, x6 = bits.Add64(arg1[2], arg2[2], uint64(fiatScalarUint1(x4)))
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	var x7 uint64
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	var x8 uint64
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	x7, x8 = bits.Add64(arg1[3], arg2[3], uint64(fiatScalarUint1(x6)))
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	var x9 uint64
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	var x10 uint64
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	x9, x10 = bits.Sub64(x1, 0x5812631a5cf5d3ed, uint64(0x0))
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	var x11 uint64
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	var x12 uint64
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	x11, x12 = bits.Sub64(x3, 0x14def9dea2f79cd6, uint64(fiatScalarUint1(x10)))
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	var x13 uint64
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	var x14 uint64
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	x13, x14 = bits.Sub64(x5, uint64(0x0), uint64(fiatScalarUint1(x12)))
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	var x15 uint64
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	var x16 uint64
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	x15, x16 = bits.Sub64(x7, 0x1000000000000000, uint64(fiatScalarUint1(x14)))
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	var x18 uint64
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	_, x18 = bits.Sub64(uint64(fiatScalarUint1(x8)), uint64(0x0), uint64(fiatScalarUint1(x16)))
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	var x19 uint64
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x19, fiatScalarUint1(x18), x9, x1)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	var x20 uint64
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x20, fiatScalarUint1(x18), x11, x3)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	var x21 uint64
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x21, fiatScalarUint1(x18), x13, x5)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	var x22 uint64
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x22, fiatScalarUint1(x18), x15, x7)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	out1[0] = x19
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	out1[1] = x20
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	out1[2] = x21
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	out1[3] = x22
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">// fiatScalarSub subtracts two field elements in the Montgomery domain.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg2 &lt; m</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">//	eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>func fiatScalarSub(out1 *fiatScalarMontgomeryDomainFieldElement, arg1 *fiatScalarMontgomeryDomainFieldElement, arg2 *fiatScalarMontgomeryDomainFieldElement) {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	var x1 uint64
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	var x2 uint64
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	x1, x2 = bits.Sub64(arg1[0], arg2[0], uint64(0x0))
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	var x3 uint64
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	var x4 uint64
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	x3, x4 = bits.Sub64(arg1[1], arg2[1], uint64(fiatScalarUint1(x2)))
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	var x5 uint64
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	var x6 uint64
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	x5, x6 = bits.Sub64(arg1[2], arg2[2], uint64(fiatScalarUint1(x4)))
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	var x7 uint64
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	var x8 uint64
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	x7, x8 = bits.Sub64(arg1[3], arg2[3], uint64(fiatScalarUint1(x6)))
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	var x9 uint64
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x9, fiatScalarUint1(x8), uint64(0x0), 0xffffffffffffffff)
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	var x10 uint64
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	var x11 uint64
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	x10, x11 = bits.Add64(x1, (x9 &amp; 0x5812631a5cf5d3ed), uint64(0x0))
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	var x12 uint64
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	var x13 uint64
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	x12, x13 = bits.Add64(x3, (x9 &amp; 0x14def9dea2f79cd6), uint64(fiatScalarUint1(x11)))
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	var x14 uint64
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	var x15 uint64
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	x14, x15 = bits.Add64(x5, uint64(0x0), uint64(fiatScalarUint1(x13)))
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	var x16 uint64
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	x16, _ = bits.Add64(x7, (x9 &amp; 0x1000000000000000), uint64(fiatScalarUint1(x15)))
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	out1[0] = x10
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	out1[1] = x12
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	out1[2] = x14
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	out1[3] = x16
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// fiatScalarOpp negates a field element in the Montgomery domain.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">//	eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>func fiatScalarOpp(out1 *fiatScalarMontgomeryDomainFieldElement, arg1 *fiatScalarMontgomeryDomainFieldElement) {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	var x1 uint64
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	var x2 uint64
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	x1, x2 = bits.Sub64(uint64(0x0), arg1[0], uint64(0x0))
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	var x3 uint64
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	var x4 uint64
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	x3, x4 = bits.Sub64(uint64(0x0), arg1[1], uint64(fiatScalarUint1(x2)))
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	var x5 uint64
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	var x6 uint64
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	x5, x6 = bits.Sub64(uint64(0x0), arg1[2], uint64(fiatScalarUint1(x4)))
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	var x7 uint64
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	var x8 uint64
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	x7, x8 = bits.Sub64(uint64(0x0), arg1[3], uint64(fiatScalarUint1(x6)))
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	var x9 uint64
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x9, fiatScalarUint1(x8), uint64(0x0), 0xffffffffffffffff)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	var x10 uint64
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	var x11 uint64
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	x10, x11 = bits.Add64(x1, (x9 &amp; 0x5812631a5cf5d3ed), uint64(0x0))
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	var x12 uint64
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	var x13 uint64
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	x12, x13 = bits.Add64(x3, (x9 &amp; 0x14def9dea2f79cd6), uint64(fiatScalarUint1(x11)))
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	var x14 uint64
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	var x15 uint64
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	x14, x15 = bits.Add64(x5, uint64(0x0), uint64(fiatScalarUint1(x13)))
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	var x16 uint64
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	x16, _ = bits.Add64(x7, (x9 &amp; 0x1000000000000000), uint64(fiatScalarUint1(x15)))
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	out1[0] = x10
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	out1[1] = x12
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	out1[2] = x14
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	out1[3] = x16
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// fiatScalarNonzero outputs a single non-zero word if the input is non-zero and zero otherwise.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">//	out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// Input Bounds:</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span><span class="comment">//	arg1: [[0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff]]</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// Output Bounds:</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">//	out1: [0x0 ~&gt; 0xffffffffffffffff]</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>func fiatScalarNonzero(out1 *uint64, arg1 *[4]uint64) {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	x1 := (arg1[0] | (arg1[1] | (arg1[2] | arg1[3])))
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	*out1 = x1
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// fiatScalarFromMontgomery translates a field element out of the Montgomery domain.</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">//	eval out1 mod m = (eval arg1 * ((2^64)⁻¹ mod m)^4) mod m</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>func fiatScalarFromMontgomery(out1 *fiatScalarNonMontgomeryDomainFieldElement, arg1 *fiatScalarMontgomeryDomainFieldElement) {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	x1 := arg1[0]
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	var x2 uint64
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	_, x2 = bits.Mul64(x1, 0xd2b51da312547e1b)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	var x4 uint64
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	var x5 uint64
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	x5, x4 = bits.Mul64(x2, 0x1000000000000000)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	var x6 uint64
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	var x7 uint64
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	x7, x6 = bits.Mul64(x2, 0x14def9dea2f79cd6)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	var x8 uint64
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	var x9 uint64
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	x9, x8 = bits.Mul64(x2, 0x5812631a5cf5d3ed)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	var x10 uint64
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	var x11 uint64
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	x10, x11 = bits.Add64(x9, x6, uint64(0x0))
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	var x13 uint64
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	_, x13 = bits.Add64(x1, x8, uint64(0x0))
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	var x14 uint64
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	var x15 uint64
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	x14, x15 = bits.Add64(uint64(0x0), x10, uint64(fiatScalarUint1(x13)))
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	var x16 uint64
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	var x17 uint64
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	x16, x17 = bits.Add64(x14, arg1[1], uint64(0x0))
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	var x18 uint64
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	_, x18 = bits.Mul64(x16, 0xd2b51da312547e1b)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	var x20 uint64
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	var x21 uint64
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	x21, x20 = bits.Mul64(x18, 0x1000000000000000)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	var x22 uint64
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	var x23 uint64
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	x23, x22 = bits.Mul64(x18, 0x14def9dea2f79cd6)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	var x24 uint64
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	var x25 uint64
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	x25, x24 = bits.Mul64(x18, 0x5812631a5cf5d3ed)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	var x26 uint64
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	var x27 uint64
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	x26, x27 = bits.Add64(x25, x22, uint64(0x0))
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	var x29 uint64
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	_, x29 = bits.Add64(x16, x24, uint64(0x0))
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	var x30 uint64
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	var x31 uint64
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	x30, x31 = bits.Add64((uint64(fiatScalarUint1(x17)) + (uint64(fiatScalarUint1(x15)) + (uint64(fiatScalarUint1(x11)) + x7))), x26, uint64(fiatScalarUint1(x29)))
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	var x32 uint64
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	var x33 uint64
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	x32, x33 = bits.Add64(x4, (uint64(fiatScalarUint1(x27)) + x23), uint64(fiatScalarUint1(x31)))
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	var x34 uint64
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	var x35 uint64
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	x34, x35 = bits.Add64(x5, x20, uint64(fiatScalarUint1(x33)))
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	var x36 uint64
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	var x37 uint64
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	x36, x37 = bits.Add64(x30, arg1[2], uint64(0x0))
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	var x38 uint64
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	var x39 uint64
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	x38, x39 = bits.Add64(x32, uint64(0x0), uint64(fiatScalarUint1(x37)))
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	var x40 uint64
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	var x41 uint64
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	x40, x41 = bits.Add64(x34, uint64(0x0), uint64(fiatScalarUint1(x39)))
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	var x42 uint64
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	_, x42 = bits.Mul64(x36, 0xd2b51da312547e1b)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	var x44 uint64
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	var x45 uint64
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	x45, x44 = bits.Mul64(x42, 0x1000000000000000)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	var x46 uint64
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	var x47 uint64
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	x47, x46 = bits.Mul64(x42, 0x14def9dea2f79cd6)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	var x48 uint64
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	var x49 uint64
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	x49, x48 = bits.Mul64(x42, 0x5812631a5cf5d3ed)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	var x50 uint64
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	var x51 uint64
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	x50, x51 = bits.Add64(x49, x46, uint64(0x0))
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	var x53 uint64
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	_, x53 = bits.Add64(x36, x48, uint64(0x0))
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	var x54 uint64
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	var x55 uint64
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	x54, x55 = bits.Add64(x38, x50, uint64(fiatScalarUint1(x53)))
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	var x56 uint64
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	var x57 uint64
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	x56, x57 = bits.Add64(x40, (uint64(fiatScalarUint1(x51)) + x47), uint64(fiatScalarUint1(x55)))
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	var x58 uint64
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	var x59 uint64
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	x58, x59 = bits.Add64((uint64(fiatScalarUint1(x41)) + (uint64(fiatScalarUint1(x35)) + x21)), x44, uint64(fiatScalarUint1(x57)))
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	var x60 uint64
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	var x61 uint64
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	x60, x61 = bits.Add64(x54, arg1[3], uint64(0x0))
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	var x62 uint64
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	var x63 uint64
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	x62, x63 = bits.Add64(x56, uint64(0x0), uint64(fiatScalarUint1(x61)))
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	var x64 uint64
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	var x65 uint64
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	x64, x65 = bits.Add64(x58, uint64(0x0), uint64(fiatScalarUint1(x63)))
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	var x66 uint64
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	_, x66 = bits.Mul64(x60, 0xd2b51da312547e1b)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	var x68 uint64
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	var x69 uint64
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	x69, x68 = bits.Mul64(x66, 0x1000000000000000)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	var x70 uint64
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	var x71 uint64
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	x71, x70 = bits.Mul64(x66, 0x14def9dea2f79cd6)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	var x72 uint64
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	var x73 uint64
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	x73, x72 = bits.Mul64(x66, 0x5812631a5cf5d3ed)
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	var x74 uint64
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	var x75 uint64
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	x74, x75 = bits.Add64(x73, x70, uint64(0x0))
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	var x77 uint64
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	_, x77 = bits.Add64(x60, x72, uint64(0x0))
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	var x78 uint64
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	var x79 uint64
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	x78, x79 = bits.Add64(x62, x74, uint64(fiatScalarUint1(x77)))
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	var x80 uint64
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	var x81 uint64
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	x80, x81 = bits.Add64(x64, (uint64(fiatScalarUint1(x75)) + x71), uint64(fiatScalarUint1(x79)))
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	var x82 uint64
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	var x83 uint64
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	x82, x83 = bits.Add64((uint64(fiatScalarUint1(x65)) + (uint64(fiatScalarUint1(x59)) + x45)), x68, uint64(fiatScalarUint1(x81)))
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	x84 := (uint64(fiatScalarUint1(x83)) + x69)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	var x85 uint64
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	var x86 uint64
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	x85, x86 = bits.Sub64(x78, 0x5812631a5cf5d3ed, uint64(0x0))
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	var x87 uint64
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	var x88 uint64
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	x87, x88 = bits.Sub64(x80, 0x14def9dea2f79cd6, uint64(fiatScalarUint1(x86)))
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	var x89 uint64
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	var x90 uint64
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	x89, x90 = bits.Sub64(x82, uint64(0x0), uint64(fiatScalarUint1(x88)))
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	var x91 uint64
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	var x92 uint64
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	x91, x92 = bits.Sub64(x84, 0x1000000000000000, uint64(fiatScalarUint1(x90)))
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	var x94 uint64
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	_, x94 = bits.Sub64(uint64(0x0), uint64(0x0), uint64(fiatScalarUint1(x92)))
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	var x95 uint64
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x95, fiatScalarUint1(x94), x85, x78)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	var x96 uint64
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x96, fiatScalarUint1(x94), x87, x80)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	var x97 uint64
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x97, fiatScalarUint1(x94), x89, x82)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	var x98 uint64
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x98, fiatScalarUint1(x94), x91, x84)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	out1[0] = x95
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	out1[1] = x96
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	out1[2] = x97
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	out1[3] = x98
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// fiatScalarToMontgomery translates a field element into the Montgomery domain.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span><span class="comment">//	eval (from_montgomery out1) mod m = eval arg1 mod m</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>func fiatScalarToMontgomery(out1 *fiatScalarMontgomeryDomainFieldElement, arg1 *fiatScalarNonMontgomeryDomainFieldElement) {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	x1 := arg1[1]
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	x2 := arg1[2]
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	x3 := arg1[3]
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	x4 := arg1[0]
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	var x5 uint64
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	var x6 uint64
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	x6, x5 = bits.Mul64(x4, 0x399411b7c309a3d)
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	var x7 uint64
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	var x8 uint64
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	x8, x7 = bits.Mul64(x4, 0xceec73d217f5be65)
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	var x9 uint64
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	var x10 uint64
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	x10, x9 = bits.Mul64(x4, 0xd00e1ba768859347)
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	var x11 uint64
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	var x12 uint64
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	x12, x11 = bits.Mul64(x4, 0xa40611e3449c0f01)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	var x13 uint64
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	var x14 uint64
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	x13, x14 = bits.Add64(x12, x9, uint64(0x0))
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	var x15 uint64
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	var x16 uint64
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	x15, x16 = bits.Add64(x10, x7, uint64(fiatScalarUint1(x14)))
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	var x17 uint64
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	var x18 uint64
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	x17, x18 = bits.Add64(x8, x5, uint64(fiatScalarUint1(x16)))
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	var x19 uint64
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	_, x19 = bits.Mul64(x11, 0xd2b51da312547e1b)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	var x21 uint64
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	var x22 uint64
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	x22, x21 = bits.Mul64(x19, 0x1000000000000000)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	var x23 uint64
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	var x24 uint64
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	x24, x23 = bits.Mul64(x19, 0x14def9dea2f79cd6)
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	var x25 uint64
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	var x26 uint64
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	x26, x25 = bits.Mul64(x19, 0x5812631a5cf5d3ed)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	var x27 uint64
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	var x28 uint64
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	x27, x28 = bits.Add64(x26, x23, uint64(0x0))
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	var x30 uint64
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	_, x30 = bits.Add64(x11, x25, uint64(0x0))
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	var x31 uint64
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	var x32 uint64
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	x31, x32 = bits.Add64(x13, x27, uint64(fiatScalarUint1(x30)))
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	var x33 uint64
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	var x34 uint64
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	x33, x34 = bits.Add64(x15, (uint64(fiatScalarUint1(x28)) + x24), uint64(fiatScalarUint1(x32)))
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	var x35 uint64
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	var x36 uint64
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	x35, x36 = bits.Add64(x17, x21, uint64(fiatScalarUint1(x34)))
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	var x37 uint64
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	var x38 uint64
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	x38, x37 = bits.Mul64(x1, 0x399411b7c309a3d)
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	var x39 uint64
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	var x40 uint64
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	x40, x39 = bits.Mul64(x1, 0xceec73d217f5be65)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	var x41 uint64
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	var x42 uint64
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	x42, x41 = bits.Mul64(x1, 0xd00e1ba768859347)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	var x43 uint64
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	var x44 uint64
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	x44, x43 = bits.Mul64(x1, 0xa40611e3449c0f01)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	var x45 uint64
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	var x46 uint64
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	x45, x46 = bits.Add64(x44, x41, uint64(0x0))
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	var x47 uint64
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	var x48 uint64
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	x47, x48 = bits.Add64(x42, x39, uint64(fiatScalarUint1(x46)))
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	var x49 uint64
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	var x50 uint64
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	x49, x50 = bits.Add64(x40, x37, uint64(fiatScalarUint1(x48)))
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	var x51 uint64
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	var x52 uint64
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	x51, x52 = bits.Add64(x31, x43, uint64(0x0))
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	var x53 uint64
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	var x54 uint64
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	x53, x54 = bits.Add64(x33, x45, uint64(fiatScalarUint1(x52)))
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	var x55 uint64
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	var x56 uint64
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	x55, x56 = bits.Add64(x35, x47, uint64(fiatScalarUint1(x54)))
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	var x57 uint64
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	var x58 uint64
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	x57, x58 = bits.Add64(((uint64(fiatScalarUint1(x36)) + (uint64(fiatScalarUint1(x18)) + x6)) + x22), x49, uint64(fiatScalarUint1(x56)))
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	var x59 uint64
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	_, x59 = bits.Mul64(x51, 0xd2b51da312547e1b)
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	var x61 uint64
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	var x62 uint64
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	x62, x61 = bits.Mul64(x59, 0x1000000000000000)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	var x63 uint64
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	var x64 uint64
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	x64, x63 = bits.Mul64(x59, 0x14def9dea2f79cd6)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	var x65 uint64
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	var x66 uint64
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	x66, x65 = bits.Mul64(x59, 0x5812631a5cf5d3ed)
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	var x67 uint64
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	var x68 uint64
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	x67, x68 = bits.Add64(x66, x63, uint64(0x0))
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	var x70 uint64
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	_, x70 = bits.Add64(x51, x65, uint64(0x0))
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	var x71 uint64
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	var x72 uint64
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	x71, x72 = bits.Add64(x53, x67, uint64(fiatScalarUint1(x70)))
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	var x73 uint64
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	var x74 uint64
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	x73, x74 = bits.Add64(x55, (uint64(fiatScalarUint1(x68)) + x64), uint64(fiatScalarUint1(x72)))
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	var x75 uint64
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	var x76 uint64
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	x75, x76 = bits.Add64(x57, x61, uint64(fiatScalarUint1(x74)))
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	var x77 uint64
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	var x78 uint64
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	x78, x77 = bits.Mul64(x2, 0x399411b7c309a3d)
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	var x79 uint64
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	var x80 uint64
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	x80, x79 = bits.Mul64(x2, 0xceec73d217f5be65)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	var x81 uint64
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	var x82 uint64
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	x82, x81 = bits.Mul64(x2, 0xd00e1ba768859347)
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	var x83 uint64
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	var x84 uint64
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	x84, x83 = bits.Mul64(x2, 0xa40611e3449c0f01)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	var x85 uint64
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	var x86 uint64
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>	x85, x86 = bits.Add64(x84, x81, uint64(0x0))
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	var x87 uint64
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	var x88 uint64
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	x87, x88 = bits.Add64(x82, x79, uint64(fiatScalarUint1(x86)))
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	var x89 uint64
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	var x90 uint64
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	x89, x90 = bits.Add64(x80, x77, uint64(fiatScalarUint1(x88)))
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	var x91 uint64
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	var x92 uint64
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	x91, x92 = bits.Add64(x71, x83, uint64(0x0))
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	var x93 uint64
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	var x94 uint64
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	x93, x94 = bits.Add64(x73, x85, uint64(fiatScalarUint1(x92)))
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	var x95 uint64
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	var x96 uint64
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	x95, x96 = bits.Add64(x75, x87, uint64(fiatScalarUint1(x94)))
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	var x97 uint64
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	var x98 uint64
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	x97, x98 = bits.Add64(((uint64(fiatScalarUint1(x76)) + (uint64(fiatScalarUint1(x58)) + (uint64(fiatScalarUint1(x50)) + x38))) + x62), x89, uint64(fiatScalarUint1(x96)))
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	var x99 uint64
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	_, x99 = bits.Mul64(x91, 0xd2b51da312547e1b)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	var x101 uint64
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	var x102 uint64
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	x102, x101 = bits.Mul64(x99, 0x1000000000000000)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	var x103 uint64
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	var x104 uint64
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	x104, x103 = bits.Mul64(x99, 0x14def9dea2f79cd6)
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	var x105 uint64
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	var x106 uint64
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	x106, x105 = bits.Mul64(x99, 0x5812631a5cf5d3ed)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	var x107 uint64
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	var x108 uint64
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	x107, x108 = bits.Add64(x106, x103, uint64(0x0))
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	var x110 uint64
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	_, x110 = bits.Add64(x91, x105, uint64(0x0))
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	var x111 uint64
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	var x112 uint64
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	x111, x112 = bits.Add64(x93, x107, uint64(fiatScalarUint1(x110)))
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	var x113 uint64
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	var x114 uint64
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	x113, x114 = bits.Add64(x95, (uint64(fiatScalarUint1(x108)) + x104), uint64(fiatScalarUint1(x112)))
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	var x115 uint64
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	var x116 uint64
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	x115, x116 = bits.Add64(x97, x101, uint64(fiatScalarUint1(x114)))
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	var x117 uint64
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	var x118 uint64
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	x118, x117 = bits.Mul64(x3, 0x399411b7c309a3d)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	var x119 uint64
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	var x120 uint64
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	x120, x119 = bits.Mul64(x3, 0xceec73d217f5be65)
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	var x121 uint64
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	var x122 uint64
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	x122, x121 = bits.Mul64(x3, 0xd00e1ba768859347)
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	var x123 uint64
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	var x124 uint64
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	x124, x123 = bits.Mul64(x3, 0xa40611e3449c0f01)
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	var x125 uint64
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	var x126 uint64
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	x125, x126 = bits.Add64(x124, x121, uint64(0x0))
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	var x127 uint64
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	var x128 uint64
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	x127, x128 = bits.Add64(x122, x119, uint64(fiatScalarUint1(x126)))
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	var x129 uint64
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	var x130 uint64
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	x129, x130 = bits.Add64(x120, x117, uint64(fiatScalarUint1(x128)))
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	var x131 uint64
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	var x132 uint64
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	x131, x132 = bits.Add64(x111, x123, uint64(0x0))
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	var x133 uint64
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	var x134 uint64
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	x133, x134 = bits.Add64(x113, x125, uint64(fiatScalarUint1(x132)))
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	var x135 uint64
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	var x136 uint64
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	x135, x136 = bits.Add64(x115, x127, uint64(fiatScalarUint1(x134)))
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	var x137 uint64
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	var x138 uint64
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	x137, x138 = bits.Add64(((uint64(fiatScalarUint1(x116)) + (uint64(fiatScalarUint1(x98)) + (uint64(fiatScalarUint1(x90)) + x78))) + x102), x129, uint64(fiatScalarUint1(x136)))
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>	var x139 uint64
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	_, x139 = bits.Mul64(x131, 0xd2b51da312547e1b)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	var x141 uint64
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	var x142 uint64
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	x142, x141 = bits.Mul64(x139, 0x1000000000000000)
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	var x143 uint64
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	var x144 uint64
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	x144, x143 = bits.Mul64(x139, 0x14def9dea2f79cd6)
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>	var x145 uint64
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	var x146 uint64
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	x146, x145 = bits.Mul64(x139, 0x5812631a5cf5d3ed)
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	var x147 uint64
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	var x148 uint64
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	x147, x148 = bits.Add64(x146, x143, uint64(0x0))
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	var x150 uint64
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	_, x150 = bits.Add64(x131, x145, uint64(0x0))
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	var x151 uint64
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	var x152 uint64
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	x151, x152 = bits.Add64(x133, x147, uint64(fiatScalarUint1(x150)))
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	var x153 uint64
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	var x154 uint64
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	x153, x154 = bits.Add64(x135, (uint64(fiatScalarUint1(x148)) + x144), uint64(fiatScalarUint1(x152)))
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	var x155 uint64
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	var x156 uint64
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	x155, x156 = bits.Add64(x137, x141, uint64(fiatScalarUint1(x154)))
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	x157 := ((uint64(fiatScalarUint1(x156)) + (uint64(fiatScalarUint1(x138)) + (uint64(fiatScalarUint1(x130)) + x118))) + x142)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	var x158 uint64
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	var x159 uint64
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	x158, x159 = bits.Sub64(x151, 0x5812631a5cf5d3ed, uint64(0x0))
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	var x160 uint64
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	var x161 uint64
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	x160, x161 = bits.Sub64(x153, 0x14def9dea2f79cd6, uint64(fiatScalarUint1(x159)))
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	var x162 uint64
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	var x163 uint64
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	x162, x163 = bits.Sub64(x155, uint64(0x0), uint64(fiatScalarUint1(x161)))
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	var x164 uint64
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	var x165 uint64
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	x164, x165 = bits.Sub64(x157, 0x1000000000000000, uint64(fiatScalarUint1(x163)))
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	var x167 uint64
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	_, x167 = bits.Sub64(uint64(0x0), uint64(0x0), uint64(fiatScalarUint1(x165)))
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	var x168 uint64
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x168, fiatScalarUint1(x167), x158, x151)
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	var x169 uint64
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x169, fiatScalarUint1(x167), x160, x153)
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	var x170 uint64
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x170, fiatScalarUint1(x167), x162, x155)
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	var x171 uint64
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	fiatScalarCmovznzU64(&amp;x171, fiatScalarUint1(x167), x164, x157)
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	out1[0] = x168
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	out1[1] = x169
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	out1[2] = x170
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	out1[3] = x171
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span><span class="comment">// fiatScalarToBytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order.</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval arg1 &lt; m</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span><span class="comment">//	out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span><span class="comment">// Input Bounds:</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span><span class="comment">//	arg1: [[0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0x1fffffffffffffff]]</span>
<span id="L965" class="ln">   965&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span><span class="comment">// Output Bounds:</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span><span class="comment">//	out1: [[0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0x1f]]</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>func fiatScalarToBytes(out1 *[32]uint8, arg1 *[4]uint64) {
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	x1 := arg1[3]
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	x2 := arg1[2]
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>	x3 := arg1[1]
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	x4 := arg1[0]
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	x5 := (uint8(x4) &amp; 0xff)
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	x6 := (x4 &gt;&gt; 8)
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	x7 := (uint8(x6) &amp; 0xff)
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	x8 := (x6 &gt;&gt; 8)
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	x9 := (uint8(x8) &amp; 0xff)
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	x10 := (x8 &gt;&gt; 8)
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	x11 := (uint8(x10) &amp; 0xff)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	x12 := (x10 &gt;&gt; 8)
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	x13 := (uint8(x12) &amp; 0xff)
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	x14 := (x12 &gt;&gt; 8)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	x15 := (uint8(x14) &amp; 0xff)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	x16 := (x14 &gt;&gt; 8)
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	x17 := (uint8(x16) &amp; 0xff)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	x18 := uint8((x16 &gt;&gt; 8))
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	x19 := (uint8(x3) &amp; 0xff)
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	x20 := (x3 &gt;&gt; 8)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	x21 := (uint8(x20) &amp; 0xff)
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	x22 := (x20 &gt;&gt; 8)
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	x23 := (uint8(x22) &amp; 0xff)
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	x24 := (x22 &gt;&gt; 8)
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	x25 := (uint8(x24) &amp; 0xff)
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	x26 := (x24 &gt;&gt; 8)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	x27 := (uint8(x26) &amp; 0xff)
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	x28 := (x26 &gt;&gt; 8)
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	x29 := (uint8(x28) &amp; 0xff)
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	x30 := (x28 &gt;&gt; 8)
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	x31 := (uint8(x30) &amp; 0xff)
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	x32 := uint8((x30 &gt;&gt; 8))
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	x33 := (uint8(x2) &amp; 0xff)
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	x34 := (x2 &gt;&gt; 8)
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	x35 := (uint8(x34) &amp; 0xff)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	x36 := (x34 &gt;&gt; 8)
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	x37 := (uint8(x36) &amp; 0xff)
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>	x38 := (x36 &gt;&gt; 8)
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	x39 := (uint8(x38) &amp; 0xff)
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	x40 := (x38 &gt;&gt; 8)
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	x41 := (uint8(x40) &amp; 0xff)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	x42 := (x40 &gt;&gt; 8)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	x43 := (uint8(x42) &amp; 0xff)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	x44 := (x42 &gt;&gt; 8)
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	x45 := (uint8(x44) &amp; 0xff)
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	x46 := uint8((x44 &gt;&gt; 8))
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	x47 := (uint8(x1) &amp; 0xff)
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	x48 := (x1 &gt;&gt; 8)
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	x49 := (uint8(x48) &amp; 0xff)
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	x50 := (x48 &gt;&gt; 8)
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	x51 := (uint8(x50) &amp; 0xff)
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	x52 := (x50 &gt;&gt; 8)
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	x53 := (uint8(x52) &amp; 0xff)
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	x54 := (x52 &gt;&gt; 8)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	x55 := (uint8(x54) &amp; 0xff)
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	x56 := (x54 &gt;&gt; 8)
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	x57 := (uint8(x56) &amp; 0xff)
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	x58 := (x56 &gt;&gt; 8)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	x59 := (uint8(x58) &amp; 0xff)
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	x60 := uint8((x58 &gt;&gt; 8))
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	out1[0] = x5
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	out1[1] = x7
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	out1[2] = x9
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	out1[3] = x11
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	out1[4] = x13
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	out1[5] = x15
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	out1[6] = x17
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	out1[7] = x18
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	out1[8] = x19
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	out1[9] = x21
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	out1[10] = x23
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	out1[11] = x25
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	out1[12] = x27
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	out1[13] = x29
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	out1[14] = x31
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	out1[15] = x32
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	out1[16] = x33
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	out1[17] = x35
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	out1[18] = x37
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	out1[19] = x39
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	out1[20] = x41
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	out1[21] = x43
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	out1[22] = x45
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	out1[23] = x46
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	out1[24] = x47
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	out1[25] = x49
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	out1[26] = x51
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	out1[27] = x53
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	out1[28] = x55
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	out1[29] = x57
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	out1[30] = x59
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	out1[31] = x60
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// fiatScalarFromBytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span><span class="comment">// Preconditions:</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span><span class="comment">//	0 ≤ bytes_eval arg1 &lt; m</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span><span class="comment">// Postconditions:</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span><span class="comment">//	eval out1 mod m = bytes_eval arg1 mod m</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span><span class="comment">//	0 ≤ eval out1 &lt; m</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span><span class="comment">// Input Bounds:</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span><span class="comment">//	arg1: [[0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0xff], [0x0 ~&gt; 0x1f]]</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span><span class="comment">// Output Bounds:</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">//	out1: [[0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0xffffffffffffffff], [0x0 ~&gt; 0x1fffffffffffffff]]</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>func fiatScalarFromBytes(out1 *[4]uint64, arg1 *[32]uint8) {
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	x1 := (uint64(arg1[31]) &lt;&lt; 56)
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	x2 := (uint64(arg1[30]) &lt;&lt; 48)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	x3 := (uint64(arg1[29]) &lt;&lt; 40)
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	x4 := (uint64(arg1[28]) &lt;&lt; 32)
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	x5 := (uint64(arg1[27]) &lt;&lt; 24)
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	x6 := (uint64(arg1[26]) &lt;&lt; 16)
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	x7 := (uint64(arg1[25]) &lt;&lt; 8)
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	x8 := arg1[24]
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	x9 := (uint64(arg1[23]) &lt;&lt; 56)
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	x10 := (uint64(arg1[22]) &lt;&lt; 48)
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	x11 := (uint64(arg1[21]) &lt;&lt; 40)
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	x12 := (uint64(arg1[20]) &lt;&lt; 32)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	x13 := (uint64(arg1[19]) &lt;&lt; 24)
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	x14 := (uint64(arg1[18]) &lt;&lt; 16)
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	x15 := (uint64(arg1[17]) &lt;&lt; 8)
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	x16 := arg1[16]
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	x17 := (uint64(arg1[15]) &lt;&lt; 56)
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	x18 := (uint64(arg1[14]) &lt;&lt; 48)
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	x19 := (uint64(arg1[13]) &lt;&lt; 40)
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	x20 := (uint64(arg1[12]) &lt;&lt; 32)
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	x21 := (uint64(arg1[11]) &lt;&lt; 24)
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	x22 := (uint64(arg1[10]) &lt;&lt; 16)
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	x23 := (uint64(arg1[9]) &lt;&lt; 8)
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	x24 := arg1[8]
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	x25 := (uint64(arg1[7]) &lt;&lt; 56)
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	x26 := (uint64(arg1[6]) &lt;&lt; 48)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	x27 := (uint64(arg1[5]) &lt;&lt; 40)
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	x28 := (uint64(arg1[4]) &lt;&lt; 32)
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	x29 := (uint64(arg1[3]) &lt;&lt; 24)
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	x30 := (uint64(arg1[2]) &lt;&lt; 16)
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	x31 := (uint64(arg1[1]) &lt;&lt; 8)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	x32 := arg1[0]
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	x33 := (x31 + uint64(x32))
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	x34 := (x30 + x33)
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	x35 := (x29 + x34)
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	x36 := (x28 + x35)
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	x37 := (x27 + x36)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	x38 := (x26 + x37)
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	x39 := (x25 + x38)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	x40 := (x23 + uint64(x24))
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	x41 := (x22 + x40)
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	x42 := (x21 + x41)
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>	x43 := (x20 + x42)
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	x44 := (x19 + x43)
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	x45 := (x18 + x44)
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>	x46 := (x17 + x45)
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	x47 := (x15 + uint64(x16))
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	x48 := (x14 + x47)
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>	x49 := (x13 + x48)
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	x50 := (x12 + x49)
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	x51 := (x11 + x50)
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	x52 := (x10 + x51)
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	x53 := (x9 + x52)
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	x54 := (x7 + uint64(x8))
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	x55 := (x6 + x54)
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	x56 := (x5 + x55)
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	x57 := (x4 + x56)
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	x58 := (x3 + x57)
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	x59 := (x2 + x58)
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	x60 := (x1 + x59)
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	out1[0] = x39
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	out1[1] = x46
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	out1[2] = x53
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	out1[3] = x60
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>}
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>
</pre><p><a href="scalar_fiat.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
