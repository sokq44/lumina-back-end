<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/filippo.io/edwards25519/scalarmult.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./scalarmult.go?s=4435:4517#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/filippo.io">filippo.io</a>/<a href="http://localhost:8080/src/filippo.io/edwards25519">edwards25519</a>/<span class="text-muted">scalarmult.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/filippo.io/edwards25519">filippo.io/edwards25519</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright (c) 2019 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package edwards25519
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import &#34;sync&#34;
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// basepointTable is a set of 32 affineLookupTables, where table i is generated</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// from 256i * basepoint. It is precomputed the first time it&#39;s used.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>func basepointTable() *[32]affineLookupTable {
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	basepointTablePrecomp.initOnce.Do(func() {
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>		p := NewGeneratorPoint()
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>		for i := 0; i &lt; 32; i++ {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>			basepointTablePrecomp.table[i].FromP3(p)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>			for j := 0; j &lt; 8; j++ {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>				p.Add(p, p)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>			}
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>		}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	})
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	return &amp;basepointTablePrecomp.table
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>}
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>var basepointTablePrecomp struct {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	table    [32]affineLookupTable
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	initOnce sync.Once
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// ScalarBaseMult sets v = x * B, where B is the canonical generator, and</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// returns v.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// The scalar multiplication is done in constant time.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func (v *Point) ScalarBaseMult(x *Scalar) *Point {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	basepointTable := basepointTable()
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// Write x = sum(x_i * 16^i) so  x*B = sum( B*x_i*16^i )</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// as described in the Ed25519 paper</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// Group even and odd coefficients</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// x*B     = x_0*16^0*B + x_2*16^2*B + ... + x_62*16^62*B</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">//         + x_1*16^1*B + x_3*16^3*B + ... + x_63*16^63*B</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// x*B     = x_0*16^0*B + x_2*16^2*B + ... + x_62*16^62*B</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">//    + 16*( x_1*16^0*B + x_3*16^2*B + ... + x_63*16^62*B)</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// We use a lookup table for each i to get x_i*16^(2*i)*B</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// and do four doublings to multiply by 16.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	digits := x.signedRadix16()
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	multiple := &amp;affineCached{}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	tmp1 := &amp;projP1xP1{}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	tmp2 := &amp;projP2{}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// Accumulate the odd components first</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	v.Set(NewIdentityPoint())
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	for i := 1; i &lt; 64; i += 2 {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		basepointTable[i/2].SelectInto(multiple, digits[i])
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		tmp1.AddAffine(v, multiple)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		v.fromP1xP1(tmp1)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// Multiply by 16</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	tmp2.FromP3(v)       <span class="comment">// tmp2 =    v in P2 coords</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	tmp1.Double(tmp2)    <span class="comment">// tmp1 =  2*v in P1xP1 coords</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  2*v in P2 coords</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	tmp1.Double(tmp2)    <span class="comment">// tmp1 =  4*v in P1xP1 coords</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  4*v in P2 coords</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	tmp1.Double(tmp2)    <span class="comment">// tmp1 =  8*v in P1xP1 coords</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  8*v in P2 coords</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	tmp1.Double(tmp2)    <span class="comment">// tmp1 = 16*v in P1xP1 coords</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	v.fromP1xP1(tmp1)    <span class="comment">// now v = 16*(odd components)</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Accumulate the even components</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	for i := 0; i &lt; 64; i += 2 {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		basepointTable[i/2].SelectInto(multiple, digits[i])
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		tmp1.AddAffine(v, multiple)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		v.fromP1xP1(tmp1)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	return v
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// ScalarMult sets v = x * q, and returns v.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// The scalar multiplication is done in constant time.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (v *Point) ScalarMult(x *Scalar, q *Point) *Point {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	checkInitialized(q)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	var table projLookupTable
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	table.FromP3(q)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// Write x = sum(x_i * 16^i)</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// so  x*Q = sum( Q*x_i*16^i )</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">//         = Q*x_0 + 16*(Q*x_1 + 16*( ... + Q*x_63) ... )</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">//           &lt;------compute inside out---------</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// We use the lookup table to get the x_i*Q values</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// and do four doublings to compute 16*Q</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	digits := x.signedRadix16()
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// Unwrap first loop iteration to save computing 16*identity</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	multiple := &amp;projCached{}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	tmp1 := &amp;projP1xP1{}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	tmp2 := &amp;projP2{}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	table.SelectInto(multiple, digits[63])
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	v.Set(NewIdentityPoint())
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	tmp1.Add(v, multiple) <span class="comment">// tmp1 = x_63*Q in P1xP1 coords</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	for i := 62; i &gt;= 0; i-- {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =    (prev) in P2 coords</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  2*(prev) in P1xP1 coords</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  2*(prev) in P2 coords</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  4*(prev) in P1xP1 coords</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  4*(prev) in P2 coords</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 =  8*(prev) in P1xP1 coords</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1) <span class="comment">// tmp2 =  8*(prev) in P2 coords</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		tmp1.Double(tmp2)    <span class="comment">// tmp1 = 16*(prev) in P1xP1 coords</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		v.fromP1xP1(tmp1)    <span class="comment">//    v = 16*(prev) in P3 coords</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		table.SelectInto(multiple, digits[i])
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		tmp1.Add(v, multiple) <span class="comment">// tmp1 = x_i*Q + 16*(prev) in P1xP1 coords</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	v.fromP1xP1(tmp1)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return v
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// basepointNafTable is the nafLookupTable8 for the basepoint.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// It is precomputed the first time it&#39;s used.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func basepointNafTable() *nafLookupTable8 {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	basepointNafTablePrecomp.initOnce.Do(func() {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		basepointNafTablePrecomp.table.FromP3(NewGeneratorPoint())
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	})
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return &amp;basepointNafTablePrecomp.table
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>var basepointNafTablePrecomp struct {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	table    nafLookupTable8
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	initOnce sync.Once
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// VarTimeDoubleScalarBaseMult sets v = a * A + b * B, where B is the canonical</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// generator, and returns v.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// Execution time depends on the inputs.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="selection">func (v *Point) VarTimeDoubleScalarBaseMult(a *Scalar, A *Point, b *Scalar) *Point</span> {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	checkInitialized(A)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// Similarly to the single variable-base approach, we compute</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// digits and use them with a lookup table.  However, because</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// we are allowed to do variable-time operations, we don&#39;t</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// need constant-time lookups or constant-time digit</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// computations.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// So we use a non-adjacent form of some width w instead of</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// radix 16.  This is like a binary representation (one digit</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// for each binary place) but we allow the digits to grow in</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// magnitude up to 2^{w-1} so that the nonzero digits are as</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// sparse as possible.  Intuitively, this &#34;condenses&#34; the</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// &#34;mass&#34; of the scalar onto sparse coefficients (meaning</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// fewer additions).</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	basepointNafTable := basepointNafTable()
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	var aTable nafLookupTable5
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	aTable.FromP3(A)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// Because the basepoint is fixed, we can use a wider NAF</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// corresponding to a bigger table.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	aNaf := a.nonAdjacentForm(5)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	bNaf := b.nonAdjacentForm(8)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// Find the first nonzero coefficient.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	i := 255
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	for j := i; j &gt;= 0; j-- {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		if aNaf[j] != 0 || bNaf[j] != 0 {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			break
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	multA := &amp;projCached{}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	multB := &amp;affineCached{}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	tmp1 := &amp;projP1xP1{}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	tmp2 := &amp;projP2{}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	tmp2.Zero()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">// Move from high to low bits, doubling the accumulator</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// at each iteration and checking whether there is a nonzero</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// coefficient to look up a multiple of.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	for ; i &gt;= 0; i-- {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		tmp1.Double(tmp2)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		<span class="comment">// Only update v if we have a nonzero coeff to add in.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if aNaf[i] &gt; 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			v.fromP1xP1(tmp1)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			aTable.SelectInto(multA, aNaf[i])
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			tmp1.Add(v, multA)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		} else if aNaf[i] &lt; 0 {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			v.fromP1xP1(tmp1)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			aTable.SelectInto(multA, -aNaf[i])
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			tmp1.Sub(v, multA)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		if bNaf[i] &gt; 0 {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			v.fromP1xP1(tmp1)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			basepointNafTable.SelectInto(multB, bNaf[i])
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			tmp1.AddAffine(v, multB)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		} else if bNaf[i] &lt; 0 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			v.fromP1xP1(tmp1)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			basepointNafTable.SelectInto(multB, -bNaf[i])
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			tmp1.SubAffine(v, multB)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		tmp2.FromP1xP1(tmp1)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	v.fromP2(tmp2)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return v
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
</pre><p><a href="scalarmult.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
