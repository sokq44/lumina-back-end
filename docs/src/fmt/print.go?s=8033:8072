<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/fmt/print.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./print.go?s=8033:8072#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/fmt">fmt</a>/<span class="text-muted">print.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/fmt">fmt</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package fmt
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;internal/fmtsort&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Strings for use with buffer.WriteString.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// This is less overhead than using buffer.Write with byte arrays.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>const (
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	commaSpaceString  = &#34;, &#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	nilAngleString    = &#34;&lt;nil&gt;&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	nilParenString    = &#34;(nil)&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	nilString         = &#34;nil&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	mapString         = &#34;map[&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	percentBangString = &#34;%!&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	missingString     = &#34;(MISSING)&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	badIndexString    = &#34;(BADINDEX)&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	panicString       = &#34;(PANIC=&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	extraString       = &#34;%!(EXTRA &#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	badWidthString    = &#34;%!(BADWIDTH)&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	badPrecString     = &#34;%!(BADPREC)&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	noVerbString      = &#34;%!(NOVERB)&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	invReflectString  = &#34;&lt;invalid reflect.Value&gt;&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// State represents the printer state passed to custom formatters.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// It provides access to the io.Writer interface plus information about</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// the flags and options for the operand&#39;s format specifier.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type State interface {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// Write is the function to call to emit formatted output to be printed.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	Write(b []byte) (n int, err error)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// Width returns the value of the width option and whether it has been set.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	Width() (wid int, ok bool)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// Precision returns the value of the precision option and whether it has been set.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	Precision() (prec int, ok bool)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// Flag reports whether the flag c, a character, has been set.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Flag(c int) bool
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Formatter is implemented by any value that has a Format method.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// The implementation controls how State and rune are interpreted,</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// and may call Sprint() or Fprint(f) etc. to generate its output.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type Formatter interface {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	Format(f State, verb rune)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Stringer is implemented by any value that has a String method,</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// which defines the “native” format for that value.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// The String method is used to print values passed as an operand</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// to any format that accepts a string or to an unformatted printer</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// such as Print.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>type Stringer interface {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	String() string
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// GoStringer is implemented by any value that has a GoString method,</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// which defines the Go syntax for that value.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// The GoString method is used to print values passed as an operand</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// to a %#v format.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type GoStringer interface {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	GoString() string
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// FormatString returns a string representing the fully qualified formatting</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// directive captured by the State, followed by the argument verb. (State does not</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// itself contain the verb.) The result has a leading percent sign followed by any</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// flags, the width, and the precision. Missing flags, width, and precision are</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// omitted. This function allows a Formatter to reconstruct the original</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// directive triggering the call to Format.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func FormatString(state State, verb rune) string {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	var tmp [16]byte <span class="comment">// Use a local buffer.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	b := append(tmp[:0], &#39;%&#39;)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	for _, c := range &#34; +-#0&#34; { <span class="comment">// All known flags</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		if state.Flag(int(c)) { <span class="comment">// The argument is an int for historical reasons.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			b = append(b, byte(c))
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if w, ok := state.Width(); ok {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		b = strconv.AppendInt(b, int64(w), 10)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if p, ok := state.Precision(); ok {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		b = append(b, &#39;.&#39;)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		b = strconv.AppendInt(b, int64(p), 10)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	b = utf8.AppendRune(b, verb)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return string(b)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Use simple []byte instead of bytes.Buffer to avoid large dependency.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>type buffer []byte
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (b *buffer) write(p []byte) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	*b = append(*b, p...)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (b *buffer) writeString(s string) {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	*b = append(*b, s...)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>func (b *buffer) writeByte(c byte) {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	*b = append(*b, c)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>func (b *buffer) writeRune(r rune) {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	*b = utf8.AppendRune(*b, r)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// pp is used to store a printer&#39;s state and is reused with sync.Pool to avoid allocations.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>type pp struct {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	buf buffer
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// arg holds the current item, as an interface{}.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	arg any
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// value is used instead of arg for reflect values.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	value reflect.Value
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// fmt is used to format basic items such as integers or strings.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	fmt fmt
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// reordered records whether the format string used argument reordering.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	reordered bool
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// goodArgNum records whether the most recent reordering directive was valid.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	goodArgNum bool
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// panicking is set by catchPanic to avoid infinite panic, recover, panic, ... recursion.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	panicking bool
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// erroring is set when printing an error string to guard against calling handleMethods.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	erroring bool
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// wrapErrs is set when the format string may contain a %w verb.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	wrapErrs bool
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// wrappedErrs records the targets of the %w verb.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	wrappedErrs []int
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>var ppFree = sync.Pool{
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	New: func() any { return new(pp) },
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// newPrinter allocates a new pp struct or grabs a cached one.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func newPrinter() *pp {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	p := ppFree.Get().(*pp)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	p.panicking = false
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	p.erroring = false
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	p.wrapErrs = false
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	p.fmt.init(&amp;p.buf)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return p
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// free saves used pp structs in ppFree; avoids an allocation per invocation.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func (p *pp) free() {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// Proper usage of a sync.Pool requires each entry to have approximately</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// the same memory cost. To obtain this property when the stored type</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// contains a variably-sized buffer, we add a hard limit on the maximum</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// buffer to place back in the pool. If the buffer is larger than the</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// limit, we drop the buffer and recycle just the printer.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/issue/23199.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if cap(p.buf) &gt; 64*1024 {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		p.buf = nil
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	} else {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		p.buf = p.buf[:0]
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	if cap(p.wrappedErrs) &gt; 8 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		p.wrappedErrs = nil
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	p.arg = nil
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	p.value = reflect.Value{}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	p.wrappedErrs = p.wrappedErrs[:0]
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	ppFree.Put(p)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (p *pp) Width() (wid int, ok bool) { return p.fmt.wid, p.fmt.widPresent }
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func (p *pp) Precision() (prec int, ok bool) { return p.fmt.prec, p.fmt.precPresent }
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (p *pp) Flag(b int) bool {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	switch b {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	case &#39;-&#39;:
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		return p.fmt.minus
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	case &#39;+&#39;:
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		return p.fmt.plus || p.fmt.plusV
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	case &#39;#&#39;:
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return p.fmt.sharp || p.fmt.sharpV
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	case &#39; &#39;:
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		return p.fmt.space
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	case &#39;0&#39;:
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return p.fmt.zero
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return false
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// Implement Write so we can call Fprintf on a pp (through State), for</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// recursive use in custom verbs.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (p *pp) Write(b []byte) (ret int, err error) {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	p.buf.write(b)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	return len(b), nil
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Implement WriteString so that we can call io.WriteString</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// on a pp (through state), for efficiency.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>func (p *pp) WriteString(s string) (ret int, err error) {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	p.buf.writeString(s)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	return len(s), nil
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// These routines end in &#39;f&#39; and take a format string.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// Fprintf formats according to a format specifier and writes to w.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>func Fprintf(w io.Writer, format string, a ...any) (n int, err error) {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	p.doPrintf(format, a)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	n, err = w.Write(p.buf)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	p.free()
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	return
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// Printf formats according to a format specifier and writes to standard output.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func Printf(format string, a ...any) (n int, err error) {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	return Fprintf(os.Stdout, format, a...)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// Sprintf formats according to a format specifier and returns the resulting string.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func Sprintf(format string, a ...any) string {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	p.doPrintf(format, a)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	s := string(p.buf)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	p.free()
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	return s
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// Appendf formats according to a format specifier, appends the result to the byte</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// slice, and returns the updated slice.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func Appendf(b []byte, format string, a ...any) []byte {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	p.doPrintf(format, a)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	b = append(b, p.buf...)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	p.free()
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	return b
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// These routines do not take a format string</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// Fprint formats using the default formats for its operands and writes to w.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// Spaces are added between operands when neither is a string.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>func Fprint(w io.Writer, a ...any) (n int, err error) {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	p.doPrint(a)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	n, err = w.Write(p.buf)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	p.free()
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	return
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// Print formats using the default formats for its operands and writes to standard output.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// Spaces are added between operands when neither is a string.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="selection">func Print(a ...any) (n int, err error)</span> {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return Fprint(os.Stdout, a...)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// Sprint formats using the default formats for its operands and returns the resulting string.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// Spaces are added between operands when neither is a string.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func Sprint(a ...any) string {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	p.doPrint(a)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	s := string(p.buf)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	p.free()
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return s
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Append formats using the default formats for its operands, appends the result to</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// the byte slice, and returns the updated slice.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func Append(b []byte, a ...any) []byte {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	p.doPrint(a)
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	b = append(b, p.buf...)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	p.free()
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	return b
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// These routines end in &#39;ln&#39;, do not take a format string,</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// always add spaces between operands, and add a newline</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// after the last operand.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// Fprintln formats using the default formats for its operands and writes to w.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func Fprintln(w io.Writer, a ...any) (n int, err error) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	p.doPrintln(a)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	n, err = w.Write(p.buf)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	p.free()
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	return
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// Println formats using the default formats for its operands and writes to standard output.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func Println(a ...any) (n int, err error) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	return Fprintln(os.Stdout, a...)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// Sprintln formats using the default formats for its operands and returns the resulting string.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>func Sprintln(a ...any) string {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	p.doPrintln(a)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	s := string(p.buf)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	p.free()
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	return s
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// Appendln formats using the default formats for its operands, appends the result</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// to the byte slice, and returns the updated slice. Spaces are always added</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// between operands and a newline is appended.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func Appendln(b []byte, a ...any) []byte {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	p := newPrinter()
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	p.doPrintln(a)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	b = append(b, p.buf...)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	p.free()
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	return b
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// getField gets the i&#39;th field of the struct value.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// If the field itself is a non-nil interface, return a value for</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// the thing inside the interface, not the interface itself.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>func getField(v reflect.Value, i int) reflect.Value {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	val := v.Field(i)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if val.Kind() == reflect.Interface &amp;&amp; !val.IsNil() {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		val = val.Elem()
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return val
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// tooLarge reports whether the magnitude of the integer is</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// too large to be used as a formatting width or precision.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func tooLarge(x int) bool {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	const max int = 1e6
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return x &gt; max || x &lt; -max
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// parsenum converts ASCII to integer.  num is 0 (and isnum is false) if no number present.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func parsenum(s string, start, end int) (num int, isnum bool, newi int) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if start &gt;= end {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		return 0, false, end
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	for newi = start; newi &lt; end &amp;&amp; &#39;0&#39; &lt;= s[newi] &amp;&amp; s[newi] &lt;= &#39;9&#39;; newi++ {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		if tooLarge(num) {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			return 0, false, end <span class="comment">// Overflow; crazy long number most likely.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		num = num*10 + int(s[newi]-&#39;0&#39;)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		isnum = true
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func (p *pp) unknownType(v reflect.Value) {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if !v.IsValid() {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		p.buf.writeString(nilAngleString)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		return
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	p.buf.writeByte(&#39;?&#39;)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	p.buf.writeString(v.Type().String())
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	p.buf.writeByte(&#39;?&#39;)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>func (p *pp) badVerb(verb rune) {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	p.erroring = true
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	p.buf.writeString(percentBangString)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	p.buf.writeRune(verb)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	p.buf.writeByte(&#39;(&#39;)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	switch {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	case p.arg != nil:
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		p.buf.writeString(reflect.TypeOf(p.arg).String())
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;=&#39;)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		p.printArg(p.arg, &#39;v&#39;)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	case p.value.IsValid():
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		p.buf.writeString(p.value.Type().String())
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;=&#39;)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		p.printValue(p.value, &#39;v&#39;, 0)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	default:
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		p.buf.writeString(nilAngleString)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	p.buf.writeByte(&#39;)&#39;)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	p.erroring = false
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func (p *pp) fmtBool(v bool, verb rune) {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	switch verb {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	case &#39;t&#39;, &#39;v&#39;:
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		p.fmt.fmtBoolean(v)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	default:
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// fmt0x64 formats a uint64 in hexadecimal and prefixes it with 0x or</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// not, as requested, by temporarily setting the sharp flag.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>func (p *pp) fmt0x64(v uint64, leading0x bool) {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	sharp := p.fmt.sharp
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	p.fmt.sharp = leading0x
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	p.fmt.fmtInteger(v, 16, unsigned, &#39;v&#39;, ldigits)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	p.fmt.sharp = sharp
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">// fmtInteger formats a signed or unsigned integer.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>func (p *pp) fmtInteger(v uint64, isSigned bool, verb rune) {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	switch verb {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		if p.fmt.sharpV &amp;&amp; !isSigned {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>			p.fmt0x64(v, true)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		} else {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			p.fmt.fmtInteger(v, 10, isSigned, verb, ldigits)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	case &#39;d&#39;:
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		p.fmt.fmtInteger(v, 10, isSigned, verb, ldigits)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	case &#39;b&#39;:
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		p.fmt.fmtInteger(v, 2, isSigned, verb, ldigits)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	case &#39;o&#39;, &#39;O&#39;:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		p.fmt.fmtInteger(v, 8, isSigned, verb, ldigits)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		p.fmt.fmtInteger(v, 16, isSigned, verb, ldigits)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	case &#39;X&#39;:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		p.fmt.fmtInteger(v, 16, isSigned, verb, udigits)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	case &#39;c&#39;:
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		p.fmt.fmtC(v)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	case &#39;q&#39;:
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		p.fmt.fmtQc(v)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	case &#39;U&#39;:
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		p.fmt.fmtUnicode(v)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	default:
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// fmtFloat formats a float. The default precision for each verb</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// is specified as last argument in the call to fmt_float.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>func (p *pp) fmtFloat(v float64, size int, verb rune) {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	switch verb {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		p.fmt.fmtFloat(v, size, &#39;g&#39;, -1)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	case &#39;b&#39;, &#39;g&#39;, &#39;G&#39;, &#39;x&#39;, &#39;X&#39;:
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		p.fmt.fmtFloat(v, size, verb, -1)
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	case &#39;f&#39;, &#39;e&#39;, &#39;E&#39;:
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		p.fmt.fmtFloat(v, size, verb, 6)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	case &#39;F&#39;:
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		p.fmt.fmtFloat(v, size, &#39;f&#39;, 6)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	default:
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">// fmtComplex formats a complex number v with</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// r = real(v) and j = imag(v) as (r+ji) using</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// fmtFloat for r and j formatting.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>func (p *pp) fmtComplex(v complex128, size int, verb rune) {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">// Make sure any unsupported verbs are found before the</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	<span class="comment">// calls to fmtFloat to not generate an incorrect error string.</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	switch verb {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	case &#39;v&#39;, &#39;b&#39;, &#39;g&#39;, &#39;G&#39;, &#39;x&#39;, &#39;X&#39;, &#39;f&#39;, &#39;F&#39;, &#39;e&#39;, &#39;E&#39;:
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		oldPlus := p.fmt.plus
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;(&#39;)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		p.fmtFloat(real(v), size/2, verb)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		<span class="comment">// Imaginary part always has a sign.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		p.fmt.plus = true
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		p.fmtFloat(imag(v), size/2, verb)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		p.buf.writeString(&#34;i)&#34;)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		p.fmt.plus = oldPlus
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	default:
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>func (p *pp) fmtString(v string, verb rune) {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	switch verb {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			p.fmt.fmtQ(v)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		} else {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			p.fmt.fmtS(v)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	case &#39;s&#39;:
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		p.fmt.fmtS(v)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		p.fmt.fmtSx(v, ldigits)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	case &#39;X&#39;:
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		p.fmt.fmtSx(v, udigits)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	case &#39;q&#39;:
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		p.fmt.fmtQ(v)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	default:
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>func (p *pp) fmtBytes(v []byte, verb rune, typeString string) {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	switch verb {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	case &#39;v&#39;, &#39;d&#39;:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			p.buf.writeString(typeString)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			if v == nil {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>				p.buf.writeString(nilParenString)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>				return
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;{&#39;)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			for i, c := range v {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>					p.buf.writeString(commaSpaceString)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>				}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>				p.fmt0x64(uint64(c), true)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;}&#39;)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		} else {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;[&#39;)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			for i, c := range v {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>					p.buf.writeByte(&#39; &#39;)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>				}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>				p.fmt.fmtInteger(uint64(c), 10, unsigned, verb, ldigits)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;]&#39;)
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	case &#39;s&#39;:
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		p.fmt.fmtBs(v)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	case &#39;x&#39;:
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		p.fmt.fmtBx(v, ldigits)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	case &#39;X&#39;:
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		p.fmt.fmtBx(v, udigits)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	case &#39;q&#39;:
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		p.fmt.fmtQ(string(v))
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	default:
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		p.printValue(reflect.ValueOf(v), verb, 0)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>func (p *pp) fmtPointer(value reflect.Value, verb rune) {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	var u uintptr
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	switch value.Kind() {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func, reflect.Map, reflect.Pointer, reflect.Slice, reflect.UnsafePointer:
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		u = uintptr(value.UnsafePointer())
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	default:
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		return
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	switch verb {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	case &#39;v&#39;:
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;(&#39;)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			p.buf.writeString(value.Type().String())
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>			p.buf.writeString(&#34;)(&#34;)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			if u == 0 {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>				p.buf.writeString(nilString)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			} else {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>				p.fmt0x64(uint64(u), true)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;)&#39;)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		} else {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			if u == 0 {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>				p.fmt.padString(nilAngleString)
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			} else {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>				p.fmt0x64(uint64(u), !p.fmt.sharp)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	case &#39;p&#39;:
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		p.fmt0x64(uint64(u), !p.fmt.sharp)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	case &#39;b&#39;, &#39;o&#39;, &#39;d&#39;, &#39;x&#39;, &#39;X&#39;:
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		p.fmtInteger(uint64(u), unsigned, verb)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	default:
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		p.badVerb(verb)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>func (p *pp) catchPanic(arg any, verb rune, method string) {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	if err := recover(); err != nil {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		<span class="comment">// If it&#39;s a nil pointer, just say &#34;&lt;nil&gt;&#34;. The likeliest causes are a</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		<span class="comment">// Stringer that fails to guard against nil or a nil pointer for a</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		<span class="comment">// value receiver, and in either case, &#34;&lt;nil&gt;&#34; is a nice result.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		if v := reflect.ValueOf(arg); v.Kind() == reflect.Pointer &amp;&amp; v.IsNil() {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			p.buf.writeString(nilAngleString)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			return
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		<span class="comment">// Otherwise print a concise panic message. Most of the time the panic</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		<span class="comment">// value will print itself nicely.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		if p.panicking {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			<span class="comment">// Nested panics; the recursion in printArg cannot succeed.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			panic(err)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		oldFlags := p.fmt.fmtFlags
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		<span class="comment">// For this output we want default behavior.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		p.fmt.clearflags()
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		p.buf.writeString(percentBangString)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		p.buf.writeRune(verb)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		p.buf.writeString(panicString)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		p.buf.writeString(method)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		p.buf.writeString(&#34; method: &#34;)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		p.panicking = true
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		p.printArg(err, &#39;v&#39;)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		p.panicking = false
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;)&#39;)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		p.fmt.fmtFlags = oldFlags
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>func (p *pp) handleMethods(verb rune) (handled bool) {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	if p.erroring {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		return
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	if verb == &#39;w&#39; {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		<span class="comment">// It is invalid to use %w other than with Errorf or with a non-error arg.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		_, ok := p.arg.(error)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		if !ok || !p.wrapErrs {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			p.badVerb(verb)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			return true
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		<span class="comment">// If the arg is a Formatter, pass &#39;v&#39; as the verb to it.</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		verb = &#39;v&#39;
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	<span class="comment">// Is it a Formatter?</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	if formatter, ok := p.arg.(Formatter); ok {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		handled = true
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		defer p.catchPanic(p.arg, verb, &#34;Format&#34;)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		formatter.Format(p, verb)
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		return
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	<span class="comment">// If we&#39;re doing Go syntax and the argument knows how to supply it, take care of it now.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	if p.fmt.sharpV {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		if stringer, ok := p.arg.(GoStringer); ok {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>			handled = true
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			defer p.catchPanic(p.arg, verb, &#34;GoString&#34;)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			<span class="comment">// Print the result of GoString unadorned.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			p.fmt.fmtS(stringer.GoString())
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			return
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	} else {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		<span class="comment">// If a string is acceptable according to the format, see if</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		<span class="comment">// the value satisfies one of the string-valued interfaces.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		<span class="comment">// Println etc. set verb to %v, which is &#34;stringable&#34;.</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		switch verb {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		case &#39;v&#39;, &#39;s&#39;, &#39;x&#39;, &#39;X&#39;, &#39;q&#39;:
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			<span class="comment">// Is it an error or Stringer?</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			<span class="comment">// The duplication in the bodies is necessary:</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			<span class="comment">// setting handled and deferring catchPanic</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			<span class="comment">// must happen before calling the method.</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			switch v := p.arg.(type) {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			case error:
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				handled = true
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>				defer p.catchPanic(p.arg, verb, &#34;Error&#34;)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>				p.fmtString(v.Error(), verb)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>				return
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			case Stringer:
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>				handled = true
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>				defer p.catchPanic(p.arg, verb, &#34;String&#34;)
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>				p.fmtString(v.String(), verb)
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>				return
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	}
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	return false
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>func (p *pp) printArg(arg any, verb rune) {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	p.arg = arg
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	p.value = reflect.Value{}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	if arg == nil {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		switch verb {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		case &#39;T&#39;, &#39;v&#39;:
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			p.fmt.padString(nilAngleString)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		default:
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			p.badVerb(verb)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		return
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	<span class="comment">// Special processing considerations.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	<span class="comment">// %T (the value&#39;s type) and %p (its address) are special; we always do them first.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	switch verb {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	case &#39;T&#39;:
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		p.fmt.fmtS(reflect.TypeOf(arg).String())
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		return
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	case &#39;p&#39;:
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		p.fmtPointer(reflect.ValueOf(arg), &#39;p&#39;)
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		return
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	<span class="comment">// Some types can be done without reflection.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	switch f := arg.(type) {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	case bool:
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		p.fmtBool(f, verb)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	case float32:
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		p.fmtFloat(float64(f), 32, verb)
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	case float64:
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		p.fmtFloat(f, 64, verb)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	case complex64:
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		p.fmtComplex(complex128(f), 64, verb)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	case complex128:
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		p.fmtComplex(f, 128, verb)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	case int:
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), signed, verb)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	case int8:
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), signed, verb)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	case int16:
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), signed, verb)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	case int32:
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), signed, verb)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	case int64:
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), signed, verb)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	case uint:
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), unsigned, verb)
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	case uint8:
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), unsigned, verb)
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	case uint16:
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), unsigned, verb)
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	case uint32:
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), unsigned, verb)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	case uint64:
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		p.fmtInteger(f, unsigned, verb)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	case uintptr:
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f), unsigned, verb)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	case string:
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		p.fmtString(f, verb)
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	case []byte:
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		p.fmtBytes(f, verb, &#34;[]byte&#34;)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	case reflect.Value:
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		<span class="comment">// Handle extractable values with special methods</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		<span class="comment">// since printValue does not handle them at depth 0.</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		if f.IsValid() &amp;&amp; f.CanInterface() {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			p.arg = f.Interface()
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			if p.handleMethods(verb) {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>				return
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>			}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		p.printValue(f, verb, 0)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	default:
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		<span class="comment">// If the type is not simple, it might have methods.</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		if !p.handleMethods(verb) {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			<span class="comment">// Need to use reflection, since the type had no</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>			<span class="comment">// interface methods that could be used for formatting.</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			p.printValue(reflect.ValueOf(f), verb, 0)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span><span class="comment">// printValue is similar to printArg but starts with a reflect value, not an interface{} value.</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span><span class="comment">// It does not handle &#39;p&#39; and &#39;T&#39; verbs because these should have been already handled by printArg.</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>func (p *pp) printValue(value reflect.Value, verb rune, depth int) {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	<span class="comment">// Handle values with special methods if not already handled by printArg (depth == 0).</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	if depth &gt; 0 &amp;&amp; value.IsValid() &amp;&amp; value.CanInterface() {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		p.arg = value.Interface()
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		if p.handleMethods(verb) {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			return
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	p.arg = nil
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	p.value = value
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	switch f := value; value.Kind() {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	case reflect.Invalid:
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		if depth == 0 {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			p.buf.writeString(invReflectString)
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		} else {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>			switch verb {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			case &#39;v&#39;:
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>				p.buf.writeString(nilAngleString)
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			default:
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>				p.badVerb(verb)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	case reflect.Bool:
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		p.fmtBool(f.Bool(), verb)
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		p.fmtInteger(uint64(f.Int()), signed, verb)
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		p.fmtInteger(f.Uint(), unsigned, verb)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	case reflect.Float32:
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		p.fmtFloat(f.Float(), 32, verb)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	case reflect.Float64:
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		p.fmtFloat(f.Float(), 64, verb)
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	case reflect.Complex64:
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		p.fmtComplex(f.Complex(), 64, verb)
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	case reflect.Complex128:
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		p.fmtComplex(f.Complex(), 128, verb)
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	case reflect.String:
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		p.fmtString(f.String(), verb)
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>			p.buf.writeString(f.Type().String())
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			if f.IsNil() {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>				p.buf.writeString(nilParenString)
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>				return
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;{&#39;)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		} else {
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>			p.buf.writeString(mapString)
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		sorted := fmtsort.Sort(f)
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		for i, key := range sorted.Key {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>				if p.fmt.sharpV {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>					p.buf.writeString(commaSpaceString)
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>				} else {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>					p.buf.writeByte(&#39; &#39;)
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>				}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>			}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>			p.printValue(key, verb, depth+1)
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;:&#39;)
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			p.printValue(sorted.Value[i], verb, depth+1)
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;}&#39;)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		} else {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;]&#39;)
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	case reflect.Struct:
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>			p.buf.writeString(f.Type().String())
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		}
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;{&#39;)
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		for i := 0; i &lt; f.NumField(); i++ {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>				if p.fmt.sharpV {
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>					p.buf.writeString(commaSpaceString)
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>				} else {
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>					p.buf.writeByte(&#39; &#39;)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>				}
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>			}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>			if p.fmt.plusV || p.fmt.sharpV {
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>				if name := f.Type().Field(i).Name; name != &#34;&#34; {
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>					p.buf.writeString(name)
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>					p.buf.writeByte(&#39;:&#39;)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>				}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>			}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			p.printValue(getField(f, i), verb, depth+1)
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;}&#39;)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	case reflect.Interface:
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		value := f.Elem()
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		if !value.IsValid() {
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>			if p.fmt.sharpV {
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>				p.buf.writeString(f.Type().String())
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>				p.buf.writeString(nilParenString)
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>			} else {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>				p.buf.writeString(nilAngleString)
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>			}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		} else {
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>			p.printValue(value, verb, depth+1)
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		}
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	case reflect.Array, reflect.Slice:
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>		switch verb {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		case &#39;s&#39;, &#39;q&#39;, &#39;x&#39;, &#39;X&#39;:
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>			<span class="comment">// Handle byte and uint8 slices and arrays special for the above verbs.</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>			t := f.Type()
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>			if t.Elem().Kind() == reflect.Uint8 {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>				var bytes []byte
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>				if f.Kind() == reflect.Slice || f.CanAddr() {
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>					bytes = f.Bytes()
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>				} else {
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>					<span class="comment">// We have an array, but we cannot Bytes() a non-addressable array,</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>					<span class="comment">// so we build a slice by hand. This is a rare case but it would be nice</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>					<span class="comment">// if reflection could help a little more.</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>					bytes = make([]byte, f.Len())
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>					for i := range bytes {
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>						bytes[i] = byte(f.Index(i).Uint())
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>					}
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>				}
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>				p.fmtBytes(bytes, verb, t.String())
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>				return
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>			}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		if p.fmt.sharpV {
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>			p.buf.writeString(f.Type().String())
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			if f.Kind() == reflect.Slice &amp;&amp; f.IsNil() {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>				p.buf.writeString(nilParenString)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>				return
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>			}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;{&#39;)
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>			for i := 0; i &lt; f.Len(); i++ {
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>					p.buf.writeString(commaSpaceString)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>				}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>				p.printValue(f.Index(i), verb, depth+1)
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;}&#39;)
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		} else {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;[&#39;)
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>			for i := 0; i &lt; f.Len(); i++ {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>					p.buf.writeByte(&#39; &#39;)
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>				}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>				p.printValue(f.Index(i), verb, depth+1)
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;]&#39;)
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	case reflect.Pointer:
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>		<span class="comment">// pointer to array or slice or struct? ok at top level</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		<span class="comment">// but not embedded (avoid loops)</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		if depth == 0 &amp;&amp; f.UnsafePointer() != nil {
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>			switch a := f.Elem(); a.Kind() {
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>			case reflect.Array, reflect.Slice, reflect.Struct, reflect.Map:
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>				p.buf.writeByte(&#39;&amp;&#39;)
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>				p.printValue(a, verb, depth+1)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>				return
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>			}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		fallthrough
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	case reflect.Chan, reflect.Func, reflect.UnsafePointer:
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		p.fmtPointer(f, verb)
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	default:
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		p.unknownType(f)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>
<span id="L933" class="ln">   933&nbsp;&nbsp;</span><span class="comment">// intFromArg gets the argNumth element of a. On return, isInt reports whether the argument has integer type.</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>func intFromArg(a []any, argNum int) (num int, isInt bool, newArgNum int) {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	newArgNum = argNum
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	if argNum &lt; len(a) {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>		num, isInt = a[argNum].(int) <span class="comment">// Almost always OK.</span>
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		if !isInt {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			<span class="comment">// Work harder.</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>			switch v := reflect.ValueOf(a[argNum]); v.Kind() {
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>				n := v.Int()
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>				if int64(int(n)) == n {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>					num = int(n)
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>					isInt = true
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>				}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>			case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>				n := v.Uint()
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>				if int64(n) &gt;= 0 &amp;&amp; uint64(int(n)) == n {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>					num = int(n)
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>					isInt = true
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>				}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			default:
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>				<span class="comment">// Already 0, false.</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>			}
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>		}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>		newArgNum = argNum + 1
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		if tooLarge(num) {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>			num = 0
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			isInt = false
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>		}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	}
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	return
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span><span class="comment">// parseArgNumber returns the value of the bracketed number, minus 1</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span><span class="comment">// (explicit argument numbers are one-indexed but we want zero-indexed).</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span><span class="comment">// The opening bracket is known to be present at format[0].</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span><span class="comment">// The returned values are the index, the number of bytes to consume</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span><span class="comment">// up to the closing paren, if present, and whether the number parsed</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span><span class="comment">// ok. The bytes to consume will be 1 if no closing paren is present.</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>func parseArgNumber(format string) (index int, wid int, ok bool) {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	<span class="comment">// There must be at least 3 bytes: [n].</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	if len(format) &lt; 3 {
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		return 0, 1, false
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	}
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	<span class="comment">// Find closing bracket.</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	for i := 1; i &lt; len(format); i++ {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		if format[i] == &#39;]&#39; {
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>			width, ok, newi := parsenum(format, 1, i)
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			if !ok || newi != i {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>				return 0, i + 1, false
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>			}
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>			return width - 1, i + 1, true <span class="comment">// arg numbers are one-indexed and skip paren.</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		}
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	return 0, 1, false
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span><span class="comment">// argNumber returns the next argument to evaluate, which is either the value of the passed-in</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span><span class="comment">// argNum or the value of the bracketed integer that begins format[i:]. It also returns</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span><span class="comment">// the new value of i, that is, the index of the next byte of the format to process.</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>func (p *pp) argNumber(argNum int, format string, i int, numArgs int) (newArgNum, newi int, found bool) {
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	if len(format) &lt;= i || format[i] != &#39;[&#39; {
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		return argNum, i, false
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	}
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	p.reordered = true
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	index, wid, ok := parseArgNumber(format[i:])
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	if ok &amp;&amp; 0 &lt;= index &amp;&amp; index &lt; numArgs {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		return index, i + wid, true
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	}
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	p.goodArgNum = false
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	return argNum, i + wid, ok
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>}
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>func (p *pp) badArgNum(verb rune) {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	p.buf.writeString(percentBangString)
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	p.buf.writeRune(verb)
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	p.buf.writeString(badIndexString)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>func (p *pp) missingArg(verb rune) {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	p.buf.writeString(percentBangString)
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	p.buf.writeRune(verb)
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	p.buf.writeString(missingString)
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>}
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>func (p *pp) doPrintf(format string, a []any) {
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	end := len(format)
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	argNum := 0         <span class="comment">// we process one argument per non-trivial format</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	afterIndex := false <span class="comment">// previous item in format was an index like [3].</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	p.reordered = false
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>formatLoop:
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	for i := 0; i &lt; end; {
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		p.goodArgNum = true
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		lasti := i
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		for i &lt; end &amp;&amp; format[i] != &#39;%&#39; {
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>			i++
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		if i &gt; lasti {
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>			p.buf.writeString(format[lasti:i])
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		}
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>		if i &gt;= end {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>			<span class="comment">// done processing format string</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>			break
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>		}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		<span class="comment">// Process one verb</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>		i++
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		<span class="comment">// Do we have flags?</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>		p.fmt.clearflags()
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	simpleFormat:
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>		for ; i &lt; end; i++ {
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>			c := format[i]
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>			switch c {
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>			case &#39;#&#39;:
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>				p.fmt.sharp = true
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>			case &#39;0&#39;:
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>				p.fmt.zero = !p.fmt.minus <span class="comment">// Only allow zero padding to the left.</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>			case &#39;+&#39;:
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>				p.fmt.plus = true
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>			case &#39;-&#39;:
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>				p.fmt.minus = true
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>				p.fmt.zero = false <span class="comment">// Do not pad with zeros to the right.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>			case &#39; &#39;:
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>				p.fmt.space = true
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>			default:
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>				<span class="comment">// Fast path for common case of ascii lower case simple verbs</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>				<span class="comment">// without precision or width or argument indices.</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>				if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; &amp;&amp; argNum &lt; len(a) {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>					switch c {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>					case &#39;w&#39;:
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>						p.wrappedErrs = append(p.wrappedErrs, argNum)
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>						fallthrough
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>					case &#39;v&#39;:
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>						<span class="comment">// Go syntax</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>						p.fmt.sharpV = p.fmt.sharp
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>						p.fmt.sharp = false
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>						<span class="comment">// Struct-field syntax</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>						p.fmt.plusV = p.fmt.plus
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>						p.fmt.plus = false
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>					}
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>					p.printArg(a[argNum], rune(c))
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>					argNum++
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>					i++
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>					continue formatLoop
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>				}
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>				<span class="comment">// Format is more complex than simple flags and a verb or is malformed.</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>				break simpleFormat
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>			}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>		}
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		<span class="comment">// Do we have an explicit argument index?</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		argNum, i, afterIndex = p.argNumber(argNum, format, i, len(a))
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>		<span class="comment">// Do we have width?</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>		if i &lt; end &amp;&amp; format[i] == &#39;*&#39; {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>			i++
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>			p.fmt.wid, p.fmt.widPresent, argNum = intFromArg(a, argNum)
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>			if !p.fmt.widPresent {
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>				p.buf.writeString(badWidthString)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>			}
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>			<span class="comment">// We have a negative width, so take its value and ensure</span>
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>			<span class="comment">// that the minus flag is set</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>			if p.fmt.wid &lt; 0 {
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>				p.fmt.wid = -p.fmt.wid
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>				p.fmt.minus = true
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>				p.fmt.zero = false <span class="comment">// Do not pad with zeros to the right.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>			}
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>			afterIndex = false
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		} else {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>			p.fmt.wid, p.fmt.widPresent, i = parsenum(format, i, end)
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>			if afterIndex &amp;&amp; p.fmt.widPresent { <span class="comment">// &#34;%[3]2d&#34;</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>				p.goodArgNum = false
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>			}
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		}
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		<span class="comment">// Do we have precision?</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		if i+1 &lt; end &amp;&amp; format[i] == &#39;.&#39; {
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>			i++
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			if afterIndex { <span class="comment">// &#34;%[3].2d&#34;</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>				p.goodArgNum = false
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>			}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>			argNum, i, afterIndex = p.argNumber(argNum, format, i, len(a))
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>			if i &lt; end &amp;&amp; format[i] == &#39;*&#39; {
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>				i++
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>				p.fmt.prec, p.fmt.precPresent, argNum = intFromArg(a, argNum)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>				<span class="comment">// Negative precision arguments don&#39;t make sense</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>				if p.fmt.prec &lt; 0 {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>					p.fmt.prec = 0
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>					p.fmt.precPresent = false
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>				}
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>				if !p.fmt.precPresent {
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>					p.buf.writeString(badPrecString)
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>				}
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>				afterIndex = false
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>			} else {
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>				p.fmt.prec, p.fmt.precPresent, i = parsenum(format, i, end)
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>				if !p.fmt.precPresent {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>					p.fmt.prec = 0
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>					p.fmt.precPresent = true
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>				}
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>			}
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		}
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		if !afterIndex {
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>			argNum, i, afterIndex = p.argNumber(argNum, format, i, len(a))
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		}
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		if i &gt;= end {
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>			p.buf.writeString(noVerbString)
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>			break
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		}
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>		verb, size := rune(format[i]), 1
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		if verb &gt;= utf8.RuneSelf {
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>			verb, size = utf8.DecodeRuneInString(format[i:])
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		}
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		i += size
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>		switch {
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>		case verb == &#39;%&#39;: <span class="comment">// Percent does not absorb operands and ignores f.wid and f.prec.</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>			p.buf.writeByte(&#39;%&#39;)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		case !p.goodArgNum:
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>			p.badArgNum(verb)
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		case argNum &gt;= len(a): <span class="comment">// No argument left over to print for the current verb.</span>
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>			p.missingArg(verb)
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		case verb == &#39;w&#39;:
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			p.wrappedErrs = append(p.wrappedErrs, argNum)
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			fallthrough
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		case verb == &#39;v&#39;:
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			<span class="comment">// Go syntax</span>
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>			p.fmt.sharpV = p.fmt.sharp
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>			p.fmt.sharp = false
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			<span class="comment">// Struct-field syntax</span>
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			p.fmt.plusV = p.fmt.plus
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>			p.fmt.plus = false
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>			fallthrough
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		default:
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>			p.printArg(a[argNum], verb)
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>			argNum++
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>		}
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	<span class="comment">// Check for extra arguments unless the call accessed the arguments</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	<span class="comment">// out of order, in which case it&#39;s too expensive to detect if they&#39;ve all</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>	<span class="comment">// been used and arguably OK if they&#39;re not.</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	if !p.reordered &amp;&amp; argNum &lt; len(a) {
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		p.fmt.clearflags()
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		p.buf.writeString(extraString)
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		for i, arg := range a[argNum:] {
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>				p.buf.writeString(commaSpaceString)
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>			}
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>			if arg == nil {
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>				p.buf.writeString(nilAngleString)
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>			} else {
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>				p.buf.writeString(reflect.TypeOf(arg).String())
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>				p.buf.writeByte(&#39;=&#39;)
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>				p.printArg(arg, &#39;v&#39;)
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>			}
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>		}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		p.buf.writeByte(&#39;)&#39;)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>}
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>func (p *pp) doPrint(a []any) {
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	prevString := false
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	for argNum, arg := range a {
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>		isString := arg != nil &amp;&amp; reflect.TypeOf(arg).Kind() == reflect.String
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		<span class="comment">// Add a space between two non-string arguments.</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		if argNum &gt; 0 &amp;&amp; !isString &amp;&amp; !prevString {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>			p.buf.writeByte(&#39; &#39;)
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		}
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		p.printArg(arg, &#39;v&#39;)
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		prevString = isString
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	}
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>}
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span><span class="comment">// doPrintln is like doPrint but always adds a space between arguments</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span><span class="comment">// and a newline after the last argument.</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>func (p *pp) doPrintln(a []any) {
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	for argNum, arg := range a {
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		if argNum &gt; 0 {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>			p.buf.writeByte(&#39; &#39;)
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>		p.printArg(arg, &#39;v&#39;)
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>	p.buf.writeByte(&#39;\n&#39;)
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>}
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>
</pre><p><a href="print.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
