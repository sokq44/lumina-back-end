<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/fmt/scan.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./scan.go?s=2317:2383#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/fmt">fmt</a>/<span class="text-muted">scan.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/fmt">fmt</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package fmt
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// ScanState represents the scanner state passed to custom scanners.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Scanners may do rune-at-a-time scanning or ask the ScanState</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// to discover the next space-delimited token.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type ScanState interface {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// ReadRune reads the next rune (Unicode code point) from the input.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// If invoked during Scanln, Fscanln, or Sscanln, ReadRune() will</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// return EOF after returning the first &#39;\n&#39; or when reading beyond</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// the specified width.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	ReadRune() (r rune, size int, err error)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// UnreadRune causes the next call to ReadRune to return the same rune.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	UnreadRune() error
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// SkipSpace skips space in the input. Newlines are treated appropriately</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// for the operation being performed; see the package documentation</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// for more information.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	SkipSpace()
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// Token skips space in the input if skipSpace is true, then returns the</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// run of Unicode code points c satisfying f(c).  If f is nil,</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// !unicode.IsSpace(c) is used; that is, the token will hold non-space</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// characters. Newlines are treated appropriately for the operation being</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// performed; see the package documentation for more information.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// The returned slice points to shared data that may be overwritten</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// by the next call to Token, a call to a Scan function using the ScanState</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// as input, or when the calling Scan method returns.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	Token(skipSpace bool, f func(rune) bool) (token []byte, err error)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// Width returns the value of the width option and whether it has been set.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// The unit is Unicode code points.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	Width() (wid int, ok bool)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// Because ReadRune is implemented by the interface, Read should never be</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// called by the scanning routines and a valid implementation of</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// ScanState may choose always to return an error from Read.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Read(buf []byte) (n int, err error)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Scanner is implemented by any value that has a Scan method, which scans</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// the input for the representation of a value and stores the result in the</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// receiver, which must be a pointer to be useful. The Scan method is called</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// for any argument to Scan, Scanf, or Scanln that implements it.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="selection">type Scanner interface {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Scan(state ScanState, verb rune) error
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// Scan scans text read from standard input, storing successive</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// space-separated values into successive arguments. Newlines count</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// as space. It returns the number of items successfully scanned.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// If that is less than the number of arguments, err will report why.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>func Scan(a ...any) (n int, err error) {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	return Fscan(os.Stdin, a...)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// Scanln is similar to Scan, but stops scanning at a newline and</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// after the final item there must be a newline or EOF.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>func Scanln(a ...any) (n int, err error) {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	return Fscanln(os.Stdin, a...)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// Scanf scans text read from standard input, storing successive</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// space-separated values into successive arguments as determined by</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// the format. It returns the number of items successfully scanned.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// If that is less than the number of arguments, err will report why.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// Newlines in the input must match newlines in the format.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// The one exception: the verb %c always scans the next rune in the</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// input, even if it is a space (or tab etc.) or newline.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func Scanf(format string, a ...any) (n int, err error) {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return Fscanf(os.Stdin, format, a...)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>type stringReader string
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (r *stringReader) Read(b []byte) (n int, err error) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	n = copy(b, *r)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	*r = (*r)[n:]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if n == 0 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		err = io.EOF
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Sscan scans the argument string, storing successive space-separated</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// values into successive arguments. Newlines count as space. It</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// returns the number of items successfully scanned. If that is less</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// than the number of arguments, err will report why.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func Sscan(str string, a ...any) (n int, err error) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	return Fscan((*stringReader)(&amp;str), a...)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Sscanln is similar to Sscan, but stops scanning at a newline and</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// after the final item there must be a newline or EOF.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func Sscanln(str string, a ...any) (n int, err error) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	return Fscanln((*stringReader)(&amp;str), a...)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Sscanf scans the argument string, storing successive space-separated</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// values into successive arguments as determined by the format. It</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// returns the number of items successfully parsed.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Newlines in the input must match newlines in the format.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func Sscanf(str string, format string, a ...any) (n int, err error) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return Fscanf((*stringReader)(&amp;str), format, a...)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Fscan scans text read from r, storing successive space-separated</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// values into successive arguments. Newlines count as space. It</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// returns the number of items successfully scanned. If that is less</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// than the number of arguments, err will report why.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func Fscan(r io.Reader, a ...any) (n int, err error) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	s, old := newScanState(r, true, false)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	n, err = s.doScan(a)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	s.free(old)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	return
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// Fscanln is similar to Fscan, but stops scanning at a newline and</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// after the final item there must be a newline or EOF.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func Fscanln(r io.Reader, a ...any) (n int, err error) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	s, old := newScanState(r, false, true)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	n, err = s.doScan(a)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	s.free(old)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Fscanf scans text read from r, storing successive space-separated</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// values into successive arguments as determined by the format. It</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// returns the number of items successfully parsed.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// Newlines in the input must match newlines in the format.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func Fscanf(r io.Reader, format string, a ...any) (n int, err error) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	s, old := newScanState(r, false, false)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	n, err = s.doScanf(format, a)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	s.free(old)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// scanError represents an error generated by the scanning software.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// It&#39;s used as a unique signature to identify such errors when recovering.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>type scanError struct {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	err error
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>const eof = -1
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// ss is the internal implementation of ScanState.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>type ss struct {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	rs    io.RuneScanner <span class="comment">// where to read input</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	buf   buffer         <span class="comment">// token accumulator</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	count int            <span class="comment">// runes consumed so far.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	atEOF bool           <span class="comment">// already read EOF</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	ssave
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// ssave holds the parts of ss that need to be</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// saved and restored on recursive scans.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>type ssave struct {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	validSave bool <span class="comment">// is or was a part of an actual ss.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	nlIsEnd   bool <span class="comment">// whether newline terminates scan</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	nlIsSpace bool <span class="comment">// whether newline counts as white space</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	argLimit  int  <span class="comment">// max value of ss.count for this arg; argLimit &lt;= limit</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	limit     int  <span class="comment">// max value of ss.count.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	maxWid    int  <span class="comment">// width of this arg.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// The Read method is only in ScanState so that ScanState</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// satisfies io.Reader. It will never be called when used as</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// intended, so there is no need to make it actually work.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (s *ss) Read(buf []byte) (n int, err error) {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return 0, errors.New(&#34;ScanState&#39;s Read should not be called. Use ReadRune&#34;)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func (s *ss) ReadRune() (r rune, size int, err error) {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if s.atEOF || s.count &gt;= s.argLimit {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		err = io.EOF
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		return
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	r, size, err = s.rs.ReadRune()
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if err == nil {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		s.count++
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if s.nlIsEnd &amp;&amp; r == &#39;\n&#39; {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			s.atEOF = true
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	} else if err == io.EOF {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		s.atEOF = true
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	return
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func (s *ss) Width() (wid int, ok bool) {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if s.maxWid == hugeWid {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return 0, false
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	return s.maxWid, true
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// The public method returns an error; this private one panics.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// If getRune reaches EOF, the return value is EOF (-1).</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (s *ss) getRune() (r rune) {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	r, _, err := s.ReadRune()
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if err != nil {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if err == io.EOF {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return eof
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		s.error(err)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// mustReadRune turns io.EOF into a panic(io.ErrUnexpectedEOF).</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// It is called in cases such as string scanning where an EOF is a</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// syntax error.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>func (s *ss) mustReadRune() (r rune) {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	r = s.getRune()
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if r == eof {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		s.error(io.ErrUnexpectedEOF)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	return
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func (s *ss) UnreadRune() error {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	s.rs.UnreadRune()
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	s.atEOF = false
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	s.count--
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	return nil
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func (s *ss) error(err error) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	panic(scanError{err})
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (s *ss) errorString(err string) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	panic(scanError{errors.New(err)})
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func (s *ss) Token(skipSpace bool, f func(rune) bool) (tok []byte, err error) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	defer func() {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		if e := recover(); e != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			if se, ok := e.(scanError); ok {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>				err = se.err
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			} else {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>				panic(e)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}()
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if f == nil {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		f = notSpace
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	s.buf = s.buf[:0]
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	tok = s.token(skipSpace, f)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// space is a copy of the unicode.White_Space ranges,</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// to avoid depending on package unicode.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>var space = [][2]uint16{
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	{0x0009, 0x000d},
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	{0x0020, 0x0020},
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	{0x0085, 0x0085},
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	{0x00a0, 0x00a0},
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	{0x1680, 0x1680},
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	{0x2000, 0x200a},
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	{0x2028, 0x2029},
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	{0x202f, 0x202f},
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	{0x205f, 0x205f},
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	{0x3000, 0x3000},
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func isSpace(r rune) bool {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if r &gt;= 1&lt;&lt;16 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return false
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	rx := uint16(r)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	for _, rng := range space {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		if rx &lt; rng[0] {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			return false
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		if rx &lt;= rng[1] {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			return true
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	return false
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// notSpace is the default scanning function used in Token.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func notSpace(r rune) bool {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return !isSpace(r)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// readRune is a structure to enable reading UTF-8 encoded code points</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// from an io.Reader. It is used if the Reader given to the scanner does</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// not already implement io.RuneScanner.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>type readRune struct {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	reader   io.Reader
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	buf      [utf8.UTFMax]byte <span class="comment">// used only inside ReadRune</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	pending  int               <span class="comment">// number of bytes in pendBuf; only &gt;0 for bad UTF-8</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	pendBuf  [utf8.UTFMax]byte <span class="comment">// bytes left over</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	peekRune rune              <span class="comment">// if &gt;=0 next rune; when &lt;0 is ^(previous Rune)</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// readByte returns the next byte from the input, which may be</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// left over from a previous read if the UTF-8 was ill-formed.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>func (r *readRune) readByte() (b byte, err error) {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if r.pending &gt; 0 {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		b = r.pendBuf[0]
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		copy(r.pendBuf[0:], r.pendBuf[1:])
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		r.pending--
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		return
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	n, err := io.ReadFull(r.reader, r.pendBuf[:1])
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if n != 1 {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		return 0, err
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return r.pendBuf[0], err
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// ReadRune returns the next UTF-8 encoded code point from the</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// io.Reader inside r.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func (r *readRune) ReadRune() (rr rune, size int, err error) {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if r.peekRune &gt;= 0 {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		rr = r.peekRune
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		r.peekRune = ^r.peekRune
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		size = utf8.RuneLen(rr)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		return
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	r.buf[0], err = r.readByte()
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if err != nil {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		return
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	if r.buf[0] &lt; utf8.RuneSelf { <span class="comment">// fast check for common ASCII case</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		rr = rune(r.buf[0])
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		size = 1 <span class="comment">// Known to be 1.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		<span class="comment">// Flip the bits of the rune so it&#39;s available to UnreadRune.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		r.peekRune = ^rr
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		return
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	var n int
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	for n = 1; !utf8.FullRune(r.buf[:n]); n++ {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		r.buf[n], err = r.readByte()
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		if err != nil {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			if err == io.EOF {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				err = nil
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>				break
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			return
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	rr, size = utf8.DecodeRune(r.buf[:n])
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if size &lt; n { <span class="comment">// an error, save the bytes for the next read</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		copy(r.pendBuf[r.pending:], r.buf[size:n])
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		r.pending += n - size
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// Flip the bits of the rune so it&#39;s available to UnreadRune.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	r.peekRune = ^rr
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>func (r *readRune) UnreadRune() error {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	if r.peekRune &gt;= 0 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		return errors.New(&#34;fmt: scanning called UnreadRune with no rune available&#34;)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	<span class="comment">// Reverse bit flip of previously read rune to obtain valid &gt;=0 state.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	r.peekRune = ^r.peekRune
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	return nil
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>var ssFree = sync.Pool{
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	New: func() any { return new(ss) },
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// newScanState allocates a new ss struct or grab a cached one.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func newScanState(r io.Reader, nlIsSpace, nlIsEnd bool) (s *ss, old ssave) {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	s = ssFree.Get().(*ss)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if rs, ok := r.(io.RuneScanner); ok {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		s.rs = rs
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	} else {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		s.rs = &amp;readRune{reader: r, peekRune: -1}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	s.nlIsSpace = nlIsSpace
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	s.nlIsEnd = nlIsEnd
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	s.atEOF = false
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	s.limit = hugeWid
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	s.argLimit = hugeWid
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	s.maxWid = hugeWid
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	s.validSave = true
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	s.count = 0
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	return
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// free saves used ss structs in ssFree; avoid an allocation per invocation.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func (s *ss) free(old ssave) {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// If it was used recursively, just restore the old state.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	if old.validSave {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		s.ssave = old
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		return
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t hold on to ss structs with large buffers.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if cap(s.buf) &gt; 1024 {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		return
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	s.buf = s.buf[:0]
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	s.rs = nil
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	ssFree.Put(s)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// SkipSpace provides Scan methods the ability to skip space and newline</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// characters in keeping with the current scanning mode set by format strings</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// and Scan/Scanln.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func (s *ss) SkipSpace() {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	for {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		r := s.getRune()
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		if r == eof {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			return
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		if r == &#39;\r&#39; &amp;&amp; s.peek(&#34;\n&#34;) {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			continue
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		if r == &#39;\n&#39; {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			if s.nlIsSpace {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>				continue
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			s.errorString(&#34;unexpected newline&#34;)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			return
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		if !isSpace(r) {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			s.UnreadRune()
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			break
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// token returns the next space-delimited string from the input. It</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// skips white space. For Scanln, it stops at newlines. For Scan,</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// newlines are treated as spaces.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>func (s *ss) token(skipSpace bool, f func(rune) bool) []byte {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	if skipSpace {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		s.SkipSpace()
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	<span class="comment">// read until white space or newline</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	for {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		r := s.getRune()
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		if r == eof {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			break
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		if !f(r) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			s.UnreadRune()
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			break
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		s.buf.writeRune(r)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	return s.buf
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>var errComplex = errors.New(&#34;syntax error scanning complex number&#34;)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>var errBool = errors.New(&#34;syntax error scanning boolean&#34;)
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>func indexRune(s string, r rune) int {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	for i, c := range s {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		if c == r {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			return i
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	return -1
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">// consume reads the next rune in the input and reports whether it is in the ok string.</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// If accept is true, it puts the character into the input token.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>func (s *ss) consume(ok string, accept bool) bool {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	r := s.getRune()
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	if r == eof {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		return false
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	if indexRune(ok, r) &gt;= 0 {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		if accept {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			s.buf.writeRune(r)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return true
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	if r != eof &amp;&amp; accept {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		s.UnreadRune()
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	return false
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">// peek reports whether the next character is in the ok string, without consuming it.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>func (s *ss) peek(ok string) bool {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	r := s.getRune()
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	if r != eof {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		s.UnreadRune()
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	return indexRune(ok, r) &gt;= 0
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>func (s *ss) notEOF() {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	<span class="comment">// Guarantee there is data to be read.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	if r := s.getRune(); r == eof {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		panic(io.EOF)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	s.UnreadRune()
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// accept checks the next rune in the input. If it&#39;s a byte (sic) in the string, it puts it in the</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// buffer and returns true. Otherwise it return false.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>func (s *ss) accept(ok string) bool {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return s.consume(ok, true)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// okVerb verifies that the verb is present in the list, setting s.err appropriately if not.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>func (s *ss) okVerb(verb rune, okVerbs, typ string) bool {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	for _, v := range okVerbs {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		if v == verb {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			return true
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	s.errorString(&#34;bad verb &#39;%&#34; + string(verb) + &#34;&#39; for &#34; + typ)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	return false
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span><span class="comment">// scanBool returns the value of the boolean represented by the next token.</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>func (s *ss) scanBool(verb rune) bool {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	s.notEOF()
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	if !s.okVerb(verb, &#34;tv&#34;, &#34;boolean&#34;) {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		return false
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	<span class="comment">// Syntax-checking a boolean is annoying. We&#39;re not fastidious about case.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	switch s.getRune() {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	case &#39;0&#39;:
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		return false
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	case &#39;1&#39;:
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		return true
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	case &#39;t&#39;, &#39;T&#39;:
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		if s.accept(&#34;rR&#34;) &amp;&amp; (!s.accept(&#34;uU&#34;) || !s.accept(&#34;eE&#34;)) {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			s.error(errBool)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		return true
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	case &#39;f&#39;, &#39;F&#39;:
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		if s.accept(&#34;aA&#34;) &amp;&amp; (!s.accept(&#34;lL&#34;) || !s.accept(&#34;sS&#34;) || !s.accept(&#34;eE&#34;)) {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			s.error(errBool)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return false
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	return false
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// Numerical elements</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>const (
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	binaryDigits      = &#34;01&#34;
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	octalDigits       = &#34;01234567&#34;
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	decimalDigits     = &#34;0123456789&#34;
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	hexadecimalDigits = &#34;0123456789aAbBcCdDeEfF&#34;
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	sign              = &#34;+-&#34;
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	period            = &#34;.&#34;
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	exponent          = &#34;eEpP&#34;
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// getBase returns the numeric base represented by the verb and its digit string.</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>func (s *ss) getBase(verb rune) (base int, digits string) {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	s.okVerb(verb, &#34;bdoUxXv&#34;, &#34;integer&#34;) <span class="comment">// sets s.err</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	base = 10
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	digits = decimalDigits
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	switch verb {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	case &#39;b&#39;:
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		base = 2
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		digits = binaryDigits
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	case &#39;o&#39;:
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		base = 8
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		digits = octalDigits
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	case &#39;x&#39;, &#39;X&#39;, &#39;U&#39;:
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		base = 16
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		digits = hexadecimalDigits
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	return
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// scanNumber returns the numerical string with specified digits starting here.</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>func (s *ss) scanNumber(digits string, haveDigits bool) string {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if !haveDigits {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		s.notEOF()
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		if !s.accept(digits) {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			s.errorString(&#34;expected integer&#34;)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	for s.accept(digits) {
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	return string(s.buf)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// scanRune returns the next rune value in the input.</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>func (s *ss) scanRune(bitSize int) int64 {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	s.notEOF()
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	r := s.getRune()
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	n := uint(bitSize)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	x := (int64(r) &lt;&lt; (64 - n)) &gt;&gt; (64 - n)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if x != int64(r) {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		s.errorString(&#34;overflow on character value &#34; + string(r))
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	return int64(r)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// scanBasePrefix reports whether the integer begins with a base prefix</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// and returns the base, digit string, and whether a zero was found.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// It is called only if the verb is %v.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>func (s *ss) scanBasePrefix() (base int, digits string, zeroFound bool) {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	if !s.peek(&#34;0&#34;) {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		return 0, decimalDigits + &#34;_&#34;, false
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	s.accept(&#34;0&#34;)
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	<span class="comment">// Special cases for 0, 0b, 0o, 0x.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	switch {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	case s.peek(&#34;bB&#34;):
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		s.consume(&#34;bB&#34;, true)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		return 0, binaryDigits + &#34;_&#34;, true
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	case s.peek(&#34;oO&#34;):
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		s.consume(&#34;oO&#34;, true)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		return 0, octalDigits + &#34;_&#34;, true
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	case s.peek(&#34;xX&#34;):
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		s.consume(&#34;xX&#34;, true)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		return 0, hexadecimalDigits + &#34;_&#34;, true
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	default:
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		return 0, octalDigits + &#34;_&#34;, true
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span><span class="comment">// scanInt returns the value of the integer represented by the next</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span><span class="comment">// token, checking for overflow. Any error is stored in s.err.</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>func (s *ss) scanInt(verb rune, bitSize int) int64 {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	if verb == &#39;c&#39; {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		return s.scanRune(bitSize)
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	s.notEOF()
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	base, digits := s.getBase(verb)
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	haveDigits := false
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	if verb == &#39;U&#39; {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		if !s.consume(&#34;U&#34;, false) || !s.consume(&#34;+&#34;, false) {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			s.errorString(&#34;bad unicode format &#34;)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	} else {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		s.accept(sign) <span class="comment">// If there&#39;s a sign, it will be left in the token buffer.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		if verb == &#39;v&#39; {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			base, digits, haveDigits = s.scanBasePrefix()
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	tok := s.scanNumber(digits, haveDigits)
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	i, err := strconv.ParseInt(tok, base, 64)
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	if err != nil {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		s.error(err)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	n := uint(bitSize)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	x := (i &lt;&lt; (64 - n)) &gt;&gt; (64 - n)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	if x != i {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		s.errorString(&#34;integer overflow on token &#34; + tok)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	return i
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// scanUint returns the value of the unsigned integer represented</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// by the next token, checking for overflow. Any error is stored in s.err.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>func (s *ss) scanUint(verb rune, bitSize int) uint64 {
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	if verb == &#39;c&#39; {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		return uint64(s.scanRune(bitSize))
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	s.notEOF()
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	base, digits := s.getBase(verb)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	haveDigits := false
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	if verb == &#39;U&#39; {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		if !s.consume(&#34;U&#34;, false) || !s.consume(&#34;+&#34;, false) {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			s.errorString(&#34;bad unicode format &#34;)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	} else if verb == &#39;v&#39; {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		base, digits, haveDigits = s.scanBasePrefix()
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	tok := s.scanNumber(digits, haveDigits)
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	i, err := strconv.ParseUint(tok, base, 64)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	if err != nil {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		s.error(err)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	n := uint(bitSize)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	x := (i &lt;&lt; (64 - n)) &gt;&gt; (64 - n)
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	if x != i {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		s.errorString(&#34;unsigned integer overflow on token &#34; + tok)
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	return i
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span><span class="comment">// floatToken returns the floating-point number starting here, no longer than swid</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// if the width is specified. It&#39;s not rigorous about syntax because it doesn&#39;t check that</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// we have at least some digits, but Atof will do that.</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>func (s *ss) floatToken() string {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	s.buf = s.buf[:0]
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	<span class="comment">// NaN?</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	if s.accept(&#34;nN&#34;) &amp;&amp; s.accept(&#34;aA&#34;) &amp;&amp; s.accept(&#34;nN&#34;) {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		return string(s.buf)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	<span class="comment">// leading sign?</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	s.accept(sign)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	<span class="comment">// Inf?</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	if s.accept(&#34;iI&#34;) &amp;&amp; s.accept(&#34;nN&#34;) &amp;&amp; s.accept(&#34;fF&#34;) {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		return string(s.buf)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	digits := decimalDigits + &#34;_&#34;
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	exp := exponent
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	if s.accept(&#34;0&#34;) &amp;&amp; s.accept(&#34;xX&#34;) {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		digits = hexadecimalDigits + &#34;_&#34;
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		exp = &#34;pP&#34;
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	<span class="comment">// digits?</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	for s.accept(digits) {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	<span class="comment">// decimal point?</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	if s.accept(period) {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		<span class="comment">// fraction?</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		for s.accept(digits) {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	<span class="comment">// exponent?</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	if s.accept(exp) {
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		<span class="comment">// leading sign?</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		s.accept(sign)
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		<span class="comment">// digits?</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		for s.accept(decimalDigits + &#34;_&#34;) {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	return string(s.buf)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// complexTokens returns the real and imaginary parts of the complex number starting here.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">// The number might be parenthesized and has the format (N+Ni) where N is a floating-point</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// number and there are no spaces within.</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>func (s *ss) complexTokens() (real, imag string) {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	<span class="comment">// TODO: accept N and Ni independently?</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	parens := s.accept(&#34;(&#34;)
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	real = s.floatToken()
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	s.buf = s.buf[:0]
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	<span class="comment">// Must now have a sign.</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	if !s.accept(&#34;+-&#34;) {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		s.error(errComplex)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	<span class="comment">// Sign is now in buffer</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	imagSign := string(s.buf)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	imag = s.floatToken()
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	if !s.accept(&#34;i&#34;) {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		s.error(errComplex)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	if parens &amp;&amp; !s.accept(&#34;)&#34;) {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		s.error(errComplex)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	return real, imagSign + imag
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>func hasX(s string) bool {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		if s[i] == &#39;x&#39; || s[i] == &#39;X&#39; {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>			return true
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		}
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	return false
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span><span class="comment">// convertFloat converts the string to a float64value.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>func (s *ss) convertFloat(str string, n int) float64 {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	<span class="comment">// strconv.ParseFloat will handle &#34;+0x1.fp+2&#34;,</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	<span class="comment">// but we have to implement our non-standard</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	<span class="comment">// decimal+binary exponent mix (1.2p4) ourselves.</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	if p := indexRune(str, &#39;p&#39;); p &gt;= 0 &amp;&amp; !hasX(str) {
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		<span class="comment">// Atof doesn&#39;t handle power-of-2 exponents,</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		<span class="comment">// but they&#39;re easy to evaluate.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		f, err := strconv.ParseFloat(str[:p], n)
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		if err != nil {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			<span class="comment">// Put full string into error.</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			if e, ok := err.(*strconv.NumError); ok {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>				e.Num = str
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			s.error(err)
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		m, err := strconv.Atoi(str[p+1:])
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		if err != nil {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			<span class="comment">// Put full string into error.</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			if e, ok := err.(*strconv.NumError); ok {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				e.Num = str
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>			}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			s.error(err)
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		return math.Ldexp(f, m)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	f, err := strconv.ParseFloat(str, n)
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	if err != nil {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		s.error(err)
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	return f
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span><span class="comment">// scanComplex converts the next token to a complex128 value.</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// The atof argument is a type-specific reader for the underlying type.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// If we&#39;re reading complex64, atof will parse float32s and convert them</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">// to float64&#39;s to avoid reproducing this code for each complex type.</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func (s *ss) scanComplex(verb rune, n int) complex128 {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if !s.okVerb(verb, floatVerbs, &#34;complex&#34;) {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		return 0
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	s.notEOF()
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	sreal, simag := s.complexTokens()
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	real := s.convertFloat(sreal, n/2)
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	imag := s.convertFloat(simag, n/2)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	return complex(real, imag)
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>}
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// convertString returns the string represented by the next input characters.</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span><span class="comment">// The format of the input is determined by the verb.</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>func (s *ss) convertString(verb rune) (str string) {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	if !s.okVerb(verb, &#34;svqxX&#34;, &#34;string&#34;) {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	s.notEOF()
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	switch verb {
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	case &#39;q&#39;:
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		str = s.quotedString()
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	case &#39;x&#39;, &#39;X&#39;:
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		str = s.hexString()
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	default:
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		str = string(s.token(true, notSpace)) <span class="comment">// %s and %v just return the next word</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	}
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	return
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span><span class="comment">// quotedString returns the double- or back-quoted string represented by the next input characters.</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>func (s *ss) quotedString() string {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	s.notEOF()
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	quote := s.getRune()
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	switch quote {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	case &#39;`&#39;:
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		<span class="comment">// Back-quoted: Anything goes until EOF or back quote.</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		for {
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>			r := s.mustReadRune()
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>			if r == quote {
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>				break
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>			}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			s.buf.writeRune(r)
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		return string(s.buf)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	case &#39;&#34;&#39;:
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		<span class="comment">// Double-quoted: Include the quotes and let strconv.Unquote do the backslash escapes.</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		s.buf.writeByte(&#39;&#34;&#39;)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>		for {
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>			r := s.mustReadRune()
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>			s.buf.writeRune(r)
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>			if r == &#39;\\&#39; {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>				<span class="comment">// In a legal backslash escape, no matter how long, only the character</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>				<span class="comment">// immediately after the escape can itself be a backslash or quote.</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>				<span class="comment">// Thus we only need to protect the first character after the backslash.</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>				s.buf.writeRune(s.mustReadRune())
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>			} else if r == &#39;&#34;&#39; {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>				break
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		result, err := strconv.Unquote(string(s.buf))
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		if err != nil {
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>			s.error(err)
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>		}
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		return result
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	default:
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>		s.errorString(&#34;expected quoted string&#34;)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>}
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">// hexDigit returns the value of the hexadecimal digit.</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>func hexDigit(d rune) (int, bool) {
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	digit := int(d)
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	switch digit {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	case &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;:
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		return digit - &#39;0&#39;, true
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	case &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;:
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		return 10 + digit - &#39;a&#39;, true
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	case &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;:
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		return 10 + digit - &#39;A&#39;, true
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	}
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	return -1, false
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span><span class="comment">// hexByte returns the next hex-encoded (two-character) byte from the input.</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span><span class="comment">// It returns ok==false if the next bytes in the input do not encode a hex byte.</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// If the first byte is hex and the second is not, processing stops.</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>func (s *ss) hexByte() (b byte, ok bool) {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	rune1 := s.getRune()
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	if rune1 == eof {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		return
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	value1, ok := hexDigit(rune1)
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	if !ok {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		s.UnreadRune()
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		return
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	}
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	value2, ok := hexDigit(s.mustReadRune())
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	if !ok {
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		s.errorString(&#34;illegal hex digit&#34;)
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		return
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	return byte(value1&lt;&lt;4 | value2), true
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span><span class="comment">// hexString returns the space-delimited hexpair-encoded string.</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>func (s *ss) hexString() string {
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	s.notEOF()
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	for {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		b, ok := s.hexByte()
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>		if !ok {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>			break
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		s.buf.writeByte(b)
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	}
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	if len(s.buf) == 0 {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		s.errorString(&#34;no hex data for %x string&#34;)
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	return string(s.buf)
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>const (
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	floatVerbs = &#34;beEfFgGv&#34;
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	hugeWid = 1 &lt;&lt; 30
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	intBits     = 32 &lt;&lt; (^uint(0) &gt;&gt; 63)
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	uintptrBits = 32 &lt;&lt; (^uintptr(0) &gt;&gt; 63)
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>)
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span><span class="comment">// scanPercent scans a literal percent character.</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>func (s *ss) scanPercent() {
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	s.notEOF()
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	if !s.accept(&#34;%&#34;) {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		s.errorString(&#34;missing literal %&#34;)
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	}
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span><span class="comment">// scanOne scans a single value, deriving the scanner from the type of the argument.</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>func (s *ss) scanOne(verb rune, arg any) {
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	s.buf = s.buf[:0]
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	var err error
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	<span class="comment">// If the parameter has its own Scan method, use that.</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	if v, ok := arg.(Scanner); ok {
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		err = v.Scan(s, verb)
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		if err != nil {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			if err == io.EOF {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>				err = io.ErrUnexpectedEOF
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>			}
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			s.error(err)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		return
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	}
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	switch v := arg.(type) {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>	case *bool:
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>		*v = s.scanBool(verb)
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	case *complex64:
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		*v = complex64(s.scanComplex(verb, 64))
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	case *complex128:
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		*v = s.scanComplex(verb, 128)
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	case *int:
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		*v = int(s.scanInt(verb, intBits))
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	case *int8:
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		*v = int8(s.scanInt(verb, 8))
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	case *int16:
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		*v = int16(s.scanInt(verb, 16))
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	case *int32:
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>		*v = int32(s.scanInt(verb, 32))
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	case *int64:
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		*v = s.scanInt(verb, 64)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	case *uint:
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		*v = uint(s.scanUint(verb, intBits))
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	case *uint8:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		*v = uint8(s.scanUint(verb, 8))
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	case *uint16:
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		*v = uint16(s.scanUint(verb, 16))
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	case *uint32:
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		*v = uint32(s.scanUint(verb, 32))
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	case *uint64:
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		*v = s.scanUint(verb, 64)
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	case *uintptr:
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		*v = uintptr(s.scanUint(verb, uintptrBits))
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	<span class="comment">// Floats are tricky because you want to scan in the precision of the result, not</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	<span class="comment">// scan in high precision and convert, in order to preserve the correct error condition.</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	case *float32:
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		if s.okVerb(verb, floatVerbs, &#34;float32&#34;) {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>			s.SkipSpace()
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>			s.notEOF()
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>			*v = float32(s.convertFloat(s.floatToken(), 32))
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		}
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	case *float64:
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		if s.okVerb(verb, floatVerbs, &#34;float64&#34;) {
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			s.SkipSpace()
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>			s.notEOF()
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>			*v = s.convertFloat(s.floatToken(), 64)
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		}
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	case *string:
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		*v = s.convertString(verb)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	case *[]byte:
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		<span class="comment">// We scan to string and convert so we get a copy of the data.</span>
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		<span class="comment">// If we scanned to bytes, the slice would point at the buffer.</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>		*v = []byte(s.convertString(verb))
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	default:
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		val := reflect.ValueOf(v)
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		ptr := val
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		if ptr.Kind() != reflect.Pointer {
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>			s.errorString(&#34;type not a pointer: &#34; + val.Type().String())
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>			return
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		}
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		switch v := ptr.Elem(); v.Kind() {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		case reflect.Bool:
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>			v.SetBool(s.scanBool(verb))
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>			v.SetInt(s.scanInt(verb, v.Type().Bits()))
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>			v.SetUint(s.scanUint(verb, v.Type().Bits()))
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		case reflect.String:
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>			v.SetString(s.convertString(verb))
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		case reflect.Slice:
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>			<span class="comment">// For now, can only handle (renamed) []byte.</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>			typ := v.Type()
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>			if typ.Elem().Kind() != reflect.Uint8 {
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>				s.errorString(&#34;can&#39;t scan type: &#34; + val.Type().String())
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>			}
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>			str := s.convertString(verb)
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>			v.Set(reflect.MakeSlice(typ, len(str), len(str)))
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>			for i := 0; i &lt; len(str); i++ {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>				v.Index(i).SetUint(uint64(str[i]))
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>			}
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		case reflect.Float32, reflect.Float64:
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>			s.SkipSpace()
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>			s.notEOF()
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>			v.SetFloat(s.convertFloat(s.floatToken(), v.Type().Bits()))
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>		case reflect.Complex64, reflect.Complex128:
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>			v.SetComplex(s.scanComplex(verb, v.Type().Bits()))
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>		default:
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>			s.errorString(&#34;can&#39;t scan type: &#34; + val.Type().String())
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>		}
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>}
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span><span class="comment">// errorHandler turns local panics into error returns.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>func errorHandler(errp *error) {
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	if e := recover(); e != nil {
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		if se, ok := e.(scanError); ok { <span class="comment">// catch local error</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>			*errp = se.err
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		} else if eof, ok := e.(error); ok &amp;&amp; eof == io.EOF { <span class="comment">// out of input</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>			*errp = eof
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		} else {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>			panic(e)
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	}
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span><span class="comment">// doScan does the real work for scanning without a format string.</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>func (s *ss) doScan(a []any) (numProcessed int, err error) {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	defer errorHandler(&amp;err)
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	for _, arg := range a {
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		s.scanOne(&#39;v&#39;, arg)
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		numProcessed++
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	<span class="comment">// Check for newline (or EOF) if required (Scanln etc.).</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	if s.nlIsEnd {
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		for {
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>			r := s.getRune()
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>			if r == &#39;\n&#39; || r == eof {
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>				break
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>			}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			if !isSpace(r) {
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>				s.errorString(&#34;expected newline&#34;)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>				break
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>			}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>		}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	return
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>}
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span><span class="comment">// advance determines whether the next characters in the input match</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span><span class="comment">// those of the format. It returns the number of bytes (sic) consumed</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span><span class="comment">// in the format. All runs of space characters in either input or</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span><span class="comment">// format behave as a single space. Newlines are special, though:</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span><span class="comment">// newlines in the format must match those in the input and vice versa.</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span><span class="comment">// This routine also handles the %% case. If the return value is zero,</span>
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span><span class="comment">// either format starts with a % (with no following %) or the input</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span><span class="comment">// is empty. If it is negative, the input did not match the string.</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>func (s *ss) advance(format string) (i int) {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	for i &lt; len(format) {
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>		fmtc, w := utf8.DecodeRuneInString(format[i:])
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>		<span class="comment">// Space processing.</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		<span class="comment">// In the rest of this comment &#34;space&#34; means spaces other than newline.</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		<span class="comment">// Newline in the format matches input of zero or more spaces and then newline or end-of-input.</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		<span class="comment">// Spaces in the format before the newline are collapsed into the newline.</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		<span class="comment">// Spaces in the format after the newline match zero or more spaces after the corresponding input newline.</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>		<span class="comment">// Other spaces in the format match input of one or more spaces or end-of-input.</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		if isSpace(fmtc) {
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>			newlines := 0
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>			trailingSpace := false
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>			for isSpace(fmtc) &amp;&amp; i &lt; len(format) {
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>				if fmtc == &#39;\n&#39; {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>					newlines++
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>					trailingSpace = false
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>				} else {
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>					trailingSpace = true
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>				}
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>				i += w
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>				fmtc, w = utf8.DecodeRuneInString(format[i:])
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>			}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>			for j := 0; j &lt; newlines; j++ {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>				inputc := s.getRune()
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>				for isSpace(inputc) &amp;&amp; inputc != &#39;\n&#39; {
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>					inputc = s.getRune()
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>				}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>				if inputc != &#39;\n&#39; &amp;&amp; inputc != eof {
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>					s.errorString(&#34;newline in format does not match input&#34;)
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>				}
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>			}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>			if trailingSpace {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>				inputc := s.getRune()
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>				if newlines == 0 {
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>					<span class="comment">// If the trailing space stood alone (did not follow a newline),</span>
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>					<span class="comment">// it must find at least one space to consume.</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>					if !isSpace(inputc) &amp;&amp; inputc != eof {
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>						s.errorString(&#34;expected space in input to match format&#34;)
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>					}
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>					if inputc == &#39;\n&#39; {
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>						s.errorString(&#34;newline in input does not match format&#34;)
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>					}
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>				}
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>				for isSpace(inputc) &amp;&amp; inputc != &#39;\n&#39; {
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>					inputc = s.getRune()
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>				}
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>				if inputc != eof {
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>					s.UnreadRune()
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>				}
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>			}
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>			continue
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		}
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>		<span class="comment">// Verbs.</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>		if fmtc == &#39;%&#39; {
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>			<span class="comment">// % at end of string is an error.</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>			if i+w == len(format) {
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>				s.errorString(&#34;missing verb: % at end of format string&#34;)
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>			}
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>			<span class="comment">// %% acts like a real percent</span>
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>			nextc, _ := utf8.DecodeRuneInString(format[i+w:]) <span class="comment">// will not match % if string is empty</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>			if nextc != &#39;%&#39; {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>				return
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			}
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>			i += w <span class="comment">// skip the first %</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>		}
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		<span class="comment">// Literals.</span>
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>		inputc := s.mustReadRune()
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		if fmtc != inputc {
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>			s.UnreadRune()
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>			return -1
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		i += w
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>	}
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	return
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span><span class="comment">// doScanf does the real work when scanning with a format string.</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span><span class="comment">// At the moment, it handles only pointers to basic types.</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>func (s *ss) doScanf(format string, a []any) (numProcessed int, err error) {
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	defer errorHandler(&amp;err)
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>	end := len(format) - 1
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	<span class="comment">// We process one item per non-trivial format</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>	for i := 0; i &lt;= end; {
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		w := s.advance(format[i:])
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		if w &gt; 0 {
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>			i += w
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>			continue
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		}
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		<span class="comment">// Either we failed to advance, we have a percent character, or we ran out of input.</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		if format[i] != &#39;%&#39; {
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>			<span class="comment">// Can&#39;t advance format. Why not?</span>
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>			if w &lt; 0 {
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>				s.errorString(&#34;input does not match format&#34;)
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>			<span class="comment">// Otherwise at EOF; &#34;too many operands&#34; error handled below</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>			break
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		}
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>		i++ <span class="comment">// % is one byte</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		<span class="comment">// do we have 20 (width)?</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>		var widPresent bool
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>		s.maxWid, widPresent, i = parsenum(format, i, end)
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		if !widPresent {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>			s.maxWid = hugeWid
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		c, w := utf8.DecodeRuneInString(format[i:])
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		i += w
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>		if c != &#39;c&#39; {
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>			s.SkipSpace()
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		}
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>		if c == &#39;%&#39; {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>			s.scanPercent()
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>			continue <span class="comment">// Do not consume an argument.</span>
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		s.argLimit = s.limit
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>		if f := s.count + s.maxWid; f &lt; s.argLimit {
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>			s.argLimit = f
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>		}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>		if numProcessed &gt;= len(a) { <span class="comment">// out of operands</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>			s.errorString(&#34;too few operands for format &#39;%&#34; + format[i-w:] + &#34;&#39;&#34;)
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>			break
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		}
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		arg := a[numProcessed]
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		s.scanOne(c, arg)
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>		numProcessed++
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>		s.argLimit = s.limit
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>	}
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	if numProcessed &lt; len(a) {
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>		s.errorString(&#34;too many operands&#34;)
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	}
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>	return
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>}
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>
</pre><p><a href="scan.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
