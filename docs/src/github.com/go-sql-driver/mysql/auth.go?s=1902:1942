<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/github.com/go-sql-driver/mysql/auth.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./auth.go?s=1902:1942#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/github.com">github.com</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver">go-sql-driver</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver/mysql">mysql</a>/<span class="text-muted">auth.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/github.com/go-sql-driver/mysql">github.com/go-sql-driver/mysql</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Go MySQL Driver - A MySQL-Driver for Go&#39;s database/sql package</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2018 The Go-MySQL-Driver Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This Source Code Form is subject to the terms of the Mozilla Public</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// License, v. 2.0. If a copy of the MPL was not distributed with this file,</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// You can obtain one at http://mozilla.org/MPL/2.0/.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package mysql
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;crypto/rand&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;crypto/rsa&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;crypto/sha1&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;crypto/sha256&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;crypto/sha512&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;crypto/x509&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;encoding/pem&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;filippo.io/edwards25519&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// server pub keys registry</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>var (
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	serverPubKeyLock     sync.RWMutex
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	serverPubKeyRegistry map[string]*rsa.PublicKey
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// RegisterServerPubKey registers a server RSA public key which can be used to</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// send data in a secure manner to the server without receiving the public key</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// in a potentially insecure way from the server first.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Registered keys can afterwards be used adding serverPubKey=&lt;name&gt; to the DSN.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Note: The provided rsa.PublicKey instance is exclusively owned by the driver</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// after registering it and may not be modified.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//	data, err := os.ReadFile(&#34;mykey.pem&#34;)</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//	block, _ := pem.Decode(data)</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	if block == nil || block.Type != &#34;PUBLIC KEY&#34; {</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(&#34;failed to decode PEM block containing public key&#34;)</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//	pub, err := x509.ParsePKIXPublicKey(block.Bytes)</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//	if rsaPubKey, ok := pub.(*rsa.PublicKey); ok {</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//		mysql.RegisterServerPubKey(&#34;mykey&#34;, rsaPubKey)</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//	} else {</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(&#34;not a RSA public key&#34;)</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func RegisterServerPubKey(name string, pubKey *rsa.PublicKey) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	serverPubKeyLock.Lock()
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	if serverPubKeyRegistry == nil {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		serverPubKeyRegistry = make(map[string]*rsa.PublicKey)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	serverPubKeyRegistry[name] = pubKey
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	serverPubKeyLock.Unlock()
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// DeregisterServerPubKey removes the public key registered with the given name.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="selection">func DeregisterServerPubKey(name string)</span> {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	serverPubKeyLock.Lock()
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	if serverPubKeyRegistry != nil {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		delete(serverPubKeyRegistry, name)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	serverPubKeyLock.Unlock()
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func getServerPubKey(name string) (pubKey *rsa.PublicKey) {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	serverPubKeyLock.RLock()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	if v, ok := serverPubKeyRegistry[name]; ok {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		pubKey = v
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	serverPubKeyLock.RUnlock()
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	return
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// Hash password using pre 4.1 (old password) method</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// https://github.com/atcurtis/mariadb/blob/master/mysys/my_rnd.c</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>type myRnd struct {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	seed1, seed2 uint32
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>const myRndMaxVal = 0x3FFFFFFF
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Pseudo random number generator</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func newMyRnd(seed1, seed2 uint32) *myRnd {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return &amp;myRnd{
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		seed1: seed1 % myRndMaxVal,
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		seed2: seed2 % myRndMaxVal,
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Tested to be equivalent to MariaDB&#39;s floating point variant</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// http://play.golang.org/p/QHvhd4qved</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// http://play.golang.org/p/RG0q4ElWDx</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (r *myRnd) NextByte() byte {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	r.seed1 = (r.seed1*3 + r.seed2) % myRndMaxVal
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	r.seed2 = (r.seed1 + r.seed2 + 33) % myRndMaxVal
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	return byte(uint64(r.seed1) * 31 / myRndMaxVal)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Generate binary hash from byte string using insecure pre 4.1 method</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>func pwHash(password []byte) (result [2]uint32) {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	var add uint32 = 7
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	var tmp uint32
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	result[0] = 1345345333
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	result[1] = 0x12345671
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	for _, c := range password {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		<span class="comment">// skip spaces and tabs in password</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		if c == &#39; &#39; || c == &#39;\t&#39; {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			continue
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		tmp = uint32(c)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		result[0] ^= (((result[0] &amp; 63) + add) * tmp) + (result[0] &lt;&lt; 8)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		result[1] += (result[1] &lt;&lt; 8) ^ result[0]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		add += tmp
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Remove sign bit (1&lt;&lt;31)-1)</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	result[0] &amp;= 0x7FFFFFFF
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	result[1] &amp;= 0x7FFFFFFF
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	return
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// Hash password using insecure pre 4.1 method</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func scrambleOldPassword(scramble []byte, password string) []byte {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	scramble = scramble[:8]
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	hashPw := pwHash([]byte(password))
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	hashSc := pwHash(scramble)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	r := newMyRnd(hashPw[0]^hashSc[0], hashPw[1]^hashSc[1])
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	var out [8]byte
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	for i := range out {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		out[i] = r.NextByte() + 64
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	mask := r.NextByte()
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	for i := range out {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		out[i] ^= mask
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	return out[:]
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// Hash password using 4.1+ method (SHA1)</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func scramblePassword(scramble []byte, password string) []byte {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if len(password) == 0 {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return nil
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// stage1Hash = SHA1(password)</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	crypt := sha1.New()
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	crypt.Write([]byte(password))
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	stage1 := crypt.Sum(nil)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// scrambleHash = SHA1(scramble + SHA1(stage1Hash))</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// inner Hash</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	crypt.Reset()
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	crypt.Write(stage1)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	hash := crypt.Sum(nil)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// outer Hash</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	crypt.Reset()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	crypt.Write(scramble)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	crypt.Write(hash)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	scramble = crypt.Sum(nil)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// token = scrambleHash XOR stage1Hash</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	for i := range scramble {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		scramble[i] ^= stage1[i]
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return scramble
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// Hash password using MySQL 8+ method (SHA256)</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func scrambleSHA256Password(scramble []byte, password string) []byte {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if len(password) == 0 {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return nil
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// XOR(SHA256(password), SHA256(SHA256(SHA256(password)), scramble))</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	crypt := sha256.New()
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	crypt.Write([]byte(password))
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	message1 := crypt.Sum(nil)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	crypt.Reset()
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	crypt.Write(message1)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	message1Hash := crypt.Sum(nil)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	crypt.Reset()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	crypt.Write(message1Hash)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	crypt.Write(scramble)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	message2 := crypt.Sum(nil)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	for i := range message1 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		message1[i] ^= message2[i]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return message1
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>func encryptPassword(password string, seed []byte, pub *rsa.PublicKey) ([]byte, error) {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	plain := make([]byte, len(password)+1)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	copy(plain, password)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	for i := range plain {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		j := i % len(seed)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		plain[i] ^= seed[j]
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	sha1 := sha1.New()
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return rsa.EncryptOAEP(sha1, rand.Reader, pub, plain, nil)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// authEd25519 does ed25519 authentication used by MariaDB.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func authEd25519(scramble []byte, password string) ([]byte, error) {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// Derived from https://github.com/MariaDB/server/blob/d8e6bb00888b1f82c031938f4c8ac5d97f6874c3/plugin/auth_ed25519/ref10/sign.c</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// Code style is from https://cs.opensource.google/go/go/+/refs/tags/go1.21.5:src/crypto/ed25519/ed25519.go;l=207</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	h := sha512.Sum512([]byte(password))
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	s, err := edwards25519.NewScalar().SetBytesWithClamping(h[:32])
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if err != nil {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		return nil, err
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	A := (&amp;edwards25519.Point{}).ScalarBaseMult(s)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	mh := sha512.New()
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	mh.Write(h[32:])
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	mh.Write(scramble)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	messageDigest := mh.Sum(nil)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	r, err := edwards25519.NewScalar().SetUniformBytes(messageDigest)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if err != nil {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return nil, err
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	R := (&amp;edwards25519.Point{}).ScalarBaseMult(r)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	kh := sha512.New()
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	kh.Write(R.Bytes())
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	kh.Write(A.Bytes())
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	kh.Write(scramble)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	hramDigest := kh.Sum(nil)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	k, err := edwards25519.NewScalar().SetUniformBytes(hramDigest)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if err != nil {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		return nil, err
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	S := k.MultiplyAdd(k, s, r)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	return append(R.Bytes(), S.Bytes()...), nil
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (mc *mysqlConn) sendEncryptedPassword(seed []byte, pub *rsa.PublicKey) error {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	enc, err := encryptPassword(mc.cfg.Passwd, seed, pub)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if err != nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return err
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return mc.writeAuthSwitchPacket(enc)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func (mc *mysqlConn) auth(authData []byte, plugin string) ([]byte, error) {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	switch plugin {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	case &#34;caching_sha2_password&#34;:
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		authResp := scrambleSHA256Password(authData, mc.cfg.Passwd)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return authResp, nil
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	case &#34;mysql_old_password&#34;:
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		if !mc.cfg.AllowOldPasswords {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			return nil, ErrOldPassword
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if len(mc.cfg.Passwd) == 0 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			return nil, nil
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// Note: there are edge cases where this should work but doesn&#39;t;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		<span class="comment">// this is currently &#34;wontfix&#34;:</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		<span class="comment">// https://github.com/go-sql-driver/mysql/issues/184</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		authResp := append(scrambleOldPassword(authData[:8], mc.cfg.Passwd), 0)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		return authResp, nil
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	case &#34;mysql_clear_password&#34;:
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		if !mc.cfg.AllowCleartextPasswords {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			return nil, ErrCleartextPassword
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// http://dev.mysql.com/doc/refman/5.7/en/cleartext-authentication-plugin.html</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		<span class="comment">// http://dev.mysql.com/doc/refman/5.7/en/pam-authentication-plugin.html</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		return append([]byte(mc.cfg.Passwd), 0), nil
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	case &#34;mysql_native_password&#34;:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		if !mc.cfg.AllowNativePasswords {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			return nil, ErrNativePassword
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		<span class="comment">// https://dev.mysql.com/doc/internals/en/secure-password-authentication.html</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		<span class="comment">// Native password authentication only need and will need 20-byte challenge.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		authResp := scramblePassword(authData[:20], mc.cfg.Passwd)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		return authResp, nil
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	case &#34;sha256_password&#34;:
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		if len(mc.cfg.Passwd) == 0 {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			return []byte{0}, nil
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// unlike caching_sha2_password, sha256_password does not accept</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		<span class="comment">// cleartext password on unix transport.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		if mc.cfg.TLS != nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			<span class="comment">// write cleartext auth packet</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			return append([]byte(mc.cfg.Passwd), 0), nil
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		pubKey := mc.cfg.pubKey
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		if pubKey == nil {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			<span class="comment">// request public key from server</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			return []byte{1}, nil
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// encrypted password</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		enc, err := encryptPassword(mc.cfg.Passwd, authData, pubKey)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return enc, err
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	case &#34;client_ed25519&#34;:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		if len(authData) != 32 {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			return nil, ErrMalformPkt
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		return authEd25519(authData, mc.cfg.Passwd)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	default:
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		mc.log(&#34;unknown auth plugin:&#34;, plugin)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		return nil, ErrUnknownPlugin
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>func (mc *mysqlConn) handleAuthResult(oldAuthData []byte, plugin string) error {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// Read Result Packet</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	authData, newPlugin, err := mc.readAuthResult()
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	if err != nil {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		return err
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">// handle auth plugin switch, if requested</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	if newPlugin != &#34;&#34; {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		<span class="comment">// If CLIENT_PLUGIN_AUTH capability is not supported, no new cipher is</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		<span class="comment">// sent and we have to keep using the cipher sent in the init packet.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if authData == nil {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			authData = oldAuthData
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		} else {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			<span class="comment">// copy data from read buffer to owned slice</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			copy(oldAuthData, authData)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		plugin = newPlugin
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		authResp, err := mc.auth(authData, plugin)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		if err != nil {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			return err
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if err = mc.writeAuthSwitchPacket(authResp); err != nil {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			return err
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		<span class="comment">// Read Result Packet</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		authData, newPlugin, err = mc.readAuthResult()
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		if err != nil {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			return err
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		<span class="comment">// Do not allow to change the auth plugin more than once</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		if newPlugin != &#34;&#34; {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			return ErrMalformPkt
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	switch plugin {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	<span class="comment">// https://dev.mysql.com/blog-archive/preparing-your-community-connector-for-mysql-8-part-2-sha256/</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	case &#34;caching_sha2_password&#34;:
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		switch len(authData) {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		case 0:
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			return nil <span class="comment">// auth successful</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		case 1:
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			switch authData[0] {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			case cachingSha2PasswordFastAuthSuccess:
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>				if err = mc.resultUnchanged().readResultOK(); err == nil {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>					return nil <span class="comment">// auth successful</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			case cachingSha2PasswordPerformFullAuthentication:
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				if mc.cfg.TLS != nil || mc.cfg.Net == &#34;unix&#34; {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>					<span class="comment">// write cleartext auth packet</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>					err = mc.writeAuthSwitchPacket(append([]byte(mc.cfg.Passwd), 0))
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>					if err != nil {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>						return err
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>					}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				} else {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>					pubKey := mc.cfg.pubKey
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					if pubKey == nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>						<span class="comment">// request public key from server</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>						data, err := mc.buf.takeSmallBuffer(4 + 1)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>						if err != nil {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>							return err
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>						}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>						data[4] = cachingSha2PasswordRequestPublicKey
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>						err = mc.writePacket(data)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>						if err != nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>							return err
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>						}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>						if data, err = mc.readPacket(); err != nil {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>							return err
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>						}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>						if data[0] != iAuthMoreData {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>							return fmt.Errorf(&#34;unexpected resp from server for caching_sha2_password, perform full authentication&#34;)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>						}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>						<span class="comment">// parse public key</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>						block, rest := pem.Decode(data[1:])
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>						if block == nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>							return fmt.Errorf(&#34;no pem data found, data: %s&#34;, rest)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>						}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>						pkix, err := x509.ParsePKIXPublicKey(block.Bytes)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>						if err != nil {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>							return err
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>						}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>						pubKey = pkix.(*rsa.PublicKey)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>					}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>					<span class="comment">// send encrypted password</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					err = mc.sendEncryptedPassword(oldAuthData, pubKey)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>					if err != nil {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>						return err
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>					}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>				return mc.resultUnchanged().readResultOK()
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			default:
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>				return ErrMalformPkt
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		default:
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			return ErrMalformPkt
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	case &#34;sha256_password&#34;:
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		switch len(authData) {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		case 0:
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			return nil <span class="comment">// auth successful</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		default:
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			block, _ := pem.Decode(authData)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			if block == nil {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;no Pem data found, data: %s&#34;, authData)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			pub, err := x509.ParsePKIXPublicKey(block.Bytes)
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			if err != nil {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				return err
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			<span class="comment">// send encrypted password</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			err = mc.sendEncryptedPassword(oldAuthData, pub.(*rsa.PublicKey))
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			if err != nil {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>				return err
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			return mc.resultUnchanged().readResultOK()
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	default:
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		return nil <span class="comment">// auth successful</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	return err
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
</pre><p><a href="auth.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
