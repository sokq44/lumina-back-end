<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/github.com/go-sql-driver/mysql/dsn.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./dsn.go?s=1144:3739#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/github.com">github.com</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver">go-sql-driver</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver/mysql">mysql</a>/<span class="text-muted">dsn.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/github.com/go-sql-driver/mysql">github.com/go-sql-driver/mysql</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Go MySQL Driver - A MySQL-Driver for Go&#39;s database/sql package</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 The Go-MySQL-Driver Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This Source Code Form is subject to the terms of the Mozilla Public</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// License, v. 2.0. If a copy of the MPL was not distributed with this file,</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// You can obtain one at http://mozilla.org/MPL/2.0/.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package mysql
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;crypto/rsa&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>var (
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	errInvalidDSNUnescaped       = errors.New(&#34;invalid DSN: did you forget to escape a param value?&#34;)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	errInvalidDSNAddr            = errors.New(&#34;invalid DSN: network address not terminated (missing closing brace)&#34;)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	errInvalidDSNNoSlash         = errors.New(&#34;invalid DSN: missing the slash separating the database name&#34;)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	errInvalidDSNUnsafeCollation = errors.New(&#34;invalid DSN: interpolateParams can not be used with unsafe collations&#34;)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Config is a configuration parsed from a DSN string.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// If a new Config is created instead of being parsed from a DSN string,</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// the NewConfig function should be used, which sets default values.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="selection">type Config struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	</span><span class="selection-comment">// non boolean fields</span><span class="selection">
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	User                 string            </span><span class="selection-comment">// Username</span><span class="selection">
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	Passwd               string            </span><span class="selection-comment">// Password (requires User)</span><span class="selection">
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	Net                  string            </span><span class="selection-comment">// Network (e.g. &#34;tcp&#34;, &#34;tcp6&#34;, &#34;unix&#34;. default: &#34;tcp&#34;)</span><span class="selection">
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	Addr                 string            </span><span class="selection-comment">// Address (default: &#34;127.0.0.1:3306&#34; for &#34;tcp&#34; and &#34;/tmp/mysql.sock&#34; for &#34;unix&#34;)</span><span class="selection">
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	DBName               string            </span><span class="selection-comment">// Database name</span><span class="selection">
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	Params               map[string]string </span><span class="selection-comment">// Connection parameters</span><span class="selection">
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	ConnectionAttributes string            </span><span class="selection-comment">// Connection Attributes, comma-delimited string of user-defined &#34;key:value&#34; pairs</span><span class="selection">
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Collation            string            </span><span class="selection-comment">// Connection collation</span><span class="selection">
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Loc                  *time.Location    </span><span class="selection-comment">// Location for time.Time values</span><span class="selection">
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	MaxAllowedPacket     int               </span><span class="selection-comment">// Max packet size allowed</span><span class="selection">
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	ServerPubKey         string            </span><span class="selection-comment">// Server public key name</span><span class="selection">
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	TLSConfig            string            </span><span class="selection-comment">// TLS configuration name</span><span class="selection">
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	TLS                  *tls.Config       </span><span class="selection-comment">// TLS configuration, its priority is higher than TLSConfig</span><span class="selection">
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	Timeout              time.Duration     </span><span class="selection-comment">// Dial timeout</span><span class="selection">
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	ReadTimeout          time.Duration     </span><span class="selection-comment">// I/O read timeout</span><span class="selection">
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	WriteTimeout         time.Duration     </span><span class="selection-comment">// I/O write timeout</span><span class="selection">
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Logger               Logger            </span><span class="selection-comment">// Logger</span><span class="selection">
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	</span><span class="selection-comment">// boolean fields</span><span class="selection">
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	AllowAllFiles            bool </span><span class="selection-comment">// Allow all files to be used with LOAD DATA LOCAL INFILE</span><span class="selection">
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	AllowCleartextPasswords  bool </span><span class="selection-comment">// Allows the cleartext client side plugin</span><span class="selection">
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	AllowFallbackToPlaintext bool </span><span class="selection-comment">// Allows fallback to unencrypted connection if server does not support TLS</span><span class="selection">
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	AllowNativePasswords     bool </span><span class="selection-comment">// Allows the native password authentication method</span><span class="selection">
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	AllowOldPasswords        bool </span><span class="selection-comment">// Allows the old insecure password method</span><span class="selection">
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	CheckConnLiveness        bool </span><span class="selection-comment">// Check connections for liveness before using them</span><span class="selection">
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	ClientFoundRows          bool </span><span class="selection-comment">// Return number of matching rows instead of rows changed</span><span class="selection">
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	ColumnsWithAlias         bool </span><span class="selection-comment">// Prepend table alias to column names</span><span class="selection">
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	InterpolateParams        bool </span><span class="selection-comment">// Interpolate placeholders into query string</span><span class="selection">
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	MultiStatements          bool </span><span class="selection-comment">// Allow multiple statements in one query</span><span class="selection">
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	ParseTime                bool </span><span class="selection-comment">// Parse time values to time.Time</span><span class="selection">
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	RejectReadOnly           bool </span><span class="selection-comment">// Reject read-only connections</span><span class="selection">
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	</span><span class="selection-comment">// unexported fields. new options should be come here</span><span class="selection">
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	beforeConnect func(context.Context, *Config) error </span><span class="selection-comment">// Invoked before a connection is established</span><span class="selection">
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	pubKey        *rsa.PublicKey                       </span><span class="selection-comment">// Server public key</span><span class="selection">
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	timeTruncate  time.Duration                        </span><span class="selection-comment">// Truncate time.Time values to the specified duration</span><span class="selection">
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Functional Options Pattern</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>type Option func(*Config) error
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// NewConfig creates a new Config and sets default values.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func NewConfig() *Config {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	cfg := &amp;Config{
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		Loc:                  time.UTC,
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		MaxAllowedPacket:     defaultMaxAllowedPacket,
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		Logger:               defaultLogger,
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		AllowNativePasswords: true,
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		CheckConnLiveness:    true,
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	return cfg
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// Apply applies the given options to the Config object.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (c *Config) Apply(opts ...Option) error {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	for _, opt := range opts {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		err := opt(c)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		if err != nil {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			return err
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	return nil
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// TimeTruncate sets the time duration to truncate time.Time values in</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// query parameters.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func TimeTruncate(d time.Duration) Option {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return func(cfg *Config) error {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		cfg.timeTruncate = d
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return nil
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// BeforeConnect sets the function to be invoked before a connection is established.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func BeforeConnect(fn func(context.Context, *Config) error) Option {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	return func(cfg *Config) error {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		cfg.beforeConnect = fn
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		return nil
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func (cfg *Config) Clone() *Config {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	cp := *cfg
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if cp.TLS != nil {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		cp.TLS = cfg.TLS.Clone()
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	if len(cp.Params) &gt; 0 {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		cp.Params = make(map[string]string, len(cfg.Params))
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		for k, v := range cfg.Params {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			cp.Params[k] = v
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if cfg.pubKey != nil {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		cp.pubKey = &amp;rsa.PublicKey{
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			N: new(big.Int).Set(cfg.pubKey.N),
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			E: cfg.pubKey.E,
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	return &amp;cp
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (cfg *Config) normalize() error {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if cfg.InterpolateParams &amp;&amp; cfg.Collation != &#34;&#34; &amp;&amp; unsafeCollations[cfg.Collation] {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		return errInvalidDSNUnsafeCollation
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// Set default network if empty</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if cfg.Net == &#34;&#34; {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		cfg.Net = &#34;tcp&#34;
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// Set default address if empty</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if cfg.Addr == &#34;&#34; {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		switch cfg.Net {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		case &#34;tcp&#34;:
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			cfg.Addr = &#34;127.0.0.1:3306&#34;
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		case &#34;unix&#34;:
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			cfg.Addr = &#34;/tmp/mysql.sock&#34;
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		default:
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			return errors.New(&#34;default addr for network &#39;&#34; + cfg.Net + &#34;&#39; unknown&#34;)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	} else if cfg.Net == &#34;tcp&#34; {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		cfg.Addr = ensureHavePort(cfg.Addr)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if cfg.TLS == nil {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		switch cfg.TLSConfig {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		case &#34;false&#34;, &#34;&#34;:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			<span class="comment">// don&#39;t set anything</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		case &#34;true&#34;:
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			cfg.TLS = &amp;tls.Config{}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		case &#34;skip-verify&#34;:
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			cfg.TLS = &amp;tls.Config{InsecureSkipVerify: true}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		case &#34;preferred&#34;:
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			cfg.TLS = &amp;tls.Config{InsecureSkipVerify: true}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			cfg.AllowFallbackToPlaintext = true
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		default:
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			cfg.TLS = getTLSConfigClone(cfg.TLSConfig)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			if cfg.TLS == nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				return errors.New(&#34;invalid value / unknown config name: &#34; + cfg.TLSConfig)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	if cfg.TLS != nil &amp;&amp; cfg.TLS.ServerName == &#34;&#34; &amp;&amp; !cfg.TLS.InsecureSkipVerify {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		host, _, err := net.SplitHostPort(cfg.Addr)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		if err == nil {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			cfg.TLS.ServerName = host
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	if cfg.ServerPubKey != &#34;&#34; {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		cfg.pubKey = getServerPubKey(cfg.ServerPubKey)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if cfg.pubKey == nil {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			return errors.New(&#34;invalid value / unknown server pub key name: &#34; + cfg.ServerPubKey)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if cfg.Logger == nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		cfg.Logger = defaultLogger
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	return nil
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>func writeDSNParam(buf *bytes.Buffer, hasParam *bool, name, value string) {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	buf.Grow(1 + len(name) + 1 + len(value))
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if !*hasParam {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		*hasParam = true
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		buf.WriteByte(&#39;?&#39;)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	} else {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		buf.WriteByte(&#39;&amp;&#39;)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	buf.WriteString(name)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	buf.WriteByte(&#39;=&#39;)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	buf.WriteString(value)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// FormatDSN formats the given Config into a DSN string which can be passed to</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// the driver.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// Note: use [NewConnector] and [database/sql.OpenDB] to open a connection from a [*Config].</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>func (cfg *Config) FormatDSN() string {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// [username[:password]@]</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	if len(cfg.User) &gt; 0 {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		buf.WriteString(cfg.User)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		if len(cfg.Passwd) &gt; 0 {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			buf.WriteByte(&#39;:&#39;)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			buf.WriteString(cfg.Passwd)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		buf.WriteByte(&#39;@&#39;)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// [protocol[(address)]]</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if len(cfg.Net) &gt; 0 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		buf.WriteString(cfg.Net)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if len(cfg.Addr) &gt; 0 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			buf.WriteByte(&#39;(&#39;)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			buf.WriteString(cfg.Addr)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			buf.WriteByte(&#39;)&#39;)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// /dbname</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	buf.WriteByte(&#39;/&#39;)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	buf.WriteString(url.PathEscape(cfg.DBName))
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// [?param1=value1&amp;...&amp;paramN=valueN]</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	hasParam := false
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if cfg.AllowAllFiles {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		hasParam = true
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		buf.WriteString(&#34;?allowAllFiles=true&#34;)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if cfg.AllowCleartextPasswords {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;allowCleartextPasswords&#34;, &#34;true&#34;)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if cfg.AllowFallbackToPlaintext {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;allowFallbackToPlaintext&#34;, &#34;true&#34;)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if !cfg.AllowNativePasswords {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;allowNativePasswords&#34;, &#34;false&#34;)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if cfg.AllowOldPasswords {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;allowOldPasswords&#34;, &#34;true&#34;)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if !cfg.CheckConnLiveness {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;checkConnLiveness&#34;, &#34;false&#34;)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if cfg.ClientFoundRows {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;clientFoundRows&#34;, &#34;true&#34;)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	if col := cfg.Collation; col != &#34;&#34; {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;collation&#34;, col)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	if cfg.ColumnsWithAlias {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;columnsWithAlias&#34;, &#34;true&#34;)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if cfg.InterpolateParams {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;interpolateParams&#34;, &#34;true&#34;)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	if cfg.Loc != time.UTC &amp;&amp; cfg.Loc != nil {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;loc&#34;, url.QueryEscape(cfg.Loc.String()))
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if cfg.MultiStatements {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;multiStatements&#34;, &#34;true&#34;)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if cfg.ParseTime {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;parseTime&#34;, &#34;true&#34;)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if cfg.timeTruncate &gt; 0 {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;timeTruncate&#34;, cfg.timeTruncate.String())
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if cfg.ReadTimeout &gt; 0 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;readTimeout&#34;, cfg.ReadTimeout.String())
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	if cfg.RejectReadOnly {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;rejectReadOnly&#34;, &#34;true&#34;)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if len(cfg.ServerPubKey) &gt; 0 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;serverPubKey&#34;, url.QueryEscape(cfg.ServerPubKey))
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if cfg.Timeout &gt; 0 {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;timeout&#34;, cfg.Timeout.String())
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if len(cfg.TLSConfig) &gt; 0 {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;tls&#34;, url.QueryEscape(cfg.TLSConfig))
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	if cfg.WriteTimeout &gt; 0 {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;writeTimeout&#34;, cfg.WriteTimeout.String())
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	if cfg.MaxAllowedPacket != defaultMaxAllowedPacket {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		writeDSNParam(&amp;buf, &amp;hasParam, &#34;maxAllowedPacket&#34;, strconv.Itoa(cfg.MaxAllowedPacket))
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// other params</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if cfg.Params != nil {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		var params []string
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		for param := range cfg.Params {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			params = append(params, param)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		sort.Strings(params)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		for _, param := range params {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			writeDSNParam(&amp;buf, &amp;hasParam, param, url.QueryEscape(cfg.Params[param]))
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return buf.String()
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// ParseDSN parses the DSN string to a Config</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func ParseDSN(dsn string) (cfg *Config, err error) {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// New config with some default values</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	cfg = NewConfig()
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// [user[:password]@][net[(addr)]]/dbname[?param1=value1&amp;paramN=valueN]</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">// Find the last &#39;/&#39; (since the password or the net addr might contain a &#39;/&#39;)</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	foundSlash := false
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	for i := len(dsn) - 1; i &gt;= 0; i-- {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		if dsn[i] == &#39;/&#39; {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			foundSlash = true
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			var j, k int
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			<span class="comment">// left part is empty if i &lt;= 0</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				<span class="comment">// [username[:password]@][protocol[(address)]]</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>				<span class="comment">// Find the last &#39;@&#39; in dsn[:i]</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				for j = i; j &gt;= 0; j-- {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>					if dsn[j] == &#39;@&#39; {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>						<span class="comment">// username[:password]</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>						<span class="comment">// Find the first &#39;:&#39; in dsn[:j]</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>						for k = 0; k &lt; j; k++ {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>							if dsn[k] == &#39;:&#39; {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>								cfg.Passwd = dsn[k+1 : j]
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>								break
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>							}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>						}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>						cfg.User = dsn[:k]
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>						break
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>					}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>				}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				<span class="comment">// [protocol[(address)]]</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				<span class="comment">// Find the first &#39;(&#39; in dsn[j+1:i]</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>				for k = j + 1; k &lt; i; k++ {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>					if dsn[k] == &#39;(&#39; {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>						<span class="comment">// dsn[i-1] must be == &#39;)&#39; if an address is specified</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>						if dsn[i-1] != &#39;)&#39; {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>							if strings.ContainsRune(dsn[k+1:i], &#39;)&#39;) {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>								return nil, errInvalidDSNUnescaped
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>							}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>							return nil, errInvalidDSNAddr
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>						}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>						cfg.Addr = dsn[k+1 : i-1]
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>						break
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>					}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				cfg.Net = dsn[j+1 : k]
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			<span class="comment">// dbname[?param1=value1&amp;...&amp;paramN=valueN]</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			<span class="comment">// Find the first &#39;?&#39; in dsn[i+1:]</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			for j = i + 1; j &lt; len(dsn); j++ {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				if dsn[j] == &#39;?&#39; {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>					if err = parseDSNParams(cfg, dsn[j+1:]); err != nil {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>						return
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>					}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>					break
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			dbname := dsn[i+1 : j]
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			if cfg.DBName, err = url.PathUnescape(dbname); err != nil {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;invalid dbname %q: %w&#34;, dbname, err)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			break
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if !foundSlash &amp;&amp; len(dsn) &gt; 0 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		return nil, errInvalidDSNNoSlash
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if err = cfg.normalize(); err != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		return nil, err
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	return
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// parseDSNParams parses the DSN &#34;query string&#34;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// Values must be url.QueryEscape&#39;ed</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>func parseDSNParams(cfg *Config, params string) (err error) {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	for _, v := range strings.Split(params, &#34;&amp;&#34;) {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		key, value, found := strings.Cut(v, &#34;=&#34;)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		if !found {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			continue
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		<span class="comment">// cfg params</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		switch key {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// Disable INFILE allowlist / enable all files</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		case &#34;allowAllFiles&#34;:
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			var isBool bool
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			cfg.AllowAllFiles, isBool = readBool(value)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			if !isBool {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// Use cleartext authentication mode (MySQL 5.5.10+)</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		case &#34;allowCleartextPasswords&#34;:
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			var isBool bool
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			cfg.AllowCleartextPasswords, isBool = readBool(value)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			if !isBool {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		<span class="comment">// Allow fallback to unencrypted connection if server does not support TLS</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		case &#34;allowFallbackToPlaintext&#34;:
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			var isBool bool
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			cfg.AllowFallbackToPlaintext, isBool = readBool(value)
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			if !isBool {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		<span class="comment">// Use native password authentication</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		case &#34;allowNativePasswords&#34;:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			var isBool bool
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			cfg.AllowNativePasswords, isBool = readBool(value)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			if !isBool {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		<span class="comment">// Use old authentication mode (pre MySQL 4.1)</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		case &#34;allowOldPasswords&#34;:
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			var isBool bool
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			cfg.AllowOldPasswords, isBool = readBool(value)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			if !isBool {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		<span class="comment">// Check connections for Liveness before using them</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		case &#34;checkConnLiveness&#34;:
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			var isBool bool
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			cfg.CheckConnLiveness, isBool = readBool(value)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			if !isBool {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		<span class="comment">// Switch &#34;rowsAffected&#34; mode</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		case &#34;clientFoundRows&#34;:
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			var isBool bool
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			cfg.ClientFoundRows, isBool = readBool(value)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			if !isBool {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		<span class="comment">// Collation</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		case &#34;collation&#34;:
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			cfg.Collation = value
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		case &#34;columnsWithAlias&#34;:
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>			var isBool bool
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			cfg.ColumnsWithAlias, isBool = readBool(value)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			if !isBool {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		<span class="comment">// Compression</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		case &#34;compress&#34;:
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			return errors.New(&#34;compression not implemented yet&#34;)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		<span class="comment">// Enable client side placeholder substitution</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		case &#34;interpolateParams&#34;:
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			var isBool bool
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			cfg.InterpolateParams, isBool = readBool(value)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			if !isBool {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		<span class="comment">// Time Location</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		case &#34;loc&#34;:
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			if value, err = url.QueryUnescape(value); err != nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>				return
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			cfg.Loc, err = time.LoadLocation(value)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			if err != nil {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>				return
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		<span class="comment">// multiple statements in one query</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		case &#34;multiStatements&#34;:
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			var isBool bool
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			cfg.MultiStatements, isBool = readBool(value)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			if !isBool {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		<span class="comment">// time.Time parsing</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		case &#34;parseTime&#34;:
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			var isBool bool
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			cfg.ParseTime, isBool = readBool(value)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			if !isBool {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		<span class="comment">// time.Time truncation</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		case &#34;timeTruncate&#34;:
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			cfg.timeTruncate, err = time.ParseDuration(value)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			if err != nil {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;invalid timeTruncate value: %v, error: %w&#34;, value, err)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		<span class="comment">// I/O read Timeout</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		case &#34;readTimeout&#34;:
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			cfg.ReadTimeout, err = time.ParseDuration(value)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			if err != nil {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>				return
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		<span class="comment">// Reject read-only connections</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		case &#34;rejectReadOnly&#34;:
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			var isBool bool
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			cfg.RejectReadOnly, isBool = readBool(value)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			if !isBool {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>				return errors.New(&#34;invalid bool value: &#34; + value)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		<span class="comment">// Server public key</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		case &#34;serverPubKey&#34;:
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			name, err := url.QueryUnescape(value)
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			if err != nil {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;invalid value for server pub key name: %v&#34;, err)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>			}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			cfg.ServerPubKey = name
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		<span class="comment">// Strict mode</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		case &#34;strict&#34;:
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			panic(&#34;strict mode has been removed. See https://github.com/go-sql-driver/mysql/wiki/strict-mode&#34;)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		<span class="comment">// Dial Timeout</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		case &#34;timeout&#34;:
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			cfg.Timeout, err = time.ParseDuration(value)
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			if err != nil {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>				return
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		<span class="comment">// TLS-Encryption</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		case &#34;tls&#34;:
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			boolValue, isBool := readBool(value)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			if isBool {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>				if boolValue {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>					cfg.TLSConfig = &#34;true&#34;
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>				} else {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>					cfg.TLSConfig = &#34;false&#34;
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>				}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			} else if vl := strings.ToLower(value); vl == &#34;skip-verify&#34; || vl == &#34;preferred&#34; {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>				cfg.TLSConfig = vl
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			} else {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>				name, err := url.QueryUnescape(value)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>				if err != nil {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>					return fmt.Errorf(&#34;invalid value for TLS config name: %v&#34;, err)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>				}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>				cfg.TLSConfig = name
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		<span class="comment">// I/O write Timeout</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		case &#34;writeTimeout&#34;:
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			cfg.WriteTimeout, err = time.ParseDuration(value)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>			if err != nil {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>				return
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		case &#34;maxAllowedPacket&#34;:
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>			cfg.MaxAllowedPacket, err = strconv.Atoi(value)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			if err != nil {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>				return
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>			}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		<span class="comment">// Connection attributes</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		case &#34;connectionAttributes&#34;:
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			connectionAttributes, err := url.QueryUnescape(value)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			if err != nil {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;invalid connectionAttributes value: %v&#34;, err)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			cfg.ConnectionAttributes = connectionAttributes
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		default:
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			<span class="comment">// lazy init</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			if cfg.Params == nil {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>				cfg.Params = make(map[string]string)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			if cfg.Params[key], err = url.QueryUnescape(value); err != nil {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>				return
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	return
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>func ensureHavePort(addr string) string {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	if _, _, err := net.SplitHostPort(addr); err != nil {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		return net.JoinHostPort(addr, &#34;3306&#34;)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	return addr
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>
</pre><p><a href="dsn.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
