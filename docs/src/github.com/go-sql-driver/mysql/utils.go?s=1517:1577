<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/github.com/go-sql-driver/mysql/utils.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./utils.go?s=1517:1577#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/github.com">github.com</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver">go-sql-driver</a>/<a href="http://localhost:8080/src/github.com/go-sql-driver/mysql">mysql</a>/<span class="text-muted">utils.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/github.com/go-sql-driver/mysql">github.com/go-sql-driver/mysql</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Go MySQL Driver - A MySQL-Driver for Go&#39;s database/sql package</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go-MySQL-Driver Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This Source Code Form is subject to the terms of the Mozilla Public</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// License, v. 2.0. If a copy of the MPL was not distributed with this file,</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// You can obtain one at http://mozilla.org/MPL/2.0/.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package mysql
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;database/sql&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;database/sql/driver&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Registry for custom tls.Configs</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>var (
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	tlsConfigLock     sync.RWMutex
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	tlsConfigRegistry map[string]*tls.Config
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// RegisterTLSConfig registers a custom tls.Config to be used with sql.Open.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Use the key as a value in the DSN where tls=value.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// Note: The provided tls.Config is exclusively owned by the driver after</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// registering it.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//	rootCertPool := x509.NewCertPool()</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//	pem, err := os.ReadFile(&#34;/path/ca-cert.pem&#34;)</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//	    log.Fatal(err)</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//	if ok := rootCertPool.AppendCertsFromPEM(pem); !ok {</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//	    log.Fatal(&#34;Failed to append PEM.&#34;)</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//	clientCert := make([]tls.Certificate, 0, 1)</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//	certs, err := tls.LoadX509KeyPair(&#34;/path/client-cert.pem&#34;, &#34;/path/client-key.pem&#34;)</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//	    log.Fatal(err)</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	clientCert = append(clientCert, certs)</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//	mysql.RegisterTLSConfig(&#34;custom&#34;, &amp;tls.Config{</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	    RootCAs: rootCertPool,</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//	    Certificates: clientCert,</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//	})</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//	db, err := sql.Open(&#34;mysql&#34;, &#34;user@tcp(localhost:3306)/test?tls=custom&#34;)</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="selection">func RegisterTLSConfig(key string, config *tls.Config) error</span> {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	if _, isBool := readBool(key); isBool || strings.ToLower(key) == &#34;skip-verify&#34; || strings.ToLower(key) == &#34;preferred&#34; {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;key &#39;%s&#39; is reserved&#34;, key)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	tlsConfigLock.Lock()
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	if tlsConfigRegistry == nil {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		tlsConfigRegistry = make(map[string]*tls.Config)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	tlsConfigRegistry[key] = config
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	tlsConfigLock.Unlock()
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return nil
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// DeregisterTLSConfig removes the tls.Config associated with key.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>func DeregisterTLSConfig(key string) {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	tlsConfigLock.Lock()
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	if tlsConfigRegistry != nil {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		delete(tlsConfigRegistry, key)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	tlsConfigLock.Unlock()
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func getTLSConfigClone(key string) (config *tls.Config) {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	tlsConfigLock.RLock()
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if v, ok := tlsConfigRegistry[key]; ok {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		config = v.Clone()
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	tlsConfigLock.RUnlock()
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	return
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Returns the bool value of the input.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// The 2nd return value indicates if the input was a valid bool value</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func readBool(input string) (value bool, valid bool) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	switch input {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	case &#34;1&#34;, &#34;true&#34;, &#34;TRUE&#34;, &#34;True&#34;:
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		return true, true
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	case &#34;0&#34;, &#34;false&#34;, &#34;FALSE&#34;, &#34;False&#34;:
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		return false, true
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// Not a valid bool value</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">/******************************************************************************
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>*                           Time related utils                                *
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>******************************************************************************/</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func parseDateTime(b []byte, loc *time.Location) (time.Time, error) {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	const base = &#34;0000-00-00 00:00:00.000000&#34;
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	switch len(b) {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	case 10, 19, 21, 22, 23, 24, 25, 26: <span class="comment">// up to &#34;YYYY-MM-DD HH:MM:SS.MMMMMM&#34;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		if string(b) == base[:len(b)] {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			return time.Time{}, nil
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		year, err := parseByteYear(b)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		if err != nil {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		if b[4] != &#39;-&#39; {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[4])
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		m, err := parseByte2Digits(b[5], b[6])
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		if err != nil {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		month := time.Month(m)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		if b[7] != &#39;-&#39; {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[7])
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		day, err := parseByte2Digits(b[8], b[9])
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		if err != nil {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		if len(b) == 10 {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			return time.Date(year, month, day, 0, 0, 0, 0, loc), nil
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		if b[10] != &#39; &#39; {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[10])
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		hour, err := parseByte2Digits(b[11], b[12])
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		if err != nil {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		if b[13] != &#39;:&#39; {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[13])
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		min, err := parseByte2Digits(b[14], b[15])
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		if err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		if b[16] != &#39;:&#39; {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[16])
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		sec, err := parseByte2Digits(b[17], b[18])
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		if err != nil {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if len(b) == 19 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			return time.Date(year, month, day, hour, min, sec, 0, loc), nil
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		if b[19] != &#39;.&#39; {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			return time.Time{}, fmt.Errorf(&#34;bad value for field: `%c`&#34;, b[19])
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		nsec, err := parseByteNanoSec(b[20:])
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		if err != nil {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			return time.Time{}, err
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		return time.Date(year, month, day, hour, min, sec, nsec, loc), nil
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	default:
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		return time.Time{}, fmt.Errorf(&#34;invalid time bytes: %s&#34;, b)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func parseByteYear(b []byte) (int, error) {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	year, n := 0, 1000
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	for i := 0; i &lt; 4; i++ {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		v, err := bToi(b[i])
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		if err != nil {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			return 0, err
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		year += v * n
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		n /= 10
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return year, nil
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func parseByte2Digits(b1, b2 byte) (int, error) {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	d1, err := bToi(b1)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if err != nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return 0, err
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	d2, err := bToi(b2)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if err != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return 0, err
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	return d1*10 + d2, nil
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>func parseByteNanoSec(b []byte) (int, error) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	ns, digit := 0, 100000 <span class="comment">// max is 6-digits</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	for i := 0; i &lt; len(b); i++ {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		v, err := bToi(b[i])
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		if err != nil {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			return 0, err
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		ns += v * digit
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		digit /= 10
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// nanoseconds has 10-digits. (needs to scale digits)</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// 10 - 6 = 4, so we have to multiple 1000.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	return ns * 1000, nil
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func bToi(b byte) (int, error) {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	if b &lt; &#39;0&#39; || b &gt; &#39;9&#39; {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return 0, errors.New(&#34;not [0-9]&#34;)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	return int(b - &#39;0&#39;), nil
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func parseBinaryDateTime(num uint64, data []byte, loc *time.Location) (driver.Value, error) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	switch num {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	case 0:
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		return time.Time{}, nil
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	case 4:
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return time.Date(
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			int(binary.LittleEndian.Uint16(data[:2])), <span class="comment">// year</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			time.Month(data[2]),                       <span class="comment">// month</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			int(data[3]),                              <span class="comment">// day</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			0, 0, 0, 0,
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			loc,
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		), nil
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	case 7:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return time.Date(
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			int(binary.LittleEndian.Uint16(data[:2])), <span class="comment">// year</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			time.Month(data[2]),                       <span class="comment">// month</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			int(data[3]),                              <span class="comment">// day</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			int(data[4]),                              <span class="comment">// hour</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			int(data[5]),                              <span class="comment">// minutes</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			int(data[6]),                              <span class="comment">// seconds</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			0,
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			loc,
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		), nil
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	case 11:
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		return time.Date(
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			int(binary.LittleEndian.Uint16(data[:2])), <span class="comment">// year</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			time.Month(data[2]),                       <span class="comment">// month</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			int(data[3]),                              <span class="comment">// day</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			int(data[4]),                              <span class="comment">// hour</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			int(data[5]),                              <span class="comment">// minutes</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			int(data[6]),                              <span class="comment">// seconds</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			int(binary.LittleEndian.Uint32(data[7:11]))*1000, <span class="comment">// nanoseconds</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			loc,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		), nil
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	return nil, fmt.Errorf(&#34;invalid DATETIME packet length %d&#34;, num)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>func appendDateTime(buf []byte, t time.Time, timeTruncate time.Duration) ([]byte, error) {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if timeTruncate &gt; 0 {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		t = t.Truncate(timeTruncate)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	year, month, day := t.Date()
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	hour, min, sec := t.Clock()
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	nsec := t.Nanosecond()
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if year &lt; 1 || year &gt; 9999 {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		return buf, errors.New(&#34;year is not in the range [1, 9999]: &#34; + strconv.Itoa(year)) <span class="comment">// use errors.New instead of fmt.Errorf to avoid year escape to heap</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	year100 := year / 100
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	year1 := year % 100
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	var localBuf [len(&#34;2006-01-02T15:04:05.999999999&#34;)]byte <span class="comment">// does not escape</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	localBuf[0], localBuf[1], localBuf[2], localBuf[3] = digits10[year100], digits01[year100], digits10[year1], digits01[year1]
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	localBuf[4] = &#39;-&#39;
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	localBuf[5], localBuf[6] = digits10[month], digits01[month]
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	localBuf[7] = &#39;-&#39;
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	localBuf[8], localBuf[9] = digits10[day], digits01[day]
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	if hour == 0 &amp;&amp; min == 0 &amp;&amp; sec == 0 &amp;&amp; nsec == 0 {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		return append(buf, localBuf[:10]...), nil
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	localBuf[10] = &#39; &#39;
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	localBuf[11], localBuf[12] = digits10[hour], digits01[hour]
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	localBuf[13] = &#39;:&#39;
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	localBuf[14], localBuf[15] = digits10[min], digits01[min]
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	localBuf[16] = &#39;:&#39;
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	localBuf[17], localBuf[18] = digits10[sec], digits01[sec]
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if nsec == 0 {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		return append(buf, localBuf[:19]...), nil
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	nsec100000000 := nsec / 100000000
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	nsec1000000 := (nsec / 1000000) % 100
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	nsec10000 := (nsec / 10000) % 100
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	nsec100 := (nsec / 100) % 100
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	nsec1 := nsec % 100
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	localBuf[19] = &#39;.&#39;
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// milli second</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	localBuf[20], localBuf[21], localBuf[22] =
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		digits01[nsec100000000], digits10[nsec1000000], digits01[nsec1000000]
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// micro second</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	localBuf[23], localBuf[24], localBuf[25] =
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		digits10[nsec10000], digits01[nsec10000], digits10[nsec100]
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// nano second</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	localBuf[26], localBuf[27], localBuf[28] =
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		digits01[nsec100], digits10[nsec1], digits01[nsec1]
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	<span class="comment">// trim trailing zeros</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	n := len(localBuf)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	for n &gt; 0 &amp;&amp; localBuf[n-1] == &#39;0&#39; {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		n--
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	return append(buf, localBuf[:n]...), nil
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// zeroDateTime is used in formatBinaryDateTime to avoid an allocation</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// if the DATE or DATETIME has the zero value.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// It must never be changed.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// The current behavior depends on database/sql copying the result.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>var zeroDateTime = []byte(&#34;0000-00-00 00:00:00.000000&#34;)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>const digits01 = &#34;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&#34;
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>const digits10 = &#34;0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999&#34;
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func appendMicrosecs(dst, src []byte, decimals int) []byte {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	if decimals &lt;= 0 {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		return dst
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if len(src) == 0 {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return append(dst, &#34;.000000&#34;[:decimals+1]...)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	microsecs := binary.LittleEndian.Uint32(src[:4])
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	p1 := byte(microsecs / 10000)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	microsecs -= 10000 * uint32(p1)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	p2 := byte(microsecs / 100)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	microsecs -= 100 * uint32(p2)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	p3 := byte(microsecs)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	switch decimals {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	default:
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			digits10[p1], digits01[p1],
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			digits10[p2], digits01[p2],
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			digits10[p3], digits01[p3],
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	case 1:
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			digits10[p1],
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	case 2:
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			digits10[p1], digits01[p1],
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	case 3:
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			digits10[p1], digits01[p1],
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			digits10[p2],
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	case 4:
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			digits10[p1], digits01[p1],
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			digits10[p2], digits01[p2],
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	case 5:
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		return append(dst, &#39;.&#39;,
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			digits10[p1], digits01[p1],
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			digits10[p2], digits01[p2],
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			digits10[p3],
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>func formatBinaryDateTime(src []byte, length uint8) (driver.Value, error) {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	<span class="comment">// length expects the deterministic length of the zero value,</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// negative time and 100+ hours are automatically added if needed</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	if len(src) == 0 {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		return zeroDateTime[:length], nil
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	var dst []byte      <span class="comment">// return value</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	var p1, p2, p3 byte <span class="comment">// current digit pair</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	switch length {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	case 10, 19, 21, 22, 23, 24, 25, 26:
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	default:
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		t := &#34;DATE&#34;
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		if length &gt; 10 {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			t += &#34;TIME&#34;
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;illegal %s length %d&#34;, t, length)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	switch len(src) {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	case 4, 7, 11:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	default:
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		t := &#34;DATE&#34;
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if length &gt; 10 {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			t += &#34;TIME&#34;
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;illegal %s packet length %d&#34;, t, len(src))
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	dst = make([]byte, 0, length)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	<span class="comment">// start with the date</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	year := binary.LittleEndian.Uint16(src[:2])
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	pt := year / 100
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	p1 = byte(year - 100*uint16(pt))
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	p2, p3 = src[2], src[3]
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	dst = append(dst,
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		digits10[pt], digits01[pt],
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		digits10[p1], digits01[p1], &#39;-&#39;,
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		digits10[p2], digits01[p2], &#39;-&#39;,
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		digits10[p3], digits01[p3],
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if length == 10 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		return dst, nil
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	if len(src) == 4 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return append(dst, zeroDateTime[10:length]...), nil
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	dst = append(dst, &#39; &#39;)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	p1 = src[4] <span class="comment">// hour</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	src = src[5:]
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// p1 is 2-digit hour, src is after hour</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	p2, p3 = src[0], src[1]
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	dst = append(dst,
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		digits10[p1], digits01[p1], &#39;:&#39;,
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		digits10[p2], digits01[p2], &#39;:&#39;,
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		digits10[p3], digits01[p3],
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	return appendMicrosecs(dst, src[2:], int(length)-20), nil
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>func formatBinaryTime(src []byte, length uint8) (driver.Value, error) {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	<span class="comment">// length expects the deterministic length of the zero value,</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	<span class="comment">// negative time and 100+ hours are automatically added if needed</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	if len(src) == 0 {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		return zeroDateTime[11 : 11+length], nil
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	var dst []byte <span class="comment">// return value</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	switch length {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	case
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		8,                      <span class="comment">// time (can be up to 10 when negative and 100+ hours)</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		10, 11, 12, 13, 14, 15: <span class="comment">// time with fractional seconds</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	default:
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;illegal TIME length %d&#34;, length)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	switch len(src) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	case 8, 12:
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	default:
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;invalid TIME packet length %d&#34;, len(src))
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// +2 to enable negative time and 100+ hours</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	dst = make([]byte, 0, length+2)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	if src[0] == 1 {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		dst = append(dst, &#39;-&#39;)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	days := binary.LittleEndian.Uint32(src[1:5])
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	hours := int64(days)*24 + int64(src[5])
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if hours &gt;= 100 {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		dst = strconv.AppendInt(dst, hours, 10)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	} else {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		dst = append(dst, digits10[hours], digits01[hours])
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	min, sec := src[6], src[7]
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	dst = append(dst, &#39;:&#39;,
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		digits10[min], digits01[min], &#39;:&#39;,
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		digits10[sec], digits01[sec],
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	return appendMicrosecs(dst, src[8:], int(length)-9), nil
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">/******************************************************************************
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>*                       Convert from and to bytes                             *
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>******************************************************************************/</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func uint64ToBytes(n uint64) []byte {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	return []byte{
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		byte(n),
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		byte(n &gt;&gt; 8),
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		byte(n &gt;&gt; 16),
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		byte(n &gt;&gt; 24),
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		byte(n &gt;&gt; 32),
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		byte(n &gt;&gt; 40),
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		byte(n &gt;&gt; 48),
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		byte(n &gt;&gt; 56),
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func uint64ToString(n uint64) []byte {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	var a [20]byte
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	i := 20
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	<span class="comment">// U+0030 = 0</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	<span class="comment">// ...</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	<span class="comment">// U+0039 = 9</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	var q uint64
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	for n &gt;= 10 {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		i--
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		q = n / 10
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		a[i] = uint8(n-q*10) + 0x30
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		n = q
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	i--
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	a[i] = uint8(n) + 0x30
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	return a[i:]
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span><span class="comment">// treats string value as unsigned integer representation</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>func stringToInt(b []byte) int {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	val := 0
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	for i := range b {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		val *= 10
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		val += int(b[i] - 0x30)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return val
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// returns the string read as a bytes slice, whether the value is NULL,</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// the number of bytes read and an error, in case the string is longer than</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// the input slice</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>func readLengthEncodedString(b []byte) ([]byte, bool, int, error) {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	<span class="comment">// Get length</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	num, isNull, n := readLengthEncodedInteger(b)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	if num &lt; 1 {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		return b[n:n], isNull, n, nil
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	n += int(num)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	<span class="comment">// Check data length</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	if len(b) &gt;= n {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		return b[n-int(num) : n : n], false, n, nil
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	return nil, false, n, io.EOF
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// returns the number of bytes skipped and an error, in case the string is</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// longer than the input slice</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func skipLengthEncodedString(b []byte) (int, error) {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	<span class="comment">// Get length</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	num, _, n := readLengthEncodedInteger(b)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	if num &lt; 1 {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		return n, nil
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	n += int(num)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	<span class="comment">// Check data length</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	if len(b) &gt;= n {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		return n, nil
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	return n, io.EOF
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// returns the number read, whether the value is NULL and the number of bytes read</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>func readLengthEncodedInteger(b []byte) (uint64, bool, int) {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	<span class="comment">// See issue #349</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	if len(b) == 0 {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		return 0, true, 1
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	switch b[0] {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// 251: NULL</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	case 0xfb:
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		return 0, true, 1
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	<span class="comment">// 252: value of following 2</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	case 0xfc:
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		return uint64(b[1]) | uint64(b[2])&lt;&lt;8, false, 3
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	<span class="comment">// 253: value of following 3</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	case 0xfd:
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		return uint64(b[1]) | uint64(b[2])&lt;&lt;8 | uint64(b[3])&lt;&lt;16, false, 4
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// 254: value of following 8</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	case 0xfe:
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		return uint64(b[1]) | uint64(b[2])&lt;&lt;8 | uint64(b[3])&lt;&lt;16 |
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>				uint64(b[4])&lt;&lt;24 | uint64(b[5])&lt;&lt;32 | uint64(b[6])&lt;&lt;40 |
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>				uint64(b[7])&lt;&lt;48 | uint64(b[8])&lt;&lt;56,
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			false, 9
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// 0-250: value of first byte</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	return uint64(b[0]), false, 1
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span><span class="comment">// encodes a uint64 value and appends it to the given bytes slice</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>func appendLengthEncodedInteger(b []byte, n uint64) []byte {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	switch {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	case n &lt;= 250:
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		return append(b, byte(n))
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	case n &lt;= 0xffff:
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		return append(b, 0xfc, byte(n), byte(n&gt;&gt;8))
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	case n &lt;= 0xffffff:
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		return append(b, 0xfd, byte(n), byte(n&gt;&gt;8), byte(n&gt;&gt;16))
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	return append(b, 0xfe, byte(n), byte(n&gt;&gt;8), byte(n&gt;&gt;16), byte(n&gt;&gt;24),
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		byte(n&gt;&gt;32), byte(n&gt;&gt;40), byte(n&gt;&gt;48), byte(n&gt;&gt;56))
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>func appendLengthEncodedString(b []byte, s string) []byte {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	b = appendLengthEncodedInteger(b, uint64(len(s)))
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	return append(b, s...)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span><span class="comment">// reserveBuffer checks cap(buf) and expand buffer to len(buf) + appendSize.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span><span class="comment">// If cap(buf) is not enough, reallocate new buffer.</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>func reserveBuffer(buf []byte, appendSize int) []byte {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	newSize := len(buf) + appendSize
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	if cap(buf) &lt; newSize {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		<span class="comment">// Grow buffer exponentially</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		newBuf := make([]byte, len(buf)*2+appendSize)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		copy(newBuf, buf)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		buf = newBuf
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	return buf[:newSize]
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span><span class="comment">// escapeBytesBackslash escapes []byte with backslashes (\)</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// This escapes the contents of a string (provided as []byte) by adding backslashes before special</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// characters, and turning others into specific escape sequences, such as</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// turning newlines into \n and null bytes into \0.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span><span class="comment">// https://github.com/mysql/mysql-server/blob/mysql-5.7.5/mysys/charset.c#L823-L932</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>func escapeBytesBackslash(buf, v []byte) []byte {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	pos := len(buf)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	buf = reserveBuffer(buf, len(v)*2)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	for _, c := range v {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		switch c {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		case &#39;\x00&#39;:
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			buf[pos+1] = &#39;0&#39;
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>			pos += 2
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		case &#39;\n&#39;:
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			buf[pos+1] = &#39;n&#39;
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			pos += 2
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		case &#39;\r&#39;:
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			buf[pos+1] = &#39;r&#39;
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			pos += 2
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		case &#39;\x1a&#39;:
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			buf[pos+1] = &#39;Z&#39;
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			pos += 2
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		case &#39;\&#39;&#39;:
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\&#39;&#39;
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			pos += 2
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		case &#39;&#34;&#39;:
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			buf[pos+1] = &#39;&#34;&#39;
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			pos += 2
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		case &#39;\\&#39;:
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\\&#39;
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			pos += 2
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		default:
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			buf[pos] = c
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			pos++
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	return buf[:pos]
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// escapeStringBackslash is similar to escapeBytesBackslash but for string.</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>func escapeStringBackslash(buf []byte, v string) []byte {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	pos := len(buf)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	buf = reserveBuffer(buf, len(v)*2)
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	for i := 0; i &lt; len(v); i++ {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		c := v[i]
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		switch c {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		case &#39;\x00&#39;:
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			buf[pos+1] = &#39;0&#39;
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			pos += 2
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		case &#39;\n&#39;:
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			buf[pos+1] = &#39;n&#39;
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>			pos += 2
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		case &#39;\r&#39;:
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>			buf[pos+1] = &#39;r&#39;
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			pos += 2
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		case &#39;\x1a&#39;:
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>			buf[pos+1] = &#39;Z&#39;
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>			pos += 2
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		case &#39;\&#39;&#39;:
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\&#39;&#39;
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			pos += 2
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		case &#39;&#34;&#39;:
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			buf[pos+1] = &#39;&#34;&#39;
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			pos += 2
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		case &#39;\\&#39;:
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\\&#39;
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			buf[pos] = &#39;\\&#39;
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			pos += 2
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		default:
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			buf[pos] = c
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			pos++
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	return buf[:pos]
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span><span class="comment">// escapeBytesQuotes escapes apostrophes in []byte by doubling them up.</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span><span class="comment">// This escapes the contents of a string by doubling up any apostrophes that</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">// it contains. This is used when the NO_BACKSLASH_ESCAPES SQL_MODE is in</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// effect on the server.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// https://github.com/mysql/mysql-server/blob/mysql-5.7.5/mysys/charset.c#L963-L1038</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>func escapeBytesQuotes(buf, v []byte) []byte {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	pos := len(buf)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	buf = reserveBuffer(buf, len(v)*2)
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	for _, c := range v {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		if c == &#39;\&#39;&#39; {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\&#39;&#39;
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			buf[pos] = &#39;\&#39;&#39;
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			pos += 2
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		} else {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			buf[pos] = c
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			pos++
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	return buf[:pos]
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">// escapeStringQuotes is similar to escapeBytesQuotes but for string.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>func escapeStringQuotes(buf []byte, v string) []byte {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	pos := len(buf)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	buf = reserveBuffer(buf, len(v)*2)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	for i := 0; i &lt; len(v); i++ {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		c := v[i]
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		if c == &#39;\&#39;&#39; {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			buf[pos+1] = &#39;\&#39;&#39;
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			buf[pos] = &#39;\&#39;&#39;
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>			pos += 2
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		} else {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			buf[pos] = c
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>			pos++
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	return buf[:pos]
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span><span class="comment">/******************************************************************************
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>*                               Sync utils                                    *
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>******************************************************************************/</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span><span class="comment">// noCopy may be embedded into structs which must not be copied</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span><span class="comment">// after the first use.</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// See https://github.com/golang/go/issues/8005#issuecomment-190753527</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span><span class="comment">// for details.</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>type noCopy struct{}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span><span class="comment">// Lock is a no-op used by -copylocks checker from `go vet`.</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>func (*noCopy) Lock() {}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span><span class="comment">// Unlock is a no-op used by -copylocks checker from `go vet`.</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span><span class="comment">// noCopy should implement sync.Locker from Go 1.11</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span><span class="comment">// https://github.com/golang/go/commit/c2eba53e7f80df21d51285879d51ab81bcfbf6bc</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// https://github.com/golang/go/issues/26165</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func (*noCopy) Unlock() {}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span><span class="comment">// atomicError is a wrapper for atomically accessed error values</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>type atomicError struct {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	_     noCopy
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	value atomic.Value
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span><span class="comment">// Set sets the error value regardless of the previous value.</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span><span class="comment">// The value must not be nil</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>func (ae *atomicError) Set(value error) {
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	ae.value.Store(value)
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>}
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">// Value returns the current error value</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func (ae *atomicError) Value() error {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if v := ae.value.Load(); v != nil {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		<span class="comment">// this will panic if the value doesn&#39;t implement the error interface</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		return v.(error)
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	return nil
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>func namedValueToValue(named []driver.NamedValue) ([]driver.Value, error) {
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	dargs := make([]driver.Value, len(named))
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	for n, param := range named {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		if len(param.Name) &gt; 0 {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>			<span class="comment">// TODO: support the use of Named Parameters #561</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mysql: driver does not support the use of Named Parameters&#34;)
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		dargs[n] = param.Value
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	}
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	return dargs, nil
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>func mapIsolationLevel(level driver.IsolationLevel) (string, error) {
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	switch sql.IsolationLevel(level) {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	case sql.LevelRepeatableRead:
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		return &#34;REPEATABLE READ&#34;, nil
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	case sql.LevelReadCommitted:
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		return &#34;READ COMMITTED&#34;, nil
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	case sql.LevelReadUncommitted:
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		return &#34;READ UNCOMMITTED&#34;, nil
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	case sql.LevelSerializable:
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		return &#34;SERIALIZABLE&#34;, nil
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	default:
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		return &#34;&#34;, fmt.Errorf(&#34;mysql: unsupported isolation level: %v&#34;, level)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>}
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>
</pre><p><a href="utils.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
