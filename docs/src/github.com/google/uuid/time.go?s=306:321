<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/github.com/google/uuid/time.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./time.go?s=306:321#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/github.com">github.com</a>/<a href="http://localhost:8080/src/github.com/google">google</a>/<a href="http://localhost:8080/src/github.com/google/uuid">uuid</a>/<span class="text-muted">time.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/github.com/google/uuid">github.com/google/uuid</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 Google Inc.  All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package uuid
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// A Time represents a time as the number of 100&#39;s of nanoseconds since 15 Oct</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// 1582.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="selection">type Time int64</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>const (
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	lillian    = 2299160          <span class="comment">// Julian day of 15 Oct 1582</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	unix       = 2440587          <span class="comment">// Julian day of 1 Jan 1970</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	epoch      = unix - lillian   <span class="comment">// Days between epochs</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	g1582      = epoch * 86400    <span class="comment">// seconds between epochs</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	g1582ns100 = g1582 * 10000000 <span class="comment">// 100s of a nanoseconds between epochs</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>var (
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	timeMu   sync.Mutex
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	lasttime uint64 <span class="comment">// last time we returned</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	clockSeq uint16 <span class="comment">// clock sequence for this run</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	timeNow = time.Now <span class="comment">// for testing</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// UnixTime converts t the number of seconds and nanoseconds using the Unix</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// epoch of 1 Jan 1970.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func (t Time) UnixTime() (sec, nsec int64) {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	sec = int64(t - g1582ns100)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	nsec = (sec % 10000000) * 100
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	sec /= 10000000
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	return sec, nsec
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// GetTime returns the current Time (100s of nanoseconds since 15 Oct 1582) and</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// clock sequence as well as adjusting the clock sequence as needed.  An error</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// is returned if the current time cannot be determined.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func GetTime() (Time, uint16, error) {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	defer timeMu.Unlock()
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	timeMu.Lock()
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	return getTime()
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func getTime() (Time, uint16, error) {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	t := timeNow()
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// If we don&#39;t have a clock sequence already, set one.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if clockSeq == 0 {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		setClockSequence(-1)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	now := uint64(t.UnixNano()/100) + g1582ns100
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// If time has gone backwards with this clock sequence then we</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// increment the clock sequence</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	if now &lt;= lasttime {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		clockSeq = ((clockSeq + 1) &amp; 0x3fff) | 0x8000
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	lasttime = now
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	return Time(now), clockSeq, nil
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// ClockSequence returns the current clock sequence, generating one if not</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// already set.  The clock sequence is only used for Version 1 UUIDs.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// The uuid package does not use global static storage for the clock sequence or</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// the last time a UUID was generated.  Unless SetClockSequence is used, a new</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// random clock sequence is generated the first time a clock sequence is</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// requested by ClockSequence, GetTime, or NewUUID.  (section 4.2.1.1)</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func ClockSequence() int {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	defer timeMu.Unlock()
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	timeMu.Lock()
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	return clockSequence()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>func clockSequence() int {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if clockSeq == 0 {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		setClockSequence(-1)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return int(clockSeq &amp; 0x3fff)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// SetClockSequence sets the clock sequence to the lower 14 bits of seq.  Setting to</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// -1 causes a new sequence to be generated.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func SetClockSequence(seq int) {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	defer timeMu.Unlock()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	timeMu.Lock()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	setClockSequence(seq)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func setClockSequence(seq int) {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if seq == -1 {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		var b [2]byte
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		randomBits(b[:]) <span class="comment">// clock sequence</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		seq = int(b[0])&lt;&lt;8 | int(b[1])
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	oldSeq := clockSeq
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	clockSeq = uint16(seq&amp;0x3fff) | 0x8000 <span class="comment">// Set our variant</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	if oldSeq != clockSeq {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		lasttime = 0
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// Time returns the time in 100s of nanoseconds since 15 Oct 1582 encoded in</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// uuid.  The time is only defined for version 1, 2, 6 and 7 UUIDs.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func (uuid UUID) Time() Time {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	var t Time
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	switch uuid.Version() {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	case 6:
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		time := binary.BigEndian.Uint64(uuid[:8]) <span class="comment">// Ignore uuid[6] version b0110</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		t = Time(time)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	case 7:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		time := binary.BigEndian.Uint64(uuid[:8])
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		t = Time((time&gt;&gt;16)*10000 + g1582ns100)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	default: <span class="comment">// forward compatible</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		time := int64(binary.BigEndian.Uint32(uuid[0:4]))
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		time |= int64(binary.BigEndian.Uint16(uuid[4:6])) &lt;&lt; 32
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		time |= int64(binary.BigEndian.Uint16(uuid[6:8])&amp;0xfff) &lt;&lt; 48
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		t = Time(time)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return t
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// ClockSequence returns the clock sequence encoded in uuid.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// The clock sequence is only well defined for version 1 and 2 UUIDs.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>func (uuid UUID) ClockSequence() int {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return int(binary.BigEndian.Uint16(uuid[8:10])) &amp; 0x3fff
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
</pre><p><a href="time.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
