<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/github.com/google/uuid/version7.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./version7.go?s=1193:1240#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/github.com">github.com</a>/<a href="http://localhost:8080/src/github.com/google">google</a>/<a href="http://localhost:8080/src/github.com/google/uuid">uuid</a>/<span class="text-muted">version7.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/github.com/google/uuid">github.com/google/uuid</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 Google Inc.  All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package uuid
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>)
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// UUID version 7 features a time-ordered value field derived from the widely</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// implemented and well known Unix Epoch timestamp source,</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// the number of milliseconds seconds since midnight 1 Jan 1970 UTC, leap seconds excluded.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// As well as improved entropy characteristics over versions 1 or 6.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// see https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-03#name-uuid-version-7</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Implementations SHOULD utilize UUID version 7 over UUID version 1 and 6 if possible.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// NewV7 returns a Version 7 UUID based on the current time(Unix Epoch).</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// Uses the randomness pool if it was enabled with EnableRandPool.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// On error, NewV7 returns Nil and an error</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>func NewV7() (UUID, error) {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	uuid, err := NewRandom()
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	if err != nil {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		return uuid, err
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	makeV7(uuid[:])
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	return uuid, nil
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// NewV7FromReader returns a Version 7 UUID based on the current time(Unix Epoch).</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// it use NewRandomFromReader fill random bits.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// On error, NewV7FromReader returns Nil and an error.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="selection">func NewV7FromReader(r io.Reader) (UUID, error)</span> {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	uuid, err := NewRandomFromReader(r)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	if err != nil {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		return uuid, err
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	makeV7(uuid[:])
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	return uuid, nil
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// makeV7 fill 48 bits time (uuid[0] - uuid[5]), set version b0111 (uuid[6])</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// uuid[8] already has the right version number (Variant is 10)</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// see function NewV7 and NewV7FromReader</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func makeV7(uuid []byte) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">/*
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		 0                   1                   2                   3
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		|                           unix_ts_ms                          |
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		|          unix_ts_ms           |  ver  |  rand_a (12 bit seq)  |
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		|var|                        rand_b                             |
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		|                            rand_b                             |
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	*/</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	_ = uuid[15] <span class="comment">// bounds check</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	t, s := getV7Time()
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	uuid[0] = byte(t &gt;&gt; 40)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	uuid[1] = byte(t &gt;&gt; 32)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	uuid[2] = byte(t &gt;&gt; 24)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	uuid[3] = byte(t &gt;&gt; 16)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	uuid[4] = byte(t &gt;&gt; 8)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	uuid[5] = byte(t)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	uuid[6] = 0x70 | (0x0F &amp; byte(s&gt;&gt;8))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	uuid[7] = byte(s)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// lastV7time is the last time we returned stored as:</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//	52 bits of time in milliseconds since epoch</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//	12 bits of (fractional nanoseconds) &gt;&gt; 8</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>var lastV7time int64
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>const nanoPerMilli = 1000000
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// getV7Time returns the time in milliseconds and nanoseconds / 256.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// The returned (milli &lt;&lt; 12 + seq) is guarenteed to be greater than</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// (milli &lt;&lt; 12 + seq) returned by any previous call to getV7Time.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func getV7Time() (milli, seq int64) {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	timeMu.Lock()
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	defer timeMu.Unlock()
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	nano := timeNow().UnixNano()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	milli = nano / nanoPerMilli
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// Sequence number is between 0 and 3906 (nanoPerMilli&gt;&gt;8)</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	seq = (nano - milli*nanoPerMilli) &gt;&gt; 8
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	now := milli&lt;&lt;12 + seq
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if now &lt;= lastV7time {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		now = lastV7time + 1
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		milli = now &gt;&gt; 12
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		seq = now &amp; 0xfff
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	lastV7time = now
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return milli, seq
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
</pre><p><a href="version7.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
