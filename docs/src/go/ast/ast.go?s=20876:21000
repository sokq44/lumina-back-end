<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/ast/ast.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./ast.go?s=20876:21000#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/ast">ast</a>/<span class="text-muted">ast.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/ast">go/ast</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package ast declares the types used to represent syntax trees for Go</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// packages.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package ast
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Interfaces</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// There are 3 main classes of nodes: Expressions and type nodes,</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// statement nodes, and declaration nodes. The node names usually</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// match the corresponding Go spec production names to which they</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// correspond. The node fields correspond to the individual parts</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// of the respective productions.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// All nodes contain position information marking the beginning of</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// the corresponding source text segment; it is accessible via the</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Pos accessor method. Nodes may contain additional position info</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// for language constructs where comments may be found between parts</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// of the construct (typically any larger, parenthesized subpart).</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// That position information is needed to properly position comments</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// when printing the construct.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// All node types implement the Node interface.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>type Node interface {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Pos() token.Pos <span class="comment">// position of first character belonging to the node</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	End() token.Pos <span class="comment">// position of first character immediately after the node</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// All expression nodes implement the Expr interface.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type Expr interface {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Node
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	exprNode()
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// All statement nodes implement the Stmt interface.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type Stmt interface {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	Node
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	stmtNode()
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// All declaration nodes implement the Decl interface.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type Decl interface {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	Node
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	declNode()
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// Comments</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// A Comment node represents a single //-style or /*-style comment.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// The Text field contains the comment text without carriage returns (\r) that</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// may have been present in the source. Because a comment&#39;s end position is</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// computed using len(Text), the position reported by [Comment.End] does not match the</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// true source end position for comments containing carriage returns.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type Comment struct {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	Slash token.Pos <span class="comment">// position of &#34;/&#34; starting the comment</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	Text  string    <span class="comment">// comment text (excluding &#39;\n&#39; for //-style comments)</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>func (c *Comment) Pos() token.Pos { return c.Slash }
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>func (c *Comment) End() token.Pos { return token.Pos(int(c.Slash) + len(c.Text)) }
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// A CommentGroup represents a sequence of comments</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// with no other tokens and no empty lines between.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>type CommentGroup struct {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	List []*Comment <span class="comment">// len(List) &gt; 0</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func (g *CommentGroup) Pos() token.Pos { return g.List[0].Pos() }
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>func (g *CommentGroup) End() token.Pos { return g.List[len(g.List)-1].End() }
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func isWhitespace(ch byte) bool { return ch == &#39; &#39; || ch == &#39;\t&#39; || ch == &#39;\n&#39; || ch == &#39;\r&#39; }
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func stripTrailingWhitespace(s string) string {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	i := len(s)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; isWhitespace(s[i-1]) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		i--
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	return s[0:i]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// Text returns the text of the comment.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Comment markers (//, /*, and */), the first space of a line comment, and</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// leading and trailing empty lines are removed.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// Comment directives like &#34;//line&#34; and &#34;//go:noinline&#34; are also removed.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Multiple empty lines are reduced to one, and trailing space on lines is trimmed.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Unless the result is empty, it is newline-terminated.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func (g *CommentGroup) Text() string {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if g == nil {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	comments := make([]string, len(g.List))
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	for i, c := range g.List {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		comments[i] = c.Text
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	lines := make([]string, 0, 10) <span class="comment">// most comments are less than 10 lines</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	for _, c := range comments {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		<span class="comment">// Remove comment markers.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		<span class="comment">// The parser has given us exactly the comment text.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		switch c[1] {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		case &#39;/&#39;:
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			<span class="comment">//-style comment (no newline at the end)</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			c = c[2:]
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			if len(c) == 0 {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>				<span class="comment">// empty line</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>				break
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			if c[0] == &#39; &#39; {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>				<span class="comment">// strip first space - required for Example tests</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				c = c[1:]
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				break
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			if isDirective(c) {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>				<span class="comment">// Ignore //go:noinline, //line, and so on.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				continue
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		case &#39;*&#39;:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			<span class="comment">/*-style comment */</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			c = c[2 : len(c)-2]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		<span class="comment">// Split on newlines.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		cl := strings.Split(c, &#34;\n&#34;)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		<span class="comment">// Walk lines, stripping trailing white space and adding to list.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		for _, l := range cl {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			lines = append(lines, stripTrailingWhitespace(l))
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// Remove leading blank lines; convert runs of</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// interior blank lines to a single blank line.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	n := 0
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	for _, line := range lines {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		if line != &#34;&#34; || n &gt; 0 &amp;&amp; lines[n-1] != &#34;&#34; {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			lines[n] = line
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			n++
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	lines = lines[0:n]
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// Add final &#34;&#34; entry to get trailing newline from Join.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if n &gt; 0 &amp;&amp; lines[n-1] != &#34;&#34; {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		lines = append(lines, &#34;&#34;)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return strings.Join(lines, &#34;\n&#34;)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// isDirective reports whether c is a comment directive.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// This code is also in go/printer.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func isDirective(c string) bool {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// &#34;//line &#34; is a line directive.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// &#34;//extern &#34; is for gccgo.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// &#34;//export &#34; is for cgo.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// (The // has been removed.)</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if strings.HasPrefix(c, &#34;line &#34;) || strings.HasPrefix(c, &#34;extern &#34;) || strings.HasPrefix(c, &#34;export &#34;) {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return true
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// &#34;//[a-z0-9]+:[a-z0-9]&#34;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// (The // has been removed.)</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	colon := strings.Index(c, &#34;:&#34;)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	if colon &lt;= 0 || colon+1 &gt;= len(c) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		return false
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	for i := 0; i &lt;= colon+1; i++ {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		if i == colon {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			continue
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		b := c[i]
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		if !(&#39;a&#39; &lt;= b &amp;&amp; b &lt;= &#39;z&#39; || &#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39;) {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			return false
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	return true
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// Expressions and types</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// A Field represents a Field declaration list in a struct type,</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// a method list in an interface type, or a parameter/result declaration</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// in a signature.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// [Field.Names] is nil for unnamed parameters (parameter lists which only contain types)</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// and embedded struct fields. In the latter case, the field name is the type name.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>type Field struct {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	Doc     *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	Names   []*Ident      <span class="comment">// field/method/(type) parameter names; or nil</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	Type    Expr          <span class="comment">// field/method/parameter type; or nil</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	Tag     *BasicLit     <span class="comment">// field tag; or nil</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	Comment *CommentGroup <span class="comment">// line comments; or nil</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (f *Field) Pos() token.Pos {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if len(f.Names) &gt; 0 {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return f.Names[0].Pos()
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	if f.Type != nil {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		return f.Type.Pos()
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	return token.NoPos
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (f *Field) End() token.Pos {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if f.Tag != nil {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return f.Tag.End()
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if f.Type != nil {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return f.Type.End()
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if len(f.Names) &gt; 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return f.Names[len(f.Names)-1].End()
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return token.NoPos
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// A FieldList represents a list of Fields, enclosed by parentheses,</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// curly braces, or square brackets.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>type FieldList struct {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	Opening token.Pos <span class="comment">// position of opening parenthesis/brace/bracket, if any</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	List    []*Field  <span class="comment">// field list; or nil</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	Closing token.Pos <span class="comment">// position of closing parenthesis/brace/bracket, if any</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>func (f *FieldList) Pos() token.Pos {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	if f.Opening.IsValid() {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		return f.Opening
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// the list should not be empty in this case;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// be conservative and guard against bad ASTs</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if len(f.List) &gt; 0 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return f.List[0].Pos()
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return token.NoPos
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func (f *FieldList) End() token.Pos {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if f.Closing.IsValid() {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return f.Closing + 1
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// the list should not be empty in this case;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// be conservative and guard against bad ASTs</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if n := len(f.List); n &gt; 0 {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return f.List[n-1].End()
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	return token.NoPos
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// NumFields returns the number of parameters or struct fields represented by a [FieldList].</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (f *FieldList) NumFields() int {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	n := 0
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if f != nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		for _, g := range f.List {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			m := len(g.Names)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			if m == 0 {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				m = 1
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			n += m
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return n
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// An expression is represented by a tree consisting of one</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// or more of the following concrete expression nodes.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>type (
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// A BadExpr node is a placeholder for an expression containing</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// syntax errors for which a correct expression node cannot be</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// created.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	BadExpr struct {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		From, To token.Pos <span class="comment">// position range of bad expression</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// An Ident node represents an identifier.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	Ident struct {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		NamePos token.Pos <span class="comment">// identifier position</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		Name    string    <span class="comment">// identifier name</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		Obj     *Object   <span class="comment">// denoted object, or nil. Deprecated: see Object.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	<span class="comment">// An Ellipsis node stands for the &#34;...&#34; type in a</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// parameter list or the &#34;...&#34; length in an array type.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	Ellipsis struct {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		Ellipsis token.Pos <span class="comment">// position of &#34;...&#34;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		Elt      Expr      <span class="comment">// ellipsis element type (parameter lists only); or nil</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// A BasicLit node represents a literal of basic type.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	BasicLit struct {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		ValuePos token.Pos   <span class="comment">// literal position</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		Kind     token.Token <span class="comment">// token.INT, token.FLOAT, token.IMAG, token.CHAR, or token.STRING</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		Value    string      <span class="comment">// literal string; e.g. 42, 0x7f, 3.14, 1e-9, 2.4i, &#39;a&#39;, &#39;\x7f&#39;, &#34;foo&#34; or `\m\n\o`</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// A FuncLit node represents a function literal.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	FuncLit struct {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		Type *FuncType  <span class="comment">// function type</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		Body *BlockStmt <span class="comment">// function body</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// A CompositeLit node represents a composite literal.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	CompositeLit struct {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		Type       Expr      <span class="comment">// literal type; or nil</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		Lbrace     token.Pos <span class="comment">// position of &#34;{&#34;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		Elts       []Expr    <span class="comment">// list of composite elements; or nil</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		Rbrace     token.Pos <span class="comment">// position of &#34;}&#34;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		Incomplete bool      <span class="comment">// true if (source) expressions are missing in the Elts list</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// A ParenExpr node represents a parenthesized expression.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	ParenExpr struct {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		Lparen token.Pos <span class="comment">// position of &#34;(&#34;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		X      Expr      <span class="comment">// parenthesized expression</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		Rparen token.Pos <span class="comment">// position of &#34;)&#34;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// A SelectorExpr node represents an expression followed by a selector.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	SelectorExpr struct {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		X   Expr   <span class="comment">// expression</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		Sel *Ident <span class="comment">// field selector</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// An IndexExpr node represents an expression followed by an index.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	IndexExpr struct {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		X      Expr      <span class="comment">// expression</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		Lbrack token.Pos <span class="comment">// position of &#34;[&#34;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		Index  Expr      <span class="comment">// index expression</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		Rbrack token.Pos <span class="comment">// position of &#34;]&#34;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// An IndexListExpr node represents an expression followed by multiple</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// indices.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	IndexListExpr struct {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		X       Expr      <span class="comment">// expression</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		Lbrack  token.Pos <span class="comment">// position of &#34;[&#34;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		Indices []Expr    <span class="comment">// index expressions</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		Rbrack  token.Pos <span class="comment">// position of &#34;]&#34;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">// A SliceExpr node represents an expression followed by slice indices.</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	SliceExpr struct {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		X      Expr      <span class="comment">// expression</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		Lbrack token.Pos <span class="comment">// position of &#34;[&#34;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		Low    Expr      <span class="comment">// begin of slice range; or nil</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		High   Expr      <span class="comment">// end of slice range; or nil</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		Max    Expr      <span class="comment">// maximum capacity of slice; or nil</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		Slice3 bool      <span class="comment">// true if 3-index slice (2 colons present)</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		Rbrack token.Pos <span class="comment">// position of &#34;]&#34;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// A TypeAssertExpr node represents an expression followed by a</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// type assertion.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	TypeAssertExpr struct {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		X      Expr      <span class="comment">// expression</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		Lparen token.Pos <span class="comment">// position of &#34;(&#34;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		Type   Expr      <span class="comment">// asserted type; nil means type switch X.(type)</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		Rparen token.Pos <span class="comment">// position of &#34;)&#34;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">// A CallExpr node represents an expression followed by an argument list.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	CallExpr struct {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		Fun      Expr      <span class="comment">// function expression</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		Lparen   token.Pos <span class="comment">// position of &#34;(&#34;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		Args     []Expr    <span class="comment">// function arguments; or nil</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		Ellipsis token.Pos <span class="comment">// position of &#34;...&#34; (token.NoPos if there is no &#34;...&#34;)</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		Rparen   token.Pos <span class="comment">// position of &#34;)&#34;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	<span class="comment">// A StarExpr node represents an expression of the form &#34;*&#34; Expression.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// Semantically it could be a unary &#34;*&#34; expression, or a pointer type.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	StarExpr struct {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		Star token.Pos <span class="comment">// position of &#34;*&#34;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		X    Expr      <span class="comment">// operand</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	<span class="comment">// A UnaryExpr node represents a unary expression.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	<span class="comment">// Unary &#34;*&#34; expressions are represented via StarExpr nodes.</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	UnaryExpr struct {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		OpPos token.Pos   <span class="comment">// position of Op</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		Op    token.Token <span class="comment">// operator</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		X     Expr        <span class="comment">// operand</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	<span class="comment">// A BinaryExpr node represents a binary expression.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	BinaryExpr struct {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		X     Expr        <span class="comment">// left operand</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		OpPos token.Pos   <span class="comment">// position of Op</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		Op    token.Token <span class="comment">// operator</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		Y     Expr        <span class="comment">// right operand</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// A KeyValueExpr node represents (key : value) pairs</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	<span class="comment">// in composite literals.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	KeyValueExpr struct {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		Key   Expr
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		Colon token.Pos <span class="comment">// position of &#34;:&#34;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		Value Expr
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// The direction of a channel type is indicated by a bit</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// mask including one or both of the following constants.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>type ChanDir int
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>const (
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	SEND ChanDir = 1 &lt;&lt; iota
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	RECV
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">// A type is represented by a tree consisting of one</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// or more of the following type-specific expression</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">// nodes.</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>type (
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">// An ArrayType node represents an array or slice type.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	ArrayType struct {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		Lbrack token.Pos <span class="comment">// position of &#34;[&#34;</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		Len    Expr      <span class="comment">// Ellipsis node for [...]T array types, nil for slice types</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		Elt    Expr      <span class="comment">// element type</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// A StructType node represents a struct type.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	StructType struct {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		Struct     token.Pos  <span class="comment">// position of &#34;struct&#34; keyword</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		Fields     *FieldList <span class="comment">// list of field declarations</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		Incomplete bool       <span class="comment">// true if (source) fields are missing in the Fields list</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// Pointer types are represented via StarExpr nodes.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	<span class="comment">// A FuncType node represents a function type.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	FuncType struct {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		Func       token.Pos  <span class="comment">// position of &#34;func&#34; keyword (token.NoPos if there is no &#34;func&#34;)</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		TypeParams *FieldList <span class="comment">// type parameters; or nil</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		Params     *FieldList <span class="comment">// (incoming) parameters; non-nil</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		Results    *FieldList <span class="comment">// (outgoing) results; or nil</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	<span class="comment">// An InterfaceType node represents an interface type.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	InterfaceType struct {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		Interface  token.Pos  <span class="comment">// position of &#34;interface&#34; keyword</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		Methods    *FieldList <span class="comment">// list of embedded interfaces, methods, or types</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		Incomplete bool       <span class="comment">// true if (source) methods or types are missing in the Methods list</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">// A MapType node represents a map type.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	MapType struct {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		Map   token.Pos <span class="comment">// position of &#34;map&#34; keyword</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		Key   Expr
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		Value Expr
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">// A ChanType node represents a channel type.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	ChanType struct {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		Begin token.Pos <span class="comment">// position of &#34;chan&#34; keyword or &#34;&lt;-&#34; (whichever comes first)</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		Arrow token.Pos <span class="comment">// position of &#34;&lt;-&#34; (token.NoPos if there is no &#34;&lt;-&#34;)</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		Dir   ChanDir   <span class="comment">// channel direction</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		Value Expr      <span class="comment">// value type</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// Pos and End implementations for expression/type nodes.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>func (x *BadExpr) Pos() token.Pos  { return x.From }
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>func (x *Ident) Pos() token.Pos    { return x.NamePos }
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (x *Ellipsis) Pos() token.Pos { return x.Ellipsis }
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func (x *BasicLit) Pos() token.Pos { return x.ValuePos }
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>func (x *FuncLit) Pos() token.Pos  { return x.Type.Pos() }
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func (x *CompositeLit) Pos() token.Pos {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if x.Type != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		return x.Type.Pos()
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	return x.Lbrace
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>func (x *ParenExpr) Pos() token.Pos      { return x.Lparen }
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>func (x *SelectorExpr) Pos() token.Pos   { return x.X.Pos() }
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func (x *IndexExpr) Pos() token.Pos      { return x.X.Pos() }
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>func (x *IndexListExpr) Pos() token.Pos  { return x.X.Pos() }
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (x *SliceExpr) Pos() token.Pos      { return x.X.Pos() }
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>func (x *TypeAssertExpr) Pos() token.Pos { return x.X.Pos() }
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>func (x *CallExpr) Pos() token.Pos       { return x.Fun.Pos() }
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>func (x *StarExpr) Pos() token.Pos       { return x.Star }
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (x *UnaryExpr) Pos() token.Pos      { return x.OpPos }
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>func (x *BinaryExpr) Pos() token.Pos     { return x.X.Pos() }
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (x *KeyValueExpr) Pos() token.Pos   { return x.Key.Pos() }
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>func (x *ArrayType) Pos() token.Pos      { return x.Lbrack }
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>func (x *StructType) Pos() token.Pos     { return x.Struct }
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func (x *FuncType) Pos() token.Pos {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	if x.Func.IsValid() || x.Params == nil { <span class="comment">// see issue 3870</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		return x.Func
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	return x.Params.Pos() <span class="comment">// interface method declarations have no &#34;func&#34; keyword</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func (x *InterfaceType) Pos() token.Pos { return x.Interface }
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>func (x *MapType) Pos() token.Pos       { return x.Map }
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>func (x *ChanType) Pos() token.Pos      { return x.Begin }
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>func (x *BadExpr) End() token.Pos { return x.To }
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>func (x *Ident) End() token.Pos   { return token.Pos(int(x.NamePos) + len(x.Name)) }
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>func (x *Ellipsis) End() token.Pos {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	if x.Elt != nil {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		return x.Elt.End()
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	return x.Ellipsis + 3 <span class="comment">// len(&#34;...&#34;)</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>func (x *BasicLit) End() token.Pos       { return token.Pos(int(x.ValuePos) + len(x.Value)) }
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>func (x *FuncLit) End() token.Pos        { return x.Body.End() }
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>func (x *CompositeLit) End() token.Pos   { return x.Rbrace + 1 }
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>func (x *ParenExpr) End() token.Pos      { return x.Rparen + 1 }
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>func (x *SelectorExpr) End() token.Pos   { return x.Sel.End() }
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>func (x *IndexExpr) End() token.Pos      { return x.Rbrack + 1 }
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func (x *IndexListExpr) End() token.Pos  { return x.Rbrack + 1 }
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>func (x *SliceExpr) End() token.Pos      { return x.Rbrack + 1 }
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>func (x *TypeAssertExpr) End() token.Pos { return x.Rparen + 1 }
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>func (x *CallExpr) End() token.Pos       { return x.Rparen + 1 }
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>func (x *StarExpr) End() token.Pos       { return x.X.End() }
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>func (x *UnaryExpr) End() token.Pos      { return x.X.End() }
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>func (x *BinaryExpr) End() token.Pos     { return x.Y.End() }
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>func (x *KeyValueExpr) End() token.Pos   { return x.Value.End() }
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>func (x *ArrayType) End() token.Pos      { return x.Elt.End() }
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>func (x *StructType) End() token.Pos     { return x.Fields.End() }
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>func (x *FuncType) End() token.Pos {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	if x.Results != nil {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		return x.Results.End()
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	return x.Params.End()
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func (x *InterfaceType) End() token.Pos { return x.Methods.End() }
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>func (x *MapType) End() token.Pos       { return x.Value.End() }
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>func (x *ChanType) End() token.Pos      { return x.Value.End() }
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// exprNode() ensures that only expression/type nodes can be</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// assigned to an Expr.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>func (*BadExpr) exprNode()        {}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>func (*Ident) exprNode()          {}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>func (*Ellipsis) exprNode()       {}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>func (*BasicLit) exprNode()       {}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>func (*FuncLit) exprNode()        {}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>func (*CompositeLit) exprNode()   {}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>func (*ParenExpr) exprNode()      {}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>func (*SelectorExpr) exprNode()   {}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>func (*IndexExpr) exprNode()      {}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func (*IndexListExpr) exprNode()  {}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>func (*SliceExpr) exprNode()      {}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>func (*TypeAssertExpr) exprNode() {}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>func (*CallExpr) exprNode()       {}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>func (*StarExpr) exprNode()       {}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>func (*UnaryExpr) exprNode()      {}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>func (*BinaryExpr) exprNode()     {}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>func (*KeyValueExpr) exprNode()   {}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>func (*ArrayType) exprNode()     {}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>func (*StructType) exprNode()    {}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>func (*FuncType) exprNode()      {}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func (*InterfaceType) exprNode() {}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>func (*MapType) exprNode()       {}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func (*ChanType) exprNode()      {}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// Convenience functions for Idents</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// NewIdent creates a new [Ident] without position.</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// Useful for ASTs generated by code other than the Go parser.</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>func NewIdent(name string) *Ident { return &amp;Ident{token.NoPos, name, nil} }
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// IsExported reports whether name starts with an upper-case letter.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>func IsExported(name string) bool { return token.IsExported(name) }
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">// IsExported reports whether id starts with an upper-case letter.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>func (id *Ident) IsExported() bool { return token.IsExported(id.Name) }
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>func (id *Ident) String() string {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if id != nil {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		return id.Name
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	return &#34;&lt;nil&gt;&#34;
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// Statements</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">// A statement is represented by a tree consisting of one</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// or more of the following concrete statement nodes.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>type (
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	<span class="comment">// A BadStmt node is a placeholder for statements containing</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// syntax errors for which no correct statement nodes can be</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// created.</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	BadStmt struct {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		From, To token.Pos <span class="comment">// position range of bad statement</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	<span class="comment">// A DeclStmt node represents a declaration in a statement list.</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	DeclStmt struct {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		Decl Decl <span class="comment">// *GenDecl with CONST, TYPE, or VAR token</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	<span class="comment">// An EmptyStmt node represents an empty statement.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// The &#34;position&#34; of the empty statement is the position</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	<span class="comment">// of the immediately following (explicit or implicit) semicolon.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	EmptyStmt struct {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		Semicolon token.Pos <span class="comment">// position of following &#34;;&#34;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		Implicit  bool      <span class="comment">// if set, &#34;;&#34; was omitted in the source</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// A LabeledStmt node represents a labeled statement.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	LabeledStmt struct {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		Label *Ident
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		Colon token.Pos <span class="comment">// position of &#34;:&#34;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		Stmt  Stmt
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	<span class="comment">// An ExprStmt node represents a (stand-alone) expression</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	<span class="comment">// in a statement list.</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	ExprStmt struct {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		X Expr <span class="comment">// expression</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	<span class="comment">// A SendStmt node represents a send statement.</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	SendStmt struct {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		Chan  Expr
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		Arrow token.Pos <span class="comment">// position of &#34;&lt;-&#34;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		Value Expr
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	<span class="comment">// An IncDecStmt node represents an increment or decrement statement.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	IncDecStmt struct {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		X      Expr
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		TokPos token.Pos   <span class="comment">// position of Tok</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		Tok    token.Token <span class="comment">// INC or DEC</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	<span class="comment">// An AssignStmt node represents an assignment or</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	<span class="comment">// a short variable declaration.</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	AssignStmt struct {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		Lhs    []Expr
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		TokPos token.Pos   <span class="comment">// position of Tok</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		Tok    token.Token <span class="comment">// assignment token, DEFINE</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		Rhs    []Expr
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	<span class="comment">// A GoStmt node represents a go statement.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	GoStmt struct {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		Go   token.Pos <span class="comment">// position of &#34;go&#34; keyword</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		Call *CallExpr
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	<span class="comment">// A DeferStmt node represents a defer statement.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	DeferStmt struct {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		Defer token.Pos <span class="comment">// position of &#34;defer&#34; keyword</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		Call  *CallExpr
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	<span class="comment">// A ReturnStmt node represents a return statement.</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	<span class="selection">ReturnStmt struct {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		Return  token.Pos </span><span class="selection-comment">// position of &#34;return&#34; keyword</span><span class="selection">
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		Results []Expr    </span><span class="selection-comment">// result expressions; or nil</span><span class="selection">
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	}</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	<span class="comment">// A BranchStmt node represents a break, continue, goto,</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	<span class="comment">// or fallthrough statement.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	BranchStmt struct {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		TokPos token.Pos   <span class="comment">// position of Tok</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		Tok    token.Token <span class="comment">// keyword token (BREAK, CONTINUE, GOTO, FALLTHROUGH)</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		Label  *Ident      <span class="comment">// label name; or nil</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	<span class="comment">// A BlockStmt node represents a braced statement list.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	BlockStmt struct {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		Lbrace token.Pos <span class="comment">// position of &#34;{&#34;</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		List   []Stmt
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		Rbrace token.Pos <span class="comment">// position of &#34;}&#34;, if any (may be absent due to syntax error)</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	<span class="comment">// An IfStmt node represents an if statement.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	IfStmt struct {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		If   token.Pos <span class="comment">// position of &#34;if&#34; keyword</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		Init Stmt      <span class="comment">// initialization statement; or nil</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		Cond Expr      <span class="comment">// condition</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		Body *BlockStmt
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		Else Stmt <span class="comment">// else branch; or nil</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	<span class="comment">// A CaseClause represents a case of an expression or type switch statement.</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	CaseClause struct {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		Case  token.Pos <span class="comment">// position of &#34;case&#34; or &#34;default&#34; keyword</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		List  []Expr    <span class="comment">// list of expressions or types; nil means default case</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		Colon token.Pos <span class="comment">// position of &#34;:&#34;</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		Body  []Stmt    <span class="comment">// statement list; or nil</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	<span class="comment">// A SwitchStmt node represents an expression switch statement.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	SwitchStmt struct {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		Switch token.Pos  <span class="comment">// position of &#34;switch&#34; keyword</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		Init   Stmt       <span class="comment">// initialization statement; or nil</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		Tag    Expr       <span class="comment">// tag expression; or nil</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		Body   *BlockStmt <span class="comment">// CaseClauses only</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	<span class="comment">// A TypeSwitchStmt node represents a type switch statement.</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	TypeSwitchStmt struct {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		Switch token.Pos  <span class="comment">// position of &#34;switch&#34; keyword</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		Init   Stmt       <span class="comment">// initialization statement; or nil</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		Assign Stmt       <span class="comment">// x := y.(type) or y.(type)</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		Body   *BlockStmt <span class="comment">// CaseClauses only</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	<span class="comment">// A CommClause node represents a case of a select statement.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	CommClause struct {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		Case  token.Pos <span class="comment">// position of &#34;case&#34; or &#34;default&#34; keyword</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		Comm  Stmt      <span class="comment">// send or receive statement; nil means default case</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		Colon token.Pos <span class="comment">// position of &#34;:&#34;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		Body  []Stmt    <span class="comment">// statement list; or nil</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	<span class="comment">// A SelectStmt node represents a select statement.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	SelectStmt struct {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		Select token.Pos  <span class="comment">// position of &#34;select&#34; keyword</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		Body   *BlockStmt <span class="comment">// CommClauses only</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	<span class="comment">// A ForStmt represents a for statement.</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	ForStmt struct {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		For  token.Pos <span class="comment">// position of &#34;for&#34; keyword</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		Init Stmt      <span class="comment">// initialization statement; or nil</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		Cond Expr      <span class="comment">// condition; or nil</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		Post Stmt      <span class="comment">// post iteration statement; or nil</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		Body *BlockStmt
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	}
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	<span class="comment">// A RangeStmt represents a for statement with a range clause.</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	RangeStmt struct {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		For        token.Pos   <span class="comment">// position of &#34;for&#34; keyword</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		Key, Value Expr        <span class="comment">// Key, Value may be nil</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		TokPos     token.Pos   <span class="comment">// position of Tok; invalid if Key == nil</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		Tok        token.Token <span class="comment">// ILLEGAL if Key == nil, ASSIGN, DEFINE</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		Range      token.Pos   <span class="comment">// position of &#34;range&#34; keyword</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		X          Expr        <span class="comment">// value to range over</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		Body       *BlockStmt
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span><span class="comment">// Pos and End implementations for statement nodes.</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>func (s *BadStmt) Pos() token.Pos        { return s.From }
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>func (s *DeclStmt) Pos() token.Pos       { return s.Decl.Pos() }
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func (s *EmptyStmt) Pos() token.Pos      { return s.Semicolon }
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>func (s *LabeledStmt) Pos() token.Pos    { return s.Label.Pos() }
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>func (s *ExprStmt) Pos() token.Pos       { return s.X.Pos() }
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>func (s *SendStmt) Pos() token.Pos       { return s.Chan.Pos() }
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>func (s *IncDecStmt) Pos() token.Pos     { return s.X.Pos() }
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>func (s *AssignStmt) Pos() token.Pos     { return s.Lhs[0].Pos() }
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>func (s *GoStmt) Pos() token.Pos         { return s.Go }
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>func (s *DeferStmt) Pos() token.Pos      { return s.Defer }
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>func (s *ReturnStmt) Pos() token.Pos     { return s.Return }
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>func (s *BranchStmt) Pos() token.Pos     { return s.TokPos }
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>func (s *BlockStmt) Pos() token.Pos      { return s.Lbrace }
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>func (s *IfStmt) Pos() token.Pos         { return s.If }
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>func (s *CaseClause) Pos() token.Pos     { return s.Case }
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>func (s *SwitchStmt) Pos() token.Pos     { return s.Switch }
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>func (s *TypeSwitchStmt) Pos() token.Pos { return s.Switch }
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>func (s *CommClause) Pos() token.Pos     { return s.Case }
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>func (s *SelectStmt) Pos() token.Pos     { return s.Select }
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>func (s *ForStmt) Pos() token.Pos        { return s.For }
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>func (s *RangeStmt) Pos() token.Pos      { return s.For }
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>func (s *BadStmt) End() token.Pos  { return s.To }
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>func (s *DeclStmt) End() token.Pos { return s.Decl.End() }
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>func (s *EmptyStmt) End() token.Pos {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	if s.Implicit {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		return s.Semicolon
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	return s.Semicolon + 1 <span class="comment">/* len(&#34;;&#34;) */</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func (s *LabeledStmt) End() token.Pos { return s.Stmt.End() }
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>func (s *ExprStmt) End() token.Pos    { return s.X.End() }
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>func (s *SendStmt) End() token.Pos    { return s.Value.End() }
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>func (s *IncDecStmt) End() token.Pos {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	return s.TokPos + 2 <span class="comment">/* len(&#34;++&#34;) */</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>func (s *AssignStmt) End() token.Pos { return s.Rhs[len(s.Rhs)-1].End() }
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>func (s *GoStmt) End() token.Pos     { return s.Call.End() }
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>func (s *DeferStmt) End() token.Pos  { return s.Call.End() }
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>func (s *ReturnStmt) End() token.Pos {
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	if n := len(s.Results); n &gt; 0 {
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		return s.Results[n-1].End()
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	}
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	return s.Return + 6 <span class="comment">// len(&#34;return&#34;)</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func (s *BranchStmt) End() token.Pos {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if s.Label != nil {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		return s.Label.End()
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	return token.Pos(int(s.TokPos) + len(s.Tok.String()))
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>func (s *BlockStmt) End() token.Pos {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if s.Rbrace.IsValid() {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		return s.Rbrace + 1
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	if n := len(s.List); n &gt; 0 {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		return s.List[n-1].End()
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	return s.Lbrace + 1
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>func (s *IfStmt) End() token.Pos {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	if s.Else != nil {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		return s.Else.End()
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	return s.Body.End()
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>func (s *CaseClause) End() token.Pos {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	if n := len(s.Body); n &gt; 0 {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		return s.Body[n-1].End()
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	return s.Colon + 1
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>func (s *SwitchStmt) End() token.Pos     { return s.Body.End() }
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>func (s *TypeSwitchStmt) End() token.Pos { return s.Body.End() }
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>func (s *CommClause) End() token.Pos {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	if n := len(s.Body); n &gt; 0 {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		return s.Body[n-1].End()
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	return s.Colon + 1
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>func (s *SelectStmt) End() token.Pos { return s.Body.End() }
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>func (s *ForStmt) End() token.Pos    { return s.Body.End() }
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>func (s *RangeStmt) End() token.Pos  { return s.Body.End() }
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span><span class="comment">// stmtNode() ensures that only statement nodes can be</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span><span class="comment">// assigned to a Stmt.</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>func (*BadStmt) stmtNode()        {}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>func (*DeclStmt) stmtNode()       {}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>func (*EmptyStmt) stmtNode()      {}
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>func (*LabeledStmt) stmtNode()    {}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>func (*ExprStmt) stmtNode()       {}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>func (*SendStmt) stmtNode()       {}
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>func (*IncDecStmt) stmtNode()     {}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>func (*AssignStmt) stmtNode()     {}
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>func (*GoStmt) stmtNode()         {}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>func (*DeferStmt) stmtNode()      {}
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>func (*ReturnStmt) stmtNode()     {}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>func (*BranchStmt) stmtNode()     {}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>func (*BlockStmt) stmtNode()      {}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>func (*IfStmt) stmtNode()         {}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>func (*CaseClause) stmtNode()     {}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>func (*SwitchStmt) stmtNode()     {}
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>func (*TypeSwitchStmt) stmtNode() {}
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>func (*CommClause) stmtNode()     {}
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>func (*SelectStmt) stmtNode()     {}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>func (*ForStmt) stmtNode()        {}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>func (*RangeStmt) stmtNode()      {}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// Declarations</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// A Spec node represents a single (non-parenthesized) import,</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// constant, type, or variable declaration.</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>type (
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	<span class="comment">// The Spec type stands for any of *ImportSpec, *ValueSpec, and *TypeSpec.</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	Spec interface {
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>		Node
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>		specNode()
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	}
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	<span class="comment">// An ImportSpec node represents a single package import.</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	ImportSpec struct {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		Doc     *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		Name    *Ident        <span class="comment">// local package name (including &#34;.&#34;); or nil</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		Path    *BasicLit     <span class="comment">// import path</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		Comment *CommentGroup <span class="comment">// line comments; or nil</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		EndPos  token.Pos     <span class="comment">// end of spec (overrides Path.Pos if nonzero)</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	}
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	<span class="comment">// A ValueSpec node represents a constant or variable declaration</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	<span class="comment">// (ConstSpec or VarSpec production).</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	ValueSpec struct {
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		Doc     *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		Names   []*Ident      <span class="comment">// value names (len(Names) &gt; 0)</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		Type    Expr          <span class="comment">// value type; or nil</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		Values  []Expr        <span class="comment">// initial values; or nil</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		Comment *CommentGroup <span class="comment">// line comments; or nil</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	<span class="comment">// A TypeSpec node represents a type declaration (TypeSpec production).</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>	TypeSpec struct {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		Doc        *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		Name       *Ident        <span class="comment">// type name</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		TypeParams *FieldList    <span class="comment">// type parameters; or nil</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		Assign     token.Pos     <span class="comment">// position of &#39;=&#39;, if any</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		Type       Expr          <span class="comment">// *Ident, *ParenExpr, *SelectorExpr, *StarExpr, or any of the *XxxTypes</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		Comment    *CommentGroup <span class="comment">// line comments; or nil</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>)
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span><span class="comment">// Pos and End implementations for spec nodes.</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>func (s *ImportSpec) Pos() token.Pos {
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	if s.Name != nil {
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		return s.Name.Pos()
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	}
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	return s.Path.Pos()
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>func (s *ValueSpec) Pos() token.Pos { return s.Names[0].Pos() }
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>func (s *TypeSpec) Pos() token.Pos  { return s.Name.Pos() }
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>func (s *ImportSpec) End() token.Pos {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	if s.EndPos != 0 {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		return s.EndPos
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	return s.Path.End()
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>func (s *ValueSpec) End() token.Pos {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	if n := len(s.Values); n &gt; 0 {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		return s.Values[n-1].End()
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	if s.Type != nil {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		return s.Type.End()
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	return s.Names[len(s.Names)-1].End()
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>}
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func (s *TypeSpec) End() token.Pos { return s.Type.End() }
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span><span class="comment">// specNode() ensures that only spec nodes can be</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span><span class="comment">// assigned to a Spec.</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>func (*ImportSpec) specNode() {}
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>func (*ValueSpec) specNode()  {}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>func (*TypeSpec) specNode()   {}
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span><span class="comment">// A declaration is represented by one of the following declaration nodes.</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>type (
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	<span class="comment">// A BadDecl node is a placeholder for a declaration containing</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	<span class="comment">// syntax errors for which a correct declaration node cannot be</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	<span class="comment">// created.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	BadDecl struct {
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		From, To token.Pos <span class="comment">// position range of bad declaration</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	}
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	<span class="comment">// A GenDecl node (generic declaration node) represents an import,</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	<span class="comment">// constant, type or variable declaration. A valid Lparen position</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	<span class="comment">// (Lparen.IsValid()) indicates a parenthesized declaration.</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	<span class="comment">// Relationship between Tok value and Specs element type:</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	<span class="comment">//	token.IMPORT  *ImportSpec</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	<span class="comment">//	token.CONST   *ValueSpec</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>	<span class="comment">//	token.TYPE    *TypeSpec</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	<span class="comment">//	token.VAR     *ValueSpec</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>	GenDecl struct {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		Doc    *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		TokPos token.Pos     <span class="comment">// position of Tok</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		Tok    token.Token   <span class="comment">// IMPORT, CONST, TYPE, or VAR</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		Lparen token.Pos     <span class="comment">// position of &#39;(&#39;, if any</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		Specs  []Spec
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		Rparen token.Pos <span class="comment">// position of &#39;)&#39;, if any</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	}
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	<span class="comment">// A FuncDecl node represents a function declaration.</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	FuncDecl struct {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		Doc  *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		Recv *FieldList    <span class="comment">// receiver (methods); or nil (functions)</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		Name *Ident        <span class="comment">// function/method name</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		Type *FuncType     <span class="comment">// function signature: type and value parameters, results, and position of &#34;func&#34; keyword</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		Body *BlockStmt    <span class="comment">// function body; or nil for external (non-Go) function</span>
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span><span class="comment">// Pos and End implementations for declaration nodes.</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>func (d *BadDecl) Pos() token.Pos  { return d.From }
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>func (d *GenDecl) Pos() token.Pos  { return d.TokPos }
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>func (d *FuncDecl) Pos() token.Pos { return d.Type.Pos() }
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>func (d *BadDecl) End() token.Pos { return d.To }
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>func (d *GenDecl) End() token.Pos {
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	if d.Rparen.IsValid() {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		return d.Rparen + 1
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	}
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return d.Specs[0].End()
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>func (d *FuncDecl) End() token.Pos {
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	if d.Body != nil {
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		return d.Body.End()
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>	}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	return d.Type.End()
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>}
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">// declNode() ensures that only declaration nodes can be</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span><span class="comment">// assigned to a Decl.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>func (*BadDecl) declNode()  {}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>func (*GenDecl) declNode()  {}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>func (*FuncDecl) declNode() {}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span><span class="comment">// Files and packages</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span><span class="comment">// A File node represents a Go source file.</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span><span class="comment">// The Comments list contains all comments in the source file in order of</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span><span class="comment">// appearance, including the comments that are pointed to from other nodes</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span><span class="comment">// via Doc and Comment fields.</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span><span class="comment">// For correct printing of source code containing comments (using packages</span>
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span><span class="comment">// go/format and go/printer), special care must be taken to update comments</span>
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span><span class="comment">// when a File&#39;s syntax tree is modified: For printing, comments are interspersed</span>
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span><span class="comment">// between tokens based on their position. If syntax tree nodes are</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span><span class="comment">// removed or moved, relevant comments in their vicinity must also be removed</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span><span class="comment">// (from the [File.Comments] list) or moved accordingly (by updating their</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span><span class="comment">// positions). A [CommentMap] may be used to facilitate some of these operations.</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span><span class="comment">// Whether and how a comment is associated with a node depends on the</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">// interpretation of the syntax tree by the manipulating program: Except for Doc</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">// and [Comment] comments directly associated with nodes, the remaining comments</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">// are &#34;free-floating&#34; (see also issues #18593, #20744).</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>type File struct {
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	Doc     *CommentGroup <span class="comment">// associated documentation; or nil</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	Package token.Pos     <span class="comment">// position of &#34;package&#34; keyword</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	Name    *Ident        <span class="comment">// package name</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	Decls   []Decl        <span class="comment">// top-level declarations; or nil</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	FileStart, FileEnd token.Pos       <span class="comment">// start and end of entire file</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	Scope              *Scope          <span class="comment">// package scope (this file only). Deprecated: see Object</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	Imports            []*ImportSpec   <span class="comment">// imports in this file</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	Unresolved         []*Ident        <span class="comment">// unresolved identifiers in this file. Deprecated: see Object</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	Comments           []*CommentGroup <span class="comment">// list of all comments in the source file</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	GoVersion          string          <span class="comment">// minimum Go version required by //go:build or // +build directives</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span><span class="comment">// Pos returns the position of the package declaration.</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span><span class="comment">// (Use FileStart for the start of the entire file.)</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>func (f *File) Pos() token.Pos { return f.Package }
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span><span class="comment">// End returns the end of the last declaration in the file.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span><span class="comment">// (Use FileEnd for the end of the entire file.)</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>func (f *File) End() token.Pos {
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	if n := len(f.Decls); n &gt; 0 {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		return f.Decls[n-1].End()
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	}
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	return f.Name.End()
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>}
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span><span class="comment">// A Package node represents a set of source files</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span><span class="comment">// collectively building a Go package.</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span><span class="comment">// Deprecated: use the type checker [go/types] instead; see [Object].</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>type Package struct {
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	Name    string             <span class="comment">// package name</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	Scope   *Scope             <span class="comment">// package scope across all files</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	Imports map[string]*Object <span class="comment">// map of package id -&gt; package object</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	Files   map[string]*File   <span class="comment">// Go source files by filename</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>}
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>func (p *Package) Pos() token.Pos { return token.NoPos }
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>func (p *Package) End() token.Pos { return token.NoPos }
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span><span class="comment">// IsGenerated reports whether the file was generated by a program,</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">// not handwritten, by detecting the special comment described</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">// at https://go.dev/s/generatedcode.</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span><span class="comment">// The syntax tree must have been parsed with the ParseComments flag.</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span><span class="comment">// Example:</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span><span class="comment">//	f, err := parser.ParseFile(fset, filename, src, parser.ParseComments|parser.PackageClauseOnly)</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span><span class="comment">//	if err != nil { ... }</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span><span class="comment">//	gen := ast.IsGenerated(f)</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>func IsGenerated(file *File) bool {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	_, ok := generator(file)
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	return ok
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>func generator(file *File) (string, bool) {
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	for _, group := range file.Comments {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		for _, comment := range group.List {
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>			if comment.Pos() &gt; file.Package {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>				break <span class="comment">// after package declaration</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>			}
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>			<span class="comment">// opt: check Contains first to avoid unnecessary array allocation in Split.</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>			const prefix = &#34;// Code generated &#34;
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>			if strings.Contains(comment.Text, prefix) {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>				for _, line := range strings.Split(comment.Text, &#34;\n&#34;) {
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>					if rest, ok := strings.CutPrefix(line, prefix); ok {
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>						if gen, ok := strings.CutSuffix(rest, &#34; DO NOT EDIT.&#34;); ok {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>							return gen, true
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>						}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>					}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>				}
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>			}
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		}
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	}
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	return &#34;&#34;, false
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>}
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span><span class="comment">// Unparen returns the expression with any enclosing parentheses removed.</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>func Unparen(e Expr) Expr {
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	for {
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>		paren, ok := e.(*ParenExpr)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		if !ok {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>			return e
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		e = paren.X
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>}
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>
</pre><p><a href="ast.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
