<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/ast/commentmap.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./commentmap.go?s=8575:8613#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/ast">ast</a>/<span class="text-muted">commentmap.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/ast">go/ast</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package ast
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type byPos []*CommentGroup
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>func (a byPos) Len() int           { return len(a) }
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func (a byPos) Less(i, j int) bool { return a[i].Pos() &lt; a[j].Pos() }
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func (a byPos) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// sortComments sorts the list of comment groups in source order.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>func sortComments(list []*CommentGroup) {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri): Does it make sense to check for sorted-ness</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">//            first (because we know that sorted-ness is</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">//            very likely)?</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	if orderedList := byPos(list); !sort.IsSorted(orderedList) {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		sort.Sort(orderedList)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// A CommentMap maps an AST node to a list of comment groups</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// associated with it. See [NewCommentMap] for a description of</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// the association.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>type CommentMap map[Node][]*CommentGroup
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>func (cmap CommentMap) addComment(n Node, c *CommentGroup) {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	list := cmap[n]
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	if len(list) == 0 {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		list = []*CommentGroup{c}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	} else {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		list = append(list, c)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	cmap[n] = list
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type byInterval []Node
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (a byInterval) Len() int { return len(a) }
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func (a byInterval) Less(i, j int) bool {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	pi, pj := a[i].Pos(), a[j].Pos()
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	return pi &lt; pj || pi == pj &amp;&amp; a[i].End() &gt; a[j].End()
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (a byInterval) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// nodeList returns the list of nodes of the AST n in source order.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func nodeList(n Node) []Node {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	var list []Node
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	Inspect(n, func(n Node) bool {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		<span class="comment">// don&#39;t collect comments</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		switch n.(type) {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		case nil, *CommentGroup, *Comment:
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			return false
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		list = append(list, n)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		return true
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	})
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// Note: The current implementation assumes that Inspect traverses the</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">//       AST in depth-first and thus _source_ order. If AST traversal</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">//       does not follow source order, the sorting call below will be</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">//       required.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// sort.Sort(byInterval(list))</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return list
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// A commentListReader helps iterating through a list of comment groups.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>type commentListReader struct {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	fset     *token.FileSet
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	list     []*CommentGroup
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	index    int
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	comment  *CommentGroup  <span class="comment">// comment group at current index</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	pos, end token.Position <span class="comment">// source interval of comment group at current index</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func (r *commentListReader) eol() bool {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	return r.index &gt;= len(r.list)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (r *commentListReader) next() {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if !r.eol() {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		r.comment = r.list[r.index]
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		r.pos = r.fset.Position(r.comment.Pos())
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		r.end = r.fset.Position(r.comment.End())
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		r.index++
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// A nodeStack keeps track of nested nodes.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// A node lower on the stack lexically contains the nodes higher on the stack.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>type nodeStack []Node
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// push pops all nodes that appear lexically before n</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// and then pushes n on the stack.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (s *nodeStack) push(n Node) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	s.pop(n.Pos())
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	*s = append((*s), n)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// pop pops all nodes that appear lexically before pos</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// (i.e., whose lexical extent has ended before or at pos).</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// It returns the last node popped.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>func (s *nodeStack) pop(pos token.Pos) (top Node) {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	i := len(*s)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; (*s)[i-1].End() &lt;= pos {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		top = (*s)[i-1]
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		i--
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	*s = (*s)[0:i]
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return top
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// NewCommentMap creates a new comment map by associating comment groups</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// of the comments list with the nodes of the AST specified by node.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// A comment group g is associated with a node n if:</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">//   - g starts on the same line as n ends</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">//   - g starts on the line immediately following n, and there is</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">//     at least one empty line after g and before the next node</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//   - g starts before n and is not associated to the node before n</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//     via the previous rules</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// NewCommentMap tries to associate a comment group to the &#34;largest&#34;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// node possible: For instance, if the comment is a line comment</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// trailing an assignment, the comment is associated with the entire</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// assignment rather than just the last operand in the assignment.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>func NewCommentMap(fset *token.FileSet, node Node, comments []*CommentGroup) CommentMap {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if len(comments) == 0 {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return nil <span class="comment">// no comments to map</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	cmap := make(CommentMap)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// set up comment reader r</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	tmp := make([]*CommentGroup, len(comments))
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	copy(tmp, comments) <span class="comment">// don&#39;t change incoming comments</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	sortComments(tmp)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	r := commentListReader{fset: fset, list: tmp} <span class="comment">// !r.eol() because len(comments) &gt; 0</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	r.next()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// create node list in lexical order</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	nodes := nodeList(node)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	nodes = append(nodes, nil) <span class="comment">// append sentinel</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// set up iteration variables</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	var (
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		p     Node           <span class="comment">// previous node</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		pend  token.Position <span class="comment">// end of p</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		pg    Node           <span class="comment">// previous node group (enclosing nodes of &#34;importance&#34;)</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		pgend token.Position <span class="comment">// end of pg</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		stack nodeStack      <span class="comment">// stack of node groups</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	for _, q := range nodes {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		var qpos token.Position
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		if q != nil {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			qpos = fset.Position(q.Pos()) <span class="comment">// current node position</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		} else {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			<span class="comment">// set fake sentinel position to infinity so that</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			<span class="comment">// all comments get processed before the sentinel</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			const infinity = 1 &lt;&lt; 30
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			qpos.Offset = infinity
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			qpos.Line = infinity
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		<span class="comment">// process comments before current node</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		for r.end.Offset &lt;= qpos.Offset {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			<span class="comment">// determine recent node group</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			if top := stack.pop(r.comment.Pos()); top != nil {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				pg = top
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>				pgend = fset.Position(pg.End())
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			<span class="comment">// Try to associate a comment first with a node group</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			<span class="comment">// (i.e., a node of &#34;importance&#34; such as a declaration);</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			<span class="comment">// if that fails, try to associate it with the most recent</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			<span class="comment">// node.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) try to simplify the logic below</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			var assoc Node
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			switch {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			case pg != nil &amp;&amp;
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>				(pgend.Line == r.pos.Line ||
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>					pgend.Line+1 == r.pos.Line &amp;&amp; r.end.Line+1 &lt; qpos.Line):
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>				<span class="comment">// 1) comment starts on same line as previous node group ends, or</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>				<span class="comment">// 2) comment starts on the line immediately after the</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				<span class="comment">//    previous node group and there is an empty line before</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>				<span class="comment">//    the current node</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>				<span class="comment">// =&gt; associate comment with previous node group</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>				assoc = pg
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			case p != nil &amp;&amp;
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>				(pend.Line == r.pos.Line ||
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>					pend.Line+1 == r.pos.Line &amp;&amp; r.end.Line+1 &lt; qpos.Line ||
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>					q == nil):
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				<span class="comment">// same rules apply as above for p rather than pg,</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>				<span class="comment">// but also associate with p if we are at the end (q == nil)</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				assoc = p
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			default:
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>				<span class="comment">// otherwise, associate comment with current node</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>				if q == nil {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>					<span class="comment">// we can only reach here if there was no p</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>					<span class="comment">// which would imply that there were no nodes</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>					panic(&#34;internal error: no comments should be associated with sentinel&#34;)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>				}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>				assoc = q
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			cmap.addComment(assoc, r.comment)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			if r.eol() {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				return cmap
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			r.next()
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		<span class="comment">// update previous node</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		p = q
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		pend = fset.Position(p.End())
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		<span class="comment">// update previous node group if we see an &#34;important&#34; node</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		switch q.(type) {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		case *File, *Field, Decl, Spec, Stmt:
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			stack.push(q)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	return cmap
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// Update replaces an old node in the comment map with the new node</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// and returns the new node. Comments that were associated with the</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// old node are associated with the new node.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func (cmap CommentMap) Update(old, new Node) Node {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	if list := cmap[old]; len(list) &gt; 0 {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		delete(cmap, old)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		cmap[new] = append(cmap[new], list...)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	return new
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// Filter returns a new comment map consisting of only those</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// entries of cmap for which a corresponding node exists in</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// the AST specified by node.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func (cmap CommentMap) Filter(node Node) CommentMap {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	umap := make(CommentMap)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	Inspect(node, func(n Node) bool {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if g := cmap[n]; len(g) &gt; 0 {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			umap[n] = g
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return true
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	})
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	return umap
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// Comments returns the list of comment groups in the comment map.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// The result is sorted in source order.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func (cmap CommentMap) Comments() []*CommentGroup {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	list := make([]*CommentGroup, 0, len(cmap))
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	for _, e := range cmap {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		list = append(list, e...)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	sortComments(list)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	return list
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func summary(list []*CommentGroup) string {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	const maxLen = 40
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// collect comments text</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>loop:
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	for _, group := range list {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		<span class="comment">// Note: CommentGroup.Text() does too much work for what we</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		<span class="comment">//       need and would only replace this innermost loop.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		<span class="comment">//       Just do it explicitly.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		for _, comment := range group.List {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			if buf.Len() &gt;= maxLen {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>				break loop
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			buf.WriteString(comment.Text)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// truncate if too long</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	if buf.Len() &gt; maxLen {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		buf.Truncate(maxLen - 3)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		buf.WriteString(&#34;...&#34;)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// replace any invisibles with blanks</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	bytes := buf.Bytes()
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	for i, b := range bytes {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		switch b {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		case &#39;\t&#39;, &#39;\n&#39;, &#39;\r&#39;:
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			bytes[i] = &#39; &#39;
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	return string(bytes)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="selection">func (cmap CommentMap) String() string</span> {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// print map entries in sorted order</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	var nodes []Node
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for node := range cmap {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		nodes = append(nodes, node)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	sort.Sort(byInterval(nodes))
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	fmt.Fprintln(&amp;buf, &#34;CommentMap {&#34;)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	for _, node := range nodes {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		comment := cmap[node]
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		<span class="comment">// print name of identifiers; print node type for other nodes</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		var s string
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		if ident, ok := node.(*Ident); ok {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			s = ident.Name
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		} else {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			s = fmt.Sprintf(&#34;%T&#34;, node)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34;\t%p  %20s:  %s\n&#34;, node, s, summary(comment))
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	fmt.Fprintln(&amp;buf, &#34;}&#34;)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return buf.String()
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
</pre><p><a href="commentmap.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
