<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/ast/scope.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./scope.go?s=3354:3388#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/ast">ast</a>/<span class="text-muted">scope.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/ast">go/ast</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements scopes and the objects they contain.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package ast
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A Scope maintains the set of named language entities declared</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// in the scope and a link to the immediately surrounding (outer)</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// scope.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Deprecated: use the type checker [go/types] instead; see [Object].</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>type Scope struct {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	Outer   *Scope
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Objects map[string]*Object
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>}
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// NewScope creates a new scope nested in the outer scope.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>func NewScope(outer *Scope) *Scope {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	const n = 4 <span class="comment">// initial scope capacity</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	return &amp;Scope{outer, make(map[string]*Object, n)}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Lookup returns the object with the given name if it is</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// found in scope s, otherwise it returns nil. Outer scopes</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// are ignored.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func (s *Scope) Lookup(name string) *Object {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	return s.Objects[name]
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Insert attempts to insert a named object obj into the scope s.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// If the scope already contains an object alt with the same name,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// Insert leaves the scope unchanged and returns alt. Otherwise</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// it inserts obj and returns nil.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (s *Scope) Insert(obj *Object) (alt *Object) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	if alt = s.Objects[obj.Name]; alt == nil {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		s.Objects[obj.Name] = obj
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	return
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Debugging support</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (s *Scope) String() string {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;buf, &#34;scope %p {&#34;, s)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	if s != nil &amp;&amp; len(s.Objects) &gt; 0 {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		fmt.Fprintln(&amp;buf)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		for _, obj := range s.Objects {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;buf, &#34;\t%s %s\n&#34;, obj.Kind, obj.Name)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;buf, &#34;}\n&#34;)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	return buf.String()
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// Objects</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// An Object describes a named language entity such as a package,</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// constant, type, variable, function (incl. methods), or label.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// The Data fields contains object-specific data:</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//	Kind    Data type         Data value</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//	Pkg     *Scope            package scope</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//	Con     int               iota for the respective declaration</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// Deprecated: The relationship between Idents and Objects cannot be</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// correctly computed without type information. For example, the</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// expression T{K: 0} may denote a struct, map, slice, or array</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// literal, depending on the type of T. If T is a struct, then K</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// refers to a field of T, whereas for the other types it refers to a</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// value in the environment.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// New programs should set the [parser.SkipObjectResolution] parser</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// flag to disable syntactic object resolution (which also saves CPU</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// and memory), and instead use the type checker [go/types] if object</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// resolution is desired. See the Defs, Uses, and Implicits fields of</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// the [types.Info] struct for details.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>type Object struct {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	Kind ObjKind
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	Name string <span class="comment">// declared name</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	Decl any    <span class="comment">// corresponding Field, XxxSpec, FuncDecl, LabeledStmt, AssignStmt, Scope; or nil</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	Data any    <span class="comment">// object-specific data; or nil</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	Type any    <span class="comment">// placeholder for type information; may be nil</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// NewObj creates a new object of a given kind and name.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func NewObj(kind ObjKind, name string) *Object {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return &amp;Object{Kind: kind, Name: name}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Pos computes the source position of the declaration of an object name.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// The result may be an invalid position if it cannot be computed</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// (obj.Decl may be nil or not correct).</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="selection">func (obj *Object) Pos() token.Pos</span> {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	name := obj.Name
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	switch d := obj.Decl.(type) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	case *Field:
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		for _, n := range d.Names {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			if n.Name == name {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>				return n.Pos()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	case *ImportSpec:
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		if d.Name != nil &amp;&amp; d.Name.Name == name {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			return d.Name.Pos()
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return d.Path.Pos()
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	case *ValueSpec:
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		for _, n := range d.Names {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			if n.Name == name {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				return n.Pos()
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	case *TypeSpec:
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		if d.Name.Name == name {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			return d.Name.Pos()
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	case *FuncDecl:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if d.Name.Name == name {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			return d.Name.Pos()
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	case *LabeledStmt:
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		if d.Label.Name == name {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			return d.Label.Pos()
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	case *AssignStmt:
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		for _, x := range d.Lhs {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			if ident, isIdent := x.(*Ident); isIdent &amp;&amp; ident.Name == name {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>				return ident.Pos()
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	case *Scope:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		<span class="comment">// predeclared object - nothing to do for now</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	return token.NoPos
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// ObjKind describes what an object represents.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>type ObjKind int
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// The list of possible Object kinds.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>const (
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	Bad ObjKind = iota <span class="comment">// for error handling</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	Pkg                <span class="comment">// package</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	Con                <span class="comment">// constant</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	Typ                <span class="comment">// type</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	Var                <span class="comment">// variable</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	Fun                <span class="comment">// function or method</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	Lbl                <span class="comment">// label</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>var objKindStrings = [...]string{
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	Bad: &#34;bad&#34;,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	Pkg: &#34;package&#34;,
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	Con: &#34;const&#34;,
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	Typ: &#34;type&#34;,
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	Var: &#34;var&#34;,
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	Fun: &#34;func&#34;,
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	Lbl: &#34;label&#34;,
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func (kind ObjKind) String() string { return objKindStrings[kind] }
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
</pre><p><a href="scope.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
