<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/constant/value.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./value.go?s=20187:20225#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/constant">constant</a>/<span class="text-muted">value.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/constant">go/constant</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package constant implements Values representing untyped</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Go constants and their corresponding operations.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// A special Unknown value may be used when a value</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// is unknown due to an error. Operations on unknown</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// values produce unknown values unless specified</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// otherwise.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>package constant
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>import (
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;math/big&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//go:generate stringer -type Kind</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Kind specifies the kind of value represented by a [Value].</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Kind int
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>const (
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// unknown values</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Unknown Kind = iota
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// non-numeric values</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	Bool
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	String
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// numeric values</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Int
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	Float
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	Complex
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// A Value represents the value of a Go constant.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type Value interface {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// Kind returns the value kind.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Kind() Kind
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// String returns a short, quoted (human-readable) form of the value.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// For numeric values, the result may be an approximation;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// for String values the result may be a shortened string.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// Use ExactString for a string representing a value exactly.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	String() string
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// ExactString returns an exact, quoted (human-readable) form of the value.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// If the Value is of Kind String, use StringVal to obtain the unquoted string.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	ExactString() string
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Prevent external implementations.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	implementsValue()
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Implementations</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// Maximum supported mantissa precision.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// The spec requires at least 256 bits; typical implementations use 512 bits.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>const prec = 512
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// TODO(gri) Consider storing &#34;error&#34; information in an unknownVal so clients</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// can provide better error messages. For instance, if a number is</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// too large (incl. infinity), that could be recorded in unknownVal.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// See also #20583 and #42695 for use cases.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Representation of values:</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// Values of Int and Float Kind have two different representations each: int64Val</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// and intVal, and ratVal and floatVal. When possible, the &#34;smaller&#34;, respectively</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// more precise (for Floats) representation is chosen. However, once a Float value</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// is represented as a floatVal, any subsequent results remain floatVals (unless</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// explicitly converted); i.e., no attempt is made to convert a floatVal back into</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// a ratVal. The reasoning is that all representations but floatVal are mathematically</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// exact, but once that precision is lost (by moving to floatVal), moving back to</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// a different representation implies a precision that&#39;s not actually there.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>type (
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	unknownVal struct{}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	boolVal    bool
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	stringVal  struct {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		<span class="comment">// Lazy value: either a string (l,r==nil) or an addition (l,r!=nil).</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		mu   sync.Mutex
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		s    string
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		l, r *stringVal
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	int64Val   int64                    <span class="comment">// Int values representable as an int64</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	intVal     struct{ val *big.Int }   <span class="comment">// Int values not representable as an int64</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	ratVal     struct{ val *big.Rat }   <span class="comment">// Float values representable as a fraction</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	floatVal   struct{ val *big.Float } <span class="comment">// Float values not representable as a fraction</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	complexVal struct{ re, im Value }
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (unknownVal) Kind() Kind { return Unknown }
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func (boolVal) Kind() Kind    { return Bool }
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func (*stringVal) Kind() Kind { return String }
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (int64Val) Kind() Kind   { return Int }
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (intVal) Kind() Kind     { return Int }
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (ratVal) Kind() Kind     { return Float }
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func (floatVal) Kind() Kind   { return Float }
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (complexVal) Kind() Kind { return Complex }
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func (unknownVal) String() string { return &#34;unknown&#34; }
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (x boolVal) String() string  { return strconv.FormatBool(bool(x)) }
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// String returns a possibly shortened quoted form of the String value.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (x *stringVal) String() string {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	const maxLen = 72 <span class="comment">// a reasonable length</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	s := strconv.Quote(x.string())
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	if utf8.RuneCountInString(s) &gt; maxLen {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		<span class="comment">// The string without the enclosing quotes is greater than maxLen-2 runes</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		<span class="comment">// long. Remove the last 3 runes (including the closing &#39;&#34;&#39;) by keeping</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		<span class="comment">// only the first maxLen-3 runes; then add &#34;...&#34;.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		i := 0
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		for n := 0; n &lt; maxLen-3; n++ {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			_, size := utf8.DecodeRuneInString(s[i:])
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			i += size
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		s = s[:i] + &#34;...&#34;
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	return s
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// string constructs and returns the actual string literal value.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// If x represents an addition, then it rewrites x to be a single</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// string, to speed future calls. This lazy construction avoids</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// building different string values for all subpieces of a large</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// concatenation. See golang.org/issue/23348.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>func (x *stringVal) string() string {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	x.mu.Lock()
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if x.l != nil {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		x.s = strings.Join(reverse(x.appendReverse(nil)), &#34;&#34;)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		x.l = nil
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		x.r = nil
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	s := x.s
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	x.mu.Unlock()
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return s
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// reverse reverses x in place and returns it.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func reverse(x []string) []string {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	n := len(x)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	for i := 0; i+i &lt; n; i++ {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		x[i], x[n-1-i] = x[n-1-i], x[i]
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return x
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// appendReverse appends to list all of x&#39;s subpieces, but in reverse,</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// and returns the result. Appending the reversal allows processing</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// the right side in a recursive call and the left side in a loop.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// Because a chain like a + b + c + d + e is actually represented</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// as ((((a + b) + c) + d) + e), the left-side loop avoids deep recursion.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// x must be locked.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func (x *stringVal) appendReverse(list []string) []string {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	y := x
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	for y.r != nil {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		y.r.mu.Lock()
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		list = y.r.appendReverse(list)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		y.r.mu.Unlock()
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		l := y.l
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		if y != x {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			y.mu.Unlock()
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		l.mu.Lock()
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		y = l
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	s := y.s
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if y != x {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		y.mu.Unlock()
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	return append(list, s)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func (x int64Val) String() string { return strconv.FormatInt(int64(x), 10) }
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (x intVal) String() string   { return x.val.String() }
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (x ratVal) String() string   { return rtof(x).String() }
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// String returns a decimal approximation of the Float value.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (x floatVal) String() string {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	f := x.val
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t try to convert infinities (will not terminate).</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if f.IsInf() {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		return f.String()
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// Use exact fmt formatting if in float64 range (common case):</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// proceed if f doesn&#39;t underflow to 0 or overflow to inf.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if x, _ := f.Float64(); f.Sign() == 0 == (x == 0) &amp;&amp; !math.IsInf(x, 0) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		s := fmt.Sprintf(&#34;%.6g&#34;, x)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if !f.IsInt() &amp;&amp; strings.IndexByte(s, &#39;.&#39;) &lt; 0 {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			<span class="comment">// f is not an integer, but its string representation</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			<span class="comment">// doesn&#39;t reflect that. Use more digits. See issue 56220.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			s = fmt.Sprintf(&#34;%g&#34;, x)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return s
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// Out of float64 range. Do approximate manual to decimal</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// conversion to avoid precise but possibly slow Float</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// formatting.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// f = mant * 2**exp</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	var mant big.Float
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	exp := f.MantExp(&amp;mant) <span class="comment">// 0.5 &lt;= |mant| &lt; 1.0</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// approximate float64 mantissa m and decimal exponent d</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// f ~ m * 10**d</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	m, _ := mant.Float64()                     <span class="comment">// 0.5 &lt;= |m| &lt; 1.0</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	d := float64(exp) * (math.Ln2 / math.Ln10) <span class="comment">// log_10(2)</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// adjust m for truncated (integer) decimal exponent e</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	e := int64(d)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	m *= math.Pow(10, d-float64(e))
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">// ensure 1 &lt;= |m| &lt; 10</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	switch am := math.Abs(m); {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	case am &lt; 1-0.5e-6:
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		<span class="comment">// The %.6g format below rounds m to 5 digits after the</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		<span class="comment">// decimal point. Make sure that m*10 &lt; 10 even after</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		<span class="comment">// rounding up: m*10 + 0.5e-5 &lt; 10 =&gt; m &lt; 1 - 0.5e6.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		m *= 10
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		e--
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	case am &gt;= 10:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		m /= 10
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		e++
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%.6ge%+d&#34;, m, e)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (x complexVal) String() string { return fmt.Sprintf(&#34;(%s + %si)&#34;, x.re, x.im) }
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (x unknownVal) ExactString() string { return x.String() }
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func (x boolVal) ExactString() string    { return x.String() }
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func (x *stringVal) ExactString() string { return strconv.Quote(x.string()) }
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func (x int64Val) ExactString() string   { return x.String() }
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>func (x intVal) ExactString() string     { return x.String() }
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>func (x ratVal) ExactString() string {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	r := x.val
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if r.IsInt() {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return r.Num().String()
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	return r.String()
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>func (x floatVal) ExactString() string { return x.val.Text(&#39;p&#39;, 0) }
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func (x complexVal) ExactString() string {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;(%s + %si)&#34;, x.re.ExactString(), x.im.ExactString())
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>func (unknownVal) implementsValue() {}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>func (boolVal) implementsValue()    {}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>func (*stringVal) implementsValue() {}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (int64Val) implementsValue()   {}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>func (ratVal) implementsValue()     {}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func (intVal) implementsValue()     {}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (floatVal) implementsValue()   {}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func (complexVal) implementsValue() {}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>func newInt() *big.Int     { return new(big.Int) }
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func newRat() *big.Rat     { return new(big.Rat) }
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func newFloat() *big.Float { return new(big.Float).SetPrec(prec) }
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func i64toi(x int64Val) intVal   { return intVal{newInt().SetInt64(int64(x))} }
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func i64tor(x int64Val) ratVal   { return ratVal{newRat().SetInt64(int64(x))} }
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func i64tof(x int64Val) floatVal { return floatVal{newFloat().SetInt64(int64(x))} }
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func itor(x intVal) ratVal       { return ratVal{newRat().SetInt(x.val)} }
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func itof(x intVal) floatVal     { return floatVal{newFloat().SetInt(x.val)} }
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>func rtof(x ratVal) floatVal     { return floatVal{newFloat().SetRat(x.val)} }
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func vtoc(x Value) complexVal    { return complexVal{x, int64Val(0)} }
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func makeInt(x *big.Int) Value {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	if x.IsInt64() {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return int64Val(x.Int64())
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	return intVal{x}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func makeRat(x *big.Rat) Value {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	a := x.Num()
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	b := x.Denom()
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	if smallInt(a) &amp;&amp; smallInt(b) {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		<span class="comment">// ok to remain fraction</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		return ratVal{x}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// components too large =&gt; switch to float</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	return floatVal{newFloat().SetRat(x)}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>var floatVal0 = floatVal{newFloat()}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func makeFloat(x *big.Float) Value {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// convert -0</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if x.Sign() == 0 {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return floatVal0
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if x.IsInf() {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return unknownVal{}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	<span class="comment">// No attempt is made to &#34;go back&#34; to ratVal, even if possible,</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	<span class="comment">// to avoid providing the illusion of a mathematically exact</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// representation.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	return floatVal{x}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>func makeComplex(re, im Value) Value {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if re.Kind() == Unknown || im.Kind() == Unknown {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		return unknownVal{}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return complexVal{re, im}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>func makeFloatFromLiteral(lit string) Value {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if f, ok := newFloat().SetString(lit); ok {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		if smallFloat(f) {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			<span class="comment">// ok to use rationals</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			if f.Sign() == 0 {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				<span class="comment">// Issue 20228: If the float underflowed to zero, parse just &#34;0&#34;.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				<span class="comment">// Otherwise, lit might contain a value with a large negative exponent,</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				<span class="comment">// such as -6e-1886451601. As a float, that will underflow to 0,</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				<span class="comment">// but it&#39;ll take forever to parse as a Rat.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>				lit = &#34;0&#34;
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			if r, ok := newRat().SetString(lit); ok {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>				return ratVal{r}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		<span class="comment">// otherwise use floats</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		return makeFloat(f)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return nil
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// Permit fractions with component sizes up to maxExp</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// before switching to using floating-point numbers.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>const maxExp = 4 &lt;&lt; 10
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// smallInt reports whether x would lead to &#34;reasonably&#34;-sized fraction</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// if converted to a *big.Rat.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func smallInt(x *big.Int) bool {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	return x.BitLen() &lt; maxExp
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// smallFloat64 reports whether x would lead to &#34;reasonably&#34;-sized fraction</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// if converted to a *big.Rat.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func smallFloat64(x float64) bool {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	if math.IsInf(x, 0) {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		return false
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	_, e := math.Frexp(x)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return -maxExp &lt; e &amp;&amp; e &lt; maxExp
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// smallFloat reports whether x would lead to &#34;reasonably&#34;-sized fraction</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// if converted to a *big.Rat.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func smallFloat(x *big.Float) bool {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if x.IsInf() {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		return false
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	e := x.MantExp(nil)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	return -maxExp &lt; e &amp;&amp; e &lt; maxExp
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// Factories</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// MakeUnknown returns the [Unknown] value.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func MakeUnknown() Value { return unknownVal{} }
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// MakeBool returns the [Bool] value for b.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func MakeBool(b bool) Value { return boolVal(b) }
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// MakeString returns the [String] value for s.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func MakeString(s string) Value {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		return &amp;emptyString <span class="comment">// common case</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return &amp;stringVal{s: s}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>var emptyString stringVal
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// MakeInt64 returns the [Int] value for x.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func MakeInt64(x int64) Value { return int64Val(x) }
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// MakeUint64 returns the [Int] value for x.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func MakeUint64(x uint64) Value {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	if x &lt; 1&lt;&lt;63 {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		return int64Val(int64(x))
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	return intVal{newInt().SetUint64(x)}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// MakeFloat64 returns the [Float] value for x.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// If x is -0.0, the result is 0.0.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// If x is not finite, the result is an [Unknown].</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>func MakeFloat64(x float64) Value {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	if math.IsInf(x, 0) || math.IsNaN(x) {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return unknownVal{}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	if smallFloat64(x) {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		return ratVal{newRat().SetFloat64(x + 0)} <span class="comment">// convert -0 to 0</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	return floatVal{newFloat().SetFloat64(x + 0)}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// MakeFromLiteral returns the corresponding integer, floating-point,</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// imaginary, character, or string value for a Go literal string. The</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// tok value must be one of [token.INT], [token.FLOAT], [token.IMAG],</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">// [token.CHAR], or [token.STRING]. The final argument must be zero.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// If the literal string syntax is invalid, the result is an [Unknown].</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>func MakeFromLiteral(lit string, tok token.Token, zero uint) Value {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	if zero != 0 {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		panic(&#34;MakeFromLiteral called with non-zero last argument&#34;)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	switch tok {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	case token.INT:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		if x, err := strconv.ParseInt(lit, 0, 64); err == nil {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			return int64Val(x)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		if x, ok := newInt().SetString(lit, 0); ok {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			return intVal{x}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	case token.FLOAT:
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		if x := makeFloatFromLiteral(lit); x != nil {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			return x
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	case token.IMAG:
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		if n := len(lit); n &gt; 0 &amp;&amp; lit[n-1] == &#39;i&#39; {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			if im := makeFloatFromLiteral(lit[:n-1]); im != nil {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				return makeComplex(int64Val(0), im)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	case token.CHAR:
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		if n := len(lit); n &gt;= 2 {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			if code, _, _, err := strconv.UnquoteChar(lit[1:n-1], &#39;\&#39;&#39;); err == nil {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				return MakeInt64(int64(code))
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	case token.STRING:
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		if s, err := strconv.Unquote(lit); err == nil {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			return MakeString(s)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	default:
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v is not a valid token&#34;, tok))
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// Accessors</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// For unknown arguments the result is the zero value for the respective</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// accessor type, except for Sign, where the result is 1.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// BoolVal returns the Go boolean value of x, which must be a [Bool] or an [Unknown].</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is false.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>func BoolVal(x Value) bool {
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	case boolVal:
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		return bool(x)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	case unknownVal:
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		return false
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	default:
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not a Bool&#34;, x))
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// StringVal returns the Go string value of x, which must be a [String] or an [Unknown].</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is &#34;&#34;.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func StringVal(x Value) string {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	case *stringVal:
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		return x.string()
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	case unknownVal:
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	default:
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not a String&#34;, x))
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// Int64Val returns the Go int64 value of x and whether the result is exact;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">// x must be an [Int] or an [Unknown]. If the result is not exact, its value is undefined.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is (0, false).</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>func Int64Val(x Value) (int64, bool) {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	case int64Val:
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		return int64(x), true
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	case intVal:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		return x.val.Int64(), false <span class="comment">// not an int64Val and thus not exact</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	case unknownVal:
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		return 0, false
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	default:
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not an Int&#34;, x))
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// Uint64Val returns the Go uint64 value of x and whether the result is exact;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">// x must be an [Int] or an [Unknown]. If the result is not exact, its value is undefined.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is (0, false).</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>func Uint64Val(x Value) (uint64, bool) {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	case int64Val:
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		return uint64(x), x &gt;= 0
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	case intVal:
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return x.val.Uint64(), x.val.IsUint64()
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	case unknownVal:
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return 0, false
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	default:
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not an Int&#34;, x))
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// Float32Val is like [Float64Val] but for float32 instead of float64.</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>func Float32Val(x Value) (float32, bool) {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	case int64Val:
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		f := float32(x)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		return f, int64Val(f) == x
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	case intVal:
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		f, acc := newFloat().SetInt(x.val).Float32()
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		return f, acc == big.Exact
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	case ratVal:
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		return x.val.Float32()
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	case floatVal:
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		f, acc := x.val.Float32()
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		return f, acc == big.Exact
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	case unknownVal:
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		return 0, false
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	default:
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not a Float&#34;, x))
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// Float64Val returns the nearest Go float64 value of x and whether the result is exact;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// x must be numeric or an [Unknown], but not [Complex]. For values too small (too close to 0)</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// to represent as float64, [Float64Val] silently underflows to 0. The result sign always</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">// matches the sign of x, even for 0.</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is (0, false).</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>func Float64Val(x Value) (float64, bool) {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	case int64Val:
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		f := float64(int64(x))
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		return f, int64Val(f) == x
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	case intVal:
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		f, acc := newFloat().SetInt(x.val).Float64()
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		return f, acc == big.Exact
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	case ratVal:
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		return x.val.Float64()
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	case floatVal:
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		f, acc := x.val.Float64()
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		return f, acc == big.Exact
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	case unknownVal:
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		return 0, false
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	default:
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not a Float&#34;, x))
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// Val returns the underlying value for a given constant. Since it returns an</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// interface, it is up to the caller to type assert the result to the expected</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// type. The possible dynamic return types are:</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span><span class="comment">//	x Kind             type of result</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">//	-----------------------------------------</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">//	Bool               bool</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">//	String             string</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">//	Int                int64 or *big.Int</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">//	Float              *big.Float or *big.Rat</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">//	everything else    nil</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>func Val(x Value) any {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	case boolVal:
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		return bool(x)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	case *stringVal:
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		return x.string()
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	case int64Val:
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		return int64(x)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	case intVal:
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		return x.val
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	case ratVal:
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		return x.val
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	case floatVal:
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		return x.val
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	default:
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		return nil
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// Make returns the [Value] for x.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">//	type of x        result Kind</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">//	----------------------------</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">//	bool             Bool</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">//	string           String</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span><span class="comment">//	int64            Int</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span><span class="comment">//	*big.Int         Int</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span><span class="comment">//	*big.Float       Float</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span><span class="comment">//	*big.Rat         Float</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span><span class="comment">//	anything else    Unknown</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>func Make(x any) Value {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	case bool:
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		return boolVal(x)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	case string:
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		return &amp;stringVal{s: x}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	case int64:
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		return int64Val(x)
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	case *big.Int:
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		return makeInt(x)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	case *big.Rat:
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		return makeRat(x)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	case *big.Float:
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return makeFloat(x)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	default:
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		return unknownVal{}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// BitLen returns the number of bits required to represent</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// the absolute value x in binary representation; x must be an [Int] or an [Unknown].</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is 0.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>func BitLen(x Value) int {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	case int64Val:
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		u := uint64(x)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		if x &lt; 0 {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			u = uint64(-x)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		return 64 - bits.LeadingZeros64(u)
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	case intVal:
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		return x.val.BitLen()
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	case unknownVal:
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		return 0
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	default:
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not an Int&#34;, x))
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span><span class="comment">// Sign returns -1, 0, or 1 depending on whether x &lt; 0, x == 0, or x &gt; 0;</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">// x must be numeric or [Unknown]. For complex values x, the sign is 0 if x == 0,</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// otherwise it is != 0. If x is [Unknown], the result is 1.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>func Sign(x Value) int {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	case int64Val:
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		switch {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		case x &lt; 0:
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			return -1
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		case x &gt; 0:
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			return 1
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		return 0
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	case intVal:
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		return x.val.Sign()
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	case ratVal:
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		return x.val.Sign()
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	case floatVal:
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		return x.val.Sign()
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	case complexVal:
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		return Sign(x.re) | Sign(x.im)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	case unknownVal:
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		return 1 <span class="comment">// avoid spurious division by zero errors</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	default:
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not numeric&#34;, x))
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// Support for assembling/disassembling numeric values</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>const (
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	<span class="comment">// Compute the size of a Word in bytes.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	_m       = ^big.Word(0)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	_log     = _m&gt;&gt;8&amp;1 + _m&gt;&gt;16&amp;1 + _m&gt;&gt;32&amp;1
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	wordSize = 1 &lt;&lt; _log
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// Bytes returns the bytes for the absolute value of x in little-</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// endian binary representation; x must be an [Int].</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>func Bytes(x Value) []byte {
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	var t intVal
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	case int64Val:
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		t = i64toi(x)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	case intVal:
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		t = x
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	default:
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not an Int&#34;, x))
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	words := t.val.Bits()
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	bytes := make([]byte, len(words)*wordSize)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	i := 0
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	for _, w := range words {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		for j := 0; j &lt; wordSize; j++ {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			bytes[i] = byte(w)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			w &gt;&gt;= 8
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			i++
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	<span class="comment">// remove leading 0&#39;s</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; bytes[i-1] == 0 {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		i--
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	return bytes[:i]
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span><span class="comment">// MakeFromBytes returns the [Int] value given the bytes of its little-endian</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span><span class="comment">// binary representation. An empty byte slice argument represents 0.</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span><span class="selection">func MakeFromBytes(bytes []byte) Value</span> {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	words := make([]big.Word, (len(bytes)+(wordSize-1))/wordSize)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	i := 0
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	var w big.Word
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	var s uint
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	for _, b := range bytes {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		w |= big.Word(b) &lt;&lt; s
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		if s += 8; s == wordSize*8 {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			words[i] = w
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			i++
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			w = 0
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			s = 0
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	<span class="comment">// store last word</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	if i &lt; len(words) {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		words[i] = w
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		i++
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	<span class="comment">// remove leading 0&#39;s</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	for i &gt; 0 &amp;&amp; words[i-1] == 0 {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		i--
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	return makeInt(newInt().SetBits(words[:i]))
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// Num returns the numerator of x; x must be [Int], [Float], or [Unknown].</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], or if it is too large or small to represent as a</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span><span class="comment">// fraction, the result is [Unknown]. Otherwise the result is an [Int]</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span><span class="comment">// with the same sign as x.</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>func Num(x Value) Value {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	case int64Val, intVal:
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		return x
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	case ratVal:
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		return makeInt(x.val.Num())
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	case floatVal:
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		if smallFloat(x.val) {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			r, _ := x.val.Rat(nil)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			return makeInt(r.Num())
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	case unknownVal:
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		break
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	default:
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not Int or Float&#34;, x))
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>}
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span><span class="comment">// Denom returns the denominator of x; x must be [Int], [Float], or [Unknown].</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], or if it is too large or small to represent as a</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span><span class="comment">// fraction, the result is [Unknown]. Otherwise the result is an [Int] &gt;= 1.</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>func Denom(x Value) Value {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	case int64Val, intVal:
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		return int64Val(1)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	case ratVal:
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		return makeInt(x.val.Denom())
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	case floatVal:
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		if smallFloat(x.val) {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			r, _ := x.val.Rat(nil)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			return makeInt(r.Denom())
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	case unknownVal:
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		break
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	default:
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not Int or Float&#34;, x))
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// MakeImag returns the [Complex] value x*i;</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// x must be [Int], [Float], or [Unknown].</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is [Unknown].</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func MakeImag(x Value) Value {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	switch x.(type) {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	case unknownVal:
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		return x
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	case int64Val, intVal, ratVal, floatVal:
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		return makeComplex(int64Val(0), x)
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	default:
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not Int or Float&#34;, x))
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	}
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// Real returns the real part of x, which must be a numeric or unknown value.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is [Unknown].</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func Real(x Value) Value {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	case unknownVal, int64Val, intVal, ratVal, floatVal:
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		return x
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	case complexVal:
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return x.re
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	default:
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not numeric&#34;, x))
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>}
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span><span class="comment">// Imag returns the imaginary part of x, which must be a numeric or unknown value.</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span><span class="comment">// If x is [Unknown], the result is [Unknown].</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>func Imag(x Value) Value {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	case unknownVal:
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		return x
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	case int64Val, intVal, ratVal, floatVal:
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		return int64Val(0)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	case complexVal:
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		return x.im
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	default:
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v not numeric&#34;, x))
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span><span class="comment">// Numeric conversions</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span><span class="comment">// ToInt converts x to an [Int] value if x is representable as an [Int].</span>
<span id="L853" class="ln">   853&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns an [Unknown].</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>func ToInt(x Value) Value {
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	case int64Val, intVal:
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>		return x
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	case ratVal:
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		if x.val.IsInt() {
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>			return makeInt(x.val.Num())
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		}
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	case floatVal:
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		<span class="comment">// avoid creation of huge integers</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>		<span class="comment">// (Existing tests require permitting exponents of at least 1024;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		<span class="comment">// allow any value that would also be permissible as a fraction.)</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		if smallFloat(x.val) {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			i := newInt()
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>			if _, acc := x.val.Int(i); acc == big.Exact {
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>				return makeInt(i)
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>			}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>			<span class="comment">// If we can get an integer by rounding up or down,</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>			<span class="comment">// assume x is not an integer because of rounding</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>			<span class="comment">// errors in prior computations.</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>			const delta = 4 <span class="comment">// a small number of bits &gt; 0</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>			var t big.Float
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>			t.SetPrec(prec - delta)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>			<span class="comment">// try rounding down a little</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>			t.SetMode(big.ToZero)
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>			t.Set(x.val)
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>			if _, acc := t.Int(i); acc == big.Exact {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>				return makeInt(i)
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>			}
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>			<span class="comment">// try rounding up a little</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>			t.SetMode(big.AwayFromZero)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>			t.Set(x.val)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			if _, acc := t.Int(i); acc == big.Exact {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>				return makeInt(i)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>			}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	case complexVal:
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		if re := ToFloat(x); re.Kind() == Float {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>			return ToInt(re)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">// ToFloat converts x to a [Float] value if x is representable as a [Float].</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns an [Unknown].</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>func ToFloat(x Value) Value {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	case int64Val:
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		return i64tor(x) <span class="comment">// x is always a small int</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	case intVal:
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		if smallInt(x.val) {
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>			return itor(x)
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>		}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		return itof(x)
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	case ratVal, floatVal:
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		return x
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	case complexVal:
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		if Sign(x.im) == 0 {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>			return ToFloat(x.re)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>		}
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>}
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span><span class="comment">// ToComplex converts x to a [Complex] value if x is representable as a [Complex].</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns an [Unknown].</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>func ToComplex(x Value) Value {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	case int64Val, intVal, ratVal, floatVal:
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		return vtoc(x)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	case complexVal:
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		return x
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	return unknownVal{}
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span><span class="comment">// Operations</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span><span class="comment">// is32bit reports whether x can be represented using 32 bits.</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func is32bit(x int64) bool {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	const s = 32
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	return -1&lt;&lt;(s-1) &lt;= x &amp;&amp; x &lt;= 1&lt;&lt;(s-1)-1
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span><span class="comment">// is63bit reports whether x can be represented using 63 bits.</span>
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>func is63bit(x int64) bool {
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	const s = 63
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	return -1&lt;&lt;(s-1) &lt;= x &amp;&amp; x &lt;= 1&lt;&lt;(s-1)-1
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// UnaryOp returns the result of the unary expression op y.</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">// The operation must be defined for the operand.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span><span class="comment">// If prec &gt; 0 it specifies the ^ (xor) result size in bits.</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span><span class="comment">// If y is [Unknown], the result is [Unknown].</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>func UnaryOp(op token.Token, y Value, prec uint) Value {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	switch op {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	case token.ADD:
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>		switch y.(type) {
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		case unknownVal, int64Val, intVal, ratVal, floatVal, complexVal:
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			return y
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	case token.SUB:
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		switch y := y.(type) {
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		case unknownVal:
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			return y
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>		case int64Val:
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			if z := -y; z != y {
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>				return z <span class="comment">// no overflow</span>
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			}
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			return makeInt(newInt().Neg(big.NewInt(int64(y))))
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		case intVal:
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>			return makeInt(newInt().Neg(y.val))
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		case ratVal:
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			return makeRat(newRat().Neg(y.val))
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>		case floatVal:
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			return makeFloat(newFloat().Neg(y.val))
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		case complexVal:
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			re := UnaryOp(token.SUB, y.re, 0)
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			im := UnaryOp(token.SUB, y.im, 0)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>			return makeComplex(re, im)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	case token.XOR:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		z := newInt()
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		switch y := y.(type) {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		case unknownVal:
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>			return y
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		case int64Val:
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>			z.Not(big.NewInt(int64(y)))
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		case intVal:
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>			z.Not(y.val)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		default:
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>			goto Error
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		<span class="comment">// For unsigned types, the result will be negative and</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		<span class="comment">// thus &#34;too large&#34;: We must limit the result precision</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		<span class="comment">// to the type&#39;s precision.</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		if prec &gt; 0 {
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>			z.AndNot(z, newInt().Lsh(big.NewInt(-1), prec)) <span class="comment">// z &amp;^= (-1)&lt;&lt;prec</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		}
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		return makeInt(z)
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>	case token.NOT:
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		switch y := y.(type) {
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		case unknownVal:
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			return y
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>		case boolVal:
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			return !y
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>Error:
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;invalid unary operation %s%v&#34;, op, y))
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>}
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>func ord(x Value) int {
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	switch x.(type) {
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	default:
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		<span class="comment">// force invalid value into &#34;x position&#34; in match</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		<span class="comment">// (don&#39;t panic here so that callers can provide a better error message)</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		return -1
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	case unknownVal:
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		return 0
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	case boolVal, *stringVal:
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		return 1
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	case int64Val:
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		return 2
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	case intVal:
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		return 3
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	case ratVal:
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		return 4
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	case floatVal:
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>		return 5
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	case complexVal:
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		return 6
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">// match returns the matching representation (same type) with the</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// smallest complexity for two values x and y. If one of them is</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">// numeric, both of them must be numeric. If one of them is Unknown</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">// or invalid (say, nil) both results are that value.</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>func match(x, y Value) (_, _ Value) {
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	switch ox, oy := ord(x), ord(y); {
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	case ox &lt; oy:
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>		x, y = match0(x, y)
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	case ox &gt; oy:
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>		y, x = match0(y, x)
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	return x, y
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>}
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span><span class="comment">// match0 must only be called by match.</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span><span class="comment">// Invariant: ord(x) &lt; ord(y)</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>func match0(x, y Value) (_, _ Value) {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	<span class="comment">// Prefer to return the original x and y arguments when possible,</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	<span class="comment">// to avoid unnecessary heap allocations.</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	switch y.(type) {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	case intVal:
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		switch x1 := x.(type) {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>		case int64Val:
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>			return i64toi(x1), y
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		}
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	case ratVal:
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>		switch x1 := x.(type) {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		case int64Val:
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			return i64tor(x1), y
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		case intVal:
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>			return itor(x1), y
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>		}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	case floatVal:
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>		switch x1 := x.(type) {
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		case int64Val:
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>			return i64tof(x1), y
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		case intVal:
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>			return itof(x1), y
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		case ratVal:
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			return rtof(x1), y
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		}
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	case complexVal:
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		return vtoc(x), y
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	<span class="comment">// force unknown and invalid values into &#34;x position&#34; in callers of match</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	<span class="comment">// (don&#39;t panic here so that callers can provide a better error message)</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	return x, x
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span><span class="comment">// BinaryOp returns the result of the binary expression x op y.</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span><span class="comment">// The operation must be defined for the operands. If one of the</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span><span class="comment">// operands is [Unknown], the result is [Unknown].</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span><span class="comment">// BinaryOp doesn&#39;t handle comparisons or shifts; use [Compare]</span>
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span><span class="comment">// or [Shift] instead.</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span><span class="comment">// To force integer division of [Int] operands, use op == [token.QUO_ASSIGN]</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span><span class="comment">// instead of [token.QUO]; the result is guaranteed to be [Int] in this case.</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span><span class="comment">// Division by zero leads to a run-time panic.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>func BinaryOp(x_ Value, op token.Token, y_ Value) Value {
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	x, y := match(x_, y_)
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	case unknownVal:
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		return x
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	case boolVal:
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		y := y.(boolVal)
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		switch op {
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		case token.LAND:
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>			return x &amp;&amp; y
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>		case token.LOR:
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>			return x || y
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>		}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	case int64Val:
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		a := int64(x)
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		b := int64(y.(int64Val))
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		var c int64
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		switch op {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		case token.ADD:
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>			if !is63bit(a) || !is63bit(b) {
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>				return makeInt(newInt().Add(big.NewInt(a), big.NewInt(b)))
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>			c = a + b
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>		case token.SUB:
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>			if !is63bit(a) || !is63bit(b) {
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>				return makeInt(newInt().Sub(big.NewInt(a), big.NewInt(b)))
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>			}
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>			c = a - b
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		case token.MUL:
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>			if !is32bit(a) || !is32bit(b) {
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>				return makeInt(newInt().Mul(big.NewInt(a), big.NewInt(b)))
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>			}
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>			c = a * b
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>		case token.QUO:
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>			return makeRat(big.NewRat(a, b))
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		case token.QUO_ASSIGN: <span class="comment">// force integer division</span>
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>			c = a / b
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		case token.REM:
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>			c = a % b
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>		case token.AND:
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>			c = a &amp; b
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		case token.OR:
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>			c = a | b
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>		case token.XOR:
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>			c = a ^ b
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>		case token.AND_NOT:
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>			c = a &amp;^ b
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		default:
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>			goto Error
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>		}
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>		return int64Val(c)
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	case intVal:
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>		a := x.val
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		b := y.(intVal).val
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		c := newInt()
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		switch op {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>		case token.ADD:
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			c.Add(a, b)
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		case token.SUB:
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			c.Sub(a, b)
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		case token.MUL:
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>			c.Mul(a, b)
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>		case token.QUO:
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			return makeRat(newRat().SetFrac(a, b))
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		case token.QUO_ASSIGN: <span class="comment">// force integer division</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>			c.Quo(a, b)
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		case token.REM:
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>			c.Rem(a, b)
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>		case token.AND:
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>			c.And(a, b)
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		case token.OR:
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>			c.Or(a, b)
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		case token.XOR:
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>			c.Xor(a, b)
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		case token.AND_NOT:
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>			c.AndNot(a, b)
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>		default:
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>			goto Error
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		}
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		return makeInt(c)
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>	case ratVal:
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		a := x.val
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>		b := y.(ratVal).val
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>		c := newRat()
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		switch op {
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		case token.ADD:
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>			c.Add(a, b)
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		case token.SUB:
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			c.Sub(a, b)
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>		case token.MUL:
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>			c.Mul(a, b)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		case token.QUO:
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>			c.Quo(a, b)
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>		default:
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>			goto Error
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>		}
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>		return makeRat(c)
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	case floatVal:
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		a := x.val
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		b := y.(floatVal).val
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		c := newFloat()
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		switch op {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>		case token.ADD:
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>			c.Add(a, b)
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>		case token.SUB:
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>			c.Sub(a, b)
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>		case token.MUL:
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>			c.Mul(a, b)
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>		case token.QUO:
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>			c.Quo(a, b)
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		default:
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>			goto Error
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>		}
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>		return makeFloat(c)
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>	case complexVal:
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>		y := y.(complexVal)
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>		a, b := x.re, x.im
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		c, d := y.re, y.im
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		var re, im Value
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>		switch op {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		case token.ADD:
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>			<span class="comment">// (a+c) + i(b+d)</span>
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>			re = add(a, c)
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			im = add(b, d)
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		case token.SUB:
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>			<span class="comment">// (a-c) + i(b-d)</span>
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>			re = sub(a, c)
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>			im = sub(b, d)
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		case token.MUL:
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>			<span class="comment">// (ac-bd) + i(bc+ad)</span>
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>			ac := mul(a, c)
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>			bd := mul(b, d)
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>			bc := mul(b, c)
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>			ad := mul(a, d)
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>			re = sub(ac, bd)
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>			im = add(bc, ad)
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>		case token.QUO:
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>			<span class="comment">// (ac+bd)/s + i(bc-ad)/s, with s = cc + dd</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>			ac := mul(a, c)
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>			bd := mul(b, d)
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>			bc := mul(b, c)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>			ad := mul(a, d)
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>			cc := mul(c, c)
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			dd := mul(d, d)
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>			s := add(cc, dd)
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>			re = add(ac, bd)
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>			re = quo(re, s)
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>			im = sub(bc, ad)
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>			im = quo(im, s)
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>		default:
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>			goto Error
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>		}
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>		return makeComplex(re, im)
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	case *stringVal:
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>		if op == token.ADD {
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>			return &amp;stringVal{l: x, r: y.(*stringVal)}
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		}
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	}
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>Error:
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;invalid binary operation %v %s %v&#34;, x_, op, y_))
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>}
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>func add(x, y Value) Value { return BinaryOp(x, token.ADD, y) }
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>func sub(x, y Value) Value { return BinaryOp(x, token.SUB, y) }
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>func mul(x, y Value) Value { return BinaryOp(x, token.MUL, y) }
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>func quo(x, y Value) Value { return BinaryOp(x, token.QUO, y) }
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span><span class="comment">// Shift returns the result of the shift expression x op s</span>
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span><span class="comment">// with op == [token.SHL] or [token.SHR] (&lt;&lt; or &gt;&gt;). x must be</span>
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span><span class="comment">// an [Int] or an [Unknown]. If x is [Unknown], the result is x.</span>
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>func Shift(x Value, op token.Token, s uint) Value {
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	case unknownVal:
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>		return x
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	case int64Val:
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>		if s == 0 {
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>			return x
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>		}
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>		switch op {
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>		case token.SHL:
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>			z := i64toi(x).val
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>			return makeInt(z.Lsh(z, s))
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>		case token.SHR:
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>			return x &gt;&gt; s
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>		}
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	case intVal:
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>		if s == 0 {
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>			return x
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>		}
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>		z := newInt()
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>		switch op {
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>		case token.SHL:
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>			return makeInt(z.Lsh(x.val, s))
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>		case token.SHR:
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>			return makeInt(z.Rsh(x.val, s))
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>		}
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>	}
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;invalid shift %v %s %d&#34;, x, op, s))
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>}
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>func cmpZero(x int, op token.Token) bool {
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>	switch op {
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	case token.EQL:
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>		return x == 0
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	case token.NEQ:
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>		return x != 0
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	case token.LSS:
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>		return x &lt; 0
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	case token.LEQ:
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>		return x &lt;= 0
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	case token.GTR:
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>		return x &gt; 0
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>	case token.GEQ:
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>		return x &gt;= 0
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>	}
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;invalid comparison %v %s 0&#34;, x, op))
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span><span class="comment">// Compare returns the result of the comparison x op y.</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span><span class="comment">// The comparison must be defined for the operands.</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span><span class="comment">// If one of the operands is [Unknown], the result is</span>
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span><span class="comment">// false.</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>func Compare(x_ Value, op token.Token, y_ Value) bool {
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>	x, y := match(x_, y_)
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	case unknownVal:
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>		return false
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>	case boolVal:
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>		y := y.(boolVal)
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>		switch op {
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>		case token.EQL:
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>			return x == y
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>		case token.NEQ:
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>			return x != y
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>		}
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>	case int64Val:
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>		y := y.(int64Val)
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		switch op {
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>		case token.EQL:
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>			return x == y
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		case token.NEQ:
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>			return x != y
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>		case token.LSS:
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>			return x &lt; y
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>		case token.LEQ:
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>			return x &lt;= y
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>		case token.GTR:
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>			return x &gt; y
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>		case token.GEQ:
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>			return x &gt;= y
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>		}
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>	case intVal:
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>		return cmpZero(x.val.Cmp(y.(intVal).val), op)
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	case ratVal:
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>		return cmpZero(x.val.Cmp(y.(ratVal).val), op)
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>	case floatVal:
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>		return cmpZero(x.val.Cmp(y.(floatVal).val), op)
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	case complexVal:
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>		y := y.(complexVal)
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>		re := Compare(x.re, token.EQL, y.re)
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>		im := Compare(x.im, token.EQL, y.im)
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>		switch op {
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>		case token.EQL:
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>			return re &amp;&amp; im
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>		case token.NEQ:
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>			return !re || !im
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>		}
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>	case *stringVal:
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>		xs := x.string()
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>		ys := y.(*stringVal).string()
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>		switch op {
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		case token.EQL:
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>			return xs == ys
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>		case token.NEQ:
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>			return xs != ys
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>		case token.LSS:
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>			return xs &lt; ys
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>		case token.LEQ:
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>			return xs &lt;= ys
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>		case token.GTR:
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>			return xs &gt; ys
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>		case token.GEQ:
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>			return xs &gt;= ys
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>		}
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	}
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;invalid comparison %v %s %v&#34;, x_, op, y_))
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>
</pre><p><a href="value.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
