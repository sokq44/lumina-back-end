<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/doc/comment/print.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./print.go?s=408:2000#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/doc">doc</a>/<a href="http://localhost:8080/src/go/doc/comment">comment</a>/<span class="text-muted">print.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/doc/comment">go/doc/comment</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2022 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package comment
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// A Printer is a doc comment printer.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The fields in the struct can be filled in before calling</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// any of the printing methods</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// in order to customize the details of the printing process.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="selection">type Printer struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	</span><span class="selection-comment">// HeadingLevel is the nesting level used for</span><span class="selection">
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	</span><span class="selection-comment">// HTML and Markdown headings.</span><span class="selection">
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If HeadingLevel is zero, it defaults to level 3,</span><span class="selection">
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	</span><span class="selection-comment">// meaning to use &lt;h3&gt; and ###.</span><span class="selection">
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	HeadingLevel int
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	</span><span class="selection-comment">// HeadingID is a function that computes the heading ID</span><span class="selection">
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	</span><span class="selection-comment">// (anchor tag) to use for the heading h when generating</span><span class="selection">
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	</span><span class="selection-comment">// HTML and Markdown. If HeadingID returns an empty string,</span><span class="selection">
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	</span><span class="selection-comment">// then the heading ID is omitted.</span><span class="selection">
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If HeadingID is nil, h.DefaultID is used.</span><span class="selection">
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	HeadingID func(h *Heading) string
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	</span><span class="selection-comment">// DocLinkURL is a function that computes the URL for the given DocLink.</span><span class="selection">
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If DocLinkURL is nil, then link.DefaultURL(p.DocLinkBaseURL) is used.</span><span class="selection">
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	DocLinkURL func(link *DocLink) string
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	</span><span class="selection-comment">// DocLinkBaseURL is used when DocLinkURL is nil,</span><span class="selection">
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	</span><span class="selection-comment">// passed to [DocLink.DefaultURL] to construct a DocLink&#39;s URL.</span><span class="selection">
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	</span><span class="selection-comment">// See that method&#39;s documentation for details.</span><span class="selection">
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	DocLinkBaseURL string
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	</span><span class="selection-comment">// TextPrefix is a prefix to print at the start of every line</span><span class="selection">
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	</span><span class="selection-comment">// when generating text output using the Text method.</span><span class="selection">
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	TextPrefix string
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	</span><span class="selection-comment">// TextCodePrefix is the prefix to print at the start of each</span><span class="selection">
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	</span><span class="selection-comment">// preformatted (code block) line when generating text output,</span><span class="selection">
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	</span><span class="selection-comment">// instead of (not in addition to) TextPrefix.</span><span class="selection">
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If TextCodePrefix is the empty string, it defaults to TextPrefix+&#34;\t&#34;.</span><span class="selection">
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	TextCodePrefix string
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	</span><span class="selection-comment">// TextWidth is the maximum width text line to generate,</span><span class="selection">
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	</span><span class="selection-comment">// measured in Unicode code points,</span><span class="selection">
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	</span><span class="selection-comment">// excluding TextPrefix and the newline character.</span><span class="selection">
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If TextWidth is zero, it defaults to 80 minus the number of code points in TextPrefix.</span><span class="selection">
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	</span><span class="selection-comment">// If TextWidth is negative, there is no limit.</span><span class="selection">
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	TextWidth int
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>func (p *Printer) headingLevel() int {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if p.HeadingLevel &lt;= 0 {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return 3
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	return p.HeadingLevel
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (p *Printer) headingID(h *Heading) string {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	if p.HeadingID == nil {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return h.DefaultID()
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return p.HeadingID(h)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (p *Printer) docLinkURL(link *DocLink) string {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if p.DocLinkURL != nil {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		return p.DocLinkURL(link)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	return link.DefaultURL(p.DocLinkBaseURL)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// DefaultURL constructs and returns the documentation URL for l,</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// using baseURL as a prefix for links to other packages.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// The possible forms returned by DefaultURL are:</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//   - baseURL/ImportPath, for a link to another package</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//   - baseURL/ImportPath#Name, for a link to a const, func, type, or var in another package</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//   - baseURL/ImportPath#Recv.Name, for a link to a method in another package</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//   - #Name, for a link to a const, func, type, or var in this package</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//   - #Recv.Name, for a link to a method in this package</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// If baseURL ends in a trailing slash, then DefaultURL inserts</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// a slash between ImportPath and # in the anchored forms.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// For example, here are some baseURL values and URLs they can generate:</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	&#34;/pkg/&#34; → &#34;/pkg/math/#Sqrt&#34;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//	&#34;/pkg&#34;  → &#34;/pkg/math#Sqrt&#34;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	&#34;/&#34;     → &#34;/math/#Sqrt&#34;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//	&#34;&#34;      → &#34;/math#Sqrt&#34;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func (l *DocLink) DefaultURL(baseURL string) string {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if l.ImportPath != &#34;&#34; {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		slash := &#34;&#34;
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		if strings.HasSuffix(baseURL, &#34;/&#34;) {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			slash = &#34;/&#34;
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		} else {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			baseURL += &#34;/&#34;
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		switch {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		case l.Name == &#34;&#34;:
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			return baseURL + l.ImportPath + slash
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		case l.Recv != &#34;&#34;:
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			return baseURL + l.ImportPath + slash + &#34;#&#34; + l.Recv + &#34;.&#34; + l.Name
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		default:
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			return baseURL + l.ImportPath + slash + &#34;#&#34; + l.Name
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	if l.Recv != &#34;&#34; {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		return &#34;#&#34; + l.Recv + &#34;.&#34; + l.Name
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	return &#34;#&#34; + l.Name
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// DefaultID returns the default anchor ID for the heading h.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// The default anchor ID is constructed by converting every</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// rune that is not alphanumeric ASCII to an underscore</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// and then adding the prefix “hdr-”.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// For example, if the heading text is “Go Doc Comments”,</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// the default ID is “hdr-Go_Doc_Comments”.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func (h *Heading) DefaultID() string {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// Note: The “hdr-” prefix is important to avoid DOM clobbering attacks.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// See https://pkg.go.dev/github.com/google/safehtml#Identifier.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	var out strings.Builder
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	var p textPrinter
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	p.oneLongLine(&amp;out, h.Text)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	s := strings.TrimSpace(out.String())
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	out.Reset()
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	out.WriteString(&#34;hdr-&#34;)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	for _, r := range s {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		if r &lt; 0x80 &amp;&amp; isIdentASCII(byte(r)) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			out.WriteByte(byte(r))
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		} else {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			out.WriteByte(&#39;_&#39;)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	return out.String()
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>type commentPrinter struct {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	*Printer
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Comment returns the standard Go formatting of the [Doc],</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// without any comment markers.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func (p *Printer) Comment(d *Doc) []byte {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	cp := &amp;commentPrinter{Printer: p}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	var out bytes.Buffer
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	for i, x := range d.Content {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		if i &gt; 0 &amp;&amp; blankBefore(x) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			out.WriteString(&#34;\n&#34;)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		cp.block(&amp;out, x)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// Print one block containing all the link definitions that were used,</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// and then a second block containing all the unused ones.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// This makes it easy to clean up the unused ones: gofmt and</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// delete the final block. And it&#39;s a nice visual signal without</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// affecting the way the comment formats for users.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	for i := 0; i &lt; 2; i++ {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		used := i == 0
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		first := true
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		for _, def := range d.Links {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			if def.Used == used {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>				if first {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>					out.WriteString(&#34;\n&#34;)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>					first = false
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>				}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				out.WriteString(&#34;[&#34;)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>				out.WriteString(def.Text)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>				out.WriteString(&#34;]: &#34;)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>				out.WriteString(def.URL)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				out.WriteString(&#34;\n&#34;)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	return out.Bytes()
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// blankBefore reports whether the block x requires a blank line before it.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// All blocks do, except for Lists that return false from x.BlankBefore().</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func blankBefore(x Block) bool {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if x, ok := x.(*List); ok {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return x.BlankBefore()
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return true
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// block prints the block x to out.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func (p *commentPrinter) block(out *bytes.Buffer, x Block) {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	default:
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		fmt.Fprintf(out, &#34;?%T&#34;, x)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	case *Paragraph:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		p.text(out, &#34;&#34;, x.Text)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		out.WriteString(&#34;\n&#34;)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	case *Heading:
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		out.WriteString(&#34;# &#34;)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		p.text(out, &#34;&#34;, x.Text)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		out.WriteString(&#34;\n&#34;)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	case *Code:
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		md := x.Text
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		for md != &#34;&#34; {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			var line string
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			line, md, _ = strings.Cut(md, &#34;\n&#34;)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			if line != &#34;&#34; {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				out.WriteString(&#34;\t&#34;)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				out.WriteString(line)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			out.WriteString(&#34;\n&#34;)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	case *List:
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		loose := x.BlankBetween()
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		for i, item := range x.Items {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			if i &gt; 0 &amp;&amp; loose {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				out.WriteString(&#34;\n&#34;)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			out.WriteString(&#34; &#34;)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			if item.Number == &#34;&#34; {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				out.WriteString(&#34; - &#34;)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			} else {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				out.WriteString(item.Number)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				out.WriteString(&#34;. &#34;)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			for i, blk := range item.Content {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				const fourSpace = &#34;    &#34;
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>					out.WriteString(&#34;\n&#34; + fourSpace)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				p.text(out, fourSpace, blk.(*Paragraph).Text)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				out.WriteString(&#34;\n&#34;)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// text prints the text sequence x to out.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func (p *commentPrinter) text(out *bytes.Buffer, indent string, x []Text) {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	for _, t := range x {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		switch t := t.(type) {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		case Plain:
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			p.indent(out, indent, string(t))
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		case Italic:
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			p.indent(out, indent, string(t))
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		case *Link:
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			if t.Auto {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				p.text(out, indent, t.Text)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			} else {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>				out.WriteString(&#34;[&#34;)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>				p.text(out, indent, t.Text)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				out.WriteString(&#34;]&#34;)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		case *DocLink:
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			out.WriteString(&#34;[&#34;)
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			p.text(out, indent, t.Text)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			out.WriteString(&#34;]&#34;)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// indent prints s to out, indenting with the indent string</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// after each newline in s.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>func (p *commentPrinter) indent(out *bytes.Buffer, indent, s string) {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	for s != &#34;&#34; {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		line, rest, ok := strings.Cut(s, &#34;\n&#34;)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		out.WriteString(line)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		if ok {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			out.WriteString(&#34;\n&#34;)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			out.WriteString(indent)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		s = rest
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
</pre><p><a href="print.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
