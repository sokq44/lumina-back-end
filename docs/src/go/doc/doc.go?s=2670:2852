<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/doc/doc.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./doc.go?s=2670:2852#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/doc">doc</a>/<span class="text-muted">doc.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/doc">go/doc</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package doc extracts source code documentation from a Go AST.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package doc
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;go/doc/comment&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// Package is the documentation for an entire package.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type Package struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	Doc        string
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	Name       string
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	ImportPath string
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	Imports    []string
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Filenames  []string
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Notes      map[string][]*Note
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: For backward compatibility Bugs is still populated,</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// but all new code should use Notes instead.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Bugs []string
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// declarations</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Consts []*Value
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Types  []*Type
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Vars   []*Value
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Funcs  []*Func
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// Examples is a sorted list of examples associated with</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// the package. Examples are extracted from _test.go files</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// provided to NewFromFiles.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	Examples []*Example
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	importByName map[string]string
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	syms         map[string]bool
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Value is the documentation for a (possibly grouped) var or const declaration.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>type Value struct {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	Doc   string
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Names []string <span class="comment">// var or const names in declaration order</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Decl  *ast.GenDecl
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	order int
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Type is the documentation for a type declaration.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type Type struct {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	Doc  string
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Name string
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	Decl *ast.GenDecl
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// associated declarations</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Consts  []*Value <span class="comment">// sorted list of constants of (mostly) this type</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	Vars    []*Value <span class="comment">// sorted list of variables of (mostly) this type</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	Funcs   []*Func  <span class="comment">// sorted list of functions returning this type</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	Methods []*Func  <span class="comment">// sorted list of methods (including embedded ones) of this type</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// Examples is a sorted list of examples associated with</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// this type. Examples are extracted from _test.go files</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// provided to NewFromFiles.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Examples []*Example
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Func is the documentation for a func declaration.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>type Func struct {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	Doc  string
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	Name string
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	Decl *ast.FuncDecl
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// methods</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// (for functions, these fields have the respective zero value)</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	Recv  string <span class="comment">// actual   receiver &#34;T&#34; or &#34;*T&#34; possibly followed by type parameters [P1, ..., Pn]</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	Orig  string <span class="comment">// original receiver &#34;T&#34; or &#34;*T&#34;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	Level int    <span class="comment">// embedding level; 0 means not embedded</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// Examples is a sorted list of examples associated with this</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// function or method. Examples are extracted from _test.go files</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// provided to NewFromFiles.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	Examples []*Example
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// A Note represents a marked comment starting with &#34;MARKER(uid): note body&#34;.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Any note with a marker of 2 or more upper case [A-Z] letters and a uid of</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// at least one character is recognized. The &#34;:&#34; following the uid is optional.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Notes are collected in the Package.Notes map indexed by the notes marker.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="selection">type Note struct {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	Pos, End token.Pos </span><span class="selection-comment">// position range of the comment containing the marker</span><span class="selection">
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	UID      string    </span><span class="selection-comment">// uid found with the marker</span><span class="selection">
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	Body     string    </span><span class="selection-comment">// note body text</span><span class="selection">
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// Mode values control the operation of [New] and [NewFromFiles].</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>type Mode int
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>const (
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// AllDecls says to extract documentation for all package-level</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// declarations, not just exported ones.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	AllDecls Mode = 1 &lt;&lt; iota
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// AllMethods says to show all embedded methods, not just the ones of</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// invisible (unexported) anonymous fields.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	AllMethods
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// PreserveAST says to leave the AST unmodified. Originally, pieces of</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// the AST such as function bodies were nil-ed out to save memory in</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// godoc, but not all programs want that behavior.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	PreserveAST
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// New computes the package documentation for the given package AST.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// New takes ownership of the AST pkg and may edit or overwrite it.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// To have the [Examples] fields populated, use [NewFromFiles] and include</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// the package&#39;s _test.go files.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func New(pkg *ast.Package, importPath string, mode Mode) *Package {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	var r reader
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	r.readPackage(pkg, mode)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	r.computeMethodSets()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	r.cleanupTypes()
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	p := &amp;Package{
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		Doc:        r.doc,
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		Name:       pkg.Name,
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		ImportPath: importPath,
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		Imports:    sortedKeys(r.imports),
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		Filenames:  r.filenames,
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		Notes:      r.notes,
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		Bugs:       noteBodies(r.notes[&#34;BUG&#34;]),
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		Consts:     sortedValues(r.values, token.CONST),
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		Types:      sortedTypes(r.types, mode&amp;AllMethods != 0),
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		Vars:       sortedValues(r.values, token.VAR),
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		Funcs:      sortedFuncs(r.funcs, true),
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		importByName: r.importByName,
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		syms:         make(map[string]bool),
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	p.collectValues(p.Consts)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	p.collectValues(p.Vars)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	p.collectTypes(p.Types)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	p.collectFuncs(p.Funcs)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return p
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func (p *Package) collectValues(values []*Value) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	for _, v := range values {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		for _, name := range v.Names {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			p.syms[name] = true
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (p *Package) collectTypes(types []*Type) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	for _, t := range types {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		if p.syms[t.Name] {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			<span class="comment">// Shouldn&#39;t be any cycles but stop just in case.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			continue
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		p.syms[t.Name] = true
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		p.collectValues(t.Consts)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		p.collectValues(t.Vars)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		p.collectFuncs(t.Funcs)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		p.collectFuncs(t.Methods)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (p *Package) collectFuncs(funcs []*Func) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for _, f := range funcs {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		if f.Recv != &#34;&#34; {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			r := strings.TrimPrefix(f.Recv, &#34;*&#34;)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			if i := strings.IndexByte(r, &#39;[&#39;); i &gt;= 0 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>				r = r[:i] <span class="comment">// remove type parameters</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			p.syms[r+&#34;.&#34;+f.Name] = true
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		} else {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			p.syms[f.Name] = true
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// NewFromFiles computes documentation for a package.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// The package is specified by a list of *ast.Files and corresponding</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// file set, which must not be nil.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// NewFromFiles uses all provided files when computing documentation,</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// so it is the caller&#39;s responsibility to provide only the files that</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// match the desired build context. &#34;go/build&#34;.Context.MatchFile can</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// be used for determining whether a file matches a build context with</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// the desired GOOS and GOARCH values, and other build constraints.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// The import path of the package is specified by importPath.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// Examples found in _test.go files are associated with the corresponding</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// type, function, method, or the package, based on their name.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// If the example has a suffix in its name, it is set in the</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// [Example.Suffix] field. [Examples] with malformed names are skipped.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Optionally, a single extra argument of type [Mode] can be provided to</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// control low-level aspects of the documentation extraction behavior.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// NewFromFiles takes ownership of the AST files and may edit them,</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// unless the PreserveAST Mode bit is on.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>func NewFromFiles(fset *token.FileSet, files []*ast.File, importPath string, opts ...any) (*Package, error) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// Check for invalid API usage.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if fset == nil {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		panic(fmt.Errorf(&#34;doc.NewFromFiles: no token.FileSet provided (fset == nil)&#34;))
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	var mode Mode
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	switch len(opts) { <span class="comment">// There can only be 0 or 1 options, so a simple switch works for now.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	case 0:
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		<span class="comment">// Nothing to do.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	case 1:
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		m, ok := opts[0].(Mode)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		if !ok {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			panic(fmt.Errorf(&#34;doc.NewFromFiles: option argument type must be doc.Mode&#34;))
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		mode = m
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	default:
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		panic(fmt.Errorf(&#34;doc.NewFromFiles: there must not be more than 1 option argument&#34;))
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// Collect .go and _test.go files.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	var (
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		goFiles     = make(map[string]*ast.File)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		testGoFiles []*ast.File
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	for i := range files {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		f := fset.File(files[i].Pos())
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		if f == nil {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;file files[%d] is not found in the provided file set&#34;, i)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		switch name := f.Name(); {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		case strings.HasSuffix(name, &#34;.go&#34;) &amp;&amp; !strings.HasSuffix(name, &#34;_test.go&#34;):
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			goFiles[name] = files[i]
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		case strings.HasSuffix(name, &#34;_test.go&#34;):
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			testGoFiles = append(testGoFiles, files[i])
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		default:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;file files[%d] filename %q does not have a .go extension&#34;, i, name)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// TODO(dmitshur,gri): A relatively high level call to ast.NewPackage with a simpleImporter</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// ast.Importer implementation is made below. It might be possible to short-circuit and simplify.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// Compute package documentation.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	pkg, _ := ast.NewPackage(fset, goFiles, simpleImporter, nil) <span class="comment">// Ignore errors that can happen due to unresolved identifiers.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	p := New(pkg, importPath, mode)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	classifyExamples(p, Examples(testGoFiles...))
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	return p, nil
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// simpleImporter returns a (dummy) package object named by the last path</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// component of the provided package path (as is the convention for packages).</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// This is sufficient to resolve package identifiers without doing an actual</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// import. It never returns an error.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func simpleImporter(imports map[string]*ast.Object, path string) (*ast.Object, error) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	pkg := imports[path]
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if pkg == nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		<span class="comment">// note that strings.LastIndex returns -1 if there is no &#34;/&#34;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		pkg = ast.NewObj(ast.Pkg, path[strings.LastIndex(path, &#34;/&#34;)+1:])
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		pkg.Data = ast.NewScope(nil) <span class="comment">// required by ast.NewPackage for dot-import</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		imports[path] = pkg
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	return pkg, nil
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// lookupSym reports whether the package has a given symbol or method.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// If recv == &#34;&#34;, HasSym reports whether the package has a top-level</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// const, func, type, or var named name.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// If recv != &#34;&#34;, HasSym reports whether the package has a type</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// named recv with a method named name.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func (p *Package) lookupSym(recv, name string) bool {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	if recv != &#34;&#34; {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return p.syms[recv+&#34;.&#34;+name]
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	return p.syms[name]
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// lookupPackage returns the import path identified by name</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// in the given package. If name uniquely identifies a single import,</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// then lookupPackage returns that import.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// If multiple packages are imported as name, importPath returns &#34;&#34;, false.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// Otherwise, if name is the name of p itself, importPath returns &#34;&#34;, true,</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// to signal a reference to p.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// Otherwise, importPath returns &#34;&#34;, false.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>func (p *Package) lookupPackage(name string) (importPath string, ok bool) {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if path, ok := p.importByName[name]; ok {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		if path == &#34;&#34; {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			return &#34;&#34;, false <span class="comment">// multiple imports used the name</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		return path, true <span class="comment">// found import</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if p.Name == name {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return &#34;&#34;, true <span class="comment">// allow reference to this package</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	return &#34;&#34;, false <span class="comment">// unknown name</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// Parser returns a doc comment parser configured</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// for parsing doc comments from package p.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// Each call returns a new parser, so that the caller may</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// customize it before use.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func (p *Package) Parser() *comment.Parser {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return &amp;comment.Parser{
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		LookupPackage: p.lookupPackage,
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		LookupSym:     p.lookupSym,
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// Printer returns a doc comment printer configured</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// for printing doc comments from package p.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// Each call returns a new printer, so that the caller may</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// customize it before use.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>func (p *Package) Printer() *comment.Printer {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	<span class="comment">// No customization today, but having p.Printer()</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// gives us flexibility in the future, and it is convenient for callers.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	return &amp;comment.Printer{}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// HTML returns formatted HTML for the doc comment text.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// To customize details of the HTML, use [Package.Printer]</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// to obtain a [comment.Printer], and configure it</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// before calling its HTML method.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func (p *Package) HTML(text string) []byte {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return p.Printer().HTML(p.Parser().Parse(text))
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// Markdown returns formatted Markdown for the doc comment text.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// To customize details of the Markdown, use [Package.Printer]</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// to obtain a [comment.Printer], and configure it</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// before calling its Markdown method.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>func (p *Package) Markdown(text string) []byte {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	return p.Printer().Markdown(p.Parser().Parse(text))
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// Text returns formatted text for the doc comment text,</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// wrapped to 80 Unicode code points and using tabs for</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// code block indentation.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// To customize details of the formatting, use [Package.Printer]</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// to obtain a [comment.Printer], and configure it</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// before calling its Text method.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>func (p *Package) Text(text string) []byte {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return p.Printer().Text(p.Parser().Parse(text))
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
</pre><p><a href="doc.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
