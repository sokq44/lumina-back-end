<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/doc/example.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./example.go?s=1890:1938#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/doc">doc</a>/<span class="text-muted">example.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/doc">go/doc</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Extract example functions from file ASTs.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package doc
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;internal/lazyregexp&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// An Example represents an example function found in a test source file.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>type Example struct {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Name        string <span class="comment">// name of the item being exemplified (including optional suffix)</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Suffix      string <span class="comment">// example suffix, without leading &#39;_&#39; (only populated by NewFromFiles)</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Doc         string <span class="comment">// example function doc string</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Code        ast.Node
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Play        *ast.File <span class="comment">// a whole program version of the example</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	Comments    []*ast.CommentGroup
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Output      string <span class="comment">// expected output</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Unordered   bool
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	EmptyOutput bool <span class="comment">// expect empty output</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Order       int  <span class="comment">// original source code order</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// Examples returns the examples found in testFiles, sorted by Name field.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// The Order fields record the order in which the examples were encountered.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// The Suffix field is not populated when Examples is called directly, it is</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// only populated by [NewFromFiles] for examples it finds in _test.go files.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// Playable Examples must be in a package whose name ends in &#34;_test&#34;.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// An Example is &#34;playable&#34; (the Play field is non-nil) in either of these</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// circumstances:</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//   - The example function is self-contained: the function references only</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//     identifiers from other packages (or predeclared identifiers, such as</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//     &#34;int&#34;) and the test file does not include a dot import.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//   - The entire test file is the example: the file contains exactly one</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//     example function, zero test, fuzz test, or benchmark function, and at</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//     least one top-level function, type, variable, or constant declaration</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//     other than the example function.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="selection">func Examples(testFiles ...*ast.File) []*Example</span> {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	var list []*Example
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	for _, file := range testFiles {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		hasTests := false <span class="comment">// file contains tests, fuzz test, or benchmarks</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		numDecl := 0      <span class="comment">// number of non-import declarations in the file</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		var flist []*Example
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		for _, decl := range file.Decls {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>			if g, ok := decl.(*ast.GenDecl); ok &amp;&amp; g.Tok != token.IMPORT {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>				numDecl++
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>				continue
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>			}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			f, ok := decl.(*ast.FuncDecl)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			if !ok || f.Recv != nil {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>				continue
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			numDecl++
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>			name := f.Name.Name
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			if isTest(name, &#34;Test&#34;) || isTest(name, &#34;Benchmark&#34;) || isTest(name, &#34;Fuzz&#34;) {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>				hasTests = true
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>				continue
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>			if !isTest(name, &#34;Example&#34;) {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>				continue
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			if params := f.Type.Params; len(params.List) != 0 {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>				continue <span class="comment">// function has params; not a valid example</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			if f.Body == nil { <span class="comment">// ast.File.Body nil dereference (see issue 28044)</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>				continue
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			var doc string
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			if f.Doc != nil {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>				doc = f.Doc.Text()
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			output, unordered, hasOutput := exampleOutput(f.Body, file.Comments)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			flist = append(flist, &amp;Example{
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>				Name:        name[len(&#34;Example&#34;):],
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>				Doc:         doc,
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>				Code:        f.Body,
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>				Play:        playExample(file, f),
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>				Comments:    file.Comments,
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>				Output:      output,
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>				Unordered:   unordered,
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>				EmptyOutput: output == &#34;&#34; &amp;&amp; hasOutput,
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>				Order:       len(flist),
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			})
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		if !hasTests &amp;&amp; numDecl &gt; 1 &amp;&amp; len(flist) == 1 {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			<span class="comment">// If this file only has one example function, some</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			<span class="comment">// other top-level declarations, and no tests or</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			<span class="comment">// benchmarks, use the whole file as the example.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			flist[0].Code = file
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			flist[0].Play = playExampleFile(file)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		list = append(list, flist...)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// sort by name</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	sort.Slice(list, func(i, j int) bool {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return list[i].Name &lt; list[j].Name
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	})
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	return list
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>var outputPrefix = lazyregexp.New(`(?i)^[[:space:]]*(unordered )?output:`)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Extracts the expected output and whether there was a valid output comment.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func exampleOutput(b *ast.BlockStmt, comments []*ast.CommentGroup) (output string, unordered, ok bool) {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if _, last := lastComment(b, comments); last != nil {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		<span class="comment">// test that it begins with the correct prefix</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		text := last.Text()
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		if loc := outputPrefix.FindStringSubmatchIndex(text); loc != nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			if loc[2] != -1 {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				unordered = true
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			text = text[loc[1]:]
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			<span class="comment">// Strip zero or more spaces followed by \n or a single space.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			text = strings.TrimLeft(text, &#34; &#34;)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			if len(text) &gt; 0 &amp;&amp; text[0] == &#39;\n&#39; {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>				text = text[1:]
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			return text, unordered, true
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return &#34;&#34;, false, false <span class="comment">// no suitable comment found</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// isTest tells whether name looks like a test, example, fuzz test, or</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// benchmark. It is a Test (say) if there is a character after Test that is not</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// a lower-case letter. (We don&#39;t want Testiness.)</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func isTest(name, prefix string) bool {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if !strings.HasPrefix(name, prefix) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		return false
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	if len(name) == len(prefix) { <span class="comment">// &#34;Test&#34; is ok</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		return true
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	rune, _ := utf8.DecodeRuneInString(name[len(prefix):])
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	return !unicode.IsLower(rune)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// playExample synthesizes a new *ast.File based on the provided</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// file with the provided function body as the body of main.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func playExample(file *ast.File, f *ast.FuncDecl) *ast.File {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	body := f.Body
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if !strings.HasSuffix(file.Name.Name, &#34;_test&#34;) {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		<span class="comment">// We don&#39;t support examples that are part of the</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		<span class="comment">// greater package (yet).</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		return nil
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// Collect top-level declarations in the file.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	topDecls := make(map[*ast.Object]ast.Decl)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	typMethods := make(map[string][]ast.Decl)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	for _, decl := range file.Decls {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		switch d := decl.(type) {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		case *ast.FuncDecl:
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			if d.Recv == nil {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>				topDecls[d.Name.Obj] = d
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			} else {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>				if len(d.Recv.List) == 1 {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>					t := d.Recv.List[0].Type
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>					tname, _ := baseTypeName(t)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>					typMethods[tname] = append(typMethods[tname], d)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>				}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		case *ast.GenDecl:
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			for _, spec := range d.Specs {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				switch s := spec.(type) {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>				case *ast.TypeSpec:
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>					topDecls[s.Name.Obj] = d
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>				case *ast.ValueSpec:
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>					for _, name := range s.Names {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>						topDecls[name.Obj] = d
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>					}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>				}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// Find unresolved identifiers and uses of top-level declarations.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	depDecls, unresolved := findDeclsAndUnresolved(body, topDecls, typMethods)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// Remove predeclared identifiers from unresolved list.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	for n := range unresolved {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		if predeclaredTypes[n] || predeclaredConstants[n] || predeclaredFuncs[n] {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			delete(unresolved, n)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// Use unresolved identifiers to determine the imports used by this</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// example. The heuristic assumes package names match base import</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// paths for imports w/o renames (should be good enough most of the time).</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	var namedImports []ast.Spec
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	var blankImports []ast.Spec <span class="comment">// _ imports</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// To preserve the blank lines between groups of imports, find the</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// start position of each group, and assign that position to all</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// imports from that group.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	groupStarts := findImportGroupStarts(file.Imports)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	groupStart := func(s *ast.ImportSpec) token.Pos {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		for i, start := range groupStarts {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			if s.Path.ValuePos &lt; start {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>				return groupStarts[i-1]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return groupStarts[len(groupStarts)-1]
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	for _, s := range file.Imports {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		p, err := strconv.Unquote(s.Path.Value)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		if err != nil {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			continue
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if p == &#34;syscall/js&#34; {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			<span class="comment">// We don&#39;t support examples that import syscall/js,</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			<span class="comment">// because the package syscall/js is not available in the playground.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			return nil
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		n := path.Base(p)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		if s.Name != nil {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			n = s.Name.Name
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			switch n {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			case &#34;_&#34;:
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				blankImports = append(blankImports, s)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>				continue
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			case &#34;.&#34;:
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				<span class="comment">// We can&#39;t resolve dot imports (yet).</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>				return nil
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if unresolved[n] {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			<span class="comment">// Copy the spec and its path to avoid modifying the original.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			spec := *s
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			path := *s.Path
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			spec.Path = &amp;path
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			spec.Path.ValuePos = groupStart(&amp;spec)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			namedImports = append(namedImports, &amp;spec)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			delete(unresolved, n)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// If there are other unresolved identifiers, give up because this</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// synthesized file is not going to build.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if len(unresolved) &gt; 0 {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		return nil
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// Include documentation belonging to blank imports.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	var comments []*ast.CommentGroup
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	for _, s := range blankImports {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		if c := s.(*ast.ImportSpec).Doc; c != nil {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			comments = append(comments, c)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// Include comments that are inside the function body.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	for _, c := range file.Comments {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		if body.Pos() &lt;= c.Pos() &amp;&amp; c.End() &lt;= body.End() {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			comments = append(comments, c)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// Strip the &#34;Output:&#34; or &#34;Unordered output:&#34; comment and adjust body</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// end position.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	body, comments = stripOutputComment(body, comments)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// Include documentation belonging to dependent declarations.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	for _, d := range depDecls {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		switch d := d.(type) {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		case *ast.GenDecl:
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			if d.Doc != nil {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>				comments = append(comments, d.Doc)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		case *ast.FuncDecl:
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			if d.Doc != nil {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>				comments = append(comments, d.Doc)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// Synthesize import declaration.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	importDecl := &amp;ast.GenDecl{
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		Tok:    token.IMPORT,
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		Lparen: 1, <span class="comment">// Need non-zero Lparen and Rparen so that printer</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		Rparen: 1, <span class="comment">// treats this as a factored import.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	importDecl.Specs = append(namedImports, blankImports...)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// Synthesize main function.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	funcDecl := &amp;ast.FuncDecl{
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		Name: ast.NewIdent(&#34;main&#34;),
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		Type: f.Type,
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		Body: body,
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	decls := make([]ast.Decl, 0, 2+len(depDecls))
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	decls = append(decls, importDecl)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	decls = append(decls, depDecls...)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	decls = append(decls, funcDecl)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	sort.Slice(decls, func(i, j int) bool {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return decls[i].Pos() &lt; decls[j].Pos()
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	})
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	sort.Slice(comments, func(i, j int) bool {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		return comments[i].Pos() &lt; comments[j].Pos()
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	})
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// Synthesize file.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	return &amp;ast.File{
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		Name:     ast.NewIdent(&#34;main&#34;),
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		Decls:    decls,
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		Comments: comments,
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// findDeclsAndUnresolved returns all the top-level declarations mentioned in</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// the body, and a set of unresolved symbols (those that appear in the body but</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// have no declaration in the program).</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// topDecls maps objects to the top-level declaration declaring them (not</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// necessarily obj.Decl, as obj.Decl will be a Spec for GenDecls, but</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// topDecls[obj] will be the GenDecl itself).</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>func findDeclsAndUnresolved(body ast.Node, topDecls map[*ast.Object]ast.Decl, typMethods map[string][]ast.Decl) ([]ast.Decl, map[string]bool) {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// This function recursively finds every top-level declaration used</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// transitively by the body, populating usedDecls and usedObjs. Then it</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// trims down the declarations to include only the symbols actually</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	<span class="comment">// referenced by the body.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	unresolved := make(map[string]bool)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	var depDecls []ast.Decl
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	usedDecls := make(map[ast.Decl]bool)   <span class="comment">// set of top-level decls reachable from the body</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	usedObjs := make(map[*ast.Object]bool) <span class="comment">// set of objects reachable from the body (each declared by a usedDecl)</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	var inspectFunc func(ast.Node) bool
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	inspectFunc = func(n ast.Node) bool {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		switch e := n.(type) {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		case *ast.Ident:
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			if e.Obj == nil &amp;&amp; e.Name != &#34;_&#34; {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>				unresolved[e.Name] = true
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			} else if d := topDecls[e.Obj]; d != nil {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				usedObjs[e.Obj] = true
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>				if !usedDecls[d] {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>					usedDecls[d] = true
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>					depDecls = append(depDecls, d)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>				}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			return true
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		case *ast.SelectorExpr:
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			<span class="comment">// For selector expressions, only inspect the left hand side.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			<span class="comment">// (For an expression like fmt.Println, only add &#34;fmt&#34; to the</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			<span class="comment">// set of unresolved names, not &#34;Println&#34;.)</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			ast.Inspect(e.X, inspectFunc)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			return false
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		case *ast.KeyValueExpr:
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			<span class="comment">// For key value expressions, only inspect the value</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			<span class="comment">// as the key should be resolved by the type of the</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			<span class="comment">// composite literal.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			ast.Inspect(e.Value, inspectFunc)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			return false
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		return true
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	inspectFieldList := func(fl *ast.FieldList) {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		if fl != nil {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			for _, f := range fl.List {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				ast.Inspect(f.Type, inspectFunc)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>			}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// Find the decls immediately referenced by body.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	ast.Inspect(body, inspectFunc)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	<span class="comment">// Now loop over them, adding to the list when we find a new decl that the</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	<span class="comment">// body depends on. Keep going until we don&#39;t find anything new.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	for i := 0; i &lt; len(depDecls); i++ {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		switch d := depDecls[i].(type) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		case *ast.FuncDecl:
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			<span class="comment">// Inpect type parameters.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			inspectFieldList(d.Type.TypeParams)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			<span class="comment">// Inspect types of parameters and results. See #28492.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			inspectFieldList(d.Type.Params)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			inspectFieldList(d.Type.Results)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			<span class="comment">// Functions might not have a body. See #42706.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			if d.Body != nil {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>				ast.Inspect(d.Body, inspectFunc)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		case *ast.GenDecl:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			for _, spec := range d.Specs {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				switch s := spec.(type) {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				case *ast.TypeSpec:
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>					inspectFieldList(s.TypeParams)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>					ast.Inspect(s.Type, inspectFunc)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>					depDecls = append(depDecls, typMethods[s.Name.Name]...)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				case *ast.ValueSpec:
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					if s.Type != nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>						ast.Inspect(s.Type, inspectFunc)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>					}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>					for _, val := range s.Values {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>						ast.Inspect(val, inspectFunc)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>					}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// Some decls include multiple specs, such as a variable declaration with</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// multiple variables on the same line, or a parenthesized declaration. Trim</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// the declarations to include only the specs that are actually mentioned.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// However, if there is a constant group with iota, leave it all: later</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// constant declarations in the group may have no value and so cannot stand</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// on their own, and removing any constant from the group could change the</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	<span class="comment">// values of subsequent ones.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// See testdata/examples/iota.go for a minimal example.</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	var ds []ast.Decl
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	for _, d := range depDecls {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		switch d := d.(type) {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		case *ast.FuncDecl:
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			ds = append(ds, d)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		case *ast.GenDecl:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			containsIota := false <span class="comment">// does any spec have iota?</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			<span class="comment">// Collect all Specs that were mentioned in the example.</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			var specs []ast.Spec
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			for _, s := range d.Specs {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>				switch s := s.(type) {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>				case *ast.TypeSpec:
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>					if usedObjs[s.Name.Obj] {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>						specs = append(specs, s)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				case *ast.ValueSpec:
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>					if !containsIota {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>						containsIota = hasIota(s)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>					}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>					<span class="comment">// A ValueSpec may have multiple names (e.g. &#34;var a, b int&#34;).</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>					<span class="comment">// Keep only the names that were mentioned in the example.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>					<span class="comment">// Exception: the multiple names have a single initializer (which</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>					<span class="comment">// would be a function call with multiple return values). In that</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>					<span class="comment">// case, keep everything.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>					if len(s.Names) &gt; 1 &amp;&amp; len(s.Values) == 1 {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>						specs = append(specs, s)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>						continue
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>					}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>					ns := *s
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>					ns.Names = nil
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>					ns.Values = nil
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>					for i, n := range s.Names {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>						if usedObjs[n.Obj] {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>							ns.Names = append(ns.Names, n)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>							if s.Values != nil {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>								ns.Values = append(ns.Values, s.Values[i])
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>							}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>						}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>					}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>					if len(ns.Names) &gt; 0 {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>						specs = append(specs, &amp;ns)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>					}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>				}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			if len(specs) &gt; 0 {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>				<span class="comment">// Constant with iota? Keep it all.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>				if d.Tok == token.CONST &amp;&amp; containsIota {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>					ds = append(ds, d)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>				} else {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>					<span class="comment">// Synthesize a GenDecl with just the Specs we need.</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>					nd := *d <span class="comment">// copy the GenDecl</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>					nd.Specs = specs
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>					if len(specs) == 1 {
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>						<span class="comment">// Remove grouping parens if there is only one spec.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>						nd.Lparen = 0
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>					}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>					ds = append(ds, &amp;nd)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	return ds, unresolved
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>func hasIota(s ast.Spec) bool {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	has := false
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	ast.Inspect(s, func(n ast.Node) bool {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		<span class="comment">// Check that this is the special built-in &#34;iota&#34; identifier, not</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		<span class="comment">// a user-defined shadow.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		if id, ok := n.(*ast.Ident); ok &amp;&amp; id.Name == &#34;iota&#34; &amp;&amp; id.Obj == nil {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			has = true
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			return false
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		return true
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	})
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	return has
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// findImportGroupStarts finds the start positions of each sequence of import</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">// specs that are not separated by a blank line.</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>func findImportGroupStarts(imps []*ast.ImportSpec) []token.Pos {
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	startImps := findImportGroupStarts1(imps)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	groupStarts := make([]token.Pos, len(startImps))
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	for i, imp := range startImps {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		groupStarts[i] = imp.Pos()
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	return groupStarts
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">// Helper for findImportGroupStarts to ease testing.</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>func findImportGroupStarts1(origImps []*ast.ImportSpec) []*ast.ImportSpec {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	<span class="comment">// Copy to avoid mutation.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	imps := make([]*ast.ImportSpec, len(origImps))
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	copy(imps, origImps)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// Assume the imports are sorted by position.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	sort.Slice(imps, func(i, j int) bool { return imps[i].Pos() &lt; imps[j].Pos() })
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// Assume gofmt has been applied, so there is a blank line between adjacent imps</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// if and only if they are more than 2 positions apart (newline, tab).</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	var groupStarts []*ast.ImportSpec
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	prevEnd := token.Pos(-2)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	for _, imp := range imps {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		if imp.Pos()-prevEnd &gt; 2 {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			groupStarts = append(groupStarts, imp)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		prevEnd = imp.End()
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		<span class="comment">// Account for end-of-line comments.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if imp.Comment != nil {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			prevEnd = imp.Comment.End()
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	return groupStarts
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// playExampleFile takes a whole file example and synthesizes a new *ast.File</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// such that the example is function main in package main.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>func playExampleFile(file *ast.File) *ast.File {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	<span class="comment">// Strip copyright comment if present.</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	comments := file.Comments
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	if len(comments) &gt; 0 &amp;&amp; strings.HasPrefix(comments[0].Text(), &#34;Copyright&#34;) {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		comments = comments[1:]
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	<span class="comment">// Copy declaration slice, rewriting the ExampleX function to main.</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	var decls []ast.Decl
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	for _, d := range file.Decls {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		if f, ok := d.(*ast.FuncDecl); ok &amp;&amp; isTest(f.Name.Name, &#34;Example&#34;) {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			<span class="comment">// Copy the FuncDecl, as it may be used elsewhere.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			newF := *f
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			newF.Name = ast.NewIdent(&#34;main&#34;)
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			newF.Body, comments = stripOutputComment(f.Body, comments)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			d = &amp;newF
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		decls = append(decls, d)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	<span class="comment">// Copy the File, as it may be used elsewhere.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	f := *file
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	f.Name = ast.NewIdent(&#34;main&#34;)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	f.Decls = decls
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	f.Comments = comments
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	return &amp;f
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// stripOutputComment finds and removes the &#34;Output:&#34; or &#34;Unordered output:&#34;</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// comment from body and comments, and adjusts the body block&#39;s end position.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func stripOutputComment(body *ast.BlockStmt, comments []*ast.CommentGroup) (*ast.BlockStmt, []*ast.CommentGroup) {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	<span class="comment">// Do nothing if there is no &#34;Output:&#34; or &#34;Unordered output:&#34; comment.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	i, last := lastComment(body, comments)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	if last == nil || !outputPrefix.MatchString(last.Text()) {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		return body, comments
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	<span class="comment">// Copy body and comments, as the originals may be used elsewhere.</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	newBody := &amp;ast.BlockStmt{
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		Lbrace: body.Lbrace,
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		List:   body.List,
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		Rbrace: last.Pos(),
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	newComments := make([]*ast.CommentGroup, len(comments)-1)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	copy(newComments, comments[:i])
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	copy(newComments[i:], comments[i+1:])
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	return newBody, newComments
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// lastComment returns the last comment inside the provided block.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>func lastComment(b *ast.BlockStmt, c []*ast.CommentGroup) (i int, last *ast.CommentGroup) {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	if b == nil {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		return
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	pos, end := b.Pos(), b.End()
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	for j, cg := range c {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		if cg.Pos() &lt; pos {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			continue
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		if cg.End() &gt; end {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			break
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		i, last = j, cg
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	return
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">// classifyExamples classifies examples and assigns them to the Examples field</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">// of the relevant Func, Type, or Package that the example is associated with.</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// The classification process is ambiguous in some cases:</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">//   - ExampleFoo_Bar matches a type named Foo_Bar</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">//     or a method named Foo.Bar.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">//   - ExampleFoo_bar matches a type named Foo_bar</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span><span class="comment">//     or Foo (with a &#34;bar&#34; suffix).</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span><span class="comment">// Examples with malformed names are not associated with anything.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>func classifyExamples(p *Package, examples []*Example) {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	if len(examples) == 0 {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		return
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">// Mapping of names for funcs, types, and methods to the example listing.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	ids := make(map[string]*[]*Example)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	ids[&#34;&#34;] = &amp;p.Examples <span class="comment">// package-level examples have an empty name</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	for _, f := range p.Funcs {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		if !token.IsExported(f.Name) {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			continue
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		ids[f.Name] = &amp;f.Examples
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	for _, t := range p.Types {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		if !token.IsExported(t.Name) {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			continue
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		ids[t.Name] = &amp;t.Examples
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		for _, f := range t.Funcs {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if !token.IsExported(f.Name) {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				continue
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			ids[f.Name] = &amp;f.Examples
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		for _, m := range t.Methods {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			if !token.IsExported(m.Name) {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				continue
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			ids[strings.TrimPrefix(nameWithoutInst(m.Recv), &#34;*&#34;)+&#34;_&#34;+m.Name] = &amp;m.Examples
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	<span class="comment">// Group each example with the associated func, type, or method.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	for _, ex := range examples {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		<span class="comment">// Consider all possible split points for the suffix</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		<span class="comment">// by starting at the end of string (no suffix case),</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		<span class="comment">// then trying all positions that contain a &#39;_&#39; character.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		<span class="comment">// An association is made on the first successful match.</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		<span class="comment">// Examples with malformed names that match nothing are skipped.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		for i := len(ex.Name); i &gt;= 0; i = strings.LastIndexByte(ex.Name[:i], &#39;_&#39;) {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			prefix, suffix, ok := splitExampleName(ex.Name, i)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			if !ok {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>				continue
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			exs, ok := ids[prefix]
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			if !ok {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>				continue
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			ex.Suffix = suffix
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			*exs = append(*exs, ex)
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			break
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		}
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	<span class="comment">// Sort list of example according to the user-specified suffix name.</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	for _, exs := range ids {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		sort.Slice((*exs), func(i, j int) bool {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			return (*exs)[i].Suffix &lt; (*exs)[j].Suffix
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		})
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span><span class="comment">// nameWithoutInst returns name if name has no brackets. If name contains</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span><span class="comment">// brackets, then it returns name with all the contents between (and including)</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// the outermost left and right bracket removed.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// Adapted from debug/gosym/symtab.go:Sym.nameWithoutInst.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>func nameWithoutInst(name string) string {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	start := strings.Index(name, &#34;[&#34;)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	if start &lt; 0 {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		return name
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	end := strings.LastIndex(name, &#34;]&#34;)
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	if end &lt; 0 {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		<span class="comment">// Malformed name, should contain closing bracket too.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		return name
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	return name[0:start] + name[end+1:]
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// splitExampleName attempts to split example name s at index i,</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">// and reports if that produces a valid split. The suffix may be</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// absent. Otherwise, it must start with a lower-case letter and</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// be preceded by &#39;_&#39;.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// One of i == len(s) or s[i] == &#39;_&#39; must be true.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>func splitExampleName(s string, i int) (prefix, suffix string, ok bool) {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	if i == len(s) {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		return s, &#34;&#34;, true
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	if i == len(s)-1 {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	prefix, suffix = s[:i], s[i+1:]
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	return prefix, suffix, isExampleSuffix(suffix)
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>func isExampleSuffix(s string) bool {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	r, size := utf8.DecodeRuneInString(s)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	return size &gt; 0 &amp;&amp; unicode.IsLower(r)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
</pre><p><a href="example.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
