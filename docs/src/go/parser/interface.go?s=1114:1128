<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/parser/interface.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./interface.go?s=1114:1128#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/parser">parser</a>/<span class="text-muted">interface.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/parser">go/parser</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file contains the exported entry points for invoking the parser.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package parser
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// If src != nil, readSource converts src to a []byte if possible;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// otherwise it returns an error. If src == nil, readSource returns</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// the result of reading the file specified by filename.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func readSource(filename string, src any) ([]byte, error) {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	if src != nil {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		switch s := src.(type) {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		case string:
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>			return []byte(s), nil
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		case []byte:
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>			return s, nil
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		case *bytes.Buffer:
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>			<span class="comment">// is io.Reader, but src is already available in []byte form</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>			if s != nil {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>				return s.Bytes(), nil
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>			}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		case io.Reader:
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>			return io.ReadAll(s)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		return nil, errors.New(&#34;invalid source&#34;)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	return os.ReadFile(filename)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// A Mode value is a set of flags (or 0).</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// They control the amount of source code parsed and other optional</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// parser functionality.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="selection">type Mode uint</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>const (
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	PackageClauseOnly    Mode             = 1 &lt;&lt; iota <span class="comment">// stop parsing after package clause</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	ImportsOnly                                       <span class="comment">// stop parsing after import declarations</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	ParseComments                                     <span class="comment">// parse comments and add them to AST</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	Trace                                             <span class="comment">// print a trace of parsed productions</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	DeclarationErrors                                 <span class="comment">// report declaration errors</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	SpuriousErrors                                    <span class="comment">// same as AllErrors, for backward-compatibility</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	SkipObjectResolution                              <span class="comment">// skip deprecated identifier resolution; see ParseFile</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	AllErrors            = SpuriousErrors             <span class="comment">// report all errors (not just the first 10 on different lines)</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// ParseFile parses the source code of a single Go source file and returns</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// the corresponding [ast.File] node. The source code may be provided via</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// the filename of the source file, or via the src parameter.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// If src != nil, ParseFile parses the source from src and the filename is</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// only used when recording position information. The type of the argument</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// for the src parameter must be string, []byte, or [io.Reader].</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// If src == nil, ParseFile parses the file specified by filename.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// The mode parameter controls the amount of source text parsed and</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// other optional parser functionality. If the [SkipObjectResolution]</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// mode bit is set (recommended), the object resolution phase of</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// parsing will be skipped, causing File.Scope, File.Unresolved, and</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// all Ident.Obj fields to be nil. Those fields are deprecated; see</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// [ast.Object] for details.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Position information is recorded in the file set fset, which must not be</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// nil.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// If the source couldn&#39;t be read, the returned AST is nil and the error</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// indicates the specific failure. If the source was read but syntax</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// errors were found, the result is a partial AST (with [ast.Bad]* nodes</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// representing the fragments of erroneous source code). Multiple errors</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// are returned via a scanner.ErrorList which is sorted by source position.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func ParseFile(fset *token.FileSet, filename string, src any, mode Mode) (f *ast.File, err error) {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	if fset == nil {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		panic(&#34;parser.ParseFile: no token.FileSet provided (fset == nil)&#34;)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// get source</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	text, err := readSource(filename, src)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	if err != nil {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		return nil, err
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	var p parser
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	defer func() {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		if e := recover(); e != nil {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			<span class="comment">// resume same panic if it&#39;s not a bailout</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			bail, ok := e.(bailout)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			if !ok {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>				panic(e)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			} else if bail.msg != &#34;&#34; {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				p.errors.Add(p.file.Position(bail.pos), bail.msg)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// set result values</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if f == nil {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			<span class="comment">// source is not a valid Go source file - satisfy</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			<span class="comment">// ParseFile API and return a valid (but) empty</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			<span class="comment">// *ast.File</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			f = &amp;ast.File{
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>				Name:  new(ast.Ident),
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				Scope: ast.NewScope(nil),
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		p.errors.Sort()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		err = p.errors.Err()
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}()
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// parse source</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	p.init(fset, filename, text, mode)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	f = p.parseFile()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// ParseDir calls [ParseFile] for all files with names ending in &#34;.go&#34; in the</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// directory specified by path and returns a map of package name -&gt; package</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// AST with all the packages found.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// If filter != nil, only the files with [fs.FileInfo] entries passing through</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// the filter (and ending in &#34;.go&#34;) are considered. The mode bits are passed</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// to [ParseFile] unchanged. Position information is recorded in fset, which</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// must not be nil.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// If the directory couldn&#39;t be read, a nil map and the respective error are</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// returned. If a parse error occurred, a non-nil but incomplete map and the</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// first error encountered are returned.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func ParseDir(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error) {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	list, err := os.ReadDir(path)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	if err != nil {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		return nil, err
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	pkgs = make(map[string]*ast.Package)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	for _, d := range list {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		if d.IsDir() || !strings.HasSuffix(d.Name(), &#34;.go&#34;) {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			continue
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if filter != nil {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			info, err := d.Info()
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			if err != nil {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>				return nil, err
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			if !filter(info) {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>				continue
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		filename := filepath.Join(path, d.Name())
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		if src, err := ParseFile(fset, filename, nil, mode); err == nil {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			name := src.Name.Name
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			pkg, found := pkgs[name]
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			if !found {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				pkg = &amp;ast.Package{
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>					Name:  name,
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>					Files: make(map[string]*ast.File),
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>				}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>				pkgs[name] = pkg
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			pkg.Files[filename] = src
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		} else if first == nil {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			first = err
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	return
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// ParseExprFrom is a convenience function for parsing an expression.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// The arguments have the same meaning as for [ParseFile], but the source must</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// be a valid Go (type or value) expression. Specifically, fset must not</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// be nil.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// If the source couldn&#39;t be read, the returned AST is nil and the error</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// indicates the specific failure. If the source was read but syntax</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// errors were found, the result is a partial AST (with [ast.Bad]* nodes</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// representing the fragments of erroneous source code). Multiple errors</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// are returned via a scanner.ErrorList which is sorted by source position.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func ParseExprFrom(fset *token.FileSet, filename string, src any, mode Mode) (expr ast.Expr, err error) {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if fset == nil {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		panic(&#34;parser.ParseExprFrom: no token.FileSet provided (fset == nil)&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// get source</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	text, err := readSource(filename, src)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if err != nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return nil, err
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	var p parser
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	defer func() {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if e := recover(); e != nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			<span class="comment">// resume same panic if it&#39;s not a bailout</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			bail, ok := e.(bailout)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			if !ok {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>				panic(e)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			} else if bail.msg != &#34;&#34; {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>				p.errors.Add(p.file.Position(bail.pos), bail.msg)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		p.errors.Sort()
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		err = p.errors.Err()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}()
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// parse expr</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	p.init(fset, filename, text, mode)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	expr = p.parseRhs()
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// If a semicolon was inserted, consume it;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">// report an error if there&#39;s more tokens.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if p.tok == token.SEMICOLON &amp;&amp; p.lit == &#34;\n&#34; {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		p.next()
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	p.expect(token.EOF)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// ParseExpr is a convenience function for obtaining the AST of an expression x.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// The position information recorded in the AST is undefined. The filename used</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// in error messages is the empty string.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// If syntax errors were found, the result is a partial AST (with [ast.Bad]* nodes</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// representing the fragments of erroneous source code). Multiple errors are</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// returned via a scanner.ErrorList which is sorted by source position.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func ParseExpr(x string) (ast.Expr, error) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return ParseExprFrom(token.NewFileSet(), &#34;&#34;, []byte(x), 0)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
</pre><p><a href="interface.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
