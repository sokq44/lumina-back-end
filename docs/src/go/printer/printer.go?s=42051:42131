<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/printer/printer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./printer.go?s=42051:42131#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/printer">printer</a>/<span class="text-muted">printer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/printer">go/printer</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package printer implements printing of AST nodes.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package printer
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;go/build/constraint&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;text/tabwriter&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>const (
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	maxNewlines = 2     <span class="comment">// max. number of newlines between source text</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	debug       = false <span class="comment">// enable for debugging</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	infinity    = 1 &lt;&lt; 30
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>type whiteSpace byte
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>const (
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	ignore   = whiteSpace(0)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	blank    = whiteSpace(&#39; &#39;)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	vtab     = whiteSpace(&#39;\v&#39;)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	newline  = whiteSpace(&#39;\n&#39;)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	formfeed = whiteSpace(&#39;\f&#39;)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	indent   = whiteSpace(&#39;&gt;&#39;)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	unindent = whiteSpace(&#39;&lt;&#39;)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// A pmode value represents the current printer mode.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>type pmode int
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>const (
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	noExtraBlank     pmode = 1 &lt;&lt; iota <span class="comment">// disables extra blank after /*-style comment</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	noExtraLinebreak                   <span class="comment">// disables extra line break after /*-style comment</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>type commentInfo struct {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	cindex         int               <span class="comment">// current comment index</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	comment        *ast.CommentGroup <span class="comment">// = printer.comments[cindex]; or nil</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	commentOffset  int               <span class="comment">// = printer.posFor(printer.comments[cindex].List[0].Pos()).Offset; or infinity</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	commentNewline bool              <span class="comment">// true if the comment group contains newlines</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>type printer struct {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// Configuration (does not change after initialization)</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Config
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	fset *token.FileSet
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// Current state</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	output       []byte       <span class="comment">// raw printer result</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	indent       int          <span class="comment">// current indentation</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	level        int          <span class="comment">// level == 0: outside composite literal; level &gt; 0: inside composite literal</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	mode         pmode        <span class="comment">// current printer mode</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	endAlignment bool         <span class="comment">// if set, terminate alignment immediately</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	impliedSemi  bool         <span class="comment">// if set, a linebreak implies a semicolon</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	lastTok      token.Token  <span class="comment">// last token printed (token.ILLEGAL if it&#39;s whitespace)</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	prevOpen     token.Token  <span class="comment">// previous non-brace &#34;open&#34; token (, [, or token.ILLEGAL</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	wsbuf        []whiteSpace <span class="comment">// delayed white space</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	goBuild      []int        <span class="comment">// start index of all //go:build comments in output</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	plusBuild    []int        <span class="comment">// start index of all // +build comments in output</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Positions</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// The out position differs from the pos position when the result</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// formatting differs from the source formatting (in the amount of</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// white space). If there&#39;s a difference and SourcePos is set in</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// ConfigMode, //line directives are used in the output to restore</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// original source positions for a reader.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	pos          token.Position <span class="comment">// current position in AST (source) space</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	out          token.Position <span class="comment">// current position in output space</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	last         token.Position <span class="comment">// value of pos after calling writeString</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	linePtr      *int           <span class="comment">// if set, record out.Line for the next token in *linePtr</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	sourcePosErr error          <span class="comment">// if non-nil, the first error emitting a //line directive</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// The list of all source comments, in order of appearance.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	comments        []*ast.CommentGroup <span class="comment">// may be nil</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	useNodeComments bool                <span class="comment">// if not set, ignore lead and line comments of nodes</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Information about p.comments[p.cindex]; set up by nextComment.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	commentInfo
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// Cache of already computed node sizes.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	nodeSizes map[ast.Node]int
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// Cache of most recently computed line position.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	cachedPos  token.Pos
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	cachedLine int <span class="comment">// line corresponding to cachedPos</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func (p *printer) internalError(msg ...any) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if debug {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		fmt.Print(p.pos.String() + &#34;: &#34;)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		fmt.Println(msg...)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		panic(&#34;go/printer&#34;)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// commentsHaveNewline reports whether a list of comments belonging to</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// an *ast.CommentGroup contains newlines. Because the position information</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// may only be partially correct, we also have to read the comment text.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (p *printer) commentsHaveNewline(list []*ast.Comment) bool {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// len(list) &gt; 0</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	line := p.lineFor(list[0].Pos())
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	for i, c := range list {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		if i &gt; 0 &amp;&amp; p.lineFor(list[i].Pos()) != line {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			<span class="comment">// not all comments on the same line</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			return true
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		if t := c.Text; len(t) &gt;= 2 &amp;&amp; (t[1] == &#39;/&#39; || strings.Contains(t, &#34;\n&#34;)) {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			return true
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	_ = line
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	return false
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (p *printer) nextComment() {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	for p.cindex &lt; len(p.comments) {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		c := p.comments[p.cindex]
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		p.cindex++
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		if list := c.List; len(list) &gt; 0 {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			p.comment = c
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			p.commentOffset = p.posFor(list[0].Pos()).Offset
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			p.commentNewline = p.commentsHaveNewline(list)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			return
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		<span class="comment">// we should not reach here (correct ASTs don&#39;t have empty</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">// ast.CommentGroup nodes), but be conservative and try again</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// no more comments</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	p.commentOffset = infinity
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// commentBefore reports whether the current comment group occurs</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// before the next position in the source code and printing it does</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// not introduce implicit semicolons.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func (p *printer) commentBefore(next token.Position) bool {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	return p.commentOffset &lt; next.Offset &amp;&amp; (!p.impliedSemi || !p.commentNewline)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// commentSizeBefore returns the estimated size of the</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// comments on the same line before the next position.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func (p *printer) commentSizeBefore(next token.Position) int {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// save/restore current p.commentInfo (p.nextComment() modifies it)</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	defer func(info commentInfo) {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		p.commentInfo = info
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}(p.commentInfo)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	size := 0
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	for p.commentBefore(next) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		for _, c := range p.comment.List {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			size += len(c.Text)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		p.nextComment()
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return size
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// recordLine records the output line number for the next non-whitespace</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// token in *linePtr. It is used to compute an accurate line number for a</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// formatted construct, independent of pending (not yet emitted) whitespace</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// or comments.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>func (p *printer) recordLine(linePtr *int) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	p.linePtr = linePtr
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// linesFrom returns the number of output lines between the current</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// output line and the line argument, ignoring any pending (not yet</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// emitted) whitespace or comments. It is used to compute an accurate</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// size (in number of lines) for a formatted construct.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (p *printer) linesFrom(line int) int {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return p.out.Line - line
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (p *printer) posFor(pos token.Pos) token.Position {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// not used frequently enough to cache entire token.Position</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	return p.fset.PositionFor(pos, false <span class="comment">/* absolute position */</span>)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (p *printer) lineFor(pos token.Pos) int {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if pos != p.cachedPos {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		p.cachedPos = pos
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		p.cachedLine = p.fset.PositionFor(pos, false <span class="comment">/* absolute position */</span>).Line
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return p.cachedLine
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// writeLineDirective writes a //line directive if necessary.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func (p *printer) writeLineDirective(pos token.Position) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if pos.IsValid() &amp;&amp; (p.out.Line != pos.Line || p.out.Filename != pos.Filename) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		if strings.ContainsAny(pos.Filename, &#34;\r\n&#34;) {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			if p.sourcePosErr == nil {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				p.sourcePosErr = fmt.Errorf(&#34;go/printer: source filename contains unexpected newline character: %q&#34;, pos.Filename)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		p.output = append(p.output, tabwriter.Escape) <span class="comment">// protect &#39;\n&#39; in //line from tabwriter interpretation</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		p.output = append(p.output, fmt.Sprintf(&#34;//line %s:%d\n&#34;, pos.Filename, pos.Line)...)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		p.output = append(p.output, tabwriter.Escape)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		<span class="comment">// p.out must match the //line directive</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		p.out.Filename = pos.Filename
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		p.out.Line = pos.Line
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// writeIndent writes indentation.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func (p *printer) writeIndent() {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// use &#34;hard&#34; htabs - indentation columns</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// must not be discarded by the tabwriter</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	n := p.Config.Indent + p.indent <span class="comment">// include base indentation</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		p.output = append(p.output, &#39;\t&#39;)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// update positions</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	p.pos.Offset += n
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	p.pos.Column += n
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	p.out.Column += n
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// writeByte writes ch n times to p.output and updates p.pos.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// Only used to write formatting (white space) characters.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func (p *printer) writeByte(ch byte, n int) {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	if p.endAlignment {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		<span class="comment">// Ignore any alignment control character;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		<span class="comment">// and at the end of the line, break with</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		<span class="comment">// a formfeed to indicate termination of</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// existing columns.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		switch ch {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		case &#39;\t&#39;, &#39;\v&#39;:
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			ch = &#39; &#39;
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		case &#39;\n&#39;, &#39;\f&#39;:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			ch = &#39;\f&#39;
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			p.endAlignment = false
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if p.out.Column == 1 {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		<span class="comment">// no need to write line directives before white space</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		p.writeIndent()
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		p.output = append(p.output, ch)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// update positions</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	p.pos.Offset += n
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if ch == &#39;\n&#39; || ch == &#39;\f&#39; {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		p.pos.Line += n
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		p.out.Line += n
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		p.pos.Column = 1
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		p.out.Column = 1
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		return
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	p.pos.Column += n
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	p.out.Column += n
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// writeString writes the string s to p.output and updates p.pos, p.out,</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// and p.last. If isLit is set, s is escaped w/ tabwriter.Escape characters</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// to protect s from being interpreted by the tabwriter.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// Note: writeString is only used to write Go tokens, literals, and</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// comments, all of which must be written literally. Thus, it is correct</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// to always set isLit = true. However, setting it explicitly only when</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// needed (i.e., when we don&#39;t know that s contains no tabs or line breaks)</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// avoids processing extra escape characters and reduces run time of the</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// printer benchmark by up to 10%.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func (p *printer) writeString(pos token.Position, s string, isLit bool) {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if p.out.Column == 1 {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		if p.Config.Mode&amp;SourcePos != 0 {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			p.writeLineDirective(pos)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		p.writeIndent()
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	if pos.IsValid() {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		<span class="comment">// update p.pos (if pos is invalid, continue with existing p.pos)</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// Note: Must do this after handling line beginnings because</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		<span class="comment">// writeIndent updates p.pos if there&#39;s indentation, but p.pos</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		<span class="comment">// is the position of s.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		p.pos = pos
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if isLit {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		<span class="comment">// Protect s such that is passes through the tabwriter</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		<span class="comment">// unchanged. Note that valid Go programs cannot contain</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		<span class="comment">// tabwriter.Escape bytes since they do not appear in legal</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// UTF-8 sequences.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		p.output = append(p.output, tabwriter.Escape)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if debug {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		p.output = append(p.output, fmt.Sprintf(&#34;/*%s*/&#34;, pos)...) <span class="comment">// do not update p.pos!</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	p.output = append(p.output, s...)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// update positions</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	nlines := 0
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	var li int <span class="comment">// index of last newline; valid if nlines &gt; 0</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		<span class="comment">// Raw string literals may contain any character except back quote (`).</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		if ch := s[i]; ch == &#39;\n&#39; || ch == &#39;\f&#39; {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			<span class="comment">// account for line break</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			nlines++
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			li = i
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			<span class="comment">// A line break inside a literal will break whatever column</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			<span class="comment">// formatting is in place; ignore any further alignment through</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			<span class="comment">// the end of the line.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			p.endAlignment = true
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	p.pos.Offset += len(s)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if nlines &gt; 0 {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		p.pos.Line += nlines
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		p.out.Line += nlines
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		c := len(s) - li
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		p.pos.Column = c
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		p.out.Column = c
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	} else {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		p.pos.Column += len(s)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		p.out.Column += len(s)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if isLit {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		p.output = append(p.output, tabwriter.Escape)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	p.last = p.pos
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// writeCommentPrefix writes the whitespace before a comment.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// If there is any pending whitespace, it consumes as much of</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// it as is likely to help position the comment nicely.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// pos is the comment position, next the position of the item</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// after all pending comments, prev is the previous comment in</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// a group of comments (or nil), and tok is the next token.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func (p *printer) writeCommentPrefix(pos, next token.Position, prev *ast.Comment, tok token.Token) {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	if len(p.output) == 0 {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		<span class="comment">// the comment is the first item to be printed - don&#39;t write any whitespace</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		return
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if pos.IsValid() &amp;&amp; pos.Filename != p.last.Filename {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		<span class="comment">// comment in a different file - separate with newlines</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		p.writeByte(&#39;\f&#39;, maxNewlines)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		return
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	if pos.Line == p.last.Line &amp;&amp; (prev == nil || prev.Text[1] != &#39;/&#39;) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		<span class="comment">// comment on the same line as last item:</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		<span class="comment">// separate with at least one separator</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		hasSep := false
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		if prev == nil {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			<span class="comment">// first comment of a comment group</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			j := 0
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			for i, ch := range p.wsbuf {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				switch ch {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				case blank:
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>					<span class="comment">// ignore any blanks before a comment</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>					p.wsbuf[i] = ignore
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>					continue
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				case vtab:
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>					<span class="comment">// respect existing tabs - important</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>					<span class="comment">// for proper formatting of commented structs</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>					hasSep = true
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>					continue
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				case indent:
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>					<span class="comment">// apply pending indentation</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>					continue
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				j = i
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				break
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			p.writeWhitespace(j)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		<span class="comment">// make sure there is at least one separator</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		if !hasSep {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			sep := byte(&#39;\t&#39;)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			if pos.Line == next.Line {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				<span class="comment">// next item is on the same line as the comment</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				<span class="comment">// (which must be a /*-style comment): separate</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>				<span class="comment">// with a blank instead of a tab</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>				sep = &#39; &#39;
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			p.writeByte(sep, 1)
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	} else {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		<span class="comment">// comment on a different line:</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		<span class="comment">// separate with at least one line break</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		droppedLinebreak := false
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		j := 0
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		for i, ch := range p.wsbuf {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			switch ch {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			case blank, vtab:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				<span class="comment">// ignore any horizontal whitespace before line breaks</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				p.wsbuf[i] = ignore
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				continue
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			case indent:
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				<span class="comment">// apply pending indentation</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				continue
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			case unindent:
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				<span class="comment">// if this is not the last unindent, apply it</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				<span class="comment">// as it is (likely) belonging to the last</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				<span class="comment">// construct (e.g., a multi-line expression list)</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				<span class="comment">// and is not part of closing a block</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>				if i+1 &lt; len(p.wsbuf) &amp;&amp; p.wsbuf[i+1] == unindent {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>					continue
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>				<span class="comment">// if the next token is not a closing }, apply the unindent</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				<span class="comment">// if it appears that the comment is aligned with the</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				<span class="comment">// token; otherwise assume the unindent is part of a</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>				<span class="comment">// closing block and stop (this scenario appears with</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>				<span class="comment">// comments before a case label where the comments</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				<span class="comment">// apply to the next case instead of the current one)</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>				if tok != token.RBRACE &amp;&amp; pos.Column == next.Column {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>					continue
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>				}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			case newline, formfeed:
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				p.wsbuf[i] = ignore
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>				droppedLinebreak = prev == nil <span class="comment">// record only if first comment of a group</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			j = i
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			break
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		p.writeWhitespace(j)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		<span class="comment">// determine number of linebreaks before the comment</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		n := 0
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		if pos.IsValid() &amp;&amp; p.last.IsValid() {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			n = pos.Line - p.last.Line
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			if n &lt; 0 { <span class="comment">// should never happen</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				n = 0
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">// at the package scope level only (p.indent == 0),</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">// add an extra newline if we dropped one before:</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		<span class="comment">// this preserves a blank line before documentation</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		<span class="comment">// comments at the package scope level (issue 2570)</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		if p.indent == 0 &amp;&amp; droppedLinebreak {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			n++
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		<span class="comment">// make sure there is at least one line break</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		<span class="comment">// if the previous comment was a line comment</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		if n == 0 &amp;&amp; prev != nil &amp;&amp; prev.Text[1] == &#39;/&#39; {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			n = 1
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		if n &gt; 0 {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			<span class="comment">// use formfeeds to break columns before a comment;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			<span class="comment">// this is analogous to using formfeeds to separate</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			<span class="comment">// individual lines of /*-style comments</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			p.writeByte(&#39;\f&#39;, nlimit(n))
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// Returns true if s contains only white space</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// (only tabs and blanks can appear in the printer&#39;s context).</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>func isBlank(s string) bool {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		if s[i] &gt; &#39; &#39; {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			return false
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	return true
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// commonPrefix returns the common prefix of a and b.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>func commonPrefix(a, b string) string {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	i := 0
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	for i &lt; len(a) &amp;&amp; i &lt; len(b) &amp;&amp; a[i] == b[i] &amp;&amp; (a[i] &lt;= &#39; &#39; || a[i] == &#39;*&#39;) {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		i++
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	return a[0:i]
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// trimRight returns s with trailing whitespace removed.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>func trimRight(s string) string {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	return strings.TrimRightFunc(s, unicode.IsSpace)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// stripCommonPrefix removes a common prefix from /*-style comment lines (unless no</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// comment line is indented, all but the first line have some form of space prefix).</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// The prefix is computed using heuristics such that is likely that the comment</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// contents are nicely laid out after re-printing each line using the printer&#39;s</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// current indentation.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>func stripCommonPrefix(lines []string) {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if len(lines) &lt;= 1 {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		return <span class="comment">// at most one line - nothing to do</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	<span class="comment">// len(lines) &gt; 1</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	<span class="comment">// The heuristic in this function tries to handle a few</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	<span class="comment">// common patterns of /*-style comments: Comments where</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	<span class="comment">// the opening /* and closing */ are aligned and the</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	<span class="comment">// rest of the comment text is aligned and indented with</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	<span class="comment">// blanks or tabs, cases with a vertical &#34;line of stars&#34;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	<span class="comment">// on the left, and cases where the closing */ is on the</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	<span class="comment">// same line as the last comment text.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	<span class="comment">// Compute maximum common white prefix of all but the first,</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	<span class="comment">// last, and blank lines, and replace blank lines with empty</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	<span class="comment">// lines (the first line starts with /* and has no prefix).</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	<span class="comment">// In cases where only the first and last lines are not blank,</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	<span class="comment">// such as two-line comments, or comments where all inner lines</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// are blank, consider the last line for the prefix computation</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// since otherwise the prefix would be empty.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// Note that the first and last line are never empty (they</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// contain the opening /* and closing */ respectively) and</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	<span class="comment">// thus they can be ignored by the blank line check.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	prefix := &#34;&#34;
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	prefixSet := false
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if len(lines) &gt; 2 {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		for i, line := range lines[1 : len(lines)-1] {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			if isBlank(line) {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>				lines[1+i] = &#34;&#34; <span class="comment">// range starts with lines[1]</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			} else {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>				if !prefixSet {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>					prefix = line
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>					prefixSet = true
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>				}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>				prefix = commonPrefix(prefix, line)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	<span class="comment">// If we don&#39;t have a prefix yet, consider the last line.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	if !prefixSet {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		line := lines[len(lines)-1]
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		prefix = commonPrefix(line, line)
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">/*
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	 * Check for vertical &#34;line of stars&#34; and correct prefix accordingly.
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	 */</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	lineOfStars := false
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	if p, _, ok := strings.Cut(prefix, &#34;*&#34;); ok {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		<span class="comment">// remove trailing blank from prefix so stars remain aligned</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		prefix = strings.TrimSuffix(p, &#34; &#34;)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		lineOfStars = true
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	} else {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		<span class="comment">// No line of stars present.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		<span class="comment">// Determine the white space on the first line after the /*</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		<span class="comment">// and before the beginning of the comment text, assume two</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		<span class="comment">// blanks instead of the /* unless the first character after</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		<span class="comment">// the /* is a tab. If the first comment line is empty but</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		<span class="comment">// for the opening /*, assume up to 3 blanks or a tab. This</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		<span class="comment">// whitespace may be found as suffix in the common prefix.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		first := lines[0]
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		if isBlank(first[2:]) {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			<span class="comment">// no comment text on the first line:</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			<span class="comment">// reduce prefix by up to 3 blanks or a tab</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			<span class="comment">// if present - this keeps comment text indented</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			<span class="comment">// relative to the /* and */&#39;s if it was indented</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			<span class="comment">// in the first place</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			i := len(prefix)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			for n := 0; n &lt; 3 &amp;&amp; i &gt; 0 &amp;&amp; prefix[i-1] == &#39; &#39;; n++ {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>				i--
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			if i == len(prefix) &amp;&amp; i &gt; 0 &amp;&amp; prefix[i-1] == &#39;\t&#39; {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>				i--
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			prefix = prefix[0:i]
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		} else {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			<span class="comment">// comment text on the first line</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			suffix := make([]byte, len(first))
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			n := 2 <span class="comment">// start after opening /*</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			for n &lt; len(first) &amp;&amp; first[n] &lt;= &#39; &#39; {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>				suffix[n] = first[n]
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>				n++
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			if n &gt; 2 &amp;&amp; suffix[2] == &#39;\t&#39; {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>				<span class="comment">// assume the &#39;\t&#39; compensates for the /*</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>				suffix = suffix[2:n]
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			} else {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>				<span class="comment">// otherwise assume two blanks</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>				suffix[0], suffix[1] = &#39; &#39;, &#39; &#39;
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>				suffix = suffix[0:n]
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			<span class="comment">// Shorten the computed common prefix by the length of</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			<span class="comment">// suffix, if it is found as suffix of the prefix.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>			prefix = strings.TrimSuffix(prefix, string(suffix))
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	<span class="comment">// Handle last line: If it only contains a closing */, align it</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	<span class="comment">// with the opening /*, otherwise align the text with the other</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// lines.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	last := lines[len(lines)-1]
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	closing := &#34;*/&#34;
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	before, _, _ := strings.Cut(last, closing) <span class="comment">// closing always present</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	if isBlank(before) {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		<span class="comment">// last line only contains closing */</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		if lineOfStars {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			closing = &#34; */&#34; <span class="comment">// add blank to align final star</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		lines[len(lines)-1] = prefix + closing
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	} else {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		<span class="comment">// last line contains more comment text - assume</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		<span class="comment">// it is aligned like the other lines and include</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		<span class="comment">// in prefix computation</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		prefix = commonPrefix(prefix, last)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// Remove the common prefix from all but the first and empty lines.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	for i, line := range lines {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		if i &gt; 0 &amp;&amp; line != &#34;&#34; {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			lines[i] = line[len(prefix):]
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>func (p *printer) writeComment(comment *ast.Comment) {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	text := comment.Text
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	pos := p.posFor(comment.Pos())
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	const linePrefix = &#34;//line &#34;
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	if strings.HasPrefix(text, linePrefix) &amp;&amp; (!pos.IsValid() || pos.Column == 1) {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		<span class="comment">// Possibly a //-style line directive.</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		<span class="comment">// Suspend indentation temporarily to keep line directive valid.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		defer func(indent int) { p.indent = indent }(p.indent)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		p.indent = 0
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	<span class="comment">// shortcut common case of //-style comments</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	if text[1] == &#39;/&#39; {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		if constraint.IsGoBuild(text) {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			p.goBuild = append(p.goBuild, len(p.output))
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		} else if constraint.IsPlusBuild(text) {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			p.plusBuild = append(p.plusBuild, len(p.output))
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		p.writeString(pos, trimRight(text), true)
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		return
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	<span class="comment">// for /*-style comments, print line by line and let the</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	<span class="comment">// write function take care of the proper indentation</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	lines := strings.Split(text, &#34;\n&#34;)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	<span class="comment">// The comment started in the first column but is going</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	<span class="comment">// to be indented. For an idempotent result, add indentation</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	<span class="comment">// to all lines such that they look like they were indented</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	<span class="comment">// before - this will make sure the common prefix computation</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	<span class="comment">// is the same independent of how many times formatting is</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	<span class="comment">// applied (was issue 1835).</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	if pos.IsValid() &amp;&amp; pos.Column == 1 &amp;&amp; p.indent &gt; 0 {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		for i, line := range lines[1:] {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			lines[1+i] = &#34;   &#34; + line
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	stripCommonPrefix(lines)
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	<span class="comment">// write comment lines, separated by formfeed,</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	<span class="comment">// without a line break after the last line</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	for i, line := range lines {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			p.writeByte(&#39;\f&#39;, 1)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			pos = p.pos
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		if len(line) &gt; 0 {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			p.writeString(pos, trimRight(line), true)
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span><span class="comment">// writeCommentSuffix writes a line break after a comment if indicated</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span><span class="comment">// and processes any leftover indentation information. If a line break</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span><span class="comment">// is needed, the kind of break (newline vs formfeed) depends on the</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// pending whitespace. The writeCommentSuffix result indicates if a</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span><span class="comment">// newline was written or if a formfeed was dropped from the whitespace</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// buffer.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>func (p *printer) writeCommentSuffix(needsLinebreak bool) (wroteNewline, droppedFF bool) {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	for i, ch := range p.wsbuf {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		switch ch {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		case blank, vtab:
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			<span class="comment">// ignore trailing whitespace</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			p.wsbuf[i] = ignore
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		case indent, unindent:
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			<span class="comment">// don&#39;t lose indentation information</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		case newline, formfeed:
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			<span class="comment">// if we need a line break, keep exactly one</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			<span class="comment">// but remember if we dropped any formfeeds</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			if needsLinebreak {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				needsLinebreak = false
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>				wroteNewline = true
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			} else {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				if ch == formfeed {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>					droppedFF = true
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>				p.wsbuf[i] = ignore
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	p.writeWhitespace(len(p.wsbuf))
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	<span class="comment">// make sure we have a line break</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	if needsLinebreak {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		p.writeByte(&#39;\n&#39;, 1)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		wroteNewline = true
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	return
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span><span class="comment">// containsLinebreak reports whether the whitespace buffer contains any line breaks.</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>func (p *printer) containsLinebreak() bool {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	for _, ch := range p.wsbuf {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		if ch == newline || ch == formfeed {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			return true
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	return false
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span><span class="comment">// intersperseComments consumes all comments that appear before the next token</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span><span class="comment">// tok and prints it together with the buffered whitespace (i.e., the whitespace</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span><span class="comment">// that needs to be written before the next token). A heuristic is used to mix</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span><span class="comment">// the comments and whitespace. The intersperseComments result indicates if a</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">// newline was written or if a formfeed was dropped from the whitespace buffer.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>func (p *printer) intersperseComments(next token.Position, tok token.Token) (wroteNewline, droppedFF bool) {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	var last *ast.Comment
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	for p.commentBefore(next) {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		list := p.comment.List
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		changed := false
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		if p.lastTok != token.IMPORT &amp;&amp; <span class="comment">// do not rewrite cgo&#39;s import &#34;C&#34; comments</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			p.posFor(p.comment.Pos()).Column == 1 &amp;&amp;
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			p.posFor(p.comment.End()+1) == next {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			<span class="comment">// Unindented comment abutting next token position:</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			<span class="comment">// a top-level doc comment.</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			list = formatDocComment(list)
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			changed = true
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			if len(p.comment.List) &gt; 0 &amp;&amp; len(list) == 0 {
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>				<span class="comment">// The doc comment was removed entirely.</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>				<span class="comment">// Keep preceding whitespace.</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>				p.writeCommentPrefix(p.posFor(p.comment.Pos()), next, last, tok)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>				<span class="comment">// Change print state to continue at next.</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>				p.pos = next
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>				p.last = next
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>				<span class="comment">// There can&#39;t be any more comments.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>				p.nextComment()
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>				return p.writeCommentSuffix(false)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>			}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		for _, c := range list {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			p.writeCommentPrefix(p.posFor(c.Pos()), next, last, tok)
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			p.writeComment(c)
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			last = c
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		<span class="comment">// In case list was rewritten, change print state to where</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// the original list would have ended.</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		if len(p.comment.List) &gt; 0 &amp;&amp; changed {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>			last = p.comment.List[len(p.comment.List)-1]
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			p.pos = p.posFor(last.End())
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			p.last = p.pos
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		p.nextComment()
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	if last != nil {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		<span class="comment">// If the last comment is a /*-style comment and the next item</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		<span class="comment">// follows on the same line but is not a comma, and not a &#34;closing&#34;</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		<span class="comment">// token immediately following its corresponding &#34;opening&#34; token,</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		<span class="comment">// add an extra separator unless explicitly disabled. Use a blank</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		<span class="comment">// as separator unless we have pending linebreaks, they are not</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		<span class="comment">// disabled, and we are outside a composite literal, in which case</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		<span class="comment">// we want a linebreak (issue 15137).</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) This has become overly complicated. We should be able</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		<span class="comment">// to track whether we&#39;re inside an expression or statement and</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		<span class="comment">// use that information to decide more directly.</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		needsLinebreak := false
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		if p.mode&amp;noExtraBlank == 0 &amp;&amp;
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>			last.Text[1] == &#39;*&#39; &amp;&amp; p.lineFor(last.Pos()) == next.Line &amp;&amp;
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			tok != token.COMMA &amp;&amp;
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			(tok != token.RPAREN || p.prevOpen == token.LPAREN) &amp;&amp;
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>			(tok != token.RBRACK || p.prevOpen == token.LBRACK) {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>			if p.containsLinebreak() &amp;&amp; p.mode&amp;noExtraLinebreak == 0 &amp;&amp; p.level == 0 {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>				needsLinebreak = true
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			} else {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>				p.writeByte(&#39; &#39;, 1)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>			}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		<span class="comment">// Ensure that there is a line break after a //-style comment,</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		<span class="comment">// before EOF, and before a closing &#39;}&#39; unless explicitly disabled.</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		if last.Text[1] == &#39;/&#39; ||
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>			tok == token.EOF ||
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			tok == token.RBRACE &amp;&amp; p.mode&amp;noExtraLinebreak == 0 {
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			needsLinebreak = true
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		return p.writeCommentSuffix(needsLinebreak)
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	}
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	<span class="comment">// no comment was written - we should never reach here since</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	<span class="comment">// intersperseComments should not be called in that case</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	p.internalError(&#34;intersperseComments called without pending comments&#34;)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	return
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">// writeWhitespace writes the first n whitespace entries.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>func (p *printer) writeWhitespace(n int) {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	<span class="comment">// write entries</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		switch ch := p.wsbuf[i]; ch {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		case ignore:
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>			<span class="comment">// ignore!</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>		case indent:
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>			p.indent++
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		case unindent:
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>			p.indent--
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			if p.indent &lt; 0 {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>				p.internalError(&#34;negative indentation:&#34;, p.indent)
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>				p.indent = 0
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>			}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		case newline, formfeed:
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>			<span class="comment">// A line break immediately followed by a &#34;correcting&#34;</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>			<span class="comment">// unindent is swapped with the unindent - this permits</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>			<span class="comment">// proper label positioning. If a comment is between</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>			<span class="comment">// the line break and the label, the unindent is not</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>			<span class="comment">// part of the comment whitespace prefix and the comment</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>			<span class="comment">// will be positioned correctly indented.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>			if i+1 &lt; n &amp;&amp; p.wsbuf[i+1] == unindent {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>				<span class="comment">// Use a formfeed to terminate the current section.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>				<span class="comment">// Otherwise, a long label name on the next line leading</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>				<span class="comment">// to a wide column may increase the indentation column</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>				<span class="comment">// of lines before the label; effectively leading to wrong</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>				<span class="comment">// indentation.</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>				p.wsbuf[i], p.wsbuf[i+1] = unindent, formfeed
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>				i-- <span class="comment">// do it again</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>				continue
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>			}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>			fallthrough
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>		default:
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>			p.writeByte(byte(ch), 1)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	<span class="comment">// shift remaining entries down</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	l := copy(p.wsbuf, p.wsbuf[n:])
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	p.wsbuf = p.wsbuf[:l]
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span><span class="comment">// Printing interface</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span><span class="comment">// nlimit limits n to maxNewlines.</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>func nlimit(n int) int {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	return min(n, maxNewlines)
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>func mayCombine(prev token.Token, next byte) (b bool) {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	switch prev {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	case token.INT:
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		b = next == &#39;.&#39; <span class="comment">// 1.</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	case token.ADD:
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		b = next == &#39;+&#39; <span class="comment">// ++</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	case token.SUB:
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>		b = next == &#39;-&#39; <span class="comment">// --</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	case token.QUO:
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>		b = next == &#39;*&#39; <span class="comment">// /*</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	case token.LSS:
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		b = next == &#39;-&#39; || next == &#39;&lt;&#39; <span class="comment">// &lt;- or &lt;&lt;</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	case token.AND:
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>		b = next == &#39;&amp;&#39; || next == &#39;^&#39; <span class="comment">// &amp;&amp; or &amp;^</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	return
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>}
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>func (p *printer) setPos(pos token.Pos) {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	if pos.IsValid() {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		p.pos = p.posFor(pos) <span class="comment">// accurate position of next item</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span><span class="comment">// print prints a list of &#34;items&#34; (roughly corresponding to syntactic</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span><span class="comment">// tokens, but also including whitespace and formatting information).</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span><span class="comment">// It is the only print function that should be called directly from</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span><span class="comment">// any of the AST printing functions in nodes.go.</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span><span class="comment">// Whitespace is accumulated until a non-whitespace token appears. Any</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span><span class="comment">// comments that need to appear before that token are printed first,</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// taking into account the amount and structure of any pending white-</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span><span class="comment">// space for best comment placement. Then, any leftover whitespace is</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span><span class="comment">// printed, followed by the actual token.</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>func (p *printer) print(args ...any) {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	for _, arg := range args {
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>		<span class="comment">// information about the current arg</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>		var data string
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		var isLit bool
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		var impliedSemi bool <span class="comment">// value for p.impliedSemi after this arg</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		<span class="comment">// record previous opening token, if any</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		switch p.lastTok {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		case token.ILLEGAL:
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			<span class="comment">// ignore (white space)</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		case token.LPAREN, token.LBRACK:
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			p.prevOpen = p.lastTok
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		default:
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>			<span class="comment">// other tokens followed any opening token</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>			p.prevOpen = token.ILLEGAL
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		}
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		switch x := arg.(type) {
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		case pmode:
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>			<span class="comment">// toggle printer mode</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>			p.mode ^= x
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>			continue
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		case whiteSpace:
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>			if x == ignore {
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>				<span class="comment">// don&#39;t add ignore&#39;s to the buffer; they</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>				<span class="comment">// may screw up &#34;correcting&#34; unindents (see</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>				<span class="comment">// LabeledStmt)</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>				continue
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>			}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>			i := len(p.wsbuf)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>			if i == cap(p.wsbuf) {
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>				<span class="comment">// Whitespace sequences are very short so this should</span>
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>				<span class="comment">// never happen. Handle gracefully (but possibly with</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				<span class="comment">// bad comment placement) if it does happen.</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>				p.writeWhitespace(i)
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>				i = 0
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			}
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>			p.wsbuf = p.wsbuf[0 : i+1]
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			p.wsbuf[i] = x
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			if x == newline || x == formfeed {
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>				<span class="comment">// newlines affect the current state (p.impliedSemi)</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>				<span class="comment">// and not the state after printing arg (impliedSemi)</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>				<span class="comment">// because comments can be interspersed before the arg</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>				<span class="comment">// in this case</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>				p.impliedSemi = false
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>			}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>			p.lastTok = token.ILLEGAL
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>			continue
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		case *ast.Ident:
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			data = x.Name
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>			impliedSemi = true
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>			p.lastTok = token.IDENT
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>		case *ast.BasicLit:
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>			data = x.Value
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>			isLit = true
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			impliedSemi = true
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>			p.lastTok = x.Kind
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		case token.Token:
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>			s := x.String()
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>			if mayCombine(p.lastTok, s[0]) {
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>				<span class="comment">// the previous and the current token must be</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>				<span class="comment">// separated by a blank otherwise they combine</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>				<span class="comment">// into a different incorrect token sequence</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>				<span class="comment">// (except for token.INT followed by a &#39;.&#39; this</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>				<span class="comment">// should never happen because it is taken care</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>				<span class="comment">// of via binary expression formatting)</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>				if len(p.wsbuf) != 0 {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>					p.internalError(&#34;whitespace buffer not empty&#34;)
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>				}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>				p.wsbuf = p.wsbuf[0:1]
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>				p.wsbuf[0] = &#39; &#39;
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			}
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			data = s
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			<span class="comment">// some keywords followed by a newline imply a semicolon</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			switch x {
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>			case token.BREAK, token.CONTINUE, token.FALLTHROUGH, token.RETURN,
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>				token.INC, token.DEC, token.RPAREN, token.RBRACK, token.RBRACE:
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>				impliedSemi = true
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>			}
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>			p.lastTok = x
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		case string:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>			<span class="comment">// incorrect AST - print error message</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			data = x
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>			isLit = true
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>			impliedSemi = true
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>			p.lastTok = token.STRING
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		default:
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>			fmt.Fprintf(os.Stderr, &#34;print: unsupported argument %v (%T)\n&#34;, arg, arg)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>			panic(&#34;go/printer type&#34;)
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		}
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		<span class="comment">// data != &#34;&#34;</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		next := p.pos <span class="comment">// estimated/accurate position of next item</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		wroteNewline, droppedFF := p.flush(next, p.lastTok)
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>		<span class="comment">// intersperse extra newlines if present in the source and</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		<span class="comment">// if they don&#39;t cause extra semicolons (don&#39;t do this in</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>		<span class="comment">// flush as it will cause extra newlines at the end of a file)</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		if !p.impliedSemi {
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			n := nlimit(next.Line - p.pos.Line)
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>			<span class="comment">// don&#39;t exceed maxNewlines if we already wrote one</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>			if wroteNewline &amp;&amp; n == maxNewlines {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>				n = maxNewlines - 1
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>			}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			if n &gt; 0 {
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>				ch := byte(&#39;\n&#39;)
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>				if droppedFF {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>					ch = &#39;\f&#39; <span class="comment">// use formfeed since we dropped one before</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>				}
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>				p.writeByte(ch, n)
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>				impliedSemi = false
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>			}
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>		<span class="comment">// the next token starts now - record its line number if requested</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		if p.linePtr != nil {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>			*p.linePtr = p.out.Line
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>			p.linePtr = nil
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		p.writeString(next, data, isLit)
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		p.impliedSemi = impliedSemi
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>}
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span><span class="comment">// flush prints any pending comments and whitespace occurring textually</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span><span class="comment">// before the position of the next token tok. The flush result indicates</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">// if a newline was written or if a formfeed was dropped from the whitespace</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">// buffer.</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>func (p *printer) flush(next token.Position, tok token.Token) (wroteNewline, droppedFF bool) {
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	if p.commentBefore(next) {
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		<span class="comment">// if there are comments before the next item, intersperse them</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>		wroteNewline, droppedFF = p.intersperseComments(next, tok)
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	} else {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>		<span class="comment">// otherwise, write any leftover whitespace</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>		p.writeWhitespace(len(p.wsbuf))
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	}
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	return
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span><span class="comment">// getDoc returns the ast.CommentGroup associated with n, if any.</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>func getDoc(n ast.Node) *ast.CommentGroup {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	switch n := n.(type) {
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	case *ast.Field:
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>		return n.Doc
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	case *ast.ImportSpec:
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		return n.Doc
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	case *ast.ValueSpec:
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		return n.Doc
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	case *ast.TypeSpec:
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>		return n.Doc
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	case *ast.GenDecl:
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		return n.Doc
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	case *ast.FuncDecl:
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>		return n.Doc
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	case *ast.File:
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		return n.Doc
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	return nil
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>}
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>func getLastComment(n ast.Node) *ast.CommentGroup {
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	switch n := n.(type) {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	case *ast.Field:
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>		return n.Comment
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	case *ast.ImportSpec:
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		return n.Comment
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	case *ast.ValueSpec:
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		return n.Comment
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	case *ast.TypeSpec:
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		return n.Comment
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	case *ast.GenDecl:
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		if len(n.Specs) &gt; 0 {
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>			return getLastComment(n.Specs[len(n.Specs)-1])
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	case *ast.File:
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		if len(n.Comments) &gt; 0 {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>			return n.Comments[len(n.Comments)-1]
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>		}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	return nil
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>}
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>func (p *printer) printNode(node any) error {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	<span class="comment">// unpack *CommentedNode, if any</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	var comments []*ast.CommentGroup
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	if cnode, ok := node.(*CommentedNode); ok {
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>		node = cnode.Node
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		comments = cnode.Comments
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	if comments != nil {
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>		<span class="comment">// commented node - restrict comment list to relevant range</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		n, ok := node.(ast.Node)
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>		if !ok {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>			goto unsupported
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>		}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		beg := n.Pos()
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		end := n.End()
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		<span class="comment">// if the node has associated documentation,</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		<span class="comment">// include that commentgroup in the range</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>		<span class="comment">// (the comment list is sorted in the order</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		<span class="comment">// of the comment appearance in the source code)</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		if doc := getDoc(n); doc != nil {
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>			beg = doc.Pos()
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		}
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>		if com := getLastComment(n); com != nil {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			if e := com.End(); e &gt; end {
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>				end = e
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>			}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>		}
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>		<span class="comment">// token.Pos values are global offsets, we can</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		<span class="comment">// compare them directly</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		i := 0
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		for i &lt; len(comments) &amp;&amp; comments[i].End() &lt; beg {
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>			i++
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		j := i
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		for j &lt; len(comments) &amp;&amp; comments[j].Pos() &lt; end {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			j++
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>		if i &lt; j {
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>			p.comments = comments[i:j]
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	} else if n, ok := node.(*ast.File); ok {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>		<span class="comment">// use ast.File comments, if any</span>
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		p.comments = n.Comments
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	}
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	<span class="comment">// if there are no comments, use node comments</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	p.useNodeComments = p.comments == nil
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	<span class="comment">// get comments ready for use</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	p.nextComment()
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	p.print(pmode(0))
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	<span class="comment">// format node</span>
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	switch n := node.(type) {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	case ast.Expr:
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		p.expr(n)
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	case ast.Stmt:
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		<span class="comment">// A labeled statement will un-indent to position the label.</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>		<span class="comment">// Set p.indent to 1 so we don&#39;t get indent &#34;underflow&#34;.</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		if _, ok := n.(*ast.LabeledStmt); ok {
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>			p.indent = 1
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>		}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>		p.stmt(n, false)
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	case ast.Decl:
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		p.decl(n)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	case ast.Spec:
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>		p.spec(n, 1, false)
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	case []ast.Stmt:
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		<span class="comment">// A labeled statement will un-indent to position the label.</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		<span class="comment">// Set p.indent to 1 so we don&#39;t get indent &#34;underflow&#34;.</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>		for _, s := range n {
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>			if _, ok := s.(*ast.LabeledStmt); ok {
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>				p.indent = 1
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>			}
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		}
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		p.stmtList(n, 0, false)
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	case []ast.Decl:
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>		p.declList(n)
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>	case *ast.File:
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		p.file(n)
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>	default:
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		goto unsupported
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>	}
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	return p.sourcePosErr
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>unsupported:
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	return fmt.Errorf(&#34;go/printer: unsupported node type %T&#34;, node)
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>}
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span><span class="comment">// Trimmer</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span><span class="comment">// A trimmer is an io.Writer filter for stripping tabwriter.Escape</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span><span class="comment">// characters, trailing blanks and tabs, and for converting formfeed</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span><span class="comment">// and vtab characters into newlines and htabs (in case no tabwriter</span>
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span><span class="comment">// is used). Text bracketed by tabwriter.Escape characters is passed</span>
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span><span class="comment">// through unchanged.</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>type trimmer struct {
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	output io.Writer
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	state  int
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	space  []byte
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>}
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span><span class="comment">// trimmer is implemented as a state machine.</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span><span class="comment">// It can be in one of the following states:</span>
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>const (
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	inSpace  = iota <span class="comment">// inside space</span>
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	inEscape        <span class="comment">// inside text bracketed by tabwriter.Escapes</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	inText          <span class="comment">// inside text</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>)
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>func (p *trimmer) resetSpace() {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	p.state = inSpace
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	p.space = p.space[0:0]
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>}
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span><span class="comment">// Design note: It is tempting to eliminate extra blanks occurring in</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span><span class="comment">//              whitespace in this function as it could simplify some</span>
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span><span class="comment">//              of the blanks logic in the node printing functions.</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span><span class="comment">//              However, this would mess up any formatting done by</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span><span class="comment">//              the tabwriter.</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>var aNewline = []byte(&#34;\n&#34;)
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>func (p *trimmer) Write(data []byte) (n int, err error) {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	<span class="comment">// invariants:</span>
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	<span class="comment">// p.state == inSpace:</span>
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>	<span class="comment">//	p.space is unwritten</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	<span class="comment">// p.state == inEscape, inText:</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>	<span class="comment">//	data[m:n] is unwritten</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>	m := 0
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>	var b byte
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	for n, b = range data {
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		if b == &#39;\v&#39; {
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>			b = &#39;\t&#39; <span class="comment">// convert to htab</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>		}
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		switch p.state {
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>		case inSpace:
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>			switch b {
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>			case &#39;\t&#39;, &#39; &#39;:
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>				p.space = append(p.space, b)
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>			case &#39;\n&#39;, &#39;\f&#39;:
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>				p.resetSpace() <span class="comment">// discard trailing space</span>
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>				_, err = p.output.Write(aNewline)
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>			case tabwriter.Escape:
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>				_, err = p.output.Write(p.space)
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>				p.state = inEscape
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>				m = n + 1 <span class="comment">// +1: skip tabwriter.Escape</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>			default:
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>				_, err = p.output.Write(p.space)
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>				p.state = inText
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>				m = n
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>			}
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		case inEscape:
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>			if b == tabwriter.Escape {
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>				_, err = p.output.Write(data[m:n])
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>				p.resetSpace()
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>			}
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>		case inText:
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			switch b {
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>			case &#39;\t&#39;, &#39; &#39;:
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>				_, err = p.output.Write(data[m:n])
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>				p.resetSpace()
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>				p.space = append(p.space, b)
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>			case &#39;\n&#39;, &#39;\f&#39;:
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>				_, err = p.output.Write(data[m:n])
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>				p.resetSpace()
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>				if err == nil {
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>					_, err = p.output.Write(aNewline)
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>				}
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>			case tabwriter.Escape:
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>				_, err = p.output.Write(data[m:n])
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>				p.state = inEscape
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>				m = n + 1 <span class="comment">// +1: skip tabwriter.Escape</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>			}
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		default:
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>			panic(&#34;unreachable&#34;)
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		}
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>		if err != nil {
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>			return
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		}
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>	}
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	n = len(data)
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	switch p.state {
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>	case inEscape, inText:
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>		_, err = p.output.Write(data[m:n])
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>		p.resetSpace()
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>	}
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	return
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>}
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span><span class="comment">// Public interface</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span><span class="comment">// A Mode value is a set of flags (or 0). They control printing.</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>type Mode uint
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>const (
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	RawFormat Mode = 1 &lt;&lt; iota <span class="comment">// do not use a tabwriter; if set, UseSpaces is ignored</span>
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	TabIndent                  <span class="comment">// use tabs for indentation independent of UseSpaces</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	UseSpaces                  <span class="comment">// use spaces instead of tabs for alignment</span>
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	SourcePos                  <span class="comment">// emit //line directives to preserve original source positions</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>)
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span><span class="comment">// The mode below is not included in printer&#39;s public API because</span>
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span><span class="comment">// editing code text is deemed out of scope. Because this mode is</span>
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span><span class="comment">// unexported, it&#39;s also possible to modify or remove it based on</span>
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span><span class="comment">// the evolving needs of go/format and cmd/gofmt without breaking</span>
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span><span class="comment">// users. See discussion in CL 240683.</span>
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>const (
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	<span class="comment">// normalizeNumbers means to canonicalize number</span>
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>	<span class="comment">// literal prefixes and exponents while printing.</span>
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	<span class="comment">// This value is known in and used by go/format and cmd/gofmt.</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>	<span class="comment">// It is currently more convenient and performant for those</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>	<span class="comment">// packages to apply number normalization during printing,</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>	<span class="comment">// rather than by modifying the AST in advance.</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>	normalizeNumbers Mode = 1 &lt;&lt; 30
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>)
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span><span class="comment">// A Config node controls the output of Fprint.</span>
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>type Config struct {
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	Mode     Mode <span class="comment">// default: 0</span>
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	Tabwidth int  <span class="comment">// default: 8</span>
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>	Indent   int  <span class="comment">// default: 0 (all code is indented at least by this much)</span>
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>var printerPool = sync.Pool{
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	New: func() any {
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>		return &amp;printer{
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>			<span class="comment">// Whitespace sequences are short.</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>			wsbuf: make([]whiteSpace, 0, 16),
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>			<span class="comment">// We start the printer with a 16K output buffer, which is currently</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>			<span class="comment">// larger than about 80% of Go files in the standard library.</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>			output: make([]byte, 0, 16&lt;&lt;10),
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>		}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>	},
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>}
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>func newPrinter(cfg *Config, fset *token.FileSet, nodeSizes map[ast.Node]int) *printer {
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>	p := printerPool.Get().(*printer)
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>	*p = printer{
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>		Config:    *cfg,
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>		fset:      fset,
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>		pos:       token.Position{Line: 1, Column: 1},
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>		out:       token.Position{Line: 1, Column: 1},
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>		wsbuf:     p.wsbuf[:0],
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>		nodeSizes: nodeSizes,
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		cachedPos: -1,
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>		output:    p.output[:0],
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>	}
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>	return p
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>}
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>func (p *printer) free() {
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	<span class="comment">// Hard limit on buffer size; see https://golang.org/issue/23199.</span>
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	if cap(p.output) &gt; 64&lt;&lt;10 {
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		return
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	}
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>	printerPool.Put(p)
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>}
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span><span class="comment">// fprint implements Fprint and takes a nodesSizes map for setting up the printer state.</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>func (cfg *Config) fprint(output io.Writer, fset *token.FileSet, node any, nodeSizes map[ast.Node]int) (err error) {
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	<span class="comment">// print node</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	p := newPrinter(cfg, fset, nodeSizes)
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>	defer p.free()
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	if err = p.printNode(node); err != nil {
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>		return
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	}
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>	<span class="comment">// print outstanding comments</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>	p.impliedSemi = false <span class="comment">// EOF acts like a newline</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	p.flush(token.Position{Offset: infinity, Line: infinity}, token.EOF)
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	<span class="comment">// output is buffered in p.output now.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	<span class="comment">// fix //go:build and // +build comments if needed.</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	p.fixGoBuildLines()
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	<span class="comment">// redirect output through a trimmer to eliminate trailing whitespace</span>
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>	<span class="comment">// (Input to a tabwriter must be untrimmed since trailing tabs provide</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	<span class="comment">// formatting information. The tabwriter could provide trimming</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>	<span class="comment">// functionality but no tabwriter is used when RawFormat is set.)</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	output = &amp;trimmer{output: output}
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	<span class="comment">// redirect output through a tabwriter if necessary</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	if cfg.Mode&amp;RawFormat == 0 {
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>		minwidth := cfg.Tabwidth
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>		padchar := byte(&#39;\t&#39;)
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>		if cfg.Mode&amp;UseSpaces != 0 {
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>			padchar = &#39; &#39;
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>		}
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>		twmode := tabwriter.DiscardEmptyColumns
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>		if cfg.Mode&amp;TabIndent != 0 {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>			minwidth = 0
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>			twmode |= tabwriter.TabIndent
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		}
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>		output = tabwriter.NewWriter(output, minwidth, cfg.Tabwidth, 1, padchar, twmode)
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>	}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>	<span class="comment">// write printer result via tabwriter/trimmer to output</span>
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>	if _, err = output.Write(p.output); err != nil {
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>		return
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>	}
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>	<span class="comment">// flush tabwriter, if any</span>
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	if tw, _ := output.(*tabwriter.Writer); tw != nil {
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>		err = tw.Flush()
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	}
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>	return
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span><span class="comment">// A CommentedNode bundles an AST node and corresponding comments.</span>
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span><span class="comment">// It may be provided as argument to any of the [Fprint] functions.</span>
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>type CommentedNode struct {
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	Node     any <span class="comment">// *ast.File, or ast.Expr, ast.Decl, ast.Spec, or ast.Stmt</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>	Comments []*ast.CommentGroup
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>}
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span><span class="comment">// Fprint &#34;pretty-prints&#34; an AST node to output for a given configuration cfg.</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span><span class="comment">// Position information is interpreted relative to the file set fset.</span>
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span><span class="comment">// The node type must be *[ast.File], *[CommentedNode], [][ast.Decl], [][ast.Stmt],</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span><span class="comment">// or assignment-compatible to [ast.Expr], [ast.Decl], [ast.Spec], or [ast.Stmt].</span>
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span><span class="selection">func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node any) error</span> {
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	return cfg.fprint(output, fset, node, make(map[ast.Node]int))
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>}
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span><span class="comment">// Fprint &#34;pretty-prints&#34; an AST node to output.</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span><span class="comment">// It calls [Config.Fprint] with default settings.</span>
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span><span class="comment">// Note that gofmt uses tabs for indentation but spaces for alignment;</span>
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span><span class="comment">// use format.Node (package go/format) for output that matches gofmt.</span>
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>func Fprint(output io.Writer, fset *token.FileSet, node any) error {
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	return (&amp;Config{Tabwidth: 8}).Fprint(output, fset, node)
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>}
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>
</pre><p><a href="printer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
