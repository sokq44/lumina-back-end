<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/token/position.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./position.go?s=3152:3179#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/token">token</a>/<span class="text-muted">position.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/token">go/token</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package token
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// -----------------------------------------------------------------------------</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// Positions</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Position describes an arbitrary source position</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// including the file, line, and column location.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// A Position is valid if the line number is &gt; 0.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type Position struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Filename string <span class="comment">// filename, if any</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Offset   int    <span class="comment">// offset, starting at 0</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Line     int    <span class="comment">// line number, starting at 1</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Column   int    <span class="comment">// column number, starting at 1 (byte count)</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether the position is valid.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func (pos *Position) IsValid() bool { return pos.Line &gt; 0 }
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// String returns a string in one of several forms:</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//	file:line:column    valid position with file name</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	file:line           valid position with file name but no column (column == 0)</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//	line:column         valid position without file name</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	line                valid position without file name and no column (column == 0)</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	file                invalid position with file name</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//	-                   invalid position without file name</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (pos Position) String() string {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	s := pos.Filename
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	if pos.IsValid() {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		if s != &#34;&#34; {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			s += &#34;:&#34;
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		s += strconv.Itoa(pos.Line)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		if pos.Column != 0 {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			s += fmt.Sprintf(&#34;:%d&#34;, pos.Column)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		s = &#34;-&#34;
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return s
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// Pos is a compact encoding of a source position within a file set.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// It can be converted into a [Position] for a more convenient, but much</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// larger, representation.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// The Pos value for a given file is a number in the range [base, base+size],</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// where base and size are specified when a file is added to the file set.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// The difference between a Pos value and the corresponding file base</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// corresponds to the byte offset of that position (represented by the Pos value)</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// from the beginning of the file. Thus, the file base offset is the Pos value</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// representing the first byte in the file.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// To create the Pos value for a specific source offset (measured in bytes),</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// first add the respective file to the current file set using [FileSet.AddFile]</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// and then call [File.Pos](offset) for that file. Given a Pos value p</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// for a specific file set fset, the corresponding [Position] value is</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// obtained by calling fset.Position(p).</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// Pos values can be compared directly with the usual comparison operators:</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// If two Pos values p and q are in the same file, comparing p and q is</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// equivalent to comparing the respective source file offsets. If p and q</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// are in different files, p &lt; q is true if the file implied by p was added</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// to the respective file set before the file implied by q.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>type Pos int
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// The zero value for [Pos] is NoPos; there is no file and line information</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// associated with it, and NoPos.IsValid() is false. NoPos is always</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// smaller than any other [Pos] value. The corresponding [Position] value</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// for NoPos is the zero value for [Position].</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>const NoPos Pos = 0
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether the position is valid.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="selection">func (p Pos) IsValid() bool</span> {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	return p != NoPos
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// -----------------------------------------------------------------------------</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// File</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// A File is a handle for a file belonging to a [FileSet].</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// A File has a name, size, and line offset table.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>type File struct {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	name string <span class="comment">// file name as provided to AddFile</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	base int    <span class="comment">// Pos value range for this file is [base...base+size]</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	size int    <span class="comment">// file size as provided to AddFile</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// lines and infos are protected by mutex</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	mutex sync.Mutex
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	lines []int <span class="comment">// lines contains the offset of the first character for each line (the first entry is always 0)</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	infos []lineInfo
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// Name returns the file name of file f as registered with AddFile.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (f *File) Name() string {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return f.name
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Base returns the base offset of file f as registered with AddFile.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (f *File) Base() int {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return f.base
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// Size returns the size of file f as registered with AddFile.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func (f *File) Size() int {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	return f.size
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// LineCount returns the number of lines in file f.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (f *File) LineCount() int {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	n := len(f.lines)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return n
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// AddLine adds the line offset for a new line.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// The line offset must be larger than the offset for the previous line</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// and smaller than the file size; otherwise the line offset is ignored.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (f *File) AddLine(offset int) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if i := len(f.lines); (i == 0 || f.lines[i-1] &lt; offset) &amp;&amp; offset &lt; f.size {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		f.lines = append(f.lines, offset)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// MergeLine merges a line with the following line. It is akin to replacing</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// the newline character at the end of the line with a space (to not change the</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// remaining offsets). To obtain the line number, consult e.g. [Position.Line].</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// MergeLine will panic if given an invalid line number.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (f *File) MergeLine(line int) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if line &lt; 1 {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid line number %d (should be &gt;= 1)&#34;, line))
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	defer f.mutex.Unlock()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if line &gt;= len(f.lines) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid line number %d (should be &lt; %d)&#34;, line, len(f.lines)))
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// To merge the line numbered &lt;line&gt; with the line numbered &lt;line+1&gt;,</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// we need to remove the entry in lines corresponding to the line</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// numbered &lt;line+1&gt;. The entry in lines corresponding to the line</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// numbered &lt;line+1&gt; is located at index &lt;line&gt;, since indices in lines</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// are 0-based and line numbers are 1-based.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	copy(f.lines[line:], f.lines[line+1:])
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	f.lines = f.lines[:len(f.lines)-1]
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">// Lines returns the effective line offset table of the form described by [File.SetLines].</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// Callers must not mutate the result.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func (f *File) Lines() []int {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	lines := f.lines
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	return lines
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// SetLines sets the line offsets for a file and reports whether it succeeded.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// The line offsets are the offsets of the first character of each line;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// for instance for the content &#34;ab\nc\n&#34; the line offsets are {0, 3}.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// An empty file has an empty line offset table.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Each line offset must be larger than the offset for the previous line</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// and smaller than the file size; otherwise SetLines fails and returns</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// false.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Callers must not mutate the provided slice after SetLines returns.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (f *File) SetLines(lines []int) bool {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// verify validity of lines table</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	size := f.size
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	for i, offset := range lines {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		if i &gt; 0 &amp;&amp; offset &lt;= lines[i-1] || size &lt;= offset {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			return false
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// set lines table</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	f.lines = lines
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return true
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// SetLinesForContent sets the line offsets for the given file content.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// It ignores position-altering //line comments.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>func (f *File) SetLinesForContent(content []byte) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	var lines []int
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	line := 0
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	for offset, b := range content {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		if line &gt;= 0 {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			lines = append(lines, line)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		line = -1
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		if b == &#39;\n&#39; {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			line = offset + 1
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// set lines table</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	f.lines = lines
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// LineStart returns the [Pos] value of the start of the specified line.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// It ignores any alternative positions set using [File.AddLineColumnInfo].</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// LineStart panics if the 1-based line number is invalid.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>func (f *File) LineStart(line int) Pos {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if line &lt; 1 {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid line number %d (should be &gt;= 1)&#34;, line))
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	defer f.mutex.Unlock()
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if line &gt; len(f.lines) {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid line number %d (should be &lt; %d)&#34;, line, len(f.lines)))
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	return Pos(f.base + f.lines[line-1])
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// A lineInfo object describes alternative file, line, and column</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// number information (such as provided via a //line directive)</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// for a given file offset.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>type lineInfo struct {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// fields are exported to make them accessible to gob</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	Offset       int
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	Filename     string
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	Line, Column int
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// AddLineInfo is like [File.AddLineColumnInfo] with a column = 1 argument.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// It is here for backward-compatibility for code prior to Go 1.11.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func (f *File) AddLineInfo(offset int, filename string, line int) {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	f.AddLineColumnInfo(offset, filename, line, 1)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// AddLineColumnInfo adds alternative file, line, and column number</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// information for a given file offset. The offset must be larger</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// than the offset for the previously added alternative line info</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// and smaller than the file size; otherwise the information is</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// ignored.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// AddLineColumnInfo is typically used to register alternative position</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// information for line directives such as //line filename:line:column.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>func (f *File) AddLineColumnInfo(offset int, filename string, line, column int) {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if i := len(f.infos); (i == 0 || f.infos[i-1].Offset &lt; offset) &amp;&amp; offset &lt; f.size {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		f.infos = append(f.infos, lineInfo{offset, filename, line, column})
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// Pos returns the Pos value for the given file offset;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// the offset must be &lt;= f.Size().</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// f.Pos(f.Offset(p)) == p.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>func (f *File) Pos(offset int) Pos {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if offset &gt; f.size {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid file offset %d (should be &lt;= %d)&#34;, offset, f.size))
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	return Pos(f.base + offset)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// Offset returns the offset for the given file position p;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// p must be a valid [Pos] value in that file.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// f.Offset(f.Pos(offset)) == offset.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func (f *File) Offset(p Pos) int {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if int(p) &lt; f.base || int(p) &gt; f.base+f.size {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid Pos value %d (should be in [%d, %d])&#34;, p, f.base, f.base+f.size))
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	return int(p) - f.base
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// Line returns the line number for the given file position p;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// p must be a [Pos] value in that file or [NoPos].</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>func (f *File) Line(p Pos) int {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	return f.Position(p).Line
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func searchLineInfos(a []lineInfo, x int) int {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	return sort.Search(len(a), func(i int) bool { return a[i].Offset &gt; x }) - 1
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// unpack returns the filename and line and column number for a file offset.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// If adjusted is set, unpack will return the filename and line information</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// possibly adjusted by //line comments; otherwise those comments are ignored.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (f *File) unpack(offset int, adjusted bool) (filename string, line, column int) {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	f.mutex.Lock()
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	filename = f.name
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if i := searchInts(f.lines, offset); i &gt;= 0 {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		line, column = i+1, offset-f.lines[i]+1
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if adjusted &amp;&amp; len(f.infos) &gt; 0 {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		<span class="comment">// few files have extra line infos</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		if i := searchLineInfos(f.infos, offset); i &gt;= 0 {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			alt := &amp;f.infos[i]
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			filename = alt.Filename
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			if i := searchInts(f.lines, alt.Offset); i &gt;= 0 {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>				<span class="comment">// i+1 is the line at which the alternative position was recorded</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>				d := line - (i + 1) <span class="comment">// line distance from alternative position base</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>				line = alt.Line + d
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>				if alt.Column == 0 {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>					<span class="comment">// alternative column is unknown =&gt; relative column is unknown</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>					<span class="comment">// (the current specification for line directives requires</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>					<span class="comment">// this to apply until the next PosBase/line directive,</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>					<span class="comment">// not just until the new newline)</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>					column = 0
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>				} else if d == 0 {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>					<span class="comment">// the alternative position base is on the current line</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>					<span class="comment">// =&gt; column is relative to alternative column</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>					column = alt.Column + (offset - alt.Offset)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>				}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// TODO(mvdan): move Unlock back under Lock with a defer statement once</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// https://go.dev/issue/38471 is fixed to remove the performance penalty.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	f.mutex.Unlock()
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func (f *File) position(p Pos, adjusted bool) (pos Position) {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	offset := int(p) - f.base
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	pos.Offset = offset
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	pos.Filename, pos.Line, pos.Column = f.unpack(offset, adjusted)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// PositionFor returns the Position value for the given file position p.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// If adjusted is set, the position may be adjusted by position-altering</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// //line comments; otherwise those comments are ignored.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// p must be a Pos value in f or NoPos.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>func (f *File) PositionFor(p Pos, adjusted bool) (pos Position) {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	if p != NoPos {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		if int(p) &lt; f.base || int(p) &gt; f.base+f.size {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;invalid Pos value %d (should be in [%d, %d])&#34;, p, f.base, f.base+f.size))
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		pos = f.position(p, adjusted)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// Position returns the Position value for the given file position p.</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// Calling f.Position(p) is equivalent to calling f.PositionFor(p, true).</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func (f *File) Position(p Pos) (pos Position) {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	return f.PositionFor(p, true)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// -----------------------------------------------------------------------------</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// FileSet</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// A FileSet represents a set of source files.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// Methods of file sets are synchronized; multiple goroutines</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// may invoke them concurrently.</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// The byte offsets for each file in a file set are mapped into</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// distinct (integer) intervals, one interval [base, base+size]</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// per file. [FileSet.Base] represents the first byte in the file, and size</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// is the corresponding file size. A [Pos] value is a value in such</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// an interval. By determining the interval a [Pos] value belongs</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// to, the file, its file base, and thus the byte offset (position)</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// the [Pos] value is representing can be computed.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// When adding a new file, a file base must be provided. That can</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// be any integer value that is past the end of any interval of any</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// file already in the file set. For convenience, [FileSet.Base] provides</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// such a value, which is simply the end of the Pos interval of the most</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// recently added file, plus one. Unless there is a need to extend an</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// interval later, using the [FileSet.Base] should be used as argument</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// for [FileSet.AddFile].</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// A [File] may be removed from a FileSet when it is no longer needed.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// This may reduce memory usage in a long-running application.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>type FileSet struct {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	mutex sync.RWMutex         <span class="comment">// protects the file set</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	base  int                  <span class="comment">// base offset for the next file</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	files []*File              <span class="comment">// list of files in the order added to the set</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	last  atomic.Pointer[File] <span class="comment">// cache of last file looked up</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// NewFileSet creates a new file set.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>func NewFileSet() *FileSet {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	return &amp;FileSet{
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		base: 1, <span class="comment">// 0 == NoPos</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// Base returns the minimum base offset that must be provided to</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// [FileSet.AddFile] when adding the next file.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (s *FileSet) Base() int {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	s.mutex.RLock()
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	b := s.base
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	s.mutex.RUnlock()
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	return b
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// AddFile adds a new file with a given filename, base offset, and file size</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">// to the file set s and returns the file. Multiple files may have the same</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// name. The base offset must not be smaller than the [FileSet.Base], and</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// size must not be negative. As a special case, if a negative base is provided,</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// the current value of the [FileSet.Base] is used instead.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// Adding the file will set the file set&#39;s [FileSet.Base] value to base + size + 1</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// as the minimum base value for the next file. The following relationship</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// exists between a [Pos] value p for a given file offset offs:</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">//	int(p) = base + offs</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// with offs in the range [0, size] and thus p in the range [base, base+size].</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">// For convenience, [File.Pos] may be used to create file-specific position</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// values from a file offset.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>func (s *FileSet) AddFile(filename string, base, size int) *File {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// Allocate f outside the critical section.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	f := &amp;File{name: filename, size: size, lines: []int{0}}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	s.mutex.Lock()
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	defer s.mutex.Unlock()
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	if base &lt; 0 {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		base = s.base
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if base &lt; s.base {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid base %d (should be &gt;= %d)&#34;, base, s.base))
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	f.base = base
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	if size &lt; 0 {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid size %d (should be &gt;= 0)&#34;, size))
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// base &gt;= s.base &amp;&amp; size &gt;= 0</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	base += size + 1 <span class="comment">// +1 because EOF also has a position</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	if base &lt; 0 {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		panic(&#34;token.Pos offset overflow (&gt; 2G of source code in file set)&#34;)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	<span class="comment">// add the file to the file set</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	s.base = base
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	s.files = append(s.files, f)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	s.last.Store(f)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return f
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// RemoveFile removes a file from the [FileSet] so that subsequent</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// queries for its [Pos] interval yield a negative result.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// This reduces the memory usage of a long-lived [FileSet] that</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// encounters an unbounded stream of files.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// Removing a file that does not belong to the set has no effect.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>func (s *FileSet) RemoveFile(file *File) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	s.last.CompareAndSwap(file, nil) <span class="comment">// clear last file cache</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	s.mutex.Lock()
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	defer s.mutex.Unlock()
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	if i := searchFiles(s.files, file.base); i &gt;= 0 &amp;&amp; s.files[i] == file {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		last := &amp;s.files[len(s.files)-1]
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		s.files = append(s.files[:i], s.files[i+1:]...)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		*last = nil <span class="comment">// don&#39;t prolong lifetime when popping last element</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// Iterate calls f for the files in the file set in the order they were added</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// until f returns false.</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>func (s *FileSet) Iterate(f func(*File) bool) {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	for i := 0; ; i++ {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		var file *File
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		s.mutex.RLock()
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		if i &lt; len(s.files) {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			file = s.files[i]
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		s.mutex.RUnlock()
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		if file == nil || !f(file) {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>			break
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func searchFiles(a []*File, x int) int {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	return sort.Search(len(a), func(i int) bool { return a[i].base &gt; x }) - 1
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>func (s *FileSet) file(p Pos) *File {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	<span class="comment">// common case: p is in last file.</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if f := s.last.Load(); f != nil &amp;&amp; f.base &lt;= int(p) &amp;&amp; int(p) &lt;= f.base+f.size {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return f
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	s.mutex.RLock()
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	defer s.mutex.RUnlock()
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	<span class="comment">// p is not in last file - search all files</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	if i := searchFiles(s.files, int(p)); i &gt;= 0 {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		f := s.files[i]
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		<span class="comment">// f.base &lt;= int(p) by definition of searchFiles</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		if int(p) &lt;= f.base+f.size {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			<span class="comment">// Update cache of last file. A race is ok,</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			<span class="comment">// but an exclusive lock causes heavy contention.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>			s.last.Store(f)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>			return f
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	return nil
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// File returns the file that contains the position p.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// If no such file is found (for instance for p == [NoPos]),</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// the result is nil.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>func (s *FileSet) File(p Pos) (f *File) {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if p != NoPos {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		f = s.file(p)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	return
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span><span class="comment">// PositionFor converts a [Pos] p in the fileset into a [Position] value.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">// If adjusted is set, the position may be adjusted by position-altering</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// //line comments; otherwise those comments are ignored.</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// p must be a [Pos] value in s or [NoPos].</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>func (s *FileSet) PositionFor(p Pos, adjusted bool) (pos Position) {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if p != NoPos {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		if f := s.file(p); f != nil {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			return f.position(p, adjusted)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	return
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">// Position converts a [Pos] p in the fileset into a Position value.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// Calling s.Position(p) is equivalent to calling s.PositionFor(p, true).</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>func (s *FileSet) Position(p Pos) (pos Position) {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	return s.PositionFor(p, true)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// -----------------------------------------------------------------------------</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// Helper functions</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func searchInts(a []int, x int) int {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	<span class="comment">// This function body is a manually inlined version of:</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	<span class="comment">//   return sort.Search(len(a), func(i int) bool { return a[i] &gt; x }) - 1</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">// With better compiler optimizations, this may not be needed in the</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	<span class="comment">// future, but at the moment this change improves the go/printer</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	<span class="comment">// benchmark performance by ~30%. This has a direct impact on the</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	<span class="comment">// speed of gofmt and thus seems worthwhile (2011-04-29).</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri): Remove this when compilers have caught up.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	i, j := 0, len(a)
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		<span class="comment">// i ≤ h &lt; j</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		if a[h] &lt;= x {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			i = h + 1
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		} else {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			j = h
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	return i - 1
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
</pre><p><a href="position.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
