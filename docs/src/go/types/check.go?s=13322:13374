<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/check.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./check.go?s=13322:13374#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">check.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements the Check function, which drives type-checking.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/constant&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// nopos indicates an unknown position</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>var nopos token.Pos
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// debugging/development support</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>const debug = false <span class="comment">// leave on during development</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// gotypesalias controls the use of Alias types</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>var gotypesalias = godebug.New(&#34;gotypesalias&#34;)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// exprInfo stores information about an untyped expression.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type exprInfo struct {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	isLhs bool <span class="comment">// expression is lhs operand of a shift with delayed type-check</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	mode  operandMode
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	typ   *Basic
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	val   constant.Value <span class="comment">// constant value; or nil (if not a constant)</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// An environment represents the environment within which an object is</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// type-checked.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type environment struct {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	decl          *declInfo              <span class="comment">// package-level declaration whose init expression/function body is checked</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	scope         *Scope                 <span class="comment">// top-most scope for lookups</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	pos           token.Pos              <span class="comment">// if valid, identifiers are looked up as if at position pos (used by Eval)</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	iota          constant.Value         <span class="comment">// value of iota in a constant declaration; nil otherwise</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	errpos        positioner             <span class="comment">// if set, identifier position of a constant with inherited initializer</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	inTParamList  bool                   <span class="comment">// set if inside a type parameter list</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	sig           *Signature             <span class="comment">// function signature if inside a function; nil otherwise</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	isPanic       map[*ast.CallExpr]bool <span class="comment">// set of panic call expressions (used for termination check)</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	hasLabel      bool                   <span class="comment">// set if a function makes use of labels (only ~1% of functions); unused outside functions</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	hasCallOrRecv bool                   <span class="comment">// set if an expression contains a function call or channel receive operation</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// lookup looks up name in the current environment and returns the matching object, or nil.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (env *environment) lookup(name string) Object {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	_, obj := env.scope.LookupParent(name, env.pos)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return obj
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// An importKey identifies an imported package by import path and source directory</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// (directory containing the file containing the import). In practice, the directory</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// may always be the same, or may not matter. Given an (import path, directory), an</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// importer must always return the same package (but given two different import paths,</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// an importer may still return the same package by mapping them to the same package</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// paths).</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type importKey struct {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	path, dir string
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// A dotImportKey describes a dot-imported object in the given scope.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>type dotImportKey struct {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	scope *Scope
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	name  string
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// An action describes a (delayed) action.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>type action struct {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	f    func()      <span class="comment">// action to be executed</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	desc *actionDesc <span class="comment">// action description; may be nil, requires debug to be set</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// If debug is set, describef sets a printf-formatted description for action a.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// Otherwise, it is a no-op.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>func (a *action) describef(pos positioner, format string, args ...any) {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if debug {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		a.desc = &amp;actionDesc{pos, format, args}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// An actionDesc provides information on an action.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// For debugging only.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>type actionDesc struct {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	pos    positioner
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	format string
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	args   []any
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// A Checker maintains the state of the type checker.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// It must be created with [NewChecker].</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>type Checker struct {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// package information</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// (initialized by NewChecker, valid for the life-time of checker)</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// If EnableAlias is set, alias declarations produce an Alias type.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// Otherwise the alias information is only in the type name, which</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// points directly to the actual (aliased) type.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	enableAlias bool
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	conf *Config
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	ctxt *Context <span class="comment">// context for de-duplicating instances</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	fset *token.FileSet
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	pkg  *Package
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	*Info
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	version goVersion              <span class="comment">// accepted language version</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	nextID  uint64                 <span class="comment">// unique Id for type parameters (first valid Id is 1)</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	objMap  map[Object]*declInfo   <span class="comment">// maps package-level objects and (non-interface) methods to declaration info</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	impMap  map[importKey]*Package <span class="comment">// maps (import path, source directory) to (complete or fake) package</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	valids  instanceLookup         <span class="comment">// valid *Named (incl. instantiated) types per the validType check</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// pkgPathMap maps package names to the set of distinct import paths we&#39;ve</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// seen for that name, anywhere in the import graph. It is used for</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// disambiguating package names in error messages.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// pkgPathMap is allocated lazily, so that we don&#39;t pay the price of building</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// it on the happy path. seenPkgMap tracks the packages that we&#39;ve already</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// walked.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	pkgPathMap map[string]map[string]bool
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	seenPkgMap map[*Package]bool
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// information collected during type-checking of a set of package files</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// (initialized by Files, valid only for the duration of check.Files;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// maps and lists are allocated on demand)</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	files         []*ast.File               <span class="comment">// package files</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	versions      map[*ast.File]string      <span class="comment">// maps files to version strings (each file has an entry)</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	imports       []*PkgName                <span class="comment">// list of imported packages</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	dotImportMap  map[dotImportKey]*PkgName <span class="comment">// maps dot-imported objects to the package they were dot-imported through</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	recvTParamMap map[*ast.Ident]*TypeParam <span class="comment">// maps blank receiver type parameters to their type</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	brokenAliases map[*TypeName]bool        <span class="comment">// set of aliases with broken (not yet determined) types</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	unionTypeSets map[*Union]*_TypeSet      <span class="comment">// computed type sets for union types</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	mono          monoGraph                 <span class="comment">// graph for detecting non-monomorphizable instantiation loops</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	firstErr error                 <span class="comment">// first error encountered</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	methods  map[*TypeName][]*Func <span class="comment">// maps package scope type names to associated non-blank (non-interface) methods</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	untyped  map[ast.Expr]exprInfo <span class="comment">// map of expressions without final type</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	delayed  []action              <span class="comment">// stack of delayed action segments; segments are processed in FIFO order</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	objPath  []Object              <span class="comment">// path of object dependencies during type inference (for cycle reporting)</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	cleaners []cleaner             <span class="comment">// list of types that may need a final cleanup at the end of type-checking</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// environment within which the current object is type-checked (valid only</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// for the duration of type-checking a specific object)</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	environment
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// debugging</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	indent int <span class="comment">// indentation for tracing</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// addDeclDep adds the dependency edge (check.decl -&gt; to) if check.decl exists</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func (check *Checker) addDeclDep(to Object) {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	from := check.decl
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if from == nil {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		return <span class="comment">// not in a package-level init expression</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if _, found := check.objMap[to]; !found {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		return <span class="comment">// to is not a package-level object</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	from.addDep(to)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// Note: The following three alias-related functions are only used</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">//       when Alias types are not enabled.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// brokenAlias records that alias doesn&#39;t have a determined type yet.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// It also sets alias.typ to Typ[Invalid].</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// Not used if check.enableAlias is set.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (check *Checker) brokenAlias(alias *TypeName) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	assert(!check.enableAlias)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if check.brokenAliases == nil {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		check.brokenAliases = make(map[*TypeName]bool)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	check.brokenAliases[alias] = true
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	alias.typ = Typ[Invalid]
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// validAlias records that alias has the valid type typ (possibly Typ[Invalid]).</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func (check *Checker) validAlias(alias *TypeName, typ Type) {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	assert(!check.enableAlias)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	delete(check.brokenAliases, alias)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	alias.typ = typ
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// isBrokenAlias reports whether alias doesn&#39;t have a determined type yet.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>func (check *Checker) isBrokenAlias(alias *TypeName) bool {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	assert(!check.enableAlias)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	return check.brokenAliases[alias]
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func (check *Checker) rememberUntyped(e ast.Expr, lhs bool, mode operandMode, typ *Basic, val constant.Value) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	m := check.untyped
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	if m == nil {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		m = make(map[ast.Expr]exprInfo)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		check.untyped = m
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	m[e] = exprInfo{lhs, mode, typ, val}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// later pushes f on to the stack of actions that will be processed later;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// either at the end of the current statement, or in case of a local constant</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// or variable declaration, before the constant or variable is in scope</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// (so that f still sees the scope before any new declarations).</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// later returns the pushed action so one can provide a description</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// via action.describef for debugging, if desired.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>func (check *Checker) later(f func()) *action {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	i := len(check.delayed)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	check.delayed = append(check.delayed, action{f: f})
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return &amp;check.delayed[i]
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// push pushes obj onto the object path and returns its index in the path.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func (check *Checker) push(obj Object) int {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	check.objPath = append(check.objPath, obj)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	return len(check.objPath) - 1
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// pop pops and returns the topmost object from the object path.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (check *Checker) pop() Object {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	i := len(check.objPath) - 1
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	obj := check.objPath[i]
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	check.objPath[i] = nil
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	check.objPath = check.objPath[:i]
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return obj
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>type cleaner interface {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	cleanup()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// needsCleanup records objects/types that implement the cleanup method</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// which will be called at the end of type-checking.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func (check *Checker) needsCleanup(c cleaner) {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	check.cleaners = append(check.cleaners, c)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// NewChecker returns a new [Checker] instance for a given package.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// [Package] files may be added incrementally via checker.Files.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func NewChecker(conf *Config, fset *token.FileSet, pkg *Package, info *Info) *Checker {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// make sure we have a configuration</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	if conf == nil {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		conf = new(Config)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// make sure we have an info struct</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	if info == nil {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		info = new(Info)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Note: clients may call NewChecker with the Unsafe package, which is</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// globally shared and must not be mutated. Therefore NewChecker must not</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// mutate *pkg.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// (previously, pkg.goVersion was mutated here: go.dev/issue/61212)</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	return &amp;Checker{
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		enableAlias: gotypesalias.Value() == &#34;1&#34;,
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		conf:        conf,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		ctxt:        conf.Context,
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		fset:        fset,
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		pkg:         pkg,
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		Info:        info,
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		version:     asGoVersion(conf.GoVersion),
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		objMap:      make(map[Object]*declInfo),
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		impMap:      make(map[importKey]*Package),
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// initFiles initializes the files-specific portion of checker.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// The provided files must all belong to the same package.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>func (check *Checker) initFiles(files []*ast.File) {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// start with a clean slate (check.Files may be called multiple times)</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	check.files = nil
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	check.imports = nil
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	check.dotImportMap = nil
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	check.firstErr = nil
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	check.methods = nil
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	check.untyped = nil
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	check.delayed = nil
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	check.objPath = nil
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	check.cleaners = nil
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// determine package name and collect valid files</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	pkg := check.pkg
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	for _, file := range files {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		switch name := file.Name.Name; pkg.name {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		case &#34;&#34;:
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			if name != &#34;_&#34; {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>				pkg.name = name
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			} else {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>				check.error(file.Name, BlankPkgName, &#34;invalid package name _&#34;)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			fallthrough
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		case name:
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			check.files = append(check.files, file)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		default:
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			check.errorf(atPos(file.Package), MismatchedPkgName, &#34;package %s; expected %s&#34;, name, pkg.name)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			<span class="comment">// ignore this file</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// reuse Info.FileVersions if provided</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	versions := check.Info.FileVersions
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	if versions == nil {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		versions = make(map[*ast.File]string)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	check.versions = versions
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	pkgVersionOk := check.version.isValid()
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	downgradeOk := check.version.cmp(go1_21) &gt;= 0
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// determine Go version for each file</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	for _, file := range check.files {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		<span class="comment">// use unaltered Config.GoVersion by default</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// (This version string may contain dot-release numbers as in go1.20.1,</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		<span class="comment">// unlike file versions which are Go language versions only, if valid.)</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		v := check.conf.GoVersion
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		<span class="comment">// use the file version, if applicable</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		<span class="comment">// (file versions are either the empty string or of the form go1.dd)</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if pkgVersionOk {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			fileVersion := asGoVersion(file.GoVersion)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			if fileVersion.isValid() {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>				cmp := fileVersion.cmp(check.version)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>				<span class="comment">// Go 1.21 introduced the feature of setting the go.mod</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>				<span class="comment">// go line to an early version of Go and allowing //go:build lines</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				<span class="comment">// to “upgrade” (cmp &gt; 0) the Go version in a given file.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				<span class="comment">// We can do that backwards compatibly.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				<span class="comment">// Go 1.21 also introduced the feature of allowing //go:build lines</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>				<span class="comment">// to “downgrade” (cmp &lt; 0) the Go version in a given file.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>				<span class="comment">// That can&#39;t be done compatibly in general, since before the</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>				<span class="comment">// build lines were ignored and code got the module&#39;s Go version.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>				<span class="comment">// To work around this, downgrades are only allowed when the</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>				<span class="comment">// module&#39;s Go version is Go 1.21 or later.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>				<span class="comment">// If there is no valid check.version, then we don&#39;t really know what</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>				<span class="comment">// Go version to apply.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>				<span class="comment">// Legacy tools may do this, and they historically have accepted everything.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>				<span class="comment">// Preserve that behavior by ignoring //go:build constraints entirely in that</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				<span class="comment">// case (!pkgVersionOk).</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>				if cmp &gt; 0 || cmp &lt; 0 &amp;&amp; downgradeOk {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>					v = file.GoVersion
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>				}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		versions[file] = v
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// A bailout panic is used for early termination.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>type bailout struct{}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>func (check *Checker) handleBailout(err *error) {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	switch p := recover().(type) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	case nil, bailout:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		<span class="comment">// normal return or early exit</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		*err = check.firstErr
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	default:
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		<span class="comment">// re-panic</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		panic(p)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// Files checks the provided files as part of the checker&#39;s package.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="selection">func (check *Checker) Files(files []*ast.File) error</span> { return check.checkFiles(files) }
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>var errBadCgo = errors.New(&#34;cannot use FakeImportC and go115UsesCgo together&#34;)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func (check *Checker) checkFiles(files []*ast.File) (err error) {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if check.pkg == Unsafe {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		<span class="comment">// Defensive handling for Unsafe, which cannot be type checked, and must</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		<span class="comment">// not be mutated. See https://go.dev/issue/61212 for an example of where</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		<span class="comment">// Unsafe is passed to NewChecker.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		return nil
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// Note: NewChecker doesn&#39;t return an error, so we need to check the version here.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if check.version.cmp(go_current) &gt; 0 {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;package requires newer Go version %v&#34;, check.version)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if check.conf.FakeImportC &amp;&amp; check.conf.go115UsesCgo {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		return errBadCgo
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	defer check.handleBailout(&amp;err)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	print := func(msg string) {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		if check.conf._Trace {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			fmt.Println()
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			fmt.Println(msg)
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	print(&#34;== initFiles ==&#34;)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	check.initFiles(files)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	print(&#34;== collectObjects ==&#34;)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	check.collectObjects()
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	print(&#34;== packageObjects ==&#34;)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	check.packageObjects()
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	print(&#34;== processDelayed ==&#34;)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	check.processDelayed(0) <span class="comment">// incl. all functions</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	print(&#34;== cleanup ==&#34;)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	check.cleanup()
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	print(&#34;== initOrder ==&#34;)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	check.initOrder()
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	if !check.conf.DisableUnusedImportCheck {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		print(&#34;== unusedImports ==&#34;)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		check.unusedImports()
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	print(&#34;== recordUntyped ==&#34;)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	check.recordUntyped()
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if check.firstErr == nil {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		<span class="comment">// TODO(mdempsky): Ensure monomorph is safe when errors exist.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		check.monomorph()
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	check.pkg.goVersion = check.conf.GoVersion
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	check.pkg.complete = true
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// no longer needed - release memory</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	check.imports = nil
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	check.dotImportMap = nil
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	check.pkgPathMap = nil
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	check.seenPkgMap = nil
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	check.recvTParamMap = nil
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	check.brokenAliases = nil
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	check.unionTypeSets = nil
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	check.ctxt = nil
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// TODO(rFindley) There&#39;s more memory we should release at this point.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// processDelayed processes all delayed actions pushed after top.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>func (check *Checker) processDelayed(top int) {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// If each delayed action pushes a new action, the</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	<span class="comment">// stack will continue to grow during this loop.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	<span class="comment">// However, it is only processing functions (which</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	<span class="comment">// are processed in a delayed fashion) that may</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// add more actions (such as nested functions), so</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// this is a sufficiently bounded process.</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	for i := top; i &lt; len(check.delayed); i++ {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		a := &amp;check.delayed[i]
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		if check.conf._Trace {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			if a.desc != nil {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				check.trace(a.desc.pos.Pos(), &#34;-- &#34;+a.desc.format, a.desc.args...)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			} else {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>				check.trace(nopos, &#34;-- delayed %p&#34;, a.f)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		a.f() <span class="comment">// may append to check.delayed</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		if check.conf._Trace {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			fmt.Println()
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	assert(top &lt;= len(check.delayed)) <span class="comment">// stack must not have shrunk</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	check.delayed = check.delayed[:top]
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// cleanup runs cleanup for all collected cleaners.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>func (check *Checker) cleanup() {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t use a range clause since Named.cleanup may add more cleaners.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	for i := 0; i &lt; len(check.cleaners); i++ {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		check.cleaners[i].cleanup()
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	check.cleaners = nil
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func (check *Checker) record(x *operand) {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	<span class="comment">// convert x into a user-friendly set of values</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) this code can be simplified</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	var typ Type
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	var val constant.Value
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	switch x.mode {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	case invalid:
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		typ = Typ[Invalid]
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	case novalue:
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		typ = (*Tuple)(nil)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	case constant_:
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		typ = x.typ
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		val = x.val
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	default:
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		typ = x.typ
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	assert(x.expr != nil &amp;&amp; typ != nil)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if isUntyped(typ) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		<span class="comment">// delay type and value recording until we know the type</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		<span class="comment">// or until the end of type checking</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		check.rememberUntyped(x.expr, false, x.mode, typ.(*Basic), val)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	} else {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		check.recordTypeAndValue(x.expr, x.mode, typ, val)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>func (check *Checker) recordUntyped() {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	if !debug &amp;&amp; check.Types == nil {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		return <span class="comment">// nothing to do</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	for x, info := range check.untyped {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		if debug &amp;&amp; isTyped(info.typ) {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			check.dump(&#34;%v: %s (type %s) is typed&#34;, x.Pos(), x, info.typ)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			unreachable()
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		check.recordTypeAndValue(x, info.mode, info.typ, info.val)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>func (check *Checker) recordTypeAndValue(x ast.Expr, mode operandMode, typ Type, val constant.Value) {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	assert(x != nil)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	assert(typ != nil)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if mode == invalid {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return <span class="comment">// omit</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	if mode == constant_ {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		assert(val != nil)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		<span class="comment">// We check allBasic(typ, IsConstType) here as constant expressions may be</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		<span class="comment">// recorded as type parameters.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		assert(!isValid(typ) || allBasic(typ, IsConstType))
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	if m := check.Types; m != nil {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		m[x] = TypeAndValue{mode, typ, val}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>func (check *Checker) recordBuiltinType(f ast.Expr, sig *Signature) {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	<span class="comment">// f must be a (possibly parenthesized, possibly qualified)</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	<span class="comment">// identifier denoting a built-in (including unsafe&#39;s non-constant</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	<span class="comment">// functions Add and Slice): record the signature for f and possible</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	<span class="comment">// children.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	for {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		check.recordTypeAndValue(f, builtin, sig, nil)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		switch p := f.(type) {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		case *ast.Ident, *ast.SelectorExpr:
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			return <span class="comment">// we&#39;re done</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		case *ast.ParenExpr:
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			f = p.X
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		default:
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			unreachable()
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// recordCommaOkTypes updates recorded types to reflect that x is used in a commaOk context</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// (and therefore has tuple type).</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>func (check *Checker) recordCommaOkTypes(x ast.Expr, a []*operand) {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	assert(x != nil)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	assert(len(a) == 2)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	if a[0].mode == invalid {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		return
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	t0, t1 := a[0].typ, a[1].typ
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	assert(isTyped(t0) &amp;&amp; isTyped(t1) &amp;&amp; (isBoolean(t1) || t1 == universeError))
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	if m := check.Types; m != nil {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		for {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			tv := m[x]
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>			assert(tv.Type != nil) <span class="comment">// should have been recorded already</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			pos := x.Pos()
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			tv.Type = NewTuple(
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>				NewVar(pos, check.pkg, &#34;&#34;, t0),
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>				NewVar(pos, check.pkg, &#34;&#34;, t1),
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>			m[x] = tv
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			<span class="comment">// if x is a parenthesized expression (p.X), update p.X</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			p, _ := x.(*ast.ParenExpr)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			if p == nil {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>				break
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			x = p.X
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">// recordInstance records instantiation information into check.Info, if the</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// Instances map is non-nil. The given expr must be an ident, selector, or</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// index (list) expr with ident or selector operand.</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">// TODO(rfindley): the expr parameter is fragile. See if we can access the</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// instantiated identifier in some other way.</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>func (check *Checker) recordInstance(expr ast.Expr, targs []Type, typ Type) {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	ident := instantiatedIdent(expr)
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	assert(ident != nil)
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	assert(typ != nil)
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	if m := check.Instances; m != nil {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		m[ident] = Instance{newTypeList(targs), typ}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>func instantiatedIdent(expr ast.Expr) *ast.Ident {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	var selOrIdent ast.Expr
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	switch e := expr.(type) {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	case *ast.IndexExpr:
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		selOrIdent = e.X
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	case *ast.IndexListExpr:
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		selOrIdent = e.X
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	case *ast.SelectorExpr, *ast.Ident:
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		selOrIdent = e
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	switch x := selOrIdent.(type) {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	case *ast.Ident:
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		return x
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	case *ast.SelectorExpr:
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		return x.Sel
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// extra debugging of #63933</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	buf.WriteString(&#34;instantiated ident not found; please report: &#34;)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	ast.Fprint(&amp;buf, token.NewFileSet(), expr, ast.NotNilFilter)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	panic(buf.String())
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>func (check *Checker) recordDef(id *ast.Ident, obj Object) {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	assert(id != nil)
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	if m := check.Defs; m != nil {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		m[id] = obj
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>func (check *Checker) recordUse(id *ast.Ident, obj Object) {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	assert(id != nil)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	assert(obj != nil)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	if m := check.Uses; m != nil {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		m[id] = obj
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>func (check *Checker) recordImplicit(node ast.Node, obj Object) {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	assert(node != nil)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	assert(obj != nil)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	if m := check.Implicits; m != nil {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		m[node] = obj
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>func (check *Checker) recordSelection(x *ast.SelectorExpr, kind SelectionKind, recv Type, obj Object, index []int, indirect bool) {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	assert(obj != nil &amp;&amp; (recv == nil || len(index) &gt; 0))
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	check.recordUse(x.Sel, obj)
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	if m := check.Selections; m != nil {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		m[x] = &amp;Selection{kind, recv, obj, index, indirect}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>func (check *Checker) recordScope(node ast.Node, scope *Scope) {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	assert(node != nil)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	assert(scope != nil)
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	if m := check.Scopes; m != nil {
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		m[node] = scope
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
</pre><p><a href="check.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
