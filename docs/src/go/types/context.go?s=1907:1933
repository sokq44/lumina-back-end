<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/context.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./context.go?s=1907:1933#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">context.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// This file contains a definition of the type-checking context; an opaque type</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// that may be supplied by users during instantiation.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Contexts serve two purposes:</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//  - reduce the duplication of identical instances</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//  - short-circuit instantiation cycles</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// For the latter purpose, we must always have a context during instantiation,</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// whether or not it is supplied by the user. For both purposes, it must be the</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// case that hashing a pointer-identical type produces consistent results</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// (somewhat obviously).</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// However, neither of these purposes require that our hash is perfect, and so</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// this was not an explicit design goal of the context type. In fact, due to</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// concurrent use it is convenient not to guarantee de-duplication.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Nevertheless, in the future it could be helpful to allow users to leverage</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// contexts to canonicalize instances, and it would probably be possible to</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// achieve such a guarantee.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// A Context is an opaque type checking context. It may be used to share</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// identical type instances across type-checked packages or calls to</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Instantiate. Contexts are safe for concurrent use.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// The use of a shared context does not guarantee that identical instances are</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// deduplicated in all cases.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type Context struct {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	mu        sync.Mutex
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	typeMap   map[string][]ctxtEntry <span class="comment">// type hash -&gt; instances entries</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	nextID    int                    <span class="comment">// next unique ID</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	originIDs map[Type]int           <span class="comment">// origin type -&gt; unique ID</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type ctxtEntry struct {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	orig     Type
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	targs    []Type
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	instance Type <span class="comment">// = orig[targs]</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// NewContext creates a new Context.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="selection">func NewContext() *Context</span> {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	return &amp;Context{
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		typeMap:   make(map[string][]ctxtEntry),
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		originIDs: make(map[Type]int),
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// instanceHash returns a string representation of typ instantiated with targs.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// The hash should be a perfect hash, though out of caution the type checker</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// does not assume this. The result is guaranteed to not contain blanks.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func (ctxt *Context) instanceHash(orig Type, targs []Type) string {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	assert(ctxt != nil)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	assert(orig != nil)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	h := newTypeHasher(&amp;buf, ctxt)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	h.string(strconv.Itoa(ctxt.getID(orig)))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// Because we&#39;ve already written the unique origin ID this call to h.typ is</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// unnecessary, but we leave it for hash readability. It can be removed later</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// if performance is an issue.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	h.typ(orig)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if len(targs) &gt; 0 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		<span class="comment">// TODO(rfindley): consider asserting on isGeneric(typ) here, if and when</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		<span class="comment">// isGeneric handles *Signature types.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		h.typeList(targs)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	return strings.ReplaceAll(buf.String(), &#34; &#34;, &#34;#&#34;)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// lookup returns an existing instantiation of orig with targs, if it exists.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// Otherwise, it returns nil.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (ctxt *Context) lookup(h string, orig Type, targs []Type) Type {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	ctxt.mu.Lock()
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	defer ctxt.mu.Unlock()
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	for _, e := range ctxt.typeMap[h] {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		if identicalInstance(orig, targs, e.orig, e.targs) {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			return e.instance
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		if debug {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			<span class="comment">// Panic during development to surface any imperfections in our hash.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;non-identical instances: (orig: %s, targs: %v) and %s&#34;, orig, targs, e.instance))
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return nil
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// update de-duplicates n against previously seen types with the hash h.  If an</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// identical type is found with the type hash h, the previously seen type is</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// returned. Otherwise, n is returned, and recorded in the Context for the hash</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// h.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (ctxt *Context) update(h string, orig Type, targs []Type, inst Type) Type {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	assert(inst != nil)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	ctxt.mu.Lock()
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	defer ctxt.mu.Unlock()
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	for _, e := range ctxt.typeMap[h] {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		if inst == nil || Identical(inst, e.instance) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			return e.instance
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		if debug {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			<span class="comment">// Panic during development to surface any imperfections in our hash.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;%s and %s are not identical&#34;, inst, e.instance))
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	ctxt.typeMap[h] = append(ctxt.typeMap[h], ctxtEntry{
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		orig:     orig,
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		targs:    targs,
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		instance: inst,
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	})
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return inst
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// getID returns a unique ID for the type t.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>func (ctxt *Context) getID(t Type) int {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	ctxt.mu.Lock()
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	defer ctxt.mu.Unlock()
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	id, ok := ctxt.originIDs[t]
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if !ok {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		id = ctxt.nextID
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		ctxt.originIDs[t] = id
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		ctxt.nextID++
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return id
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
</pre><p><a href="context.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
