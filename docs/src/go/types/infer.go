<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/infer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="infer.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">infer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements type parameter inference.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// If enableReverseTypeInference is set, uninstantiated and</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// partially instantiated generic functions may be assigned</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// (incl. returned) to variables of function type and type</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// inference will attempt to infer the missing type arguments.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// Available with go1.21.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>const enableReverseTypeInference = true <span class="comment">// disable for debugging</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// infer attempts to infer the complete set of type arguments for generic function instantiation/call</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// based on the given type parameters tparams, type arguments targs, function parameters params, and</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// function arguments args, if any. There must be at least one type parameter, no more type arguments</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// than type parameters, and params and args must match in number (incl. zero).</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// If reverse is set, an error message&#39;s contents are reversed for a better error message for some</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// errors related to reverse type inference (where the function call is synthetic).</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// If successful, infer returns the complete list of given and inferred type arguments, one for each</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// type parameter. Otherwise the result is nil and appropriate errors will be reported.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func (check *Checker) infer(posn positioner, tparams []*TypeParam, targs []Type, params *Tuple, args []*operand, reverse bool) (inferred []Type) {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t verify result conditions if there&#39;s no error handler installed:</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// in that case, an error leads to an exit panic and the result value may</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// be incorrect. But in that case it doesn&#39;t matter because callers won&#39;t</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// be able to use it either.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	if check.conf.Error != nil {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		defer func() {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>			assert(inferred == nil || len(inferred) == len(tparams) &amp;&amp; !containsNil(inferred))
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		}()
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if traceInference {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		check.dump(&#34;== infer : %s%s ➞ %s&#34;, tparams, params, targs) <span class="comment">// aligned with rename print below</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		defer func() {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			check.dump(&#34;=&gt; %s ➞ %s\n&#34;, tparams, inferred)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		}()
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// There must be at least one type parameter, and no more type arguments than type parameters.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	n := len(tparams)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	assert(n &gt; 0 &amp;&amp; len(targs) &lt;= n)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// Parameters and arguments must match in number.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	assert(params.Len() == len(args))
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// If we already have all type arguments, we&#39;re done.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if len(targs) == n &amp;&amp; !containsNil(targs) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return targs
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// If we have invalid (ordinary) arguments, an error was reported before.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// Avoid additional inference errors and exit early (go.dev/issue/60434).</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	for _, arg := range args {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		if arg.mode == invalid {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			return nil
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// Make sure we have a &#34;full&#34; list of type arguments, some of which may</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// be nil (unknown). Make a copy so as to not clobber the incoming slice.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if len(targs) &lt; n {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		targs2 := make([]Type, n)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		copy(targs2, targs)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		targs = targs2
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// len(targs) == n</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// Continue with the type arguments we have. Avoid matching generic</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// parameters that already have type arguments against function arguments:</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// It may fail because matching uses type identity while parameter passing</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// uses assignment rules. Instantiate the parameter list with the type</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// arguments we have, and continue with that parameter list.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// Substitute type arguments for their respective type parameters in params,</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// if any. Note that nil targs entries are ignored by check.subst.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// We do this for better error messages; it&#39;s not needed for correctness.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// For instance, given:</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">//   func f[P, Q any](P, Q) {}</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">//   func _(s string) {</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">//           f[int](s, s) // ERROR</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">//   }</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// With substitution, we get the error:</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">//   &#34;cannot use s (variable of type string) as int value in argument to f[int]&#34;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// Without substitution we get the (worse) error:</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">//   &#34;type string of s does not match inferred type int for P&#34;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// even though the type int was provided (not inferred) for P.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) We might be able to finesse this in the error message reporting</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">//           (which only happens in case of an error) and then avoid doing</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">//           the substitution (which always happens).</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if params.Len() &gt; 0 {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		smap := makeSubstMap(tparams, targs)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		params = check.subst(nopos, params, smap, nil, check.context()).(*Tuple)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Unify parameter and argument types for generic parameters with typed arguments</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// and collect the indices of generic parameters with untyped arguments.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Terminology: generic parameter = function parameter with a type-parameterized type</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	u := newUnifier(tparams, targs, check.allowVersion(check.pkg, posn, go1_21))
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	errorf := func(tpar, targ Type, arg *operand) {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		<span class="comment">// provide a better error message if we can</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		targs := u.inferred(tparams)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		if targs[0] == nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			<span class="comment">// The first type parameter couldn&#39;t be inferred.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			<span class="comment">// If none of them could be inferred, don&#39;t try</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			<span class="comment">// to provide the inferred type in the error msg.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			allFailed := true
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			for _, targ := range targs {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>				if targ != nil {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>					allFailed = false
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>					break
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			if allFailed {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>				check.errorf(arg, CannotInferTypeArgs, &#34;type %s of %s does not match %s (cannot infer %s)&#34;, targ, arg.expr, tpar, typeParamsString(tparams))
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				return
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		smap := makeSubstMap(tparams, targs)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri): pass a poser here, rather than arg.Pos().</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		inferred := check.subst(arg.Pos(), tpar, smap, nil, check.context())
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		<span class="comment">// CannotInferTypeArgs indicates a failure of inference, though the actual</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		<span class="comment">// error may be better attributed to a user-provided type argument (hence</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// InvalidTypeArg). We can&#39;t differentiate these cases, so fall back on</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		<span class="comment">// the more general CannotInferTypeArgs.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		if inferred != tpar {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			if reverse {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				check.errorf(arg, CannotInferTypeArgs, &#34;inferred type %s for %s does not match type %s of %s&#34;, inferred, tpar, targ, arg.expr)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			} else {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>				check.errorf(arg, CannotInferTypeArgs, &#34;type %s of %s does not match inferred type %s for %s&#34;, targ, arg.expr, inferred, tpar)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		} else {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			check.errorf(arg, CannotInferTypeArgs, &#34;type %s of %s does not match %s&#34;, targ, arg.expr, tpar)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// indices of generic parameters with untyped arguments, for later use</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	var untyped []int
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// --- 1 ---</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// use information from function arguments</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if traceInference {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		u.tracef(&#34;== function parameters: %s&#34;, params)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		u.tracef(&#34;-- function arguments : %s&#34;, args)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	for i, arg := range args {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if arg.mode == invalid {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			<span class="comment">// An error was reported earlier. Ignore this arg</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			<span class="comment">// and continue, we may still be able to infer all</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			<span class="comment">// targs resulting in fewer follow-on errors.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) determine if we still need this check</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			continue
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		par := params.At(i)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		if isParameterized(tparams, par.typ) || isParameterized(tparams, arg.typ) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			<span class="comment">// Function parameters are always typed. Arguments may be untyped.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			<span class="comment">// Collect the indices of untyped arguments and handle them later.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			if isTyped(arg.typ) {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>				if !u.unify(par.typ, arg.typ, assign) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>					errorf(par.typ, arg.typ, arg)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>					return nil
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>				}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			} else if _, ok := par.typ.(*TypeParam); ok &amp;&amp; !arg.isNil() {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				<span class="comment">// Since default types are all basic (i.e., non-composite) types, an</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>				<span class="comment">// untyped argument will never match a composite parameter type; the</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>				<span class="comment">// only parameter type it can possibly match against is a *TypeParam.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>				<span class="comment">// Thus, for untyped arguments we only need to look at parameter types</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>				<span class="comment">// that are single type parameters.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>				<span class="comment">// Also, untyped nils don&#39;t have a default type and can be ignored.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>				untyped = append(untyped, i)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if traceInference {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		inferred := u.inferred(tparams)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		u.tracef(&#34;=&gt; %s ➞ %s\n&#34;, tparams, inferred)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// --- 2 ---</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// use information from type parameter constraints</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	if traceInference {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		u.tracef(&#34;== type parameters: %s&#34;, tparams)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// Unify type parameters with their constraints as long</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// as progress is being made.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// This is an O(n^2) algorithm where n is the number of</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// type parameters: if there is progress, at least one</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// type argument is inferred per iteration, and we have</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// a doubly nested loop.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// In practice this is not a problem because the number</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// of type parameters tends to be very small (&lt; 5 or so).</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// (It should be possible for unification to efficiently</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// signal newly inferred type arguments; then the loops</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// here could handle the respective type parameters only,</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// but that will come at a cost of extra complexity which</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// may not be worth it.)</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	for i := 0; ; i++ {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		nn := u.unknowns()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		if traceInference {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				fmt.Println()
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			u.tracef(&#34;-- iteration %d&#34;, i)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		for _, tpar := range tparams {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			tx := u.at(tpar)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			core, single := coreTerm(tpar)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			if traceInference {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				u.tracef(&#34;-- type parameter %s = %s: core(%s) = %s, single = %v&#34;, tpar, tx, tpar, core, single)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>			<span class="comment">// If there is a core term (i.e., a core type with tilde information)</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			<span class="comment">// unify the type parameter with the core type.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			if core != nil {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				<span class="comment">// A type parameter can be unified with its core type in two cases.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				switch {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				case tx != nil:
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>					<span class="comment">// The corresponding type argument tx is known. There are 2 cases:</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>					<span class="comment">// 1) If the core type has a tilde, per spec requirement for tilde</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>					<span class="comment">//    elements, the core type is an underlying (literal) type.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>					<span class="comment">//    And because of the tilde, the underlying type of tx must match</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>					<span class="comment">//    against the core type.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>					<span class="comment">//    But because unify automatically matches a defined type against</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>					<span class="comment">//    an underlying literal type, we can simply unify tx with the</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>					<span class="comment">//    core type.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>					<span class="comment">// 2) If the core type doesn&#39;t have a tilde, we also must unify tx</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>					<span class="comment">//    with the core type.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>					if !u.unify(tx, core.typ, 0) {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>						<span class="comment">// TODO(gri) Type parameters that appear in the constraint and</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>						<span class="comment">//           for which we have type arguments inferred should</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>						<span class="comment">//           use those type arguments for a better error message.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>						check.errorf(posn, CannotInferTypeArgs, &#34;%s (type %s) does not satisfy %s&#34;, tpar, tx, tpar.Constraint())
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>						return nil
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>					}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				case single &amp;&amp; !core.tilde:
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>					<span class="comment">// The corresponding type argument tx is unknown and there&#39;s a single</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>					<span class="comment">// specific type and no tilde.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>					<span class="comment">// In this case the type argument must be that single type; set it.</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>					u.set(tpar, core.typ)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>				}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			} else {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				if tx != nil {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>					<span class="comment">// We don&#39;t have a core type, but the type argument tx is known.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>					<span class="comment">// It must have (at least) all the methods of the type constraint,</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>					<span class="comment">// and the method signatures must unify; otherwise tx cannot satisfy</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>					<span class="comment">// the constraint.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>					<span class="comment">// TODO(gri) Now that unification handles interfaces, this code can</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>					<span class="comment">//           be reduced to calling u.unify(tx, tpar.iface(), assign)</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>					<span class="comment">//           (which will compare signatures exactly as we do below).</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>					<span class="comment">//           We leave it as is for now because missingMethod provides</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>					<span class="comment">//           a failure cause which allows for a better error message.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>					<span class="comment">//           Eventually, unify should return an error with cause.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>					var cause string
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>					constraint := tpar.iface()
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>					if m, _ := check.missingMethod(tx, constraint, true, func(x, y Type) bool { return u.unify(x, y, exact) }, &amp;cause); m != nil {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>						<span class="comment">// TODO(gri) better error message (see TODO above)</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>						check.errorf(posn, CannotInferTypeArgs, &#34;%s (type %s) does not satisfy %s %s&#34;, tpar, tx, tpar.Constraint(), cause)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>						return nil
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>					}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>				}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		if u.unknowns() == nn {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			break <span class="comment">// no progress</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if traceInference {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		inferred := u.inferred(tparams)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		u.tracef(&#34;=&gt; %s ➞ %s\n&#34;, tparams, inferred)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// --- 3 ---</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// use information from untyped constants</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	if traceInference {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		u.tracef(&#34;== untyped arguments: %v&#34;, untyped)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// Some generic parameters with untyped arguments may have been given a type by now.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// Collect all remaining parameters that don&#39;t have a type yet and determine the</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// maximum untyped type for each of those parameters, if possible.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	var maxUntyped map[*TypeParam]Type <span class="comment">// lazily allocated (we may not need it)</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for _, index := range untyped {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		tpar := params.At(index).typ.(*TypeParam) <span class="comment">// is type parameter by construction of untyped</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		if u.at(tpar) == nil {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			arg := args[index] <span class="comment">// arg corresponding to tpar</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			if maxUntyped == nil {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>				maxUntyped = make(map[*TypeParam]Type)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			max := maxUntyped[tpar]
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			if max == nil {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>				max = arg.typ
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			} else {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>				m := maxType(max, arg.typ)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>				if m == nil {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>					check.errorf(arg, CannotInferTypeArgs, &#34;mismatched types %s and %s (cannot infer %s)&#34;, max, arg.typ, tpar)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>					return nil
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>				}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>				max = m
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			maxUntyped[tpar] = max
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// maxUntyped contains the maximum untyped type for each type parameter</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// which doesn&#39;t have a type yet. Set the respective default types.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	for tpar, typ := range maxUntyped {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		d := Default(typ)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		assert(isTyped(d))
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		u.set(tpar, d)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	<span class="comment">// --- simplify ---</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// u.inferred(tparams) now contains the incoming type arguments plus any additional type</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// arguments which were inferred. The inferred non-nil entries may still contain</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// references to other type parameters found in constraints.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// For instance, for [A any, B interface{ []C }, C interface{ *A }], if A == int</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// was given, unification produced the type list [int, []C, *A]. We eliminate the</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// remaining type parameters by substituting the type parameters in this type list</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// until nothing changes anymore.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	inferred = u.inferred(tparams)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	if debug {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		for i, targ := range targs {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			assert(targ == nil || inferred[i] == targ)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// The data structure of each (provided or inferred) type represents a graph, where</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// each node corresponds to a type and each (directed) vertex points to a component</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// type. The substitution process described above repeatedly replaces type parameter</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// nodes in these graphs with the graphs of the types the type parameters stand for,</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// which creates a new (possibly bigger) graph for each type.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// The substitution process will not stop if the replacement graph for a type parameter</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// also contains that type parameter.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">// For instance, for [A interface{ *A }], without any type argument provided for A,</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	<span class="comment">// unification produces the type list [*A]. Substituting A in *A with the value for</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// A will lead to infinite expansion by producing [**A], [****A], [********A], etc.,</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// because the graph A -&gt; *A has a cycle through A.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">// Generally, cycles may occur across multiple type parameters and inferred types</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	<span class="comment">// (for instance, consider [P interface{ *Q }, Q interface{ func(P) }]).</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	<span class="comment">// We eliminate cycles by walking the graphs for all type parameters. If a cycle</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	<span class="comment">// through a type parameter is detected, killCycles nils out the respective type</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	<span class="comment">// (in the inferred list) which kills the cycle, and marks the corresponding type</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	<span class="comment">// parameter as not inferred.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) If useful, we could report the respective cycle as an error. We don&#39;t</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">//           do this now because type inference will fail anyway, and furthermore,</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	<span class="comment">//           constraints with cycles of this kind cannot currently be satisfied by</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	<span class="comment">//           any user-supplied type. But should that change, reporting an error</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	<span class="comment">//           would be wrong.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	killCycles(tparams, inferred)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// dirty tracks the indices of all types that may still contain type parameters.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	<span class="comment">// We know that nil type entries and entries corresponding to provided (non-nil)</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// type arguments are clean, so exclude them from the start.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	var dirty []int
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	for i, typ := range inferred {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		if typ != nil &amp;&amp; (i &gt;= len(targs) || targs[i] == nil) {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			dirty = append(dirty, i)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	for len(dirty) &gt; 0 {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		if traceInference {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			u.tracef(&#34;-- simplify %s ➞ %s&#34;, tparams, inferred)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) Instead of creating a new substMap for each iteration,</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		<span class="comment">// provide an update operation for substMaps and only change when</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		<span class="comment">// needed. Optimization.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		smap := makeSubstMap(tparams, inferred)
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		n := 0
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		for _, index := range dirty {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			t0 := inferred[index]
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			if t1 := check.subst(nopos, t0, smap, nil, check.context()); t1 != t0 {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>				<span class="comment">// t0 was simplified to t1.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				<span class="comment">// If t0 was a generic function, but the simplified signature t1 does</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				<span class="comment">// not contain any type parameters anymore, the function is not generic</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				<span class="comment">// anymore. Remove it&#39;s type parameters. (go.dev/issue/59953)</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				<span class="comment">// Note that if t0 was a signature, t1 must be a signature, and t1</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				<span class="comment">// can only be a generic signature if it originated from a generic</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				<span class="comment">// function argument. Those signatures are never defined types and</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				<span class="comment">// thus there is no need to call under below.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				<span class="comment">// TODO(gri) Consider doing this in Checker.subst.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				<span class="comment">//           Then this would fall out automatically here and also</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				<span class="comment">//           in instantiation (where we also explicitly nil out</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				<span class="comment">//           type parameters). See the *Signature TODO in subst.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				if sig, _ := t1.(*Signature); sig != nil &amp;&amp; sig.TypeParams().Len() &gt; 0 &amp;&amp; !isParameterized(tparams, sig) {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>					sig.tparams = nil
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				inferred[index] = t1
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				dirty[n] = index
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>				n++
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		dirty = dirty[:n]
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// Once nothing changes anymore, we may still have type parameters left;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	<span class="comment">// e.g., a constraint with core type *P may match a type parameter Q but</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// we don&#39;t have any type arguments to fill in for *P or Q (go.dev/issue/45548).</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t let such inferences escape; instead treat them as unresolved.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	for i, typ := range inferred {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		if typ == nil || isParameterized(tparams, typ) {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			obj := tparams[i].obj
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			check.errorf(posn, CannotInferTypeArgs, &#34;cannot infer %s (%s)&#34;, obj.name, obj.pos)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			return nil
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	return
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// containsNil reports whether list contains a nil entry.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>func containsNil(list []Type) bool {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	for _, t := range list {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		if t == nil {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			return true
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return false
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// renameTParams renames the type parameters in the given type such that each type</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// parameter is given a new identity. renameTParams returns the new type parameters</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// and updated type. If the result type is unchanged from the argument type, none</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// of the type parameters in tparams occurred in the type.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// If typ is a generic function, type parameters held with typ are not changed and</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// must be updated separately if desired.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// The positions is only used for debug traces.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>func (check *Checker) renameTParams(pos token.Pos, tparams []*TypeParam, typ Type) ([]*TypeParam, Type) {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// For the purpose of type inference we must differentiate type parameters</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// occurring in explicit type or value function arguments from the type</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	<span class="comment">// parameters we are solving for via unification because they may be the</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">// same in self-recursive calls:</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	<span class="comment">//   func f[P constraint](x P) {</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	<span class="comment">//           f(x)</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	<span class="comment">//   }</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// In this example, without type parameter renaming, the P used in the</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// instantiation f[P] has the same pointer identity as the P we are trying</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">// to solve for through type inference. This causes problems for type</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	<span class="comment">// unification. Because any such self-recursive call is equivalent to</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">// a mutually recursive call, type parameter renaming can be used to</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	<span class="comment">// create separate, disentangled type parameters. The above example</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	<span class="comment">// can be rewritten into the following equivalent code:</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	<span class="comment">//   func f[P constraint](x P) {</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">//           f2(x)</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	<span class="comment">//   }</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">//   func f2[P2 constraint](x P2) {</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">//           f(x)</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	<span class="comment">//   }</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	<span class="comment">// Type parameter renaming turns the first example into the second</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	<span class="comment">// example by renaming the type parameter P into P2.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	if len(tparams) == 0 {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		return nil, typ <span class="comment">// nothing to do</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	tparams2 := make([]*TypeParam, len(tparams))
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	for i, tparam := range tparams {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		tname := NewTypeName(tparam.Obj().Pos(), tparam.Obj().Pkg(), tparam.Obj().Name(), nil)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		tparams2[i] = NewTypeParam(tname, nil)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		tparams2[i].index = tparam.index <span class="comment">// == i</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	renameMap := makeRenameMap(tparams, tparams2)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	for i, tparam := range tparams {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		tparams2[i].bound = check.subst(pos, tparam.bound, renameMap, nil, check.context())
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return tparams2, check.subst(pos, typ, renameMap, nil, check.context())
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// typeParamsString produces a string containing all the type parameter names</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">// in list suitable for human consumption.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func typeParamsString(list []*TypeParam) string {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	<span class="comment">// common cases</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	n := len(list)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	switch n {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	case 0:
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	case 1:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		return list[0].obj.name
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	case 2:
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		return list[0].obj.name + &#34; and &#34; + list[1].obj.name
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	<span class="comment">// general case (n &gt; 2)</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	for i, tname := range list[:n-1] {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			buf.WriteString(&#34;, &#34;)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		buf.WriteString(tname.obj.name)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	buf.WriteString(&#34;, and &#34;)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	buf.WriteString(list[n-1].obj.name)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	return buf.String()
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span><span class="comment">// isParameterized reports whether typ contains any of the type parameters of tparams.</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// If typ is a generic function, isParameterized ignores the type parameter declarations;</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span><span class="comment">// it only considers the signature proper (incoming and result parameters).</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>func isParameterized(tparams []*TypeParam, typ Type) bool {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	w := tpWalker{
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		tparams: tparams,
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		seen:    make(map[Type]bool),
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	return w.isParameterized(typ)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>type tpWalker struct {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	tparams []*TypeParam
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	seen    map[Type]bool
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>func (w *tpWalker) isParameterized(typ Type) (res bool) {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">// detect cycles</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	if x, ok := w.seen[typ]; ok {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		return x
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	w.seen[typ] = false
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	defer func() {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		w.seen[typ] = res
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	}()
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	switch t := typ.(type) {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	case *Basic:
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	case *Alias:
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		return w.isParameterized(Unalias(t))
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	case *Array:
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		return w.isParameterized(t.elem)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	case *Slice:
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		return w.isParameterized(t.elem)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	case *Struct:
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		return w.varList(t.fields)
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	case *Pointer:
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		return w.isParameterized(t.base)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	case *Tuple:
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		<span class="comment">// This case does not occur from within isParameterized</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		<span class="comment">// because tuples only appear in signatures where they</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		<span class="comment">// are handled explicitly. But isParameterized is also</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		<span class="comment">// called by Checker.callExpr with a function result tuple</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		<span class="comment">// if instantiation failed (go.dev/issue/59890).</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		return t != nil &amp;&amp; w.varList(t.vars)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	case *Signature:
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		<span class="comment">// t.tparams may not be nil if we are looking at a signature</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		<span class="comment">// of a generic function type (or an interface method) that is</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		<span class="comment">// part of the type we&#39;re testing. We don&#39;t care about these type</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		<span class="comment">// parameters.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		<span class="comment">// Similarly, the receiver of a method may declare (rather than</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		<span class="comment">// use) type parameters, we don&#39;t care about those either.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		<span class="comment">// Thus, we only need to look at the input and result parameters.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		return t.params != nil &amp;&amp; w.varList(t.params.vars) || t.results != nil &amp;&amp; w.varList(t.results.vars)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	case *Interface:
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		tset := t.typeSet()
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		for _, m := range tset.methods {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			if w.isParameterized(m.typ) {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>				return true
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		return tset.is(func(t *term) bool {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			return t != nil &amp;&amp; w.isParameterized(t.typ)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		})
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	case *Map:
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		return w.isParameterized(t.key) || w.isParameterized(t.elem)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	case *Chan:
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		return w.isParameterized(t.elem)
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	case *Named:
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		for _, t := range t.TypeArgs().list() {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			if w.isParameterized(t) {
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>				return true
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		}
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		return tparamIndex(w.tparams, t) &gt;= 0
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	default:
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unexpected %T&#34;, typ))
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	return false
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>func (w *tpWalker) varList(list []*Var) bool {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	for _, v := range list {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if w.isParameterized(v.typ) {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			return true
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	return false
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span><span class="comment">// If the type parameter has a single specific type S, coreTerm returns (S, true).</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// Otherwise, if tpar has a core type T, it returns a term corresponding to that</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span><span class="comment">// core type and false. In that case, if any term of tpar has a tilde, the core</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span><span class="comment">// term has a tilde. In all other cases coreTerm returns (nil, false).</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>func coreTerm(tpar *TypeParam) (*term, bool) {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	n := 0
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	var single *term <span class="comment">// valid if n == 1</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	var tilde bool
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	tpar.is(func(t *term) bool {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		if t == nil {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>			assert(n == 0)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			return false <span class="comment">// no terms</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		n++
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		single = t
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		if t.tilde {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			tilde = true
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		return true
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	})
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	if n == 1 {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if debug {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			assert(debug &amp;&amp; under(single.typ) == coreType(tpar))
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		return single, true
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	if typ := coreType(tpar); typ != nil {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		<span class="comment">// A core type is always an underlying type.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		<span class="comment">// If any term of tpar has a tilde, we don&#39;t</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		<span class="comment">// have a precise core type and we must return</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		<span class="comment">// a tilde as well.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		return &amp;term{tilde, typ}, false
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	return nil, false
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="comment">// killCycles walks through the given type parameters and looks for cycles</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span><span class="comment">// created by type parameters whose inferred types refer back to that type</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">// parameter, either directly or indirectly. If such a cycle is detected,</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span><span class="comment">// it is killed by setting the corresponding inferred type to nil.</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span><span class="comment">// TODO(gri) Determine if we can simply abort inference as soon as we have</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span><span class="comment">// found a single cycle.</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>func killCycles(tparams []*TypeParam, inferred []Type) {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	w := cycleFinder{tparams, inferred, make(map[Type]bool)}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	for _, t := range tparams {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		w.typ(t) <span class="comment">// t != nil</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>type cycleFinder struct {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	tparams  []*TypeParam
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	inferred []Type
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	seen     map[Type]bool
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>func (w *cycleFinder) typ(typ Type) {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	if w.seen[typ] {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		<span class="comment">// We have seen typ before. If it is one of the type parameters</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		<span class="comment">// in w.tparams, iterative substitution will lead to infinite expansion.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		<span class="comment">// Nil out the corresponding type which effectively kills the cycle.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		if tpar, _ := typ.(*TypeParam); tpar != nil {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			if i := tparamIndex(w.tparams, tpar); i &gt;= 0 {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>				<span class="comment">// cycle through tpar</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>				w.inferred[i] = nil
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		<span class="comment">// If we don&#39;t have one of our type parameters, the cycle is due</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		<span class="comment">// to an ordinary recursive type and we can just stop walking it.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		return
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	w.seen[typ] = true
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	defer delete(w.seen, typ)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	switch t := typ.(type) {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	case *Basic:
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	case *Alias:
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		w.typ(Unalias(t))
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	case *Array:
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	case *Slice:
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	case *Struct:
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		w.varList(t.fields)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	case *Pointer:
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		w.typ(t.base)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	<span class="comment">// case *Tuple:</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	<span class="comment">//      This case should not occur because tuples only appear</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	<span class="comment">//      in signatures where they are handled explicitly.</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	case *Signature:
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		if t.params != nil {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>			w.varList(t.params.vars)
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		if t.results != nil {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			w.varList(t.results.vars)
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	case *Union:
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		for _, t := range t.terms {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			w.typ(t.typ)
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	case *Interface:
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		for _, m := range t.methods {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			w.typ(m.typ)
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		for _, t := range t.embeddeds {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>			w.typ(t)
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		}
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	case *Map:
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		w.typ(t.key)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	case *Chan:
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	case *Named:
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		for _, tpar := range t.TypeArgs().list() {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			w.typ(tpar)
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		if i := tparamIndex(w.tparams, t); i &gt;= 0 &amp;&amp; w.inferred[i] != nil {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			w.typ(w.inferred[i])
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		}
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	default:
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unexpected %T&#34;, typ))
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>func (w *cycleFinder) varList(list []*Var) {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	for _, v := range list {
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		w.typ(v.typ)
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	}
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">// If tpar is a type parameter in list, tparamIndex returns the index</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// of the type parameter in list. Otherwise the result is &lt; 0.</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>func tparamIndex(list []*TypeParam, tpar *TypeParam) int {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	for i, p := range list {
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		if p == tpar {
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>			return i
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	}
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	return -1
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
</pre><p><a href="infer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
