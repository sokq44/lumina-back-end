<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/instantiate.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="instantiate.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">instantiate.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements instantiation of generic types</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// through substitution of type parameters by type arguments.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>package types
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>import (
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Instantiate instantiates the type orig with the given type arguments targs.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// orig must be a *Named or a *Signature type. If there is no error, the</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// resulting Type is an instantiated type of the same kind (either a *Named or</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// a *Signature). Methods attached to a *Named type are also instantiated, and</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// associated with a new *Func that has the same position as the original</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// method, but nil function scope.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// If ctxt is non-nil, it may be used to de-duplicate the instance against</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// previous instances with the same identity. As a special case, generic</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// *Signature origin types are only considered identical if they are pointer</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// equivalent, so that instantiating distinct (but possibly identical)</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// signatures will yield different instances. The use of a shared context does</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// not guarantee that identical instances are deduplicated in all cases.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// If validate is set, Instantiate verifies that the number of type arguments</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// and parameters match, and that the type arguments satisfy their</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// corresponding type constraints. If verification fails, the resulting error</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// may wrap an *ArgumentError indicating which type argument did not satisfy</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// its corresponding type parameter constraint, and why.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// If validate is not set, Instantiate does not verify the type argument count</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// or whether the type arguments satisfy their constraints. Instantiate is</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// guaranteed to not return an error, but may panic. Specifically, for</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// *Signature types, Instantiate will panic immediately if the type argument</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// count is incorrect; for *Named types, a panic may occur later inside the</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// *Named API.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func Instantiate(ctxt *Context, orig Type, targs []Type, validate bool) (Type, error) {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	if ctxt == nil {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		ctxt = NewContext()
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	if validate {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		var tparams []*TypeParam
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		switch t := orig.(type) {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		case *Named:
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>			tparams = t.TypeParams().list()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		case *Signature:
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>			tparams = t.TypeParams().list()
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		if len(targs) != len(tparams) {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;got %d type arguments but %s has %d type parameters&#34;, len(targs), orig, len(tparams))
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		if i, err := (*Checker)(nil).verify(nopos, tparams, targs, ctxt); err != nil {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			return nil, &amp;ArgumentError{i, err}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	inst := (*Checker)(nil).instance(nopos, orig, targs, nil, ctxt)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	return inst, nil
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// instance instantiates the given original (generic) function or type with the</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// provided type arguments and returns the resulting instance. If an identical</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// instance exists already in the given contexts, it returns that instance,</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// otherwise it creates a new one.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// If expanding is non-nil, it is the Named instance type currently being</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// expanded. If ctxt is non-nil, it is the context associated with the current</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// type-checking pass or call to Instantiate. At least one of expanding or ctxt</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// must be non-nil.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// For Named types the resulting instance may be unexpanded.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func (check *Checker) instance(pos token.Pos, orig Type, targs []Type, expanding *Named, ctxt *Context) (res Type) {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// The order of the contexts below matters: we always prefer instances in the</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// expanding instance context in order to preserve reference cycles.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// Invariant: if expanding != nil, the returned instance will be the instance</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// recorded in expanding.inst.ctxt.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	var ctxts []*Context
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	if expanding != nil {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		ctxts = append(ctxts, expanding.inst.ctxt)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if ctxt != nil {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		ctxts = append(ctxts, ctxt)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	assert(len(ctxts) &gt; 0)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// Compute all hashes; hashes may differ across contexts due to different</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// unique IDs for Named types within the hasher.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	hashes := make([]string, len(ctxts))
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	for i, ctxt := range ctxts {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		hashes[i] = ctxt.instanceHash(orig, targs)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// If local is non-nil, updateContexts return the type recorded in</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// local.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	updateContexts := func(res Type) Type {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		for i := len(ctxts) - 1; i &gt;= 0; i-- {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			res = ctxts[i].update(hashes[i], orig, targs, res)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return res
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// typ may already have been instantiated with identical type arguments. In</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// that case, re-use the existing instance.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	for i, ctxt := range ctxts {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		if inst := ctxt.lookup(hashes[i], orig, targs); inst != nil {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			return updateContexts(inst)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	switch orig := orig.(type) {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	case *Named:
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		res = check.newNamedInstance(pos, orig, targs, expanding) <span class="comment">// substituted lazily</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	case *Signature:
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		assert(expanding == nil) <span class="comment">// function instances cannot be reached from Named types</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		tparams := orig.TypeParams()
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) investigate if this is needed (type argument and parameter count seem to be correct here)</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if !check.validateTArgLen(pos, orig.String(), tparams.Len(), len(targs)) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			return Typ[Invalid]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if tparams.Len() == 0 {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			return orig <span class="comment">// nothing to do (minor optimization)</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		sig := check.subst(pos, orig, makeSubstMap(tparams.list(), targs), nil, ctxt).(*Signature)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		<span class="comment">// If the signature doesn&#39;t use its type parameters, subst</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		<span class="comment">// will not make a copy. In that case, make a copy now (so</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">// we can set tparams to nil w/o causing side-effects).</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		if sig == orig {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			copy := *sig
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			sig = &amp;copy
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		<span class="comment">// After instantiating a generic signature, it is not generic</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		<span class="comment">// anymore; we need to set tparams to nil.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		sig.tparams = nil
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		res = sig
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	default:
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		<span class="comment">// only types and functions can be generic</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;%v: cannot instantiate %v&#34;, pos, orig))
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// Update all contexts; it&#39;s possible that we&#39;ve lost a race.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	return updateContexts(res)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// validateTArgLen checks that the number of type arguments (got) matches the</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// number of type parameters (want); if they don&#39;t match an error is reported.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// If validation fails and check is nil, validateTArgLen panics.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (check *Checker) validateTArgLen(pos token.Pos, name string, want, got int) bool {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	var qual string
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	switch {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	case got &lt; want:
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		qual = &#34;not enough&#34;
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	case got &gt; want:
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		qual = &#34;too many&#34;
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	default:
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		return true
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	msg := check.sprintf(&#34;%s type arguments for type %s: have %d, want %d&#34;, qual, name, got, want)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if check != nil {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		check.error(atPos(pos), WrongTypeArgCount, msg)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		return false
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	panic(fmt.Sprintf(&#34;%v: %s&#34;, pos, msg))
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (check *Checker) verify(pos token.Pos, tparams []*TypeParam, targs []Type, ctxt *Context) (int, error) {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	smap := makeSubstMap(tparams, targs)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	for i, tpar := range tparams {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		<span class="comment">// Ensure that we have a (possibly implicit) interface as type bound (go.dev/issue/51048).</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		tpar.iface()
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		<span class="comment">// The type parameter bound is parameterized with the same type parameters</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		<span class="comment">// as the instantiated type; before we can use it for bounds checking we</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		<span class="comment">// need to instantiate it with the type arguments with which we instantiated</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		<span class="comment">// the parameterized type.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		bound := check.subst(pos, tpar.bound, smap, nil, ctxt)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		var cause string
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		if !check.implements(pos, targs[i], bound, true, &amp;cause) {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			return i, errors.New(cause)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return -1, nil
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// implements checks if V implements T. The receiver may be nil if implements</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// is called through an exported API call such as AssignableTo. If constraint</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// is set, T is a type constraint.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// If the provided cause is non-nil, it may be set to an error string</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// explaining why V does not implement (or satisfy, for constraints) T.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>func (check *Checker) implements(pos token.Pos, V, T Type, constraint bool, cause *string) bool {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	Vu := under(V)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	Tu := under(T)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if !isValid(Vu) || !isValid(Tu) {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return true <span class="comment">// avoid follow-on errors</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	if p, _ := Vu.(*Pointer); p != nil &amp;&amp; !isValid(under(p.base)) {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		return true <span class="comment">// avoid follow-on errors (see go.dev/issue/49541 for an example)</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	verb := &#34;implement&#34;
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if constraint {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		verb = &#34;satisfy&#34;
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	Ti, _ := Tu.(*Interface)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if Ti == nil {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		if cause != nil {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			var detail string
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			if isInterfacePtr(Tu) {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				detail = check.sprintf(&#34;type %s is pointer to interface, not interface&#34;, T)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			} else {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				detail = check.sprintf(&#34;%s is not an interface&#34;, T)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;%s does not %s %s (%s)&#34;, V, verb, T, detail)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		return false
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// Every type satisfies the empty interface.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if Ti.Empty() {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return true
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// T is not the empty interface (i.e., the type set of T is restricted)</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// An interface V with an empty type set satisfies any interface.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// (The empty set is a subset of any set.)</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	Vi, _ := Vu.(*Interface)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	if Vi != nil &amp;&amp; Vi.typeSet().IsEmpty() {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		return true
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// type set of V is not empty</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// No type with non-empty type set satisfies the empty type set.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if Ti.typeSet().IsEmpty() {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		if cause != nil {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;cannot %s %s (empty type set)&#34;, verb, T)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		return false
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// V must implement T&#39;s methods, if any.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if m, _ := check.missingMethod(V, T, true, Identical, cause); m != nil <span class="comment">/* !Implements(V, T) */</span> {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		if cause != nil {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;%s does not %s %s %s&#34;, V, verb, T, *cause)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		return false
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// Only check comparability if we don&#39;t have a more specific error.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	checkComparability := func() bool {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		if !Ti.IsComparable() {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			return true
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		<span class="comment">// If T is comparable, V must be comparable.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		<span class="comment">// If V is strictly comparable, we&#39;re done.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		if comparable(V, false <span class="comment">/* strict comparability */</span>, nil, nil) {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			return true
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		<span class="comment">// For constraint satisfaction, use dynamic (spec) comparability</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		<span class="comment">// so that ordinary, non-type parameter interfaces implement comparable.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		if constraint &amp;&amp; comparable(V, true <span class="comment">/* spec comparability */</span>, nil, nil) {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			<span class="comment">// V is comparable if we are at Go 1.20 or higher.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			if check == nil || check.allowVersion(check.pkg, atPos(pos), go1_20) { <span class="comment">// atPos needed so that go/types generate passes</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>				return true
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			if cause != nil {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>				*cause = check.sprintf(&#34;%s to %s comparable requires go1.20 or later&#34;, V, verb)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>			return false
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		if cause != nil {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;%s does not %s comparable&#34;, V, verb)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		return false
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// V must also be in the set of types of T, if any.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// Constraints with empty type sets were already excluded above.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	if !Ti.typeSet().hasTerms() {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		return checkComparability() <span class="comment">// nothing to do</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	<span class="comment">// If V is itself an interface, each of its possible types must be in the set</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	<span class="comment">// of T types (i.e., the V type set must be a subset of the T type set).</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// Interfaces V with empty type sets were already excluded above.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if Vi != nil {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		if !Vi.typeSet().subsetOf(Ti.typeSet()) {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) report which type is missing</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			if cause != nil {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>				*cause = check.sprintf(&#34;%s does not %s %s&#34;, V, verb, T)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			return false
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		return checkComparability()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, V&#39;s type must be included in the iface type set.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	var alt Type
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if Ti.typeSet().is(func(t *term) bool {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if !t.includes(V) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			<span class="comment">// If V ∉ t.typ but V ∈ ~t.typ then remember this type</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			<span class="comment">// so we can suggest it as an alternative in the error</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			<span class="comment">// message.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			if alt == nil &amp;&amp; !t.tilde &amp;&amp; Identical(t.typ, under(t.typ)) {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>				tt := *t
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>				tt.tilde = true
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>				if tt.includes(V) {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>					alt = t.typ
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>				}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			return true
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return false
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}) {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		if cause != nil {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			var detail string
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			switch {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			case alt != nil:
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>				detail = check.sprintf(&#34;possibly missing ~ for %s in %s&#34;, alt, T)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			case mentions(Ti, V):
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				detail = check.sprintf(&#34;%s mentions %s, but %s is not in the type set of %s&#34;, T, V, V, T)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			default:
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				detail = check.sprintf(&#34;%s missing in %s&#34;, V, Ti.typeSet().terms)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;%s does not %s %s (%s)&#34;, V, verb, T, detail)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		return false
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	return checkComparability()
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// mentions reports whether type T &#34;mentions&#34; typ in an (embedded) element or term</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// of T (whether typ is in the type set of T or not). For better error messages.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>func mentions(T, typ Type) bool {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	switch T := T.(type) {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	case *Interface:
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		for _, e := range T.embeddeds {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			if mentions(e, typ) {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				return true
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	case *Union:
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		for _, t := range T.terms {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			if mentions(t.typ, typ) {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>				return true
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	default:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		if Identical(T, typ) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			return true
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	return false
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
</pre><p><a href="instantiate.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
