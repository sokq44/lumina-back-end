<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/interface.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./interface.go?s=4545:4577#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">interface.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package types
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// API</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// An Interface represents an interface type.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type Interface struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	check     *Checker     <span class="comment">// for error reporting; nil once type set is computed</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	methods   []*Func      <span class="comment">// ordered list of explicitly declared methods</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	embeddeds []Type       <span class="comment">// ordered list of explicitly embedded elements</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	embedPos  *[]token.Pos <span class="comment">// positions of embedded elements; or nil (for error messages) - use pointer to save space</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	implicit  bool         <span class="comment">// interface is wrapper for type set literal (non-interface T, ~T, or A|B)</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	complete  bool         <span class="comment">// indicates that obj, methods, and embeddeds are set and type set can be computed</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	tset *_TypeSet <span class="comment">// type set described by this interface, computed lazily</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// typeSet returns the type set for interface t.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func (t *Interface) typeSet() *_TypeSet { return computeInterfaceTypeSet(t.check, nopos, t) }
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// emptyInterface represents the empty (completed) interface</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>var emptyInterface = Interface{complete: true, tset: &amp;topTypeSet}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// NewInterface returns a new interface for the given methods and embedded types.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// NewInterface takes ownership of the provided methods and may modify their types</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// by setting missing receivers.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use NewInterfaceType instead which allows arbitrary embedded types.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func NewInterface(methods []*Func, embeddeds []*Named) *Interface {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	tnames := make([]Type, len(embeddeds))
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	for i, t := range embeddeds {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		tnames[i] = t
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return NewInterfaceType(methods, tnames)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// NewInterfaceType returns a new interface for the given methods and embedded</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// types. NewInterfaceType takes ownership of the provided methods and may</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// modify their types by setting missing receivers.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// To avoid race conditions, the interface&#39;s type set should be computed before</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// concurrent use of the interface, by explicitly calling Complete.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func NewInterfaceType(methods []*Func, embeddeds []Type) *Interface {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	if len(methods) == 0 &amp;&amp; len(embeddeds) == 0 {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		return &amp;emptyInterface
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// set method receivers if necessary</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	typ := (*Checker)(nil).newInterface()
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	for _, m := range methods {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		if sig := m.typ.(*Signature); sig.recv == nil {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			sig.recv = NewVar(m.pos, m.pkg, &#34;&#34;, typ)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// sort for API stability</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	sortMethods(methods)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	typ.methods = methods
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	typ.embeddeds = embeddeds
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	typ.complete = true
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return typ
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// check may be nil</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func (check *Checker) newInterface() *Interface {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	typ := &amp;Interface{check: check}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if check != nil {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		check.needsCleanup(typ)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	return typ
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// MarkImplicit marks the interface t as implicit, meaning this interface</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// corresponds to a constraint literal such as ~T or A|B without explicit</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// interface embedding. MarkImplicit should be called before any concurrent use</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// of implicit interfaces.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func (t *Interface) MarkImplicit() {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	t.implicit = true
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// NumExplicitMethods returns the number of explicitly declared methods of interface t.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func (t *Interface) NumExplicitMethods() int { return len(t.methods) }
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// ExplicitMethod returns the i&#39;th explicitly declared method of interface t for 0 &lt;= i &lt; t.NumExplicitMethods().</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// The methods are ordered by their unique [Id].</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (t *Interface) ExplicitMethod(i int) *Func { return t.methods[i] }
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// NumEmbeddeds returns the number of embedded types in interface t.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func (t *Interface) NumEmbeddeds() int { return len(t.embeddeds) }
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Embedded returns the i&#39;th embedded defined (*[Named]) type of interface t for 0 &lt;= i &lt; t.NumEmbeddeds().</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// The result is nil if the i&#39;th embedded type is not a defined type.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [Interface.EmbeddedType] which is not restricted to defined (*[Named]) types.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (t *Interface) Embedded(i int) *Named { return asNamed(t.embeddeds[i]) }
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// EmbeddedType returns the i&#39;th embedded type of interface t for 0 &lt;= i &lt; t.NumEmbeddeds().</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (t *Interface) EmbeddedType(i int) Type { return t.embeddeds[i] }
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// NumMethods returns the total number of methods of interface t.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (t *Interface) NumMethods() int { return t.typeSet().NumMethods() }
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Method returns the i&#39;th method of interface t for 0 &lt;= i &lt; t.NumMethods().</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// The methods are ordered by their unique Id.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func (t *Interface) Method(i int) *Func { return t.typeSet().Method(i) }
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// Empty reports whether t is the empty interface.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="selection">func (t *Interface) Empty() bool</span> { return t.typeSet().IsAll() }
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// IsComparable reports whether each type in interface t&#39;s type set is comparable.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (t *Interface) IsComparable() bool { return t.typeSet().IsComparable(nil) }
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// IsMethodSet reports whether the interface t is fully described by its method</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// set.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func (t *Interface) IsMethodSet() bool { return t.typeSet().IsMethodSet() }
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// IsImplicit reports whether the interface t is a wrapper for a type set literal.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func (t *Interface) IsImplicit() bool { return t.implicit }
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Complete computes the interface&#39;s type set. It must be called by users of</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// [NewInterfaceType] and [NewInterface] after the interface&#39;s embedded types are</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// fully defined and before using the interface type in any way other than to</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// form other types. The interface must not contain duplicate methods or a</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// panic occurs. Complete returns the receiver.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Interface types that have been completed are safe for concurrent use.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (t *Interface) Complete() *Interface {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if !t.complete {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		t.complete = true
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	t.typeSet() <span class="comment">// checks if t.tset is already set</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	return t
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (t *Interface) Underlying() Type { return t }
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func (t *Interface) String() string   { return TypeString(t, nil) }
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// Implementation</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func (t *Interface) cleanup() {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	t.typeSet() <span class="comment">// any interface that escapes type checking must be safe for concurrent use</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	t.check = nil
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	t.embedPos = nil
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (check *Checker) interfaceType(ityp *Interface, iface *ast.InterfaceType, def *TypeName) {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	addEmbedded := func(pos token.Pos, typ Type) {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		ityp.embeddeds = append(ityp.embeddeds, typ)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		if ityp.embedPos == nil {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			ityp.embedPos = new([]token.Pos)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		*ityp.embedPos = append(*ityp.embedPos, pos)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	for _, f := range iface.Methods.List {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		if len(f.Names) == 0 {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			addEmbedded(f.Type.Pos(), parseUnion(check, f.Type))
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			continue
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// f.Name != nil</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		<span class="comment">// We have a method with name f.Names[0].</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		name := f.Names[0]
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		if name.Name == &#34;_&#34; {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			check.error(name, BlankIfaceMethod, &#34;methods must have a unique non-blank name&#34;)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			continue <span class="comment">// ignore</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		typ := check.typ(f.Type)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		sig, _ := typ.(*Signature)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		if sig == nil {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			if isValid(typ) {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>				check.errorf(f.Type, InvalidSyntaxTree, &#34;%s is not a method signature&#34;, typ)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			continue <span class="comment">// ignore</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		<span class="comment">// The go/parser doesn&#39;t accept method type parameters but an ast.FuncType may have them.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if sig.tparams != nil {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			var at positioner = f.Type
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			if ftyp, _ := f.Type.(*ast.FuncType); ftyp != nil &amp;&amp; ftyp.TypeParams != nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>				at = ftyp.TypeParams
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			check.error(at, InvalidSyntaxTree, &#34;methods cannot have type parameters&#34;)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		<span class="comment">// use named receiver type if available (for better error messages)</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		var recvTyp Type = ityp
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		if def != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			if named := asNamed(def.typ); named != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				recvTyp = named
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		sig.recv = NewVar(name.Pos(), check.pkg, &#34;&#34;, recvTyp)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		m := NewFunc(name.Pos(), check.pkg, name.Name, sig)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		check.recordDef(name, m)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		ityp.methods = append(ityp.methods, m)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// All methods and embedded elements for this interface are collected;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// i.e., this interface may be used in a type set computation.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	ityp.complete = true
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if len(ityp.methods) == 0 &amp;&amp; len(ityp.embeddeds) == 0 {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		<span class="comment">// empty interface</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		ityp.tset = &amp;topTypeSet
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		return
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// sort for API stability</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	sortMethods(ityp.methods)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// (don&#39;t sort embeddeds: they must correspond to *embedPos entries)</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">// Compute type set as soon as possible to report any errors.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// Subsequent uses of type sets will use this computed type</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// set and won&#39;t need to pass in a *Checker.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	check.later(func() {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		computeInterfaceTypeSet(check, iface.Pos(), ityp)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}).describef(iface, &#34;compute type set for %s&#34;, ityp)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
</pre><p><a href="interface.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
