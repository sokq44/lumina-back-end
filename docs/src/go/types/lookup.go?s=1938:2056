<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/lookup.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./lookup.go?s=1938:2056#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">lookup.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements various field and method lookup functions.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Internal use of LookupFieldOrMethod: If the obj result is a method</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// associated with a concrete (non-interface) type, the method&#39;s signature</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// may not be fully set up. Call Checker.objDecl(obj, nil) before accessing</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// the method&#39;s type.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// LookupFieldOrMethod looks up a field or method with given package and name</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// in T and returns the corresponding *Var or *Func, an index sequence, and a</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// bool indicating if there were any pointer indirections on the path to the</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// field or method. If addressable is set, T is the type of an addressable</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// variable (only matters for method lookups). T must not be nil.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// The last index entry is the field or method index in the (possibly embedded)</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// type where the entry was found, either:</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//  1. the list of declared methods of a named type; or</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//  2. the list of all methods (method set) of an interface type; or</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//  3. the list of fields of a struct type.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// The earlier index entries are the indices of the embedded struct fields</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// traversed to get to the found entry, starting at depth 0.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// If no entry is found, a nil object is returned. In this case, the returned</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// index and indirect values have the following meaning:</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//   - If index != nil, the index sequence points to an ambiguous entry</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//     (the same name appeared more than once at the same embedding level).</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//   - If indirect is set, a method with a pointer receiver type was found</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//     but there was no pointer on the path from the actual receiver type to</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//     the method&#39;s formal receiver base type, nor was the receiver addressable.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="selection">func LookupFieldOrMethod(T Type, addressable bool, pkg *Package, name string) (obj Object, index []int, indirect bool)</span> {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	if T == nil {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		panic(&#34;LookupFieldOrMethod on nil type&#34;)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// Methods cannot be associated to a named pointer type.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// (spec: &#34;The type denoted by T is called the receiver base type;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// it must not be a pointer or interface type and it must be declared</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// in the same package as the method.&#34;).</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// Thus, if we have a named pointer type, proceed with the underlying</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// pointer type but discard the result if it is a method since we would</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// not have found it for T (see also go.dev/issue/8590).</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if t := asNamed(T); t != nil {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		if p, _ := t.Underlying().(*Pointer); p != nil {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			obj, index, indirect = lookupFieldOrMethodImpl(p, false, pkg, name, false)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			if _, ok := obj.(*Func); ok {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>				return nil, nil, false
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			return
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	obj, index, indirect = lookupFieldOrMethodImpl(T, addressable, pkg, name, false)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// If we didn&#39;t find anything and if we have a type parameter with a core type,</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// see if there is a matching field (but not a method, those need to be declared</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// explicitly in the constraint). If the constraint is a named pointer type (see</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// above), we are ok here because only fields are accepted as results.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	const enableTParamFieldLookup = false <span class="comment">// see go.dev/issue/51576</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	if enableTParamFieldLookup &amp;&amp; obj == nil &amp;&amp; isTypeParam(T) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		if t := coreType(T); t != nil {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>			obj, index, indirect = lookupFieldOrMethodImpl(t, addressable, pkg, name, false)
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			if _, ok := obj.(*Var); !ok {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>				obj, index, indirect = nil, nil, false <span class="comment">// accept fields (variables) only</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	return
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// lookupFieldOrMethodImpl is the implementation of LookupFieldOrMethod.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// Notably, in contrast to LookupFieldOrMethod, it won&#39;t find struct fields</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// in base types of defined (*Named) pointer types T. For instance, given</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// the declaration:</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	type T *struct{f int}</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// lookupFieldOrMethodImpl won&#39;t find the field f in the defined (*Named) type T</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// (methods on T are not permitted in the first place).</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// Thus, lookupFieldOrMethodImpl should only be called by LookupFieldOrMethod</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// and missingMethod (the latter doesn&#39;t care about struct fields).</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// If foldCase is true, method names are considered equal if they are equal</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// with case folding, irrespective of which package they are in.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// The resulting object may not be fully type-checked.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func lookupFieldOrMethodImpl(T Type, addressable bool, pkg *Package, name string, foldCase bool) (obj Object, index []int, indirect bool) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// WARNING: The code in this function is extremely subtle - do not modify casually!</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if name == &#34;_&#34; {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return <span class="comment">// blank fields/methods are never found</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// Importantly, we must not call under before the call to deref below (nor</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// does deref call under), as doing so could incorrectly result in finding</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// methods of the pointer base type when T is a (*Named) pointer type.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	typ, isPtr := deref(T)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// *typ where typ is an interface (incl. a type parameter) has no methods.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if isPtr {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		if _, ok := under(typ).(*Interface); ok {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			return
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// Start with typ as single entry at shallowest depth.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	current := []embeddedType{{typ, nil, isPtr, false}}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// seen tracks named types that we have seen already, allocated lazily.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Used to avoid endless searches in case of recursive types.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// We must use a lookup on identity rather than a simple map[*Named]bool as</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// instantiated types may be identical but not equal.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	var seen instanceLookup
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// search current depth</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	for len(current) &gt; 0 {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		var next []embeddedType <span class="comment">// embedded types found at current depth</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">// look for (pkg, name) in all types at current depth</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		for _, e := range current {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			typ := e.typ
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			<span class="comment">// If we have a named type, we may have associated methods.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			<span class="comment">// Look for those first.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			if named := asNamed(typ); named != nil {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>				if alt := seen.lookup(named); alt != nil {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>					<span class="comment">// We have seen this type before, at a more shallow depth</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					<span class="comment">// (note that multiples of this type at the current depth</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					<span class="comment">// were consolidated before). The type at that depth shadows</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					<span class="comment">// this same type at the current depth, so we can ignore</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>					<span class="comment">// this one.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>					continue
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>				}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>				seen.add(named)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				<span class="comment">// look for a matching attached method</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>				if i, m := named.lookupMethod(pkg, name, foldCase); m != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>					<span class="comment">// potential match</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>					<span class="comment">// caution: method may not have a proper signature yet</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>					index = concat(e.index, i)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>					if obj != nil || e.multiples {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>						return nil, index, false <span class="comment">// collision</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>					}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>					obj = m
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>					indirect = e.indirect
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>					continue <span class="comment">// we can&#39;t have a matching field or interface method</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			switch t := under(typ).(type) {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			case *Struct:
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>				<span class="comment">// look for a matching field and collect embedded types</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>				for i, f := range t.fields {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>					if f.sameId(pkg, name) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>						assert(f.typ != nil)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>						index = concat(e.index, i)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>						if obj != nil || e.multiples {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>							return nil, index, false <span class="comment">// collision</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>						}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>						obj = f
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>						indirect = e.indirect
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>						continue <span class="comment">// we can&#39;t have a matching interface method</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>					}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>					<span class="comment">// Collect embedded struct fields for searching the next</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>					<span class="comment">// lower depth, but only if we have not seen a match yet</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>					<span class="comment">// (if we have a match it is either the desired field or</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>					<span class="comment">// we have a name collision on the same depth; in either</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>					<span class="comment">// case we don&#39;t need to look further).</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>					<span class="comment">// Embedded fields are always of the form T or *T where</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>					<span class="comment">// T is a type name. If e.typ appeared multiple times at</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>					<span class="comment">// this depth, f.typ appears multiple times at the next</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>					<span class="comment">// depth.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>					if obj == nil &amp;&amp; f.embedded {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>						typ, isPtr := deref(f.typ)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>						<span class="comment">// TODO(gri) optimization: ignore types that can&#39;t</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>						<span class="comment">// have fields or methods (only Named, Struct, and</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>						<span class="comment">// Interface types need to be considered).</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>						next = append(next, embeddedType{typ, concat(e.index, i), e.indirect || isPtr, e.multiples})
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>					}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>				}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			case *Interface:
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>				<span class="comment">// look for a matching method (interface may be a type parameter)</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				if i, m := t.typeSet().LookupMethod(pkg, name, foldCase); m != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>					assert(m.typ != nil)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>					index = concat(e.index, i)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>					if obj != nil || e.multiples {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>						return nil, index, false <span class="comment">// collision</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>					}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>					obj = m
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>					indirect = e.indirect
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>				}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if obj != nil {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			<span class="comment">// found a potential match</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			<span class="comment">// spec: &#34;A method call x.m() is valid if the method set of (the type of) x</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			<span class="comment">//        contains m and the argument list can be assigned to the parameter</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			<span class="comment">//        list of m. If x is addressable and &amp;x&#39;s method set contains m, x.m()</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			<span class="comment">//        is shorthand for (&amp;x).m()&#34;.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			if f, _ := obj.(*Func); f != nil {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				<span class="comment">// determine if method has a pointer receiver</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				if f.hasPtrRecv() &amp;&amp; !indirect &amp;&amp; !addressable {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>					return nil, nil, true <span class="comment">// pointer/addressable receiver required</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		current = consolidateMultiples(next)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	return nil, nil, false <span class="comment">// not found</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// embeddedType represents an embedded type</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>type embeddedType struct {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	typ       Type
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	index     []int <span class="comment">// embedded field indices, starting with index at depth 0</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	indirect  bool  <span class="comment">// if set, there was a pointer indirection on the path to this field</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	multiples bool  <span class="comment">// if set, typ appears multiple times at this depth</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// consolidateMultiples collects multiple list entries with the same type</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// into a single entry marked as containing multiples. The result is the</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// consolidated list.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func consolidateMultiples(list []embeddedType) []embeddedType {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if len(list) &lt;= 1 {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return list <span class="comment">// at most one entry - nothing to do</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	n := 0                     <span class="comment">// number of entries w/ unique type</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	prev := make(map[Type]int) <span class="comment">// index at which type was previously seen</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	for _, e := range list {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		if i, found := lookupType(prev, e.typ); found {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			list[i].multiples = true
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			<span class="comment">// ignore this entry</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		} else {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			prev[e.typ] = n
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			list[n] = e
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			n++
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	return list[:n]
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>func lookupType(m map[Type]int, typ Type) (int, bool) {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// fast path: maybe the types are equal</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if i, found := m[typ]; found {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return i, true
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	for t, i := range m {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if Identical(t, typ) {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			return i, true
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return 0, false
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>type instanceLookup struct {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">// buf is used to avoid allocating the map m in the common case of a small</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// number of instances.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	buf [3]*Named
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	m   map[*Named][]*Named
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>func (l *instanceLookup) lookup(inst *Named) *Named {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	for _, t := range l.buf {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if t != nil &amp;&amp; Identical(inst, t) {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			return t
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	for _, t := range l.m[inst.Origin()] {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		if Identical(inst, t) {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			return t
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	return nil
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (l *instanceLookup) add(inst *Named) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	for i, t := range l.buf {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		if t == nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			l.buf[i] = inst
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			return
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if l.m == nil {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		l.m = make(map[*Named][]*Named)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	insts := l.m[inst.Origin()]
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	l.m[inst.Origin()] = append(insts, inst)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// MissingMethod returns (nil, false) if V implements T, otherwise it</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// returns a missing method required by T and whether it is missing or</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// just has the wrong type: either a pointer receiver or wrong signature.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// For non-interface types V, or if static is set, V implements T if all</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// methods of T are present in V. Otherwise (V is an interface and static</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// is not set), MissingMethod only checks that methods of T which are also</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// present in V have matching types (e.g., for a type assertion x.(T) where</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// x is of interface type V).</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>func MissingMethod(V Type, T *Interface, static bool) (method *Func, wrongType bool) {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	return (*Checker)(nil).missingMethod(V, T, static, Identical, nil)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// missingMethod is like MissingMethod but accepts a *Checker as receiver,</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// a comparator equivalent for type comparison, and a *string for error causes.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// The receiver may be nil if missingMethod is invoked through an exported</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// API call (such as MissingMethod), i.e., when all methods have been type-</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// checked.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// The underlying type of T must be an interface; T (rather than its under-</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// lying type) is used for better error messages (reported through *cause).</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// The comparator is used to compare signatures.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// If a method is missing and cause is not nil, *cause describes the error.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>func (check *Checker) missingMethod(V, T Type, static bool, equivalent func(x, y Type) bool, cause *string) (method *Func, wrongType bool) {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	methods := under(T).(*Interface).typeSet().methods <span class="comment">// T must be an interface</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	if len(methods) == 0 {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		return nil, false
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	const (
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		ok = iota
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		notFound
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		wrongName
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		unexported
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		wrongSig
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		ambigSel
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		ptrRecv
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		field
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	state := ok
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	var m *Func <span class="comment">// method on T we&#39;re trying to implement</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	var f *Func <span class="comment">// method on V, if found (state is one of ok, wrongName, wrongSig)</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	if u, _ := under(V).(*Interface); u != nil {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		tset := u.typeSet()
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		for _, m = range methods {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			_, f = tset.LookupMethod(m.pkg, m.name, false)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			if f == nil {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				if !static {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>					continue
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>				}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				state = notFound
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				break
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			if !equivalent(f.typ, m.typ) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				state = wrongSig
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				break
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	} else {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		for _, m = range methods {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			obj, index, indirect := lookupFieldOrMethodImpl(V, false, m.pkg, m.name, false)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			<span class="comment">// check if m is ambiguous, on *V, or on V with case-folding</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			if obj == nil {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				switch {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				case index != nil:
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>					state = ambigSel
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>				case indirect:
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>					state = ptrRecv
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>				default:
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>					state = notFound
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>					obj, _, _ = lookupFieldOrMethodImpl(V, false, m.pkg, m.name, true <span class="comment">/* fold case */</span>)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>					f, _ = obj.(*Func)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>					if f != nil {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>						state = wrongName
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>						if f.name == m.name {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>							<span class="comment">// If the names are equal, f must be unexported</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>							<span class="comment">// (otherwise the package wouldn&#39;t matter).</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>							state = unexported
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>						}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>					}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>				}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				break
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			<span class="comment">// we must have a method (not a struct field)</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			f, _ = obj.(*Func)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			if f == nil {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				state = field
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				break
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			<span class="comment">// methods may not have a fully set up signature yet</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			if check != nil {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				check.objDecl(f, nil)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			if !equivalent(f.typ, m.typ) {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				state = wrongSig
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				break
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	if state == ok {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		return nil, false
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if cause != nil {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		if f != nil {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			<span class="comment">// This method may be formatted in funcString below, so must have a fully</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			<span class="comment">// set up signature.</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			if check != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				check.objDecl(f, nil)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		switch state {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		case notFound:
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			switch {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			case isInterfacePtr(V):
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>				*cause = &#34;(&#34; + check.interfacePtrError(V) + &#34;)&#34;
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			case isInterfacePtr(T):
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>				*cause = &#34;(&#34; + check.interfacePtrError(T) + &#34;)&#34;
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			default:
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				*cause = check.sprintf(&#34;(missing method %s)&#34;, m.Name())
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		case wrongName:
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			fs, ms := check.funcString(f, false), check.funcString(m, false)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(missing method %s)\n\t\thave %s\n\t\twant %s&#34;, m.Name(), fs, ms)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		case unexported:
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(unexported method %s)&#34;, m.Name())
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		case wrongSig:
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			fs, ms := check.funcString(f, false), check.funcString(m, false)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			if fs == ms {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				<span class="comment">// Don&#39;t report &#34;want Foo, have Foo&#34;.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				<span class="comment">// Add package information to disambiguate (go.dev/issue/54258).</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				fs, ms = check.funcString(f, true), check.funcString(m, true)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			if fs == ms {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>				<span class="comment">// We still have &#34;want Foo, have Foo&#34;.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>				<span class="comment">// This is most likely due to different type parameters with</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>				<span class="comment">// the same name appearing in the instantiated signatures</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>				<span class="comment">// (go.dev/issue/61685).</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				<span class="comment">// Rather than reporting this misleading error cause, for now</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>				<span class="comment">// just point out that the method signature is incorrect.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>				<span class="comment">// TODO(gri) should find a good way to report the root cause</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>				*cause = check.sprintf(&#34;(wrong type for method %s)&#34;, m.Name())
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>				break
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(wrong type for method %s)\n\t\thave %s\n\t\twant %s&#34;, m.Name(), fs, ms)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		case ambigSel:
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(ambiguous selector %s.%s)&#34;, V, m.Name())
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		case ptrRecv:
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(method %s has pointer receiver)&#34;, m.Name())
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		case field:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			*cause = check.sprintf(&#34;(%s.%s is a field, not a method)&#34;, V, m.Name())
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		default:
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			unreachable()
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	return m, state == wrongSig || state == ptrRecv
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func isInterfacePtr(T Type) bool {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	p, _ := under(T).(*Pointer)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	return p != nil &amp;&amp; IsInterface(p.base)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// check may be nil.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>func (check *Checker) interfacePtrError(T Type) string {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	assert(isInterfacePtr(T))
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if p, _ := under(T).(*Pointer); isTypeParam(p.base) {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return check.sprintf(&#34;type %s is pointer to type parameter, not type parameter&#34;, T)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	return check.sprintf(&#34;type %s is pointer to interface, not interface&#34;, T)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// funcString returns a string of the form name + signature for f.</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// check may be nil.</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (check *Checker) funcString(f *Func, pkgInfo bool) string {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	buf := bytes.NewBufferString(f.name)
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	var qf Qualifier
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	if check != nil &amp;&amp; !pkgInfo {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		qf = check.qualifier
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	w := newTypeWriter(buf, qf)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	w.pkgInfo = pkgInfo
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	w.paramNames = false
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	w.signature(f.typ.(*Signature))
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	return buf.String()
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// assertableTo reports whether a value of type V can be asserted to have type T.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// The receiver may be nil if assertableTo is invoked through an exported API call</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// (such as AssertableTo), i.e., when all methods have been type-checked.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">// The underlying type of V must be an interface.</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// If the result is false and cause is not nil, *cause describes the error.</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">// TODO(gri) replace calls to this function with calls to newAssertableTo.</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>func (check *Checker) assertableTo(V, T Type, cause *string) bool {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	<span class="comment">// no static check is required if T is an interface</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	<span class="comment">// spec: &#34;If T is an interface type, x.(T) asserts that the</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">//        dynamic type of x implements the interface T.&#34;</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	if IsInterface(T) {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		return true
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) fix this for generalized interfaces</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	m, _ := check.missingMethod(T, V, false, Identical, cause)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	return m == nil
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span><span class="comment">// newAssertableTo reports whether a value of type V can be asserted to have type T.</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span><span class="comment">// It also implements behavior for interfaces that currently are only permitted</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// in constraint position (we have not yet defined that behavior in the spec).</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span><span class="comment">// The underlying type of V must be an interface.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// If the result is false and cause is not nil, *cause is set to the error cause.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>func (check *Checker) newAssertableTo(pos token.Pos, V, T Type, cause *string) bool {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	<span class="comment">// no static check is required if T is an interface</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	<span class="comment">// spec: &#34;If T is an interface type, x.(T) asserts that the</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	<span class="comment">//        dynamic type of x implements the interface T.&#34;</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	if IsInterface(T) {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		return true
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	return check.implements(pos, T, V, false, cause)
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">// deref dereferences typ if it is a *Pointer (but not a *Named type</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">// with an underlying pointer type!) and returns its base and true.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns (typ, false).</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>func deref(typ Type) (Type, bool) {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	if p, _ := Unalias(typ).(*Pointer); p != nil {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		<span class="comment">// p.base should never be nil, but be conservative</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		if p.base == nil {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			if debug {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>				panic(&#34;pointer with nil base type (possibly due to an invalid cyclic declaration)&#34;)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			return Typ[Invalid], true
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		return p.base, true
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	return typ, false
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// derefStructPtr dereferences typ if it is a (named or unnamed) pointer to a</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// (named or unnamed) struct and returns its base. Otherwise it returns typ.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>func derefStructPtr(typ Type) Type {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	if p, _ := under(typ).(*Pointer); p != nil {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		if _, ok := under(p.base).(*Struct); ok {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			return p.base
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	return typ
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// concat returns the result of concatenating list and i.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// The result does not share its underlying array with list.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func concat(list []int, i int) []int {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	var t []int
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	t = append(t, list...)
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	return append(t, i)
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// fieldIndex returns the index for the field with matching package and name, or a value &lt; 0.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>func fieldIndex(fields []*Var, pkg *Package, name string) int {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	if name != &#34;_&#34; {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		for i, f := range fields {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			if f.sameId(pkg, name) {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>				return i
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	return -1
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// lookupMethod returns the index of and method with matching package and name, or (-1, nil).</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span><span class="comment">// If foldCase is true, method names are considered equal if they are equal with case folding</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">// and their packages are ignored (e.g., pkg1.m, pkg1.M, pkg2.m, and pkg2.M are all equal).</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func lookupMethod(methods []*Func, pkg *Package, name string, foldCase bool) (int, *Func) {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	if name != &#34;_&#34; {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		for i, m := range methods {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			if m.sameId(pkg, name) || foldCase &amp;&amp; strings.EqualFold(m.name, name) {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>				return i, m
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	return -1, nil
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
</pre><p><a href="lookup.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
