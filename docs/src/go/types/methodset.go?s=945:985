<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/methodset.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./methodset.go?s=945:985#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">methodset.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements method sets.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A MethodSet is an ordered set of concrete or abstract (interface) methods;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// a method is a [MethodVal] selection, and they are ordered by ascending m.Obj().Id().</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// The zero value for a MethodSet is a ready-to-use empty method set.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>type MethodSet struct {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	list []*Selection
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>}
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>func (s *MethodSet) String() string {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	if s.Len() == 0 {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>		return &#34;MethodSet {}&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	fmt.Fprintln(&amp;buf, &#34;MethodSet {&#34;)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	for _, f := range s.list {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34;\t%s\n&#34;, f)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	fmt.Fprintln(&amp;buf, &#34;}&#34;)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return buf.String()
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Len returns the number of methods in s.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func (s *MethodSet) Len() int { return len(s.list) }
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// At returns the i&#39;th method in s for 0 &lt;= i &lt; s.Len().</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="selection">func (s *MethodSet) At(i int) *Selection</span> { return s.list[i] }
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// Lookup returns the method with matching package and name, or nil if not found.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (s *MethodSet) Lookup(pkg *Package, name string) *Selection {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if s.Len() == 0 {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return nil
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	key := Id(pkg, name)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	i := sort.Search(len(s.list), func(i int) bool {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		m := s.list[i]
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return m.obj.Id() &gt;= key
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	})
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	if i &lt; len(s.list) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		m := s.list[i]
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		if m.obj.Id() == key {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>			return m
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	return nil
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// Shared empty method set.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>var emptyMethodSet MethodSet
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Note: NewMethodSet is intended for external use only as it</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//       requires interfaces to be complete. It may be used</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//       internally if LookupFieldOrMethod completed the same</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//       interfaces beforehand.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// NewMethodSet returns the method set for the given type T.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// It always returns a non-nil method set, even if it is empty.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func NewMethodSet(T Type) *MethodSet {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// WARNING: The code in this function is extremely subtle - do not modify casually!</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">//          This function and lookupFieldOrMethod should be kept in sync.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// TODO(rfindley) confirm that this code is in sync with lookupFieldOrMethod</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">//                with respect to type params.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// Methods cannot be associated with a named pointer type.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// (spec: &#34;The type denoted by T is called the receiver base type;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// it must not be a pointer or interface type and it must be declared</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// in the same package as the method.&#34;).</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if t := asNamed(T); t != nil &amp;&amp; isPointer(t) {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		return &amp;emptyMethodSet
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// method set up to the current depth, allocated lazily</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	var base methodSet
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	typ, isPtr := deref(T)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// *typ where typ is an interface has no methods.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	if isPtr &amp;&amp; IsInterface(typ) {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		return &amp;emptyMethodSet
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// Start with typ as single entry at shallowest depth.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	current := []embeddedType{{typ, nil, isPtr, false}}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// seen tracks named types that we have seen already, allocated lazily.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// Used to avoid endless searches in case of recursive types.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// We must use a lookup on identity rather than a simple map[*Named]bool as</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// instantiated types may be identical but not equal.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	var seen instanceLookup
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// collect methods at current depth</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	for len(current) &gt; 0 {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		var next []embeddedType <span class="comment">// embedded types found at current depth</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		<span class="comment">// field and method sets at current depth, indexed by names (Id&#39;s), and allocated lazily</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		var fset map[string]bool <span class="comment">// we only care about the field names</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		var mset methodSet
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		for _, e := range current {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			typ := e.typ
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			<span class="comment">// If we have a named type, we may have associated methods.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			<span class="comment">// Look for those first.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			if named := asNamed(typ); named != nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				if alt := seen.lookup(named); alt != nil {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>					<span class="comment">// We have seen this type before, at a more shallow depth</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>					<span class="comment">// (note that multiples of this type at the current depth</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>					<span class="comment">// were consolidated before). The type at that depth shadows</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>					<span class="comment">// this same type at the current depth, so we can ignore</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>					<span class="comment">// this one.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>					continue
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>				}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				seen.add(named)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				for i := 0; i &lt; named.NumMethods(); i++ {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>					mset = mset.addOne(named.Method(i), concat(e.index, i), e.indirect, e.multiples)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			switch t := under(typ).(type) {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			case *Struct:
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>				for i, f := range t.fields {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>					if fset == nil {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>						fset = make(map[string]bool)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>					}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>					fset[f.Id()] = true
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>					<span class="comment">// Embedded fields are always of the form T or *T where</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>					<span class="comment">// T is a type name. If typ appeared multiple times at</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					<span class="comment">// this depth, f.Type appears multiple times at the next</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					<span class="comment">// depth.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					if f.embedded {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>						typ, isPtr := deref(f.typ)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>						<span class="comment">// TODO(gri) optimization: ignore types that can&#39;t</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>						<span class="comment">// have fields or methods (only Named, Struct, and</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>						<span class="comment">// Interface types need to be considered).</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>						next = append(next, embeddedType{typ, concat(e.index, i), e.indirect || isPtr, e.multiples})
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>					}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>				}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			case *Interface:
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>				mset = mset.add(t.typeSet().methods, e.index, true, e.multiples)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		<span class="comment">// Add methods and collisions at this depth to base if no entries with matching</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		<span class="comment">// names exist already.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		for k, m := range mset {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			if _, found := base[k]; !found {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				<span class="comment">// Fields collide with methods of the same name at this depth.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>				if fset[k] {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>					m = nil <span class="comment">// collision</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>				}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>				if base == nil {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>					base = make(methodSet)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>				}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>				base[k] = m
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// Add all (remaining) fields at this depth as collisions (since they will</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		<span class="comment">// hide any method further down) if no entries with matching names exist already.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		for k := range fset {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			if _, found := base[k]; !found {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>				if base == nil {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>					base = make(methodSet)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>				base[k] = nil <span class="comment">// collision</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		current = consolidateMultiples(next)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if len(base) == 0 {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		return &amp;emptyMethodSet
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// collect methods</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	var list []*Selection
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	for _, m := range base {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		if m != nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			m.recv = T
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			list = append(list, m)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// sort by unique name</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	sort.Slice(list, func(i, j int) bool {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return list[i].obj.Id() &lt; list[j].obj.Id()
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	})
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return &amp;MethodSet{list}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// A methodSet is a set of methods and name collisions.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// A collision indicates that multiple methods with the</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// same unique id, or a field with that id appeared.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>type methodSet map[string]*Selection <span class="comment">// a nil entry indicates a name collision</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// Add adds all functions in list to the method set s.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// If multiples is set, every function in list appears multiple times</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// and is treated as a collision.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (s methodSet) add(list []*Func, index []int, indirect bool, multiples bool) methodSet {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if len(list) == 0 {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return s
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	for i, f := range list {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		s = s.addOne(f, concat(index, i), indirect, multiples)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return s
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>func (s methodSet) addOne(f *Func, index []int, indirect bool, multiples bool) methodSet {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	if s == nil {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		s = make(methodSet)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	key := f.Id()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// if f is not in the set, add it</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	if !multiples {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) A found method may not be added because it&#39;s not in the method set</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		<span class="comment">// (!indirect &amp;&amp; f.hasPtrRecv()). A 2nd method on the same level may be in the method</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		<span class="comment">// set and may not collide with the first one, thus leading to a false positive.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// Is that possible? Investigate.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		if _, found := s[key]; !found &amp;&amp; (indirect || !f.hasPtrRecv()) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			s[key] = &amp;Selection{MethodVal, nil, f, index, indirect}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			return s
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	s[key] = nil <span class="comment">// collision</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return s
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
</pre><p><a href="methodset.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
