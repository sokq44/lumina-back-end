<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/named.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./named.go?s=16398:16444#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">named.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Type-checking Named types is subtle, because they may be recursively</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// defined, and because their full details may be spread across multiple</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// declarations (via methods). For this reason they are type-checked lazily,</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// to avoid information being accessed before it is complete.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Conceptually, it is helpful to think of named types as having two distinct</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// sets of information:</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//  - &#34;LHS&#34; information, defining their identity: Obj() and TypeArgs()</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//  - &#34;RHS&#34; information, defining their details: TypeParams(), Underlying(),</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//    and methods.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// In this taxonomy, LHS information is available immediately, but RHS</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// information is lazy. Specifically, a named type N may be constructed in any</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// of the following ways:</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//  1. type-checked from the source</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//  2. loaded eagerly from export data</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//  3. loaded lazily from export data (when using unified IR)</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//  4. instantiated from a generic type</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// In cases 1, 3, and 4, it is possible that the underlying type or methods of</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// N may not be immediately available.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//  - During type-checking, we allocate N before type-checking its underlying</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//    type or methods, so that we may resolve recursive references.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//  - When loading from export data, we may load its methods and underlying</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//    type lazily using a provided load function.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//  - After instantiating, we lazily expand the underlying type and methods</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//    (note that instances may be created while still in the process of</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//    type-checking the original type declaration).</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// In cases 3 and 4 this lazy construction may also occur concurrently, due to</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// concurrent use of the type checker API (after type checking or importing has</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// finished). It is critical that we keep track of state, so that Named types</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// are constructed exactly once and so that we do not access their details too</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// soon.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// We achieve this by tracking state with an atomic state variable, and</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// guarding potentially concurrent calculations with a mutex. At any point in</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// time this state variable determines which data on N may be accessed. As</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// state monotonically progresses, any data available at state M may be</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// accessed without acquiring the mutex at state N, provided N &gt;= M.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// GLOSSARY: Here are a few terms used in this file to describe Named types:</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//  - We say that a Named type is &#34;instantiated&#34; if it has been constructed by</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//    instantiating a generic named type with type arguments.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//  - We say that a Named type is &#34;declared&#34; if it corresponds to a type</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//    declaration in the source. Instantiated named types correspond to a type</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//    instantiation in the source, not a declaration. But their Origin type is</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//    a declared type.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//  - We say that a Named type is &#34;resolved&#34; if its RHS information has been</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//    loaded or fully type-checked. For Named types constructed from export</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//    data, this may involve invoking a loader function to extract information</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//    from export data. For instantiated named types this involves reading</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//    information from their origin.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//  - We say that a Named type is &#34;expanded&#34; if it is an instantiated type and</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//    type parameters in its underlying type and methods have been substituted</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//    with the type arguments from the instantiation. A type may be partially</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//    expanded if some but not all of these details have been substituted.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//    Similarly, we refer to these individual details (underlying type or</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//    method) as being &#34;expanded&#34;.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//  - When all information is known for a named type, we say it is &#34;complete&#34;.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Some invariants to keep in mind: each declared Named type has a single</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// corresponding object, and that object&#39;s type is the (possibly generic) Named</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// type. Declared Named types are identical if and only if their pointers are</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// identical. On the other hand, multiple instantiated Named types may be</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// identical even though their pointers are not identical. One has to use</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// Identical to compare them. For instantiated named types, their obj is a</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// synthetic placeholder that records their position of the corresponding</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// instantiation in the source (if they were constructed during type checking).</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// To prevent infinite expansion of named instances that are created outside of</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// type-checking, instances share a Context with other instances created during</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// their expansion. Via the pidgeonhole principle, this guarantees that in the</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// presence of a cycle of named types, expansion will eventually find an</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// existing instance in the Context and short-circuit the expansion.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// Once an instance is complete, we can nil out this shared Context to unpin</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// memory, though this Context may still be held by other incomplete instances</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// in its &#34;lineage&#34;.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// A Named represents a named (defined) type.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>type Named struct {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	check *Checker  <span class="comment">// non-nil during type-checking; nil otherwise</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	obj   *TypeName <span class="comment">// corresponding declared object for declared types; see above for instantiated types</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// fromRHS holds the type (on RHS of declaration) this *Named type is derived</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// from (for cycle reporting). Only used by validType, and therefore does not</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// require synchronization.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	fromRHS Type
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// information for instantiated types; nil otherwise</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	inst *instance
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	mu         sync.Mutex     <span class="comment">// guards all fields below</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	state_     uint32         <span class="comment">// the current state of this type; must only be accessed atomically</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	underlying Type           <span class="comment">// possibly a *Named during setup; never a *Named once set up completely</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	tparams    *TypeParamList <span class="comment">// type parameters, or nil</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// methods declared for this type (not the method set of this type)</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Signatures are type-checked lazily.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// For non-instantiated types, this is a fully populated list of methods. For</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// instantiated types, methods are individually expanded when they are first</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// accessed.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	methods []*Func
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// loader may be provided to lazily load type parameters, underlying type, and methods.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	loader func(*Named) (tparams []*TypeParam, underlying Type, methods []*Func)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// instance holds information that is only necessary for instantiated named</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// types.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>type instance struct {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	orig            *Named    <span class="comment">// original, uninstantiated type</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	targs           *TypeList <span class="comment">// type arguments</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	expandedMethods int       <span class="comment">// number of expanded methods; expandedMethods &lt;= len(orig.methods)</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	ctxt            *Context  <span class="comment">// local Context; set to nil after full expansion</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// namedState represents the possible states that a named type may assume.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>type namedState uint32
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>const (
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	unresolved namedState = iota <span class="comment">// tparams, underlying type and methods might be unavailable</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	resolved                     <span class="comment">// resolve has run; methods might be incomplete (for instances)</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	complete                     <span class="comment">// all data is known</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// NewNamed returns a new named type for the given type name, underlying type, and associated methods.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// If the given type name obj doesn&#39;t have a type yet, its type is set to the returned named type.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// The underlying type must not be a *Named.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func NewNamed(obj *TypeName, underlying Type, methods []*Func) *Named {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if asNamed(underlying) != nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		panic(&#34;underlying type must not be *Named&#34;)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return (*Checker)(nil).newNamed(obj, underlying, methods)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// resolve resolves the type parameters, methods, and underlying type of n.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// This information may be loaded from a provided loader function, or computed</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// from an origin type (in the case of instances).</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// After resolution, the type parameters, methods, and underlying type of n are</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// accessible; but if n is an instantiated type, its methods may still be</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// unexpanded.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (n *Named) resolve() *Named {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if n.state() &gt;= resolved { <span class="comment">// avoid locking below</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return n
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// TODO(rfindley): if n.check is non-nil we can avoid locking here, since</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// type-checking is not concurrent. Evaluate if this is worth doing.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	n.mu.Lock()
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	defer n.mu.Unlock()
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if n.state() &gt;= resolved {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return n
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if n.inst != nil {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		assert(n.underlying == nil) <span class="comment">// n is an unresolved instance</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		assert(n.loader == nil)     <span class="comment">// instances are created by instantiation, in which case n.loader is nil</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		orig := n.inst.orig
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		orig.resolve()
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		underlying := n.expandUnderlying()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		n.tparams = orig.tparams
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		n.underlying = underlying
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		n.fromRHS = orig.fromRHS <span class="comment">// for cycle detection</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		if len(orig.methods) == 0 {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			n.setState(complete) <span class="comment">// nothing further to do</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			n.inst.ctxt = nil
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		} else {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			n.setState(resolved)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		return n
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// TODO(mdempsky): Since we&#39;re passing n to the loader anyway</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// (necessary because types2 expects the receiver type for methods</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// on defined interface types to be the Named rather than the</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// underlying Interface), maybe it should just handle calling</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// SetTypeParams, SetUnderlying, and AddMethod instead?  Those</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// methods would need to support reentrant calls though. It would</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// also make the API more future-proof towards further extensions.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	if n.loader != nil {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		assert(n.underlying == nil)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		assert(n.TypeArgs().Len() == 0) <span class="comment">// instances are created by instantiation, in which case n.loader is nil</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		tparams, underlying, methods := n.loader(n)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		n.tparams = bindTParams(tparams)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		n.underlying = underlying
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		n.fromRHS = underlying <span class="comment">// for cycle detection</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		n.methods = methods
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		n.loader = nil
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	n.setState(complete)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	return n
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// state atomically accesses the current state of the receiver.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (n *Named) state() namedState {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	return namedState(atomic.LoadUint32(&amp;n.state_))
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// setState atomically stores the given state for n.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// Must only be called while holding n.mu.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func (n *Named) setState(state namedState) {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	atomic.StoreUint32(&amp;n.state_, uint32(state))
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// newNamed is like NewNamed but with a *Checker receiver.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (check *Checker) newNamed(obj *TypeName, underlying Type, methods []*Func) *Named {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	typ := &amp;Named{check: check, obj: obj, fromRHS: underlying, underlying: underlying, methods: methods}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if obj.typ == nil {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		obj.typ = typ
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// Ensure that typ is always sanity-checked.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if check != nil {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		check.needsCleanup(typ)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return typ
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// newNamedInstance creates a new named instance for the given origin and type</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// arguments, recording pos as the position of its synthetic object (for error</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// reporting).</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// If set, expanding is the named type instance currently being expanded, that</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// led to the creation of this instance.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>func (check *Checker) newNamedInstance(pos token.Pos, orig *Named, targs []Type, expanding *Named) *Named {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	assert(len(targs) &gt; 0)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	obj := NewTypeName(pos, orig.obj.pkg, orig.obj.name, nil)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	inst := &amp;instance{orig: orig, targs: newTypeList(targs)}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Only pass the expanding context to the new instance if their packages</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// match. Since type reference cycles are only possible within a single</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// package, this is sufficient for the purposes of short-circuiting cycles.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Avoiding passing the context in other cases prevents unnecessary coupling</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// of types across packages.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if expanding != nil &amp;&amp; expanding.Obj().pkg == obj.pkg {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		inst.ctxt = expanding.inst.ctxt
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	typ := &amp;Named{check: check, obj: obj, inst: inst}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	obj.typ = typ
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// Ensure that typ is always sanity-checked.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if check != nil {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		check.needsCleanup(typ)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	return typ
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func (t *Named) cleanup() {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	assert(t.inst == nil || t.inst.orig.inst == nil)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// Ensure that every defined type created in the course of type-checking has</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// either non-*Named underlying type, or is unexpanded.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// This guarantees that we don&#39;t leak any types whose underlying type is</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// *Named, because any unexpanded instances will lazily compute their</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// underlying type by substituting in the underlying type of their origin.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// The origin must have either been imported or type-checked and expanded</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// here, and in either case its underlying type will be fully expanded.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	switch t.underlying.(type) {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	case nil:
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if t.TypeArgs().Len() == 0 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			panic(&#34;nil underlying&#34;)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	case *Named:
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		t.under() <span class="comment">// t.under may add entries to check.cleaners</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	t.check = nil
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// Obj returns the type name for the declaration defining the named type t. For</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// instantiated types, this is same as the type name of the origin type.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func (t *Named) Obj() *TypeName {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	if t.inst == nil {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		return t.obj
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	return t.inst.orig.obj
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Origin returns the generic type from which the named type t is</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// instantiated. If t is not an instantiated type, the result is t.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>func (t *Named) Origin() *Named {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if t.inst == nil {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return t
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	return t.inst.orig
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// TypeParams returns the type parameters of the named type t, or nil.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// The result is non-nil for an (originally) generic type even if it is instantiated.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>func (t *Named) TypeParams() *TypeParamList { return t.resolve().tparams }
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// SetTypeParams sets the type parameters of the named type t.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// t must not have type arguments.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>func (t *Named) SetTypeParams(tparams []*TypeParam) {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	assert(t.inst == nil)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	t.resolve().tparams = bindTParams(tparams)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// TypeArgs returns the type arguments used to instantiate the named type t.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>func (t *Named) TypeArgs() *TypeList {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	if t.inst == nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		return nil
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	return t.inst.targs
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// NumMethods returns the number of explicit methods defined for t.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func (t *Named) NumMethods() int {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	return len(t.Origin().resolve().methods)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// Method returns the i&#39;th method of named type t for 0 &lt;= i &lt; t.NumMethods().</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// For an ordinary or instantiated type t, the receiver base type of this</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// method is the named type t. For an uninstantiated generic type t, each</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// method receiver is instantiated with its receiver type parameters.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func (t *Named) Method(i int) *Func {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	t.resolve()
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if t.state() &gt;= complete {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		return t.methods[i]
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	assert(t.inst != nil) <span class="comment">// only instances should have incomplete methods</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	orig := t.inst.orig
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	t.mu.Lock()
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	defer t.mu.Unlock()
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	if len(t.methods) != len(orig.methods) {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		assert(len(t.methods) == 0)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		t.methods = make([]*Func, len(orig.methods))
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	if t.methods[i] == nil {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		assert(t.inst.ctxt != nil) <span class="comment">// we should still have a context remaining from the resolution phase</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		t.methods[i] = t.expandMethod(i)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		t.inst.expandedMethods++
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		<span class="comment">// Check if we&#39;ve created all methods at this point. If we have, mark the</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		<span class="comment">// type as fully expanded.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		if t.inst.expandedMethods == len(orig.methods) {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			t.setState(complete)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			t.inst.ctxt = nil <span class="comment">// no need for a context anymore</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	return t.methods[i]
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// expandMethod substitutes type arguments in the i&#39;th method for an</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// instantiated receiver.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>func (t *Named) expandMethod(i int) *Func {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	<span class="comment">// t.orig.methods is not lazy. origm is the method instantiated with its</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	<span class="comment">// receiver type parameters (the &#34;origin&#34; method).</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	origm := t.inst.orig.Method(i)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	assert(origm != nil)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	check := t.check
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// Ensure that the original method is type-checked.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	if check != nil {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		check.objDecl(origm, nil)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	origSig := origm.typ.(*Signature)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	rbase, _ := deref(origSig.Recv().Type())
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// If rbase is t, then origm is already the instantiated method we&#39;re looking</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	<span class="comment">// for. In this case, we return origm to preserve the invariant that</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	<span class="comment">// traversing Method-&gt;Receiver Type-&gt;Method should get back to the same</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	<span class="comment">// method.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	<span class="comment">// This occurs if t is instantiated with the receiver type parameters, as in</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	<span class="comment">// the use of m in func (r T[_]) m() { r.m() }.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	if rbase == t {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		return origm
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	sig := origSig
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	<span class="comment">// We can only substitute if we have a correspondence between type arguments</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// and type parameters. This check is necessary in the presence of invalid</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// code.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	if origSig.RecvTypeParams().Len() == t.inst.targs.Len() {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		smap := makeSubstMap(origSig.RecvTypeParams().list(), t.inst.targs.list())
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		var ctxt *Context
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		if check != nil {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			ctxt = check.context()
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		sig = check.subst(origm.pos, origSig, smap, t, ctxt).(*Signature)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	if sig == origSig {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		<span class="comment">// No substitution occurred, but we still need to create a new signature to</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		<span class="comment">// hold the instantiated receiver.</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		copy := *origSig
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		sig = &amp;copy
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	var rtyp Type
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	if origm.hasPtrRecv() {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		rtyp = NewPointer(t)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	} else {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		rtyp = t
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	sig.recv = substVar(origSig.recv, rtyp)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	return substFunc(origm, sig)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// SetUnderlying sets the underlying type and marks t as complete.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// t must not have type arguments.</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="selection">func (t *Named) SetUnderlying(underlying Type)</span> {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	assert(t.inst == nil)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	if underlying == nil {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		panic(&#34;underlying type must not be nil&#34;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	if asNamed(underlying) != nil {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		panic(&#34;underlying type must not be *Named&#34;)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	t.resolve().underlying = underlying
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	if t.fromRHS == nil {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		t.fromRHS = underlying <span class="comment">// for cycle detection</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// AddMethod adds method m unless it is already in the method list.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// t must not have type arguments.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>func (t *Named) AddMethod(m *Func) {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	assert(t.inst == nil)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	t.resolve()
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	if i, _ := lookupMethod(t.methods, m.pkg, m.name, false); i &lt; 0 {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		t.methods = append(t.methods, m)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// TODO(gri) Investigate if Unalias can be moved to where underlying is set.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>func (t *Named) Underlying() Type { return Unalias(t.resolve().underlying) }
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>func (t *Named) String() string   { return TypeString(t, nil) }
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// Implementation</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// TODO(rfindley): reorganize the loading and expansion methods under this</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// heading.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// under returns the expanded underlying type of n0; possibly by following</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// forward chains of named types. If an underlying type is found, resolve</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// the chain by setting the underlying type for each defined type in the</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// chain before returning it. If no underlying type is found or a cycle</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// is detected, the result is Typ[Invalid]. If a cycle is detected and</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// n0.check != nil, the cycle is reported.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// This is necessary because the underlying type of named may be itself a</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// named type that is incomplete:</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">//	type (</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">//		A B</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">//		B *C</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">//		C A</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">//	)</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// The type of C is the (named) type of A which is incomplete,</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// and which has as its underlying type the named type B.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>func (n0 *Named) under() Type {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	u := n0.Underlying()
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// If the underlying type of a defined type is not a defined</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	<span class="comment">// (incl. instance) type, then that is the desired underlying</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	<span class="comment">// type.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	var n1 *Named
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	switch u1 := u.(type) {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	case nil:
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		<span class="comment">// After expansion via Underlying(), we should never encounter a nil</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		<span class="comment">// underlying.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		panic(&#34;nil underlying&#34;)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	default:
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		<span class="comment">// common case</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		return u
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	case *Named:
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		<span class="comment">// handled below</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		n1 = u1
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	if n0.check == nil {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		panic(&#34;Named.check == nil but type is incomplete&#34;)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	<span class="comment">// Invariant: after this point n0 as well as any named types in its</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	<span class="comment">// underlying chain should be set up when this function exits.</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	check := n0.check
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	n := n0
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	seen := make(map[*Named]int) <span class="comment">// types that need their underlying type resolved</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	var path []Object            <span class="comment">// objects encountered, for cycle reporting</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>loop:
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	for {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		seen[n] = len(seen)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		path = append(path, n.obj)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		n = n1
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		if i, ok := seen[n]; ok {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			<span class="comment">// cycle</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			check.cycleError(path[i:])
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			u = Typ[Invalid]
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			break
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		u = n.Underlying()
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		switch u1 := u.(type) {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		case nil:
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			u = Typ[Invalid]
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			break loop
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		default:
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			break loop
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		case *Named:
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			<span class="comment">// Continue collecting *Named types in the chain.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			n1 = u1
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	for n := range seen {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		<span class="comment">// We should never have to update the underlying type of an imported type;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		<span class="comment">// those underlying types should have been resolved during the import.</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		<span class="comment">// Also, doing so would lead to a race condition (was go.dev/issue/31749).</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		<span class="comment">// Do this check always, not just in debug mode (it&#39;s cheap).</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		if n.obj.pkg != check.pkg {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			panic(&#34;imported type with unresolved underlying type&#34;)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		n.underlying = u
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	return u
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>func (n *Named) lookupMethod(pkg *Package, name string, foldCase bool) (int, *Func) {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	n.resolve()
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	<span class="comment">// If n is an instance, we may not have yet instantiated all of its methods.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	<span class="comment">// Look up the method index in orig, and only instantiate method at the</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	<span class="comment">// matching index (if any).</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	i, _ := lookupMethod(n.Origin().methods, pkg, name, foldCase)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		return -1, nil
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	<span class="comment">// For instances, m.Method(i) will be different from the orig method.</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return i, n.Method(i)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// context returns the type-checker context.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>func (check *Checker) context() *Context {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	if check.ctxt == nil {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		check.ctxt = NewContext()
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	return check.ctxt
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// expandUnderlying substitutes type arguments in the underlying type n.orig,</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// returning the result. Returns Typ[Invalid] if there was an error.</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>func (n *Named) expandUnderlying() Type {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	check := n.check
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	if check != nil &amp;&amp; check.conf._Trace {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		check.trace(n.obj.pos, &#34;-- Named.expandUnderlying %s&#34;, n)
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		check.indent++
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		defer func() {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			check.indent--
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			check.trace(n.obj.pos, &#34;=&gt; %s (tparams = %s, under = %s)&#34;, n, n.tparams.list(), n.underlying)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		}()
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	assert(n.inst.orig.underlying != nil)
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	if n.inst.ctxt == nil {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		n.inst.ctxt = NewContext()
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	orig := n.inst.orig
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	targs := n.inst.targs
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	if asNamed(orig.underlying) != nil {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		<span class="comment">// We should only get a Named underlying type here during type checking</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		<span class="comment">// (for example, in recursive type declarations).</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		assert(check != nil)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	if orig.tparams.Len() != targs.Len() {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		<span class="comment">// Mismatching arg and tparam length may be checked elsewhere.</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		return Typ[Invalid]
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	<span class="comment">// Ensure that an instance is recorded before substituting, so that we</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	<span class="comment">// resolve n for any recursive references.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	h := n.inst.ctxt.instanceHash(orig, targs.list())
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	n2 := n.inst.ctxt.update(h, orig, n.TypeArgs().list(), n)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	assert(n == n2)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	smap := makeSubstMap(orig.tparams.list(), targs.list())
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	var ctxt *Context
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	if check != nil {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		ctxt = check.context()
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	underlying := n.check.subst(n.obj.pos, orig.underlying, smap, n, ctxt)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// If the underlying type of n is an interface, we need to set the receiver of</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	<span class="comment">// its methods accurately -- we set the receiver of interface methods on</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// the RHS of a type declaration to the defined type.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	if iface, _ := underlying.(*Interface); iface != nil {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		if methods, copied := replaceRecvType(iface.methods, orig, n); copied {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			<span class="comment">// If the underlying type doesn&#39;t actually use type parameters, it&#39;s</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			<span class="comment">// possible that it wasn&#39;t substituted. In this case we need to create</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			<span class="comment">// a new *Interface before modifying receivers.</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			if iface == orig.underlying {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>				old := iface
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>				iface = check.newInterface()
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>				iface.embeddeds = old.embeddeds
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>				assert(old.complete) <span class="comment">// otherwise we are copying incomplete data</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>				iface.complete = old.complete
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>				iface.implicit = old.implicit <span class="comment">// should be false but be conservative</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>				underlying = iface
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			iface.methods = methods
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			iface.tset = nil <span class="comment">// recompute type set with new methods</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			<span class="comment">// If check != nil, check.newInterface will have saved the interface for later completion.</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			if check == nil { <span class="comment">// golang/go#61561: all newly created interfaces must be fully evaluated</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>				iface.typeSet()
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	return underlying
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// safeUnderlying returns the underlying type of typ without expanding</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// instances, to avoid infinite recursion.</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// TODO(rfindley): eliminate this function or give it a better name.</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>func safeUnderlying(typ Type) Type {
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	if t := asNamed(typ); t != nil {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		return t.underlying
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	return typ.Underlying()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
</pre><p><a href="named.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
