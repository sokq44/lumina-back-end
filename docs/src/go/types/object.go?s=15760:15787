<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/object.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./object.go?s=15760:15787#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">object.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/constant&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// An Object describes a named language entity such as a package,</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// constant, type, variable, function (incl. methods), or label.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// All objects implement the Object interface.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type Object interface {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Parent() *Scope <span class="comment">// scope in which this object is declared; nil for methods and struct fields</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Pos() token.Pos <span class="comment">// position of object identifier in declaration</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Pkg() *Package  <span class="comment">// package to which this object belongs; nil for labels and objects in the Universe scope</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Name() string   <span class="comment">// package local object name</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	Type() Type     <span class="comment">// object type</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Exported() bool <span class="comment">// reports whether the name starts with a capital letter</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	Id() string     <span class="comment">// object name if exported, qualified name if not exported (see func Id)</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// String returns a human-readable string of the object.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	String() string
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// order reflects a package-level object&#39;s source order: if object</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// a is before object b in the source, then a.order() &lt; b.order().</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// order returns a value &gt; 0 for package-level objects; it returns</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// 0 for all other objects (including objects in file scopes).</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	order() uint32
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// color returns the object&#39;s color.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	color() color
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// setType sets the type of the object.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	setType(Type)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// setOrder sets the order number of the object. It must be &gt; 0.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	setOrder(uint32)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// setColor sets the object&#39;s color. It must not be white.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	setColor(color color)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// setParent sets the parent scope of the object.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	setParent(*Scope)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// sameId reports whether obj.Id() and Id(pkg, name) are the same.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	sameId(pkg *Package, name string) bool
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// scopePos returns the start position of the scope of this Object</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	scopePos() token.Pos
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// setScopePos sets the start position of the scope for this Object.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	setScopePos(pos token.Pos)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func isExported(name string) bool {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	ch, _ := utf8.DecodeRuneInString(name)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	return unicode.IsUpper(ch)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// Id returns name if it is exported, otherwise it</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// returns the name qualified with the package path.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func Id(pkg *Package, name string) string {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	if isExported(name) {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		return name
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// unexported names need the package path for differentiation</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// (if there&#39;s no package, make sure we don&#39;t start with &#39;.&#39;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// as that may change the order of methods between a setup</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// inside a package and outside a package - which breaks some</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// tests)</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	path := &#34;_&#34;
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// pkg is nil for objects in Universe scope and possibly types</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// introduced via Eval (see also comment in object.sameId)</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if pkg != nil &amp;&amp; pkg.path != &#34;&#34; {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		path = pkg.path
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return path + &#34;.&#34; + name
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// An object implements the common parts of an Object.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>type object struct {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	parent    *Scope
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	pos       token.Pos
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	pkg       *Package
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	name      string
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	typ       Type
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	order_    uint32
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	color_    color
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	scopePos_ token.Pos
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// color encodes the color of an object (see Checker.objDecl for details).</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>type color uint32
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// An object may be painted in one of three colors.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Color values other than white or black are considered grey.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>const (
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	white color = iota
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	black
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	grey <span class="comment">// must be &gt; white and black</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func (c color) String() string {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	switch c {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	case white:
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		return &#34;white&#34;
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	case black:
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		return &#34;black&#34;
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	default:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return &#34;grey&#34;
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// colorFor returns the (initial) color for an object depending on</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// whether its type t is known or not.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func colorFor(t Type) color {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	if t != nil {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		return black
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return white
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// Parent returns the scope in which the object is declared.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// The result is nil for methods and struct fields.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (obj *object) Parent() *Scope { return obj.parent }
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// Pos returns the declaration position of the object&#39;s identifier.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (obj *object) Pos() token.Pos { return obj.pos }
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// Pkg returns the package to which the object belongs.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// The result is nil for labels and objects in the Universe scope.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>func (obj *object) Pkg() *Package { return obj.pkg }
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Name returns the object&#39;s (package-local, unqualified) name.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (obj *object) Name() string { return obj.name }
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// Type returns the object&#39;s type.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (obj *object) Type() Type { return obj.typ }
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// Exported reports whether the object is exported (starts with a capital letter).</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// It doesn&#39;t take into account whether the object is in a local (function) scope</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// or not.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func (obj *object) Exported() bool { return isExported(obj.name) }
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// Id is a wrapper for Id(obj.Pkg(), obj.Name()).</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func (obj *object) Id() string { return Id(obj.pkg, obj.name) }
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>func (obj *object) String() string      { panic(&#34;abstract&#34;) }
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func (obj *object) order() uint32       { return obj.order_ }
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (obj *object) color() color        { return obj.color_ }
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (obj *object) scopePos() token.Pos { return obj.scopePos_ }
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (obj *object) setParent(parent *Scope)   { obj.parent = parent }
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (obj *object) setType(typ Type)          { obj.typ = typ }
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func (obj *object) setOrder(order uint32)     { assert(order &gt; 0); obj.order_ = order }
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func (obj *object) setColor(color color)      { assert(color != white); obj.color_ = color }
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func (obj *object) setScopePos(pos token.Pos) { obj.scopePos_ = pos }
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>func (obj *object) sameId(pkg *Package, name string) bool {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// spec:</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// &#34;Two identifiers are different if they are spelled differently,</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// or if they appear in different packages and are not exported.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, they are the same.&#34;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if name != obj.name {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return false
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// obj.Name == name</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if obj.Exported() {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return true
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// not exported, so packages must be the same (pkg == nil for</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// fields in Universe scope; this can only happen for types</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">// introduced via Eval)</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	if pkg == nil || obj.pkg == nil {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		return pkg == obj.pkg
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// pkg != nil &amp;&amp; obj.pkg != nil</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	return pkg.path == obj.pkg.path
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// less reports whether object a is ordered before object b.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// Objects are ordered nil before non-nil, exported before</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// non-exported, then by name, and finally (for non-exported</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// functions) by package path.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func (a *object) less(b *object) bool {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if a == b {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		return false
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// Nil before non-nil.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	if a == nil {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		return true
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	if b == nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return false
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// Exported functions before non-exported.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	ea := isExported(a.name)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	eb := isExported(b.name)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if ea != eb {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		return ea
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// Order by name and then (for non-exported names) by package.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if a.name != b.name {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return a.name &lt; b.name
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if !ea {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return a.pkg.path &lt; b.pkg.path
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	return false
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// A PkgName represents an imported Go package.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// PkgNames don&#39;t have a type.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>type PkgName struct {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	object
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	imported *Package
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	used     bool <span class="comment">// set if the package was used</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// NewPkgName returns a new PkgName object representing an imported package.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// The remaining arguments set the attributes found with all Objects.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>func NewPkgName(pos token.Pos, pkg *Package, name string, imported *Package) *PkgName {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return &amp;PkgName{object{nil, pos, pkg, name, Typ[Invalid], 0, black, nopos}, imported, false}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// Imported returns the package that was imported.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// It is distinct from Pkg(), which is the package containing the import statement.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (obj *PkgName) Imported() *Package { return obj.imported }
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// A Const represents a declared constant.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>type Const struct {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	object
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	val constant.Value
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// NewConst returns a new constant with value val.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// The remaining arguments set the attributes found with all Objects.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>func NewConst(pos token.Pos, pkg *Package, name string, typ Type, val constant.Value) *Const {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	return &amp;Const{object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}, val}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// Val returns the constant&#39;s value.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>func (obj *Const) Val() constant.Value { return obj.val }
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func (*Const) isDependency() {} <span class="comment">// a constant may be a dependency of an initialization expression</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// A TypeName represents a name for a (defined or alias) type.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>type TypeName struct {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	object
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// NewTypeName returns a new type name denoting the given typ.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// The remaining arguments set the attributes found with all Objects.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// The typ argument may be a defined (Named) type or an alias type.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// It may also be nil such that the returned TypeName can be used as</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// argument for NewNamed, which will set the TypeName&#39;s type as a side-</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// effect.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func NewTypeName(pos token.Pos, pkg *Package, name string, typ Type) *TypeName {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	return &amp;TypeName{object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// NewTypeNameLazy returns a new defined type like NewTypeName, but it</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// lazily calls resolve to finish constructing the Named object.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func _NewTypeNameLazy(pos token.Pos, pkg *Package, name string, load func(named *Named) (tparams []*TypeParam, underlying Type, methods []*Func)) *TypeName {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	obj := NewTypeName(pos, pkg, name, nil)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	NewNamed(obj, nil, nil).loader = load
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return obj
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// IsAlias reports whether obj is an alias name for a type.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>func (obj *TypeName) IsAlias() bool {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	switch t := obj.typ.(type) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	case nil:
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return false
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// case *Alias:</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">//	handled by default case</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	case *Basic:
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		<span class="comment">// unsafe.Pointer is not an alias.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		if obj.pkg == Unsafe {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			return false
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		<span class="comment">// Any user-defined type name for a basic type is an alias for a</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		<span class="comment">// basic type (because basic types are pre-declared in the Universe</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		<span class="comment">// scope, outside any package scope), and so is any type name with</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// a different name than the name of the basic type it refers to.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		<span class="comment">// Additionally, we need to look for &#34;byte&#34; and &#34;rune&#34; because they</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		<span class="comment">// are aliases but have the same names (for better error messages).</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		return obj.pkg != nil || t.name != obj.name || t == universeByte || t == universeRune
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	case *Named:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return obj != t.obj
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		return obj != t.obj
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	default:
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		return true
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// A Variable represents a declared variable (including function parameters and results, and struct fields).</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>type Var struct {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	object
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	embedded bool <span class="comment">// if set, the variable is an embedded struct field, and name is the type name</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	isField  bool <span class="comment">// var is struct field</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	used     bool <span class="comment">// set if the variable was used</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	origin   *Var <span class="comment">// if non-nil, the Var from which this one was instantiated</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// NewVar returns a new variable.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// The arguments set the attributes found with all Objects.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func NewVar(pos token.Pos, pkg *Package, name string, typ Type) *Var {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	return &amp;Var{object: object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// NewParam returns a new variable representing a function parameter.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>func NewParam(pos token.Pos, pkg *Package, name string, typ Type) *Var {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	return &amp;Var{object: object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}, used: true} <span class="comment">// parameters are always &#39;used&#39;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// NewField returns a new variable representing a struct field.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// For embedded fields, the name is the unqualified type name</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// under which the field is accessible.</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>func NewField(pos token.Pos, pkg *Package, name string, typ Type, embedded bool) *Var {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	return &amp;Var{object: object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}, embedded: embedded, isField: true}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// Anonymous reports whether the variable is an embedded field.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// Same as Embedded; only present for backward-compatibility.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func (obj *Var) Anonymous() bool { return obj.embedded }
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// Embedded reports whether the variable is an embedded field.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>func (obj *Var) Embedded() bool { return obj.embedded }
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// IsField reports whether the variable is a struct field.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>func (obj *Var) IsField() bool { return obj.isField }
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// Origin returns the canonical Var for its receiver, i.e. the Var object</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// recorded in Info.Defs.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// For synthetic Vars created during instantiation (such as struct fields or</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// function parameters that depend on type arguments), this will be the</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// corresponding Var on the generic (uninstantiated) type. For all other Vars</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// Origin returns the receiver.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func (obj *Var) Origin() *Var {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if obj.origin != nil {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		return obj.origin
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	return obj
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>func (*Var) isDependency() {} <span class="comment">// a variable may be a dependency of an initialization expression</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// A Func represents a declared function, concrete method, or abstract</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// (interface) method. Its Type() is always a *Signature.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// An abstract method may belong to many interfaces due to embedding.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>type Func struct {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	object
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	hasPtrRecv_ bool  <span class="comment">// only valid for methods that don&#39;t have a type yet; use hasPtrRecv() to read</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	origin      *Func <span class="comment">// if non-nil, the Func from which this one was instantiated</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// NewFunc returns a new function with the given signature, representing</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// the function&#39;s type.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>func NewFunc(pos token.Pos, pkg *Package, name string, sig *Signature) *Func {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t store a (typed) nil signature</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	var typ Type
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if sig != nil {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		typ = sig
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	return &amp;Func{object{nil, pos, pkg, name, typ, 0, colorFor(typ), nopos}, false, nil}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// FullName returns the package- or receiver-type-qualified name of</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// function or method obj.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>func (obj *Func) FullName() string {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	writeFuncName(&amp;buf, obj, nil)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	return buf.String()
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// Scope returns the scope of the function&#39;s body block.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// The result is nil for imported or instantiated functions and methods</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// (but there is also no mechanism to get to an instantiated function).</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>func (obj *Func) Scope() *Scope { return obj.typ.(*Signature).scope }
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// Origin returns the canonical Func for its receiver, i.e. the Func object</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// recorded in Info.Defs.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// For synthetic functions created during instantiation (such as methods on an</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// instantiated Named type or interface methods that depend on type arguments),</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// this will be the corresponding Func on the generic (uninstantiated) type.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// For all other Funcs Origin returns the receiver.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func (obj *Func) Origin() *Func {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if obj.origin != nil {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		return obj.origin
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	return obj
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// Pkg returns the package to which the function belongs.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// The result is nil for methods of types in the Universe scope,</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// like method Error of the error built-in interface type.</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>func (obj *Func) Pkg() *Package { return obj.object.Pkg() }
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// hasPtrRecv reports whether the receiver is of the form *T for the given method obj.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func (obj *Func) hasPtrRecv() bool {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// If a method&#39;s receiver type is set, use that as the source of truth for the receiver.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	<span class="comment">// Caution: Checker.funcDecl (decl.go) marks a function by setting its type to an empty</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// signature. We may reach here before the signature is fully set up: we must explicitly</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// check if the receiver is set (we cannot just look for non-nil obj.typ).</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	if sig, _ := obj.typ.(*Signature); sig != nil &amp;&amp; sig.recv != nil {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		_, isPtr := deref(sig.recv.typ)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		return isPtr
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	<span class="comment">// If a method&#39;s type is not set it may be a method/function that is:</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	<span class="comment">// 1) client-supplied (via NewFunc with no signature), or</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	<span class="comment">// 2) internally created but not yet type-checked.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">// For case 1) we can&#39;t do anything; the client must know what they are doing.</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// For case 2) we can use the information gathered by the resolver.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	return obj.hasPtrRecv_
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>func (*Func) isDependency() {} <span class="comment">// a function may be a dependency of an initialization expression</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// A Label represents a declared label.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// Labels don&#39;t have a type.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>type Label struct {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	object
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	used bool <span class="comment">// set if the label was used</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// NewLabel returns a new label.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func NewLabel(pos token.Pos, pkg *Package, name string) *Label {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	return &amp;Label{object{pos: pos, pkg: pkg, name: name, typ: Typ[Invalid], color_: black}, false}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// A Builtin represents a built-in function.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// Builtins don&#39;t have a valid type.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>type Builtin struct {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	object
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	id builtinId
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>func newBuiltin(id builtinId) *Builtin {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	return &amp;Builtin{object{name: predeclaredFuncs[id].name, typ: Typ[Invalid], color_: black}, id}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// Nil represents the predeclared value nil.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="selection">type Nil struct {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	object
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>}</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>func writeObject(buf *bytes.Buffer, obj Object, qf Qualifier) {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	var tname *TypeName
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	typ := obj.Type()
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	switch obj := obj.(type) {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	case *PkgName:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34;package %s&#34;, obj.Name())
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		if path := obj.imported.path; path != &#34;&#34; &amp;&amp; path != obj.name {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			fmt.Fprintf(buf, &#34; (%q)&#34;, path)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		return
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	case *Const:
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		buf.WriteString(&#34;const&#34;)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	case *TypeName:
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		tname = obj
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		buf.WriteString(&#34;type&#34;)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		if isTypeParam(typ) {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			buf.WriteString(&#34; parameter&#34;)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	case *Var:
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		if obj.isField {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			buf.WriteString(&#34;field&#34;)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		} else {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			buf.WriteString(&#34;var&#34;)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	case *Func:
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		buf.WriteString(&#34;func &#34;)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		writeFuncName(buf, obj, qf)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if typ != nil {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			WriteSignature(buf, typ.(*Signature), qf)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		return
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	case *Label:
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		buf.WriteString(&#34;label&#34;)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		typ = nil
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	case *Builtin:
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		buf.WriteString(&#34;builtin&#34;)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		typ = nil
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	case *Nil:
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		buf.WriteString(&#34;nil&#34;)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		return
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	default:
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;writeObject(%T)&#34;, obj))
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	buf.WriteByte(&#39; &#39;)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">// For package-level objects, qualify the name.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	if obj.Pkg() != nil &amp;&amp; obj.Pkg().scope.Lookup(obj.Name()) == obj {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		buf.WriteString(packagePrefix(obj.Pkg(), qf))
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	buf.WriteString(obj.Name())
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if typ == nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		return
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	if tname != nil {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		switch t := typ.(type) {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		case *Basic:
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t print anything more for basic types since there&#39;s</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			<span class="comment">// no more information.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			return
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		case *Named:
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			if t.TypeParams().Len() &gt; 0 {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>				newTypeWriter(buf, qf).tParamList(t.TypeParams().list())
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		if tname.IsAlias() {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			buf.WriteString(&#34; =&#34;)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		} else if t, _ := typ.(*TypeParam); t != nil {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			typ = t.bound
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		} else {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) should this be fromRHS for *Named?</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			typ = under(typ)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	<span class="comment">// Special handling for any: because WriteType will format &#39;any&#39; as &#39;any&#39;,</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	<span class="comment">// resulting in the object string `type any = any` rather than `type any =</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	<span class="comment">// interface{}`. To avoid this, swap in a different empty interface.</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if obj == universeAny {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		assert(Identical(typ, &amp;emptyInterface))
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		typ = &amp;emptyInterface
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	buf.WriteByte(&#39; &#39;)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	WriteType(buf, typ, qf)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>func packagePrefix(pkg *Package, qf Qualifier) string {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	if pkg == nil {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	var s string
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	if qf != nil {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		s = qf(pkg)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	} else {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		s = pkg.Path()
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	if s != &#34;&#34; {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		s += &#34;.&#34;
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	return s
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// ObjectString returns the string form of obj.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// The Qualifier controls the printing of</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// package-level objects, and may be nil.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>func ObjectString(obj Object, qf Qualifier) string {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	writeObject(&amp;buf, obj, qf)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	return buf.String()
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>func (obj *PkgName) String() string  { return ObjectString(obj, nil) }
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>func (obj *Const) String() string    { return ObjectString(obj, nil) }
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>func (obj *TypeName) String() string { return ObjectString(obj, nil) }
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>func (obj *Var) String() string      { return ObjectString(obj, nil) }
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>func (obj *Func) String() string     { return ObjectString(obj, nil) }
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func (obj *Label) String() string    { return ObjectString(obj, nil) }
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>func (obj *Builtin) String() string  { return ObjectString(obj, nil) }
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>func (obj *Nil) String() string      { return ObjectString(obj, nil) }
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>func writeFuncName(buf *bytes.Buffer, f *Func, qf Qualifier) {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	if f.typ != nil {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		sig := f.typ.(*Signature)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		if recv := sig.Recv(); recv != nil {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			buf.WriteByte(&#39;(&#39;)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			if _, ok := recv.Type().(*Interface); ok {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>				<span class="comment">// gcimporter creates abstract methods of</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>				<span class="comment">// named interfaces using the interface type</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>				<span class="comment">// (not the named type) as the receiver.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>				<span class="comment">// Don&#39;t print it in full.</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>				buf.WriteString(&#34;interface&#34;)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			} else {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>				WriteType(buf, recv.Type(), qf)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>			buf.WriteByte(&#39;)&#39;)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			buf.WriteByte(&#39;.&#39;)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		} else if f.pkg != nil {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			buf.WriteString(packagePrefix(f.pkg, qf))
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	buf.WriteString(f.name)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
</pre><p><a href="object.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
