<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/predicates.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./predicates.go?s=3939:3968#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">predicates.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements commonly used type predicates.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// isValid reports whether t is a valid type.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>func isValid(t Type) bool { return Unalias(t) != Typ[Invalid] }
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The isX predicates below report whether t is an X.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// If t is a type parameter the result is false; i.e.,</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// these predicates don&#39;t look inside a type parameter.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func isBoolean(t Type) bool        { return isBasic(t, IsBoolean) }
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func isInteger(t Type) bool        { return isBasic(t, IsInteger) }
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>func isUnsigned(t Type) bool       { return isBasic(t, IsUnsigned) }
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>func isFloat(t Type) bool          { return isBasic(t, IsFloat) }
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>func isComplex(t Type) bool        { return isBasic(t, IsComplex) }
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>func isNumeric(t Type) bool        { return isBasic(t, IsNumeric) }
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func isString(t Type) bool         { return isBasic(t, IsString) }
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>func isIntegerOrFloat(t Type) bool { return isBasic(t, IsInteger|IsFloat) }
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>func isConstType(t Type) bool      { return isBasic(t, IsConstType) }
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// isBasic reports whether under(t) is a basic type with the specified info.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// If t is a type parameter the result is false; i.e.,</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// isBasic does not look inside a type parameter.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func isBasic(t Type, info BasicInfo) bool {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	u, _ := under(t).(*Basic)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return u != nil &amp;&amp; u.info&amp;info != 0
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// The allX predicates below report whether t is an X.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// If t is a type parameter the result is true if isX is true</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// for all specified types of the type parameter&#39;s type set.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// allX is an optimized version of isX(coreType(t)) (which</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// is the same as underIs(t, isX)).</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func allBoolean(t Type) bool         { return allBasic(t, IsBoolean) }
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func allInteger(t Type) bool         { return allBasic(t, IsInteger) }
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func allUnsigned(t Type) bool        { return allBasic(t, IsUnsigned) }
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func allNumeric(t Type) bool         { return allBasic(t, IsNumeric) }
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>func allString(t Type) bool          { return allBasic(t, IsString) }
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func allOrdered(t Type) bool         { return allBasic(t, IsOrdered) }
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func allNumericOrString(t Type) bool { return allBasic(t, IsNumeric|IsString) }
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// allBasic reports whether under(t) is a basic type with the specified info.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// If t is a type parameter, the result is true if isBasic(t, info) is true</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// for all specific types of the type parameter&#39;s type set.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// allBasic(t, info) is an optimized version of isBasic(coreType(t), info).</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func allBasic(t Type, info BasicInfo) bool {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if tpar, _ := Unalias(t).(*TypeParam); tpar != nil {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		return tpar.is(func(t *term) bool { return t != nil &amp;&amp; isBasic(t.typ, info) })
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	return isBasic(t, info)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// hasName reports whether t has a name. This includes</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// predeclared types, defined types, and type parameters.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// hasName may be called with types that are not fully set up.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func hasName(t Type) bool {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	switch Unalias(t).(type) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	case *Basic, *Named, *TypeParam:
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return true
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return false
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// isTypeLit reports whether t is a type literal.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// This includes all non-defined types, but also basic types.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// isTypeLit may be called with types that are not fully set up.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func isTypeLit(t Type) bool {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	switch Unalias(t).(type) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	case *Named, *TypeParam:
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return false
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return true
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// isTyped reports whether t is typed; i.e., not an untyped</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// constant or boolean. isTyped may be called with types that</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// are not fully set up.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func isTyped(t Type) bool {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// Alias or Named types cannot denote untyped types,</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// thus we don&#39;t need to call Unalias or under</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// (which would be unsafe to do for types that are</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// not fully set up).</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	b, _ := t.(*Basic)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return b == nil || b.info&amp;IsUntyped == 0
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// isUntyped(t) is the same as !isTyped(t).</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func isUntyped(t Type) bool {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return !isTyped(t)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// IsInterface reports whether t is an interface type.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="selection">func IsInterface(t Type) bool</span> {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	_, ok := under(t).(*Interface)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return ok
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// isNonTypeParamInterface reports whether t is an interface type but not a type parameter.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func isNonTypeParamInterface(t Type) bool {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	return !isTypeParam(t) &amp;&amp; IsInterface(t)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// isTypeParam reports whether t is a type parameter.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>func isTypeParam(t Type) bool {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	_, ok := Unalias(t).(*TypeParam)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	return ok
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// hasEmptyTypeset reports whether t is a type parameter with an empty type set.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// The function does not force the computation of the type set and so is safe to</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// use anywhere, but it may report a false negative if the type set has not been</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// computed yet.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func hasEmptyTypeset(t Type) bool {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if tpar, _ := Unalias(t).(*TypeParam); tpar != nil &amp;&amp; tpar.bound != nil {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		iface, _ := safeUnderlying(tpar.bound).(*Interface)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		return iface != nil &amp;&amp; iface.tset != nil &amp;&amp; iface.tset.IsEmpty()
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return false
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// isGeneric reports whether a type is a generic, uninstantiated type</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// (generic signatures are not included).</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// TODO(gri) should we include signatures or assert that they are not present?</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>func isGeneric(t Type) bool {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// A parameterized type is only generic if it doesn&#39;t have an instantiation already.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	named := asNamed(t)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	return named != nil &amp;&amp; named.obj != nil &amp;&amp; named.inst == nil &amp;&amp; named.TypeParams().Len() &gt; 0
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Comparable reports whether values of type T are comparable.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func Comparable(T Type) bool {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return comparable(T, true, nil, nil)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// If dynamic is set, non-type parameter interfaces are always comparable.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// If reportf != nil, it may be used to report why T is not comparable.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func comparable(T Type, dynamic bool, seen map[Type]bool, reportf func(string, ...interface{})) bool {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if seen[T] {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		return true
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if seen == nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		seen = make(map[Type]bool)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	seen[T] = true
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	switch t := under(T).(type) {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	case *Basic:
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		<span class="comment">// assume invalid types to be comparable</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		<span class="comment">// to avoid follow-up errors</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		return t.kind != UntypedNil
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	case *Pointer, *Chan:
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		return true
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	case *Struct:
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		for _, f := range t.fields {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			if !comparable(f.typ, dynamic, seen, nil) {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				if reportf != nil {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>					reportf(&#34;struct containing %s cannot be compared&#34;, f.typ)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>				return false
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		return true
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	case *Array:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		if !comparable(t.elem, dynamic, seen, nil) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>			if reportf != nil {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>				reportf(&#34;%s cannot be compared&#34;, t)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			return false
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return true
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	case *Interface:
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		if dynamic &amp;&amp; !isTypeParam(T) || t.typeSet().IsComparable(seen) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			return true
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		if reportf != nil {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			if t.typeSet().IsEmpty() {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>				reportf(&#34;empty type set&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			} else {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>				reportf(&#34;incomparable types in type set&#34;)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		<span class="comment">// fallthrough</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	return false
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// hasNil reports whether type t includes the nil value.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func hasNil(t Type) bool {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	switch u := under(t).(type) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	case *Basic:
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return u.kind == UnsafePointer
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	case *Slice, *Pointer, *Signature, *Map, *Chan:
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return true
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	case *Interface:
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return !isTypeParam(t) || u.typeSet().underIs(func(u Type) bool {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return u != nil &amp;&amp; hasNil(u)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		})
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return false
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// An ifacePair is a node in a stack of interface type pairs compared for identity.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>type ifacePair struct {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	x, y *Interface
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	prev *ifacePair
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>func (p *ifacePair) identical(q *ifacePair) bool {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return p.x == q.x &amp;&amp; p.y == q.y || p.x == q.y &amp;&amp; p.y == q.x
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// A comparer is used to compare types.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>type comparer struct {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	ignoreTags     bool <span class="comment">// if set, identical ignores struct tags</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	ignoreInvalids bool <span class="comment">// if set, identical treats an invalid type as identical to any type</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// For changes to this code the corresponding changes should be made to unifier.nify.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func (c *comparer) identical(x, y Type, p *ifacePair) bool {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	x = Unalias(x)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	y = Unalias(y)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if x == y {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		return true
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if c.ignoreInvalids &amp;&amp; (!isValid(x) || !isValid(y)) {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return true
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	case *Basic:
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		<span class="comment">// Basic types are singletons except for the rune and byte</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		<span class="comment">// aliases, thus we cannot solely rely on the x == y check</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		<span class="comment">// above. See also comment in TypeName.IsAlias.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		if y, ok := y.(*Basic); ok {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			return x.kind == y.kind
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	case *Array:
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		<span class="comment">// Two array types are identical if they have identical element types</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		<span class="comment">// and the same array length.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		if y, ok := y.(*Array); ok {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			<span class="comment">// If one or both array lengths are unknown (&lt; 0) due to some error,</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			<span class="comment">// assume they are the same to avoid spurious follow-on errors.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			return (x.len &lt; 0 || y.len &lt; 0 || x.len == y.len) &amp;&amp; c.identical(x.elem, y.elem, p)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	case *Slice:
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		<span class="comment">// Two slice types are identical if they have identical element types.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		if y, ok := y.(*Slice); ok {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			return c.identical(x.elem, y.elem, p)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	case *Struct:
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		<span class="comment">// Two struct types are identical if they have the same sequence of fields,</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		<span class="comment">// and if corresponding fields have the same names, and identical types,</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		<span class="comment">// and identical tags. Two embedded fields are considered to have the same</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		<span class="comment">// name. Lower-case field names from different packages are always different.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		if y, ok := y.(*Struct); ok {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			if x.NumFields() == y.NumFields() {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>				for i, f := range x.fields {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>					g := y.fields[i]
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>					if f.embedded != g.embedded ||
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>						!c.ignoreTags &amp;&amp; x.Tag(i) != y.Tag(i) ||
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>						!f.sameId(g.pkg, g.name) ||
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>						!c.identical(f.typ, g.typ, p) {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>						return false
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>					}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>				}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>				return true
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	case *Pointer:
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		<span class="comment">// Two pointer types are identical if they have identical base types.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		if y, ok := y.(*Pointer); ok {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			return c.identical(x.base, y.base, p)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	case *Tuple:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// Two tuples types are identical if they have the same number of elements</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		<span class="comment">// and corresponding elements have identical types.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		if y, ok := y.(*Tuple); ok {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			if x.Len() == y.Len() {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>				if x != nil {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>					for i, v := range x.vars {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>						w := y.vars[i]
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>						if !c.identical(v.typ, w.typ, p) {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>							return false
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>						}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>					}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>				}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>				return true
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	case *Signature:
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		y, _ := y.(*Signature)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		if y == nil {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			return false
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// Two function types are identical if they have the same number of</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		<span class="comment">// parameters and result values, corresponding parameter and result types</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		<span class="comment">// are identical, and either both functions are variadic or neither is.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		<span class="comment">// Parameter and result names are not required to match, and type</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		<span class="comment">// parameters are considered identical modulo renaming.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		if x.TypeParams().Len() != y.TypeParams().Len() {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			return false
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		<span class="comment">// In the case of generic signatures, we will substitute in yparams and</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		<span class="comment">// yresults.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		yparams := y.params
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		yresults := y.results
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if x.TypeParams().Len() &gt; 0 {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			<span class="comment">// We must ignore type parameter names when comparing x and y. The</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			<span class="comment">// easiest way to do this is to substitute x&#39;s type parameters for y&#39;s.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			xtparams := x.TypeParams().list()
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			ytparams := y.TypeParams().list()
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			var targs []Type
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			for i := range xtparams {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				targs = append(targs, x.TypeParams().At(i))
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>			smap := makeSubstMap(ytparams, targs)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			var check *Checker   <span class="comment">// ok to call subst on a nil *Checker</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			ctxt := NewContext() <span class="comment">// need a non-nil Context for the substitution below</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			<span class="comment">// Constraints must be pair-wise identical, after substitution.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			for i, xtparam := range xtparams {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>				ybound := check.subst(nopos, ytparams[i].bound, smap, nil, ctxt)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>				if !c.identical(xtparam.bound, ybound, p) {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>					return false
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			yparams = check.subst(nopos, y.params, smap, nil, ctxt).(*Tuple)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			yresults = check.subst(nopos, y.results, smap, nil, ctxt).(*Tuple)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		return x.variadic == y.variadic &amp;&amp;
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			c.identical(x.params, yparams, p) &amp;&amp;
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			c.identical(x.results, yresults, p)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	case *Union:
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		if y, _ := y.(*Union); y != nil {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			<span class="comment">// TODO(rfindley): can this be reached during type checking? If so,</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			<span class="comment">// consider passing a type set map.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			unionSets := make(map[*Union]*_TypeSet)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			xset := computeUnionTypeSet(nil, unionSets, nopos, x)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			yset := computeUnionTypeSet(nil, unionSets, nopos, y)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			return xset.terms.equal(yset.terms)
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	case *Interface:
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		<span class="comment">// Two interface types are identical if they describe the same type sets.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		<span class="comment">// With the existing implementation restriction, this simplifies to:</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		<span class="comment">// Two interface types are identical if they have the same set of methods with</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		<span class="comment">// the same names and identical function types, and if any type restrictions</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		<span class="comment">// are the same. Lower-case method names from different packages are always</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		<span class="comment">// different. The order of the methods is irrelevant.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		if y, ok := y.(*Interface); ok {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			xset := x.typeSet()
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			yset := y.typeSet()
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			if xset.comparable != yset.comparable {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				return false
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			if !xset.terms.equal(yset.terms) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				return false
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			a := xset.methods
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			b := yset.methods
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			if len(a) == len(b) {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>				<span class="comment">// Interface types are the only types where cycles can occur</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				<span class="comment">// that are not &#34;terminated&#34; via named types; and such cycles</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				<span class="comment">// can only be created via method parameter types that are</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>				<span class="comment">// anonymous interfaces (directly or indirectly) embedding</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				<span class="comment">// the current interface. Example:</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>				<span class="comment">//    type T interface {</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>				<span class="comment">//        m() interface{T}</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>				<span class="comment">//    }</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				<span class="comment">// If two such (differently named) interfaces are compared,</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>				<span class="comment">// endless recursion occurs if the cycle is not detected.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				<span class="comment">// If x and y were compared before, they must be equal</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>				<span class="comment">// (if they were not, the recursion would have stopped);</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				<span class="comment">// search the ifacePair stack for the same pair.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				<span class="comment">// This is a quadratic algorithm, but in practice these stacks</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				<span class="comment">// are extremely short (bounded by the nesting depth of interface</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				<span class="comment">// type declarations that recur via parameter types, an extremely</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				<span class="comment">// rare occurrence). An alternative implementation might use a</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				<span class="comment">// &#34;visited&#34; map, but that is probably less efficient overall.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				q := &amp;ifacePair{x, y, p}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				for p != nil {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>					if p.identical(q) {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>						return true <span class="comment">// same pair was compared before</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>					}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>					p = p.prev
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				if debug {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>					assertSortedMethods(a)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>					assertSortedMethods(b)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				for i, f := range a {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>					g := b[i]
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>					if f.Id() != g.Id() || !c.identical(f.typ, g.typ, q) {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>						return false
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>					}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>				}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				return true
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	case *Map:
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		<span class="comment">// Two map types are identical if they have identical key and value types.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		if y, ok := y.(*Map); ok {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			return c.identical(x.key, y.key, p) &amp;&amp; c.identical(x.elem, y.elem, p)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	case *Chan:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		<span class="comment">// Two channel types are identical if they have identical value types</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		<span class="comment">// and the same direction.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		if y, ok := y.(*Chan); ok {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			return x.dir == y.dir &amp;&amp; c.identical(x.elem, y.elem, p)
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	case *Named:
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		<span class="comment">// Two named types are identical if their type names originate</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		<span class="comment">// in the same type declaration; if they are instantiated they</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		<span class="comment">// must have identical type argument lists.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		if y := asNamed(y); y != nil {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			<span class="comment">// check type arguments before origins to match unifier</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			<span class="comment">// (for correct source code we need to do all checks so</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			<span class="comment">// order doesn&#39;t matter)</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			xargs := x.TypeArgs().list()
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			yargs := y.TypeArgs().list()
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			if len(xargs) != len(yargs) {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				return false
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			for i, xarg := range xargs {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>				if !Identical(xarg, yargs[i]) {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>					return false
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>				}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			return identicalOrigin(x, y)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		<span class="comment">// nothing to do (x and y being equal is caught in the very beginning of this function)</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	case nil:
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		<span class="comment">// avoid a crash in case of nil type</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	default:
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		unreachable()
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	return false
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// identicalOrigin reports whether x and y originated in the same declaration.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>func identicalOrigin(x, y *Named) bool {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) is this correct?</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	return x.Origin().obj == y.Origin().obj
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// identicalInstance reports if two type instantiations are identical.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// Instantiations are identical if their origin and type arguments are</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// identical.</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>func identicalInstance(xorig Type, xargs []Type, yorig Type, yargs []Type) bool {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	if len(xargs) != len(yargs) {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		return false
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	for i, xa := range xargs {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		if !Identical(xa, yargs[i]) {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			return false
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	return Identical(xorig, yorig)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// Default returns the default &#34;typed&#34; type for an &#34;untyped&#34; type;</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">// it returns the incoming type for all other types. The default type</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">// for untyped nil is untyped nil.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func Default(t Type) Type {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	if t, ok := Unalias(t).(*Basic); ok {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		switch t.kind {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		case UntypedBool:
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			return Typ[Bool]
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		case UntypedInt:
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			return Typ[Int]
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		case UntypedRune:
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			return universeRune <span class="comment">// use &#39;rune&#39; name</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		case UntypedFloat:
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return Typ[Float64]
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		case UntypedComplex:
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			return Typ[Complex128]
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		case UntypedString:
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			return Typ[String]
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	return t
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// maxType returns the &#34;largest&#34; type that encompasses both x and y.</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// If x and y are different untyped numeric types, the result is the type of x or y</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// that appears later in this list: integer, rune, floating-point, complex.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// Otherwise, if x != y, the result is nil.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func maxType(x, y Type) Type {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	<span class="comment">// We only care about untyped types (for now), so == is good enough.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) investigate generalizing this function to simplify code elsewhere</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if x == y {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		return x
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	if isUntyped(x) &amp;&amp; isUntyped(y) &amp;&amp; isNumeric(x) &amp;&amp; isNumeric(y) {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		<span class="comment">// untyped types are basic types</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		if x.(*Basic).kind &gt; y.(*Basic).kind {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			return x
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		return y
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	return nil
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span><span class="comment">// clone makes a &#34;flat copy&#34; of *p and returns a pointer to the copy.</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>func clone[P *T, T any](p P) P {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	c := *p
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	return &amp;c
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>
</pre><p><a href="predicates.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
