<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/scope.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./scope.go?s=7308:7339#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">scope.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements Scopes.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// A Scope maintains a set of objects and links to its containing</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// (parent) and contained (children) scopes. Objects may be inserted</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// and looked up by name. The zero value for Scope is a ready-to-use</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// empty scope.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>type Scope struct {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	parent   *Scope
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	children []*Scope
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	number   int               <span class="comment">// parent.children[number-1] is this scope; 0 if there is no parent</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	elems    map[string]Object <span class="comment">// lazily allocated</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	pos, end token.Pos         <span class="comment">// scope extent; may be invalid</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	comment  string            <span class="comment">// for debugging only</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	isFunc   bool              <span class="comment">// set if this is a function scope (internal use only)</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// NewScope returns a new, empty scope contained in the given parent</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// scope, if any. The comment is for debugging only.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>func NewScope(parent *Scope, pos, end token.Pos, comment string) *Scope {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	s := &amp;Scope{parent, nil, 0, nil, pos, end, comment, false}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t add children to Universe scope!</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	if parent != nil &amp;&amp; parent != Universe {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		parent.children = append(parent.children, s)
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		s.number = len(parent.children)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	return s
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// Parent returns the scope&#39;s containing (parent) scope.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func (s *Scope) Parent() *Scope { return s.parent }
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Len returns the number of scope elements.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (s *Scope) Len() int { return len(s.elems) }
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// Names returns the scope&#39;s element names in sorted order.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func (s *Scope) Names() []string {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	names := make([]string, len(s.elems))
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	i := 0
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	for name := range s.elems {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		names[i] = name
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		i++
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	sort.Strings(names)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	return names
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// NumChildren returns the number of scopes nested in s.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (s *Scope) NumChildren() int { return len(s.children) }
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// Child returns the i&#39;th child scope for 0 &lt;= i &lt; NumChildren().</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>func (s *Scope) Child(i int) *Scope { return s.children[i] }
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Lookup returns the object in scope s with the given name if such an</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// object exists; otherwise the result is nil.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (s *Scope) Lookup(name string) Object {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return resolve(name, s.elems[name])
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// LookupParent follows the parent chain of scopes starting with s until</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// it finds a scope where Lookup(name) returns a non-nil object, and then</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// returns that scope and object. If a valid position pos is provided,</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// only objects that were declared at or before pos are considered.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// If no such scope and object exists, the result is (nil, nil).</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Note that obj.Parent() may be different from the returned scope if the</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// object was inserted into the scope and already had a parent at that</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// time (see Insert). This can only happen for dot-imported objects</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// whose scope is the scope of the package that exported them.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (s *Scope) LookupParent(name string, pos token.Pos) (*Scope, Object) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	for ; s != nil; s = s.parent {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		if obj := s.Lookup(name); obj != nil &amp;&amp; (!pos.IsValid() || cmpPos(obj.scopePos(), pos) &lt;= 0) {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			return s, obj
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return nil, nil
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Insert attempts to insert an object obj into scope s.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// If s already contains an alternative object alt with</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// the same name, Insert leaves s unchanged and returns alt.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Otherwise it inserts obj, sets the object&#39;s parent scope</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// if not already set, and returns nil.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func (s *Scope) Insert(obj Object) Object {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	name := obj.Name()
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	if alt := s.Lookup(name); alt != nil {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		return alt
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	s.insert(name, obj)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if obj.Parent() == nil {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		obj.setParent(s)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return nil
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// InsertLazy is like Insert, but allows deferring construction of the</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// inserted object until it&#39;s accessed with Lookup. The Object</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// returned by resolve must have the same name as given to InsertLazy.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// If s already contains an alternative object with the same name,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// InsertLazy leaves s unchanged and returns false. Otherwise it</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// records the binding and returns true. The object&#39;s parent scope</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// will be set to s after resolve is called.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>func (s *Scope) _InsertLazy(name string, resolve func() Object) bool {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	if s.elems[name] != nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		return false
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	s.insert(name, &amp;lazyObject{parent: s, resolve: resolve})
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return true
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func (s *Scope) insert(name string, obj Object) {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	if s.elems == nil {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		s.elems = make(map[string]Object)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	s.elems[name] = obj
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Squash merges s with its parent scope p by adding all</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// objects of s to p, adding all children of s to the</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// children of p, and removing s from p&#39;s children.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// The function f is called for each object obj in s which</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// has an object alt in p. s should be discarded after</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// having been squashed.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (s *Scope) squash(err func(obj, alt Object)) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	p := s.parent
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	assert(p != nil)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	for name, obj := range s.elems {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		obj = resolve(name, obj)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		obj.setParent(nil)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		if alt := p.Insert(obj); alt != nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			err(obj, alt)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	j := -1 <span class="comment">// index of s in p.children</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	for i, ch := range p.children {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		if ch == s {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			j = i
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			break
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	assert(j &gt;= 0)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	k := len(p.children) - 1
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	p.children[j] = p.children[k]
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	p.children = p.children[:k]
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	p.children = append(p.children, s.children...)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	s.children = nil
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	s.elems = nil
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// Pos and End describe the scope&#39;s source code extent [pos, end).</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// The results are guaranteed to be valid only if the type-checked</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// AST has complete position information. The extent is undefined</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// for Universe and package scopes.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (s *Scope) Pos() token.Pos { return s.pos }
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func (s *Scope) End() token.Pos { return s.end }
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Contains reports whether pos is within the scope&#39;s extent.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// The result is guaranteed to be valid only if the type-checked</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// AST has complete position information.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (s *Scope) Contains(pos token.Pos) bool {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return cmpPos(s.pos, pos) &lt;= 0 &amp;&amp; cmpPos(pos, s.end) &lt; 0
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// Innermost returns the innermost (child) scope containing</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// pos. If pos is not within any scope, the result is nil.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// The result is also nil for the Universe scope.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// The result is guaranteed to be valid only if the type-checked</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// AST has complete position information.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (s *Scope) Innermost(pos token.Pos) *Scope {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Package scopes do not have extents since they may be</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// discontiguous, so iterate over the package&#39;s files.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if s.parent == Universe {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		for _, s := range s.children {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			if inner := s.Innermost(pos); inner != nil {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				return inner
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if s.Contains(pos) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		for _, s := range s.children {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			if s.Contains(pos) {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				return s.Innermost(pos)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return s
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return nil
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// WriteTo writes a string representation of the scope to w,</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// with the scope elements sorted by name.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// The level of indentation is controlled by n &gt;= 0, with</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// n == 0 for no indentation.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// If recurse is set, it also writes nested (children) scopes.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (s *Scope) WriteTo(w io.Writer, n int, recurse bool) {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	const ind = &#34;.  &#34;
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	indn := strings.Repeat(ind, n)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	fmt.Fprintf(w, &#34;%s%s scope %p {\n&#34;, indn, s.comment, s)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	indn1 := indn + ind
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	for _, name := range s.Names() {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		fmt.Fprintf(w, &#34;%s%s\n&#34;, indn1, s.Lookup(name))
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if recurse {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		for _, s := range s.children {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			s.WriteTo(w, n+1, recurse)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	fmt.Fprintf(w, &#34;%s}\n&#34;, indn)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// String returns a string representation of the scope, for debugging.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="selection">func (s *Scope) String() string</span> {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	var buf strings.Builder
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	s.WriteTo(&amp;buf, 0, false)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return buf.String()
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// A lazyObject represents an imported Object that has not been fully</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// resolved yet by its importer.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>type lazyObject struct {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	parent  *Scope
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	resolve func() Object
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	obj     Object
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	once    sync.Once
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// resolve returns the Object represented by obj, resolving lazy</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// objects as appropriate.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func resolve(name string, obj Object) Object {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if lazy, ok := obj.(*lazyObject); ok {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		lazy.once.Do(func() {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			obj := lazy.resolve()
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			if _, ok := obj.(*lazyObject); ok {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				panic(&#34;recursive lazy object&#34;)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			if obj.Name() != name {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				panic(&#34;lazy object has unexpected name&#34;)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			if obj.Parent() == nil {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				obj.setParent(lazy.parent)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			lazy.obj = obj
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		})
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		obj = lazy.obj
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	return obj
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// stub implementations so *lazyObject implements Object and we can</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// store them directly into Scope.elems.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>func (*lazyObject) Parent() *Scope                        { panic(&#34;unreachable&#34;) }
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>func (*lazyObject) Pos() token.Pos                        { panic(&#34;unreachable&#34;) }
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func (*lazyObject) Pkg() *Package                         { panic(&#34;unreachable&#34;) }
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (*lazyObject) Name() string                          { panic(&#34;unreachable&#34;) }
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func (*lazyObject) Type() Type                            { panic(&#34;unreachable&#34;) }
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func (*lazyObject) Exported() bool                        { panic(&#34;unreachable&#34;) }
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>func (*lazyObject) Id() string                            { panic(&#34;unreachable&#34;) }
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func (*lazyObject) String() string                        { panic(&#34;unreachable&#34;) }
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>func (*lazyObject) order() uint32                         { panic(&#34;unreachable&#34;) }
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func (*lazyObject) color() color                          { panic(&#34;unreachable&#34;) }
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>func (*lazyObject) setType(Type)                          { panic(&#34;unreachable&#34;) }
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>func (*lazyObject) setOrder(uint32)                       { panic(&#34;unreachable&#34;) }
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func (*lazyObject) setColor(color color)                  { panic(&#34;unreachable&#34;) }
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func (*lazyObject) setParent(*Scope)                      { panic(&#34;unreachable&#34;) }
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func (*lazyObject) sameId(pkg *Package, name string) bool { panic(&#34;unreachable&#34;) }
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>func (*lazyObject) scopePos() token.Pos                   { panic(&#34;unreachable&#34;) }
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func (*lazyObject) setScopePos(pos token.Pos)             { panic(&#34;unreachable&#34;) }
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
</pre><p><a href="scope.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
