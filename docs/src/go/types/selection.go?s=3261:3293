<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/selection.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./selection.go?s=3261:3293#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">selection.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements Selections.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// SelectionKind describes the kind of a selector expression x.f</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// (excluding qualified identifiers).</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// If x is a struct or *struct, a selector expression x.f may denote a</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// sequence of selection operations x.a.b.c.f. The SelectionKind</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// describes the kind of the final (explicit) operation; all the</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// previous (implicit) operations are always field selections.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// Each element of Indices specifies an implicit field (a, b, c)</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// by its index in the struct type of the field selection operand.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// For a FieldVal operation, the final selection refers to the field</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// specified by Selection.Obj.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// For a MethodVal operation, the final selection refers to a method.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// If the &#34;pointerness&#34; of the method&#39;s declared receiver does not</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// match that of the effective receiver after implicit field</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// selection, then an &amp; or * operation is implicitly applied to the</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// receiver variable or value.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// So, x.f denotes (&amp;x.a.b.c).f when f requires a pointer receiver but</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// x.a.b.c is a non-pointer variable; and it denotes (*x.a.b.c).f when</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// f requires a non-pointer receiver but x.a.b.c is a pointer value.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// All pointer indirections, whether due to implicit or explicit field</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// selections or * operations inserted for &#34;pointerness&#34;, panic if</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// applied to a nil pointer, so a method call x.f() may panic even</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// before the function call.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// By contrast, a MethodExpr operation T.f is essentially equivalent</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// to a function literal of the form:</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//	func(x T, args) (results) { return x.f(args) }</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Consequently, any implicit field selections and * operations</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// inserted for &#34;pointerness&#34; are not evaluated until the function is</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// called, so a T.f or (*T).f expression never panics.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>type SelectionKind int
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>const (
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	FieldVal   SelectionKind = iota <span class="comment">// x.f is a struct field selector</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	MethodVal                       <span class="comment">// x.f is a method selector</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	MethodExpr                      <span class="comment">// x.f is a method expression</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// A Selection describes a selector expression x.f.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// For the declarations:</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//	type T struct{ x int; E }</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//	type E struct{}</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//	func (e E) m() {}</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//	var p *T</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// the following relations exist:</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//	Selector    Kind          Recv    Obj    Type       Index     Indirect</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//	p.x         FieldVal      T       x      int        {0}       true</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//	p.m         MethodVal     *T      m      func()     {1, 0}    true</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//	T.m         MethodExpr    T       m      func(T)    {1, 0}    false</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>type Selection struct {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	kind     SelectionKind
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	recv     Type   <span class="comment">// type of x</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	obj      Object <span class="comment">// object denoted by x.f</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	index    []int  <span class="comment">// path from x to x.f</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	indirect bool   <span class="comment">// set if there was any pointer indirection on the path</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Kind returns the selection kind.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func (s *Selection) Kind() SelectionKind { return s.kind }
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// Recv returns the type of x in x.f.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func (s *Selection) Recv() Type { return s.recv }
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// Obj returns the object denoted by x.f; a *Var for</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// a field selection, and a *Func in all other cases.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="selection">func (s *Selection) Obj() Object</span> { return s.obj }
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Type returns the type of x.f, which may be different from the type of f.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// See Selection for more information.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func (s *Selection) Type() Type {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	switch s.kind {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	case MethodVal:
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		<span class="comment">// The type of x.f is a method with its receiver type set</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		<span class="comment">// to the type of x.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		sig := *s.obj.(*Func).typ.(*Signature)
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		recv := *sig.recv
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		recv.typ = s.recv
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		sig.recv = &amp;recv
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		return &amp;sig
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	case MethodExpr:
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		<span class="comment">// The type of x.f is a function (without receiver)</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// and an additional first argument with the same type as x.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) Similar code is already in call.go - factor!</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) Compute this eagerly to avoid allocations.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		sig := *s.obj.(*Func).typ.(*Signature)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		arg0 := *sig.recv
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		sig.recv = nil
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		arg0.typ = s.recv
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		var params []*Var
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		if sig.params != nil {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			params = sig.params.vars
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		sig.params = NewTuple(append([]*Var{&amp;arg0}, params...)...)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return &amp;sig
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// In all other cases, the type of x.f is the type of x.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	return s.obj.Type()
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// Index describes the path from x to f in x.f.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// The last index entry is the field or method index of the type declaring f;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// either:</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//  1. the list of declared methods of a named type; or</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">//  2. the list of methods of an interface type; or</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">//  3. the list of fields of a struct type.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// The earlier index entries are the indices of the embedded fields implicitly</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// traversed to get from (the type of) x to f, starting at embedding depth 0.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>func (s *Selection) Index() []int { return s.index }
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Indirect reports whether any pointer indirection was required to get from</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// x to f in x.f.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// Beware: Indirect spuriously returns true (Go issue #8353) for a</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// MethodVal selection in which the receiver argument and parameter</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// both have type *T so there is no indirection.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// Unfortunately, a fix is too risky.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (s *Selection) Indirect() bool { return s.indirect }
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (s *Selection) String() string { return SelectionString(s, nil) }
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// SelectionString returns the string form of s.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// The Qualifier controls the printing of</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// package-level objects, and may be nil.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Examples:</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//	&#34;field (T) f int&#34;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">//	&#34;method (T) f(X) Y&#34;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">//	&#34;method expr (T) f(X) Y&#34;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>func SelectionString(s *Selection, qf Qualifier) string {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	var k string
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	switch s.kind {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	case FieldVal:
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		k = &#34;field &#34;
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	case MethodVal:
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		k = &#34;method &#34;
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	case MethodExpr:
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		k = &#34;method expr &#34;
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	default:
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		unreachable()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	buf.WriteString(k)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	buf.WriteByte(&#39;(&#39;)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	WriteType(&amp;buf, s.Recv(), qf)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;buf, &#34;) %s&#34;, s.obj.Name())
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if T := s.Type(); s.kind == FieldVal {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		buf.WriteByte(&#39; &#39;)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		WriteType(&amp;buf, T, qf)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	} else {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		WriteSignature(&amp;buf, T.(*Signature), qf)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return buf.String()
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
</pre><p><a href="selection.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
