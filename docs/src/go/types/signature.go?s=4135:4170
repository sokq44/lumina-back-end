<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/signature.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./signature.go?s=4135:4170#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">signature.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package types
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>)
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// API</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// A Signature represents a (non-builtin) function or method type.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// The receiver is ignored when comparing signatures for identity.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>type Signature struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// We need to keep the scope in Signature (rather than passing it around</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// and store it in the Func Object) because when type-checking a function</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// literal we call the general type checker which returns a general Type.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// We then unpack the *Signature and use the scope for the literal body.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	rparams  *TypeParamList <span class="comment">// receiver type parameters from left to right, or nil</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	tparams  *TypeParamList <span class="comment">// type parameters from left to right, or nil</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	scope    *Scope         <span class="comment">// function scope for package-local and non-instantiated signatures; nil otherwise</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	recv     *Var           <span class="comment">// nil if not a method</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	params   *Tuple         <span class="comment">// (incoming) parameters from left to right; or nil</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	results  *Tuple         <span class="comment">// (outgoing) results from left to right; or nil</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	variadic bool           <span class="comment">// true if the last parameter&#39;s type is of the form ...T (or string, for append built-in only)</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// NewSignature returns a new function type for the given receiver, parameters,</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// and results, either of which may be nil. If variadic is set, the function</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// is variadic, it must have at least one parameter, and the last parameter</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// must be of unnamed slice type.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use [NewSignatureType] instead which allows for type parameters.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func NewSignature(recv *Var, params, results *Tuple, variadic bool) *Signature {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	return NewSignatureType(recv, nil, nil, params, results, variadic)
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// NewSignatureType creates a new function type for the given receiver,</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// receiver type parameters, type parameters, parameters, and results. If</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// variadic is set, params must hold at least one parameter and the last</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// parameter&#39;s core type must be of unnamed slice or bytestring type.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// If recv is non-nil, typeParams must be empty. If recvTypeParams is</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// non-empty, recv must be non-nil.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func NewSignatureType(recv *Var, recvTypeParams, typeParams []*TypeParam, params, results *Tuple, variadic bool) *Signature {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if variadic {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		n := params.Len()
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		if n == 0 {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>			panic(&#34;variadic function must have at least one parameter&#34;)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		core := coreString(params.At(n - 1).typ)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		if _, ok := core.(*Slice); !ok &amp;&amp; !isString(core) {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;got %s, want variadic parameter with unnamed slice type or string as core type&#34;, core.String()))
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	sig := &amp;Signature{recv: recv, params: params, results: results, variadic: variadic}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	if len(recvTypeParams) != 0 {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		if recv == nil {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			panic(&#34;function with receiver type parameters must have a receiver&#34;)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		sig.rparams = bindTParams(recvTypeParams)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if len(typeParams) != 0 {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		if recv != nil {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			panic(&#34;function with type parameters cannot have a receiver&#34;)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		sig.tparams = bindTParams(typeParams)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return sig
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Recv returns the receiver of signature s (if a method), or nil if a</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// function. It is ignored when comparing signatures for identity.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// For an abstract method, Recv returns the enclosing interface either</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// as a *[Named] or an *[Interface]. Due to embedding, an interface may</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// contain methods whose receiver type is a different interface.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>func (s *Signature) Recv() *Var { return s.recv }
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// TypeParams returns the type parameters of signature s, or nil.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (s *Signature) TypeParams() *TypeParamList { return s.tparams }
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// RecvTypeParams returns the receiver type parameters of signature s, or nil.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (s *Signature) RecvTypeParams() *TypeParamList { return s.rparams }
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Params returns the parameters of signature s, or nil.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (s *Signature) Params() *Tuple { return s.params }
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Results returns the results of signature s, or nil.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func (s *Signature) Results() *Tuple { return s.results }
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Variadic reports whether the signature s is variadic.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="selection">func (s *Signature) Variadic() bool</span> { return s.variadic }
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func (t *Signature) Underlying() Type { return t }
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func (t *Signature) String() string   { return TypeString(t, nil) }
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Implementation</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// funcType type-checks a function or method type.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (check *Checker) funcType(sig *Signature, recvPar *ast.FieldList, ftyp *ast.FuncType) {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	check.openScope(ftyp, &#34;function&#34;)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	check.scope.isFunc = true
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	check.recordScope(ftyp, check.scope)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	sig.scope = check.scope
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	defer check.closeScope()
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if recvPar != nil &amp;&amp; len(recvPar.List) &gt; 0 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		<span class="comment">// collect generic receiver type parameters, if any</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		<span class="comment">// - a receiver type parameter is like any other type parameter, except that it is declared implicitly</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		<span class="comment">// - the receiver specification acts as local declaration for its type parameters, which may be blank</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		_, rname, rparams := check.unpackRecv(recvPar.List[0].Type, true)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		if len(rparams) &gt; 0 {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			<span class="comment">// The scope of the type parameter T in &#34;func (r T[T]) f()&#34;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			<span class="comment">// starts after f, not at &#34;r&#34;; see #52038.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			scopePos := ftyp.Params.Pos()
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			tparams := check.declareTypeParams(nil, rparams, scopePos)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			sig.rparams = bindTParams(tparams)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			<span class="comment">// Blank identifiers don&#39;t get declared, so naive type-checking of the</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			<span class="comment">// receiver type expression would fail in Checker.collectParams below,</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			<span class="comment">// when Checker.ident cannot resolve the _ to a type.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			<span class="comment">// Checker.recvTParamMap maps these blank identifiers to their type parameter</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			<span class="comment">// types, so that they may be resolved in Checker.ident when they fail</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			<span class="comment">// lookup in the scope.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			for i, p := range rparams {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>				if p.Name == &#34;_&#34; {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>					if check.recvTParamMap == nil {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>						check.recvTParamMap = make(map[*ast.Ident]*TypeParam)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>					}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>					check.recvTParamMap[p] = tparams[i]
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>				}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			<span class="comment">// determine receiver type to get its type parameters</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			<span class="comment">// and the respective type parameter bounds</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			var recvTParams []*TypeParam
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			if rname != nil {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>				<span class="comment">// recv should be a Named type (otherwise an error is reported elsewhere)</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>				<span class="comment">// Also: Don&#39;t report an error via genericType since it will be reported</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				<span class="comment">//       again when we type-check the signature.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>				<span class="comment">// TODO(gri) maybe the receiver should be marked as invalid instead?</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>				if recv := asNamed(check.genericType(rname, nil)); recv != nil {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					recvTParams = recv.TypeParams().list()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>				}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			<span class="comment">// provide type parameter bounds</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			if len(tparams) == len(recvTParams) {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>				smap := makeRenameMap(recvTParams, tparams)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				for i, tpar := range tparams {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>					recvTPar := recvTParams[i]
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>					check.mono.recordCanon(tpar, recvTPar)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>					<span class="comment">// recvTPar.bound is (possibly) parameterized in the context of the</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>					<span class="comment">// receiver type declaration. Substitute parameters for the current</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>					<span class="comment">// context.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>					tpar.bound = check.subst(tpar.obj.pos, recvTPar.bound, smap, nil, check.context())
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>				}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			} else if len(tparams) &lt; len(recvTParams) {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>				<span class="comment">// Reporting an error here is a stop-gap measure to avoid crashes in the</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				<span class="comment">// compiler when a type parameter/argument cannot be inferred later. It</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				<span class="comment">// may lead to follow-on errors (see issues go.dev/issue/51339, go.dev/issue/51343).</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				<span class="comment">// TODO(gri) find a better solution</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>				got := measure(len(tparams), &#34;type parameter&#34;)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>				check.errorf(recvPar, BadRecv, &#34;got %s, but receiver base type declares %d&#34;, got, len(recvTParams))
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if ftyp.TypeParams != nil {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		check.collectTypeParams(&amp;sig.tparams, ftyp.TypeParams)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		<span class="comment">// Always type-check method type parameters but complain that they are not allowed.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// (A separate check is needed when type-checking interface method signatures because</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// they don&#39;t have a receiver specification.)</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		if recvPar != nil {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			check.error(ftyp.TypeParams, InvalidMethodTypeParams, &#34;methods cannot have type parameters&#34;)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// Use a temporary scope for all parameter declarations and then</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// squash that scope into the parent scope (and report any</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// redeclarations at that time).</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// TODO(adonovan): now that each declaration has the correct</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// scopePos, there should be no need for scope squashing.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Audit to ensure all lookups honor scopePos and simplify.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	scope := NewScope(check.scope, nopos, nopos, &#34;function body (temp. scope)&#34;)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	scopePos := ftyp.End() <span class="comment">// all parameters&#39; scopes start after the signature</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	recvList, _ := check.collectParams(scope, recvPar, false, scopePos)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	params, variadic := check.collectParams(scope, ftyp.Params, true, scopePos)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	results, _ := check.collectParams(scope, ftyp.Results, false, scopePos)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	scope.squash(func(obj, alt Object) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		check.errorf(obj, DuplicateDecl, &#34;%s redeclared in this block&#34;, obj.Name())
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		check.reportAltDecl(alt)
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	})
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if recvPar != nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		<span class="comment">// recv parameter list present (may be empty)</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		<span class="comment">// spec: &#34;The receiver is specified via an extra parameter section preceding the</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		<span class="comment">// method name. That parameter section must declare a single parameter, the receiver.&#34;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		var recv *Var
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		switch len(recvList) {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		case 0:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			<span class="comment">// error reported by resolver</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			recv = NewParam(nopos, nil, &#34;&#34;, Typ[Invalid]) <span class="comment">// ignore recv below</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		default:
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			<span class="comment">// more than one receiver</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			check.error(recvList[len(recvList)-1], InvalidRecv, &#34;method has multiple receivers&#34;)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			fallthrough <span class="comment">// continue with first receiver</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		case 1:
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			recv = recvList[0]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		sig.recv = recv
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		<span class="comment">// Delay validation of receiver type as it may cause premature expansion</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		<span class="comment">// of types the receiver type is dependent on (see issues go.dev/issue/51232, go.dev/issue/51233).</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		check.later(func() {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			<span class="comment">// spec: &#34;The receiver type must be of the form T or *T where T is a type name.&#34;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			rtyp, _ := deref(recv.typ)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			atyp := Unalias(rtyp)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			if !isValid(atyp) {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>				return <span class="comment">// error was reported before</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			<span class="comment">// spec: &#34;The type denoted by T is called the receiver base type; it must not</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			<span class="comment">// be a pointer or interface type and it must be declared in the same package</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			<span class="comment">// as the method.&#34;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			switch T := atyp.(type) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			case *Named:
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>				<span class="comment">// The receiver type may be an instantiated type referred to</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				<span class="comment">// by an alias (which cannot have receiver parameters for now).</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				if T.TypeArgs() != nil &amp;&amp; sig.RecvTypeParams() == nil {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>					check.errorf(recv, InvalidRecv, &#34;cannot define new methods on instantiated type %s&#34;, rtyp)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>					break
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				if T.obj.pkg != check.pkg {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>					check.errorf(recv, InvalidRecv, &#34;cannot define new methods on non-local type %s&#34;, rtyp)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>					break
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				var cause string
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				switch u := T.under().(type) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				case *Basic:
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>					<span class="comment">// unsafe.Pointer is treated like a regular pointer</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>					if u.kind == UnsafePointer {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>						cause = &#34;unsafe.Pointer&#34;
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>					}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>				case *Pointer, *Interface:
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>					cause = &#34;pointer or interface type&#34;
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>				case *TypeParam:
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>					<span class="comment">// The underlying type of a receiver base type cannot be a</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>					<span class="comment">// type parameter: &#34;type T[P any] P&#34; is not a valid declaration.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>					unreachable()
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>				}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>				if cause != &#34;&#34; {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>					check.errorf(recv, InvalidRecv, &#34;invalid receiver type %s (%s)&#34;, rtyp, cause)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>			case *Basic:
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>				check.errorf(recv, InvalidRecv, &#34;cannot define new methods on non-local type %s&#34;, rtyp)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			default:
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				check.errorf(recv, InvalidRecv, &#34;invalid receiver type %s&#34;, recv.typ)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		}).describef(recv, &#34;validate receiver %s&#34;, recv)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	sig.params = NewTuple(params...)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	sig.results = NewTuple(results...)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	sig.variadic = variadic
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// collectParams declares the parameters of list in scope and returns the corresponding</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// variable list.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>func (check *Checker) collectParams(scope *Scope, list *ast.FieldList, variadicOk bool, scopePos token.Pos) (params []*Var, variadic bool) {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if list == nil {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	var named, anonymous bool
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	for i, field := range list.List {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		ftype := field.Type
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		if t, _ := ftype.(*ast.Ellipsis); t != nil {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>			ftype = t.Elt
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			if variadicOk &amp;&amp; i == len(list.List)-1 &amp;&amp; len(field.Names) &lt;= 1 {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>				variadic = true
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			} else {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>				check.softErrorf(t, MisplacedDotDotDot, &#34;can only use ... with final parameter in list&#34;)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>				<span class="comment">// ignore ... and continue</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		typ := check.varType(ftype)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		<span class="comment">// The parser ensures that f.Tag is nil and we don&#39;t</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		<span class="comment">// care if a constructed AST contains a non-nil tag.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		if len(field.Names) &gt; 0 {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			<span class="comment">// named parameter</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			for _, name := range field.Names {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>				if name.Name == &#34;&#34; {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>					check.error(name, InvalidSyntaxTree, &#34;anonymous parameter&#34;)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>					<span class="comment">// ok to continue</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>				}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>				par := NewParam(name.Pos(), check.pkg, name.Name, typ)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>				check.declare(scope, name, par, scopePos)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>				params = append(params, par)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			named = true
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		} else {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			<span class="comment">// anonymous parameter</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			par := NewParam(ftype.Pos(), check.pkg, &#34;&#34;, typ)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			check.recordImplicit(field, par)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			params = append(params, par)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			anonymous = true
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if named &amp;&amp; anonymous {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		check.error(list, InvalidSyntaxTree, &#34;list contains both named and anonymous parameters&#34;)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// ok to continue</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// For a variadic function, change the last parameter&#39;s type from T to []T.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	<span class="comment">// Since we type-checked T rather than ...T, we also need to retro-actively</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	<span class="comment">// record the type for ...T.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	if variadic {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		last := params[len(params)-1]
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		last.typ = &amp;Slice{elem: last.typ}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		check.recordTypeAndValue(list.List[len(list.List)-1].Type, typexpr, last.typ, nil)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
</pre><p><a href="signature.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
