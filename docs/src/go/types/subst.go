<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/subst.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="subst.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">subst.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements type parameter substitution.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package types
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>type substMap map[*TypeParam]Type
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// makeSubstMap creates a new substitution map mapping tpars[i] to targs[i].</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// If targs[i] is nil, tpars[i] is not substituted.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func makeSubstMap(tpars []*TypeParam, targs []Type) substMap {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	assert(len(tpars) == len(targs))
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	proj := make(substMap, len(tpars))
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	for i, tpar := range tpars {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>		proj[tpar] = targs[i]
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	return proj
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// makeRenameMap is like makeSubstMap, but creates a map used to rename type</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// parameters in from with the type parameters in to.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>func makeRenameMap(from, to []*TypeParam) substMap {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	assert(len(from) == len(to))
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	proj := make(substMap, len(from))
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	for i, tpar := range from {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		proj[tpar] = to[i]
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	return proj
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (m substMap) empty() bool {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	return len(m) == 0
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (m substMap) lookup(tpar *TypeParam) Type {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if t := m[tpar]; t != nil {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return t
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	return tpar
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// subst returns the type typ with its type parameters tpars replaced by the</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// corresponding type arguments targs, recursively. subst doesn&#39;t modify the</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// incoming type. If a substitution took place, the result type is different</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// from the incoming type.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// If expanding is non-nil, it is the instance type currently being expanded.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// One of expanding or ctxt must be non-nil.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func (check *Checker) subst(pos token.Pos, typ Type, smap substMap, expanding *Named, ctxt *Context) Type {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	assert(expanding != nil || ctxt != nil)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if smap.empty() {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return typ
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// common cases</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	switch t := typ.(type) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	case *Basic:
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return typ <span class="comment">// nothing to do</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		return smap.lookup(t)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// general case</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	subst := subster{
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		pos:       pos,
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		smap:      smap,
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		check:     check,
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		expanding: expanding,
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		ctxt:      ctxt,
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return subst.typ(typ)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>type subster struct {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	pos       token.Pos
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	smap      substMap
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	check     *Checker <span class="comment">// nil if called via Instantiate</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	expanding *Named   <span class="comment">// if non-nil, the instance that is being expanded</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	ctxt      *Context
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (subst *subster) typ(typ Type) Type {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	switch t := typ.(type) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	case nil:
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		<span class="comment">// Call typOrNil if it&#39;s possible that typ is nil.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		panic(&#34;nil typ&#34;)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	case *Basic:
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	case *Alias:
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		rhs := subst.typ(t.fromRHS)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		if rhs != t.fromRHS {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			<span class="comment">// This branch cannot be reached because the RHS of an alias</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			<span class="comment">// may only contain type parameters of an enclosing function.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			<span class="comment">// Such function bodies are never &#34;instantiated&#34; and thus</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			<span class="comment">// substitution is not called on locally declared alias types.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) adjust once parameterized aliases are supported</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			panic(&#34;unreachable for unparameterized aliases&#34;)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			<span class="comment">// return subst.check.newAlias(t.obj, rhs)</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	case *Array:
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		elem := subst.typOrNil(t.elem)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		if elem != t.elem {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			return &amp;Array{len: t.len, elem: elem}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	case *Slice:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		elem := subst.typOrNil(t.elem)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		if elem != t.elem {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			return &amp;Slice{elem: elem}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	case *Struct:
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		if fields, copied := subst.varList(t.fields); copied {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			s := &amp;Struct{fields: fields, tags: t.tags}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			s.markComplete()
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			return s
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	case *Pointer:
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		base := subst.typ(t.base)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		if base != t.base {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			return &amp;Pointer{base: base}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	case *Tuple:
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return subst.tuple(t)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	case *Signature:
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// Preserve the receiver: it is handled during *Interface and *Named type</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		<span class="comment">// substitution.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		<span class="comment">// Naively doing the substitution here can lead to an infinite recursion in</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		<span class="comment">// the case where the receiver is an interface. For example, consider the</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// following declaration:</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		<span class="comment">//  type T[A any] struct { f interface{ m() } }</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		<span class="comment">// In this case, the type of f is an interface that is itself the receiver</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		<span class="comment">// type of all of its methods. Because we have no type name to break</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		<span class="comment">// cycles, substituting in the recv results in an infinite loop of</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		<span class="comment">// recv-&gt;interface-&gt;recv-&gt;interface-&gt;...</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		recv := t.recv
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		params := subst.tuple(t.params)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		results := subst.tuple(t.results)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		if params != t.params || results != t.results {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			return &amp;Signature{
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>				rparams: t.rparams,
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>				<span class="comment">// TODO(gri) why can&#39;t we nil out tparams here, rather than in instantiate?</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>				tparams: t.tparams,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>				<span class="comment">// instantiated signatures have a nil scope</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				recv:     recv,
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				params:   params,
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				results:  results,
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>				variadic: t.variadic,
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	case *Union:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		terms, copied := subst.termlist(t.terms)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		if copied {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			<span class="comment">// term list substitution may introduce duplicate terms (unlikely but possible).</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			<span class="comment">// This is ok; lazy type set computation will determine the actual type set</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			<span class="comment">// in normal form.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			return &amp;Union{terms}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	case *Interface:
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		methods, mcopied := subst.funcList(t.methods)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		embeddeds, ecopied := subst.typeList(t.embeddeds)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		if mcopied || ecopied {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			iface := subst.check.newInterface()
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			iface.embeddeds = embeddeds
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			iface.embedPos = t.embedPos
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			iface.implicit = t.implicit
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			assert(t.complete) <span class="comment">// otherwise we are copying incomplete data</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			iface.complete = t.complete
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			<span class="comment">// If we&#39;ve changed the interface type, we may need to replace its</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			<span class="comment">// receiver if the receiver type is the original interface. Receivers of</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			<span class="comment">// *Named type are replaced during named type expansion.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			<span class="comment">// Notably, it&#39;s possible to reach here and not create a new *Interface,</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			<span class="comment">// even though the receiver type may be parameterized. For example:</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			<span class="comment">//  type T[P any] interface{ m() }</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			<span class="comment">// In this case the interface will not be substituted here, because its</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			<span class="comment">// method signatures do not depend on the type parameter P, but we still</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			<span class="comment">// need to create new interface methods to hold the instantiated</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			<span class="comment">// receiver. This is handled by Named.expandUnderlying.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			iface.methods, _ = replaceRecvType(methods, t, iface)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			<span class="comment">// If check != nil, check.newInterface will have saved the interface for later completion.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			if subst.check == nil { <span class="comment">// golang/go#61561: all newly created interfaces must be completed</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>				iface.typeSet()
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			return iface
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	case *Map:
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		key := subst.typ(t.key)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		elem := subst.typ(t.elem)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		if key != t.key || elem != t.elem {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			return &amp;Map{key: key, elem: elem}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	case *Chan:
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		elem := subst.typ(t.elem)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		if elem != t.elem {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			return &amp;Chan{dir: t.dir, elem: elem}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	case *Named:
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		<span class="comment">// dump is for debugging</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		dump := func(string, ...interface{}) {}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		if subst.check != nil &amp;&amp; subst.check.conf._Trace {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>			subst.check.indent++
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>			defer func() {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>				subst.check.indent--
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			}()
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			dump = func(format string, args ...interface{}) {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				subst.check.trace(subst.pos, format, args...)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		<span class="comment">// subst is called during expansion, so in this function we need to be</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		<span class="comment">// careful not to call any methods that would cause t to be expanded: doing</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		<span class="comment">// so would result in deadlock.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		<span class="comment">// So we call t.Origin().TypeParams() rather than t.TypeParams().</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		orig := t.Origin()
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		n := orig.TypeParams().Len()
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		if n == 0 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			dump(&#34;&gt;&gt;&gt; %s is not parameterized&#34;, t)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			return t <span class="comment">// type is not parameterized</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		var newTArgs []Type
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		if t.TypeArgs().Len() != n {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			return Typ[Invalid] <span class="comment">// error reported elsewhere</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		<span class="comment">// already instantiated</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		dump(&#34;&gt;&gt;&gt; %s already instantiated&#34;, t)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		<span class="comment">// For each (existing) type argument targ, determine if it needs</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		<span class="comment">// to be substituted; i.e., if it is or contains a type parameter</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		<span class="comment">// that has a type argument for it.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		for i, targ := range t.TypeArgs().list() {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			dump(&#34;&gt;&gt;&gt; %d targ = %s&#34;, i, targ)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			new_targ := subst.typ(targ)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			if new_targ != targ {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>				dump(&#34;&gt;&gt;&gt; substituted %d targ %s =&gt; %s&#34;, i, targ, new_targ)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>				if newTArgs == nil {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>					newTArgs = make([]Type, n)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>					copy(newTArgs, t.TypeArgs().list())
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>				}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>				newTArgs[i] = new_targ
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if newTArgs == nil {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			dump(&#34;&gt;&gt;&gt; nothing to substitute in %s&#34;, t)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			return t <span class="comment">// nothing to substitute</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		<span class="comment">// Create a new instance and populate the context to avoid endless</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		<span class="comment">// recursion. The position used here is irrelevant because validation only</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		<span class="comment">// occurs on t (we don&#39;t call validType on named), but we use subst.pos to</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		<span class="comment">// help with debugging.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return subst.check.instance(subst.pos, orig, newTArgs, subst.expanding, subst.ctxt)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return subst.smap.lookup(t)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	default:
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		unreachable()
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	return typ
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// typOrNil is like typ but if the argument is nil it is replaced with Typ[Invalid].</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// A nil type may appear in pathological cases such as type T[P any] []func(_ T([]_))</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// where an array/slice element is accessed before it is set up.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (subst *subster) typOrNil(typ Type) Type {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	if typ == nil {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		return Typ[Invalid]
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return subst.typ(typ)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func (subst *subster) var_(v *Var) *Var {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if v != nil {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if typ := subst.typ(v.typ); typ != v.typ {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			return substVar(v, typ)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	return v
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func substVar(v *Var, typ Type) *Var {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	copy := *v
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	copy.typ = typ
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	copy.origin = v.Origin()
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	return &amp;copy
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func (subst *subster) tuple(t *Tuple) *Tuple {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if t != nil {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		if vars, copied := subst.varList(t.vars); copied {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			return &amp;Tuple{vars: vars}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	return t
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>func (subst *subster) varList(in []*Var) (out []*Var, copied bool) {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	out = in
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	for i, v := range in {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		if w := subst.var_(v); w != v {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			if !copied {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				<span class="comment">// first variable that got substituted =&gt; allocate new out slice</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				<span class="comment">// and copy all variables</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>				new := make([]*Var, len(in))
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>				copy(new, out)
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>				out = new
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>				copied = true
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			out[i] = w
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	return
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>func (subst *subster) func_(f *Func) *Func {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if f != nil {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		if typ := subst.typ(f.typ); typ != f.typ {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>			return substFunc(f, typ)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return f
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>func substFunc(f *Func, typ Type) *Func {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	copy := *f
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	copy.typ = typ
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	copy.origin = f.Origin()
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	return &amp;copy
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func (subst *subster) funcList(in []*Func) (out []*Func, copied bool) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	out = in
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	for i, f := range in {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		if g := subst.func_(f); g != f {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			if !copied {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				<span class="comment">// first function that got substituted =&gt; allocate new out slice</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				<span class="comment">// and copy all functions</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				new := make([]*Func, len(in))
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				copy(new, out)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>				out = new
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				copied = true
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			out[i] = g
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	return
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>func (subst *subster) typeList(in []Type) (out []Type, copied bool) {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	out = in
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	for i, t := range in {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		if u := subst.typ(t); u != t {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			if !copied {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>				<span class="comment">// first function that got substituted =&gt; allocate new out slice</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>				<span class="comment">// and copy all functions</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>				new := make([]Type, len(in))
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				copy(new, out)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				out = new
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>				copied = true
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			out[i] = u
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	return
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func (subst *subster) termlist(in []*Term) (out []*Term, copied bool) {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	out = in
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	for i, t := range in {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		if u := subst.typ(t.typ); u != t.typ {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			if !copied {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				<span class="comment">// first function that got substituted =&gt; allocate new out slice</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				<span class="comment">// and copy all functions</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				new := make([]*Term, len(in))
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				copy(new, out)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				out = new
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				copied = true
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			out[i] = NewTerm(t.tilde, u)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	return
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// replaceRecvType updates any function receivers that have type old to have</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// type new. It does not modify the input slice; if modifications are required,</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// the input slice and any affected signatures will be copied before mutating.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// The resulting out slice contains the updated functions, and copied reports</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// if anything was modified.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>func replaceRecvType(in []*Func, old, new Type) (out []*Func, copied bool) {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	out = in
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	for i, method := range in {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		sig := method.Type().(*Signature)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		if sig.recv != nil &amp;&amp; sig.recv.Type() == old {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			if !copied {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>				<span class="comment">// Allocate a new methods slice before mutating for the first time.</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>				<span class="comment">// This is defensive, as we may share methods across instantiations of</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>				<span class="comment">// a given interface type if they do not get substituted.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				out = make([]*Func, len(in))
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>				copy(out, in)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>				copied = true
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			newsig := *sig
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			newsig.recv = substVar(sig.recv, new)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			out[i] = substFunc(method, &amp;newsig)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	return
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
</pre><p><a href="subst.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
