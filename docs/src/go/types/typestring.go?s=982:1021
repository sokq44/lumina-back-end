<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/typestring.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./typestring.go?s=982:1021#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">typestring.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements printing of types.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// A Qualifier controls how named package-level objects are printed in</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// calls to [TypeString], [ObjectString], and [SelectionString].</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// These three formatting routines call the Qualifier for each</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// package-level object O, and if the Qualifier returns a non-empty</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// string p, the object is printed in the form p.O.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// If it returns an empty string, only the object name O is printed.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Using a nil Qualifier is equivalent to using (*[Package]).Path: the</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// object is qualified by the import path, e.g., &#34;encoding/json.Marshal&#34;.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Qualifier func(*Package) string
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// RelativeTo returns a [Qualifier] that fully qualifies members of</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// all packages other than pkg.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="selection">func RelativeTo(pkg *Package) Qualifier</span> {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	if pkg == nil {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		return nil
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	return func(other *Package) string {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		if pkg == other {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>			return &#34;&#34; <span class="comment">// same package; unqualified</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		return other.Path()
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// TypeString returns the string representation of typ.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// The [Qualifier] controls the printing of</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// package-level objects, and may be nil.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func TypeString(typ Type, qf Qualifier) string {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	WriteType(&amp;buf, typ, qf)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	return buf.String()
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// WriteType writes the string representation of typ to buf.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// The [Qualifier] controls the printing of</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// package-level objects, and may be nil.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func WriteType(buf *bytes.Buffer, typ Type, qf Qualifier) {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	newTypeWriter(buf, qf).typ(typ)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// WriteSignature writes the representation of the signature sig to buf,</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// without a leading &#34;func&#34; keyword. The [Qualifier] controls the printing</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// of package-level objects, and may be nil.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func WriteSignature(buf *bytes.Buffer, sig *Signature, qf Qualifier) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	newTypeWriter(buf, qf).signature(sig)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>type typeWriter struct {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	buf          *bytes.Buffer
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	seen         map[Type]bool
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	qf           Qualifier
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	ctxt         *Context       <span class="comment">// if non-nil, we are type hashing</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	tparams      *TypeParamList <span class="comment">// local type parameters</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	paramNames   bool           <span class="comment">// if set, write function parameter names, otherwise, write types only</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	tpSubscripts bool           <span class="comment">// if set, write type parameter indices as subscripts</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	pkgInfo      bool           <span class="comment">// package-annotate first unexported-type field to avoid confusing type description</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>func newTypeWriter(buf *bytes.Buffer, qf Qualifier) *typeWriter {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return &amp;typeWriter{buf, make(map[Type]bool), qf, nil, nil, true, false, false}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func newTypeHasher(buf *bytes.Buffer, ctxt *Context) *typeWriter {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	assert(ctxt != nil)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	return &amp;typeWriter{buf, make(map[Type]bool), nil, ctxt, nil, false, false, false}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (w *typeWriter) byte(b byte) {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if w.ctxt != nil {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		if b == &#39; &#39; {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			b = &#39;#&#39;
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		w.buf.WriteByte(b)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		return
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	w.buf.WriteByte(b)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if b == &#39;,&#39; || b == &#39;;&#39; {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		w.buf.WriteByte(&#39; &#39;)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>func (w *typeWriter) string(s string) {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	w.buf.WriteString(s)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>func (w *typeWriter) error(msg string) {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	if w.ctxt != nil {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		panic(msg)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	w.buf.WriteString(&#34;&lt;&#34; + msg + &#34;&gt;&#34;)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (w *typeWriter) typ(typ Type) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	if w.seen[typ] {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		w.error(&#34;cycle to &#34; + goTypeName(typ))
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	w.seen[typ] = true
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	defer delete(w.seen, typ)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	switch t := typ.(type) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	case nil:
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		w.error(&#34;nil&#34;)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	case *Basic:
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		<span class="comment">// exported basic types go into package unsafe</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		<span class="comment">// (currently this is just unsafe.Pointer)</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if token.IsExported(t.name) {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			if obj, _ := Unsafe.scope.Lookup(t.name).(*TypeName); obj != nil {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>				w.typeName(obj)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				break
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		w.string(t.name)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	case *Array:
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		w.byte(&#39;[&#39;)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		w.string(strconv.FormatInt(t.len, 10))
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		w.byte(&#39;]&#39;)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	case *Slice:
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		w.string(&#34;[]&#34;)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	case *Struct:
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		w.string(&#34;struct{&#34;)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		for i, f := range t.fields {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>				w.byte(&#39;;&#39;)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			<span class="comment">// If disambiguating one struct for another, look for the first unexported field.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			<span class="comment">// Do this first in case of nested structs; tag the first-outermost field.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			pkgAnnotate := false
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			if w.qf == nil &amp;&amp; w.pkgInfo &amp;&amp; !token.IsExported(f.name) {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>				<span class="comment">// note for embedded types, type name is field name, and &#34;string&#34; etc are lower case hence unexported.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>				pkgAnnotate = true
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>				w.pkgInfo = false <span class="comment">// only tag once</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			<span class="comment">// This doesn&#39;t do the right thing for embedded type</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			<span class="comment">// aliases where we should print the alias name, not</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			<span class="comment">// the aliased type (see go.dev/issue/44410).</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			if !f.embedded {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>				w.string(f.name)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>				w.byte(&#39; &#39;)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			w.typ(f.typ)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			if pkgAnnotate {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>				w.string(&#34; /* package &#34;)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>				w.string(f.pkg.Path())
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>				w.string(&#34; */ &#34;)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			if tag := t.Tag(i); tag != &#34;&#34; {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>				w.byte(&#39; &#39;)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>				<span class="comment">// TODO(rfindley) If tag contains blanks, replacing them with &#39;#&#39;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>				<span class="comment">//                in Context.TypeHash may produce another tag</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				<span class="comment">//                accidentally.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>				w.string(strconv.Quote(tag))
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		w.byte(&#39;}&#39;)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	case *Pointer:
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		w.byte(&#39;*&#39;)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		w.typ(t.base)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	case *Tuple:
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		w.tuple(t, false)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	case *Signature:
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		w.string(&#34;func&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		w.signature(t)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	case *Union:
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">// Unions only appear as (syntactic) embedded elements</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		<span class="comment">// in interfaces and syntactically cannot be empty.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		if t.Len() == 0 {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			w.error(&#34;empty union&#34;)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			break
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		for i, t := range t.terms {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>				w.string(termSep)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			if t.tilde {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>				w.byte(&#39;~&#39;)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			w.typ(t.typ)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	case *Interface:
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if w.ctxt == nil {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			if t == universeAny.Type() {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				<span class="comment">// When not hashing, we can try to improve type strings by writing &#34;any&#34;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				<span class="comment">// for a type that is pointer-identical to universeAny. This logic should</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				<span class="comment">// be deprecated by more robust handling for aliases.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>				w.string(&#34;any&#34;)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				break
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			if t == asNamed(universeComparable.Type()).underlying {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				w.string(&#34;interface{comparable}&#34;)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>				break
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if t.implicit {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			if len(t.methods) == 0 &amp;&amp; len(t.embeddeds) == 1 {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				w.typ(t.embeddeds[0])
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				break
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			<span class="comment">// Something&#39;s wrong with the implicit interface.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			<span class="comment">// Print it as such and continue.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			w.string(&#34;/* implicit */ &#34;)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		w.string(&#34;interface{&#34;)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		first := true
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if w.ctxt != nil {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			w.typeSet(t.typeSet())
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		} else {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			for _, m := range t.methods {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>				if !first {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>					w.byte(&#39;;&#39;)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				first = false
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				w.string(m.name)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				w.signature(m.typ.(*Signature))
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			for _, typ := range t.embeddeds {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				if !first {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>					w.byte(&#39;;&#39;)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>				}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>				first = false
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>				w.typ(typ)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		w.byte(&#39;}&#39;)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	case *Map:
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		w.string(&#34;map[&#34;)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		w.typ(t.key)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		w.byte(&#39;]&#39;)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	case *Chan:
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		var s string
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		var parens bool
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		switch t.dir {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		case SendRecv:
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			s = &#34;chan &#34;
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			<span class="comment">// chan (&lt;-chan T) requires parentheses</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			if c, _ := t.elem.(*Chan); c != nil &amp;&amp; c.dir == RecvOnly {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>				parens = true
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		case SendOnly:
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			s = &#34;chan&lt;- &#34;
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		case RecvOnly:
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			s = &#34;&lt;-chan &#34;
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		default:
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			w.error(&#34;unknown channel direction&#34;)
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		w.string(s)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if parens {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			w.byte(&#39;(&#39;)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		w.typ(t.elem)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if parens {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			w.byte(&#39;)&#39;)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	case *Named:
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		<span class="comment">// If hashing, write a unique prefix for t to represent its identity, since</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		<span class="comment">// named type identity is pointer identity.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		if w.ctxt != nil {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			w.string(strconv.Itoa(w.ctxt.getID(t)))
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		w.typeName(t.obj) <span class="comment">// when hashing written for readability of the hash only</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		if t.inst != nil {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			<span class="comment">// instantiated type</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			w.typeList(t.inst.targs.list())
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		} else if w.ctxt == nil &amp;&amp; t.TypeParams().Len() != 0 { <span class="comment">// For type hashing, don&#39;t need to format the TypeParams</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			<span class="comment">// parameterized type</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			w.tParamList(t.TypeParams().list())
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		if t.obj == nil {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			w.error(&#34;unnamed type parameter&#34;)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			break
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		if i := tparamIndex(w.tparams.list(), t); i &gt;= 0 {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			<span class="comment">// The names of type parameters that are declared by the type being</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			<span class="comment">// hashed are not part of the type identity. Replace them with a</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			<span class="comment">// placeholder indicating their index.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			w.string(fmt.Sprintf(&#34;$%d&#34;, i))
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		} else {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			w.string(t.obj.name)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			if w.tpSubscripts || w.ctxt != nil {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>				w.string(subscript(t.id))
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			<span class="comment">// If the type parameter name is the same as a predeclared object</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			<span class="comment">// (say int), point out where it is declared to avoid confusing</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			<span class="comment">// error messages. This doesn&#39;t need to be super-elegant; we just</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			<span class="comment">// need a clear indication that this is not a predeclared name.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			<span class="comment">// Note: types2 prints position information here - we can&#39;t do</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			<span class="comment">//       that because we don&#39;t have a token.FileSet accessible.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			if w.ctxt == nil &amp;&amp; Universe.Lookup(t.obj.name) != nil {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>				w.string(&#34;/* type parameter */&#34;)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	case *Alias:
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		w.typeName(t.obj)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		if w.ctxt != nil {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			<span class="comment">// TODO(gri) do we need to print the alias type name, too?</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			w.typ(Unalias(t.obj.typ))
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	default:
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		<span class="comment">// For externally defined implementations of Type.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// Note: In this case cycles won&#39;t be caught.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		w.string(t.String())
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// typeSet writes a canonical hash for an interface type set.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>func (w *typeWriter) typeSet(s *_TypeSet) {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	assert(w.ctxt != nil)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	first := true
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	for _, m := range s.methods {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		if !first {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			w.byte(&#39;;&#39;)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		first = false
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		w.string(m.name)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		w.signature(m.typ.(*Signature))
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	switch {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	case s.terms.isAll():
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	case s.terms.isEmpty():
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		w.string(s.terms.String())
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	default:
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		var termHashes []string
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		for _, term := range s.terms {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			<span class="comment">// terms are not canonically sorted, so we sort their hashes instead.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			var buf bytes.Buffer
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			if term.tilde {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				buf.WriteByte(&#39;~&#39;)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			newTypeHasher(&amp;buf, w.ctxt).typ(term.typ)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			termHashes = append(termHashes, buf.String())
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		sort.Strings(termHashes)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		if !first {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			w.byte(&#39;;&#39;)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		w.string(strings.Join(termHashes, &#34;|&#34;))
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func (w *typeWriter) typeList(list []Type) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	w.byte(&#39;[&#39;)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	for i, typ := range list {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			w.byte(&#39;,&#39;)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		w.typ(typ)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	w.byte(&#39;]&#39;)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>func (w *typeWriter) tParamList(list []*TypeParam) {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	w.byte(&#39;[&#39;)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	var prev Type
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	for i, tpar := range list {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		<span class="comment">// Determine the type parameter and its constraint.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		<span class="comment">// list is expected to hold type parameter names,</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		<span class="comment">// but don&#39;t crash if that&#39;s not the case.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		if tpar == nil {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			w.error(&#34;nil type parameter&#34;)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			continue
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			if tpar.bound != prev {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				<span class="comment">// bound changed - write previous one before advancing</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				w.byte(&#39; &#39;)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				w.typ(prev)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			w.byte(&#39;,&#39;)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		prev = tpar.bound
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		w.typ(tpar)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	if prev != nil {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		w.byte(&#39; &#39;)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		w.typ(prev)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	w.byte(&#39;]&#39;)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>func (w *typeWriter) typeName(obj *TypeName) {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	w.string(packagePrefix(obj.pkg, w.qf))
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	w.string(obj.name)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>func (w *typeWriter) tuple(tup *Tuple, variadic bool) {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	w.byte(&#39;(&#39;)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if tup != nil {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		for i, v := range tup.vars {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			if i &gt; 0 {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				w.byte(&#39;,&#39;)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>			}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>			<span class="comment">// parameter names are ignored for type identity and thus type hashes</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			if w.ctxt == nil &amp;&amp; v.name != &#34;&#34; &amp;&amp; w.paramNames {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>				w.string(v.name)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>				w.byte(&#39; &#39;)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			typ := v.typ
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			if variadic &amp;&amp; i == len(tup.vars)-1 {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>				if s, ok := typ.(*Slice); ok {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					w.string(&#34;...&#34;)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>					typ = s.elem
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				} else {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>					<span class="comment">// special case:</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>					<span class="comment">// append(s, &#34;foo&#34;...) leads to signature func([]byte, string...)</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>					if t, _ := under(typ).(*Basic); t == nil || t.kind != String {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>						w.error(&#34;expected string type&#34;)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>						continue
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>					}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>					w.typ(typ)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>					w.string(&#34;...&#34;)
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>					continue
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			w.typ(typ)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	w.byte(&#39;)&#39;)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>func (w *typeWriter) signature(sig *Signature) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	if sig.TypeParams().Len() != 0 {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		if w.ctxt != nil {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			assert(w.tparams == nil)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			w.tparams = sig.TypeParams()
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			defer func() {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				w.tparams = nil
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			}()
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		w.tParamList(sig.TypeParams().list())
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	w.tuple(sig.params, sig.variadic)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	n := sig.results.Len()
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if n == 0 {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		<span class="comment">// no result</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		return
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	w.byte(&#39; &#39;)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if n == 1 &amp;&amp; (w.ctxt != nil || sig.results.vars[0].name == &#34;&#34;) {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		<span class="comment">// single unnamed result (if type hashing, name must be ignored)</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		w.typ(sig.results.vars[0].typ)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		return
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// multiple or named result(s)</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	w.tuple(sig.results, false)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// subscript returns the decimal (utf8) representation of x using subscript digits.</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>func subscript(x uint64) string {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	const w = len(&#34;₀&#34;) <span class="comment">// all digits 0...9 have the same utf8 width</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	var buf [32 * w]byte
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	i := len(buf)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	for {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		i -= w
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		utf8.EncodeRune(buf[i:], &#39;₀&#39;+rune(x%10)) <span class="comment">// &#39;₀&#39; == U+2080</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		x /= 10
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		if x == 0 {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			break
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	return string(buf[i:])
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
</pre><p><a href="typestring.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
