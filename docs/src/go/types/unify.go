<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/unify.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="unify.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">unify.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2020 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements type unification.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Type unification attempts to make two types x and y structurally</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// equivalent by determining the types for a given list of (bound)</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// type parameters which may occur within x and y. If x and y are</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// structurally different (say []T vs chan T), or conflicting</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// types are determined for type parameters, unification fails.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// If unification succeeds, as a side-effect, the types of the</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// bound type parameters may be determined.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Unification typically requires multiple calls u.unify(x, y) to</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// a given unifier u, with various combinations of types x and y.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// In each call, additional type parameter types may be determined</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// as a side effect and recorded in u.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// If a call fails (returns false), unification fails.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// In the unification context, structural equivalence of two types</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// ignores the difference between a defined type and its underlying</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// type if one type is a defined type and the other one is not.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// It also ignores the difference between an (external, unbound)</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// type parameter and its core type.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// If two types are not structurally equivalent, they cannot be Go</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// identical types. On the other hand, if they are structurally</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// equivalent, they may be Go identical or at least assignable, or</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// they may be in the type set of a constraint.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// Whether they indeed are identical or assignable is determined</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// upon instantiation and function argument passing.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>package types
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>import (
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>)
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>const (
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// Upper limit for recursion depth. Used to catch infinite recursions</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// due to implementation issues (e.g., see issues go.dev/issue/48619, go.dev/issue/48656).</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	unificationDepthLimit = 50
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// Whether to panic when unificationDepthLimit is reached.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// If disabled, a recursion depth overflow results in a (quiet)</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// unification failure.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	panicAtUnificationDepthLimit = true
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// If enableCoreTypeUnification is set, unification will consider</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// the core types, if any, of non-local (unbound) type parameters.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	enableCoreTypeUnification = true
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// If traceInference is set, unification will print a trace of its operation.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// Interpretation of trace:</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">//   x ≡ y    attempt to unify types x and y</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">//   p ➞ y    type parameter p is set to type y (p is inferred to be y)</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">//   p ⇄ q    type parameters p and q match (p is inferred to be q and vice versa)</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">//   x ≢ y    types x and y cannot be unified</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">//   [p, q, ...] ➞ [x, y, ...]    mapping from type parameters to types</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	traceInference = false
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// A unifier maintains a list of type parameters and</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// corresponding types inferred for each type parameter.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// A unifier is created by calling newUnifier.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type unifier struct {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// handles maps each type parameter to its inferred type through</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// an indirection *Type called (inferred type) &#34;handle&#34;.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// Initially, each type parameter has its own, separate handle,</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// with a nil (i.e., not yet inferred) type.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// After a type parameter P is unified with a type parameter Q,</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// P and Q share the same handle (and thus type). This ensures</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// that inferring the type for a given type parameter P will</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// automatically infer the same type for all other parameters</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// unified (joined) with P.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	handles                  map[*TypeParam]*Type
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	depth                    int  <span class="comment">// recursion depth during unification</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	enableInterfaceInference bool <span class="comment">// use shared methods for better inference</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// newUnifier returns a new unifier initialized with the given type parameter</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// and corresponding type argument lists. The type argument list may be shorter</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// than the type parameter list, and it may contain nil types. Matching type</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// parameters and arguments must have the same index.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>func newUnifier(tparams []*TypeParam, targs []Type, enableInterfaceInference bool) *unifier {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	assert(len(tparams) &gt;= len(targs))
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	handles := make(map[*TypeParam]*Type, len(tparams))
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// Allocate all handles up-front: in a correct program, all type parameters</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// must be resolved and thus eventually will get a handle.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// Also, sharing of handles caused by unified type parameters is rare and</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// so it&#39;s ok to not optimize for that case (and delay handle allocation).</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	for i, x := range tparams {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		var t Type
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if i &lt; len(targs) {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			t = targs[i]
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		handles[x] = &amp;t
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return &amp;unifier{handles, 0, enableInterfaceInference}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// unifyMode controls the behavior of the unifier.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>type unifyMode uint
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>const (
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// If assign is set, we are unifying types involved in an assignment:</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// they may match inexactly at the top, but element types must match</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// exactly.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	assign unifyMode = 1 &lt;&lt; iota
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// If exact is set, types unify if they are identical (or can be</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// made identical with suitable arguments for type parameters).</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, a named type and a type literal unify if their</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// underlying types unify, channel directions are ignored, and</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// if there is an interface, the other type must implement the</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// interface.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	exact
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func (m unifyMode) String() string {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	switch m {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	case 0:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		return &#34;inexact&#34;
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	case assign:
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		return &#34;assign&#34;
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	case exact:
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		return &#34;exact&#34;
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	case assign | exact:
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		return &#34;assign, exact&#34;
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;mode %d&#34;, m)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// unify attempts to unify x and y and reports whether it succeeded.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// As a side-effect, types may be inferred for type parameters.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// The mode parameter controls how types are compared.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>func (u *unifier) unify(x, y Type, mode unifyMode) bool {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return u.nify(x, y, mode, nil)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func (u *unifier) tracef(format string, args ...interface{}) {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	fmt.Println(strings.Repeat(&#34;.  &#34;, u.depth) + sprintf(nil, nil, true, format, args...))
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// String returns a string representation of the current mapping</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// from type parameters to types.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func (u *unifier) String() string {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// sort type parameters for reproducible strings</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	tparams := make(typeParamsById, len(u.handles))
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	i := 0
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	for tpar := range u.handles {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		tparams[i] = tpar
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		i++
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	sort.Sort(tparams)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	w := newTypeWriter(&amp;buf, nil)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	w.byte(&#39;[&#39;)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	for i, x := range tparams {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			w.string(&#34;, &#34;)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		w.typ(x)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		w.string(&#34;: &#34;)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		w.typ(u.at(x))
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	w.byte(&#39;]&#39;)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return buf.String()
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>type typeParamsById []*TypeParam
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (s typeParamsById) Len() int           { return len(s) }
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (s typeParamsById) Less(i, j int) bool { return s[i].id &lt; s[j].id }
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func (s typeParamsById) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// join unifies the given type parameters x and y.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// If both type parameters already have a type associated with them</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// and they are not joined, join fails and returns false.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func (u *unifier) join(x, y *TypeParam) bool {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if traceInference {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		u.tracef(&#34;%s ⇄ %s&#34;, x, y)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	switch hx, hy := u.handles[x], u.handles[y]; {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	case hx == hy:
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		<span class="comment">// Both type parameters already share the same handle. Nothing to do.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	case *hx != nil &amp;&amp; *hy != nil:
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		<span class="comment">// Both type parameters have (possibly different) inferred types. Cannot join.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		return false
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	case *hx != nil:
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">// Only type parameter x has an inferred type. Use handle of x.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		u.setHandle(y, hx)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// This case is treated like the default case.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// case *hy != nil:</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// 	// Only type parameter y has an inferred type. Use handle of y.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">//	u.setHandle(x, hy)</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	default:
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		<span class="comment">// Neither type parameter has an inferred type. Use handle of y.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		u.setHandle(x, hy)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return true
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// asTypeParam returns x.(*TypeParam) if x is a type parameter recorded with u.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Otherwise, the result is nil.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (u *unifier) asTypeParam(x Type) *TypeParam {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if x, _ := x.(*TypeParam); x != nil {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		if _, found := u.handles[x]; found {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			return x
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return nil
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// setHandle sets the handle for type parameter x</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// (and all its joined type parameters) to h.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (u *unifier) setHandle(x *TypeParam, h *Type) {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	hx := u.handles[x]
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	assert(hx != nil)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	for y, hy := range u.handles {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if hy == hx {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			u.handles[y] = h
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// at returns the (possibly nil) type for type parameter x.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func (u *unifier) at(x *TypeParam) Type {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	return *u.handles[x]
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// set sets the type t for type parameter x;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// t must not be nil.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>func (u *unifier) set(x *TypeParam, t Type) {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	assert(t != nil)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if traceInference {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		u.tracef(&#34;%s ➞ %s&#34;, x, t)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	*u.handles[x] = t
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// unknowns returns the number of type parameters for which no type has been set yet.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func (u *unifier) unknowns() int {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	n := 0
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	for _, h := range u.handles {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if *h == nil {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			n++
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	return n
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// inferred returns the list of inferred types for the given type parameter list.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// The result is never nil and has the same length as tparams; result types that</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// could not be inferred are nil. Corresponding type parameters and result types</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// have identical indices.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (u *unifier) inferred(tparams []*TypeParam) []Type {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	list := make([]Type, len(tparams))
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	for i, x := range tparams {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		list[i] = u.at(x)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	return list
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// asInterface returns the underlying type of x as an interface if</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// it is a non-type parameter interface. Otherwise it returns nil.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func asInterface(x Type) (i *Interface) {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	if _, ok := x.(*TypeParam); !ok {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		i, _ = under(x).(*Interface)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	return i
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// nify implements the core unification algorithm which is an</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// adapted version of Checker.identical. For changes to that</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// code the corresponding changes should be made here.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// Must not be called directly from outside the unifier.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>func (u *unifier) nify(x, y Type, mode unifyMode, p *ifacePair) (result bool) {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	u.depth++
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	if traceInference {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		u.tracef(&#34;%s ≡ %s\t// %s&#34;, x, y, mode)
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	defer func() {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if traceInference &amp;&amp; !result {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			u.tracef(&#34;%s ≢ %s&#34;, x, y)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		u.depth--
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}()
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	x = Unalias(x)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	y = Unalias(y)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// nothing to do if x == y</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if x == y {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return true
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// Stop gap for cases where unification fails.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if u.depth &gt; unificationDepthLimit {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if traceInference {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			u.tracef(&#34;depth %d &gt;= %d&#34;, u.depth, unificationDepthLimit)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		if panicAtUnificationDepthLimit {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			panic(&#34;unification reached recursion depth limit&#34;)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		return false
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	<span class="comment">// Unification is symmetric, so we can swap the operands.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	<span class="comment">// Ensure that if we have at least one</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// - defined type, make sure one is in y</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// - type parameter recorded with u, make sure one is in x</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if asNamed(x) != nil || u.asTypeParam(y) != nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		if traceInference {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			u.tracef(&#34;%s ≡ %s\t// swap&#34;, y, x)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		x, y = y, x
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// Unification will fail if we match a defined type against a type literal.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// If we are matching types in an assignment, at the top-level, types with</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// the same type structure are permitted as long as at least one of them</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	<span class="comment">// is not a defined type. To accommodate for that possibility, we continue</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// unification with the underlying type of a defined type if the other type</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// is a type literal. This is controlled by the exact unification mode.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// We also continue if the other type is a basic type because basic types</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	<span class="comment">// are valid underlying types and may appear as core types of type constraints.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// If we exclude them, inferred defined types for type parameters may not</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// match against the core types of their constraints (even though they might</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// correctly match against some of the types in the constraint&#39;s type set).</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// Finally, if unification (incorrectly) succeeds by matching the underlying</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	<span class="comment">// type of a defined type against a basic type (because we include basic types</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	<span class="comment">// as type literals here), and if that leads to an incorrectly inferred type,</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// we will fail at function instantiation or argument assignment time.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// If we have at least one defined type, there is one in y.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if ny := asNamed(y); mode&amp;exact == 0 &amp;&amp; ny != nil &amp;&amp; isTypeLit(x) &amp;&amp; !(u.enableInterfaceInference &amp;&amp; IsInterface(x)) {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		if traceInference {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			u.tracef(&#34;%s ≡ under %s&#34;, x, ny)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		y = ny.under()
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		<span class="comment">// Per the spec, a defined type cannot have an underlying type</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		<span class="comment">// that is a type parameter.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		assert(!isTypeParam(y))
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		<span class="comment">// x and y may be identical now</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		if x == y {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			return true
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// Cases where at least one of x or y is a type parameter recorded with u.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// If we have at least one type parameter, there is one in x.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// If we have exactly one type parameter, because it is in x,</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// isTypeLit(x) is false and y was not changed above. In other</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// words, if y was a defined type, it is still a defined type</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">// (relevant for the logic below).</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	switch px, py := u.asTypeParam(x), u.asTypeParam(y); {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	case px != nil &amp;&amp; py != nil:
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		<span class="comment">// both x and y are type parameters</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		if u.join(px, py) {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			return true
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		<span class="comment">// both x and y have an inferred type - they must match</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		return u.nify(u.at(px), u.at(py), mode, p)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	case px != nil:
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		<span class="comment">// x is a type parameter, y is not</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		if x := u.at(px); x != nil {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			<span class="comment">// x has an inferred type which must match y</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			if u.nify(x, y, mode, p) {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>				<span class="comment">// We have a match, possibly through underlying types.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>				xi := asInterface(x)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				yi := asInterface(y)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				xn := asNamed(x) != nil
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				yn := asNamed(y) != nil
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				<span class="comment">// If we have two interfaces, what to do depends on</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				<span class="comment">// whether they are named and their method sets.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				if xi != nil &amp;&amp; yi != nil {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>					<span class="comment">// Both types are interfaces.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>					<span class="comment">// If both types are defined types, they must be identical</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>					<span class="comment">// because unification doesn&#39;t know which type has the &#34;right&#34; name.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>					if xn &amp;&amp; yn {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>						return Identical(x, y)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>					}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>					<span class="comment">// In all other cases, the method sets must match.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>					<span class="comment">// The types unified so we know that corresponding methods</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>					<span class="comment">// match and we can simply compare the number of methods.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>					<span class="comment">// TODO(gri) We may be able to relax this rule and select</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>					<span class="comment">// the more general interface. But if one of them is a defined</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>					<span class="comment">// type, it&#39;s not clear how to choose and whether we introduce</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>					<span class="comment">// an order dependency or not. Requiring the same method set</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>					<span class="comment">// is conservative.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>					if len(xi.typeSet().methods) != len(yi.typeSet().methods) {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>						return false
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>					}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>				} else if xi != nil || yi != nil {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>					<span class="comment">// One but not both of them are interfaces.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>					<span class="comment">// In this case, either x or y could be viable matches for the corresponding</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>					<span class="comment">// type parameter, which means choosing either introduces an order dependence.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>					<span class="comment">// Therefore, we must fail unification (go.dev/issue/60933).</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>					return false
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				<span class="comment">// If we have inexact unification and one of x or y is a defined type, select the</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				<span class="comment">// defined type. This ensures that in a series of types, all matching against the</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				<span class="comment">// same type parameter, we infer a defined type if there is one, independent of</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				<span class="comment">// order. Type inference or assignment may fail, which is ok.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				<span class="comment">// Selecting a defined type, if any, ensures that we don&#39;t lose the type name;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				<span class="comment">// and since we have inexact unification, a value of equally named or matching</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				<span class="comment">// undefined type remains assignable (go.dev/issue/43056).</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				<span class="comment">// Similarly, if we have inexact unification and there are no defined types but</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				<span class="comment">// channel types, select a directed channel, if any. This ensures that in a series</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>				<span class="comment">// of unnamed types, all matching against the same type parameter, we infer the</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>				<span class="comment">// directed channel if there is one, independent of order.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				<span class="comment">// Selecting a directional channel, if any, ensures that a value of another</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>				<span class="comment">// inexactly unifying channel type remains assignable (go.dev/issue/62157).</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>				<span class="comment">// If we have multiple defined channel types, they are either identical or we</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>				<span class="comment">// have assignment conflicts, so we can ignore directionality in this case.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				<span class="comment">// If we have defined and literal channel types, a defined type wins to avoid</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>				<span class="comment">// order dependencies.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>				if mode&amp;exact == 0 {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>					switch {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>					case xn:
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>						<span class="comment">// x is a defined type: nothing to do.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>					case yn:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>						<span class="comment">// x is not a defined type and y is a defined type: select y.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>						u.set(px, y)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>					default:
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>						<span class="comment">// Neither x nor y are defined types.</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>						if yc, _ := under(y).(*Chan); yc != nil &amp;&amp; yc.dir != SendRecv {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>							<span class="comment">// y is a directed channel type: select y.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>							u.set(px, y)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>						}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				return true
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			return false
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// otherwise, infer type from y</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		u.set(px, y)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		return true
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	<span class="comment">// x != y if we get here</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	assert(x != y)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// If u.EnableInterfaceInference is set and we don&#39;t require exact unification,</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// if both types are interfaces, one interface must have a subset of the</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// methods of the other and corresponding method signatures must unify.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// If only one type is an interface, all its methods must be present in the</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	<span class="comment">// other type and corresponding method signatures must unify.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	if u.enableInterfaceInference &amp;&amp; mode&amp;exact == 0 {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		<span class="comment">// One or both interfaces may be defined types.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		<span class="comment">// Look under the name, but not under type parameters (go.dev/issue/60564).</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		xi := asInterface(x)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		yi := asInterface(y)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		<span class="comment">// If we have two interfaces, check the type terms for equivalence,</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		<span class="comment">// and unify common methods if possible.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		if xi != nil &amp;&amp; yi != nil {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			xset := xi.typeSet()
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			yset := yi.typeSet()
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			if xset.comparable != yset.comparable {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>				return false
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			<span class="comment">// For now we require terms to be equal.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			<span class="comment">// We should be able to relax this as well, eventually.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			if !xset.terms.equal(yset.terms) {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>				return false
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>			}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>			<span class="comment">// Interface types are the only types where cycles can occur</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>			<span class="comment">// that are not &#34;terminated&#34; via named types; and such cycles</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>			<span class="comment">// can only be created via method parameter types that are</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			<span class="comment">// anonymous interfaces (directly or indirectly) embedding</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			<span class="comment">// the current interface. Example:</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>			<span class="comment">//    type T interface {</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>			<span class="comment">//        m() interface{T}</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>			<span class="comment">//    }</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>			<span class="comment">// If two such (differently named) interfaces are compared,</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			<span class="comment">// endless recursion occurs if the cycle is not detected.</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>			<span class="comment">// If x and y were compared before, they must be equal</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			<span class="comment">// (if they were not, the recursion would have stopped);</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			<span class="comment">// search the ifacePair stack for the same pair.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>			<span class="comment">// This is a quadratic algorithm, but in practice these stacks</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			<span class="comment">// are extremely short (bounded by the nesting depth of interface</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			<span class="comment">// type declarations that recur via parameter types, an extremely</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			<span class="comment">// rare occurrence). An alternative implementation might use a</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			<span class="comment">// &#34;visited&#34; map, but that is probably less efficient overall.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			q := &amp;ifacePair{xi, yi, p}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			for p != nil {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>				if p.identical(q) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>					return true <span class="comment">// same pair was compared before</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>				}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>				p = p.prev
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			<span class="comment">// The method set of x must be a subset of the method set</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>			<span class="comment">// of y or vice versa, and the common methods must unify.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			xmethods := xset.methods
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			ymethods := yset.methods
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			<span class="comment">// The smaller method set must be the subset, if it exists.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			if len(xmethods) &gt; len(ymethods) {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>				xmethods, ymethods = ymethods, xmethods
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>			<span class="comment">// len(xmethods) &lt;= len(ymethods)</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>			<span class="comment">// Collect the ymethods in a map for quick lookup.</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>			ymap := make(map[string]*Func, len(ymethods))
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>			for _, ym := range ymethods {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				ymap[ym.Id()] = ym
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			<span class="comment">// All xmethods must exist in ymethods and corresponding signatures must unify.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			for _, xm := range xmethods {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>				if ym := ymap[xm.Id()]; ym == nil || !u.nify(xm.typ, ym.typ, exact, p) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>					return false
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>				}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			return true
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		<span class="comment">// We don&#39;t have two interfaces. If we have one, make sure it&#39;s in xi.</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		if yi != nil {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			xi = yi
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			y = x
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		<span class="comment">// If we have one interface, at a minimum each of the interface methods</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		<span class="comment">// must be implemented and thus unify with a corresponding method from</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		<span class="comment">// the non-interface type, otherwise unification fails.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		if xi != nil {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			<span class="comment">// All xi methods must exist in y and corresponding signatures must unify.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			xmethods := xi.typeSet().methods
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			for _, xm := range xmethods {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>				obj, _, _ := LookupFieldOrMethod(y, false, xm.pkg, xm.name)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>				if ym, _ := obj.(*Func); ym == nil || !u.nify(xm.typ, ym.typ, exact, p) {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>					return false
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			return true
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// Unless we have exact unification, neither x nor y are interfaces now.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	<span class="comment">// Except for unbound type parameters (see below), x and y must be structurally</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	<span class="comment">// equivalent to unify.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	<span class="comment">// If we get here and x or y is a type parameter, they are unbound</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	<span class="comment">// (not recorded with the unifier).</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	<span class="comment">// Ensure that if we have at least one type parameter, it is in x</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	<span class="comment">// (the earlier swap checks for _recorded_ type parameters only).</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	<span class="comment">// This ensures that the switch switches on the type parameter.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) Factor out type parameter handling from the switch.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	if isTypeParam(y) {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		if traceInference {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			u.tracef(&#34;%s ≡ %s\t// swap&#34;, y, x)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		x, y = y, x
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	<span class="comment">// Type elements (array, slice, etc. elements) use emode for unification.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	<span class="comment">// Element types must match exactly if the types are used in an assignment.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	emode := mode
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	if mode&amp;assign != 0 {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		emode |= exact
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	switch x := x.(type) {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	case *Basic:
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		<span class="comment">// Basic types are singletons except for the rune and byte</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		<span class="comment">// aliases, thus we cannot solely rely on the x == y check</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		<span class="comment">// above. See also comment in TypeName.IsAlias.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		if y, ok := y.(*Basic); ok {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			return x.kind == y.kind
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	case *Array:
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		<span class="comment">// Two array types unify if they have the same array length</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		<span class="comment">// and their element types unify.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		if y, ok := y.(*Array); ok {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			<span class="comment">// If one or both array lengths are unknown (&lt; 0) due to some error,</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			<span class="comment">// assume they are the same to avoid spurious follow-on errors.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			return (x.len &lt; 0 || y.len &lt; 0 || x.len == y.len) &amp;&amp; u.nify(x.elem, y.elem, emode, p)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	case *Slice:
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		<span class="comment">// Two slice types unify if their element types unify.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		if y, ok := y.(*Slice); ok {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			return u.nify(x.elem, y.elem, emode, p)
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		}
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	case *Struct:
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		<span class="comment">// Two struct types unify if they have the same sequence of fields,</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		<span class="comment">// and if corresponding fields have the same names, their (field) types unify,</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		<span class="comment">// and they have identical tags. Two embedded fields are considered to have the same</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		<span class="comment">// name. Lower-case field names from different packages are always different.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		if y, ok := y.(*Struct); ok {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			if x.NumFields() == y.NumFields() {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>				for i, f := range x.fields {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>					g := y.fields[i]
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>					if f.embedded != g.embedded ||
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>						x.Tag(i) != y.Tag(i) ||
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>						!f.sameId(g.pkg, g.name) ||
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>						!u.nify(f.typ, g.typ, emode, p) {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>						return false
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>					}
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>				}
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>				return true
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	case *Pointer:
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		<span class="comment">// Two pointer types unify if their base types unify.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		if y, ok := y.(*Pointer); ok {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			return u.nify(x.base, y.base, emode, p)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	case *Tuple:
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		<span class="comment">// Two tuples types unify if they have the same number of elements</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		<span class="comment">// and the types of corresponding elements unify.</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		if y, ok := y.(*Tuple); ok {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			if x.Len() == y.Len() {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>				if x != nil {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>					for i, v := range x.vars {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>						w := y.vars[i]
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>						if !u.nify(v.typ, w.typ, mode, p) {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>							return false
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>						}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>					}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>				}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				return true
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	case *Signature:
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		<span class="comment">// Two function types unify if they have the same number of parameters</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		<span class="comment">// and result values, corresponding parameter and result types unify,</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		<span class="comment">// and either both functions are variadic or neither is.</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		<span class="comment">// Parameter and result names are not required to match.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		<span class="comment">// TODO(gri) handle type parameters or document why we can ignore them.</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		if y, ok := y.(*Signature); ok {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>			return x.variadic == y.variadic &amp;&amp;
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>				u.nify(x.params, y.params, emode, p) &amp;&amp;
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>				u.nify(x.results, y.results, emode, p)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	case *Interface:
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		assert(!u.enableInterfaceInference || mode&amp;exact != 0) <span class="comment">// handled before this switch</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		<span class="comment">// Two interface types unify if they have the same set of methods with</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		<span class="comment">// the same names, and corresponding function types unify.</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		<span class="comment">// Lower-case method names from different packages are always different.</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		<span class="comment">// The order of the methods is irrelevant.</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		if y, ok := y.(*Interface); ok {
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			xset := x.typeSet()
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			yset := y.typeSet()
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			if xset.comparable != yset.comparable {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>				return false
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			if !xset.terms.equal(yset.terms) {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>				return false
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			a := xset.methods
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			b := yset.methods
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			if len(a) == len(b) {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>				<span class="comment">// Interface types are the only types where cycles can occur</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>				<span class="comment">// that are not &#34;terminated&#34; via named types; and such cycles</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>				<span class="comment">// can only be created via method parameter types that are</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>				<span class="comment">// anonymous interfaces (directly or indirectly) embedding</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>				<span class="comment">// the current interface. Example:</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>				<span class="comment">//    type T interface {</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>				<span class="comment">//        m() interface{T}</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>				<span class="comment">//    }</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>				<span class="comment">// If two such (differently named) interfaces are compared,</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				<span class="comment">// endless recursion occurs if the cycle is not detected.</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>				<span class="comment">// If x and y were compared before, they must be equal</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>				<span class="comment">// (if they were not, the recursion would have stopped);</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>				<span class="comment">// search the ifacePair stack for the same pair.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>				<span class="comment">// This is a quadratic algorithm, but in practice these stacks</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>				<span class="comment">// are extremely short (bounded by the nesting depth of interface</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>				<span class="comment">// type declarations that recur via parameter types, an extremely</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>				<span class="comment">// rare occurrence). An alternative implementation might use a</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>				<span class="comment">// &#34;visited&#34; map, but that is probably less efficient overall.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>				q := &amp;ifacePair{x, y, p}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>				for p != nil {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>					if p.identical(q) {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>						return true <span class="comment">// same pair was compared before</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>					}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>					p = p.prev
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>				}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>				if debug {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>					assertSortedMethods(a)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>					assertSortedMethods(b)
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>				}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>				for i, f := range a {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>					g := b[i]
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>					if f.Id() != g.Id() || !u.nify(f.typ, g.typ, exact, q) {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>						return false
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>					}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>				}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>				return true
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			}
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	case *Map:
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		<span class="comment">// Two map types unify if their key and value types unify.</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		if y, ok := y.(*Map); ok {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			return u.nify(x.key, y.key, emode, p) &amp;&amp; u.nify(x.elem, y.elem, emode, p)
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	case *Chan:
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		<span class="comment">// Two channel types unify if their value types unify</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		<span class="comment">// and if they have the same direction.</span>
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		<span class="comment">// The channel direction is ignored for inexact unification.</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		if y, ok := y.(*Chan); ok {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			return (mode&amp;exact == 0 || x.dir == y.dir) &amp;&amp; u.nify(x.elem, y.elem, emode, p)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	case *Named:
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		<span class="comment">// Two named types unify if their type names originate in the same type declaration.</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		<span class="comment">// If they are instantiated, their type argument lists must unify.</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		if y := asNamed(y); y != nil {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			<span class="comment">// Check type arguments before origins so they unify</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			<span class="comment">// even if the origins don&#39;t match; for better error</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			<span class="comment">// messages (see go.dev/issue/53692).</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>			xargs := x.TypeArgs().list()
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			yargs := y.TypeArgs().list()
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			if len(xargs) != len(yargs) {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				return false
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			for i, xarg := range xargs {
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>				if !u.nify(xarg, yargs[i], mode, p) {
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>					return false
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>				}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			}
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			return identicalOrigin(x, y)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		<span class="comment">// x must be an unbound type parameter (see comment above).</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		if debug {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			assert(u.asTypeParam(x) == nil)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		<span class="comment">// By definition, a valid type argument must be in the type set of</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		<span class="comment">// the respective type constraint. Therefore, the type argument&#39;s</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		<span class="comment">// underlying type must be in the set of underlying types of that</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		<span class="comment">// constraint. If there is a single such underlying type, it&#39;s the</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		<span class="comment">// constraint&#39;s core type. It must match the type argument&#39;s under-</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		<span class="comment">// lying type, irrespective of whether the actual type argument,</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		<span class="comment">// which may be a defined type, is actually in the type set (that</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		<span class="comment">// will be determined at instantiation time).</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		<span class="comment">// Thus, if we have the core type of an unbound type parameter,</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		<span class="comment">// we know the structure of the possible types satisfying such</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// parameters. Use that core type for further unification</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		<span class="comment">// (see go.dev/issue/50755 for a test case).</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		if enableCoreTypeUnification {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			<span class="comment">// Because the core type is always an underlying type,</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			<span class="comment">// unification will take care of matching against a</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			<span class="comment">// defined or literal type automatically.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			<span class="comment">// If y is also an unbound type parameter, we will end</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			<span class="comment">// up here again with x and y swapped, so we don&#39;t</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			<span class="comment">// need to take care of that case separately.</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			if cx := coreType(x); cx != nil {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>				if traceInference {
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>					u.tracef(&#34;core %s ≡ %s&#34;, x, y)
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>				}
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>				<span class="comment">// If y is a defined type, it may not match against cx which</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>				<span class="comment">// is an underlying type (incl. int, string, etc.). Use assign</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>				<span class="comment">// mode here so that the unifier automatically takes under(y)</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>				<span class="comment">// if necessary.</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>				return u.nify(cx, y, assign, p)
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		<span class="comment">// x != y and there&#39;s nothing to do</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	case nil:
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		<span class="comment">// avoid a crash in case of nil type</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	default:
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		panic(sprintf(nil, nil, true, &#34;u.nify(%s, %s, %d)&#34;, x, y, mode))
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	return false
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>
</pre><p><a href="unify.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
