<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/union.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./union.go?s=629:664#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">union.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2021 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package types
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;go/ast&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	. &#34;internal/types/errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// API</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// A Union represents a union of terms embedded in an interface.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type Union struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	terms []*Term <span class="comment">// list of syntactical terms (not a canonicalized termlist)</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// NewUnion returns a new [Union] type with the given terms.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// It is an error to create an empty union; they are syntactically not possible.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="selection">func NewUnion(terms []*Term) *Union</span> {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	if len(terms) == 0 {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		panic(&#34;empty union&#34;)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	return &amp;Union{terms}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>func (u *Union) Len() int         { return len(u.terms) }
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func (u *Union) Term(i int) *Term { return u.terms[i] }
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func (u *Union) Underlying() Type { return u }
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func (u *Union) String() string   { return TypeString(u, nil) }
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// A Term represents a term in a [Union].</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type Term term
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// NewTerm returns a new union term.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func NewTerm(tilde bool, typ Type) *Term { return &amp;Term{tilde, typ} }
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (t *Term) Tilde() bool    { return t.tilde }
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func (t *Term) Type() Type     { return t.typ }
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func (t *Term) String() string { return (*term)(t).String() }
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// Implementation</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Avoid excessive type-checking times due to quadratic termlist operations.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>const maxTermCount = 100
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// parseUnion parses uexpr as a union of expressions.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// The result is a Union type, or Typ[Invalid] for some errors.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func parseUnion(check *Checker, uexpr ast.Expr) Type {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	blist, tlist := flattenUnion(nil, uexpr)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	assert(len(blist) == len(tlist)-1)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	var terms []*Term
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	var u Type
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	for i, x := range tlist {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		term := parseTilde(check, x)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		if len(tlist) == 1 &amp;&amp; !term.tilde {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			<span class="comment">// Single type. Ok to return early because all relevant</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			<span class="comment">// checks have been performed in parseTilde (no need to</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>			<span class="comment">// run through term validity check below).</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			return term.typ <span class="comment">// typ already recorded through check.typ in parseTilde</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		if len(terms) &gt;= maxTermCount {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>			if isValid(u) {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>				check.errorf(x, InvalidUnion, &#34;cannot handle more than %d union terms (implementation limitation)&#34;, maxTermCount)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>				u = Typ[Invalid]
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		} else {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			terms = append(terms, term)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			u = &amp;Union{terms}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			check.recordTypeAndValue(blist[i-1], typexpr, u, nil)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	if !isValid(u) {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		return u
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Check validity of terms.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// Do this check later because it requires types to be set up.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Note: This is a quadratic algorithm, but unions tend to be short.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	check.later(func() {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		for i, t := range terms {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>			if !isValid(t.typ) {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>				continue
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			u := under(t.typ)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			f, _ := u.(*Interface)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			if t.tilde {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>				if f != nil {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>					check.errorf(tlist[i], InvalidUnion, &#34;invalid use of ~ (%s is an interface)&#34;, t.typ)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>					continue <span class="comment">// don&#39;t report another error for t</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>				if !Identical(u, t.typ) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>					check.errorf(tlist[i], InvalidUnion, &#34;invalid use of ~ (underlying type of %s is %s)&#34;, t.typ, u)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>					continue
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>				}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			<span class="comment">// Stand-alone embedded interfaces are ok and are handled by the single-type case</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			<span class="comment">// in the beginning. Embedded interfaces with tilde are excluded above. If we reach</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			<span class="comment">// here, we must have at least two terms in the syntactic term list (but not necessarily</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			<span class="comment">// in the term list of the union&#39;s type set).</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			if f != nil {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>				tset := f.typeSet()
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>				switch {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>				case tset.NumMethods() != 0:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>					check.errorf(tlist[i], InvalidUnion, &#34;cannot use %s in union (%s contains methods)&#34;, t, t)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				case t.typ == universeComparable.Type():
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>					check.error(tlist[i], InvalidUnion, &#34;cannot use comparable in union&#34;)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				case tset.comparable:
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>					check.errorf(tlist[i], InvalidUnion, &#34;cannot use %s in union (%s embeds comparable)&#34;, t, t)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>				}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				continue <span class="comment">// terms with interface types are not subject to the no-overlap rule</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			<span class="comment">// Report overlapping (non-disjoint) terms such as</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			<span class="comment">// a|a, a|~a, ~a|~a, and ~a|A (where under(A) == a).</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			if j := overlappingTerm(terms[:i], t); j &gt;= 0 {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				check.softErrorf(tlist[i], InvalidUnion, &#34;overlapping terms %s and %s&#34;, t, terms[j])
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	}).describef(uexpr, &#34;check term validity %s&#34;, uexpr)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return u
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func parseTilde(check *Checker, tx ast.Expr) *Term {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	x := tx
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	var tilde bool
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if op, _ := x.(*ast.UnaryExpr); op != nil &amp;&amp; op.Op == token.TILDE {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		x = op.X
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		tilde = true
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	typ := check.typ(x)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// Embedding stand-alone type parameters is not permitted (go.dev/issue/47127).</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// We don&#39;t need this restriction anymore if we make the underlying type of a type</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// parameter its constraint interface: if we embed a lone type parameter, we will</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// simply use its underlying type (like we do for other named, embedded interfaces),</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// and since the underlying type is an interface the embedding is well defined.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if isTypeParam(typ) {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		if tilde {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			check.errorf(x, MisplacedTypeParam, &#34;type in term %s cannot be a type parameter&#34;, tx)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		} else {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			check.error(x, MisplacedTypeParam, &#34;term cannot be a type parameter&#34;)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		typ = Typ[Invalid]
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	term := NewTerm(tilde, typ)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if tilde {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		check.recordTypeAndValue(tx, typexpr, &amp;Union{[]*Term{term}}, nil)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return term
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// overlappingTerm reports the index of the term x in terms which is</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// overlapping (not disjoint) from y. The result is &lt; 0 if there is no</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// such term. The type of term y must not be an interface, and terms</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// with an interface type are ignored in the terms list.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func overlappingTerm(terms []*Term, y *Term) int {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	assert(!IsInterface(y.typ))
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	for i, x := range terms {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		if IsInterface(x.typ) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			continue
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// disjoint requires non-nil, non-top arguments,</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		<span class="comment">// and non-interface types as term types.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		if debug {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			if x == nil || x.typ == nil || y == nil || y.typ == nil {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>				panic(&#34;empty or top union term&#34;)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		if !(*term)(x).disjoint((*term)(y)) {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			return i
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	return -1
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// flattenUnion walks a union type expression of the form A | B | C | ...,</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// extracting both the binary exprs (blist) and leaf types (tlist).</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func flattenUnion(list []ast.Expr, x ast.Expr) (blist, tlist []ast.Expr) {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if o, _ := x.(*ast.BinaryExpr); o != nil &amp;&amp; o.Op == token.OR {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		blist, tlist = flattenUnion(list, o.X)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		blist = append(blist, o)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		x = o.Y
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	return blist, append(tlist, x)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
</pre><p><a href="union.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
