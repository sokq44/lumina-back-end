<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/go/types/validtype.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="validtype.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/go">go</a>/<a href="http://localhost:8080/src/go/types">types</a>/<span class="text-muted">validtype.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/go/types">go/types</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by &#34;go test -run=Generate -write=all&#34;; DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Copyright 2022 The Go Authors. All rights reserved.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package types
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// validType verifies that the given type does not &#34;expand&#34; indefinitely</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// producing a cycle in the type graph.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// (Cycles involving alias types, as in &#34;type A = [10]A&#34; are detected</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// earlier, via the objDecl cycle detection mechanism.)</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>func (check *Checker) validType(typ *Named) {
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	check.validType0(typ, nil, nil)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>}
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// validType0 checks if the given type is valid. If typ is a type parameter</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// its value is looked up in the type argument list of the instantiated</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// (enclosing) type, if it exists. Otherwise the type parameter must be from</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// an enclosing function and can be ignored.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// The nest list describes the stack (the &#34;nest in memory&#34;) of types which</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// contain (or embed in the case of interfaces) other types. For instance, a</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// struct named S which contains a field of named type F contains (the memory</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// of) F in S, leading to the nest S-&gt;F. If a type appears in its own nest</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// (say S-&gt;F-&gt;S) we have an invalid recursive type. The path list is the full</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// path of named types in a cycle, it is only needed for error reporting.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func (check *Checker) validType0(typ Type, nest, path []*Named) bool {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	switch t := Unalias(typ).(type) {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	case nil:
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		<span class="comment">// We should never see a nil type but be conservative and panic</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		<span class="comment">// only in debug mode.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		if debug {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>			panic(&#34;validType0(nil)&#34;)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	case *Array:
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		return check.validType0(t.elem, nest, path)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	case *Struct:
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		for _, f := range t.fields {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>			if !check.validType0(f.typ, nest, path) {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>				return false
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	case *Union:
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		for _, t := range t.terms {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			if !check.validType0(t.typ, nest, path) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>				return false
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	case *Interface:
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		for _, etyp := range t.embeddeds {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>			if !check.validType0(etyp, nest, path) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>				return false
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>			}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	case *Named:
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		<span class="comment">// Exit early if we already know t is valid.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		<span class="comment">// This is purely an optimization but it prevents excessive computation</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		<span class="comment">// times in pathological cases such as testdata/fixedbugs/issue6977.go.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		<span class="comment">// (Note: The valids map could also be allocated locally, once for each</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		<span class="comment">// validType call.)</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		if check.valids.lookup(t) != nil {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			break
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t report a 2nd error if we already know the type is invalid</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		<span class="comment">// (e.g., if a cycle was detected earlier, via under).</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		<span class="comment">// Note: ensure that t.orig is fully resolved by calling Underlying().</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		if !isValid(t.Underlying()) {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			return false
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		<span class="comment">// If the current type t is also found in nest, (the memory of) t is</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		<span class="comment">// embedded in itself, indicating an invalid recursive type.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		for _, e := range nest {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			if Identical(e, t) {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>				<span class="comment">// We have a cycle. If t != t.Origin() then t is an instance of</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>				<span class="comment">// the generic type t.Origin(). Because t is in the nest, t must</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>				<span class="comment">// occur within the definition (RHS) of the generic type t.Origin(),</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>				<span class="comment">// directly or indirectly, after expansion of the RHS.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>				<span class="comment">// Therefore t.Origin() must be invalid, no matter how it is</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>				<span class="comment">// instantiated since the instantiation t of t.Origin() happens</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>				<span class="comment">// inside t.Origin()&#39;s RHS and thus is always the same and always</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>				<span class="comment">// present.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>				<span class="comment">// Therefore we can mark the underlying of both t and t.Origin()</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>				<span class="comment">// as invalid. If t is not an instance of a generic type, t and</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>				<span class="comment">// t.Origin() are the same.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>				<span class="comment">// Furthermore, because we check all types in a package for validity</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>				<span class="comment">// before type checking is complete, any exported type that is invalid</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>				<span class="comment">// will have an invalid underlying type and we can&#39;t reach here with</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>				<span class="comment">// such a type (invalid types are excluded above).</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>				<span class="comment">// Thus, if we reach here with a type t, both t and t.Origin() (if</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>				<span class="comment">// different in the first place) must be from the current package;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>				<span class="comment">// they cannot have been imported.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>				<span class="comment">// Therefore it is safe to change their underlying types; there is</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>				<span class="comment">// no chance for a race condition (the types of the current package</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>				<span class="comment">// are not yet available to other goroutines).</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				assert(t.obj.pkg == check.pkg)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				assert(t.Origin().obj.pkg == check.pkg)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>				t.underlying = Typ[Invalid]
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>				t.Origin().underlying = Typ[Invalid]
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>				<span class="comment">// Find the starting point of the cycle and report it.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>				<span class="comment">// Because each type in nest must also appear in path (see invariant below),</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>				<span class="comment">// type t must be in path since it was found in nest. But not every type in path</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>				<span class="comment">// is in nest. Specifically t may appear in path with an earlier index than the</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>				<span class="comment">// index of t in nest. Search again.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				for start, p := range path {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>					if Identical(p, t) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>						check.cycleError(makeObjList(path[start:]))
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>						return false
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>					}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>				}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>				panic(&#34;cycle start not found&#34;)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		<span class="comment">// No cycle was found. Check the RHS of t.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		<span class="comment">// Every type added to nest is also added to path; thus every type that is in nest</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		<span class="comment">// must also be in path (invariant). But not every type in path is in nest, since</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		<span class="comment">// nest may be pruned (see below, *TypeParam case).</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		if !check.validType0(t.Origin().fromRHS, append(nest, t), append(path, t)) {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			return false
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		check.valids.add(t) <span class="comment">// t is valid</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	case *TypeParam:
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		<span class="comment">// A type parameter stands for the type (argument) it was instantiated with.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		<span class="comment">// Check the corresponding type argument for validity if we are in an</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		<span class="comment">// instantiated type.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		if len(nest) &gt; 0 {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			inst := nest[len(nest)-1] <span class="comment">// the type instance</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			<span class="comment">// Find the corresponding type argument for the type parameter</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			<span class="comment">// and proceed with checking that type argument.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			for i, tparam := range inst.TypeParams().list() {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>				<span class="comment">// The type parameter and type argument lists should</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>				<span class="comment">// match in length but be careful in case of errors.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>				if t == tparam &amp;&amp; i &lt; inst.TypeArgs().Len() {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>					targ := inst.TypeArgs().At(i)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>					<span class="comment">// The type argument must be valid in the enclosing</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					<span class="comment">// type (where inst was instantiated), hence we must</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					<span class="comment">// check targ&#39;s validity in the type nest excluding</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					<span class="comment">// the current (instantiated) type (see the example</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>					<span class="comment">// at the end of this file).</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>					<span class="comment">// For error reporting we keep the full path.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>					return check.validType0(targ, nest[:len(nest)-1], path)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>				}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return true
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// makeObjList returns the list of type name objects for the given</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// list of named types.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func makeObjList(tlist []*Named) []Object {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	olist := make([]Object, len(tlist))
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	for i, t := range tlist {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		olist[i] = t.obj
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return olist
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// Here is an example illustrating why we need to exclude the</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// instantiated type from nest when evaluating the validity of</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// a type parameter. Given the declarations</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">//   var _ A[A[string]]</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">//   type A[P any] struct { _ B[P] }</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">//   type B[P any] struct { _ P }</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// we want to determine if the type A[A[string]] is valid.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// We start evaluating A[A[string]] outside any type nest:</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">//   A[A[string]]</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//         nest =</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//         path =</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// The RHS of A is now evaluated in the A[A[string]] nest:</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//   struct{_ B[P₁]}</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">//         nest = A[A[string]]</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// The struct has a single field of type B[P₁] with which</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// we continue:</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">//   B[P₁]</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">//         nest = A[A[string]]</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">//   struct{_ P₂}</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">//         nest = A[A[string]]-&gt;B[P]</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Eventually we reach the type parameter P of type B (P₂):</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//   P₂</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">//         nest = A[A[string]]-&gt;B[P]</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// The type argument for P of B is the type parameter P of A (P₁).</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// It must be evaluated in the type nest that existed when B was</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// instantiated:</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">//   P₁</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">//         nest = A[A[string]]        &lt;== type nest at B&#39;s instantiation time</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// If we&#39;d use the current nest it would correspond to the path</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// which will be wrong as we will see shortly. P&#39;s type argument</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// is A[string], which again must be evaluated in the type nest</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// that existed when A was instantiated with A[string]. That type</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// nest is empty:</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">//   A[string]</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">//         nest =                     &lt;== type nest at A&#39;s instantiation time</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// Evaluation then proceeds as before for A[string]:</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">//   struct{_ B[P₁]}</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">//         nest = A[string]</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// Now we reach B[P] again. If we had not adjusted nest, it would</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// correspond to path, and we would find B[P] in nest, indicating</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// a cycle, which would clearly be wrong since there&#39;s no cycle in</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// A[string]:</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">//   B[P₁]</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">//         nest = A[string]</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]  &lt;== path contains B[P]!</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// But because we use the correct type nest, evaluation proceeds without</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// errors and we get the evaluation sequence:</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">//   struct{_ P₂}</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">//         nest = A[string]-&gt;B[P]</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]-&gt;B[P]</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//   P₂</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">//         nest = A[string]-&gt;B[P]</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]-&gt;B[P]</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">//   P₁</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">//         nest = A[string]</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]-&gt;B[P]</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">//   string</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//         nest =</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//         path = A[A[string]]-&gt;B[P]-&gt;A[string]-&gt;B[P]</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// At this point we&#39;re done and A[A[string]] and is valid.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
</pre><p><a href="validtype.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
