<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/hash/crc32/crc32.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./crc32.go?s=1295:1317#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/hash">hash</a>/<a href="http://localhost:8080/src/hash/crc32">crc32</a>/<span class="text-muted">crc32.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/hash/crc32">hash/crc32</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32,</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// checksum. See https://en.wikipedia.org/wiki/Cyclic_redundancy_check for</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// information.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Polynomials are represented in LSB-first form also known as reversed representation.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// See https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// for information.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>package crc32
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>import (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;hash&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// The size of a CRC-32 checksum in bytes.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>const Size = 4
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Predefined polynomials.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>const (
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// IEEE is by far and away the most common CRC-32 polynomial.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// Used by ethernet (IEEE 802.3), v.42, fddi, gzip, zip, png, ...</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	IEEE = 0xedb88320
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// Castagnoli&#39;s polynomial, used in iSCSI.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// Has better error detection characteristics than IEEE.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// https://dx.doi.org/10.1109/26.231911</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	Castagnoli = 0x82f63b78
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// Koopman&#39;s polynomial.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// Also has better error detection characteristics than IEEE.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// https://dx.doi.org/10.1109/DSN.2002.1028931</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Koopman = 0xeb31d82e
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>)
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// Table is a 256-word table representing the polynomial for efficient processing.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="selection">type Table [256]uint32</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// This file makes use of functions implemented in architecture-specific files.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// The interface that they implement is as follows:</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//    // archAvailableIEEE reports whether an architecture-specific CRC32-IEEE</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//    // algorithm is available.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//    archAvailableIEEE() bool</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//    // archInitIEEE initializes the architecture-specific CRC3-IEEE algorithm.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//    // It can only be called if archAvailableIEEE() returns true.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//    archInitIEEE()</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//    // archUpdateIEEE updates the given CRC32-IEEE. It can only be called if</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//    // archInitIEEE() was previously called.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//    archUpdateIEEE(crc uint32, p []byte) uint32</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//    // archAvailableCastagnoli reports whether an architecture-specific</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//    // CRC32-C algorithm is available.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//    archAvailableCastagnoli() bool</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//    // archInitCastagnoli initializes the architecture-specific CRC32-C</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//    // algorithm. It can only be called if archAvailableCastagnoli() returns</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//    // true.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//    archInitCastagnoli()</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//    // archUpdateCastagnoli updates the given CRC32-C. It can only be called</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//    // if archInitCastagnoli() was previously called.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//    archUpdateCastagnoli(crc uint32, p []byte) uint32</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// castagnoliTable points to a lazily initialized Table for the Castagnoli</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// polynomial. MakeTable will always return this value when asked to make a</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// Castagnoli table so we can compare against it to find when the caller is</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// using this polynomial.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>var castagnoliTable *Table
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>var castagnoliTable8 *slicing8Table
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>var updateCastagnoli func(crc uint32, p []byte) uint32
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>var castagnoliOnce sync.Once
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>var haveCastagnoli atomic.Bool
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func castagnoliInit() {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	castagnoliTable = simpleMakeTable(Castagnoli)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if archAvailableCastagnoli() {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		archInitCastagnoli()
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		updateCastagnoli = archUpdateCastagnoli
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	} else {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// Initialize the slicing-by-8 table.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		castagnoliTable8 = slicingMakeTable(Castagnoli)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		updateCastagnoli = func(crc uint32, p []byte) uint32 {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>			return slicingUpdate(crc, castagnoliTable8, p)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	haveCastagnoli.Store(true)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// IEEETable is the table for the [IEEE] polynomial.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>var IEEETable = simpleMakeTable(IEEE)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// ieeeTable8 is the slicing8Table for IEEE</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>var ieeeTable8 *slicing8Table
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>var updateIEEE func(crc uint32, p []byte) uint32
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>var ieeeOnce sync.Once
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func ieeeInit() {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if archAvailableIEEE() {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		archInitIEEE()
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		updateIEEE = archUpdateIEEE
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	} else {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		<span class="comment">// Initialize the slicing-by-8 table.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		ieeeTable8 = slicingMakeTable(IEEE)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		updateIEEE = func(crc uint32, p []byte) uint32 {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			return slicingUpdate(crc, ieeeTable8, p)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// MakeTable returns a [Table] constructed from the specified polynomial.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// The contents of this [Table] must not be modified.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func MakeTable(poly uint32) *Table {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	switch poly {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	case IEEE:
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		ieeeOnce.Do(ieeeInit)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		return IEEETable
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	case Castagnoli:
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		castagnoliOnce.Do(castagnoliInit)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		return castagnoliTable
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	default:
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		return simpleMakeTable(poly)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// digest represents the partial evaluation of a checksum.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>type digest struct {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	crc uint32
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	tab *Table
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// New creates a new [hash.Hash32] computing the CRC-32 checksum using the</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// polynomial represented by the [Table]. Its Sum method will lay the</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// value out in big-endian byte order. The returned Hash32 also</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// implements [encoding.BinaryMarshaler] and [encoding.BinaryUnmarshaler] to</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// marshal and unmarshal the internal state of the hash.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func New(tab *Table) hash.Hash32 {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	if tab == IEEETable {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		ieeeOnce.Do(ieeeInit)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	return &amp;digest{0, tab}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// NewIEEE creates a new [hash.Hash32] computing the CRC-32 checksum using</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// the [IEEE] polynomial. Its Sum method will lay the value out in</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// big-endian byte order. The returned Hash32 also implements</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// [encoding.BinaryMarshaler] and [encoding.BinaryUnmarshaler] to marshal</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// and unmarshal the internal state of the hash.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func NewIEEE() hash.Hash32 { return New(IEEETable) }
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func (d *digest) Size() int { return Size }
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (d *digest) BlockSize() int { return 1 }
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func (d *digest) Reset() { d.crc = 0 }
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>const (
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	magic         = &#34;crc\x01&#34;
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	marshaledSize = len(magic) + 4 + 4
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>func (d *digest) MarshalBinary() ([]byte, error) {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	b := make([]byte, 0, marshaledSize)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	b = append(b, magic...)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	b = appendUint32(b, tableSum(d.tab))
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	b = appendUint32(b, d.crc)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	return b, nil
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (d *digest) UnmarshalBinary(b []byte) error {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if len(b) &lt; len(magic) || string(b[:len(magic)]) != magic {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return errors.New(&#34;hash/crc32: invalid hash state identifier&#34;)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if len(b) != marshaledSize {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		return errors.New(&#34;hash/crc32: invalid hash state size&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if tableSum(d.tab) != readUint32(b[4:]) {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		return errors.New(&#34;hash/crc32: tables do not match&#34;)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	d.crc = readUint32(b[8:])
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return nil
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// appendUint32 is semantically the same as [binary.BigEndian.AppendUint32]</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// We copied this function because we can not import &#34;encoding/binary&#34; here.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func appendUint32(b []byte, x uint32) []byte {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return append(b,
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		byte(x&gt;&gt;24),
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		byte(x&gt;&gt;16),
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		byte(x&gt;&gt;8),
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		byte(x),
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// readUint32 is semantically the same as [binary.BigEndian.Uint32]</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// We copied this function because we can not import &#34;encoding/binary&#34; here.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func readUint32(b []byte) uint32 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	_ = b[3]
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	return uint32(b[3]) | uint32(b[2])&lt;&lt;8 | uint32(b[1])&lt;&lt;16 | uint32(b[0])&lt;&lt;24
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func update(crc uint32, tab *Table, p []byte, checkInitIEEE bool) uint32 {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	switch {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	case haveCastagnoli.Load() &amp;&amp; tab == castagnoliTable:
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		return updateCastagnoli(crc, p)
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	case tab == IEEETable:
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		if checkInitIEEE {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>			ieeeOnce.Do(ieeeInit)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return updateIEEE(crc, p)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	default:
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return simpleUpdate(crc, tab, p)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// Update returns the result of adding the bytes in p to the crc.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func Update(crc uint32, tab *Table, p []byte) uint32 {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">// Unfortunately, because IEEETable is exported, IEEE may be used without a</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// call to MakeTable. We have to make sure it gets initialized in that case.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	return update(crc, tab, p, true)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>func (d *digest) Write(p []byte) (n int, err error) {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// We only create digest objects through New() which takes care of</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// initialization in this case.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	d.crc = update(d.crc, d.tab, p, false)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return len(p), nil
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>func (d *digest) Sum32() uint32 { return d.crc }
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (d *digest) Sum(in []byte) []byte {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	s := d.Sum32()
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	return append(in, byte(s&gt;&gt;24), byte(s&gt;&gt;16), byte(s&gt;&gt;8), byte(s))
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// Checksum returns the CRC-32 checksum of data</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// using the polynomial represented by the [Table].</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func Checksum(data []byte, tab *Table) uint32 { return Update(0, tab, data) }
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// ChecksumIEEE returns the CRC-32 checksum of data</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// using the [IEEE] polynomial.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func ChecksumIEEE(data []byte) uint32 {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	ieeeOnce.Do(ieeeInit)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	return updateIEEE(0, data)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// tableSum returns the IEEE checksum of table t.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func tableSum(t *Table) uint32 {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	var a [1024]byte
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	b := a[:0]
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	if t != nil {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		for _, x := range t {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			b = appendUint32(b, x)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	return ChecksumIEEE(b)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
</pre><p><a href="crc32.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
