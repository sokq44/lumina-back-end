<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/hash/maphash/maphash.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./maphash.go?s=7980:8005#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/hash">hash</a>/<a href="http://localhost:8080/src/hash/maphash">maphash</a>/<span class="text-muted">maphash.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/hash/maphash">hash/maphash</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2019 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package maphash provides hash functions on byte sequences.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// These hash functions are intended to be used to implement hash tables or</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// other data structures that need to map arbitrary strings or byte</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// sequences to a uniform distribution on unsigned 64-bit integers.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Each different instance of a hash table or data structure should use its own [Seed].</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// The hash functions are not cryptographically secure.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// (See crypto/sha256 and crypto/sha512 for cryptographic use.)</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>package maphash
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A Seed is a random value that selects the specific hash function</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// computed by a [Hash]. If two Hashes use the same Seeds, they</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// will compute the same hash values for any given input.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// If two Hashes use different Seeds, they are very likely to compute</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// distinct hash values for any given input.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// A Seed must be initialized by calling [MakeSeed].</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// The zero seed is uninitialized and not valid for use with [Hash]&#39;s SetSeed method.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Each Seed value is local to a single process and cannot be serialized</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// or otherwise recreated in a different process.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>type Seed struct {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	s uint64
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Bytes returns the hash of b with the given seed.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// Bytes is equivalent to, but more convenient and efficient than:</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//	var h Hash</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//	h.SetSeed(seed)</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	h.Write(b)</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	return h.Sum64()</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func Bytes(seed Seed, b []byte) uint64 {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	state := seed.s
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	if state == 0 {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		panic(&#34;maphash: use of uninitialized Seed&#34;)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if len(b) &gt; bufSize {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		b = b[:len(b):len(b)] <span class="comment">// merge len and cap calculations when reslicing</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		for len(b) &gt; bufSize {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			state = rthash(b[:bufSize], state)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			b = b[bufSize:]
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	return rthash(b, state)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// String returns the hash of s with the given seed.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// String is equivalent to, but more convenient and efficient than:</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//	var h Hash</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//	h.SetSeed(seed)</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//	h.WriteString(s)</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//	return h.Sum64()</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func String(seed Seed, s string) uint64 {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	state := seed.s
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if state == 0 {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		panic(&#34;maphash: use of uninitialized Seed&#34;)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	for len(s) &gt; bufSize {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		state = rthashString(s[:bufSize], state)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		s = s[bufSize:]
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return rthashString(s, state)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// A Hash computes a seeded hash of a byte sequence.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// The zero Hash is a valid Hash ready to use.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// A zero Hash chooses a random seed for itself during</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// the first call to a Reset, Write, Seed, or Sum64 method.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// For control over the seed, use SetSeed.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// The computed hash values depend only on the initial seed and</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// the sequence of bytes provided to the Hash object, not on the way</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// in which the bytes are provided. For example, the three sequences</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">//	h.Write([]byte{&#39;f&#39;,&#39;o&#39;,&#39;o&#39;})</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//	h.WriteByte(&#39;f&#39;); h.WriteByte(&#39;o&#39;); h.WriteByte(&#39;o&#39;)</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//	h.WriteString(&#34;foo&#34;)</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// all have the same effect.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// Hashes are intended to be collision-resistant, even for situations</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// where an adversary controls the byte sequences being hashed.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// A Hash is not safe for concurrent use by multiple goroutines, but a Seed is.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// If multiple goroutines must compute the same seeded hash,</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// each can declare its own Hash and call SetSeed with a common Seed.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>type Hash struct {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	_     [0]func()     <span class="comment">// not comparable</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	seed  Seed          <span class="comment">// initial seed used for this hash</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	state Seed          <span class="comment">// current hash of all flushed bytes</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	buf   [bufSize]byte <span class="comment">// unflushed byte buffer</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	n     int           <span class="comment">// number of unflushed bytes</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// bufSize is the size of the Hash write buffer.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// The buffer ensures that writes depend only on the sequence of bytes,</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// not the sequence of WriteByte/Write/WriteString calls,</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// by always calling rthash with a full buffer (except for the tail).</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>const bufSize = 128
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// initSeed seeds the hash if necessary.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// initSeed is called lazily before any operation that actually uses h.seed/h.state.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Note that this does not include Write/WriteByte/WriteString in the case</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// where they only add to h.buf. (If they write too much, they call h.flush,</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// which does call h.initSeed.)</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (h *Hash) initSeed() {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if h.seed.s == 0 {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		seed := MakeSeed()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		h.seed = seed
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		h.state = seed
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// WriteByte adds b to the sequence of bytes hashed by h.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// It never fails; the error result is for implementing [io.ByteWriter].</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (h *Hash) WriteByte(b byte) error {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if h.n == len(h.buf) {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		h.flush()
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	h.buf[h.n] = b
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	h.n++
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return nil
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// Write adds b to the sequence of bytes hashed by h.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// It always writes all of b and never fails; the count and error result are for implementing [io.Writer].</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (h *Hash) Write(b []byte) (int, error) {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	size := len(b)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// Deal with bytes left over in h.buf.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// h.n &lt;= bufSize is always true.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// Checking it is ~free and it lets the compiler eliminate a bounds check.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if h.n &gt; 0 &amp;&amp; h.n &lt;= bufSize {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		k := copy(h.buf[h.n:], b)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		h.n += k
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		if h.n &lt; bufSize {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			<span class="comment">// Copied the entirety of b to h.buf.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			return size, nil
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		b = b[k:]
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		h.flush()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		<span class="comment">// No need to set h.n = 0 here; it happens just before exit.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// Process as many full buffers as possible, without copying, and calling initSeed only once.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	if len(b) &gt; bufSize {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		h.initSeed()
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		for len(b) &gt; bufSize {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			h.state.s = rthash(b[:bufSize], h.state.s)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			b = b[bufSize:]
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// Copy the tail.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	copy(h.buf[:], b)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	h.n = len(b)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return size, nil
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// WriteString adds the bytes of s to the sequence of bytes hashed by h.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// It always writes all of s and never fails; the count and error result are for implementing [io.StringWriter].</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (h *Hash) WriteString(s string) (int, error) {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// WriteString mirrors Write. See Write for comments.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	size := len(s)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	if h.n &gt; 0 &amp;&amp; h.n &lt;= bufSize {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		k := copy(h.buf[h.n:], s)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		h.n += k
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		if h.n &lt; bufSize {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			return size, nil
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		s = s[k:]
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		h.flush()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if len(s) &gt; bufSize {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		h.initSeed()
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		for len(s) &gt; bufSize {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			h.state.s = rthashString(s[:bufSize], h.state.s)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			s = s[bufSize:]
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	copy(h.buf[:], s)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	h.n = len(s)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	return size, nil
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// Seed returns h&#39;s seed value.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>func (h *Hash) Seed() Seed {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	h.initSeed()
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return h.seed
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// SetSeed sets h to use seed, which must have been returned by [MakeSeed]</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// or by another [Hash.Seed] method.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// Two [Hash] objects with the same seed behave identically.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// Two [Hash] objects with different seeds will very likely behave differently.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Any bytes added to h before this call will be discarded.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func (h *Hash) SetSeed(seed Seed) {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	if seed.s == 0 {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		panic(&#34;maphash: use of uninitialized Seed&#34;)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	h.seed = seed
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	h.state = seed
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	h.n = 0
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// Reset discards all bytes added to h.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// (The seed remains the same.)</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (h *Hash) Reset() {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	h.initSeed()
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	h.state = h.seed
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	h.n = 0
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// precondition: buffer is full.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>func (h *Hash) flush() {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if h.n != len(h.buf) {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		panic(&#34;maphash: flush of partially full buffer&#34;)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	h.initSeed()
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	h.state.s = rthash(h.buf[:h.n], h.state.s)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	h.n = 0
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// Sum64 returns h&#39;s current 64-bit value, which depends on</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// h&#39;s seed and the sequence of bytes added to h since the</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// last call to [Hash.Reset] or [Hash.SetSeed].</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// All bits of the Sum64 result are close to uniformly and</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// independently distributed, so it can be safely reduced</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// by using bit masking, shifting, or modular arithmetic.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func (h *Hash) Sum64() uint64 {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	h.initSeed()
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	return rthash(h.buf[:h.n], h.state.s)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// MakeSeed returns a new random seed.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func MakeSeed() Seed {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	var s uint64
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	for {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		s = randUint64()
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		<span class="comment">// We use seed 0 to indicate an uninitialized seed/hash,</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		<span class="comment">// so keep trying until we get a non-zero seed.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		if s != 0 {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			break
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	return Seed{s: s}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// Sum appends the hash&#39;s current 64-bit value to b.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// It exists for implementing [hash.Hash].</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// For direct calls, it is more efficient to use [Hash.Sum64].</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>func (h *Hash) Sum(b []byte) []byte {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	x := h.Sum64()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return append(b,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		byte(x&gt;&gt;0),
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		byte(x&gt;&gt;8),
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		byte(x&gt;&gt;16),
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		byte(x&gt;&gt;24),
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		byte(x&gt;&gt;32),
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		byte(x&gt;&gt;40),
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		byte(x&gt;&gt;48),
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		byte(x&gt;&gt;56))
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// Size returns h&#39;s hash value size, 8 bytes.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="selection">func (h *Hash) Size() int</span> { return 8 }
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// BlockSize returns h&#39;s block size.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func (h *Hash) BlockSize() int { return len(h.buf) }
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
</pre><p><a href="maphash.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
