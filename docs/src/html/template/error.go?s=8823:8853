<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/html/template/error.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./error.go?s=8823:8853#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/html">html</a>/<a href="http://localhost:8080/src/html/template">template</a>/<span class="text-muted">error.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/html/template">html/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package template
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;text/template/parse&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>)
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Error describes a problem encountered during template Escaping.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>type Error struct {
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	<span class="comment">// ErrorCode describes the kind of error.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	ErrorCode ErrorCode
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	<span class="comment">// Node is the node that caused the problem, if known.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	<span class="comment">// If not nil, it overrides Name and Line.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	Node parse.Node
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// Name is the name of the template in which the error was encountered.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	Name string
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// Line is the line number of the error in the template source or 0.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Line int
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// Description is a human-readable description of the problem.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Description string
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// ErrorCode is a code for a kind of error.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>type ErrorCode int
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// We define codes for each error that manifests while escaping templates, but</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// escaped templates may also fail at runtime.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Output: &#34;ZgotmplZ&#34;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Example:</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//	&lt;img src=&#34;{{.X}}&#34;&gt;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//	where {{.X}} evaluates to `javascript:...`</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Discussion:</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//	&#34;ZgotmplZ&#34; is a special value that indicates that unsafe content reached a</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	CSS or URL context at runtime. The output of the example will be</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//	  &lt;img src=&#34;#ZgotmplZ&#34;&gt;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//	If the data comes from a trusted source, use content types to exempt it</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	from filtering: URL(`javascript:...`).</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>const (
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// OK indicates the lack of an error.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	OK ErrorCode = iota
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// ErrAmbigContext: &#34;... appears in an ambiguous context within a URL&#34;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">//   &lt;a href=&#34;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">//      {{if .C}}</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">//        /path/</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">//      {{else}}</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">//        /search?q=</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">//      {{end}}</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">//      {{.X}}</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">//   &#34;&gt;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">//   {{.X}} is in an ambiguous URL context since, depending on {{.C}},</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">//  it may be either a URL suffix or a query parameter.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">//   Moving {{.X}} into the condition removes the ambiguity:</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">//   &lt;a href=&#34;{{if .C}}/path/{{.X}}{{else}}/search?q={{.X}}&#34;&gt;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	ErrAmbigContext
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// ErrBadHTML: &#34;expected space, attr name, or end of tag, but got ...&#34;,</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">//   &#34;... in unquoted attr&#34;, &#34;... in attribute name&#34;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">//   &lt;a href = /search?q=foo&gt;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">//   &lt;href=foo&gt;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">//   &lt;form na&lt;e=...&gt;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">//   &lt;option selected&lt;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">//   This is often due to a typo in an HTML element, but some runes</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">//   are banned in tag names, attribute names, and unquoted attribute</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">//   values because they can tickle parser ambiguities.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">//   Quoting all attributes is the best policy.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	ErrBadHTML
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// ErrBranchEnd: &#34;{{if}} branches end in different contexts&#34;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">//   {{if .C}}&lt;a href=&#34;{{end}}{{.X}}</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template statically examines each path through an</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">//   {{if}}, {{range}}, or {{with}} to escape any following pipelines.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">//   The example is ambiguous since {{.X}} might be an HTML text node,</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">//   or a URL prefix in an HTML attribute. The context of {{.X}} is</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">//   used to figure out how to escape it, but that context depends on</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">//   the run-time value of {{.C}} which is not statically known.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">//   The problem is usually something like missing quotes or angle</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">//   brackets, or can be avoided by refactoring to put the two contexts</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">//   into different branches of an if, range or with. If the problem</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">//   is in a {{range}} over a collection that should never be empty,</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">//   adding a dummy {{else}} can help.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	ErrBranchEnd
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// ErrEndContext: &#34;... ends in a non-text context: ...&#34;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// Examples:</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">//   &lt;div</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//   &lt;div title=&#34;no close quote&gt;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">//   &lt;script&gt;f()</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">//   Executed templates should produce a DocumentFragment of HTML.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">//   Templates that end without closing tags will trigger this error.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">//   Templates that should not be used in an HTML context or that</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">//   produce incomplete Fragments should not be executed directly.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">//   {{define &#34;main&#34;}} &lt;script&gt;{{template &#34;helper&#34;}}&lt;/script&gt; {{end}}</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">//   {{define &#34;helper&#34;}} document.write(&#39; &lt;div title=&#34; &#39;) {{end}}</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">//   &#34;helper&#34; does not produce a valid document fragment, so should</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">//   not be Executed directly.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	ErrEndContext
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// ErrNoSuchTemplate: &#34;no such template ...&#34;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// Examples:</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">//   {{define &#34;main&#34;}}&lt;div {{template &#34;attrs&#34;}}&gt;{{end}}</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">//   {{define &#34;attrs&#34;}}href=&#34;{{.URL}}&#34;{{end}}</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template looks through template calls to compute the</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">//   context.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">//   Here the {{.URL}} in &#34;attrs&#34; must be treated as a URL when called</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">//   from &#34;main&#34;, but you will get this error if &#34;attrs&#34; is not defined</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">//   when &#34;main&#34; is parsed.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	ErrNoSuchTemplate
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// ErrOutputContext: &#34;cannot compute output context for template ...&#34;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// Examples:</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">//   {{define &#34;t&#34;}}{{if .T}}{{template &#34;t&#34; .T}}{{end}}{{.H}}&#34;,{{end}}</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//   A recursive template does not end in the same context in which it</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">//   starts, and a reliable output context cannot be computed.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">//   Look for typos in the named template.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">//   If the template should not be called in the named start context,</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">//   look for calls to that template in unexpected contexts.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">//   Maybe refactor recursive templates to not be recursive.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	ErrOutputContext
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// ErrPartialCharset: &#34;unfinished JS regexp charset in ...&#34;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">//     &lt;script&gt;var pattern = /foo[{{.Chars}}]/&lt;/script&gt;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template does not support interpolation into regular</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">//   expression literal character sets.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	ErrPartialCharset
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// ErrPartialEscape: &#34;unfinished escape sequence in ...&#34;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//   &lt;script&gt;alert(&#34;\{{.X}}&#34;)&lt;/script&gt;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template does not support actions following a</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">//   backslash.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">//   This is usually an error and there are better solutions; for</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">//   example</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">//     &lt;script&gt;alert(&#34;{{.X}}&#34;)&lt;/script&gt;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">//   should work, and if {{.X}} is a partial escape sequence such as</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">//   &#34;xA0&#34;, mark the whole sequence as safe content: JSStr(`\xA0`)</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	ErrPartialEscape
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// ErrRangeLoopReentry: &#34;on range loop re-entry: ...&#34;</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">//   &lt;script&gt;var x = [{{range .}}&#39;{{.}},{{end}}]&lt;/script&gt;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">//   If an iteration through a range would cause it to end in a</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">//   different context than an earlier pass, there is no single context.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">//   In the example, there is missing a quote, so it is not clear</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">//   whether {{.}} is meant to be inside a JS string or in a JS value</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">//   context. The second iteration would produce something like</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">//     &lt;script&gt;var x = [&#39;firstValue,&#39;secondValue]&lt;/script&gt;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	ErrRangeLoopReentry
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// ErrSlashAmbig: &#39;/&#39; could start a division or regexp.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">//   &lt;script&gt;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">//     {{if .C}}var x = 1{{end}}</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">//     /-{{.N}}/i.test(x) ? doThis : doThat();</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">//   &lt;/script&gt;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">//   The example above could produce `var x = 1/-2/i.test(s)...`</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">//   in which the first &#39;/&#39; is a mathematical division operator or it</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">//   could produce `/-2/i.test(s)` in which the first &#39;/&#39; starts a</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">//   regexp literal.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">//   Look for missing semicolons inside branches, and maybe add</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">//   parentheses to make it clear which interpretation you intend.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	ErrSlashAmbig
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// ErrPredefinedEscaper: &#34;predefined escaper ... disallowed in template&#34;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">//   &lt;div class={{. | html}}&gt;Hello&lt;div&gt;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template already contextually escapes all pipelines to</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">//   produce HTML output safe against code injection. Manually escaping</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">//   pipeline output using the predefined escapers &#34;html&#34; or &#34;urlquery&#34; is</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">//   unnecessary, and may affect the correctness or safety of the escaped</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">//   pipeline output in Go 1.8 and earlier.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">//   In most cases, such as the given example, this error can be resolved by</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">//   simply removing the predefined escaper from the pipeline and letting the</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">//   contextual autoescaper handle the escaping of the pipeline. In other</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">//   instances, where the predefined escaper occurs in the middle of a</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">//   pipeline where subsequent commands expect escaped input, e.g.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">//     {{.X | html | makeALink}}</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">//   where makeALink does</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">//     return `&lt;a href=&#34;`+input+`&#34;&gt;link&lt;/a&gt;`</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">//   consider refactoring the surrounding template to make use of the</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">//   contextual autoescaper, i.e.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">//     &lt;a href=&#34;{{.X}}&#34;&gt;link&lt;/a&gt;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">//   To ease migration to Go 1.9 and beyond, &#34;html&#34; and &#34;urlquery&#34; will</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">//   continue to be allowed as the last command in a pipeline. However, if the</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">//   pipeline occurs in an unquoted attribute value context, &#34;html&#34; is</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">//   disallowed. Avoid using &#34;html&#34; and &#34;urlquery&#34; entirely in new templates.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	ErrPredefinedEscaper
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// ErrJSTemplate: &#34;... appears in a JS template literal&#34;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// Example:</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">//     &lt;script&gt;var tmpl = `{{.Interp}}`&lt;/script&gt;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// Discussion:</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">//   Package html/template does not support actions inside of JS template</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">//   literals.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrJSTemplate is no longer returned when an action is present</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// in a JS template literal. Actions inside of JS template literals are now</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// escaped as expected.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	ErrJSTemplate
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="selection">func (e *Error) Error() string</span> {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	switch {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	case e.Node != nil:
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		loc, _ := (*parse.Tree)(nil).ErrorContext(e.Node)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;html/template:%s: %s&#34;, loc, e.Description)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	case e.Line != 0:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;html/template:%s:%d: %s&#34;, e.Name, e.Line, e.Description)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	case e.Name != &#34;&#34;:
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;html/template:%s: %s&#34;, e.Name, e.Description)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	return &#34;html/template: &#34; + e.Description
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// errorf creates an error given a format string f and args.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// The template Name still needs to be supplied.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func errorf(k ErrorCode, node parse.Node, line int, f string, args ...any) *Error {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	return &amp;Error{k, node, &#34;&#34;, line, fmt.Sprintf(f, args...)}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
</pre><p><a href="error.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
