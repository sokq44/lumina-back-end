<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/html/template/template.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./template.go?s=15728:15765#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/html">html</a>/<a href="http://localhost:8080/src/html/template">template</a>/<span class="text-muted">template.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/html/template">html/template</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package template
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;text/template&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;text/template/parse&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Template is a specialized Template from &#34;text/template&#34; that produces a safe</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// HTML document fragment.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type Template struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// Sticky error if escaping fails, or escapeOK if succeeded.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	escapeErr error
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// We could embed the text/template field, but it&#39;s safer not to because</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// we need to keep our version of the name space and the underlying</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// template&#39;s in sync.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	text *template.Template
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// The underlying template&#39;s parse tree, updated to be HTML-safe.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Tree       *parse.Tree
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	*nameSpace <span class="comment">// common to all associated templates</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// escapeOK is a sentinel value used to indicate valid escaping.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>var escapeOK = fmt.Errorf(&#34;template escaped correctly&#34;)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// nameSpace is the data structure shared by all templates in an association.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type nameSpace struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	mu      sync.Mutex
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	set     map[string]*Template
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	escaped bool
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	esc     escaper
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Templates returns a slice of the templates associated with t, including t</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// itself.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>func (t *Template) Templates() []*Template {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	ns := t.nameSpace
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	ns.mu.Lock()
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	defer ns.mu.Unlock()
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// Return a slice so we don&#39;t expose the map.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	m := make([]*Template, 0, len(ns.set))
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	for _, v := range ns.set {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		m = append(m, v)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return m
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Option sets options for the template. Options are described by</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// strings, either a simple string or &#34;key=value&#34;. There can be at</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// most one equals sign in an option string. If the option string</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// is unrecognized or otherwise invalid, Option panics.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Known options:</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// missingkey: Control the behavior during execution if a map is</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// indexed with a key that is not present in the map.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//	&#34;missingkey=default&#34; or &#34;missingkey=invalid&#34;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//		The default behavior: Do nothing and continue execution.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//		If printed, the result of the index operation is the string</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//		&#34;&lt;no value&gt;&#34;.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//	&#34;missingkey=zero&#34;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//		The operation returns the zero value for the map type&#39;s element.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//	&#34;missingkey=error&#34;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//		Execution stops immediately with an error.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func (t *Template) Option(opt ...string) *Template {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	t.text.Option(opt...)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return t
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// checkCanParse checks whether it is OK to parse templates.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// If not, it returns an error.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func (t *Template) checkCanParse() error {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	if t == nil {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		return nil
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if t.nameSpace.escaped {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;html/template: cannot Parse after Execute&#34;)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return nil
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// escape escapes all associated templates.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (t *Template) escape() error {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	t.nameSpace.escaped = true
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	if t.escapeErr == nil {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		if t.Tree == nil {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;template: %q is an incomplete or empty template&#34;, t.Name())
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		if err := escapeTemplate(t, t.text.Root, t.Name()); err != nil {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			return err
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	} else if t.escapeErr != escapeOK {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return t.escapeErr
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	return nil
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Execute applies a parsed template to the specified data object,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// writing the output to wr.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// If an error occurs executing the template or writing its output,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// execution stops, but partial results may already have been written to</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// the output writer.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// A template may be executed safely in parallel, although if parallel</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// executions share a Writer the output may be interleaved.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (t *Template) Execute(wr io.Writer, data any) error {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	if err := t.escape(); err != nil {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		return err
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return t.text.Execute(wr, data)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// ExecuteTemplate applies the template associated with t that has the given</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// name to the specified data object and writes the output to wr.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// If an error occurs executing the template or writing its output,</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// execution stops, but partial results may already have been written to</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// the output writer.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// A template may be executed safely in parallel, although if parallel</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// executions share a Writer the output may be interleaved.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (t *Template) ExecuteTemplate(wr io.Writer, name string, data any) error {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	tmpl, err := t.lookupAndEscapeTemplate(name)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if err != nil {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		return err
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	return tmpl.text.Execute(wr, data)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// lookupAndEscapeTemplate guarantees that the template with the given name</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// is escaped, or returns an error if it cannot be. It returns the named</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// template.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (t *Template) lookupAndEscapeTemplate(name string) (tmpl *Template, err error) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	t.nameSpace.escaped = true
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	tmpl = t.set[name]
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if tmpl == nil {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;html/template: %q is undefined&#34;, name)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if tmpl.escapeErr != nil &amp;&amp; tmpl.escapeErr != escapeOK {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return nil, tmpl.escapeErr
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if tmpl.text.Tree == nil || tmpl.text.Root == nil {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;html/template: %q is an incomplete template&#34;, name)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if t.text.Lookup(name) == nil {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		panic(&#34;html/template internal error: template escaping out of sync&#34;)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	if tmpl.escapeErr == nil {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		err = escapeTemplate(tmpl, tmpl.text.Root, name)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return tmpl, err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// DefinedTemplates returns a string listing the defined templates,</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// prefixed by the string &#34;; defined templates are: &#34;. If there are none,</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// it returns the empty string. Used to generate an error message.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func (t *Template) DefinedTemplates() string {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	return t.text.DefinedTemplates()
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// Parse parses text as a template body for t.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Named template definitions ({{define ...}} or {{block ...}} statements) in text</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// define additional templates associated with t and are removed from the</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// definition of t itself.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// Templates can be redefined in successive calls to Parse,</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// before the first use of Execute on t or any associated template.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// A template definition with a body containing only white space and comments</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// is considered empty and will not replace an existing template&#39;s body.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// This allows using Parse to add new named template definitions without</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// overwriting the main template body.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>func (t *Template) Parse(text string) (*Template, error) {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if err := t.checkCanParse(); err != nil {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		return nil, err
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	ret, err := t.text.Parse(text)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if err != nil {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		return nil, err
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// In general, all the named templates might have changed underfoot.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// Regardless, some new ones may have been defined.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// The template.Template set has been updated; update ours.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	for _, v := range ret.Templates() {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		name := v.Name()
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		tmpl := t.set[name]
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if tmpl == nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			tmpl = t.new(name)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		tmpl.text = v
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		tmpl.Tree = v.Tree
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	return t, nil
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// AddParseTree creates a new template with the name and parse tree</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// and associates it with t.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// It returns an error if t or any associated template has already been executed.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error) {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if err := t.checkCanParse(); err != nil {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return nil, err
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	text, err := t.text.AddParseTree(name, tree)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	if err != nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		return nil, err
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	ret := &amp;Template{
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		nil,
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		text,
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		text.Tree,
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		t.nameSpace,
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	t.set[name] = ret
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	return ret, nil
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// Clone returns a duplicate of the template, including all associated</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// templates. The actual representation is not copied, but the name space of</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// associated templates is, so further calls to Parse in the copy will add</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// templates to the copy but not to the original. Clone can be used to prepare</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// common templates and use them with variant definitions for other templates</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// by adding the variants after the clone is made.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// It returns an error if t has already been executed.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (t *Template) Clone() (*Template, error) {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if t.escapeErr != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;html/template: cannot Clone %q after it has executed&#34;, t.Name())
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	textClone, err := t.text.Clone()
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	if err != nil {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		return nil, err
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	ns := &amp;nameSpace{set: make(map[string]*Template)}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	ns.esc = makeEscaper(ns)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	ret := &amp;Template{
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		nil,
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		textClone,
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		textClone.Tree,
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		ns,
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	ret.set[ret.Name()] = ret
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	for _, x := range textClone.Templates() {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		name := x.Name()
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		src := t.set[name]
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		if src == nil || src.escapeErr != nil {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;html/template: cannot Clone %q after it has executed&#34;, t.Name())
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		x.Tree = x.Tree.Copy()
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		ret.set[name] = &amp;Template{
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>			nil,
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			x,
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			x.Tree,
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			ret.nameSpace,
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// Return the template associated with the name of this template.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	return ret.set[ret.Name()], nil
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// New allocates a new HTML template with the given name.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>func New(name string) *Template {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	ns := &amp;nameSpace{set: make(map[string]*Template)}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	ns.esc = makeEscaper(ns)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	tmpl := &amp;Template{
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		nil,
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		template.New(name),
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		nil,
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		ns,
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	tmpl.set[name] = tmpl
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	return tmpl
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// New allocates a new HTML template associated with the given one</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// and with the same delimiters. The association, which is transitive,</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// allows one template to invoke another with a {{template}} action.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// If a template with the given name already exists, the new HTML template</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// will replace it. The existing template will be reset and disassociated with</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// t.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func (t *Template) New(name string) *Template {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	return t.new(name)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// new is the implementation of New, without the lock.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>func (t *Template) new(name string) *Template {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	tmpl := &amp;Template{
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		nil,
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		t.text.New(name),
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		nil,
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		t.nameSpace,
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if existing, ok := tmpl.set[name]; ok {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		emptyTmpl := New(existing.Name())
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		*existing = *emptyTmpl
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	tmpl.set[name] = tmpl
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	return tmpl
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// Name returns the name of the template.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>func (t *Template) Name() string {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	return t.text.Name()
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>type FuncMap = template.FuncMap
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// Funcs adds the elements of the argument map to the template&#39;s function map.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// It must be called before the template is parsed.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// It panics if a value in the map is not a function with appropriate return</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// type. However, it is legal to overwrite elements of the map. The return</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// value is the template, so calls can be chained.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>func (t *Template) Funcs(funcMap FuncMap) *Template {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	t.text.Funcs(template.FuncMap(funcMap))
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	return t
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// Delims sets the action delimiters to the specified strings, to be used in</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// definitions will inherit the settings. An empty delimiter stands for the</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// corresponding default: {{ or }}.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// The return value is the template, so calls can be chained.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>func (t *Template) Delims(left, right string) *Template {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	t.text.Delims(left, right)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return t
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// Lookup returns the template with the given name that is associated with t,</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// or nil if there is no such template.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func (t *Template) Lookup(name string) *Template {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	t.nameSpace.mu.Lock()
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	defer t.nameSpace.mu.Unlock()
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	return t.set[name]
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// Must is a helper that wraps a call to a function returning (*Template, error)</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// and panics if the error is non-nil. It is intended for use in variable initializations</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// such as</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">//	var t = template.Must(template.New(&#34;name&#34;).Parse(&#34;html&#34;))</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func Must(t *Template, err error) *Template {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if err != nil {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		panic(err)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	return t
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// ParseFiles creates a new Template and parses the template definitions from</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// the named files. The returned template&#39;s name will have the (base) name and</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// (parsed) contents of the first file. There must be at least one file.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// If an error occurs, parsing stops and the returned *Template is nil.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// For instance, ParseFiles(&#34;a/foo&#34;, &#34;b/foo&#34;) stores &#34;b/foo&#34; as the template</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// named &#34;foo&#34;, while &#34;a/foo&#34; is unavailable.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func ParseFiles(filenames ...string) (*Template, error) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	return parseFiles(nil, readFileOS, filenames...)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// ParseFiles parses the named files and associates the resulting templates with</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// t. If an error occurs, parsing stops and the returned template is nil;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// otherwise it is t. There must be at least one file.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// ParseFiles returns an error if t or any associated template has already been executed.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>func (t *Template) ParseFiles(filenames ...string) (*Template, error) {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	return parseFiles(t, readFileOS, filenames...)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// parseFiles is the helper for the method and function. If the argument</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// template is nil, it is created from the first file.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func parseFiles(t *Template, readFile func(string) (string, []byte, error), filenames ...string) (*Template, error) {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	if err := t.checkCanParse(); err != nil {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return nil, err
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	if len(filenames) == 0 {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		<span class="comment">// Not really a problem, but be consistent.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;html/template: no files named in call to ParseFiles&#34;)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	for _, filename := range filenames {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		name, b, err := readFile(filename)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		if err != nil {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			return nil, err
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		s := string(b)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		<span class="comment">// First template becomes return value if not already defined,</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		<span class="comment">// and we use that one for subsequent New calls to associate</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		<span class="comment">// all the templates together. Also, if this file has the same name</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		<span class="comment">// as t, this file becomes the contents of t, so</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		<span class="comment">//  t, err := New(name).Funcs(xxx).ParseFiles(name)</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		<span class="comment">// works. Otherwise we create a new template associated with t.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		var tmpl *Template
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		if t == nil {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			t = New(name)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		if name == t.Name() {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			tmpl = t
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		} else {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			tmpl = t.New(name)
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		_, err = tmpl.Parse(s)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if err != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			return nil, err
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	return t, nil
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// ParseGlob creates a new Template and parses the template definitions from</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// the files identified by the pattern. The files are matched according to the</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// semantics of filepath.Match, and the pattern must match at least one file.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// The returned template will have the (base) name and (parsed) contents of the</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// first file matched by the pattern. ParseGlob is equivalent to calling</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// ParseFiles with the list of files matched by the pattern.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>func ParseGlob(pattern string) (*Template, error) {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	return parseGlob(nil, pattern)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// ParseGlob parses the template definitions in the files identified by the</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// pattern and associates the resulting templates with t. The files are matched</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// according to the semantics of filepath.Match, and the pattern must match at</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// least one file. ParseGlob is equivalent to calling t.ParseFiles with the</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// list of files matched by the pattern.</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// When parsing multiple files with the same name in different directories,</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// the last one mentioned will be the one that results.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// ParseGlob returns an error if t or any associated template has already been executed.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>func (t *Template) ParseGlob(pattern string) (*Template, error) {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	return parseGlob(t, pattern)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// parseGlob is the implementation of the function and method ParseGlob.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>func parseGlob(t *Template, pattern string) (*Template, error) {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	if err := t.checkCanParse(); err != nil {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		return nil, err
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	filenames, err := filepath.Glob(pattern)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	if err != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		return nil, err
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	if len(filenames) == 0 {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;html/template: pattern matches no files: %#q&#34;, pattern)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	return parseFiles(t, readFileOS, filenames...)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// IsTrue reports whether the value is &#39;true&#39;, in the sense of not the zero of its type,</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// and whether the value has a meaningful truth value. This is the definition of</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// truth used by if and other such actions.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="selection">func IsTrue(val any) (truth, ok bool)</span> {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	return template.IsTrue(val)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// ParseFS is like ParseFiles or ParseGlob but reads from the file system fs</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// instead of the host operating system&#39;s file system.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// It accepts a list of glob patterns.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// (Note that most file names serve as glob patterns matching only themselves.)</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>func ParseFS(fs fs.FS, patterns ...string) (*Template, error) {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	return parseFS(nil, fs, patterns)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">// ParseFS is like ParseFiles or ParseGlob but reads from the file system fs</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">// instead of the host operating system&#39;s file system.</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">// It accepts a list of glob patterns.</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// (Note that most file names serve as glob patterns matching only themselves.)</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (t *Template) ParseFS(fs fs.FS, patterns ...string) (*Template, error) {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	return parseFS(t, fs, patterns)
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>func parseFS(t *Template, fsys fs.FS, patterns []string) (*Template, error) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	var filenames []string
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	for _, pattern := range patterns {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		list, err := fs.Glob(fsys, pattern)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		if err != nil {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			return nil, err
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		if len(list) == 0 {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;template: pattern matches no files: %#q&#34;, pattern)
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		filenames = append(filenames, list...)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	return parseFiles(t, readFileFS(fsys), filenames...)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>func readFileOS(file string) (name string, b []byte, err error) {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	name = filepath.Base(file)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	b, err = os.ReadFile(file)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	return
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>func readFileFS(fsys fs.FS) func(string) (string, []byte, error) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	return func(file string) (name string, b []byte, err error) {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		name = path.Base(file)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		b, err = fs.ReadFile(fsys, file)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
</pre><p><a href="template.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
