<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/draw/draw.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./draw.go?s=1743:1965#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/draw">draw</a>/<span class="text-muted">draw.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/draw">image/draw</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package draw provides image composition functions.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// See &#34;The Go image/draw package&#34; for an introduction to this package:</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// https://golang.org/doc/articles/image_draw.html</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package draw
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;image/internal/imageutil&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// m is the maximum color value returned by image.Color.RGBA.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>const m = 1&lt;&lt;16 - 1
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Image is an image.Image with a Set method to change a single pixel.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type Image interface {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	image.Image
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	Set(x, y int, c color.Color)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// RGBA64Image extends both the [Image] and [image.RGBA64Image] interfaces with a</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// SetRGBA64 method to change a single pixel. SetRGBA64 is equivalent to</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// calling Set, but it can avoid allocations from converting concrete color</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// types to the [color.Color] interface type.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type RGBA64Image interface {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	image.RGBA64Image
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Set(x, y int, c color.Color)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	SetRGBA64(x, y int, c color.RGBA64)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Quantizer produces a palette for an image.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type Quantizer interface {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// Quantize appends up to cap(p) - len(p) colors to p and returns the</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// updated palette suitable for converting m to a paletted image.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Quantize(p color.Palette, m image.Image) color.Palette
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Op is a Porter-Duff compositing operator.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type Op int
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>const (
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// Over specifies ``(src in mask) over dst&#39;&#39;.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Over Op = iota
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// Src specifies ``src in mask&#39;&#39;.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	Src
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Draw implements the [Drawer] interface by calling the Draw function with this</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// [Op].</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func (op Op) Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	DrawMask(dst, r, src, sp, nil, image.Point{}, op)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// Drawer contains the [Draw] method.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="selection">type Drawer interface {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Draw aligns r.Min in dst with sp in src and then replaces the</span><span class="selection">
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	</span><span class="selection-comment">// rectangle r in dst with the result of drawing src on dst.</span><span class="selection">
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// FloydSteinberg is a [Drawer] that is the [Src] [Op] with Floyd-Steinberg error</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// diffusion.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>var FloydSteinberg Drawer = floydSteinberg{}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>type floydSteinberg struct{}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (floydSteinberg) Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point) {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	clip(dst, &amp;r, src, &amp;sp, nil, nil)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		return
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	drawPaletted(dst, r, src, sp, true)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// clip clips r against each image&#39;s bounds (after translating into the</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// destination image&#39;s coordinate space) and shifts the points sp and mp by</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// the same amount as the change in r.Min.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func clip(dst Image, r *image.Rectangle, src image.Image, sp *image.Point, mask image.Image, mp *image.Point) {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	orig := r.Min
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	*r = r.Intersect(dst.Bounds())
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	*r = r.Intersect(src.Bounds().Add(orig.Sub(*sp)))
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	if mask != nil {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		*r = r.Intersect(mask.Bounds().Add(orig.Sub(*mp)))
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	dx := r.Min.X - orig.X
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	dy := r.Min.Y - orig.Y
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if dx == 0 &amp;&amp; dy == 0 {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	sp.X += dx
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	sp.Y += dy
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if mp != nil {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		mp.X += dx
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		mp.Y += dy
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func processBackward(dst image.Image, r image.Rectangle, src image.Image, sp image.Point) bool {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return dst == src &amp;&amp;
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		r.Overlaps(r.Add(sp.Sub(r.Min))) &amp;&amp;
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		(sp.Y &lt; r.Min.Y || (sp.Y == r.Min.Y &amp;&amp; sp.X &lt; r.Min.X))
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Draw calls [DrawMask] with a nil mask.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point, op Op) {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	DrawMask(dst, r, src, sp, nil, image.Point{}, op)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// DrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// in dst with the result of a Porter-Duff composition. A nil mask is treated as opaque.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func DrawMask(dst Image, r image.Rectangle, src image.Image, sp image.Point, mask image.Image, mp image.Point, op Op) {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	clip(dst, &amp;r, src, &amp;sp, mask, &amp;mp)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// Fast paths for special cases. If none of them apply, then we fall back</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// to general but slower implementations.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// For NRGBA and NRGBA64 image types, the code paths aren&#39;t just faster.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// They also avoid the information loss that would otherwise occur from</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// converting non-alpha-premultiplied color to and from alpha-premultiplied</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// color. See TestDrawSrcNonpremultiplied.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	switch dst0 := dst.(type) {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	case *image.RGBA:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if op == Over {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			if mask == nil {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>				switch src0 := src.(type) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>				case *image.Uniform:
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>					sr, sg, sb, sa := src0.RGBA()
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>					if sa == 0xffff {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>						drawFillSrc(dst0, r, sr, sg, sb, sa)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>					} else {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>						drawFillOver(dst0, r, sr, sg, sb, sa)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>					}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>					return
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>				case *image.RGBA:
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>					drawCopyOver(dst0, r, src0, sp)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>					return
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				case *image.NRGBA:
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					drawNRGBAOver(dst0, r, src0, sp)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					return
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>				case *image.YCbCr:
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>					<span class="comment">// An image.YCbCr is always fully opaque, and so if the</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>					<span class="comment">// mask is nil (i.e. fully opaque) then the op is</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>					<span class="comment">// effectively always Src. Similarly for image.Gray and</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>					<span class="comment">// image.CMYK.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>					if imageutil.DrawYCbCr(dst0, r, src0, sp) {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>						return
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>					}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>				case *image.Gray:
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>					drawGray(dst0, r, src0, sp)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>					return
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>				case *image.CMYK:
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>					drawCMYK(dst0, r, src0, sp)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>					return
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>				}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			} else if mask0, ok := mask.(*image.Alpha); ok {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>				switch src0 := src.(type) {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>				case *image.Uniform:
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>					drawGlyphOver(dst0, r, src0, mask0, mp)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>					return
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>				case *image.RGBA:
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>					drawRGBAMaskOver(dst0, r, src0, sp, mask0, mp)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>					return
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>				case *image.Gray:
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>					drawGrayMaskOver(dst0, r, src0, sp, mask0, mp)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>					return
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>				<span class="comment">// Case order matters. The next case (image.RGBA64Image) is an</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>				<span class="comment">// interface type that the concrete types above also implement.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>				case image.RGBA64Image:
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>					drawRGBA64ImageMaskOver(dst0, r, src0, sp, mask0, mp)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>					return
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		} else {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			if mask == nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				switch src0 := src.(type) {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>				case *image.Uniform:
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>					sr, sg, sb, sa := src0.RGBA()
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>					drawFillSrc(dst0, r, sr, sg, sb, sa)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>					return
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>				case *image.RGBA:
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>					d0 := dst0.PixOffset(r.Min.X, r.Min.Y)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>					s0 := src0.PixOffset(sp.X, sp.Y)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>					drawCopySrc(
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>						dst0.Pix[d0:], dst0.Stride, r, src0.Pix[s0:], src0.Stride, sp, 4*r.Dx())
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>					return
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				case *image.NRGBA:
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>					drawNRGBASrc(dst0, r, src0, sp)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>					return
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>				case *image.YCbCr:
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>					if imageutil.DrawYCbCr(dst0, r, src0, sp) {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>						return
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>					}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>				case *image.Gray:
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>					drawGray(dst0, r, src0, sp)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>					return
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				case *image.CMYK:
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>					drawCMYK(dst0, r, src0, sp)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>					return
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>				}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		drawRGBA(dst0, r, src, sp, mask, mp, op)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	case *image.Paletted:
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		if op == Src &amp;&amp; mask == nil {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			if src0, ok := src.(*image.Uniform); ok {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>				colorIndex := uint8(dst0.Palette.Index(src0.C))
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				i0 := dst0.PixOffset(r.Min.X, r.Min.Y)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				i1 := i0 + r.Dx()
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				for i := i0; i &lt; i1; i++ {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>					dst0.Pix[i] = colorIndex
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				firstRow := dst0.Pix[i0:i1]
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				for y := r.Min.Y + 1; y &lt; r.Max.Y; y++ {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>					i0 += dst0.Stride
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>					i1 += dst0.Stride
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>					copy(dst0.Pix[i0:i1], firstRow)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>				}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>				return
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			} else if !processBackward(dst, r, src, sp) {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				drawPaletted(dst0, r, src, sp, false)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				return
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	case *image.NRGBA:
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		if op == Src &amp;&amp; mask == nil {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			if src0, ok := src.(*image.NRGBA); ok {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>				d0 := dst0.PixOffset(r.Min.X, r.Min.Y)
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				s0 := src0.PixOffset(sp.X, sp.Y)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>				drawCopySrc(
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>					dst0.Pix[d0:], dst0.Stride, r, src0.Pix[s0:], src0.Stride, sp, 4*r.Dx())
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				return
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	case *image.NRGBA64:
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		if op == Src &amp;&amp; mask == nil {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			if src0, ok := src.(*image.NRGBA64); ok {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				d0 := dst0.PixOffset(r.Min.X, r.Min.Y)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				s0 := src0.PixOffset(sp.X, sp.Y)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>				drawCopySrc(
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>					dst0.Pix[d0:], dst0.Stride, r, src0.Pix[s0:], src0.Stride, sp, 8*r.Dx())
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				return
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	x0, x1, dx := r.Min.X, r.Max.X, 1
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	y0, y1, dy := r.Min.Y, r.Max.Y, 1
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if processBackward(dst, r, src, sp) {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		x0, x1, dx = x1-1, x0-1, -1
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		y0, y1, dy = y1-1, y0-1, -1
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// FALLBACK1.17</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// Try the draw.RGBA64Image and image.RGBA64Image interfaces, part of the</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">// standard library since Go 1.17. These are like the draw.Image and</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	<span class="comment">// image.Image interfaces but they can avoid allocations from converting</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// concrete color types to the color.Color interface type.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if dst0, _ := dst.(RGBA64Image); dst0 != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		if src0, _ := src.(image.RGBA64Image); src0 != nil {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			if mask == nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>				sy := sp.Y + y0 - r.Min.Y
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>				my := mp.Y + y0 - r.Min.Y
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>					sx := sp.X + x0 - r.Min.X
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>					mx := mp.X + x0 - r.Min.X
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>					for x := x0; x != x1; x, sx, mx = x+dx, sx+dx, mx+dx {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>						if op == Src {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>							dst0.SetRGBA64(x, y, src0.RGBA64At(sx, sy))
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>						} else {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>							srgba := src0.RGBA64At(sx, sy)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>							a := m - uint32(srgba.A)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>							drgba := dst0.RGBA64At(x, y)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>							dst0.SetRGBA64(x, y, color.RGBA64{
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>								R: uint16((uint32(drgba.R)*a)/m) + srgba.R,
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>								G: uint16((uint32(drgba.G)*a)/m) + srgba.G,
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>								B: uint16((uint32(drgba.B)*a)/m) + srgba.B,
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>								A: uint16((uint32(drgba.A)*a)/m) + srgba.A,
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>							})
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>						}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>					}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>				}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>				return
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			} else if mask0, _ := mask.(image.RGBA64Image); mask0 != nil {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>				sy := sp.Y + y0 - r.Min.Y
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>				my := mp.Y + y0 - r.Min.Y
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>					sx := sp.X + x0 - r.Min.X
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>					mx := mp.X + x0 - r.Min.X
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>					for x := x0; x != x1; x, sx, mx = x+dx, sx+dx, mx+dx {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>						ma := uint32(mask0.RGBA64At(mx, my).A)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>						switch {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>						case ma == 0:
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>							if op == Over {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>								<span class="comment">// No-op.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>							} else {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>								dst0.SetRGBA64(x, y, color.RGBA64{})
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>							}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>						case ma == m &amp;&amp; op == Src:
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>							dst0.SetRGBA64(x, y, src0.RGBA64At(sx, sy))
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>						default:
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>							srgba := src0.RGBA64At(sx, sy)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>							if op == Over {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>								drgba := dst0.RGBA64At(x, y)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>								a := m - (uint32(srgba.A) * ma / m)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>								dst0.SetRGBA64(x, y, color.RGBA64{
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>									R: uint16((uint32(drgba.R)*a + uint32(srgba.R)*ma) / m),
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>									G: uint16((uint32(drgba.G)*a + uint32(srgba.G)*ma) / m),
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>									B: uint16((uint32(drgba.B)*a + uint32(srgba.B)*ma) / m),
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>									A: uint16((uint32(drgba.A)*a + uint32(srgba.A)*ma) / m),
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>								})
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>							} else {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>								dst0.SetRGBA64(x, y, color.RGBA64{
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>									R: uint16(uint32(srgba.R) * ma / m),
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>									G: uint16(uint32(srgba.G) * ma / m),
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>									B: uint16(uint32(srgba.B) * ma / m),
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>									A: uint16(uint32(srgba.A) * ma / m),
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>								})
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>							}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>						}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>					}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				return
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	<span class="comment">// FALLBACK1.0</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// If none of the faster code paths above apply, use the draw.Image and</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// image.Image interfaces, part of the standard library since Go 1.0.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	var out color.RGBA64
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	sy := sp.Y + y0 - r.Min.Y
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	my := mp.Y + y0 - r.Min.Y
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		sx := sp.X + x0 - r.Min.X
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		mx := mp.X + x0 - r.Min.X
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		for x := x0; x != x1; x, sx, mx = x+dx, sx+dx, mx+dx {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			ma := uint32(m)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			if mask != nil {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				_, _, _, ma = mask.At(mx, my).RGBA()
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			switch {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			case ma == 0:
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>				if op == Over {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>					<span class="comment">// No-op.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>				} else {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>					dst.Set(x, y, color.Transparent)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>				}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			case ma == m &amp;&amp; op == Src:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>				dst.Set(x, y, src.At(sx, sy))
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			default:
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				sr, sg, sb, sa := src.At(sx, sy).RGBA()
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>				if op == Over {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>					dr, dg, db, da := dst.At(x, y).RGBA()
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>					a := m - (sa * ma / m)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>					out.R = uint16((dr*a + sr*ma) / m)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>					out.G = uint16((dg*a + sg*ma) / m)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>					out.B = uint16((db*a + sb*ma) / m)
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>					out.A = uint16((da*a + sa*ma) / m)
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>				} else {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>					out.R = uint16(sr * ma / m)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>					out.G = uint16(sg * ma / m)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>					out.B = uint16(sb * ma / m)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>					out.A = uint16(sa * ma / m)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>				}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				<span class="comment">// The third argument is &amp;out instead of out (and out is</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				<span class="comment">// declared outside of the inner loop) to avoid the implicit</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				<span class="comment">// conversion to color.Color here allocating memory in the</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>				<span class="comment">// inner loop if sizeof(color.RGBA64) &gt; sizeof(uintptr).</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				dst.Set(x, y, &amp;out)
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func drawFillOver(dst *image.RGBA, r image.Rectangle, sr, sg, sb, sa uint32) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// The 0x101 is here for the same reason as in drawRGBA.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	a := (m - sa) * 0x101
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	i0 := dst.PixOffset(r.Min.X, r.Min.Y)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	i1 := i0 + r.Dx()*4
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	for y := r.Min.Y; y != r.Max.Y; y++ {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		for i := i0; i &lt; i1; i += 4 {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			dr := &amp;dst.Pix[i+0]
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			dg := &amp;dst.Pix[i+1]
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			db := &amp;dst.Pix[i+2]
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			da := &amp;dst.Pix[i+3]
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			*dr = uint8((uint32(*dr)*a/m + sr) &gt;&gt; 8)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			*dg = uint8((uint32(*dg)*a/m + sg) &gt;&gt; 8)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			*db = uint8((uint32(*db)*a/m + sb) &gt;&gt; 8)
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			*da = uint8((uint32(*da)*a/m + sa) &gt;&gt; 8)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		i0 += dst.Stride
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		i1 += dst.Stride
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>func drawFillSrc(dst *image.RGBA, r image.Rectangle, sr, sg, sb, sa uint32) {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	sr8 := uint8(sr &gt;&gt; 8)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	sg8 := uint8(sg &gt;&gt; 8)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	sb8 := uint8(sb &gt;&gt; 8)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	sa8 := uint8(sa &gt;&gt; 8)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	<span class="comment">// The built-in copy function is faster than a straightforward for loop to fill the destination with</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	<span class="comment">// the color, but copy requires a slice source. We therefore use a for loop to fill the first row, and</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// then use the first row as the slice source for the remaining rows.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	i0 := dst.PixOffset(r.Min.X, r.Min.Y)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	i1 := i0 + r.Dx()*4
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	for i := i0; i &lt; i1; i += 4 {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		dst.Pix[i+0] = sr8
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		dst.Pix[i+1] = sg8
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		dst.Pix[i+2] = sb8
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		dst.Pix[i+3] = sa8
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	firstRow := dst.Pix[i0:i1]
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	for y := r.Min.Y + 1; y &lt; r.Max.Y; y++ {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		i0 += dst.Stride
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		i1 += dst.Stride
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		copy(dst.Pix[i0:i1], firstRow)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>func drawCopyOver(dst *image.RGBA, r image.Rectangle, src *image.RGBA, sp image.Point) {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	dx, dy := r.Dx(), r.Dy()
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	d0 := dst.PixOffset(r.Min.X, r.Min.Y)
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	s0 := src.PixOffset(sp.X, sp.Y)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	var (
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		ddelta, sdelta int
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		i0, i1, idelta int
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	)
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	if r.Min.Y &lt; sp.Y || r.Min.Y == sp.Y &amp;&amp; r.Min.X &lt;= sp.X {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		ddelta = dst.Stride
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		sdelta = src.Stride
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		i0, i1, idelta = 0, dx*4, +4
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	} else {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// If the source start point is higher than the destination start point, or equal height but to the left,</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">// then we compose the rows in right-to-left, bottom-up order instead of left-to-right, top-down.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		d0 += (dy - 1) * dst.Stride
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		s0 += (dy - 1) * src.Stride
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		ddelta = -dst.Stride
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		sdelta = -src.Stride
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		i0, i1, idelta = (dx-1)*4, -4, -4
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	for ; dy &gt; 0; dy-- {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		dpix := dst.Pix[d0:]
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		spix := src.Pix[s0:]
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		for i := i0; i != i1; i += idelta {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			s := spix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			sr := uint32(s[0]) * 0x101
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			sg := uint32(s[1]) * 0x101
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			sb := uint32(s[2]) * 0x101
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			sa := uint32(s[3]) * 0x101
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			<span class="comment">// The 0x101 is here for the same reason as in drawRGBA.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			a := (m - sa) * 0x101
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			d := dpix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			d[0] = uint8((uint32(d[0])*a/m + sr) &gt;&gt; 8)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			d[1] = uint8((uint32(d[1])*a/m + sg) &gt;&gt; 8)
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			d[2] = uint8((uint32(d[2])*a/m + sb) &gt;&gt; 8)
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			d[3] = uint8((uint32(d[3])*a/m + sa) &gt;&gt; 8)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		d0 += ddelta
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		s0 += sdelta
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// drawCopySrc copies bytes to dstPix from srcPix. These arguments roughly</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// correspond to the Pix fields of the image package&#39;s concrete image.Image</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// implementations, but are offset (dstPix is dst.Pix[dpOffset:] not dst.Pix).</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func drawCopySrc(
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	dstPix []byte, dstStride int, r image.Rectangle,
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	srcPix []byte, srcStride int, sp image.Point,
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	bytesPerRow int) {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	d0, s0, ddelta, sdelta, dy := 0, 0, dstStride, srcStride, r.Dy()
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	if r.Min.Y &gt; sp.Y {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		<span class="comment">// If the source start point is higher than the destination start</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		<span class="comment">// point, then we compose the rows in bottom-up order instead of</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		<span class="comment">// top-down. Unlike the drawCopyOver function, we don&#39;t have to check</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		<span class="comment">// the x coordinates because the built-in copy function can handle</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		<span class="comment">// overlapping slices.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		d0 = (dy - 1) * dstStride
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		s0 = (dy - 1) * srcStride
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		ddelta = -dstStride
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		sdelta = -srcStride
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	for ; dy &gt; 0; dy-- {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		copy(dstPix[d0:d0+bytesPerRow], srcPix[s0:s0+bytesPerRow])
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		d0 += ddelta
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		s0 += sdelta
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>func drawNRGBAOver(dst *image.RGBA, r image.Rectangle, src *image.NRGBA, sp image.Point) {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	i0 := (r.Min.X - dst.Rect.Min.X) * 4
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	i1 := (r.Max.X - dst.Rect.Min.X) * 4
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	si0 := (sp.X - src.Rect.Min.X) * 4
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	yMax := r.Max.Y - dst.Rect.Min.Y
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	y := r.Min.Y - dst.Rect.Min.Y
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	sy := sp.Y - src.Rect.Min.Y
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	for ; y != yMax; y, sy = y+1, sy+1 {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		dpix := dst.Pix[y*dst.Stride:]
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		spix := src.Pix[sy*src.Stride:]
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		for i, si := i0, si0; i &lt; i1; i, si = i+4, si+4 {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			<span class="comment">// Convert from non-premultiplied color to pre-multiplied color.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			s := spix[si : si+4 : si+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			sa := uint32(s[3]) * 0x101
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>			sr := uint32(s[0]) * sa / 0xff
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>			sg := uint32(s[1]) * sa / 0xff
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			sb := uint32(s[2]) * sa / 0xff
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>			d := dpix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			dr := uint32(d[0])
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			dg := uint32(d[1])
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			db := uint32(d[2])
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			da := uint32(d[3])
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			<span class="comment">// The 0x101 is here for the same reason as in drawRGBA.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			a := (m - sa) * 0x101
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			d[0] = uint8((dr*a/m + sr) &gt;&gt; 8)
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			d[1] = uint8((dg*a/m + sg) &gt;&gt; 8)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			d[2] = uint8((db*a/m + sb) &gt;&gt; 8)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			d[3] = uint8((da*a/m + sa) &gt;&gt; 8)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func drawNRGBASrc(dst *image.RGBA, r image.Rectangle, src *image.NRGBA, sp image.Point) {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	i0 := (r.Min.X - dst.Rect.Min.X) * 4
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	i1 := (r.Max.X - dst.Rect.Min.X) * 4
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	si0 := (sp.X - src.Rect.Min.X) * 4
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	yMax := r.Max.Y - dst.Rect.Min.Y
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	y := r.Min.Y - dst.Rect.Min.Y
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	sy := sp.Y - src.Rect.Min.Y
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	for ; y != yMax; y, sy = y+1, sy+1 {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		dpix := dst.Pix[y*dst.Stride:]
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		spix := src.Pix[sy*src.Stride:]
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		for i, si := i0, si0; i &lt; i1; i, si = i+4, si+4 {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			<span class="comment">// Convert from non-premultiplied color to pre-multiplied color.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			s := spix[si : si+4 : si+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			sa := uint32(s[3]) * 0x101
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			sr := uint32(s[0]) * sa / 0xff
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			sg := uint32(s[1]) * sa / 0xff
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			sb := uint32(s[2]) * sa / 0xff
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>			d := dpix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			d[0] = uint8(sr &gt;&gt; 8)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			d[1] = uint8(sg &gt;&gt; 8)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			d[2] = uint8(sb &gt;&gt; 8)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			d[3] = uint8(sa &gt;&gt; 8)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func drawGray(dst *image.RGBA, r image.Rectangle, src *image.Gray, sp image.Point) {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	i0 := (r.Min.X - dst.Rect.Min.X) * 4
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	i1 := (r.Max.X - dst.Rect.Min.X) * 4
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	si0 := (sp.X - src.Rect.Min.X) * 1
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	yMax := r.Max.Y - dst.Rect.Min.Y
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	y := r.Min.Y - dst.Rect.Min.Y
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	sy := sp.Y - src.Rect.Min.Y
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	for ; y != yMax; y, sy = y+1, sy+1 {
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		dpix := dst.Pix[y*dst.Stride:]
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		spix := src.Pix[sy*src.Stride:]
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		for i, si := i0, si0; i &lt; i1; i, si = i+4, si+1 {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			p := spix[si]
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			d := dpix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			d[0] = p
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			d[1] = p
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			d[2] = p
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			d[3] = 255
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func drawCMYK(dst *image.RGBA, r image.Rectangle, src *image.CMYK, sp image.Point) {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	i0 := (r.Min.X - dst.Rect.Min.X) * 4
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	i1 := (r.Max.X - dst.Rect.Min.X) * 4
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	si0 := (sp.X - src.Rect.Min.X) * 4
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	yMax := r.Max.Y - dst.Rect.Min.Y
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	y := r.Min.Y - dst.Rect.Min.Y
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	sy := sp.Y - src.Rect.Min.Y
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	for ; y != yMax; y, sy = y+1, sy+1 {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		dpix := dst.Pix[y*dst.Stride:]
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		spix := src.Pix[sy*src.Stride:]
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		for i, si := i0, si0; i &lt; i1; i, si = i+4, si+4 {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>			s := spix[si : si+4 : si+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			d := dpix[i : i+4 : i+4]
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			d[0], d[1], d[2] = color.CMYKToRGB(s[0], s[1], s[2], s[3])
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>			d[3] = 255
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>func drawGlyphOver(dst *image.RGBA, r image.Rectangle, src *image.Uniform, mask *image.Alpha, mp image.Point) {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	i0 := dst.PixOffset(r.Min.X, r.Min.Y)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	i1 := i0 + r.Dx()*4
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	mi0 := mask.PixOffset(mp.X, mp.Y)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	sr, sg, sb, sa := src.RGBA()
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	for y, my := r.Min.Y, mp.Y; y != r.Max.Y; y, my = y+1, my+1 {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		for i, mi := i0, mi0; i &lt; i1; i, mi = i+4, mi+1 {
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			ma := uint32(mask.Pix[mi])
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			if ma == 0 {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>				continue
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			ma |= ma &lt;&lt; 8
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			<span class="comment">// The 0x101 is here for the same reason as in drawRGBA.</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			a := (m - (sa * ma / m)) * 0x101
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			d := dst.Pix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			d[0] = uint8((uint32(d[0])*a + sr*ma) / m &gt;&gt; 8)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			d[1] = uint8((uint32(d[1])*a + sg*ma) / m &gt;&gt; 8)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			d[2] = uint8((uint32(d[2])*a + sb*ma) / m &gt;&gt; 8)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			d[3] = uint8((uint32(d[3])*a + sa*ma) / m &gt;&gt; 8)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		i0 += dst.Stride
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		i1 += dst.Stride
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		mi0 += mask.Stride
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>func drawGrayMaskOver(dst *image.RGBA, r image.Rectangle, src *image.Gray, sp image.Point, mask *image.Alpha, mp image.Point) {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	x0, x1, dx := r.Min.X, r.Max.X, 1
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	y0, y1, dy := r.Min.Y, r.Max.Y, 1
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	if r.Overlaps(r.Add(sp.Sub(r.Min))) {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		if sp.Y &lt; r.Min.Y || sp.Y == r.Min.Y &amp;&amp; sp.X &lt; r.Min.X {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			x0, x1, dx = x1-1, x0-1, -1
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			y0, y1, dy = y1-1, y0-1, -1
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	sy := sp.Y + y0 - r.Min.Y
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	my := mp.Y + y0 - r.Min.Y
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	sx0 := sp.X + x0 - r.Min.X
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	mx0 := mp.X + x0 - r.Min.X
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	sx1 := sx0 + (x1 - x0)
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	i0 := dst.PixOffset(x0, y0)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	di := dx * 4
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			mi := mask.PixOffset(mx, my)
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			ma := uint32(mask.Pix[mi])
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			ma |= ma &lt;&lt; 8
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			si := src.PixOffset(sx, sy)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>			sy := uint32(src.Pix[si])
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			sy |= sy &lt;&lt; 8
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			sa := uint32(0xffff)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			d := dst.Pix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			dr := uint32(d[0])
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>			dg := uint32(d[1])
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			db := uint32(d[2])
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			da := uint32(d[3])
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>			<span class="comment">// dr, dg, db and da are all 8-bit color at the moment, ranging in [0,255].</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			<span class="comment">// We work in 16-bit color, and so would normally do:</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			<span class="comment">// dr |= dr &lt;&lt; 8</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			<span class="comment">// and similarly for dg, db and da, but instead we multiply a</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			<span class="comment">// (which is a 16-bit color, ranging in [0,65535]) by 0x101.</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			<span class="comment">// This yields the same result, but is fewer arithmetic operations.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			a := (m - (sa * ma / m)) * 0x101
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			d[0] = uint8((dr*a + sy*ma) / m &gt;&gt; 8)
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>			d[1] = uint8((dg*a + sy*ma) / m &gt;&gt; 8)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			d[2] = uint8((db*a + sy*ma) / m &gt;&gt; 8)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			d[3] = uint8((da*a + sa*ma) / m &gt;&gt; 8)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		i0 += dy * dst.Stride
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>func drawRGBAMaskOver(dst *image.RGBA, r image.Rectangle, src *image.RGBA, sp image.Point, mask *image.Alpha, mp image.Point) {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	x0, x1, dx := r.Min.X, r.Max.X, 1
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	y0, y1, dy := r.Min.Y, r.Max.Y, 1
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	if dst == src &amp;&amp; r.Overlaps(r.Add(sp.Sub(r.Min))) {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		if sp.Y &lt; r.Min.Y || sp.Y == r.Min.Y &amp;&amp; sp.X &lt; r.Min.X {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			x0, x1, dx = x1-1, x0-1, -1
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			y0, y1, dy = y1-1, y0-1, -1
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	sy := sp.Y + y0 - r.Min.Y
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	my := mp.Y + y0 - r.Min.Y
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	sx0 := sp.X + x0 - r.Min.X
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	mx0 := mp.X + x0 - r.Min.X
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	sx1 := sx0 + (x1 - x0)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	i0 := dst.PixOffset(x0, y0)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	di := dx * 4
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>			mi := mask.PixOffset(mx, my)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			ma := uint32(mask.Pix[mi])
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			ma |= ma &lt;&lt; 8
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			si := src.PixOffset(sx, sy)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			sr := uint32(src.Pix[si+0])
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			sg := uint32(src.Pix[si+1])
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>			sb := uint32(src.Pix[si+2])
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			sa := uint32(src.Pix[si+3])
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			sr |= sr &lt;&lt; 8
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			sg |= sg &lt;&lt; 8
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			sb |= sb &lt;&lt; 8
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			sa |= sa &lt;&lt; 8
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			d := dst.Pix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			dr := uint32(d[0])
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			dg := uint32(d[1])
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			db := uint32(d[2])
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			da := uint32(d[3])
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			<span class="comment">// dr, dg, db and da are all 8-bit color at the moment, ranging in [0,255].</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			<span class="comment">// We work in 16-bit color, and so would normally do:</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			<span class="comment">// dr |= dr &lt;&lt; 8</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>			<span class="comment">// and similarly for dg, db and da, but instead we multiply a</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>			<span class="comment">// (which is a 16-bit color, ranging in [0,65535]) by 0x101.</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			<span class="comment">// This yields the same result, but is fewer arithmetic operations.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			a := (m - (sa * ma / m)) * 0x101
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>			d[0] = uint8((dr*a + sr*ma) / m &gt;&gt; 8)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			d[1] = uint8((dg*a + sg*ma) / m &gt;&gt; 8)
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			d[2] = uint8((db*a + sb*ma) / m &gt;&gt; 8)
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			d[3] = uint8((da*a + sa*ma) / m &gt;&gt; 8)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		i0 += dy * dst.Stride
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>func drawRGBA64ImageMaskOver(dst *image.RGBA, r image.Rectangle, src image.RGBA64Image, sp image.Point, mask *image.Alpha, mp image.Point) {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	x0, x1, dx := r.Min.X, r.Max.X, 1
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	y0, y1, dy := r.Min.Y, r.Max.Y, 1
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	if image.Image(dst) == src &amp;&amp; r.Overlaps(r.Add(sp.Sub(r.Min))) {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		if sp.Y &lt; r.Min.Y || sp.Y == r.Min.Y &amp;&amp; sp.X &lt; r.Min.X {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			x0, x1, dx = x1-1, x0-1, -1
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>			y0, y1, dy = y1-1, y0-1, -1
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>		}
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	sy := sp.Y + y0 - r.Min.Y
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	my := mp.Y + y0 - r.Min.Y
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	sx0 := sp.X + x0 - r.Min.X
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	mx0 := mp.X + x0 - r.Min.X
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	sx1 := sx0 + (x1 - x0)
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	i0 := dst.PixOffset(x0, y0)
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	di := dx * 4
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			mi := mask.PixOffset(mx, my)
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			ma := uint32(mask.Pix[mi])
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>			ma |= ma &lt;&lt; 8
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			srgba := src.RGBA64At(sx, sy)
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			d := dst.Pix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			dr := uint32(d[0])
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			dg := uint32(d[1])
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			db := uint32(d[2])
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			da := uint32(d[3])
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>			<span class="comment">// dr, dg, db and da are all 8-bit color at the moment, ranging in [0,255].</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			<span class="comment">// We work in 16-bit color, and so would normally do:</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			<span class="comment">// dr |= dr &lt;&lt; 8</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>			<span class="comment">// and similarly for dg, db and da, but instead we multiply a</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>			<span class="comment">// (which is a 16-bit color, ranging in [0,65535]) by 0x101.</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			<span class="comment">// This yields the same result, but is fewer arithmetic operations.</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			a := (m - (uint32(srgba.A) * ma / m)) * 0x101
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			d[0] = uint8((dr*a + uint32(srgba.R)*ma) / m &gt;&gt; 8)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			d[1] = uint8((dg*a + uint32(srgba.G)*ma) / m &gt;&gt; 8)
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>			d[2] = uint8((db*a + uint32(srgba.B)*ma) / m &gt;&gt; 8)
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>			d[3] = uint8((da*a + uint32(srgba.A)*ma) / m &gt;&gt; 8)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		}
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		i0 += dy * dst.Stride
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func drawRGBA(dst *image.RGBA, r image.Rectangle, src image.Image, sp image.Point, mask image.Image, mp image.Point, op Op) {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	x0, x1, dx := r.Min.X, r.Max.X, 1
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	y0, y1, dy := r.Min.Y, r.Max.Y, 1
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	if image.Image(dst) == src &amp;&amp; r.Overlaps(r.Add(sp.Sub(r.Min))) {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		if sp.Y &lt; r.Min.Y || sp.Y == r.Min.Y &amp;&amp; sp.X &lt; r.Min.X {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>			x0, x1, dx = x1-1, x0-1, -1
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			y0, y1, dy = y1-1, y0-1, -1
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	sy := sp.Y + y0 - r.Min.Y
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	my := mp.Y + y0 - r.Min.Y
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	sx0 := sp.X + x0 - r.Min.X
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	mx0 := mp.X + x0 - r.Min.X
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	sx1 := sx0 + (x1 - x0)
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	i0 := dst.PixOffset(x0, y0)
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	di := dx * 4
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	<span class="comment">// Try the image.RGBA64Image interface, part of the standard library since</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	<span class="comment">// Go 1.17.</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	<span class="comment">// This optimization is similar to how FALLBACK1.17 optimizes FALLBACK1.0</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	<span class="comment">// in DrawMask, except here the concrete type of dst is known to be</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	<span class="comment">// *image.RGBA.</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	if src0, _ := src.(image.RGBA64Image); src0 != nil {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		if mask == nil {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>			if op == Over {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>					for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>						srgba := src0.RGBA64At(sx, sy)
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>						d := dst.Pix[i : i+4 : i+4]
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>						dr := uint32(d[0])
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>						dg := uint32(d[1])
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>						db := uint32(d[2])
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>						da := uint32(d[3])
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>						a := (m - uint32(srgba.A)) * 0x101
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>						d[0] = uint8((dr*a/m + uint32(srgba.R)) &gt;&gt; 8)
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>						d[1] = uint8((dg*a/m + uint32(srgba.G)) &gt;&gt; 8)
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>						d[2] = uint8((db*a/m + uint32(srgba.B)) &gt;&gt; 8)
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>						d[3] = uint8((da*a/m + uint32(srgba.A)) &gt;&gt; 8)
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>					}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>					i0 += dy * dst.Stride
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>				}
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>			} else {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>					for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>						srgba := src0.RGBA64At(sx, sy)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>						d := dst.Pix[i : i+4 : i+4]
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>						d[0] = uint8(srgba.R &gt;&gt; 8)
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>						d[1] = uint8(srgba.G &gt;&gt; 8)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>						d[2] = uint8(srgba.B &gt;&gt; 8)
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>						d[3] = uint8(srgba.A &gt;&gt; 8)
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>					}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>					i0 += dy * dst.Stride
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>				}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>			}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>			return
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>		} else if mask0, _ := mask.(image.RGBA64Image); mask0 != nil {
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			if op == Over {
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>					for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>						ma := uint32(mask0.RGBA64At(mx, my).A)
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>						srgba := src0.RGBA64At(sx, sy)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>						d := dst.Pix[i : i+4 : i+4]
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>						dr := uint32(d[0])
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>						dg := uint32(d[1])
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>						db := uint32(d[2])
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>						da := uint32(d[3])
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>						a := (m - (uint32(srgba.A) * ma / m)) * 0x101
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>						d[0] = uint8((dr*a + uint32(srgba.R)*ma) / m &gt;&gt; 8)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>						d[1] = uint8((dg*a + uint32(srgba.G)*ma) / m &gt;&gt; 8)
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>						d[2] = uint8((db*a + uint32(srgba.B)*ma) / m &gt;&gt; 8)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>						d[3] = uint8((da*a + uint32(srgba.A)*ma) / m &gt;&gt; 8)
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>					}
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>					i0 += dy * dst.Stride
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>				}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>			} else {
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>				for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>					for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>						ma := uint32(mask0.RGBA64At(mx, my).A)
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>						srgba := src0.RGBA64At(sx, sy)
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>						d := dst.Pix[i : i+4 : i+4]
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>						d[0] = uint8(uint32(srgba.R) * ma / m &gt;&gt; 8)
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>						d[1] = uint8(uint32(srgba.G) * ma / m &gt;&gt; 8)
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>						d[2] = uint8(uint32(srgba.B) * ma / m &gt;&gt; 8)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>						d[3] = uint8(uint32(srgba.A) * ma / m &gt;&gt; 8)
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>					}
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>					i0 += dy * dst.Stride
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>				}
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>			}
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>			return
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		}
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	<span class="comment">// Use the image.Image interface, part of the standard library since Go</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	<span class="comment">// 1.0.</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	<span class="comment">// This is similar to FALLBACK1.0 in DrawMask, except here the concrete</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	<span class="comment">// type of dst is known to be *image.RGBA.</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	for y := y0; y != y1; y, sy, my = y+dy, sy+dy, my+dy {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>		for i, sx, mx := i0, sx0, mx0; sx != sx1; i, sx, mx = i+di, sx+dx, mx+dx {
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>			ma := uint32(m)
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>			if mask != nil {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>				_, _, _, ma = mask.At(mx, my).RGBA()
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>			sr, sg, sb, sa := src.At(sx, sy).RGBA()
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>			d := dst.Pix[i : i+4 : i+4] <span class="comment">// Small cap improves performance, see https://golang.org/issue/27857</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>			if op == Over {
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>				dr := uint32(d[0])
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>				dg := uint32(d[1])
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>				db := uint32(d[2])
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>				da := uint32(d[3])
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>				<span class="comment">// dr, dg, db and da are all 8-bit color at the moment, ranging in [0,255].</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>				<span class="comment">// We work in 16-bit color, and so would normally do:</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>				<span class="comment">// dr |= dr &lt;&lt; 8</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>				<span class="comment">// and similarly for dg, db and da, but instead we multiply a</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>				<span class="comment">// (which is a 16-bit color, ranging in [0,65535]) by 0x101.</span>
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>				<span class="comment">// This yields the same result, but is fewer arithmetic operations.</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>				a := (m - (sa * ma / m)) * 0x101
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>				d[0] = uint8((dr*a + sr*ma) / m &gt;&gt; 8)
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>				d[1] = uint8((dg*a + sg*ma) / m &gt;&gt; 8)
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>				d[2] = uint8((db*a + sb*ma) / m &gt;&gt; 8)
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>				d[3] = uint8((da*a + sa*ma) / m &gt;&gt; 8)
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>			} else {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>				d[0] = uint8(sr * ma / m &gt;&gt; 8)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>				d[1] = uint8(sg * ma / m &gt;&gt; 8)
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>				d[2] = uint8(sb * ma / m &gt;&gt; 8)
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>				d[3] = uint8(sa * ma / m &gt;&gt; 8)
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>			}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		}
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		i0 += dy * dst.Stride
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	}
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>
<span id="L933" class="ln">   933&nbsp;&nbsp;</span><span class="comment">// clamp clamps i to the interval [0, 0xffff].</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>func clamp(i int32) int32 {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		return 0
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	if i &gt; 0xffff {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		return 0xffff
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	return i
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>}
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span><span class="comment">// sqDiff returns the squared-difference of x and y, shifted by 2 so that</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span><span class="comment">// adding four of those won&#39;t overflow a uint32.</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span><span class="comment">// x and y are both assumed to be in the range [0, 0xffff].</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>func sqDiff(x, y int32) uint32 {
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	<span class="comment">// This is an optimized code relying on the overflow/wrap around</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	<span class="comment">// properties of unsigned integers operations guaranteed by the language</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	<span class="comment">// spec. See sqDiff from the image/color package for more details.</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	d := uint32(x - y)
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	return (d * d) &gt;&gt; 2
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>}
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>func drawPaletted(dst Image, r image.Rectangle, src image.Image, sp image.Point, floydSteinberg bool) {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	<span class="comment">// TODO(nigeltao): handle the case where the dst and src overlap.</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	<span class="comment">// Does it even make sense to try and do Floyd-Steinberg whilst</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	<span class="comment">// walking the image backward (right-to-left bottom-to-top)?</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	<span class="comment">// If dst is an *image.Paletted, we have a fast path for dst.Set and</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>	<span class="comment">// dst.At. The dst.Set equivalent is a batch version of the algorithm</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	<span class="comment">// used by color.Palette&#39;s Index method in image/color/color.go, plus</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	<span class="comment">// optional Floyd-Steinberg error diffusion.</span>
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	palette, pix, stride := [][4]int32(nil), []byte(nil), 0
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	if p, ok := dst.(*image.Paletted); ok {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		palette = make([][4]int32, len(p.Palette))
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		for i, col := range p.Palette {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			r, g, b, a := col.RGBA()
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			palette[i][0] = int32(r)
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			palette[i][1] = int32(g)
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			palette[i][2] = int32(b)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			palette[i][3] = int32(a)
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		pix, stride = p.Pix[p.PixOffset(r.Min.X, r.Min.Y):], p.Stride
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	}
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	<span class="comment">// quantErrorCurr and quantErrorNext are the Floyd-Steinberg quantization</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	<span class="comment">// errors that have been propagated to the pixels in the current and next</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	<span class="comment">// rows. The +2 simplifies calculation near the edges.</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	var quantErrorCurr, quantErrorNext [][4]int32
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	if floydSteinberg {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		quantErrorCurr = make([][4]int32, r.Dx()+2)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		quantErrorNext = make([][4]int32, r.Dx()+2)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	pxRGBA := func(x, y int) (r, g, b, a uint32) { return src.At(x, y).RGBA() }
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	<span class="comment">// Fast paths for special cases to avoid excessive use of the color.Color</span>
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	<span class="comment">// interface which escapes to the heap but need to be discovered for</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	<span class="comment">// each pixel on r. See also https://golang.org/issues/15759.</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	switch src0 := src.(type) {
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	case *image.RGBA:
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		pxRGBA = func(x, y int) (r, g, b, a uint32) { return src0.RGBAAt(x, y).RGBA() }
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	case *image.NRGBA:
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		pxRGBA = func(x, y int) (r, g, b, a uint32) { return src0.NRGBAAt(x, y).RGBA() }
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	case *image.YCbCr:
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		pxRGBA = func(x, y int) (r, g, b, a uint32) { return src0.YCbCrAt(x, y).RGBA() }
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	}
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	<span class="comment">// Loop over each source pixel.</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	out := color.RGBA64{A: 0xffff}
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	for y := 0; y != r.Dy(); y++ {
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		for x := 0; x != r.Dx(); x++ {
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>			<span class="comment">// er, eg and eb are the pixel&#39;s R,G,B values plus the</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>			<span class="comment">// optional Floyd-Steinberg error.</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>			sr, sg, sb, sa := pxRGBA(sp.X+x, sp.Y+y)
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>			er, eg, eb, ea := int32(sr), int32(sg), int32(sb), int32(sa)
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			if floydSteinberg {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>				er = clamp(er + quantErrorCurr[x+1][0]/16)
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>				eg = clamp(eg + quantErrorCurr[x+1][1]/16)
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>				eb = clamp(eb + quantErrorCurr[x+1][2]/16)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>				ea = clamp(ea + quantErrorCurr[x+1][3]/16)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>			}
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>			if palette != nil {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>				<span class="comment">// Find the closest palette color in Euclidean R,G,B,A space:</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>				<span class="comment">// the one that minimizes sum-squared-difference.</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>				<span class="comment">// TODO(nigeltao): consider smarter algorithms.</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>				bestIndex, bestSum := 0, uint32(1&lt;&lt;32-1)
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>				for index, p := range palette {
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>					sum := sqDiff(er, p[0]) + sqDiff(eg, p[1]) + sqDiff(eb, p[2]) + sqDiff(ea, p[3])
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>					if sum &lt; bestSum {
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>						bestIndex, bestSum = index, sum
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>						if sum == 0 {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>							break
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>						}
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>					}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>				}
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>				pix[y*stride+x] = byte(bestIndex)
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>				if !floydSteinberg {
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>					continue
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>				}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>				er -= palette[bestIndex][0]
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>				eg -= palette[bestIndex][1]
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>				eb -= palette[bestIndex][2]
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>				ea -= palette[bestIndex][3]
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>			} else {
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>				out.R = uint16(er)
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>				out.G = uint16(eg)
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>				out.B = uint16(eb)
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>				out.A = uint16(ea)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>				<span class="comment">// The third argument is &amp;out instead of out (and out is</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>				<span class="comment">// declared outside of the inner loop) to avoid the implicit</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>				<span class="comment">// conversion to color.Color here allocating memory in the</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>				<span class="comment">// inner loop if sizeof(color.RGBA64) &gt; sizeof(uintptr).</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>				dst.Set(r.Min.X+x, r.Min.Y+y, &amp;out)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>				if !floydSteinberg {
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>					continue
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>				}
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>				sr, sg, sb, sa = dst.At(r.Min.X+x, r.Min.Y+y).RGBA()
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>				er -= int32(sr)
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>				eg -= int32(sg)
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>				eb -= int32(sb)
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>				ea -= int32(sa)
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>			}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>			<span class="comment">// Propagate the Floyd-Steinberg quantization error.</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>			quantErrorNext[x+0][0] += er * 3
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>			quantErrorNext[x+0][1] += eg * 3
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>			quantErrorNext[x+0][2] += eb * 3
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>			quantErrorNext[x+0][3] += ea * 3
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>			quantErrorNext[x+1][0] += er * 5
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>			quantErrorNext[x+1][1] += eg * 5
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>			quantErrorNext[x+1][2] += eb * 5
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>			quantErrorNext[x+1][3] += ea * 5
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>			quantErrorNext[x+2][0] += er * 1
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>			quantErrorNext[x+2][1] += eg * 1
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>			quantErrorNext[x+2][2] += eb * 1
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>			quantErrorNext[x+2][3] += ea * 1
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>			quantErrorCurr[x+2][0] += er * 7
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>			quantErrorCurr[x+2][1] += eg * 7
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>			quantErrorCurr[x+2][2] += eb * 7
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>			quantErrorCurr[x+2][3] += ea * 7
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		}
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		<span class="comment">// Recycle the quantization error buffers.</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		if floydSteinberg {
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>			quantErrorCurr, quantErrorNext = quantErrorNext, quantErrorCurr
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>			for i := range quantErrorNext {
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>				quantErrorNext[i] = [4]int32{}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>			}
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		}
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	}
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>
</pre><p><a href="draw.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
