<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/geom.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./geom.go?s=938:973#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<span class="text-muted">geom.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image">image</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package image
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// A Point is an X, Y coordinate pair. The axes increase right and down.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>type Point struct {
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	X, Y int
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>}
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// String returns a string representation of p like &#34;(3,4)&#34;.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>func (p Point) String() string {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	return &#34;(&#34; + strconv.Itoa(p.X) + &#34;,&#34; + strconv.Itoa(p.Y) + &#34;)&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// Add returns the vector p+q.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func (p Point) Add(q Point) Point {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	return Point{p.X + q.X, p.Y + q.Y}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Sub returns the vector p-q.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func (p Point) Sub(q Point) Point {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	return Point{p.X - q.X, p.Y - q.Y}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Mul returns the vector p*k.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func (p Point) Mul(k int) Point {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	return Point{p.X * k, p.Y * k}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Div returns the vector p/k.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (p Point) Div(k int) Point {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	return Point{p.X / k, p.Y / k}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// In reports whether p is in r.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="selection">func (p Point) In(r Rectangle) bool</span> {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	return r.Min.X &lt;= p.X &amp;&amp; p.X &lt; r.Max.X &amp;&amp;
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		r.Min.Y &lt;= p.Y &amp;&amp; p.Y &lt; r.Max.Y
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Mod returns the point q in r such that p.X-q.X is a multiple of r&#39;s width</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// and p.Y-q.Y is a multiple of r&#39;s height.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func (p Point) Mod(r Rectangle) Point {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	w, h := r.Dx(), r.Dy()
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	p = p.Sub(r.Min)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	p.X = p.X % w
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if p.X &lt; 0 {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		p.X += w
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	p.Y = p.Y % h
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if p.Y &lt; 0 {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		p.Y += h
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	return p.Add(r.Min)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// Eq reports whether p and q are equal.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func (p Point) Eq(q Point) bool {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	return p == q
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// ZP is the zero [Point].</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use a literal [image.Point] instead.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>var ZP Point
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// Pt is shorthand for [Point]{X, Y}.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func Pt(X, Y int) Point {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	return Point{X, Y}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// A Rectangle contains the points with Min.X &lt;= X &lt; Max.X, Min.Y &lt;= Y &lt; Max.Y.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// It is well-formed if Min.X &lt;= Max.X and likewise for Y. Points are always</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// well-formed. A rectangle&#39;s methods always return well-formed outputs for</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// well-formed inputs.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// A Rectangle is also an [Image] whose bounds are the rectangle itself. At</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// returns color.Opaque for points in the rectangle and color.Transparent</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// otherwise.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>type Rectangle struct {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	Min, Max Point
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// String returns a string representation of r like &#34;(3,4)-(6,5)&#34;.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>func (r Rectangle) String() string {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	return r.Min.String() + &#34;-&#34; + r.Max.String()
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// Dx returns r&#39;s width.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (r Rectangle) Dx() int {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	return r.Max.X - r.Min.X
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// Dy returns r&#39;s height.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func (r Rectangle) Dy() int {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return r.Max.Y - r.Min.Y
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// Size returns r&#39;s width and height.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (r Rectangle) Size() Point {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	return Point{
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		r.Max.X - r.Min.X,
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		r.Max.Y - r.Min.Y,
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// Add returns the rectangle r translated by p.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>func (r Rectangle) Add(p Point) Rectangle {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	return Rectangle{
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		Point{r.Min.X + p.X, r.Min.Y + p.Y},
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		Point{r.Max.X + p.X, r.Max.Y + p.Y},
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// Sub returns the rectangle r translated by -p.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func (r Rectangle) Sub(p Point) Rectangle {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	return Rectangle{
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		Point{r.Min.X - p.X, r.Min.Y - p.Y},
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		Point{r.Max.X - p.X, r.Max.Y - p.Y},
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// Inset returns the rectangle r inset by n, which may be negative. If either</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// of r&#39;s dimensions is less than 2*n then an empty rectangle near the center</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// of r will be returned.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (r Rectangle) Inset(n int) Rectangle {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if r.Dx() &lt; 2*n {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		r.Min.X = (r.Min.X + r.Max.X) / 2
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		r.Max.X = r.Min.X
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	} else {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		r.Min.X += n
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		r.Max.X -= n
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if r.Dy() &lt; 2*n {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		r.Min.Y = (r.Min.Y + r.Max.Y) / 2
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		r.Max.Y = r.Min.Y
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	} else {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		r.Min.Y += n
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		r.Max.Y -= n
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return r
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// Intersect returns the largest rectangle contained by both r and s. If the</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// two rectangles do not overlap then the zero rectangle will be returned.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func (r Rectangle) Intersect(s Rectangle) Rectangle {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if r.Min.X &lt; s.Min.X {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		r.Min.X = s.Min.X
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if r.Min.Y &lt; s.Min.Y {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		r.Min.Y = s.Min.Y
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if r.Max.X &gt; s.Max.X {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		r.Max.X = s.Max.X
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if r.Max.Y &gt; s.Max.Y {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		r.Max.Y = s.Max.Y
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// Letting r0 and s0 be the values of r and s at the time that the method</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// is called, this next line is equivalent to:</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// if max(r0.Min.X, s0.Min.X) &gt;= min(r0.Max.X, s0.Max.X) || likewiseForY { etc }</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return ZR
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return r
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// Union returns the smallest rectangle that contains both r and s.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (r Rectangle) Union(s Rectangle) Rectangle {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		return s
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if s.Empty() {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return r
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if r.Min.X &gt; s.Min.X {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		r.Min.X = s.Min.X
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	if r.Min.Y &gt; s.Min.Y {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		r.Min.Y = s.Min.Y
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if r.Max.X &lt; s.Max.X {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		r.Max.X = s.Max.X
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	if r.Max.Y &lt; s.Max.Y {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		r.Max.Y = s.Max.Y
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return r
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// Empty reports whether the rectangle contains no points.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func (r Rectangle) Empty() bool {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	return r.Min.X &gt;= r.Max.X || r.Min.Y &gt;= r.Max.Y
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// Eq reports whether r and s contain the same set of points. All empty</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// rectangles are considered equal.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func (r Rectangle) Eq(s Rectangle) bool {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	return r == s || r.Empty() &amp;&amp; s.Empty()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Overlaps reports whether r and s have a non-empty intersection.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (r Rectangle) Overlaps(s Rectangle) bool {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return !r.Empty() &amp;&amp; !s.Empty() &amp;&amp;
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		r.Min.X &lt; s.Max.X &amp;&amp; s.Min.X &lt; r.Max.X &amp;&amp;
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		r.Min.Y &lt; s.Max.Y &amp;&amp; s.Min.Y &lt; r.Max.Y
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// In reports whether every point in r is in s.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (r Rectangle) In(s Rectangle) bool {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		return true
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// Note that r.Max is an exclusive bound for r, so that r.In(s)</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// does not require that r.Max.In(s).</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return s.Min.X &lt;= r.Min.X &amp;&amp; r.Max.X &lt;= s.Max.X &amp;&amp;
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		s.Min.Y &lt;= r.Min.Y &amp;&amp; r.Max.Y &lt;= s.Max.Y
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// Canon returns the canonical version of r. The returned rectangle has minimum</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// and maximum coordinates swapped if necessary so that it is well-formed.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func (r Rectangle) Canon() Rectangle {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if r.Max.X &lt; r.Min.X {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		r.Min.X, r.Max.X = r.Max.X, r.Min.X
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if r.Max.Y &lt; r.Min.Y {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		r.Min.Y, r.Max.Y = r.Max.Y, r.Min.Y
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return r
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// At implements the [Image] interface.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (r Rectangle) At(x, y int) color.Color {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	if (Point{x, y}).In(r) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		return color.Opaque
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	return color.Transparent
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// RGBA64At implements the [RGBA64Image] interface.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>func (r Rectangle) RGBA64At(x, y int) color.RGBA64 {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	if (Point{x, y}).In(r) {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		return color.RGBA64{0xffff, 0xffff, 0xffff, 0xffff}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	return color.RGBA64{}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// Bounds implements the [Image] interface.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>func (r Rectangle) Bounds() Rectangle {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	return r
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// ColorModel implements the [Image] interface.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (r Rectangle) ColorModel() color.Model {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	return color.Alpha16Model
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// ZR is the zero [Rectangle].</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use a literal [image.Rectangle] instead.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>var ZR Rectangle
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// Rect is shorthand for [Rectangle]{Pt(x0, y0), [Pt](x1, y1)}. The returned</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// rectangle has minimum and maximum coordinates swapped if necessary so that</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// it is well-formed.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>func Rect(x0, y0, x1, y1 int) Rectangle {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if x0 &gt; x1 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		x0, x1 = x1, x0
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	if y0 &gt; y1 {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		y0, y1 = y1, y0
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return Rectangle{Point{x0, y0}, Point{x1, y1}}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// mul3NonNeg returns (x * y * z), unless at least one argument is negative or</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// if the computation overflows the int type, in which case it returns -1.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func mul3NonNeg(x int, y int, z int) int {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	if (x &lt; 0) || (y &lt; 0) || (z &lt; 0) {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		return -1
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	hi, lo := bits.Mul64(uint64(x), uint64(y))
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	if hi != 0 {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		return -1
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	hi, lo = bits.Mul64(lo, uint64(z))
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if hi != 0 {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		return -1
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	a := int(lo)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if (a &lt; 0) || (uint64(a) != lo) {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return -1
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	return a
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// add2NonNeg returns (x + y), unless at least one argument is negative or if</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// the computation overflows the int type, in which case it returns -1.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>func add2NonNeg(x int, y int) int {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if (x &lt; 0) || (y &lt; 0) {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return -1
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	a := x + y
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	if a &lt; 0 {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		return -1
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return a
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
</pre><p><a href="geom.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
