<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/gif/reader.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./reader.go?s=15520:16899#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/gif">gif</a>/<span class="text-muted">reader.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/gif">image/gif</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package gif implements a GIF image decoder and encoder.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The GIF specification is at https://www.w3.org/Graphics/GIF/spec-gif89a.txt.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package gif
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;compress/lzw&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>var (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	errNotEnough = errors.New(&#34;gif: not enough image data&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	errTooMuch   = errors.New(&#34;gif: too much image data&#34;)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	errBadPixel  = errors.New(&#34;gif: invalid pixel value&#34;)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// If the io.Reader does not also have ReadByte, then decode will introduce its own buffering.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>type reader interface {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	io.Reader
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	io.ByteReader
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// Masks etc.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>const (
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// Fields.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	fColorTable         = 1 &lt;&lt; 7
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	fInterlace          = 1 &lt;&lt; 6
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	fColorTableBitsMask = 7
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// Graphic control flags.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	gcTransparentColorSet = 1 &lt;&lt; 0
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	gcDisposalMethodMask  = 7 &lt;&lt; 2
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>)
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Disposal Methods.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>const (
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	DisposalNone       = 0x01
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	DisposalBackground = 0x02
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	DisposalPrevious   = 0x03
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Section indicators.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>const (
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	sExtension       = 0x21
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	sImageDescriptor = 0x2C
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	sTrailer         = 0x3B
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Extensions.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>const (
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	eText           = 0x01 <span class="comment">// Plain Text</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	eGraphicControl = 0xF9 <span class="comment">// Graphic Control</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	eComment        = 0xFE <span class="comment">// Comment</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	eApplication    = 0xFF <span class="comment">// Application</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func readFull(r io.Reader, b []byte) error {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	_, err := io.ReadFull(r, b)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		err = io.ErrUnexpectedEOF
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return err
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>func readByte(r io.ByteReader) (byte, error) {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	b, err := r.ReadByte()
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		err = io.ErrUnexpectedEOF
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	return b, err
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// decoder is the type used to decode a GIF file.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>type decoder struct {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	r reader
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// From header.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	vers            string
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	width           int
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	height          int
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	loopCount       int
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	delayTime       int
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	backgroundIndex byte
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	disposalMethod  byte
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// From image descriptor.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	imageFields byte
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// From graphics control.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	transparentIndex    byte
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	hasTransparentIndex bool
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Computed.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	globalColorTable color.Palette
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// Used when decoding.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	delay    []int
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	disposal []byte
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	image    []*image.Paletted
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	tmp      [1024]byte <span class="comment">// must be at least 768 so we can read color table</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// blockReader parses the block structure of GIF image data, which comprises</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// (n, (n bytes)) blocks, with 1 &lt;= n &lt;= 255. It is the reader given to the</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// LZW decoder, which is thus immune to the blocking. After the LZW decoder</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// completes, there will be a 0-byte block remaining (0, ()), which is</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// consumed when checking that the blockReader is exhausted.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// To avoid the allocation of a bufio.Reader for the lzw Reader, blockReader</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// implements io.ByteReader and buffers blocks into the decoder&#39;s &#34;tmp&#34; buffer.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>type blockReader struct {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	d    *decoder
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	i, j uint8 <span class="comment">// d.tmp[i:j] contains the buffered bytes</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	err  error
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (b *blockReader) fill() {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		return
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	b.j, b.err = readByte(b.d.r)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	if b.j == 0 &amp;&amp; b.err == nil {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		b.err = io.EOF
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	b.i = 0
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	b.err = readFull(b.d.r, b.d.tmp[:b.j])
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	if b.err != nil {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		b.j = 0
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>func (b *blockReader) ReadByte() (byte, error) {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if b.i == b.j {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		b.fill()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			return 0, b.err
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	c := b.d.tmp[b.i]
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	b.i++
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	return c, nil
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// blockReader must implement io.Reader, but its Read shouldn&#39;t ever actually</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// be called in practice. The compress/lzw package will only call [blockReader.ReadByte].</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (b *blockReader) Read(p []byte) (int, error) {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if len(p) == 0 || b.err != nil {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		return 0, b.err
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if b.i == b.j {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		b.fill()
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if b.err != nil {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			return 0, b.err
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	n := copy(p, b.d.tmp[b.i:b.j])
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	b.i += uint8(n)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return n, nil
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// close primarily detects whether or not a block terminator was encountered</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// after reading a sequence of data sub-blocks. It allows at most one trailing</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// sub-block worth of data. I.e., if some number of bytes exist in one sub-block</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// following the end of LZW data, the very next sub-block must be the block</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// terminator. If the very end of LZW data happened to fill one sub-block, at</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// most one more sub-block of length 1 may exist before the block-terminator.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// These accommodations allow us to support GIFs created by less strict encoders.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// See https://golang.org/issue/16146.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (b *blockReader) close() error {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if b.err == io.EOF {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		<span class="comment">// A clean block-sequence terminator was encountered while reading.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		return nil
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	} else if b.err != nil {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		<span class="comment">// Some other error was encountered while reading.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		return b.err
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if b.i == b.j {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		<span class="comment">// We reached the end of a sub block reading LZW data. We&#39;ll allow at</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		<span class="comment">// most one more sub block of data with a length of 1 byte.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		b.fill()
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if b.err == io.EOF {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			return nil
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		} else if b.err != nil {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			return b.err
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		} else if b.j &gt; 1 {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			return errTooMuch
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// Part of a sub-block remains buffered. We expect that the next attempt to</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// buffer a sub-block will reach the block terminator.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	b.fill()
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	if b.err == io.EOF {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		return nil
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	} else if b.err != nil {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		return b.err
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	return errTooMuch
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// decode reads a GIF image from r and stores the result in d.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (d *decoder) decode(r io.Reader, configOnly, keepAllFrames bool) error {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// Add buffering if r does not provide ReadByte.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if rr, ok := r.(reader); ok {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		d.r = rr
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	} else {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		d.r = bufio.NewReader(r)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	d.loopCount = -1
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	err := d.readHeaderAndScreenDescriptor()
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	if err != nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		return err
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if configOnly {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return nil
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	for {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		c, err := readByte(d.r)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		if err != nil {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading frames: %v&#34;, err)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		switch c {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		case sExtension:
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			if err = d.readExtension(); err != nil {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				return err
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		case sImageDescriptor:
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			if err = d.readImageDescriptor(keepAllFrames); err != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>				return err
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			if !keepAllFrames &amp;&amp; len(d.image) == 1 {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>				return nil
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		case sTrailer:
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			if len(d.image) == 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;gif: missing image data&#34;)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			return nil
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		default:
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: unknown block type: 0x%.2x&#34;, c)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (d *decoder) readHeaderAndScreenDescriptor() error {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	err := readFull(d.r, d.tmp[:13])
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if err != nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: reading header: %v&#34;, err)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	d.vers = string(d.tmp[:6])
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if d.vers != &#34;GIF87a&#34; &amp;&amp; d.vers != &#34;GIF89a&#34; {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: can&#39;t recognize format %q&#34;, d.vers)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	d.width = int(d.tmp[6]) + int(d.tmp[7])&lt;&lt;8
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	d.height = int(d.tmp[8]) + int(d.tmp[9])&lt;&lt;8
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	if fields := d.tmp[10]; fields&amp;fColorTable != 0 {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		d.backgroundIndex = d.tmp[11]
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		<span class="comment">// readColorTable overwrites the contents of d.tmp, but that&#39;s OK.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if d.globalColorTable, err = d.readColorTable(fields); err != nil {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			return err
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// d.tmp[12] is the Pixel Aspect Ratio, which is ignored.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	return nil
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func (d *decoder) readColorTable(fields byte) (color.Palette, error) {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	n := 1 &lt;&lt; (1 + uint(fields&amp;fColorTableBitsMask))
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	err := readFull(d.r, d.tmp[:3*n])
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if err != nil {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;gif: reading color table: %s&#34;, err)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	j, p := 0, make(color.Palette, n)
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	for i := range p {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		p[i] = color.RGBA{d.tmp[j+0], d.tmp[j+1], d.tmp[j+2], 0xFF}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		j += 3
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	return p, nil
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>func (d *decoder) readExtension() error {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	extension, err := readByte(d.r)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	if err != nil {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: reading extension: %v&#34;, err)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	size := 0
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	switch extension {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	case eText:
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		size = 13
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	case eGraphicControl:
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		return d.readGraphicControl()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	case eComment:
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// nothing to do but read the data.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	case eApplication:
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		b, err := readByte(d.r)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		if err != nil {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading extension: %v&#34;, err)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		<span class="comment">// The spec requires size be 11, but Adobe sometimes uses 10.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		size = int(b)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	default:
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: unknown extension 0x%.2x&#34;, extension)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	if size &gt; 0 {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		if err := readFull(d.r, d.tmp[:size]); err != nil {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading extension: %v&#34;, err)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// Application Extension with &#34;NETSCAPE2.0&#34; as string and 1 in data means</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// this extension defines a loop count.</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if extension == eApplication &amp;&amp; string(d.tmp[:size]) == &#34;NETSCAPE2.0&#34; {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		n, err := d.readBlock()
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		if err != nil {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading extension: %v&#34;, err)
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		if n == 0 {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			return nil
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		if n == 3 &amp;&amp; d.tmp[0] == 1 {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			d.loopCount = int(d.tmp[1]) | int(d.tmp[2])&lt;&lt;8
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	for {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		n, err := d.readBlock()
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		if err != nil {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading extension: %v&#34;, err)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		}
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		if n == 0 {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			return nil
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (d *decoder) readGraphicControl() error {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if err := readFull(d.r, d.tmp[:6]); err != nil {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: can&#39;t read graphic control: %s&#34;, err)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	if d.tmp[0] != 4 {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: invalid graphic control extension block size: %d&#34;, d.tmp[0])
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	flags := d.tmp[1]
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	d.disposalMethod = (flags &amp; gcDisposalMethodMask) &gt;&gt; 2
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	d.delayTime = int(d.tmp[2]) | int(d.tmp[3])&lt;&lt;8
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	if flags&amp;gcTransparentColorSet != 0 {
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		d.transparentIndex = d.tmp[4]
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		d.hasTransparentIndex = true
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	if d.tmp[5] != 0 {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: invalid graphic control extension block terminator: %d&#34;, d.tmp[5])
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	return nil
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>func (d *decoder) readImageDescriptor(keepAllFrames bool) error {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	m, err := d.newImageFromDescriptor()
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if err != nil {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		return err
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	useLocalColorTable := d.imageFields&amp;fColorTable != 0
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if useLocalColorTable {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		m.Palette, err = d.readColorTable(d.imageFields)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		if err != nil {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			return err
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	} else {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		if d.globalColorTable == nil {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			return errors.New(&#34;gif: no color table&#34;)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		m.Palette = d.globalColorTable
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	if d.hasTransparentIndex {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		if !useLocalColorTable {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			<span class="comment">// Clone the global color table.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			m.Palette = append(color.Palette(nil), d.globalColorTable...)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		if ti := int(d.transparentIndex); ti &lt; len(m.Palette) {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			m.Palette[ti] = color.RGBA{}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		} else {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			<span class="comment">// The transparentIndex is out of range, which is an error</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			<span class="comment">// according to the spec, but Firefox and Google Chrome</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			<span class="comment">// seem OK with this, so we enlarge the palette with</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			<span class="comment">// transparent colors. See golang.org/issue/15059.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			p := make(color.Palette, ti+1)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			copy(p, m.Palette)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			for i := len(m.Palette); i &lt; len(p); i++ {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				p[i] = color.RGBA{}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			m.Palette = p
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	litWidth, err := readByte(d.r)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if err != nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: reading image data: %v&#34;, err)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if litWidth &lt; 2 || litWidth &gt; 8 {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: pixel size in decode out of range: %d&#34;, litWidth)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	<span class="comment">// A wonderfully Go-like piece of magic.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	br := &amp;blockReader{d: d}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	lzwr := lzw.NewReader(br, lzw.LSB, int(litWidth))
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	defer lzwr.Close()
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if err = readFull(lzwr, m.Pix); err != nil {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		if err != io.ErrUnexpectedEOF {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading image data: %v&#34;, err)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return errNotEnough
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">// In theory, both lzwr and br should be exhausted. Reading from them</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// should yield (0, io.EOF).</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// The spec (Appendix F - Compression), says that &#34;An End of</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// Information code... must be the last code output by the encoder</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// for an image&#34;. In practice, though, giflib (a widely used C</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	<span class="comment">// library) does not enforce this, so we also accept lzwr returning</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	<span class="comment">// io.ErrUnexpectedEOF (meaning that the encoded stream hit io.EOF</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// before the LZW decoder saw an explicit end code), provided that</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// the io.ReadFull call above successfully read len(m.Pix) bytes.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/issue/9856 for an example GIF.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if n, err := lzwr.Read(d.tmp[256:257]); n != 0 || (err != io.EOF &amp;&amp; err != io.ErrUnexpectedEOF) {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		if err != nil {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;gif: reading image data: %v&#34;, err)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		return errTooMuch
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// In practice, some GIFs have an extra byte in the data sub-block</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// stream, which we ignore. See https://golang.org/issue/16146.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	if err := br.close(); err == errTooMuch {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		return errTooMuch
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	} else if err != nil {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;gif: reading image data: %v&#34;, err)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// Check that the color indexes are inside the palette.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if len(m.Palette) &lt; 256 {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		for _, pixel := range m.Pix {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			if int(pixel) &gt;= len(m.Palette) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>				return errBadPixel
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// Undo the interlacing if necessary.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	if d.imageFields&amp;fInterlace != 0 {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		uninterlace(m)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	if keepAllFrames || len(d.image) == 0 {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		d.image = append(d.image, m)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		d.delay = append(d.delay, d.delayTime)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		d.disposal = append(d.disposal, d.disposalMethod)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	<span class="comment">// The GIF89a spec, Section 23 (Graphic Control Extension) says:</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// &#34;The scope of this extension is the first graphic rendering block</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">// to follow.&#34; We therefore reset the GCE fields to zero.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	d.delayTime = 0
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	d.hasTransparentIndex = false
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	return nil
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>func (d *decoder) newImageFromDescriptor() (*image.Paletted, error) {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	if err := readFull(d.r, d.tmp[:9]); err != nil {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;gif: can&#39;t read image descriptor: %s&#34;, err)
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	left := int(d.tmp[0]) + int(d.tmp[1])&lt;&lt;8
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	top := int(d.tmp[2]) + int(d.tmp[3])&lt;&lt;8
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	width := int(d.tmp[4]) + int(d.tmp[5])&lt;&lt;8
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	height := int(d.tmp[6]) + int(d.tmp[7])&lt;&lt;8
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	d.imageFields = d.tmp[8]
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	<span class="comment">// The GIF89a spec, Section 20 (Image Descriptor) says: &#34;Each image must</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	<span class="comment">// fit within the boundaries of the Logical Screen, as defined in the</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	<span class="comment">// Logical Screen Descriptor.&#34;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	<span class="comment">// This is conceptually similar to testing</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	<span class="comment">//	frameBounds := image.Rect(left, top, left+width, top+height)</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	<span class="comment">//	imageBounds := image.Rect(0, 0, d.width, d.height)</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	<span class="comment">//	if !frameBounds.In(imageBounds) { etc }</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	<span class="comment">// but the semantics of the Go image.Rectangle type is that r.In(s) is true</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	<span class="comment">// whenever r is an empty rectangle, even if r.Min.X &gt; s.Max.X. Here, we</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	<span class="comment">// want something stricter.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	<span class="comment">// Note that, by construction, left &gt;= 0 &amp;&amp; top &gt;= 0, so we only have to</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	<span class="comment">// explicitly compare frameBounds.Max (left+width, top+height) against</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	<span class="comment">// imageBounds.Max (d.width, d.height) and not frameBounds.Min (left, top)</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	<span class="comment">// against imageBounds.Min (0, 0).</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	if left+width &gt; d.width || top+height &gt; d.height {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		return nil, errors.New(&#34;gif: frame bounds larger than image bounds&#34;)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	return image.NewPaletted(image.Rectangle{
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		Min: image.Point{left, top},
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		Max: image.Point{left + width, top + height},
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}, nil), nil
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>func (d *decoder) readBlock() (int, error) {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	n, err := readByte(d.r)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	if n == 0 || err != nil {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		return 0, err
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	if err := readFull(d.r, d.tmp[:n]); err != nil {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		return 0, err
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	return int(n), nil
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// interlaceScan defines the ordering for a pass of the interlace algorithm.</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>type interlaceScan struct {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	skip, start int
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">// interlacing represents the set of scans in an interlaced GIF image.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>var interlacing = []interlaceScan{
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	{8, 0}, <span class="comment">// Group 1 : Every 8th. row, starting with row 0.</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	{8, 4}, <span class="comment">// Group 2 : Every 8th. row, starting with row 4.</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	{4, 2}, <span class="comment">// Group 3 : Every 4th. row, starting with row 2.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	{2, 1}, <span class="comment">// Group 4 : Every 2nd. row, starting with row 1.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">// uninterlace rearranges the pixels in m to account for interlaced input.</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>func uninterlace(m *image.Paletted) {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	var nPix []uint8
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	dx := m.Bounds().Dx()
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	dy := m.Bounds().Dy()
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	nPix = make([]uint8, dx*dy)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	offset := 0 <span class="comment">// steps through the input by sequential scan lines.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	for _, pass := range interlacing {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		nOffset := pass.start * dx <span class="comment">// steps through the output as defined by pass.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		for y := pass.start; y &lt; dy; y += pass.skip {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			copy(nPix[nOffset:nOffset+dx], m.Pix[offset:offset+dx])
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			offset += dx
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			nOffset += dx * pass.skip
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	m.Pix = nPix
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// Decode reads a GIF image from r and returns the first embedded</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span><span class="comment">// image as an [image.Image].</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>func Decode(r io.Reader) (image.Image, error) {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	var d decoder
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	if err := d.decode(r, false, false); err != nil {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		return nil, err
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	return d.image[0], nil
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// GIF represents the possibly multiple images stored in a GIF file.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="selection">type GIF struct {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	Image []*image.Paletted </span><span class="selection-comment">// The successive images.</span><span class="selection">
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	Delay []int             </span><span class="selection-comment">// The successive delay times, one per frame, in 100ths of a second.</span><span class="selection">
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	</span><span class="selection-comment">// LoopCount controls the number of times an animation will be</span><span class="selection">
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	</span><span class="selection-comment">// restarted during display.</span><span class="selection">
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	</span><span class="selection-comment">// A LoopCount of 0 means to loop forever.</span><span class="selection">
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	</span><span class="selection-comment">// A LoopCount of -1 means to show each frame only once.</span><span class="selection">
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Otherwise, the animation is looped LoopCount+1 times.</span><span class="selection">
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	LoopCount int
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Disposal is the successive disposal methods, one per frame. For</span><span class="selection">
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	</span><span class="selection-comment">// backwards compatibility, a nil Disposal is valid to pass to EncodeAll,</span><span class="selection">
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	</span><span class="selection-comment">// and implies that each frame&#39;s disposal method is 0 (no disposal</span><span class="selection">
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	</span><span class="selection-comment">// specified).</span><span class="selection">
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	Disposal []byte
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Config is the global color table (palette), width and height. A nil or</span><span class="selection">
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	</span><span class="selection-comment">// empty-color.Palette Config.ColorModel means that each frame has its own</span><span class="selection">
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	</span><span class="selection-comment">// color table and there is no global color table. Each frame&#39;s bounds must</span><span class="selection">
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	</span><span class="selection-comment">// be within the rectangle defined by the two points (0, 0) and</span><span class="selection">
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	</span><span class="selection-comment">// (Config.Width, Config.Height).</span><span class="selection">
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	</span><span class="selection-comment">//</span><span class="selection">
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	</span><span class="selection-comment">// For backwards compatibility, a zero-valued Config is valid to pass to</span><span class="selection">
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	</span><span class="selection-comment">// EncodeAll, and implies that the overall GIF&#39;s width and height equals</span><span class="selection">
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	</span><span class="selection-comment">// the first frame&#39;s bounds&#39; Rectangle.Max point.</span><span class="selection">
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	Config image.Config
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	</span><span class="selection-comment">// BackgroundIndex is the background index in the global color table, for</span><span class="selection">
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	</span><span class="selection-comment">// use with the DisposalBackground disposal method.</span><span class="selection">
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	BackgroundIndex byte
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>}</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span><span class="comment">// DecodeAll reads a GIF image from r and returns the sequential frames</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">// and timing information.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>func DecodeAll(r io.Reader) (*GIF, error) {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	var d decoder
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	if err := d.decode(r, false, true); err != nil {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		return nil, err
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	gif := &amp;GIF{
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		Image:     d.image,
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		LoopCount: d.loopCount,
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		Delay:     d.delay,
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		Disposal:  d.disposal,
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		Config: image.Config{
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>			ColorModel: d.globalColorTable,
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			Width:      d.width,
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			Height:     d.height,
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		},
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		BackgroundIndex: d.backgroundIndex,
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	return gif, nil
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span><span class="comment">// DecodeConfig returns the global color model and dimensions of a GIF image</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span><span class="comment">// without decoding the entire image.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>func DecodeConfig(r io.Reader) (image.Config, error) {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	var d decoder
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	if err := d.decode(r, true, false); err != nil {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		return image.Config{}, err
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	return image.Config{
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		ColorModel: d.globalColorTable,
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		Width:      d.width,
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		Height:     d.height,
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	}, nil
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>func init() {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	image.RegisterFormat(&#34;gif&#34;, &#34;GIF8?a&#34;, Decode, DecodeConfig)
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>
</pre><p><a href="reader.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
