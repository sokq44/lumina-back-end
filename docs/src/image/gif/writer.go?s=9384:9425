<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/gif/writer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./writer.go?s=9384:9425#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/gif">gif</a>/<span class="text-muted">writer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/gif">image/gif</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2013 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package gif
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;compress/lzw&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;image/color/palette&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;image/draw&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Graphic control extension fields.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>const (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	gcLabel     = 0xF9
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	gcBlockSize = 0x04
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>var log2Lookup = [8]int{2, 4, 8, 16, 32, 64, 128, 256}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func log2(x int) int {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	for i, v := range log2Lookup {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		if x &lt;= v {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>			return i
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>		}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	return -1
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Little-endian.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func writeUint16(b []uint8, u uint16) {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	b[0] = uint8(u)
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	b[1] = uint8(u &gt;&gt; 8)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// writer is a buffered writer.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type writer interface {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	Flush() error
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	io.Writer
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	io.ByteWriter
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// encoder encodes an image to the GIF format.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>type encoder struct {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// w is the writer to write to. err is the first error encountered during</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// writing. All attempted writes after the first error become no-ops.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	w   writer
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	err error
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// g is a reference to the data that is being encoded.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	g GIF
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// globalCT is the size in bytes of the global color table.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	globalCT int
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// buf is a scratch buffer. It must be at least 256 for the blockWriter.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	buf              [256]byte
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	globalColorTable [3 * 256]byte
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	localColorTable  [3 * 256]byte
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// blockWriter writes the block structure of GIF image data, which</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// comprises (n, (n bytes)) blocks, with 1 &lt;= n &lt;= 255. It is the</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// writer given to the LZW encoder, which is thus immune to the</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// blocking.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>type blockWriter struct {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	e *encoder
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>func (b blockWriter) setup() {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	b.e.buf[0] = 0
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func (b blockWriter) Flush() error {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return b.e.err
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func (b blockWriter) WriteByte(c byte) error {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if b.e.err != nil {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return b.e.err
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// Append c to buffered sub-block.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	b.e.buf[0]++
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	b.e.buf[b.e.buf[0]] = c
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if b.e.buf[0] &lt; 255 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		return nil
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// Flush block</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	b.e.write(b.e.buf[:256])
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	b.e.buf[0] = 0
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	return b.e.err
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// blockWriter must be an io.Writer for lzw.NewWriter, but this is never</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// actually called.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func (b blockWriter) Write(data []byte) (int, error) {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	for i, c := range data {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		if err := b.WriteByte(c); err != nil {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			return i, err
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	return len(data), nil
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (b blockWriter) close() {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// Write the block terminator (0x00), either by itself, or along with a</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// pending sub-block.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if b.e.buf[0] == 0 {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		b.e.writeByte(0)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	} else {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		n := uint(b.e.buf[0])
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		b.e.buf[n+1] = 0
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		b.e.write(b.e.buf[:n+2])
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	b.e.flush()
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (e *encoder) flush() {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	e.err = e.w.Flush()
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func (e *encoder) write(p []byte) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		return
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	_, e.err = e.w.Write(p)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (e *encoder) writeByte(b byte) {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		return
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	e.err = e.w.WriteByte(b)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (e *encoder) writeHeader() {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		return
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	_, e.err = io.WriteString(e.w, &#34;GIF89a&#34;)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// Logical screen width and height.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	writeUint16(e.buf[0:2], uint16(e.g.Config.Width))
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	writeUint16(e.buf[2:4], uint16(e.g.Config.Height))
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	e.write(e.buf[:4])
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if p, ok := e.g.Config.ColorModel.(color.Palette); ok &amp;&amp; len(p) &gt; 0 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		paddedSize := log2(len(p)) <span class="comment">// Size of Global Color Table: 2^(1+n).</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		e.buf[0] = fColorTable | uint8(paddedSize)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		e.buf[1] = e.g.BackgroundIndex
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		e.buf[2] = 0x00 <span class="comment">// Pixel Aspect Ratio.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		e.write(e.buf[:3])
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		var err error
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		e.globalCT, err = encodeColorTable(e.globalColorTable[:], p, paddedSize)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if err != nil &amp;&amp; e.err == nil {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			e.err = err
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			return
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		e.write(e.globalColorTable[:e.globalCT])
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	} else {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		<span class="comment">// All frames have a local color table, so a global color table</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// is not needed.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		e.buf[0] = 0x00
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		e.buf[1] = 0x00 <span class="comment">// Background Color Index.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		e.buf[2] = 0x00 <span class="comment">// Pixel Aspect Ratio.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		e.write(e.buf[:3])
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// Add animation info if necessary.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if len(e.g.Image) &gt; 1 &amp;&amp; e.g.LoopCount &gt;= 0 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		e.buf[0] = 0x21 <span class="comment">// Extension Introducer.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		e.buf[1] = 0xff <span class="comment">// Application Label.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		e.buf[2] = 0x0b <span class="comment">// Block Size.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		e.write(e.buf[:3])
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		_, err := io.WriteString(e.w, &#34;NETSCAPE2.0&#34;) <span class="comment">// Application Identifier.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		if err != nil &amp;&amp; e.err == nil {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			e.err = err
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			return
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		e.buf[0] = 0x03 <span class="comment">// Block Size.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		e.buf[1] = 0x01 <span class="comment">// Sub-block Index.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		writeUint16(e.buf[2:4], uint16(e.g.LoopCount))
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		e.buf[4] = 0x00 <span class="comment">// Block Terminator.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		e.write(e.buf[:5])
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func encodeColorTable(dst []byte, p color.Palette, size int) (int, error) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if uint(size) &gt;= uint(len(log2Lookup)) {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return 0, errors.New(&#34;gif: cannot encode color table with more than 256 entries&#34;)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	for i, c := range p {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if c == nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			return 0, errors.New(&#34;gif: cannot encode color table with nil entries&#34;)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		var r, g, b uint8
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		<span class="comment">// It is most likely that the palette is full of color.RGBAs, so they</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		<span class="comment">// get a fast path.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		if rgba, ok := c.(color.RGBA); ok {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			r, g, b = rgba.R, rgba.G, rgba.B
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		} else {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			rr, gg, bb, _ := c.RGBA()
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			r, g, b = uint8(rr&gt;&gt;8), uint8(gg&gt;&gt;8), uint8(bb&gt;&gt;8)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		dst[3*i+0] = r
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		dst[3*i+1] = g
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		dst[3*i+2] = b
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	n := log2Lookup[size]
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if n &gt; len(p) {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		<span class="comment">// Pad with black.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		fill := dst[3*len(p) : 3*n]
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		for i := range fill {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			fill[i] = 0
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return 3 * n, nil
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func (e *encoder) colorTablesMatch(localLen, transparentIndex int) bool {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	localSize := 3 * localLen
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if transparentIndex &gt;= 0 {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		trOff := 3 * transparentIndex
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return bytes.Equal(e.globalColorTable[:trOff], e.localColorTable[:trOff]) &amp;&amp;
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			bytes.Equal(e.globalColorTable[trOff+3:localSize], e.localColorTable[trOff+3:localSize])
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return bytes.Equal(e.globalColorTable[:localSize], e.localColorTable[:localSize])
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>func (e *encoder) writeImageBlock(pm *image.Paletted, delay int, disposal byte) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if len(pm.Palette) == 0 {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		e.err = errors.New(&#34;gif: cannot encode image block with empty palette&#34;)
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	b := pm.Bounds()
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if b.Min.X &lt; 0 || b.Max.X &gt;= 1&lt;&lt;16 || b.Min.Y &lt; 0 || b.Max.Y &gt;= 1&lt;&lt;16 {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		e.err = errors.New(&#34;gif: image block is too large to encode&#34;)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		return
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	if !b.In(image.Rectangle{Max: image.Point{e.g.Config.Width, e.g.Config.Height}}) {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		e.err = errors.New(&#34;gif: image block is out of bounds&#34;)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	transparentIndex := -1
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	for i, c := range pm.Palette {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if c == nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			e.err = errors.New(&#34;gif: cannot encode color table with nil entries&#34;)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			return
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		if _, _, _, a := c.RGBA(); a == 0 {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			transparentIndex = i
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			break
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if delay &gt; 0 || disposal != 0 || transparentIndex != -1 {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		e.buf[0] = sExtension  <span class="comment">// Extension Introducer.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		e.buf[1] = gcLabel     <span class="comment">// Graphic Control Label.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		e.buf[2] = gcBlockSize <span class="comment">// Block Size.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		if transparentIndex != -1 {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			e.buf[3] = 0x01 | disposal&lt;&lt;2
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		} else {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>			e.buf[3] = 0x00 | disposal&lt;&lt;2
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		writeUint16(e.buf[4:6], uint16(delay)) <span class="comment">// Delay Time (1/100ths of a second)</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		<span class="comment">// Transparent color index.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		if transparentIndex != -1 {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			e.buf[6] = uint8(transparentIndex)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		} else {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			e.buf[6] = 0x00
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		e.buf[7] = 0x00 <span class="comment">// Block Terminator.</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		e.write(e.buf[:8])
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	e.buf[0] = sImageDescriptor
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	writeUint16(e.buf[1:3], uint16(b.Min.X))
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	writeUint16(e.buf[3:5], uint16(b.Min.Y))
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	writeUint16(e.buf[5:7], uint16(b.Dx()))
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	writeUint16(e.buf[7:9], uint16(b.Dy()))
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	e.write(e.buf[:9])
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// To determine whether or not this frame&#39;s palette is the same as the</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// global palette, we can check a couple things. First, do they actually</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// point to the same []color.Color? If so, they are equal so long as the</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// frame&#39;s palette is not longer than the global palette...</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	paddedSize := log2(len(pm.Palette)) <span class="comment">// Size of Local Color Table: 2^(1+n).</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if gp, ok := e.g.Config.ColorModel.(color.Palette); ok &amp;&amp; len(pm.Palette) &lt;= len(gp) &amp;&amp; &amp;gp[0] == &amp;pm.Palette[0] {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		e.writeByte(0) <span class="comment">// Use the global color table.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	} else {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		ct, err := encodeColorTable(e.localColorTable[:], pm.Palette, paddedSize)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		if err != nil {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			if e.err == nil {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>				e.err = err
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>			}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			return
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		<span class="comment">// This frame&#39;s palette is not the very same slice as the global</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		<span class="comment">// palette, but it might be a copy, possibly with one value turned into</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		<span class="comment">// transparency by DecodeAll.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		if ct &lt;= e.globalCT &amp;&amp; e.colorTablesMatch(len(pm.Palette), transparentIndex) {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			e.writeByte(0) <span class="comment">// Use the global color table.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		} else {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			<span class="comment">// Use a local color table.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			e.writeByte(fColorTable | uint8(paddedSize))
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			e.write(e.localColorTable[:ct])
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	litWidth := paddedSize + 1
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	if litWidth &lt; 2 {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		litWidth = 2
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	e.writeByte(uint8(litWidth)) <span class="comment">// LZW Minimum Code Size.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	bw := blockWriter{e: e}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	bw.setup()
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	lzww := lzw.NewWriter(bw, lzw.LSB, litWidth)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if dx := b.Dx(); dx == pm.Stride {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		_, e.err = lzww.Write(pm.Pix[:dx*b.Dy()])
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		if e.err != nil {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			lzww.Close()
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			return
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	} else {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		for i, y := 0, b.Min.Y; y &lt; b.Max.Y; i, y = i+pm.Stride, y+1 {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			_, e.err = lzww.Write(pm.Pix[i : i+dx])
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>			if e.err != nil {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>				lzww.Close()
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>				return
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	lzww.Close() <span class="comment">// flush to bw</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	bw.close()   <span class="comment">// flush to e.w</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// Options are the encoding parameters.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>type Options struct {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// NumColors is the maximum number of colors used in the image.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// It ranges from 1 to 256.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	NumColors int
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// Quantizer is used to produce a palette with size NumColors.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">// palette.Plan9 is used in place of a nil Quantizer.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	Quantizer draw.Quantizer
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// Drawer is used to convert the source image to the desired palette.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">// draw.FloydSteinberg is used in place of a nil Drawer.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	Drawer draw.Drawer
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// EncodeAll writes the images in g to w in GIF format with the</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// given loop count and delay between frames.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="selection">func EncodeAll(w io.Writer, g *GIF) error</span> {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	if len(g.Image) == 0 {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		return errors.New(&#34;gif: must provide at least one image&#34;)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if len(g.Image) != len(g.Delay) {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		return errors.New(&#34;gif: mismatched image and delay lengths&#34;)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	e := encoder{g: *g}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// The GIF.Disposal, GIF.Config and GIF.BackgroundIndex fields were added</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	<span class="comment">// in Go 1.5. Valid Go 1.4 code, such as when the Disposal field is omitted</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// in a GIF struct literal, should still produce valid GIFs.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if e.g.Disposal != nil &amp;&amp; len(e.g.Image) != len(e.g.Disposal) {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		return errors.New(&#34;gif: mismatched image and disposal lengths&#34;)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if e.g.Config == (image.Config{}) {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		p := g.Image[0].Bounds().Max
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		e.g.Config.Width = p.X
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		e.g.Config.Height = p.Y
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	} else if e.g.Config.ColorModel != nil {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		if _, ok := e.g.Config.ColorModel.(color.Palette); !ok {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			return errors.New(&#34;gif: GIF color model must be a color.Palette&#34;)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	if ww, ok := w.(writer); ok {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		e.w = ww
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	} else {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		e.w = bufio.NewWriter(w)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	e.writeHeader()
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	for i, pm := range g.Image {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		disposal := uint8(0)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		if g.Disposal != nil {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			disposal = g.Disposal[i]
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		e.writeImageBlock(pm, g.Delay[i], disposal)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	e.writeByte(sTrailer)
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	e.flush()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	return e.err
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// Encode writes the Image m to w in GIF format.</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>func Encode(w io.Writer, m image.Image, o *Options) error {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// Check for bounds and size restrictions.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	if b.Dx() &gt;= 1&lt;&lt;16 || b.Dy() &gt;= 1&lt;&lt;16 {
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		return errors.New(&#34;gif: image is too large to encode&#34;)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	opts := Options{}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	if o != nil {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		opts = *o
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if opts.NumColors &lt; 1 || 256 &lt; opts.NumColors {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		opts.NumColors = 256
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	if opts.Drawer == nil {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		opts.Drawer = draw.FloydSteinberg
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	pm, _ := m.(*image.Paletted)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	if pm == nil {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		if cp, ok := m.ColorModel().(color.Palette); ok {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			pm = image.NewPaletted(b, cp)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			for y := b.Min.Y; y &lt; b.Max.Y; y++ {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>				for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>					pm.Set(x, y, cp.Convert(m.At(x, y)))
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	if pm == nil || len(pm.Palette) &gt; opts.NumColors {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		<span class="comment">// Set pm to be a palettedized copy of m, including its bounds, which</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		<span class="comment">// might not start at (0, 0).</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		<span class="comment">// TODO: Pick a better sub-sample of the Plan 9 palette.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		pm = image.NewPaletted(b, palette.Plan9[:opts.NumColors])
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		if opts.Quantizer != nil {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			pm.Palette = opts.Quantizer.Quantize(make(color.Palette, 0, opts.NumColors), m)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		opts.Drawer.Draw(pm, b, m, b.Min)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// When calling Encode instead of EncodeAll, the single-frame image is</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	<span class="comment">// translated such that its top-left corner is (0, 0), so that the single</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">// frame completely fills the overall GIF&#39;s bounds.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	if pm.Rect.Min != (image.Point{}) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		dup := *pm
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		dup.Rect = dup.Rect.Sub(dup.Rect.Min)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		pm = &amp;dup
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	return EncodeAll(w, &amp;GIF{
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		Image: []*image.Paletted{pm},
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		Delay: []int{0},
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		Config: image.Config{
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			ColorModel: pm.Palette,
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			Width:      b.Dx(),
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			Height:     b.Dy(),
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		},
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	})
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
</pre><p><a href="writer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
