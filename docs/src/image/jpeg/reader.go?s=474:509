<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/jpeg/reader.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./reader.go?s=474:509#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/jpeg">jpeg</a>/<span class="text-muted">reader.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/jpeg">image/jpeg</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package jpeg implements a JPEG image decoder and encoder.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// JPEG is defined in ITU-T T.81: https://www.w3.org/Graphics/JPEG/itu-t81.pdf.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package jpeg
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;image/internal/imageutil&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// A FormatError reports that the input is not a valid JPEG.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>type FormatError string
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="selection">func (e FormatError) Error() string</span> { return &#34;invalid JPEG format: &#34; + string(e) }
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// An UnsupportedError reports that the input uses a valid but unimplemented JPEG feature.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>type UnsupportedError string
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>func (e UnsupportedError) Error() string { return &#34;unsupported JPEG feature: &#34; + string(e) }
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>var errUnsupportedSubsamplingRatio = UnsupportedError(&#34;luma/chroma subsampling ratio&#34;)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// Component specification, specified in section B.2.2.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type component struct {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	h  int   <span class="comment">// Horizontal sampling factor.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	v  int   <span class="comment">// Vertical sampling factor.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	c  uint8 <span class="comment">// Component identifier.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	tq uint8 <span class="comment">// Quantization table destination selector.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>const (
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	dcTable = 0
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	acTable = 1
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	maxTc   = 1
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	maxTh   = 3
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	maxTq   = 3
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	maxComponents = 4
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>const (
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	sof0Marker = 0xc0 <span class="comment">// Start Of Frame (Baseline Sequential).</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	sof1Marker = 0xc1 <span class="comment">// Start Of Frame (Extended Sequential).</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	sof2Marker = 0xc2 <span class="comment">// Start Of Frame (Progressive).</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	dhtMarker  = 0xc4 <span class="comment">// Define Huffman Table.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	rst0Marker = 0xd0 <span class="comment">// ReSTart (0).</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	rst7Marker = 0xd7 <span class="comment">// ReSTart (7).</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	soiMarker  = 0xd8 <span class="comment">// Start Of Image.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	eoiMarker  = 0xd9 <span class="comment">// End Of Image.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	sosMarker  = 0xda <span class="comment">// Start Of Scan.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	dqtMarker  = 0xdb <span class="comment">// Define Quantization Table.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	driMarker  = 0xdd <span class="comment">// Define Restart Interval.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	comMarker  = 0xfe <span class="comment">// COMment.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// &#34;APPlication specific&#34; markers aren&#39;t part of the JPEG spec per se,</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// but in practice, their use is described at</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	app0Marker  = 0xe0
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	app14Marker = 0xee
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	app15Marker = 0xef
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// See https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html#Adobe</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>const (
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	adobeTransformUnknown = 0
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	adobeTransformYCbCr   = 1
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	adobeTransformYCbCrK  = 2
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// unzig maps from the zig-zag ordering to the natural ordering. For example,</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// unzig[3] is the column and row of the fourth element in zig-zag order. The</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// value is 16, which means first column (16%8 == 0) and third row (16/8 == 2).</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>var unzig = [blockSize]int{
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	0, 1, 8, 16, 9, 2, 3, 10,
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	17, 24, 32, 25, 18, 11, 4, 5,
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	12, 19, 26, 33, 40, 48, 41, 34,
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	27, 20, 13, 6, 7, 14, 21, 28,
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	35, 42, 49, 56, 57, 50, 43, 36,
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	29, 22, 15, 23, 30, 37, 44, 51,
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	58, 59, 52, 45, 38, 31, 39, 46,
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	53, 60, 61, 54, 47, 55, 62, 63,
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// Deprecated: Reader is not used by the [image/jpeg] package and should</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// not be used by others. It is kept for compatibility.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>type Reader interface {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	io.ByteReader
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	io.Reader
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// bits holds the unprocessed bits that have been taken from the byte-stream.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// The n least significant bits of a form the unread bits, to be read in MSB to</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// LSB order.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>type bits struct {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	a uint32 <span class="comment">// accumulator.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	m uint32 <span class="comment">// mask. m==1&lt;&lt;(n-1) when n&gt;0, with m==0 when n==0.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	n int32  <span class="comment">// the number of unread bits in a.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>type decoder struct {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	r    io.Reader
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	bits bits
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// bytes is a byte buffer, similar to a bufio.Reader, except that it</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// has to be able to unread more than 1 byte, due to byte stuffing.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// Byte stuffing is specified in section F.1.2.3.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	bytes struct {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		<span class="comment">// buf[i:j] are the buffered bytes read from the underlying</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		<span class="comment">// io.Reader that haven&#39;t yet been passed further on.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		buf  [4096]byte
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		i, j int
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		<span class="comment">// nUnreadable is the number of bytes to back up i after</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		<span class="comment">// overshooting. It can be 0, 1 or 2.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		nUnreadable int
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	width, height int
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	img1        *image.Gray
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	img3        *image.YCbCr
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	blackPix    []byte
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	blackStride int
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	ri    int <span class="comment">// Restart Interval.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	nComp int
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// As per section 4.5, there are four modes of operation (selected by the</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// SOF? markers): sequential DCT, progressive DCT, lossless and</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// hierarchical, although this implementation does not support the latter</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// two non-DCT modes. Sequential DCT is further split into baseline and</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// extended, as per section 4.11.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	baseline    bool
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	progressive bool
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	jfif                bool
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	adobeTransformValid bool
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	adobeTransform      uint8
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	eobRun              uint16 <span class="comment">// End-of-Band run, specified in section G.1.2.2.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	comp       [maxComponents]component
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	progCoeffs [maxComponents][]block <span class="comment">// Saved state between progressive-mode scans.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	huff       [maxTc + 1][maxTh + 1]huffman
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	quant      [maxTq + 1]block <span class="comment">// Quantization tables, in zig-zag order.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	tmp        [2 * blockSize]byte
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// fill fills up the d.bytes.buf buffer from the underlying io.Reader. It</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// should only be called when there are no unread bytes in d.bytes.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func (d *decoder) fill() error {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if d.bytes.i != d.bytes.j {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		panic(&#34;jpeg: fill called when unread bytes exist&#34;)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// Move the last 2 bytes to the start of the buffer, in case we need</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// to call unreadByteStuffedByte.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	if d.bytes.j &gt; 2 {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		d.bytes.buf[0] = d.bytes.buf[d.bytes.j-2]
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		d.bytes.buf[1] = d.bytes.buf[d.bytes.j-1]
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		d.bytes.i, d.bytes.j = 2, 2
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// Fill in the rest of the buffer.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	n, err := d.r.Read(d.bytes.buf[d.bytes.j:])
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	d.bytes.j += n
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		return nil
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		err = io.ErrUnexpectedEOF
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	return err
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// unreadByteStuffedByte undoes the most recent readByteStuffedByte call,</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// giving a byte of data back from d.bits to d.bytes. The Huffman look-up table</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// requires at least 8 bits for look-up, which means that Huffman decoding can</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// sometimes overshoot and read one or two too many bytes. Two-byte overshoot</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// can happen when expecting to read a 0xff 0x00 byte-stuffed byte.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (d *decoder) unreadByteStuffedByte() {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	d.bytes.i -= d.bytes.nUnreadable
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	d.bytes.nUnreadable = 0
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	if d.bits.n &gt;= 8 {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		d.bits.a &gt;&gt;= 8
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		d.bits.n -= 8
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		d.bits.m &gt;&gt;= 8
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// readByte returns the next byte, whether buffered or not buffered. It does</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// not care about byte stuffing.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (d *decoder) readByte() (x byte, err error) {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	for d.bytes.i == d.bytes.j {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		if err = d.fill(); err != nil {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			return 0, err
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	x = d.bytes.buf[d.bytes.i]
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	d.bytes.i++
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	d.bytes.nUnreadable = 0
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return x, nil
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// errMissingFF00 means that readByteStuffedByte encountered an 0xff byte (a</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// marker byte) that wasn&#39;t the expected byte-stuffed sequence 0xff, 0x00.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>var errMissingFF00 = FormatError(&#34;missing 0xff00 sequence&#34;)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// readByteStuffedByte is like readByte but is for byte-stuffed Huffman data.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>func (d *decoder) readByteStuffedByte() (x byte, err error) {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// Take the fast path if d.bytes.buf contains at least two bytes.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if d.bytes.i+2 &lt;= d.bytes.j {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		x = d.bytes.buf[d.bytes.i]
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		d.bytes.i++
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		d.bytes.nUnreadable = 1
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		if x != 0xff {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			return x, err
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		if d.bytes.buf[d.bytes.i] != 0x00 {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			return 0, errMissingFF00
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		d.bytes.i++
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		d.bytes.nUnreadable = 2
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return 0xff, nil
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	d.bytes.nUnreadable = 0
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	x, err = d.readByte()
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	if err != nil {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		return 0, err
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	d.bytes.nUnreadable = 1
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	if x != 0xff {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		return x, nil
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	x, err = d.readByte()
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if err != nil {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		return 0, err
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	d.bytes.nUnreadable = 2
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if x != 0x00 {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return 0, errMissingFF00
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	return 0xff, nil
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// readFull reads exactly len(p) bytes into p. It does not care about byte</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// stuffing.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>func (d *decoder) readFull(p []byte) error {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// Unread the overshot bytes, if any.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	if d.bytes.nUnreadable != 0 {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if d.bits.n &gt;= 8 {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			d.unreadByteStuffedByte()
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		d.bytes.nUnreadable = 0
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	for {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		n := copy(p, d.bytes.buf[d.bytes.i:d.bytes.j])
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		p = p[n:]
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		d.bytes.i += n
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if len(p) == 0 {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			break
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		if err := d.fill(); err != nil {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			return err
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return nil
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// ignore ignores the next n bytes.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>func (d *decoder) ignore(n int) error {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// Unread the overshot bytes, if any.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if d.bytes.nUnreadable != 0 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		if d.bits.n &gt;= 8 {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			d.unreadByteStuffedByte()
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		d.bytes.nUnreadable = 0
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	for {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		m := d.bytes.j - d.bytes.i
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		if m &gt; n {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>			m = n
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		d.bytes.i += m
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		n -= m
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if n == 0 {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			break
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		if err := d.fill(); err != nil {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			return err
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	return nil
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// Specified in section B.2.2.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>func (d *decoder) processSOF(n int) error {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	if d.nComp != 0 {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		return FormatError(&#34;multiple SOF markers&#34;)
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	switch n {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	case 6 + 3*1: <span class="comment">// Grayscale image.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		d.nComp = 1
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	case 6 + 3*3: <span class="comment">// YCbCr or RGB image.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		d.nComp = 3
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	case 6 + 3*4: <span class="comment">// YCbCrK or CMYK image.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		d.nComp = 4
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	default:
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return UnsupportedError(&#34;number of components&#34;)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if err := d.readFull(d.tmp[:n]); err != nil {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		return err
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// We only support 8-bit precision.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if d.tmp[0] != 8 {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		return UnsupportedError(&#34;precision&#34;)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	d.height = int(d.tmp[1])&lt;&lt;8 + int(d.tmp[2])
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	d.width = int(d.tmp[3])&lt;&lt;8 + int(d.tmp[4])
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if int(d.tmp[5]) != d.nComp {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		return FormatError(&#34;SOF has wrong length&#34;)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	for i := 0; i &lt; d.nComp; i++ {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		d.comp[i].c = d.tmp[6+3*i]
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// Section B.2.2 states that &#34;the value of C_i shall be different from</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		<span class="comment">// the values of C_1 through C_(i-1)&#34;.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		for j := 0; j &lt; i; j++ {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>			if d.comp[i].c == d.comp[j].c {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				return FormatError(&#34;repeated component identifier&#34;)
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		d.comp[i].tq = d.tmp[8+3*i]
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		if d.comp[i].tq &gt; maxTq {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			return FormatError(&#34;bad Tq value&#34;)
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		hv := d.tmp[7+3*i]
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		h, v := int(hv&gt;&gt;4), int(hv&amp;0x0f)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		if h &lt; 1 || 4 &lt; h || v &lt; 1 || 4 &lt; v {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			return FormatError(&#34;luma/chroma subsampling ratio&#34;)
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		if h == 3 || v == 3 {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			return errUnsupportedSubsamplingRatio
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		switch d.nComp {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		case 1:
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			<span class="comment">// If a JPEG image has only one component, section A.2 says &#34;this data</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			<span class="comment">// is non-interleaved by definition&#34; and section A.2.2 says &#34;[in this</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			<span class="comment">// case...] the order of data units within a scan shall be left-to-right</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			<span class="comment">// and top-to-bottom... regardless of the values of H_1 and V_1&#34;. Section</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			<span class="comment">// 4.8.2 also says &#34;[for non-interleaved data], the MCU is defined to be</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			<span class="comment">// one data unit&#34;. Similarly, section A.1.1 explains that it is the ratio</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			<span class="comment">// of H_i to max_j(H_j) that matters, and similarly for V. For grayscale</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			<span class="comment">// images, H_1 is the maximum H_j for all components j, so that ratio is</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			<span class="comment">// always 1. The component&#39;s (h, v) is effectively always (1, 1): even if</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			<span class="comment">// the nominal (h, v) is (2, 1), a 20x5 image is encoded in three 8x8</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			<span class="comment">// MCUs, not two 16x8 MCUs.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			h, v = 1, 1
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		case 3:
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			<span class="comment">// For YCbCr images, we only support 4:4:4, 4:4:0, 4:2:2, 4:2:0,</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>			<span class="comment">// 4:1:1 or 4:1:0 chroma subsampling ratios. This implies that the</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			<span class="comment">// (h, v) values for the Y component are either (1, 1), (1, 2),</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			<span class="comment">// (2, 1), (2, 2), (4, 1) or (4, 2), and the Y component&#39;s values</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			<span class="comment">// must be a multiple of the Cb and Cr component&#39;s values. We also</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			<span class="comment">// assume that the two chroma components have the same subsampling</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			<span class="comment">// ratio.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			switch i {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>			case 0: <span class="comment">// Y.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				<span class="comment">// We have already verified, above, that h and v are both</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>				<span class="comment">// either 1, 2 or 4, so invalid (h, v) combinations are those</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>				<span class="comment">// with v == 4.</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				if v == 4 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>				}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			case 1: <span class="comment">// Cb.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				if d.comp[0].h%h != 0 || d.comp[0].v%v != 0 {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>				}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			case 2: <span class="comment">// Cr.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>				if d.comp[1].h != h || d.comp[1].v != v {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		case 4:
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			<span class="comment">// For 4-component images (either CMYK or YCbCrK), we only support two</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			<span class="comment">// hv vectors: [0x11 0x11 0x11 0x11] and [0x22 0x11 0x11 0x22].</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			<span class="comment">// Theoretically, 4-component JPEG images could mix and match hv values</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			<span class="comment">// but in practice, those two combinations are the only ones in use,</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			<span class="comment">// and it simplifies the applyBlack code below if we can assume that:</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			<span class="comment">//	- for CMYK, the C and K channels have full samples, and if the M</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			<span class="comment">//	  and Y channels subsample, they subsample both horizontally and</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			<span class="comment">//	  vertically.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			<span class="comment">//	- for YCbCrK, the Y and K channels have full samples.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			switch i {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			case 0:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				if hv != 0x11 &amp;&amp; hv != 0x22 {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>				}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			case 1, 2:
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				if hv != 0x11 {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			case 3:
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				if d.comp[0].h != h || d.comp[0].v != v {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>					return errUnsupportedSubsamplingRatio
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>				}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		d.comp[i].h = h
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		d.comp[i].v = v
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	return nil
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// Specified in section B.2.4.1.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func (d *decoder) processDQT(n int) error {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>loop:
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	for n &gt; 0 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		n--
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		x, err := d.readByte()
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		if err != nil {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			return err
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		tq := x &amp; 0x0f
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		if tq &gt; maxTq {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			return FormatError(&#34;bad Tq value&#34;)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		switch x &gt;&gt; 4 {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		default:
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			return FormatError(&#34;bad Pq value&#34;)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		case 0:
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			if n &lt; blockSize {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>				break loop
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			n -= blockSize
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			if err := d.readFull(d.tmp[:blockSize]); err != nil {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				return err
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			for i := range d.quant[tq] {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				d.quant[tq][i] = int32(d.tmp[i])
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		case 1:
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			if n &lt; 2*blockSize {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				break loop
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			n -= 2 * blockSize
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			if err := d.readFull(d.tmp[:2*blockSize]); err != nil {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				return err
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			for i := range d.quant[tq] {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>				d.quant[tq][i] = int32(d.tmp[2*i])&lt;&lt;8 | int32(d.tmp[2*i+1])
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	if n != 0 {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		return FormatError(&#34;DQT has wrong length&#34;)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	return nil
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// Specified in section B.2.4.4.</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>func (d *decoder) processDRI(n int) error {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if n != 2 {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		return FormatError(&#34;DRI has wrong length&#34;)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if err := d.readFull(d.tmp[:2]); err != nil {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		return err
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	d.ri = int(d.tmp[0])&lt;&lt;8 + int(d.tmp[1])
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	return nil
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (d *decoder) processApp0Marker(n int) error {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if n &lt; 5 {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return d.ignore(n)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if err := d.readFull(d.tmp[:5]); err != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		return err
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	n -= 5
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	d.jfif = d.tmp[0] == &#39;J&#39; &amp;&amp; d.tmp[1] == &#39;F&#39; &amp;&amp; d.tmp[2] == &#39;I&#39; &amp;&amp; d.tmp[3] == &#39;F&#39; &amp;&amp; d.tmp[4] == &#39;\x00&#39;
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		return d.ignore(n)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return nil
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (d *decoder) processApp14Marker(n int) error {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	if n &lt; 12 {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		return d.ignore(n)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if err := d.readFull(d.tmp[:12]); err != nil {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		return err
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	n -= 12
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	if d.tmp[0] == &#39;A&#39; &amp;&amp; d.tmp[1] == &#39;d&#39; &amp;&amp; d.tmp[2] == &#39;o&#39; &amp;&amp; d.tmp[3] == &#39;b&#39; &amp;&amp; d.tmp[4] == &#39;e&#39; {
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		d.adobeTransformValid = true
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		d.adobeTransform = d.tmp[11]
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		return d.ignore(n)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return nil
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// decode reads a JPEG image from r and returns it as an image.Image.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>func (d *decoder) decode(r io.Reader, configOnly bool) (image.Image, error) {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	d.r = r
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">// Check for the Start Of Image marker.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	if err := d.readFull(d.tmp[:2]); err != nil {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		return nil, err
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if d.tmp[0] != 0xff || d.tmp[1] != soiMarker {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return nil, FormatError(&#34;missing SOI marker&#34;)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	<span class="comment">// Process the remaining segments until the End Of Image marker.</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	for {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		err := d.readFull(d.tmp[:2])
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if err != nil {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			return nil, err
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		for d.tmp[0] != 0xff {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			<span class="comment">// Strictly speaking, this is a format error. However, libjpeg is</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>			<span class="comment">// liberal in what it accepts. As of version 9, next_marker in</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			<span class="comment">// jdmarker.c treats this as a warning (JWRN_EXTRANEOUS_DATA) and</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>			<span class="comment">// continues to decode the stream. Even before next_marker sees</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			<span class="comment">// extraneous data, jpeg_fill_bit_buffer in jdhuff.c reads as many</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			<span class="comment">// bytes as it can, possibly past the end of a scan&#39;s data. It</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>			<span class="comment">// effectively puts back any markers that it overscanned (e.g. an</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			<span class="comment">// &#34;\xff\xd9&#34; EOI marker), but it does not put back non-marker data,</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			<span class="comment">// and thus it can silently ignore a small number of extraneous</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>			<span class="comment">// non-marker bytes before next_marker has a chance to see them (and</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>			<span class="comment">// print a warning).</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			<span class="comment">// We are therefore also liberal in what we accept. Extraneous data</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			<span class="comment">// is silently ignored.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			<span class="comment">// This is similar to, but not exactly the same as, the restart</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>			<span class="comment">// mechanism within a scan (the RST[0-7] markers).</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>			<span class="comment">// Note that extraneous 0xff bytes in e.g. SOS data are escaped as</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>			<span class="comment">// &#34;\xff\x00&#34;, and so are detected a little further down below.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			d.tmp[0] = d.tmp[1]
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			d.tmp[1], err = d.readByte()
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			if err != nil {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>				return nil, err
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		marker := d.tmp[1]
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		if marker == 0 {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			<span class="comment">// Treat &#34;\xff\x00&#34; as extraneous data.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			continue
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		for marker == 0xff {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			<span class="comment">// Section B.1.1.2 says, &#34;Any marker may optionally be preceded by any</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>			<span class="comment">// number of fill bytes, which are bytes assigned code X&#39;FF&#39;&#34;.</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			marker, err = d.readByte()
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			if err != nil {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>				return nil, err
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		if marker == eoiMarker { <span class="comment">// End Of Image.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			break
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		if rst0Marker &lt;= marker &amp;&amp; marker &lt;= rst7Marker {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			<span class="comment">// Figures B.2 and B.16 of the specification suggest that restart markers should</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			<span class="comment">// only occur between Entropy Coded Segments and not after the final ECS.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			<span class="comment">// However, some encoders may generate incorrect JPEGs with a final restart</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			<span class="comment">// marker. That restart marker will be seen here instead of inside the processSOS</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			<span class="comment">// method, and is ignored as a harmless error. Restart markers have no extra data,</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			<span class="comment">// so we check for this before we read the 16-bit length of the segment.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			continue
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		<span class="comment">// Read the 16-bit length of the segment. The value includes the 2 bytes for the</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		<span class="comment">// length itself, so we subtract 2 to get the number of remaining bytes.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		if err = d.readFull(d.tmp[:2]); err != nil {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			return nil, err
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		n := int(d.tmp[0])&lt;&lt;8 + int(d.tmp[1]) - 2
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		if n &lt; 0 {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			return nil, FormatError(&#34;short segment length&#34;)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		switch marker {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		case sof0Marker, sof1Marker, sof2Marker:
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			d.baseline = marker == sof0Marker
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			d.progressive = marker == sof2Marker
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			err = d.processSOF(n)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			if configOnly &amp;&amp; d.jfif {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>				return nil, err
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>			}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		case dhtMarker:
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>			if configOnly {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>				err = d.ignore(n)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			} else {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>				err = d.processDHT(n)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		case dqtMarker:
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			if configOnly {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>				err = d.ignore(n)
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>			} else {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>				err = d.processDQT(n)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>			}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		case sosMarker:
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			if configOnly {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>				return nil, nil
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>			}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>			err = d.processSOS(n)
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		case driMarker:
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>			if configOnly {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>				err = d.ignore(n)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			} else {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>				err = d.processDRI(n)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			}
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		case app0Marker:
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			err = d.processApp0Marker(n)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		case app14Marker:
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			err = d.processApp14Marker(n)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		default:
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			if app0Marker &lt;= marker &amp;&amp; marker &lt;= app15Marker || marker == comMarker {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>				err = d.ignore(n)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			} else if marker &lt; 0xc0 { <span class="comment">// See Table B.1 &#34;Marker code assignments&#34;.</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>				err = FormatError(&#34;unknown marker&#34;)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			} else {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				err = UnsupportedError(&#34;unknown marker&#34;)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		if err != nil {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			return nil, err
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		}
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	if d.progressive {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		if err := d.reconstructProgressiveImage(); err != nil {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			return nil, err
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	if d.img1 != nil {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		return d.img1, nil
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	if d.img3 != nil {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if d.blackPix != nil {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			return d.applyBlack()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		} else if d.isRGB() {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			return d.convertToRGB()
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		return d.img3, nil
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	return nil, FormatError(&#34;missing SOS marker&#34;)
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span><span class="comment">// applyBlack combines d.img3 and d.blackPix into a CMYK image. The formula</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// used depends on whether the JPEG image is stored as CMYK or YCbCrK,</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// indicated by the APP14 (Adobe) metadata.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span><span class="comment">// Adobe CMYK JPEG images are inverted, where 255 means no ink instead of full</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="comment">// ink, so we apply &#34;v = 255 - v&#34; at various points. Note that a double</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span><span class="comment">// inversion is a no-op, so inversions might be implicit in the code below.</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>func (d *decoder) applyBlack() (image.Image, error) {
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	if !d.adobeTransformValid {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		return nil, UnsupportedError(&#34;unknown color model: 4-component JPEG doesn&#39;t have Adobe APP14 metadata&#34;)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	<span class="comment">// If the 4-component JPEG image isn&#39;t explicitly marked as &#34;Unknown (RGB</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	<span class="comment">// or CMYK)&#34; as per</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	<span class="comment">// https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html#Adobe</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	<span class="comment">// we assume that it is YCbCrK. This matches libjpeg&#39;s jdapimin.c.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	if d.adobeTransform != adobeTransformUnknown {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		<span class="comment">// Convert the YCbCr part of the YCbCrK to RGB, invert the RGB to get</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		<span class="comment">// CMY, and patch in the original K. The RGB to CMY inversion cancels</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		<span class="comment">// out the &#39;Adobe inversion&#39; described in the applyBlack doc comment</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		<span class="comment">// above, so in practice, only the fourth channel (black) is inverted.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		bounds := d.img3.Bounds()
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		img := image.NewRGBA(bounds)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		imageutil.DrawYCbCr(img, bounds, d.img3, bounds.Min)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		for iBase, y := 0, bounds.Min.Y; y &lt; bounds.Max.Y; iBase, y = iBase+img.Stride, y+1 {
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			for i, x := iBase+3, bounds.Min.X; x &lt; bounds.Max.X; i, x = i+4, x+1 {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>				img.Pix[i] = 255 - d.blackPix[(y-bounds.Min.Y)*d.blackStride+(x-bounds.Min.X)]
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		return &amp;image.CMYK{
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			Pix:    img.Pix,
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			Stride: img.Stride,
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			Rect:   img.Rect,
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		}, nil
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	<span class="comment">// The first three channels (cyan, magenta, yellow) of the CMYK</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	<span class="comment">// were decoded into d.img3, but each channel was decoded into a separate</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	<span class="comment">// []byte slice, and some channels may be subsampled. We interleave the</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	<span class="comment">// separate channels into an image.CMYK&#39;s single []byte slice containing 4</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	<span class="comment">// contiguous bytes per pixel.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	bounds := d.img3.Bounds()
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	img := image.NewCMYK(bounds)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	translations := [4]struct {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		src    []byte
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		stride int
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	}{
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		{d.img3.Y, d.img3.YStride},
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		{d.img3.Cb, d.img3.CStride},
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		{d.img3.Cr, d.img3.CStride},
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		{d.blackPix, d.blackStride},
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	for t, translation := range translations {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		subsample := d.comp[t].h != d.comp[0].h || d.comp[t].v != d.comp[0].v
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		for iBase, y := 0, bounds.Min.Y; y &lt; bounds.Max.Y; iBase, y = iBase+img.Stride, y+1 {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>			sy := y - bounds.Min.Y
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			if subsample {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				sy /= 2
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			for i, x := iBase+t, bounds.Min.X; x &lt; bounds.Max.X; i, x = i+4, x+1 {
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>				sx := x - bounds.Min.X
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>				if subsample {
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>					sx /= 2
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>				}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>				img.Pix[i] = 255 - translation.src[sy*translation.stride+sx]
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>	return img, nil
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>func (d *decoder) isRGB() bool {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	if d.jfif {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		return false
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	if d.adobeTransformValid &amp;&amp; d.adobeTransform == adobeTransformUnknown {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		<span class="comment">// https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/JPEG.html#Adobe</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		<span class="comment">// says that 0 means Unknown (and in practice RGB) and 1 means YCbCr.</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		return true
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	return d.comp[0].c == &#39;R&#39; &amp;&amp; d.comp[1].c == &#39;G&#39; &amp;&amp; d.comp[2].c == &#39;B&#39;
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>func (d *decoder) convertToRGB() (image.Image, error) {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	cScale := d.comp[0].h / d.comp[1].h
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	bounds := d.img3.Bounds()
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	img := image.NewRGBA(bounds)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	for y := bounds.Min.Y; y &lt; bounds.Max.Y; y++ {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		po := img.PixOffset(bounds.Min.X, y)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		yo := d.img3.YOffset(bounds.Min.X, y)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		co := d.img3.COffset(bounds.Min.X, y)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		for i, iMax := 0, bounds.Max.X-bounds.Min.X; i &lt; iMax; i++ {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			img.Pix[po+4*i+0] = d.img3.Y[yo+i]
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>			img.Pix[po+4*i+1] = d.img3.Cb[co+i/cScale]
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			img.Pix[po+4*i+2] = d.img3.Cr[co+i/cScale]
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>			img.Pix[po+4*i+3] = 255
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	return img, nil
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>}
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span><span class="comment">// Decode reads a JPEG image from r and returns it as an [image.Image].</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>func Decode(r io.Reader) (image.Image, error) {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	var d decoder
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	return d.decode(r, false)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span><span class="comment">// DecodeConfig returns the color model and dimensions of a JPEG image without</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span><span class="comment">// decoding the entire image.</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>func DecodeConfig(r io.Reader) (image.Config, error) {
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	var d decoder
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	if _, err := d.decode(r, true); err != nil {
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		return image.Config{}, err
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	switch d.nComp {
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	case 1:
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		return image.Config{
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			ColorModel: color.GrayModel,
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			Width:      d.width,
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>			Height:     d.height,
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		}, nil
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	case 3:
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		cm := color.YCbCrModel
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		if d.isRGB() {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>			cm = color.RGBAModel
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		return image.Config{
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			ColorModel: cm,
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			Width:      d.width,
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>			Height:     d.height,
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		}, nil
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	case 4:
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		return image.Config{
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			ColorModel: color.CMYKModel,
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>			Width:      d.width,
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			Height:     d.height,
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		}, nil
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	return image.Config{}, FormatError(&#34;missing SOF marker&#34;)
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>}
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func init() {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	image.RegisterFormat(&#34;jpeg&#34;, &#34;\xff\xd8&#34;, Decode, DecodeConfig)
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>
</pre><p><a href="reader.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
