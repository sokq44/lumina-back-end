<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/jpeg/writer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./writer.go?s=16008:16065#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/jpeg">jpeg</a>/<span class="text-muted">writer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/jpeg">image/jpeg</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package jpeg
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// div returns a/b rounded to the nearest integer, instead of rounded to zero.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>func div(a, b int32) int32 {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	if a &gt;= 0 {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>		return (a + (b &gt;&gt; 1)) / b
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	return -((-a + (b &gt;&gt; 1)) / b)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// bitCount counts the number of bits needed to hold an integer.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>var bitCount = [256]byte{
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>type quantIndex int
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>const (
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	quantIndexLuminance quantIndex = iota
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	quantIndexChrominance
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	nQuantIndex
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// unscaledQuant are the unscaled quantization tables in zig-zag order. Each</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// encoder copies and scales the tables according to its quality parameter.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// The values are derived from section K.1 after converting from natural to</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// zig-zag order.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>var unscaledQuant = [nQuantIndex][blockSize]byte{
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// Luminance.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	{
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		16, 11, 12, 14, 12, 10, 16, 14,
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		13, 14, 18, 17, 16, 19, 24, 40,
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		26, 24, 22, 22, 24, 49, 35, 37,
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		29, 40, 58, 51, 61, 60, 57, 51,
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		56, 55, 64, 72, 92, 78, 64, 68,
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		87, 69, 55, 56, 80, 109, 81, 87,
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		95, 98, 103, 104, 103, 62, 77, 113,
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		121, 112, 100, 120, 92, 101, 103, 99,
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	},
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// Chrominance.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	{
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		17, 18, 18, 24, 21, 24, 47, 26,
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		26, 47, 99, 66, 56, 66, 99, 99,
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		99, 99, 99, 99, 99, 99, 99, 99,
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	},
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>type huffIndex int
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>const (
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	huffIndexLuminanceDC huffIndex = iota
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	huffIndexLuminanceAC
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	huffIndexChrominanceDC
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	huffIndexChrominanceAC
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	nHuffIndex
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// huffmanSpec specifies a Huffman encoding.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>type huffmanSpec struct {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// count[i] is the number of codes of length i bits.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	count [16]byte
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// value[i] is the decoded value of the i&#39;th codeword.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	value []byte
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// theHuffmanSpec is the Huffman encoding specifications.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// This encoder uses the same Huffman encoding for all images.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>var theHuffmanSpec = [nHuffIndex]huffmanSpec{
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// Luminance DC.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	{
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		[16]byte{0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		[]byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	},
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// Luminance AC.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	{
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		[16]byte{0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125},
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		[]byte{
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			0xf9, 0xfa,
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		},
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	},
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Chrominance DC.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	{
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		[16]byte{0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		[]byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	},
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// Chrominance AC.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	{
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		[16]byte{0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119},
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		[]byte{
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>			0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>			0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			0xf9, 0xfa,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		},
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	},
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// huffmanLUT is a compiled look-up table representation of a huffmanSpec.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Each value maps to a uint32 of which the 8 most significant bits hold the</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// codeword size in bits and the 24 least significant bits hold the codeword.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// The maximum codeword size is 16 bits.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>type huffmanLUT []uint32
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func (h *huffmanLUT) init(s huffmanSpec) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	maxValue := 0
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	for _, v := range s.value {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		if int(v) &gt; maxValue {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			maxValue = int(v)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	*h = make([]uint32, maxValue+1)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	code, k := uint32(0), 0
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s.count); i++ {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		nBits := uint32(i+1) &lt;&lt; 24
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		for j := uint8(0); j &lt; s.count[i]; j++ {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			(*h)[s.value[k]] = nBits | code
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			code++
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			k++
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		code &lt;&lt;= 1
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// theHuffmanLUT are compiled representations of theHuffmanSpec.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>var theHuffmanLUT [4]huffmanLUT
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func init() {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	for i, s := range theHuffmanSpec {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		theHuffmanLUT[i].init(s)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// writer is a buffered writer.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>type writer interface {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	Flush() error
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	io.Writer
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	io.ByteWriter
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// encoder encodes an image to the JPEG format.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>type encoder struct {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// w is the writer to write to. err is the first error encountered during</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// writing. All attempted writes after the first error become no-ops.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	w   writer
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	err error
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// buf is a scratch buffer.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	buf [16]byte
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// bits and nBits are accumulated bits to write to w.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	bits, nBits uint32
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// quant is the scaled quantization tables, in zig-zag order.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	quant [nQuantIndex][blockSize]byte
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (e *encoder) flush() {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	e.err = e.w.Flush()
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (e *encoder) write(p []byte) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		return
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	_, e.err = e.w.Write(p)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>func (e *encoder) writeByte(b byte) {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		return
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	e.err = e.w.WriteByte(b)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// emit emits the least significant nBits bits of bits to the bit-stream.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// The precondition is bits &lt; 1&lt;&lt;nBits &amp;&amp; nBits &lt;= 16.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>func (e *encoder) emit(bits, nBits uint32) {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	nBits += e.nBits
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	bits &lt;&lt;= 32 - nBits
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	bits |= e.bits
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	for nBits &gt;= 8 {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		b := uint8(bits &gt;&gt; 24)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		e.writeByte(b)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if b == 0xff {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			e.writeByte(0x00)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		bits &lt;&lt;= 8
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		nBits -= 8
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	e.bits, e.nBits = bits, nBits
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// emitHuff emits the given value with the given Huffman encoder.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func (e *encoder) emitHuff(h huffIndex, value int32) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	x := theHuffmanLUT[h][value]
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	e.emit(x&amp;(1&lt;&lt;24-1), x&gt;&gt;24)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// emitHuffRLE emits a run of runLength copies of value encoded with the given</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// Huffman encoder.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>func (e *encoder) emitHuffRLE(h huffIndex, runLength, value int32) {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	a, b := value, value
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if a &lt; 0 {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		a, b = -value, value-1
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	var nBits uint32
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if a &lt; 0x100 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		nBits = uint32(bitCount[a])
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	} else {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		nBits = 8 + uint32(bitCount[a&gt;&gt;8])
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	e.emitHuff(h, runLength&lt;&lt;4|int32(nBits))
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	if nBits &gt; 0 {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		e.emit(uint32(b)&amp;(1&lt;&lt;nBits-1), nBits)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// writeMarkerHeader writes the header for a marker with the given length.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>func (e *encoder) writeMarkerHeader(marker uint8, markerlen int) {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	e.buf[0] = 0xff
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	e.buf[1] = marker
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	e.buf[2] = uint8(markerlen &gt;&gt; 8)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	e.buf[3] = uint8(markerlen &amp; 0xff)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	e.write(e.buf[:4])
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// writeDQT writes the Define Quantization Table marker.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func (e *encoder) writeDQT() {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	const markerlen = 2 + int(nQuantIndex)*(1+blockSize)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	e.writeMarkerHeader(dqtMarker, markerlen)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	for i := range e.quant {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		e.writeByte(uint8(i))
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		e.write(e.quant[i][:])
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// writeSOF0 writes the Start Of Frame (Baseline Sequential) marker.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func (e *encoder) writeSOF0(size image.Point, nComponent int) {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	markerlen := 8 + 3*nComponent
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	e.writeMarkerHeader(sof0Marker, markerlen)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	e.buf[0] = 8 <span class="comment">// 8-bit color.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	e.buf[1] = uint8(size.Y &gt;&gt; 8)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	e.buf[2] = uint8(size.Y &amp; 0xff)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	e.buf[3] = uint8(size.X &gt;&gt; 8)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	e.buf[4] = uint8(size.X &amp; 0xff)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	e.buf[5] = uint8(nComponent)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if nComponent == 1 {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		e.buf[6] = 1
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		<span class="comment">// No subsampling for grayscale image.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		e.buf[7] = 0x11
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		e.buf[8] = 0x00
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	} else {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		for i := 0; i &lt; nComponent; i++ {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			e.buf[3*i+6] = uint8(i + 1)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			<span class="comment">// We use 4:2:0 chroma subsampling.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			e.buf[3*i+7] = &#34;\x22\x11\x11&#34;[i]
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			e.buf[3*i+8] = &#34;\x00\x01\x01&#34;[i]
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	e.write(e.buf[:3*(nComponent-1)+9])
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// writeDHT writes the Define Huffman Table marker.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>func (e *encoder) writeDHT(nComponent int) {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	markerlen := 2
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	specs := theHuffmanSpec[:]
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if nComponent == 1 {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		<span class="comment">// Drop the Chrominance tables.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		specs = specs[:2]
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	for _, s := range specs {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		markerlen += 1 + 16 + len(s.value)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	e.writeMarkerHeader(dhtMarker, markerlen)
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	for i, s := range specs {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		e.writeByte(&#34;\x00\x10\x01\x11&#34;[i])
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		e.write(s.count[:])
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		e.write(s.value)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// writeBlock writes a block of pixel data using the given quantization table,</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// returning the post-quantized DC value of the DCT-transformed block. b is in</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// natural (not zig-zag) order.</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>func (e *encoder) writeBlock(b *block, q quantIndex, prevDC int32) int32 {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	fdct(b)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// Emit the DC delta.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	dc := div(b[0], 8*int32(e.quant[q][0]))
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	e.emitHuffRLE(huffIndex(2*q+0), 0, dc-prevDC)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// Emit the AC components.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	h, runLength := huffIndex(2*q+1), int32(0)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	for zig := 1; zig &lt; blockSize; zig++ {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		ac := div(b[unzig[zig]], 8*int32(e.quant[q][zig]))
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		if ac == 0 {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			runLength++
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		} else {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			for runLength &gt; 15 {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>				e.emitHuff(h, 0xf0)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				runLength -= 16
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			e.emitHuffRLE(h, runLength, ac)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			runLength = 0
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	if runLength &gt; 0 {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		e.emitHuff(h, 0x00)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	return dc
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// toYCbCr converts the 8x8 region of m whose top-left corner is p to its</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// YCbCr values.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func toYCbCr(m image.Image, p image.Point, yBlock, cbBlock, crBlock *block) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	xmax := b.Max.X - 1
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	ymax := b.Max.Y - 1
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	for j := 0; j &lt; 8; j++ {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		for i := 0; i &lt; 8; i++ {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			r, g, b, _ := m.At(min(p.X+i, xmax), min(p.Y+j, ymax)).RGBA()
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			yy, cb, cr := color.RGBToYCbCr(uint8(r&gt;&gt;8), uint8(g&gt;&gt;8), uint8(b&gt;&gt;8))
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			yBlock[8*j+i] = int32(yy)
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			cbBlock[8*j+i] = int32(cb)
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			crBlock[8*j+i] = int32(cr)
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// grayToY stores the 8x8 region of m whose top-left corner is p in yBlock.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>func grayToY(m *image.Gray, p image.Point, yBlock *block) {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	xmax := b.Max.X - 1
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	ymax := b.Max.Y - 1
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	pix := m.Pix
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	for j := 0; j &lt; 8; j++ {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		for i := 0; i &lt; 8; i++ {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			idx := m.PixOffset(min(p.X+i, xmax), min(p.Y+j, ymax))
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			yBlock[8*j+i] = int32(pix[idx])
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// rgbaToYCbCr is a specialized version of toYCbCr for image.RGBA images.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>func rgbaToYCbCr(m *image.RGBA, p image.Point, yBlock, cbBlock, crBlock *block) {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	xmax := b.Max.X - 1
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	ymax := b.Max.Y - 1
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	for j := 0; j &lt; 8; j++ {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		sj := p.Y + j
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		if sj &gt; ymax {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			sj = ymax
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		offset := (sj-b.Min.Y)*m.Stride - b.Min.X*4
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		for i := 0; i &lt; 8; i++ {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			sx := p.X + i
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			if sx &gt; xmax {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>				sx = xmax
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			pix := m.Pix[offset+sx*4:]
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			yy, cb, cr := color.RGBToYCbCr(pix[0], pix[1], pix[2])
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			yBlock[8*j+i] = int32(yy)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			cbBlock[8*j+i] = int32(cb)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			crBlock[8*j+i] = int32(cr)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span><span class="comment">// yCbCrToYCbCr is a specialized version of toYCbCr for image.YCbCr images.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>func yCbCrToYCbCr(m *image.YCbCr, p image.Point, yBlock, cbBlock, crBlock *block) {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	xmax := b.Max.X - 1
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	ymax := b.Max.Y - 1
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	for j := 0; j &lt; 8; j++ {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		sy := p.Y + j
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		if sy &gt; ymax {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			sy = ymax
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		for i := 0; i &lt; 8; i++ {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			sx := p.X + i
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>			if sx &gt; xmax {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				sx = xmax
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			yi := m.YOffset(sx, sy)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			ci := m.COffset(sx, sy)
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			yBlock[8*j+i] = int32(m.Y[yi])
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			cbBlock[8*j+i] = int32(m.Cb[ci])
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			crBlock[8*j+i] = int32(m.Cr[ci])
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// scale scales the 16x16 region represented by the 4 src blocks to the 8x8</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span><span class="comment">// dst block.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>func scale(dst *block, src *[4]block) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	for i := 0; i &lt; 4; i++ {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		dstOff := (i&amp;2)&lt;&lt;4 | (i&amp;1)&lt;&lt;2
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		for y := 0; y &lt; 4; y++ {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			for x := 0; x &lt; 4; x++ {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>				j := 16*y + 2*x
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				sum := src[i][j] + src[i][j+1] + src[i][j+8] + src[i][j+9]
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>				dst[8*y+x+dstOff] = (sum + 2) &gt;&gt; 2
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// sosHeaderY is the SOS marker &#34;\xff\xda&#34; followed by 8 bytes:</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">//   - the marker length &#34;\x00\x08&#34;,</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">//   - the number of components &#34;\x01&#34;,</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">//   - component 1 uses DC table 0 and AC table 0 &#34;\x01\x00&#34;,</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">//   - the bytes &#34;\x00\x3f\x00&#34;. Section B.2.3 of the spec says that for</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">//     sequential DCTs, those bytes (8-bit Ss, 8-bit Se, 4-bit Ah, 4-bit Al)</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">//     should be 0x00, 0x3f, 0x00&lt;&lt;4 | 0x00.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>var sosHeaderY = []byte{
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3f, 0x00,
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// sosHeaderYCbCr is the SOS marker &#34;\xff\xda&#34; followed by 12 bytes:</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">//   - the marker length &#34;\x00\x0c&#34;,</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">//   - the number of components &#34;\x03&#34;,</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">//   - component 1 uses DC table 0 and AC table 0 &#34;\x01\x00&#34;,</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">//   - component 2 uses DC table 1 and AC table 1 &#34;\x02\x11&#34;,</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">//   - component 3 uses DC table 1 and AC table 1 &#34;\x03\x11&#34;,</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">//   - the bytes &#34;\x00\x3f\x00&#34;. Section B.2.3 of the spec says that for</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">//     sequential DCTs, those bytes (8-bit Ss, 8-bit Se, 4-bit Ah, 4-bit Al)</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">//     should be 0x00, 0x3f, 0x00&lt;&lt;4 | 0x00.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>var sosHeaderYCbCr = []byte{
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02,
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	0x11, 0x03, 0x11, 0x00, 0x3f, 0x00,
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// writeSOS writes the StartOfScan marker.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (e *encoder) writeSOS(m image.Image) {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	switch m.(type) {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	case *image.Gray:
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		e.write(sosHeaderY)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	default:
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		e.write(sosHeaderYCbCr)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	var (
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		<span class="comment">// Scratch buffers to hold the YCbCr values.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		<span class="comment">// The blocks are in natural (not zig-zag) order.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		b      block
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		cb, cr [4]block
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		<span class="comment">// DC components are delta-encoded.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		prevDCY, prevDCCb, prevDCCr int32
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	bounds := m.Bounds()
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	switch m := m.(type) {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	<span class="comment">// TODO(wathiede): switch on m.ColorModel() instead of type.</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	case *image.Gray:
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		for y := bounds.Min.Y; y &lt; bounds.Max.Y; y += 8 {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>			for x := bounds.Min.X; x &lt; bounds.Max.X; x += 8 {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>				p := image.Pt(x, y)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>				grayToY(m, p, &amp;b)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>				prevDCY = e.writeBlock(&amp;b, 0, prevDCY)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>			}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	default:
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		rgba, _ := m.(*image.RGBA)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		ycbcr, _ := m.(*image.YCbCr)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		for y := bounds.Min.Y; y &lt; bounds.Max.Y; y += 16 {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			for x := bounds.Min.X; x &lt; bounds.Max.X; x += 16 {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>				for i := 0; i &lt; 4; i++ {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>					xOff := (i &amp; 1) * 8
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>					yOff := (i &amp; 2) * 4
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>					p := image.Pt(x+xOff, y+yOff)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>					if rgba != nil {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>						rgbaToYCbCr(rgba, p, &amp;b, &amp;cb[i], &amp;cr[i])
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>					} else if ycbcr != nil {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>						yCbCrToYCbCr(ycbcr, p, &amp;b, &amp;cb[i], &amp;cr[i])
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>					} else {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>						toYCbCr(m, p, &amp;b, &amp;cb[i], &amp;cr[i])
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>					}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>					prevDCY = e.writeBlock(&amp;b, 0, prevDCY)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>				}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>				scale(&amp;b, &amp;cb)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>				prevDCCb = e.writeBlock(&amp;b, 1, prevDCCb)
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>				scale(&amp;b, &amp;cr)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>				prevDCCr = e.writeBlock(&amp;b, 1, prevDCCr)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>			}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	<span class="comment">// Pad the last byte with 1&#39;s.</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	e.emit(0x7f, 7)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span><span class="comment">// DefaultQuality is the default quality encoding parameter.</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>const DefaultQuality = 75
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// Options are the encoding parameters.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">// Quality ranges from 1 to 100 inclusive, higher is better.</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>type Options struct {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	Quality int
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span><span class="comment">// Encode writes the Image m to w in JPEG 4:2:0 baseline format with the given</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span><span class="comment">// options. Default parameters are used if a nil *[Options] is passed.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span><span class="selection">func Encode(w io.Writer, m image.Image, o *Options) error</span> {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	if b.Dx() &gt;= 1&lt;&lt;16 || b.Dy() &gt;= 1&lt;&lt;16 {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		return errors.New(&#34;jpeg: image is too large to encode&#34;)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	var e encoder
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	if ww, ok := w.(writer); ok {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		e.w = ww
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	} else {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		e.w = bufio.NewWriter(w)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	<span class="comment">// Clip quality to [1, 100].</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	quality := DefaultQuality
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	if o != nil {
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		quality = o.Quality
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if quality &lt; 1 {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			quality = 1
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		} else if quality &gt; 100 {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			quality = 100
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	<span class="comment">// Convert from a quality rating to a scaling factor.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	var scale int
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	if quality &lt; 50 {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		scale = 5000 / quality
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	} else {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		scale = 200 - quality*2
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// Initialize the quantization tables.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	for i := range e.quant {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		for j := range e.quant[i] {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>			x := int(unscaledQuant[i][j])
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>			x = (x*scale + 50) / 100
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			if x &lt; 1 {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>				x = 1
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			} else if x &gt; 255 {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>				x = 255
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			e.quant[i][j] = uint8(x)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	<span class="comment">// Compute number of components based on input image type.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	nComponent := 3
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	switch m.(type) {
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	<span class="comment">// TODO(wathiede): switch on m.ColorModel() instead of type.</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	case *image.Gray:
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		nComponent = 1
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// Write the Start Of Image marker.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	e.buf[0] = 0xff
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	e.buf[1] = 0xd8
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	e.write(e.buf[:2])
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	<span class="comment">// Write the quantization tables.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	e.writeDQT()
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// Write the image dimensions.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	e.writeSOF0(b.Size(), nComponent)
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// Write the Huffman tables.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	e.writeDHT(nComponent)
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	<span class="comment">// Write the image data.</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	e.writeSOS(m)
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	<span class="comment">// Write the End Of Image marker.</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	e.buf[0] = 0xff
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	e.buf[1] = 0xd9
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	e.write(e.buf[:2])
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	e.flush()
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	return e.err
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>
</pre><p><a href="writer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
