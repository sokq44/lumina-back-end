<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/png/writer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./writer.go?s=14120:14165#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<a href="http://localhost:8080/src/image/png">png</a>/<span class="text-muted">writer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image/png">image/png</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package png
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;compress/zlib&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;hash/crc32&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;image&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Encoder configures encoding PNG images.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>type Encoder struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	CompressionLevel CompressionLevel
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// BufferPool optionally specifies a buffer pool to get temporary</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// EncoderBuffers when encoding an image.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	BufferPool EncoderBufferPool
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// EncoderBufferPool is an interface for getting and returning temporary</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// instances of the [EncoderBuffer] struct. This can be used to reuse buffers</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// when encoding multiple images.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type EncoderBufferPool interface {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Get() *EncoderBuffer
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Put(*EncoderBuffer)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// EncoderBuffer holds the buffers used for encoding PNG images.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>type EncoderBuffer encoder
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type encoder struct {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	enc     *Encoder
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	w       io.Writer
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	m       image.Image
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	cb      int
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	err     error
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	header  [8]byte
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	footer  [4]byte
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	tmp     [4 * 256]byte
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	cr      [nFilter][]uint8
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	pr      []uint8
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	zw      *zlib.Writer
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	zwLevel int
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	bw      *bufio.Writer
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// CompressionLevel indicates the compression level.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>type CompressionLevel int
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>const (
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	DefaultCompression CompressionLevel = 0
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	NoCompression      CompressionLevel = -1
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	BestSpeed          CompressionLevel = -2
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	BestCompression    CompressionLevel = -3
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// Positive CompressionLevel values are reserved to mean a numeric zlib</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// compression level, although that is not implemented yet.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>type opaquer interface {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Opaque() bool
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Returns whether or not the image is fully opaque.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func opaque(m image.Image) bool {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if o, ok := m.(opaquer); ok {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		return o.Opaque()
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	for y := b.Min.Y; y &lt; b.Max.Y; y++ {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>			_, _, _, a := m.At(x, y).RGBA()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			if a != 0xffff {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>				return false
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>			}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	return true
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// The absolute value of a byte interpreted as a signed int8.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func abs8(d uint8) int {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if d &lt; 128 {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		return int(d)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return 256 - int(d)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (e *encoder) writeChunk(b []byte, name string) {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		return
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	n := uint32(len(b))
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	if int(n) != len(b) {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		e.err = UnsupportedError(name + &#34; chunk is too large: &#34; + strconv.Itoa(len(b)))
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		return
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	binary.BigEndian.PutUint32(e.header[:4], n)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	e.header[4] = name[0]
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	e.header[5] = name[1]
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	e.header[6] = name[2]
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	e.header[7] = name[3]
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	crc := crc32.NewIEEE()
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	crc.Write(e.header[4:8])
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	crc.Write(b)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	binary.BigEndian.PutUint32(e.footer[:4], crc.Sum32())
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	_, e.err = e.w.Write(e.header[:8])
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		return
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	_, e.err = e.w.Write(b)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		return
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	_, e.err = e.w.Write(e.footer[:4])
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (e *encoder) writeIHDR() {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	b := e.m.Bounds()
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	binary.BigEndian.PutUint32(e.tmp[0:4], uint32(b.Dx()))
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	binary.BigEndian.PutUint32(e.tmp[4:8], uint32(b.Dy()))
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// Set bit depth and color type.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	switch e.cb {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	case cbG8:
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		e.tmp[8] = 8
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		e.tmp[9] = ctGrayscale
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	case cbTC8:
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		e.tmp[8] = 8
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		e.tmp[9] = ctTrueColor
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	case cbP8:
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		e.tmp[8] = 8
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		e.tmp[9] = ctPaletted
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	case cbP4:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		e.tmp[8] = 4
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		e.tmp[9] = ctPaletted
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	case cbP2:
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		e.tmp[8] = 2
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		e.tmp[9] = ctPaletted
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	case cbP1:
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		e.tmp[8] = 1
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		e.tmp[9] = ctPaletted
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	case cbTCA8:
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		e.tmp[8] = 8
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		e.tmp[9] = ctTrueColorAlpha
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	case cbG16:
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		e.tmp[8] = 16
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		e.tmp[9] = ctGrayscale
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	case cbTC16:
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		e.tmp[8] = 16
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		e.tmp[9] = ctTrueColor
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	case cbTCA16:
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		e.tmp[8] = 16
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		e.tmp[9] = ctTrueColorAlpha
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	e.tmp[10] = 0 <span class="comment">// default compression method</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	e.tmp[11] = 0 <span class="comment">// default filter method</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	e.tmp[12] = 0 <span class="comment">// non-interlaced</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	e.writeChunk(e.tmp[:13], &#34;IHDR&#34;)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (e *encoder) writePLTEAndTRNS(p color.Palette) {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if len(p) &lt; 1 || len(p) &gt; 256 {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		e.err = FormatError(&#34;bad palette length: &#34; + strconv.Itoa(len(p)))
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		return
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	last := -1
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	for i, c := range p {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		c1 := color.NRGBAModel.Convert(c).(color.NRGBA)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		e.tmp[3*i+0] = c1.R
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		e.tmp[3*i+1] = c1.G
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		e.tmp[3*i+2] = c1.B
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		if c1.A != 0xff {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			last = i
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		e.tmp[3*256+i] = c1.A
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	e.writeChunk(e.tmp[:3*len(p)], &#34;PLTE&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	if last != -1 {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		e.writeChunk(e.tmp[3*256:3*256+1+last], &#34;tRNS&#34;)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// An encoder is an io.Writer that satisfies writes by writing PNG IDAT chunks,</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// including an 8-byte header and 4-byte CRC checksum per Write call. Such calls</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// should be relatively infrequent, since writeIDATs uses a [bufio.Writer].</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// This method should only be called from writeIDATs (via writeImage).</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// No other code should treat an encoder as an io.Writer.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func (e *encoder) Write(b []byte) (int, error) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	e.writeChunk(b, &#34;IDAT&#34;)
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		return 0, e.err
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	return len(b), nil
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// Chooses the filter to use for encoding the current row, and applies it.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// The return value is the index of the filter and also of the row in cr that has had it applied.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func filter(cr *[nFilter][]byte, pr []byte, bpp int) int {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// We try all five filter types, and pick the one that minimizes the sum of absolute differences.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// This is the same heuristic that libpng uses, although the filters are attempted in order of</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// estimated most likely to be minimal (ftUp, ftPaeth, ftNone, ftSub, ftAverage), rather than</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// in their enumeration order (ftNone, ftSub, ftUp, ftAverage, ftPaeth).</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	cdat0 := cr[0][1:]
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	cdat1 := cr[1][1:]
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	cdat2 := cr[2][1:]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	cdat3 := cr[3][1:]
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	cdat4 := cr[4][1:]
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	pdat := pr[1:]
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	n := len(cdat0)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// The up filter.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	sum := 0
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		cdat2[i] = cdat0[i] - pdat[i]
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		sum += abs8(cdat2[i])
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	best := sum
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	filter := ftUp
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// The Paeth filter.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	sum = 0
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	for i := 0; i &lt; bpp; i++ {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		cdat4[i] = cdat0[i] - pdat[i]
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		sum += abs8(cdat4[i])
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	for i := bpp; i &lt; n; i++ {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		cdat4[i] = cdat0[i] - paeth(cdat0[i-bpp], pdat[i], pdat[i-bpp])
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		sum += abs8(cdat4[i])
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if sum &gt;= best {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			break
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if sum &lt; best {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		best = sum
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		filter = ftPaeth
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// The none filter.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	sum = 0
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		sum += abs8(cdat0[i])
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		if sum &gt;= best {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			break
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if sum &lt; best {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		best = sum
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		filter = ftNone
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// The sub filter.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	sum = 0
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	for i := 0; i &lt; bpp; i++ {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		cdat1[i] = cdat0[i]
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		sum += abs8(cdat1[i])
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	for i := bpp; i &lt; n; i++ {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		cdat1[i] = cdat0[i] - cdat0[i-bpp]
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		sum += abs8(cdat1[i])
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		if sum &gt;= best {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			break
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	if sum &lt; best {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		best = sum
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		filter = ftSub
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// The average filter.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	sum = 0
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	for i := 0; i &lt; bpp; i++ {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		cdat3[i] = cdat0[i] - pdat[i]/2
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		sum += abs8(cdat3[i])
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	for i := bpp; i &lt; n; i++ {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		cdat3[i] = cdat0[i] - uint8((int(cdat0[i-bpp])+int(pdat[i]))/2)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		sum += abs8(cdat3[i])
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if sum &gt;= best {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			break
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	if sum &lt; best {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		filter = ftAverage
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return filter
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func zeroMemory(v []uint8) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	for i := range v {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		v[i] = 0
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func (e *encoder) writeImage(w io.Writer, m image.Image, cb int, level int) error {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if e.zw == nil || e.zwLevel != level {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		zw, err := zlib.NewWriterLevel(w, level)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		if err != nil {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			return err
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		e.zw = zw
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		e.zwLevel = level
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	} else {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		e.zw.Reset(w)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	defer e.zw.Close()
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	bitsPerPixel := 0
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	switch cb {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	case cbG8:
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		bitsPerPixel = 8
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	case cbTC8:
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		bitsPerPixel = 24
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	case cbP8:
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		bitsPerPixel = 8
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	case cbP4:
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		bitsPerPixel = 4
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	case cbP2:
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		bitsPerPixel = 2
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	case cbP1:
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		bitsPerPixel = 1
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	case cbTCA8:
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		bitsPerPixel = 32
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	case cbTC16:
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		bitsPerPixel = 48
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	case cbTCA16:
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		bitsPerPixel = 64
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	case cbG16:
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		bitsPerPixel = 16
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// cr[*] and pr are the bytes for the current and previous row.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// cr[0] is unfiltered (or equivalently, filtered with the ftNone filter).</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// cr[ft], for non-zero filter types ft, are buffers for transforming cr[0] under the</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// other PNG filter types. These buffers are allocated once and re-used for each row.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// The +1 is for the per-row filter type, which is at cr[*][0].</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	b := m.Bounds()
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	sz := 1 + (bitsPerPixel*b.Dx()+7)/8
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	for i := range e.cr {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		if cap(e.cr[i]) &lt; sz {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			e.cr[i] = make([]uint8, sz)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		} else {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			e.cr[i] = e.cr[i][:sz]
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		e.cr[i][0] = uint8(i)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	cr := e.cr
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if cap(e.pr) &lt; sz {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		e.pr = make([]uint8, sz)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	} else {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		e.pr = e.pr[:sz]
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		zeroMemory(e.pr)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	pr := e.pr
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	gray, _ := m.(*image.Gray)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	rgba, _ := m.(*image.RGBA)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	paletted, _ := m.(*image.Paletted)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	nrgba, _ := m.(*image.NRGBA)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	for y := b.Min.Y; y &lt; b.Max.Y; y++ {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		<span class="comment">// Convert from colors to bytes.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		i := 1
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		switch cb {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		case cbG8:
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			if gray != nil {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>				offset := (y - b.Min.Y) * gray.Stride
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>				copy(cr[0][1:], gray.Pix[offset:offset+b.Dx()])
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			} else {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>					c := color.GrayModel.Convert(m.At(x, y)).(color.Gray)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>					cr[0][i] = c.Y
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>					i++
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>				}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		case cbTC8:
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			<span class="comment">// We have previously verified that the alpha value is fully opaque.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			cr0 := cr[0]
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			stride, pix := 0, []byte(nil)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			if rgba != nil {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>				stride, pix = rgba.Stride, rgba.Pix
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			} else if nrgba != nil {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				stride, pix = nrgba.Stride, nrgba.Pix
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			if stride != 0 {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>				j0 := (y - b.Min.Y) * stride
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				j1 := j0 + b.Dx()*4
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				for j := j0; j &lt; j1; j += 4 {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>					cr0[i+0] = pix[j+0]
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>					cr0[i+1] = pix[j+1]
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>					cr0[i+2] = pix[j+2]
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>					i += 3
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>				}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			} else {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>					r, g, b, _ := m.At(x, y).RGBA()
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>					cr0[i+0] = uint8(r &gt;&gt; 8)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>					cr0[i+1] = uint8(g &gt;&gt; 8)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					cr0[i+2] = uint8(b &gt;&gt; 8)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>					i += 3
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		case cbP8:
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			if paletted != nil {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				offset := (y - b.Min.Y) * paletted.Stride
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>				copy(cr[0][1:], paletted.Pix[offset:offset+b.Dx()])
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			} else {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>				pi := m.(image.PalettedImage)
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>				for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>					cr[0][i] = pi.ColorIndexAt(x, y)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>					i += 1
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>				}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		case cbP4, cbP2, cbP1:
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>			pi := m.(image.PalettedImage)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			var a uint8
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>			var c int
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			pixelsPerByte := 8 / bitsPerPixel
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				a = a&lt;&lt;uint(bitsPerPixel) | pi.ColorIndexAt(x, y)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>				c++
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>				if c == pixelsPerByte {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>					cr[0][i] = a
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>					i += 1
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>					a = 0
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>					c = 0
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>				}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			if c != 0 {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>				for c != pixelsPerByte {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>					a = a &lt;&lt; uint(bitsPerPixel)
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>					c++
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				cr[0][i] = a
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		case cbTCA8:
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			if nrgba != nil {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>				offset := (y - b.Min.Y) * nrgba.Stride
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>				copy(cr[0][1:], nrgba.Pix[offset:offset+b.Dx()*4])
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			} else if rgba != nil {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>				dst := cr[0][1:]
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				src := rgba.Pix[rgba.PixOffset(b.Min.X, y):rgba.PixOffset(b.Max.X, y)]
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				for ; len(src) &gt;= 4; dst, src = dst[4:], src[4:] {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>					d := (*[4]byte)(dst)
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>					s := (*[4]byte)(src)
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>					if s[3] == 0x00 {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>						d[0] = 0
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>						d[1] = 0
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>						d[2] = 0
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>						d[3] = 0
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>					} else if s[3] == 0xff {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>						copy(d[:], s[:])
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>					} else {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>						<span class="comment">// This code does the same as color.NRGBAModel.Convert(</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>						<span class="comment">// rgba.At(x, y)).(color.NRGBA) but with no extra memory</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>						<span class="comment">// allocations or interface/function call overhead.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>						<span class="comment">//</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>						<span class="comment">// The multiplier m combines 0x101 (which converts</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>						<span class="comment">// 8-bit color to 16-bit color) and 0xffff (which, when</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>						<span class="comment">// combined with the division-by-a, converts from</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>						<span class="comment">// alpha-premultiplied to non-alpha-premultiplied).</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>						const m = 0x101 * 0xffff
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>						a := uint32(s[3]) * 0x101
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>						d[0] = uint8((uint32(s[0]) * m / a) &gt;&gt; 8)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>						d[1] = uint8((uint32(s[1]) * m / a) &gt;&gt; 8)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>						d[2] = uint8((uint32(s[2]) * m / a) &gt;&gt; 8)
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>						d[3] = s[3]
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>					}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>				}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			} else {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>				<span class="comment">// Convert from image.Image (which is alpha-premultiplied) to PNG&#39;s non-alpha-premultiplied.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>					c := color.NRGBAModel.Convert(m.At(x, y)).(color.NRGBA)
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>					cr[0][i+0] = c.R
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>					cr[0][i+1] = c.G
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>					cr[0][i+2] = c.B
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>					cr[0][i+3] = c.A
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>					i += 4
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>				}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		case cbG16:
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>			for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>				c := color.Gray16Model.Convert(m.At(x, y)).(color.Gray16)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>				cr[0][i+0] = uint8(c.Y &gt;&gt; 8)
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>				cr[0][i+1] = uint8(c.Y)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>				i += 2
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		case cbTC16:
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			<span class="comment">// We have previously verified that the alpha value is fully opaque.</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>				r, g, b, _ := m.At(x, y).RGBA()
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>				cr[0][i+0] = uint8(r &gt;&gt; 8)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>				cr[0][i+1] = uint8(r)
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>				cr[0][i+2] = uint8(g &gt;&gt; 8)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>				cr[0][i+3] = uint8(g)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>				cr[0][i+4] = uint8(b &gt;&gt; 8)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>				cr[0][i+5] = uint8(b)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>				i += 6
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>			}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		case cbTCA16:
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			<span class="comment">// Convert from image.Image (which is alpha-premultiplied) to PNG&#39;s non-alpha-premultiplied.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>			for x := b.Min.X; x &lt; b.Max.X; x++ {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>				c := color.NRGBA64Model.Convert(m.At(x, y)).(color.NRGBA64)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>				cr[0][i+0] = uint8(c.R &gt;&gt; 8)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>				cr[0][i+1] = uint8(c.R)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>				cr[0][i+2] = uint8(c.G &gt;&gt; 8)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>				cr[0][i+3] = uint8(c.G)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>				cr[0][i+4] = uint8(c.B &gt;&gt; 8)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>				cr[0][i+5] = uint8(c.B)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>				cr[0][i+6] = uint8(c.A &gt;&gt; 8)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>				cr[0][i+7] = uint8(c.A)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>				i += 8
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>			}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		<span class="comment">// Apply the filter.</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		<span class="comment">// Skip filter for NoCompression and paletted images (cbP8) as</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		<span class="comment">// &#34;filters are rarely useful on palette images&#34; and will result</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		<span class="comment">// in larger files (see http://www.libpng.org/pub/png/book/chapter09.html).</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		f := ftNone
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if level != zlib.NoCompression &amp;&amp; cb != cbP8 &amp;&amp; cb != cbP4 &amp;&amp; cb != cbP2 &amp;&amp; cb != cbP1 {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			<span class="comment">// Since we skip paletted images we don&#39;t have to worry about</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>			<span class="comment">// bitsPerPixel not being a multiple of 8</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			bpp := bitsPerPixel / 8
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>			f = filter(&amp;cr, pr, bpp)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		<span class="comment">// Write the compressed bytes.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		if _, err := e.zw.Write(cr[f]); err != nil {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			return err
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		<span class="comment">// The current row for y is the previous row for y+1.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		pr, cr[0] = cr[0], pr
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	return nil
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span><span class="comment">// Write the actual image data to one or more IDAT chunks.</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>func (e *encoder) writeIDATs() {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if e.bw == nil {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		e.bw = bufio.NewWriterSize(e, 1&lt;&lt;15)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	} else {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		e.bw.Reset(e)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	e.err = e.writeImage(e.bw, e.m, e.cb, levelToZlib(e.enc.CompressionLevel))
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	if e.err != nil {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		return
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	e.err = e.bw.Flush()
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// This function is required because we want the zero value of</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">// Encoder.CompressionLevel to map to zlib.DefaultCompression.</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func levelToZlib(l CompressionLevel) int {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	switch l {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	case DefaultCompression:
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		return zlib.DefaultCompression
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	case NoCompression:
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		return zlib.NoCompression
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	case BestSpeed:
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		return zlib.BestSpeed
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	case BestCompression:
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		return zlib.BestCompression
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	default:
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		return zlib.DefaultCompression
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>func (e *encoder) writeIEND() { e.writeChunk(nil, &#34;IEND&#34;) }
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// Encode writes the Image m to w in PNG format. Any Image may be</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// encoded, but images that are not [image.NRGBA] might be encoded lossily.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="selection">func Encode(w io.Writer, m image.Image) error</span> {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	var e Encoder
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	return e.Encode(w, m)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">// Encode writes the Image m to w in PNG format.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func (enc *Encoder) Encode(w io.Writer, m image.Image) error {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// Obviously, negative widths and heights are invalid. Furthermore, the PNG</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// spec section 11.2.2 says that zero is invalid. Excessively large images are</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	<span class="comment">// also rejected.</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	mw, mh := int64(m.Bounds().Dx()), int64(m.Bounds().Dy())
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	if mw &lt;= 0 || mh &lt;= 0 || mw &gt;= 1&lt;&lt;32 || mh &gt;= 1&lt;&lt;32 {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		return FormatError(&#34;invalid image size: &#34; + strconv.FormatInt(mw, 10) + &#34;x&#34; + strconv.FormatInt(mh, 10))
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	var e *encoder
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if enc.BufferPool != nil {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		buffer := enc.BufferPool.Get()
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		e = (*encoder)(buffer)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	if e == nil {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		e = &amp;encoder{}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	if enc.BufferPool != nil {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		defer enc.BufferPool.Put((*EncoderBuffer)(e))
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	}
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	e.enc = enc
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	e.w = w
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	e.m = m
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	var pal color.Palette
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	<span class="comment">// cbP8 encoding needs PalettedImage&#39;s ColorIndexAt method.</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	if _, ok := m.(image.PalettedImage); ok {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		pal, _ = m.ColorModel().(color.Palette)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	if pal != nil {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		if len(pal) &lt;= 2 {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			e.cb = cbP1
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		} else if len(pal) &lt;= 4 {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			e.cb = cbP2
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		} else if len(pal) &lt;= 16 {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			e.cb = cbP4
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		} else {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			e.cb = cbP8
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	} else {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		switch m.ColorModel() {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		case color.GrayModel:
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			e.cb = cbG8
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		case color.Gray16Model:
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			e.cb = cbG16
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		case color.RGBAModel, color.NRGBAModel, color.AlphaModel:
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			if opaque(m) {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>				e.cb = cbTC8
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			} else {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				e.cb = cbTCA8
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		default:
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			if opaque(m) {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>				e.cb = cbTC16
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>			} else {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>				e.cb = cbTCA16
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			}
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	_, e.err = io.WriteString(w, pngHeader)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	e.writeIHDR()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	if pal != nil {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		e.writePLTEAndTRNS(pal)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	e.writeIDATs()
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	e.writeIEND()
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	return e.err
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
</pre><p><a href="writer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
