<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/image/ycbcr.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./ycbcr.go?s=7748:7779#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/image">image</a>/<span class="text-muted">ycbcr.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/image">image</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package image
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;image/color&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>)
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// YCbCrSubsampleRatio is the chroma subsample ratio used in a YCbCr image.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>type YCbCrSubsampleRatio int
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>const (
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	YCbCrSubsampleRatio444 YCbCrSubsampleRatio = iota
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	YCbCrSubsampleRatio422
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	YCbCrSubsampleRatio420
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	YCbCrSubsampleRatio440
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	YCbCrSubsampleRatio411
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	YCbCrSubsampleRatio410
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>func (s YCbCrSubsampleRatio) String() string {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	switch s {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio444:
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio444&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio422:
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio422&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio420:
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio420&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio440:
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio440&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio411:
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio411&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio410:
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		return &#34;YCbCrSubsampleRatio410&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	return &#34;YCbCrSubsampleRatioUnknown&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// YCbCr is an in-memory image of Y&#39;CbCr colors. There is one Y sample per</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// pixel, but each Cb and Cr sample can span one or more pixels.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// YStride is the Y slice index delta between vertically adjacent pixels.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// CStride is the Cb and Cr slice index delta between vertically adjacent pixels</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// that map to separate chroma samples.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// It is not an absolute requirement, but YStride and len(Y) are typically</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// multiples of 8, and:</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//	For 4:4:4, CStride == YStride/1 &amp;&amp; len(Cb) == len(Cr) == len(Y)/1.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	For 4:2:2, CStride == YStride/2 &amp;&amp; len(Cb) == len(Cr) == len(Y)/2.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	For 4:2:0, CStride == YStride/2 &amp;&amp; len(Cb) == len(Cr) == len(Y)/4.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//	For 4:4:0, CStride == YStride/1 &amp;&amp; len(Cb) == len(Cr) == len(Y)/2.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	For 4:1:1, CStride == YStride/4 &amp;&amp; len(Cb) == len(Cr) == len(Y)/4.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//	For 4:1:0, CStride == YStride/4 &amp;&amp; len(Cb) == len(Cr) == len(Y)/8.</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>type YCbCr struct {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Y, Cb, Cr      []uint8
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	YStride        int
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	CStride        int
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	SubsampleRatio YCbCrSubsampleRatio
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Rect           Rectangle
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>func (p *YCbCr) ColorModel() color.Model {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	return color.YCbCrModel
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func (p *YCbCr) Bounds() Rectangle {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	return p.Rect
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func (p *YCbCr) At(x, y int) color.Color {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return p.YCbCrAt(x, y)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func (p *YCbCr) RGBA64At(x, y int) color.RGBA64 {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	r, g, b, a := p.YCbCrAt(x, y).RGBA()
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	return color.RGBA64{uint16(r), uint16(g), uint16(b), uint16(a)}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func (p *YCbCr) YCbCrAt(x, y int) color.YCbCr {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	if !(Point{x, y}.In(p.Rect)) {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		return color.YCbCr{}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	yi := p.YOffset(x, y)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	ci := p.COffset(x, y)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return color.YCbCr{
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		p.Y[yi],
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		p.Cb[ci],
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		p.Cr[ci],
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// YOffset returns the index of the first element of Y that corresponds to</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// the pixel at (x, y).</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func (p *YCbCr) YOffset(x, y int) int {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	return (y-p.Rect.Min.Y)*p.YStride + (x - p.Rect.Min.X)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// COffset returns the index of the first element of Cb or Cr that corresponds</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// to the pixel at (x, y).</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func (p *YCbCr) COffset(x, y int) int {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	switch p.SubsampleRatio {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio422:
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return (y-p.Rect.Min.Y)*p.CStride + (x/2 - p.Rect.Min.X/2)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio420:
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		return (y/2-p.Rect.Min.Y/2)*p.CStride + (x/2 - p.Rect.Min.X/2)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio440:
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return (y/2-p.Rect.Min.Y/2)*p.CStride + (x - p.Rect.Min.X)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio411:
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		return (y-p.Rect.Min.Y)*p.CStride + (x/4 - p.Rect.Min.X/4)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio410:
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		return (y/2-p.Rect.Min.Y/2)*p.CStride + (x/4 - p.Rect.Min.X/4)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Default to 4:4:4 subsampling.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return (y-p.Rect.Min.Y)*p.CStride + (x - p.Rect.Min.X)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// through r. The returned value shares pixels with the original image.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (p *YCbCr) SubImage(r Rectangle) Image {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	r = r.Intersect(p.Rect)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		return &amp;YCbCr{
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			SubsampleRatio: p.SubsampleRatio,
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	yi := p.YOffset(r.Min.X, r.Min.Y)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	ci := p.COffset(r.Min.X, r.Min.Y)
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return &amp;YCbCr{
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		Y:              p.Y[yi:],
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		Cb:             p.Cb[ci:],
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		Cr:             p.Cr[ci:],
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		SubsampleRatio: p.SubsampleRatio,
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		YStride:        p.YStride,
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		CStride:        p.CStride,
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		Rect:           r,
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func (p *YCbCr) Opaque() bool {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	return true
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func yCbCrSize(r Rectangle, subsampleRatio YCbCrSubsampleRatio) (w, h, cw, ch int) {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	w, h = r.Dx(), r.Dy()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	switch subsampleRatio {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio422:
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		cw = (r.Max.X+1)/2 - r.Min.X/2
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		ch = h
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio420:
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		cw = (r.Max.X+1)/2 - r.Min.X/2
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		ch = (r.Max.Y+1)/2 - r.Min.Y/2
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio440:
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		cw = w
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		ch = (r.Max.Y+1)/2 - r.Min.Y/2
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio411:
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		cw = (r.Max.X+3)/4 - r.Min.X/4
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		ch = h
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	case YCbCrSubsampleRatio410:
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		cw = (r.Max.X+3)/4 - r.Min.X/4
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		ch = (r.Max.Y+1)/2 - r.Min.Y/2
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	default:
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		<span class="comment">// Default to 4:4:4 subsampling.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		cw = w
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		ch = h
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// NewYCbCr returns a new YCbCr image with the given bounds and subsample</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// ratio.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func NewYCbCr(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *YCbCr {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	w, h, cw, ch := yCbCrSize(r, subsampleRatio)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// totalLength should be the same as i2, below, for a valid Rectangle r.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	totalLength := add2NonNeg(
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		mul3NonNeg(1, w, h),
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		mul3NonNeg(2, cw, ch),
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	if totalLength &lt; 0 {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		panic(&#34;image: NewYCbCr Rectangle has huge or negative dimensions&#34;)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	i0 := w*h + 0*cw*ch
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	i1 := w*h + 1*cw*ch
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	i2 := w*h + 2*cw*ch
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	b := make([]byte, i2)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return &amp;YCbCr{
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		Y:              b[:i0:i0],
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		Cb:             b[i0:i1:i1],
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		Cr:             b[i1:i2:i2],
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		SubsampleRatio: subsampleRatio,
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		YStride:        w,
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		CStride:        cw,
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		Rect:           r,
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// NYCbCrA is an in-memory image of non-alpha-premultiplied Y&#39;CbCr-with-alpha</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// colors. A and AStride are analogous to the Y and YStride fields of the</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// embedded YCbCr.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>type NYCbCrA struct {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	YCbCr
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	A       []uint8
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	AStride int
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func (p *NYCbCrA) ColorModel() color.Model {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	return color.NYCbCrAModel
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (p *NYCbCrA) At(x, y int) color.Color {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	return p.NYCbCrAAt(x, y)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (p *NYCbCrA) RGBA64At(x, y int) color.RGBA64 {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	r, g, b, a := p.NYCbCrAAt(x, y).RGBA()
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	return color.RGBA64{uint16(r), uint16(g), uint16(b), uint16(a)}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>func (p *NYCbCrA) NYCbCrAAt(x, y int) color.NYCbCrA {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	if !(Point{X: x, Y: y}.In(p.Rect)) {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		return color.NYCbCrA{}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	yi := p.YOffset(x, y)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	ci := p.COffset(x, y)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	ai := p.AOffset(x, y)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return color.NYCbCrA{
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		color.YCbCr{
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			Y:  p.Y[yi],
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			Cb: p.Cb[ci],
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			Cr: p.Cr[ci],
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		},
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		p.A[ai],
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// AOffset returns the index of the first element of A that corresponds to the</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// pixel at (x, y).</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (p *NYCbCrA) AOffset(x, y int) int {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	return (y-p.Rect.Min.Y)*p.AStride + (x - p.Rect.Min.X)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// through r. The returned value shares pixels with the original image.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func (p *NYCbCrA) SubImage(r Rectangle) Image {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	r = r.Intersect(p.Rect)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if r.Empty() {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return &amp;NYCbCrA{
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			YCbCr: YCbCr{
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>				SubsampleRatio: p.SubsampleRatio,
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			},
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	yi := p.YOffset(r.Min.X, r.Min.Y)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	ci := p.COffset(r.Min.X, r.Min.Y)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	ai := p.AOffset(r.Min.X, r.Min.Y)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	return &amp;NYCbCrA{
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		YCbCr: YCbCr{
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			Y:              p.Y[yi:],
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			Cb:             p.Cb[ci:],
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			Cr:             p.Cr[ci:],
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			SubsampleRatio: p.SubsampleRatio,
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			YStride:        p.YStride,
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			CStride:        p.CStride,
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			Rect:           r,
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		},
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		A:       p.A[ai:],
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		AStride: p.AStride,
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// Opaque scans the entire image and reports whether it is fully opaque.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="selection">func (p *NYCbCrA) Opaque() bool</span> {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if p.Rect.Empty() {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return true
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	i0, i1 := 0, p.Rect.Dx()
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		for _, a := range p.A[i0:i1] {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			if a != 0xff {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>				return false
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		i0 += p.AStride
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		i1 += p.AStride
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	return true
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// NewNYCbCrA returns a new [NYCbCrA] image with the given bounds and subsample</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// ratio.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>func NewNYCbCrA(r Rectangle, subsampleRatio YCbCrSubsampleRatio) *NYCbCrA {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	w, h, cw, ch := yCbCrSize(r, subsampleRatio)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// totalLength should be the same as i3, below, for a valid Rectangle r.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	totalLength := add2NonNeg(
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		mul3NonNeg(2, w, h),
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		mul3NonNeg(2, cw, ch),
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	)
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	if totalLength &lt; 0 {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		panic(&#34;image: NewNYCbCrA Rectangle has huge or negative dimension&#34;)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	i0 := 1*w*h + 0*cw*ch
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	i1 := 1*w*h + 1*cw*ch
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	i2 := 1*w*h + 2*cw*ch
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	i3 := 2*w*h + 2*cw*ch
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	b := make([]byte, i3)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return &amp;NYCbCrA{
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		YCbCr: YCbCr{
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			Y:              b[:i0:i0],
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			Cb:             b[i0:i1:i1],
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			Cr:             b[i1:i2:i2],
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			SubsampleRatio: subsampleRatio,
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>			YStride:        w,
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			CStride:        cw,
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			Rect:           r,
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		},
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		A:       b[i2:],
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		AStride: w,
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
</pre><p><a href="ycbcr.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
