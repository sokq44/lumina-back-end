<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/internal/trace/parser.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./parser.go?s=27876:27908#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/internal">internal</a>/<a href="http://localhost:8080/src/internal/trace">trace</a>/<span class="text-muted">parser.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/internal/trace">internal/trace</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2014 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package trace
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;math/rand&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;os/exec&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	_ &#34;unsafe&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>func goCmd() string {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	var exeSuffix string
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	if runtime.GOOS == &#34;windows&#34; {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		exeSuffix = &#34;.exe&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	path := filepath.Join(runtime.GOROOT(), &#34;bin&#34;, &#34;go&#34;+exeSuffix)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	if _, err := os.Stat(path); err == nil {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		return path
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	return &#34;go&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Event describes one event in the trace.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>type Event struct {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	Off   int       <span class="comment">// offset in input file (for debugging and error reporting)</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	Type  byte      <span class="comment">// one of Ev*</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	seq   int64     <span class="comment">// sequence number</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Ts    int64     <span class="comment">// timestamp in nanoseconds</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	P     int       <span class="comment">// P on which the event happened (can be one of TimerP, NetpollP, SyscallP)</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	G     uint64    <span class="comment">// G on which the event happened</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	StkID uint64    <span class="comment">// unique stack ID</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	Stk   []*Frame  <span class="comment">// stack trace (can be empty)</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	Args  [3]uint64 <span class="comment">// event-type-specific arguments</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	SArgs []string  <span class="comment">// event-type-specific string args</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// linked event (can be nil), depends on event type:</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// for GCStart: the GCStop</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// for GCSTWStart: the GCSTWDone</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// for GCSweepStart: the GCSweepDone</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// for GoCreate: first GoStart of the created goroutine</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// for GoStart/GoStartLabel: the associated GoEnd, GoBlock or other blocking event</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// for GoSched/GoPreempt: the next GoStart</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// for GoBlock and other blocking events: the unblock event</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// for GoUnblock: the associated GoStart</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// for blocking GoSysCall: the associated GoSysExit</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// for GoSysExit: the next GoStart</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// for GCMarkAssistStart: the associated GCMarkAssistDone</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// for UserTaskCreate: the UserTaskEnd</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// for UserRegion: if the start region, the corresponding UserRegion end event</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Link *Event
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Frame is a frame in stack traces.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>type Frame struct {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	PC   uint64
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	Fn   string
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	File string
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Line int
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>const (
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Special P identifiers:</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	FakeP    = 1000000 + iota
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	TimerP   <span class="comment">// depicts timer unblocks</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	NetpollP <span class="comment">// depicts network unblocks</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	SyscallP <span class="comment">// depicts returns from syscalls</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	GCP      <span class="comment">// depicts GC state</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	ProfileP <span class="comment">// depicts recording of CPU profile samples</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// ParseResult is the result of Parse.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>type ParseResult struct {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// Events is the sorted list of Events in the trace.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	Events []*Event
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// Stacks is the stack traces keyed by stack IDs from the trace.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	Stacks map[uint64][]*Frame
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// Parse parses, post-processes and verifies the trace.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>func Parse(r io.Reader, bin string) (ParseResult, error) {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	ver, res, err := parse(r, bin)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if err != nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return ParseResult{}, err
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	if ver &lt; 1007 &amp;&amp; bin == &#34;&#34; {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		return ParseResult{}, fmt.Errorf(&#34;for traces produced by go 1.6 or below, the binary argument must be provided&#34;)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	return res, nil
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// parse parses, post-processes and verifies the trace. It returns the</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// trace version and the list of events.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>func parse(r io.Reader, bin string) (int, ParseResult, error) {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	ver, rawEvents, strings, err := readTrace(r)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	if err != nil {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		return 0, ParseResult{}, err
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	events, stacks, err := parseEvents(ver, rawEvents, strings)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if err != nil {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		return 0, ParseResult{}, err
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	events = removeFutile(events)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	err = postProcessTrace(ver, events)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	if err != nil {
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		return 0, ParseResult{}, err
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Attach stack traces.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if ev.StkID != 0 {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			ev.Stk = stacks[ev.StkID]
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	if ver &lt; 1007 &amp;&amp; bin != &#34;&#34; {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		if err := symbolize(events, bin); err != nil {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			return 0, ParseResult{}, err
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	return ver, ParseResult{Events: events, Stacks: stacks}, nil
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// rawEvent is a helper type used during parsing.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>type rawEvent struct {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	off   int
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	typ   byte
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	args  []uint64
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	sargs []string
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func ReadVersion(r io.Reader) (ver int, off int, err error) {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// Read and validate trace header.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	var buf [16]byte
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	off, err = io.ReadFull(r, buf[:])
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	if err != nil {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;failed to read header: read %v, err %v&#34;, off, err)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		return
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	ver, err = parseHeader(buf[:])
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// readTrace does wire-format parsing and verification.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// It does not care about specific event types and argument meaning.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>func readTrace(r io.Reader) (ver int, events []rawEvent, strings map[uint64]string, err error) {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	var off int
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	ver, off, err = ReadVersion(r)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if err != nil {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		return
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	switch ver {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	case 1005, 1007, 1008, 1009, 1010, 1011, 1019, 1021:
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		<span class="comment">// Note: When adding a new version, confirm that canned traces from the</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		<span class="comment">// old version are part of the test suite. Add them using mkcanned.bash.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		break
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	default:
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;unsupported trace file version %v.%v (update Go toolchain) %v&#34;, ver/1000, ver%1000, ver)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// Read events.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	var buf [16]byte
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	strings = make(map[uint64]string)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	for {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		<span class="comment">// Read event type and number of arguments (1 byte).</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		off0 := off
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		var n int
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		n, err = r.Read(buf[:1])
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		if err == io.EOF {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			err = nil
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			break
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		if err != nil || n != 1 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;failed to read trace at offset 0x%x: n=%v err=%v&#34;, off0, n, err)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			return
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		off += n
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		typ := buf[0] &lt;&lt; 2 &gt;&gt; 2
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		narg := buf[0]&gt;&gt;6 + 1
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		inlineArgs := byte(4)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if ver &lt; 1007 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			narg++
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			inlineArgs++
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		if typ == EvNone || typ &gt;= EvCount || EventDescriptions[typ].minVersion &gt; ver {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;unknown event type %v at offset 0x%x&#34;, typ, off0)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			return
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if typ == EvString {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			<span class="comment">// String dictionary entry [ID, length, string].</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			var id uint64
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			id, off, err = readVal(r, off)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			if err != nil {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>				return
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			if id == 0 {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;string at offset %d has invalid id 0&#34;, off)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>				return
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			if strings[id] != &#34;&#34; {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;string at offset %d has duplicate id %v&#34;, off, id)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>				return
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			var ln uint64
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			ln, off, err = readVal(r, off)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			if err != nil {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>				return
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			if ln == 0 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;string at offset %d has invalid length 0&#34;, off)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>				return
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			if ln &gt; 1e6 {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;string at offset %d has too large length %v&#34;, off, ln)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>				return
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			buf := make([]byte, ln)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			var n int
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			n, err = io.ReadFull(r, buf)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			if err != nil {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;failed to read trace at offset %d: read %v, want %v, error %v&#34;, off, n, ln, err)
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>				return
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			off += n
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			strings[id] = string(buf)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			continue
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		ev := rawEvent{typ: typ, off: off0}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		if narg &lt; inlineArgs {
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			for i := 0; i &lt; int(narg); i++ {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>				var v uint64
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>				v, off, err = readVal(r, off)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				if err != nil {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>					err = fmt.Errorf(&#34;failed to read event %v argument at offset %v (%v)&#34;, typ, off, err)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>					return
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>				}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				ev.args = append(ev.args, v)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		} else {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			<span class="comment">// More than inlineArgs args, the first value is length of the event in bytes.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			var v uint64
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			v, off, err = readVal(r, off)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			if err != nil {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;failed to read event %v argument at offset %v (%v)&#34;, typ, off, err)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>				return
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			evLen := v
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			off1 := off
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			for evLen &gt; uint64(off-off1) {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				v, off, err = readVal(r, off)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				if err != nil {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>					err = fmt.Errorf(&#34;failed to read event %v argument at offset %v (%v)&#34;, typ, off, err)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>					return
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>				ev.args = append(ev.args, v)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			if evLen != uint64(off-off1) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;event has wrong length at offset 0x%x: want %v, got %v&#34;, off0, evLen, off-off1)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>				return
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		switch ev.typ {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		case EvUserLog: <span class="comment">// EvUserLog records are followed by a value string of length ev.args[len(ev.args)-1]</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			var s string
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>			s, off, err = readStr(r, off)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			ev.sargs = append(ev.sargs, s)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		events = append(events, ev)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func readStr(r io.Reader, off0 int) (s string, off int, err error) {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	var sz uint64
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	sz, off, err = readVal(r, off0)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	if err != nil || sz == 0 {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return &#34;&#34;, off, err
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	if sz &gt; 1e6 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		return &#34;&#34;, off, fmt.Errorf(&#34;string at offset %d is too large (len=%d)&#34;, off, sz)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	buf := make([]byte, sz)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	n, err := io.ReadFull(r, buf)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	if err != nil || sz != uint64(n) {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		return &#34;&#34;, off + n, fmt.Errorf(&#34;failed to read trace at offset %d: read %v, want %v, error %v&#34;, off, n, sz, err)
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return string(buf), off + n, nil
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// parseHeader parses trace header of the form &#34;go 1.7 trace\x00\x00\x00\x00&#34;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// and returns parsed version as 1007.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>func parseHeader(buf []byte) (int, error) {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	if len(buf) != 16 {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;bad header length&#34;)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if buf[0] != &#39;g&#39; || buf[1] != &#39;o&#39; || buf[2] != &#39; &#39; ||
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		buf[3] &lt; &#39;1&#39; || buf[3] &gt; &#39;9&#39; ||
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		buf[4] != &#39;.&#39; ||
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		buf[5] &lt; &#39;1&#39; || buf[5] &gt; &#39;9&#39; {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;not a trace file&#34;)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	ver := int(buf[5] - &#39;0&#39;)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	i := 0
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	for ; buf[6+i] &gt;= &#39;0&#39; &amp;&amp; buf[6+i] &lt;= &#39;9&#39; &amp;&amp; i &lt; 2; i++ {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		ver = ver*10 + int(buf[6+i]-&#39;0&#39;)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	ver += int(buf[3]-&#39;0&#39;) * 1000
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if !bytes.Equal(buf[6+i:], []byte(&#34; trace\x00\x00\x00\x00&#34;)[:10-i]) {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		return 0, fmt.Errorf(&#34;not a trace file&#34;)
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	return ver, nil
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// Parse events transforms raw events into events.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// It does analyze and verify per-event-type arguments.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func parseEvents(ver int, rawEvents []rawEvent, strings map[uint64]string) (events []*Event, stacks map[uint64][]*Frame, err error) {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	var ticksPerSec, lastSeq, lastTs int64
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	var lastG uint64
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	var lastP int
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	timerGoids := make(map[uint64]bool)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	lastGs := make(map[int]uint64) <span class="comment">// last goroutine running on P</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	stacks = make(map[uint64][]*Frame)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	batches := make(map[int][]*Event) <span class="comment">// events by P</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	for _, raw := range rawEvents {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		desc := EventDescriptions[raw.typ]
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		if desc.Name == &#34;&#34; {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;missing description for event type %v&#34;, raw.typ)
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>			return
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		narg := argNum(raw, ver)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		if len(raw.args) != narg {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;%v has wrong number of arguments at offset 0x%x: want %v, got %v&#34;,
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>				desc.Name, raw.off, narg, len(raw.args))
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>			return
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		switch raw.typ {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		case EvBatch:
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			lastGs[lastP] = lastG
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>			lastP = int(raw.args[0])
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			lastG = lastGs[lastP]
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			if ver &lt; 1007 {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>				lastSeq = int64(raw.args[1])
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>				lastTs = int64(raw.args[2])
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			} else {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>				lastTs = int64(raw.args[1])
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		case EvFrequency:
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			ticksPerSec = int64(raw.args[0])
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			if ticksPerSec &lt;= 0 {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>				<span class="comment">// The most likely cause for this is tick skew on different CPUs.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>				<span class="comment">// For example, solaris/amd64 seems to have wildly different</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>				<span class="comment">// ticks on different CPUs.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>				err = ErrTimeOrder
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>				return
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		case EvTimerGoroutine:
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>			timerGoids[raw.args[0]] = true
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		case EvStack:
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			if len(raw.args) &lt; 2 {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;EvStack has wrong number of arguments at offset 0x%x: want at least 2, got %v&#34;,
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>					raw.off, len(raw.args))
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>				return
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			size := raw.args[1]
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			if size &gt; 1000 {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;EvStack has bad number of frames at offset 0x%x: %v&#34;,
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>					raw.off, size)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				return
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			want := 2 + 4*size
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>			if ver &lt; 1007 {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				want = 2 + size
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			if uint64(len(raw.args)) != want {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>				err = fmt.Errorf(&#34;EvStack has wrong number of arguments at offset 0x%x: want %v, got %v&#34;,
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>					raw.off, want, len(raw.args))
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>				return
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			id := raw.args[0]
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			if id != 0 &amp;&amp; size &gt; 0 {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				stk := make([]*Frame, size)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>				for i := 0; i &lt; int(size); i++ {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>					if ver &lt; 1007 {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>						stk[i] = &amp;Frame{PC: raw.args[2+i]}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>					} else {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>						pc := raw.args[2+i*4+0]
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>						fn := raw.args[2+i*4+1]
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>						file := raw.args[2+i*4+2]
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>						line := raw.args[2+i*4+3]
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>						stk[i] = &amp;Frame{PC: pc, Fn: strings[fn], File: strings[file], Line: int(line)}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>					}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>				}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>				stacks[id] = stk
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		default:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			e := &amp;Event{Off: raw.off, Type: raw.typ, P: lastP, G: lastG}
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>			var argOffset int
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			if ver &lt; 1007 {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				e.seq = lastSeq + int64(raw.args[0])
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				e.Ts = lastTs + int64(raw.args[1])
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>				lastSeq = e.seq
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>				argOffset = 2
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			} else {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				e.Ts = lastTs + int64(raw.args[0])
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				argOffset = 1
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			lastTs = e.Ts
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			for i := argOffset; i &lt; narg; i++ {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>				if i == narg-1 &amp;&amp; desc.Stack {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>					e.StkID = raw.args[i]
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>				} else {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>					e.Args[i-argOffset] = raw.args[i]
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			switch raw.typ {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			case EvGoStart, EvGoStartLocal, EvGoStartLabel:
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>				lastG = e.Args[0]
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>				e.G = lastG
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>				if raw.typ == EvGoStartLabel {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>					e.SArgs = []string{strings[e.Args[2]]}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>				}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			case EvSTWStart:
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>				e.G = 0
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>				if ver &lt; 1021 {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>					switch e.Args[0] {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>					case 0:
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>						e.SArgs = []string{&#34;mark termination&#34;}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>					case 1:
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>						e.SArgs = []string{&#34;sweep termination&#34;}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>					default:
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>						err = fmt.Errorf(&#34;unknown STW kind %d&#34;, e.Args[0])
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>						return
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>					}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>				} else if ver == 1021 {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>					if kind := e.Args[0]; kind &lt; uint64(len(stwReasonStringsGo121)) {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>						e.SArgs = []string{stwReasonStringsGo121[kind]}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>					} else {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>						e.SArgs = []string{&#34;unknown&#34;}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>					}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>				} else {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>					<span class="comment">// Can&#39;t make any assumptions.</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>					e.SArgs = []string{&#34;unknown&#34;}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>				}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			case EvGCStart, EvGCDone, EvSTWDone:
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>				e.G = 0
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			case EvGoEnd, EvGoStop, EvGoSched, EvGoPreempt,
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>				EvGoSleep, EvGoBlock, EvGoBlockSend, EvGoBlockRecv,
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>				EvGoBlockSelect, EvGoBlockSync, EvGoBlockCond, EvGoBlockNet,
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				EvGoSysBlock, EvGoBlockGC:
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>				lastG = 0
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			case EvGoSysExit, EvGoWaiting, EvGoInSyscall:
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>				e.G = e.Args[0]
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			case EvUserTaskCreate:
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				<span class="comment">// e.Args 0: taskID, 1:parentID, 2:nameID</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>				e.SArgs = []string{strings[e.Args[2]]}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			case EvUserRegion:
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>				<span class="comment">// e.Args 0: taskID, 1: mode, 2:nameID</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>				e.SArgs = []string{strings[e.Args[2]]}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			case EvUserLog:
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				<span class="comment">// e.Args 0: taskID, 1:keyID, 2: stackID</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>				e.SArgs = []string{strings[e.Args[1]], raw.sargs[0]}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			case EvCPUSample:
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>				e.Ts = int64(e.Args[0])
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>				e.P = int(e.Args[1])
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>				e.G = e.Args[2]
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>				e.Args[0] = 0
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			switch raw.typ {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			default:
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>				batches[lastP] = append(batches[lastP], e)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>			case EvCPUSample:
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>				<span class="comment">// Most events are written out by the active P at the exact</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>				<span class="comment">// moment they describe. CPU profile samples are different</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>				<span class="comment">// because they&#39;re written to the tracing log after some delay,</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>				<span class="comment">// by a separate worker goroutine, into a separate buffer.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>				<span class="comment">// We keep these in their own batch until all of the batches are</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>				<span class="comment">// merged in timestamp order. We also (right before the merge)</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>				<span class="comment">// re-sort these events by the timestamp captured in the</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>				<span class="comment">// profiling signal handler.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>				batches[ProfileP] = append(batches[ProfileP], e)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	if len(batches) == 0 {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;trace is empty&#34;)
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		return
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	if ticksPerSec == 0 {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;no EvFrequency event&#34;)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		return
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	if BreakTimestampsForTesting {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		var batchArr [][]*Event
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		for _, batch := range batches {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			batchArr = append(batchArr, batch)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		for i := 0; i &lt; 5; i++ {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			batch := batchArr[rand.Intn(len(batchArr))]
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>			batch[rand.Intn(len(batch))].Ts += int64(rand.Intn(2000) - 1000)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	if ver &lt; 1007 {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		events, err = order1005(batches)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	} else {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		events, err = order1007(batches)
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if err != nil {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		return
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	<span class="comment">// Translate cpu ticks to real time.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	minTs := events[0].Ts
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// Use floating point to avoid integer overflows.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	freq := 1e9 / float64(ticksPerSec)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		ev.Ts = int64(float64(ev.Ts-minTs) * freq)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		<span class="comment">// Move timers and syscalls to separate fake Ps.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		if timerGoids[ev.G] &amp;&amp; ev.Type == EvGoUnblock {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>			ev.P = TimerP
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		if ev.Type == EvGoSysExit {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			ev.P = SyscallP
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span><span class="comment">// removeFutile removes all constituents of futile wakeups (block, unblock, start).</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span><span class="comment">// For example, a goroutine was unblocked on a mutex, but another goroutine got</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// ahead and acquired the mutex before the first goroutine is scheduled,</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// so the first goroutine has to block again. Such wakeups happen on buffered</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// channels and sync.Mutex, but are generally not interesting for end user.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>func removeFutile(events []*Event) []*Event {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	<span class="comment">// Two non-trivial aspects:</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	<span class="comment">// 1. A goroutine can be preempted during a futile wakeup and migrate to another P.</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	<span class="comment">//	We want to remove all of that.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	<span class="comment">// 2. Tracing can start in the middle of a futile wakeup.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">//	That is, we can see a futile wakeup event w/o the actual wakeup before it.</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">// postProcessTrace runs after us and ensures that we leave the trace in a consistent state.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	<span class="comment">// Phase 1: determine futile wakeup sequences.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	type G struct {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		futile bool
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		wakeup []*Event <span class="comment">// wakeup sequence (subject for removal)</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	gs := make(map[uint64]G)
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	futile := make(map[*Event]bool)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		switch ev.Type {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		case EvGoUnblock:
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			g := gs[ev.Args[0]]
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			g.wakeup = []*Event{ev}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			gs[ev.Args[0]] = g
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		case EvGoStart, EvGoPreempt, EvFutileWakeup:
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			g := gs[ev.G]
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>			g.wakeup = append(g.wakeup, ev)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			if ev.Type == EvFutileWakeup {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>				g.futile = true
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			gs[ev.G] = g
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		case EvGoBlock, EvGoBlockSend, EvGoBlockRecv, EvGoBlockSelect, EvGoBlockSync, EvGoBlockCond:
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			g := gs[ev.G]
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			if g.futile {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>				futile[ev] = true
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>				for _, ev1 := range g.wakeup {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>					futile[ev1] = true
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>				}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			delete(gs, ev.G)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// Phase 2: remove futile wakeup sequences.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	newEvents := events[:0] <span class="comment">// overwrite the original slice</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		if !futile[ev] {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			newEvents = append(newEvents, ev)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	return newEvents
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// ErrTimeOrder is returned by Parse when the trace contains</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span><span class="comment">// time stamps that do not respect actual event ordering.</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>var ErrTimeOrder = fmt.Errorf(&#34;time stamps out of order&#34;)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">// postProcessTrace does inter-event verification and information restoration.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">// The resulting trace is guaranteed to be consistent</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// (for example, a P does not run two Gs at the same time, or a G is indeed</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// blocked before an unblock event).</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>func postProcessTrace(ver int, events []*Event) error {
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	const (
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		gDead = iota
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		gRunnable
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		gRunning
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		gWaiting
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	type gdesc struct {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		state        int
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		ev           *Event
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		evStart      *Event
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		evCreate     *Event
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		evMarkAssist *Event
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	type pdesc struct {
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		running bool
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		g       uint64
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		evSTW   *Event
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		evSweep *Event
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	gs := make(map[uint64]gdesc)
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	ps := make(map[int]pdesc)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	tasks := make(map[uint64]*Event)           <span class="comment">// task id to task creation events</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	activeRegions := make(map[uint64][]*Event) <span class="comment">// goroutine id to stack of regions</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	gs[0] = gdesc{state: gRunning}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	var evGC, evSTW *Event
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	checkRunning := func(p pdesc, g gdesc, ev *Event, allowG0 bool) error {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		name := EventDescriptions[ev.Type].Name
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		if g.state != gRunning {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;g %v is not running while %v (offset %v, time %v)&#34;, ev.G, name, ev.Off, ev.Ts)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		if p.g != ev.G {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;p %v is not running g %v while %v (offset %v, time %v)&#34;, ev.P, ev.G, name, ev.Off, ev.Ts)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		if !allowG0 &amp;&amp; ev.G == 0 {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;g 0 did %v (offset %v, time %v)&#34;, EventDescriptions[ev.Type].Name, ev.Off, ev.Ts)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		return nil
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		g := gs[ev.G]
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		p := ps[ev.P]
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		switch ev.Type {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		case EvProcStart:
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			if p.running {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;p %v is running before start (offset %v, time %v)&#34;, ev.P, ev.Off, ev.Ts)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>			p.running = true
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		case EvProcStop:
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			if !p.running {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;p %v is not running before stop (offset %v, time %v)&#34;, ev.P, ev.Off, ev.Ts)
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			if p.g != 0 {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;p %v is running a goroutine %v during stop (offset %v, time %v)&#34;, ev.P, p.g, ev.Off, ev.Ts)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			p.running = false
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		case EvGCStart:
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			if evGC != nil {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;previous GC is not ended before a new one (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>			evGC = ev
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>			<span class="comment">// Attribute this to the global GC state.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			ev.P = GCP
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		case EvGCDone:
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			if evGC == nil {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;bogus GC end (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>			}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			evGC.Link = ev
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			evGC = nil
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		case EvSTWStart:
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			evp := &amp;evSTW
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			if ver &lt; 1010 {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>				<span class="comment">// Before 1.10, EvSTWStart was per-P.</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>				evp = &amp;p.evSTW
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			}
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			if *evp != nil {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;previous STW is not ended before a new one (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			}
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			*evp = ev
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		case EvSTWDone:
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			evp := &amp;evSTW
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			if ver &lt; 1010 {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				<span class="comment">// Before 1.10, EvSTWDone was per-P.</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>				evp = &amp;p.evSTW
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			if *evp == nil {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;bogus STW end (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			(*evp).Link = ev
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			*evp = nil
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		case EvGCSweepStart:
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			if p.evSweep != nil {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;previous sweeping is not ended before a new one (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>			}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			p.evSweep = ev
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		case EvGCMarkAssistStart:
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			if g.evMarkAssist != nil {
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;previous mark assist is not ended before a new one (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>			g.evMarkAssist = ev
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		case EvGCMarkAssistDone:
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>			<span class="comment">// Unlike most events, mark assists can be in progress when a</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			<span class="comment">// goroutine starts tracing, so we can&#39;t report an error here.</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			if g.evMarkAssist != nil {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>				g.evMarkAssist.Link = ev
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>				g.evMarkAssist = nil
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		case EvGCSweepDone:
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			if p.evSweep == nil {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;bogus sweeping end (offset %v, time %v)&#34;, ev.Off, ev.Ts)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			}
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			p.evSweep.Link = ev
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			p.evSweep = nil
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		case EvGoWaiting:
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>			if g.state != gRunnable {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not runnable before EvGoWaiting (offset %v, time %v)&#34;, ev.G, ev.Off, ev.Ts)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>			}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			g.state = gWaiting
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			g.ev = ev
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		case EvGoInSyscall:
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			if g.state != gRunnable {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not runnable before EvGoInSyscall (offset %v, time %v)&#34;, ev.G, ev.Off, ev.Ts)
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			g.state = gWaiting
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			g.ev = ev
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		case EvGoCreate:
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, true); err != nil {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>				return err
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			if _, ok := gs[ev.Args[0]]; ok {
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v already exists (offset %v, time %v)&#34;, ev.Args[0], ev.Off, ev.Ts)
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>			}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			gs[ev.Args[0]] = gdesc{state: gRunnable, ev: ev, evCreate: ev}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		case EvGoStart, EvGoStartLabel:
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			if g.state != gRunnable {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not runnable before start (offset %v, time %v)&#34;, ev.G, ev.Off, ev.Ts)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			}
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			if p.g != 0 {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;p %v is already running g %v while start g %v (offset %v, time %v)&#34;, ev.P, p.g, ev.G, ev.Off, ev.Ts)
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>			}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>			g.state = gRunning
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>			g.evStart = ev
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>			p.g = ev.G
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>			if g.evCreate != nil {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>				if ver &lt; 1007 {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>					<span class="comment">// +1 because symbolizer expects return pc.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>					ev.Stk = []*Frame{{PC: g.evCreate.Args[1] + 1}}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>				} else {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>					ev.StkID = g.evCreate.Args[1]
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>				}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>				g.evCreate = nil
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			}
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>			if g.ev != nil {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>				g.ev.Link = ev
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>				g.ev = nil
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		case EvGoEnd, EvGoStop:
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, false); err != nil {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>				return err
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>			}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			g.evStart.Link = ev
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>			g.evStart = nil
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>			g.state = gDead
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>			p.g = 0
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			if ev.Type == EvGoEnd { <span class="comment">// flush all active regions</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>				regions := activeRegions[ev.G]
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>				for _, s := range regions {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>					s.Link = ev
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>				}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>				delete(activeRegions, ev.G)
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		case EvGoSched, EvGoPreempt:
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, false); err != nil {
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>				return err
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>			}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			g.state = gRunnable
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			g.evStart.Link = ev
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			g.evStart = nil
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			p.g = 0
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			g.ev = ev
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		case EvGoUnblock:
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>			if g.state != gRunning {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not running while unpark (offset %v, time %v)&#34;, ev.G, ev.Off, ev.Ts)
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>			}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			if ev.P != TimerP &amp;&amp; p.g != ev.G {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;p %v is not running g %v while unpark (offset %v, time %v)&#34;, ev.P, ev.G, ev.Off, ev.Ts)
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>			}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			g1 := gs[ev.Args[0]]
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			if g1.state != gWaiting {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not waiting before unpark (offset %v, time %v)&#34;, ev.Args[0], ev.Off, ev.Ts)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>			}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			if g1.ev != nil &amp;&amp; g1.ev.Type == EvGoBlockNet &amp;&amp; ev.P != TimerP {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>				ev.P = NetpollP
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			if g1.ev != nil {
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>				g1.ev.Link = ev
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			g1.state = gRunnable
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>			g1.ev = ev
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>			gs[ev.Args[0]] = g1
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		case EvGoSysCall:
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, false); err != nil {
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>				return err
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			g.ev = ev
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		case EvGoSysBlock:
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, false); err != nil {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>				return err
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>			}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>			g.state = gWaiting
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>			g.evStart.Link = ev
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>			g.evStart = nil
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>			p.g = 0
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		case EvGoSysExit:
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>			if g.state != gWaiting {
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;g %v is not waiting during syscall exit (offset %v, time %v)&#34;, ev.G, ev.Off, ev.Ts)
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>			}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>			if g.ev != nil &amp;&amp; g.ev.Type == EvGoSysCall {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>				g.ev.Link = ev
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>			g.state = gRunnable
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>			g.ev = ev
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		case EvGoSleep, EvGoBlock, EvGoBlockSend, EvGoBlockRecv,
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>			EvGoBlockSelect, EvGoBlockSync, EvGoBlockCond, EvGoBlockNet, EvGoBlockGC:
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>			if err := checkRunning(p, g, ev, false); err != nil {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>				return err
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>			}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>			g.state = gWaiting
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>			g.ev = ev
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>			g.evStart.Link = ev
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>			g.evStart = nil
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>			p.g = 0
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		case EvUserTaskCreate:
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>			taskid := ev.Args[0]
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>			if prevEv, ok := tasks[taskid]; ok {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;task id conflicts (id:%d), %q vs %q&#34;, taskid, ev, prevEv)
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>			}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>			tasks[ev.Args[0]] = ev
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		case EvUserTaskEnd:
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>			taskid := ev.Args[0]
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>			if taskCreateEv, ok := tasks[taskid]; ok {
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>				taskCreateEv.Link = ev
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>				delete(tasks, taskid)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>			}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		case EvUserRegion:
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			mode := ev.Args[1]
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			regions := activeRegions[ev.G]
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>			if mode == 0 { <span class="comment">// region start</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>				activeRegions[ev.G] = append(regions, ev) <span class="comment">// push</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>			} else if mode == 1 { <span class="comment">// region end</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>				n := len(regions)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>				if n &gt; 0 { <span class="comment">// matching region start event is in the trace.</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>					s := regions[n-1]
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>					if s.Args[0] != ev.Args[0] || s.SArgs[0] != ev.SArgs[0] { <span class="comment">// task id, region name mismatch</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>						return fmt.Errorf(&#34;misuse of region in goroutine %d: span end %q when the inner-most active span start event is %q&#34;, ev.G, ev, s)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>					}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>					<span class="comment">// Link region start event with span end event</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>					s.Link = ev
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>					if n &gt; 1 {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>						activeRegions[ev.G] = regions[:n-1]
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>					} else {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>						delete(activeRegions, ev.G)
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>					}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>				}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>			} else {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;invalid user region mode: %q&#34;, ev)
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>			}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>		}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		gs[ev.G] = g
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>		ps[ev.P] = p
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	}
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	<span class="comment">// TODO(dvyukov): restore stacks for EvGoStart events.</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	<span class="comment">// TODO(dvyukov): test that all EvGoStart events has non-nil Link.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	return nil
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>}
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">// symbolize attaches func/file/line info to stack traces.</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>func symbolize(events []*Event, bin string) error {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	<span class="comment">// First, collect and dedup all pcs.</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	pcs := make(map[uint64]*Frame)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		for _, f := range ev.Stk {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>			pcs[f.PC] = nil
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	}
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>	<span class="comment">// Start addr2line.</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	cmd := exec.Command(goCmd(), &#34;tool&#34;, &#34;addr2line&#34;, bin)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	in, err := cmd.StdinPipe()
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	if err != nil {
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;failed to pipe addr2line stdin: %v&#34;, err)
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	cmd.Stderr = os.Stderr
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	out, err := cmd.StdoutPipe()
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>	if err != nil {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;failed to pipe addr2line stdout: %v&#34;, err)
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	}
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	err = cmd.Start()
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	if err != nil {
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;failed to start addr2line: %v&#34;, err)
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	}
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	outb := bufio.NewReader(out)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	<span class="comment">// Write all pcs to addr2line.</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	<span class="comment">// Need to copy pcs to an array, because map iteration order is non-deterministic.</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	var pcArray []uint64
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	for pc := range pcs {
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		pcArray = append(pcArray, pc)
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		_, err := fmt.Fprintf(in, &#34;0x%x\n&#34;, pc-1)
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		if err != nil {
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;failed to write to addr2line: %v&#34;, err)
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		}
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	in.Close()
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	<span class="comment">// Read in answers.</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	for _, pc := range pcArray {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		fn, err := outb.ReadString(&#39;\n&#39;)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		if err != nil {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;failed to read from addr2line: %v&#34;, err)
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		file, err := outb.ReadString(&#39;\n&#39;)
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		if err != nil {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;failed to read from addr2line: %v&#34;, err)
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		}
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>		f := &amp;Frame{PC: pc}
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		f.Fn = fn[:len(fn)-1]
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		f.File = file[:len(file)-1]
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>		if colon := strings.LastIndex(f.File, &#34;:&#34;); colon != -1 {
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			ln, err := strconv.Atoi(f.File[colon+1:])
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			if err == nil {
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>				f.File = f.File[:colon]
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>				f.Line = ln
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>			}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		pcs[pc] = f
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	cmd.Wait()
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	<span class="comment">// Replace frames in events array.</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>		for i, f := range ev.Stk {
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>			ev.Stk[i] = pcs[f.PC]
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		}
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	return nil
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>}
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span><span class="comment">// readVal reads unsigned base-128 value from r.</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>func readVal(r io.Reader, off0 int) (v uint64, off int, err error) {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	off = off0
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	for i := 0; i &lt; 10; i++ {
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		var buf [1]byte
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		var n int
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		n, err = r.Read(buf[:])
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		if err != nil || n != 1 {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			return 0, 0, fmt.Errorf(&#34;failed to read trace at offset %d: read %v, error %v&#34;, off0, n, err)
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>		}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		off++
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		v |= uint64(buf[0]&amp;0x7f) &lt;&lt; (uint(i) * 7)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		if buf[0]&amp;0x80 == 0 {
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			return
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	}
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	return 0, 0, fmt.Errorf(&#34;bad value at offset 0x%x&#34;, off0)
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>}
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span><span class="comment">// Print dumps events to stdout. For debugging.</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>func Print(events []*Event) {
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	for _, ev := range events {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>		PrintEvent(ev)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	}
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span><span class="comment">// PrintEvent dumps the event to stdout. For debugging.</span>
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>func PrintEvent(ev *Event) {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	fmt.Printf(&#34;%s\n&#34;, ev)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span><span class="selection">func (ev *Event) String() string</span> {
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	desc := EventDescriptions[ev.Type]
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	w := new(strings.Builder)
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	fmt.Fprintf(w, &#34;%v %v p=%v g=%v off=%v&#34;, ev.Ts, desc.Name, ev.P, ev.G, ev.Off)
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	for i, a := range desc.Args {
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		fmt.Fprintf(w, &#34; %v=%v&#34;, a, ev.Args[i])
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	for i, a := range desc.SArgs {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		fmt.Fprintf(w, &#34; %v=%v&#34;, a, ev.SArgs[i])
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	}
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return w.String()
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span><span class="comment">// argNum returns total number of args for the event accounting for timestamps,</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">// sequence numbers and differences between trace format versions.</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>func argNum(raw rawEvent, ver int) int {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	desc := EventDescriptions[raw.typ]
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	if raw.typ == EvStack {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		return len(raw.args)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	narg := len(desc.Args)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	if desc.Stack {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		narg++
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	switch raw.typ {
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	case EvBatch, EvFrequency, EvTimerGoroutine:
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		if ver &lt; 1007 {
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>			narg++ <span class="comment">// there was an unused arg before 1.7</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		return narg
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	}
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	narg++ <span class="comment">// timestamp</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	if ver &lt; 1007 {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		narg++ <span class="comment">// sequence</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	switch raw.typ {
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	case EvGCSweepDone:
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		if ver &lt; 1009 {
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>			narg -= 2 <span class="comment">// 1.9 added two arguments</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		}
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	case EvGCStart, EvGoStart, EvGoUnblock:
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		if ver &lt; 1007 {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>			narg-- <span class="comment">// 1.7 added an additional seq arg</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		}
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	case EvSTWStart:
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>		if ver &lt; 1010 {
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>			narg-- <span class="comment">// 1.10 added an argument</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		}
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	return narg
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// BreakTimestampsForTesting causes the parser to randomly alter timestamps (for testing of broken cputicks).</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>var BreakTimestampsForTesting bool
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="comment">// Event types in the trace.</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span><span class="comment">// Verbatim copy from src/runtime/trace.go with the &#34;trace&#34; prefix removed.</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>const (
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	EvNone              = 0  <span class="comment">// unused</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	EvBatch             = 1  <span class="comment">// start of per-P batch of events [pid, timestamp]</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	EvFrequency         = 2  <span class="comment">// contains tracer timer frequency [frequency (ticks per second)]</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	EvStack             = 3  <span class="comment">// stack [stack id, number of PCs, array of {PC, func string ID, file string ID, line}]</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	EvGomaxprocs        = 4  <span class="comment">// current value of GOMAXPROCS [timestamp, GOMAXPROCS, stack id]</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	EvProcStart         = 5  <span class="comment">// start of P [timestamp, thread id]</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	EvProcStop          = 6  <span class="comment">// stop of P [timestamp]</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	EvGCStart           = 7  <span class="comment">// GC start [timestamp, seq, stack id]</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	EvGCDone            = 8  <span class="comment">// GC done [timestamp]</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	EvSTWStart          = 9  <span class="comment">// GC mark termination start [timestamp, kind]</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	EvSTWDone           = 10 <span class="comment">// GC mark termination done [timestamp]</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	EvGCSweepStart      = 11 <span class="comment">// GC sweep start [timestamp, stack id]</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	EvGCSweepDone       = 12 <span class="comment">// GC sweep done [timestamp, swept, reclaimed]</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>	EvGoCreate          = 13 <span class="comment">// goroutine creation [timestamp, new goroutine id, new stack id, stack id]</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	EvGoStart           = 14 <span class="comment">// goroutine starts running [timestamp, goroutine id, seq]</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>	EvGoEnd             = 15 <span class="comment">// goroutine ends [timestamp]</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	EvGoStop            = 16 <span class="comment">// goroutine stops (like in select{}) [timestamp, stack]</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	EvGoSched           = 17 <span class="comment">// goroutine calls Gosched [timestamp, stack]</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	EvGoPreempt         = 18 <span class="comment">// goroutine is preempted [timestamp, stack]</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	EvGoSleep           = 19 <span class="comment">// goroutine calls Sleep [timestamp, stack]</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	EvGoBlock           = 20 <span class="comment">// goroutine blocks [timestamp, stack]</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	EvGoUnblock         = 21 <span class="comment">// goroutine is unblocked [timestamp, goroutine id, seq, stack]</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	EvGoBlockSend       = 22 <span class="comment">// goroutine blocks on chan send [timestamp, stack]</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	EvGoBlockRecv       = 23 <span class="comment">// goroutine blocks on chan recv [timestamp, stack]</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	EvGoBlockSelect     = 24 <span class="comment">// goroutine blocks on select [timestamp, stack]</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	EvGoBlockSync       = 25 <span class="comment">// goroutine blocks on Mutex/RWMutex [timestamp, stack]</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	EvGoBlockCond       = 26 <span class="comment">// goroutine blocks on Cond [timestamp, stack]</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	EvGoBlockNet        = 27 <span class="comment">// goroutine blocks on network [timestamp, stack]</span>
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	EvGoSysCall         = 28 <span class="comment">// syscall enter [timestamp, stack]</span>
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	EvGoSysExit         = 29 <span class="comment">// syscall exit [timestamp, goroutine id, seq, real timestamp]</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>	EvGoSysBlock        = 30 <span class="comment">// syscall blocks [timestamp]</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	EvGoWaiting         = 31 <span class="comment">// denotes that goroutine is blocked when tracing starts [timestamp, goroutine id]</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	EvGoInSyscall       = 32 <span class="comment">// denotes that goroutine is in syscall when tracing starts [timestamp, goroutine id]</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	EvHeapAlloc         = 33 <span class="comment">// gcController.heapLive change [timestamp, heap live bytes]</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	EvHeapGoal          = 34 <span class="comment">// gcController.heapGoal change [timestamp, heap goal bytes]</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	EvTimerGoroutine    = 35 <span class="comment">// denotes timer goroutine [timer goroutine id]</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	EvFutileWakeup      = 36 <span class="comment">// denotes that the previous wakeup of this goroutine was futile [timestamp]</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	EvString            = 37 <span class="comment">// string dictionary entry [ID, length, string]</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	EvGoStartLocal      = 38 <span class="comment">// goroutine starts running on the same P as the last event [timestamp, goroutine id]</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	EvGoUnblockLocal    = 39 <span class="comment">// goroutine is unblocked on the same P as the last event [timestamp, goroutine id, stack]</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	EvGoSysExitLocal    = 40 <span class="comment">// syscall exit on the same P as the last event [timestamp, goroutine id, real timestamp]</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	EvGoStartLabel      = 41 <span class="comment">// goroutine starts running with label [timestamp, goroutine id, seq, label string id]</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	EvGoBlockGC         = 42 <span class="comment">// goroutine blocks on GC assist [timestamp, stack]</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	EvGCMarkAssistStart = 43 <span class="comment">// GC mark assist start [timestamp, stack]</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	EvGCMarkAssistDone  = 44 <span class="comment">// GC mark assist done [timestamp]</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	EvUserTaskCreate    = 45 <span class="comment">// trace.NewTask [timestamp, internal task id, internal parent id, name string, stack]</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	EvUserTaskEnd       = 46 <span class="comment">// end of task [timestamp, internal task id, stack]</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	EvUserRegion        = 47 <span class="comment">// trace.WithRegion [timestamp, internal task id, mode(0:start, 1:end), name string, stack]</span>
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	EvUserLog           = 48 <span class="comment">// trace.Log [timestamp, internal id, key string id, stack, value string]</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	EvCPUSample         = 49 <span class="comment">// CPU profiling sample [timestamp, real timestamp, real P id (-1 when absent), goroutine id, stack]</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	EvCount             = 50
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>)
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>var EventDescriptions = [EvCount]struct {
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	Name       string
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	minVersion int
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	Stack      bool
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	Args       []string
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	SArgs      []string <span class="comment">// string arguments</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>}{
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	EvNone:              {&#34;None&#34;, 1005, false, []string{}, nil},
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	EvBatch:             {&#34;Batch&#34;, 1005, false, []string{&#34;p&#34;, &#34;ticks&#34;}, nil}, <span class="comment">// in 1.5 format it was {&#34;p&#34;, &#34;seq&#34;, &#34;ticks&#34;}</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	EvFrequency:         {&#34;Frequency&#34;, 1005, false, []string{&#34;freq&#34;}, nil},   <span class="comment">// in 1.5 format it was {&#34;freq&#34;, &#34;unused&#34;}</span>
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	EvStack:             {&#34;Stack&#34;, 1005, false, []string{&#34;id&#34;, &#34;siz&#34;}, nil},
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	EvGomaxprocs:        {&#34;Gomaxprocs&#34;, 1005, true, []string{&#34;procs&#34;}, nil},
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	EvProcStart:         {&#34;ProcStart&#34;, 1005, false, []string{&#34;thread&#34;}, nil},
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	EvProcStop:          {&#34;ProcStop&#34;, 1005, false, []string{}, nil},
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	EvGCStart:           {&#34;GCStart&#34;, 1005, true, []string{&#34;seq&#34;}, nil}, <span class="comment">// in 1.5 format it was {}</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	EvGCDone:            {&#34;GCDone&#34;, 1005, false, []string{}, nil},
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	EvSTWStart:          {&#34;STWStart&#34;, 1005, false, []string{&#34;kindid&#34;}, []string{&#34;kind&#34;}}, <span class="comment">// &lt;= 1.9, args was {} (implicitly {0})</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	EvSTWDone:           {&#34;STWDone&#34;, 1005, false, []string{}, nil},
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	EvGCSweepStart:      {&#34;GCSweepStart&#34;, 1005, true, []string{}, nil},
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	EvGCSweepDone:       {&#34;GCSweepDone&#34;, 1005, false, []string{&#34;swept&#34;, &#34;reclaimed&#34;}, nil}, <span class="comment">// before 1.9, format was {}</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	EvGoCreate:          {&#34;GoCreate&#34;, 1005, true, []string{&#34;g&#34;, &#34;stack&#34;}, nil},
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	EvGoStart:           {&#34;GoStart&#34;, 1005, false, []string{&#34;g&#34;, &#34;seq&#34;}, nil}, <span class="comment">// in 1.5 format it was {&#34;g&#34;}</span>
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>	EvGoEnd:             {&#34;GoEnd&#34;, 1005, false, []string{}, nil},
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	EvGoStop:            {&#34;GoStop&#34;, 1005, true, []string{}, nil},
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	EvGoSched:           {&#34;GoSched&#34;, 1005, true, []string{}, nil},
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>	EvGoPreempt:         {&#34;GoPreempt&#34;, 1005, true, []string{}, nil},
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	EvGoSleep:           {&#34;GoSleep&#34;, 1005, true, []string{}, nil},
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	EvGoBlock:           {&#34;GoBlock&#34;, 1005, true, []string{}, nil},
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>	EvGoUnblock:         {&#34;GoUnblock&#34;, 1005, true, []string{&#34;g&#34;, &#34;seq&#34;}, nil}, <span class="comment">// in 1.5 format it was {&#34;g&#34;}</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	EvGoBlockSend:       {&#34;GoBlockSend&#34;, 1005, true, []string{}, nil},
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	EvGoBlockRecv:       {&#34;GoBlockRecv&#34;, 1005, true, []string{}, nil},
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	EvGoBlockSelect:     {&#34;GoBlockSelect&#34;, 1005, true, []string{}, nil},
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	EvGoBlockSync:       {&#34;GoBlockSync&#34;, 1005, true, []string{}, nil},
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	EvGoBlockCond:       {&#34;GoBlockCond&#34;, 1005, true, []string{}, nil},
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	EvGoBlockNet:        {&#34;GoBlockNet&#34;, 1005, true, []string{}, nil},
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	EvGoSysCall:         {&#34;GoSysCall&#34;, 1005, true, []string{}, nil},
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	EvGoSysExit:         {&#34;GoSysExit&#34;, 1005, false, []string{&#34;g&#34;, &#34;seq&#34;, &#34;ts&#34;}, nil},
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	EvGoSysBlock:        {&#34;GoSysBlock&#34;, 1005, false, []string{}, nil},
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	EvGoWaiting:         {&#34;GoWaiting&#34;, 1005, false, []string{&#34;g&#34;}, nil},
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	EvGoInSyscall:       {&#34;GoInSyscall&#34;, 1005, false, []string{&#34;g&#34;}, nil},
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	EvHeapAlloc:         {&#34;HeapAlloc&#34;, 1005, false, []string{&#34;mem&#34;}, nil},
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	EvHeapGoal:          {&#34;HeapGoal&#34;, 1005, false, []string{&#34;mem&#34;}, nil},
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	EvTimerGoroutine:    {&#34;TimerGoroutine&#34;, 1005, false, []string{&#34;g&#34;}, nil}, <span class="comment">// in 1.5 format it was {&#34;g&#34;, &#34;unused&#34;}</span>
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	EvFutileWakeup:      {&#34;FutileWakeup&#34;, 1005, false, []string{}, nil},
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	EvString:            {&#34;String&#34;, 1007, false, []string{}, nil},
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	EvGoStartLocal:      {&#34;GoStartLocal&#34;, 1007, false, []string{&#34;g&#34;}, nil},
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	EvGoUnblockLocal:    {&#34;GoUnblockLocal&#34;, 1007, true, []string{&#34;g&#34;}, nil},
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	EvGoSysExitLocal:    {&#34;GoSysExitLocal&#34;, 1007, false, []string{&#34;g&#34;, &#34;ts&#34;}, nil},
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	EvGoStartLabel:      {&#34;GoStartLabel&#34;, 1008, false, []string{&#34;g&#34;, &#34;seq&#34;, &#34;labelid&#34;}, []string{&#34;label&#34;}},
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	EvGoBlockGC:         {&#34;GoBlockGC&#34;, 1008, true, []string{}, nil},
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	EvGCMarkAssistStart: {&#34;GCMarkAssistStart&#34;, 1009, true, []string{}, nil},
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	EvGCMarkAssistDone:  {&#34;GCMarkAssistDone&#34;, 1009, false, []string{}, nil},
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	EvUserTaskCreate:    {&#34;UserTaskCreate&#34;, 1011, true, []string{&#34;taskid&#34;, &#34;pid&#34;, &#34;typeid&#34;}, []string{&#34;name&#34;}},
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	EvUserTaskEnd:       {&#34;UserTaskEnd&#34;, 1011, true, []string{&#34;taskid&#34;}, nil},
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>	EvUserRegion:        {&#34;UserRegion&#34;, 1011, true, []string{&#34;taskid&#34;, &#34;mode&#34;, &#34;typeid&#34;}, []string{&#34;name&#34;}},
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>	EvUserLog:           {&#34;UserLog&#34;, 1011, true, []string{&#34;id&#34;, &#34;keyid&#34;}, []string{&#34;category&#34;, &#34;message&#34;}},
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	EvCPUSample:         {&#34;CPUSample&#34;, 1019, true, []string{&#34;ts&#34;, &#34;p&#34;, &#34;g&#34;}, nil},
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>}
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span><span class="comment">// Copied from src/runtime/proc.go:stwReasonStrings in Go 1.21.</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>var stwReasonStringsGo121 = [...]string{
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>	&#34;unknown&#34;,
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>	&#34;GC mark termination&#34;,
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	&#34;GC sweep termination&#34;,
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>	&#34;write heap dump&#34;,
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>	&#34;goroutine profile&#34;,
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	&#34;goroutine profile cleanup&#34;,
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>	&#34;all goroutines stack trace&#34;,
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>	&#34;read mem stats&#34;,
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>	&#34;AllThreadsSyscall&#34;,
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>	&#34;GOMAXPROCS&#34;,
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>	&#34;start trace&#34;,
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>	&#34;stop trace&#34;,
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	&#34;CountPagesInUse (test)&#34;,
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	&#34;ReadMetricsSlow (test)&#34;,
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	&#34;ReadMemStatsSlow (test)&#34;,
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	&#34;PageCachePagesLeaked (test)&#34;,
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	&#34;ResetDebugLog (test)&#34;,
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>}
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>
</pre><p><a href="parser.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
