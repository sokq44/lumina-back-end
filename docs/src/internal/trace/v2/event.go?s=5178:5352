<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/internal/trace/v2/event.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./event.go?s=5178:5352#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/internal">internal</a>/<a href="http://localhost:8080/src/internal/trace">trace</a>/<a href="http://localhost:8080/src/internal/trace/v2">v2</a>/<span class="text-muted">event.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/internal/trace/v2">internal/trace/v2</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package trace
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;internal/trace/v2/event&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;internal/trace/v2/event/go122&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;internal/trace/v2/version&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// EventKind indicates the kind of event this is.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Use this information to obtain a more specific event that</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// allows access to more detailed information.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>type EventKind uint16
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>const (
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	EventBad EventKind = iota
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// EventKindSync is an event that indicates a global synchronization</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	<span class="comment">// point in the trace. At the point of a sync event, the</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	<span class="comment">// trace reader can be certain that all resources (e.g. threads,</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// goroutines) that have existed until that point have been enumerated.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	EventSync
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// EventMetric is an event that represents the value of a metric at</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// a particular point in time.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	EventMetric
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// EventLabel attaches a label to a resource.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	EventLabel
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// EventStackSample represents an execution sample, indicating what a</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// thread/proc/goroutine was doing at a particular point in time via</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// its backtrace.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// Note: Samples should be considered a close approximation of</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// what a thread/proc/goroutine was executing at a given point in time.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// These events may slightly contradict the situation StateTransitions</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// describe, so they should only be treated as a best-effort annotation.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	EventStackSample
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// EventRangeBegin and EventRangeEnd are a pair of generic events representing</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// a special range of time. Ranges are named and scoped to some resource</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// (identified via ResourceKind). A range that has begun but has not ended</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// is considered active.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// EvRangeBegin and EvRangeEnd will share the same name, and an End will always</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// follow a Begin on the same instance of the resource. The associated</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// resource ID can be obtained from the Event. ResourceNone indicates the</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// range is globally scoped. That is, any goroutine/proc/thread can start or</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// stop, but only one such range may be active at any given time.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// EventRangeActive is like EventRangeBegin, but indicates that the range was</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// already active. In this case, the resource referenced may not be in the current</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// context.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	EventRangeBegin
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	EventRangeActive
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	EventRangeEnd
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// EvTaskBegin and EvTaskEnd are a pair of events representing a runtime/trace.Task.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	EventTaskBegin
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	EventTaskEnd
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// EventRegionBegin and EventRegionEnd are a pair of events represent a runtime/trace.Region.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	EventRegionBegin
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	EventRegionEnd
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// EventLog represents a runtime/trace.Log call.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	EventLog
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// Transitions in state for some resource.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	EventStateTransition
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// String returns a string form of the EventKind.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func (e EventKind) String() string {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	if int(e) &gt;= len(eventKindStrings) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		return eventKindStrings[0]
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	return eventKindStrings[e]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>var eventKindStrings = [...]string{
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	EventBad:             &#34;Bad&#34;,
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	EventSync:            &#34;Sync&#34;,
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	EventMetric:          &#34;Metric&#34;,
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	EventLabel:           &#34;Label&#34;,
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	EventStackSample:     &#34;StackSample&#34;,
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	EventRangeBegin:      &#34;RangeBegin&#34;,
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	EventRangeActive:     &#34;RangeActive&#34;,
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	EventRangeEnd:        &#34;RangeEnd&#34;,
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	EventTaskBegin:       &#34;TaskBegin&#34;,
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	EventTaskEnd:         &#34;TaskEnd&#34;,
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	EventRegionBegin:     &#34;RegionBegin&#34;,
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	EventRegionEnd:       &#34;RegionEnd&#34;,
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	EventLog:             &#34;Log&#34;,
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	EventStateTransition: &#34;StateTransition&#34;,
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>const maxTime = Time(math.MaxInt64)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// Time is a timestamp in nanoseconds.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// It corresponds to the monotonic clock on the platform that the</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// trace was taken, and so is possible to correlate with timestamps</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// for other traces taken on the same machine using the same clock</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// (i.e. no reboots in between).</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// The actual absolute value of the timestamp is only meaningful in</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// relation to other timestamps from the same clock.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// BUG: Timestamps coming from traces on Windows platforms are</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// only comparable with timestamps from the same trace. Timestamps</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// across traces cannot be compared, because the system clock is</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// not used as of Go 1.22.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// BUG: Traces produced by Go versions 1.21 and earlier cannot be</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// compared with timestamps from other traces taken on the same</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// machine. This is because the system clock was not used at all</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// to collect those timestamps.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>type Time int64
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// Sub subtracts t0 from t, returning the duration in nanoseconds.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>func (t Time) Sub(t0 Time) time.Duration {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return time.Duration(int64(t) - int64(t0))
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// Metric provides details about a Metric event.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>type Metric struct {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// Name is the name of the sampled metric.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// Names follow the same convention as metric names in the</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// runtime/metrics package, meaning they include the unit.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// Names that match with the runtime/metrics package represent</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// the same quantity. Note that this corresponds to the</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// runtime/metrics package for the Go version this trace was</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// collected for.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	Name string
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// Value is the sampled value of the metric.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// The Value&#39;s Kind is tied to the name of the metric, and so is</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// guaranteed to be the same for metric samples for the same metric.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	Value Value
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// Label provides details about a Label event.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="selection">type Label struct {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Label is the label applied to some resource.</span><span class="selection">
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	Label string
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Resource is the resource to which this label should be applied.</span><span class="selection">
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	Resource ResourceID
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// Range provides details about a Range event.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>type Range struct {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// Name is a human-readable name for the range.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// This name can be used to identify the end of the range for the resource</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// its scoped to, because only one of each type of range may be active on</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// a particular resource. The relevant resource should be obtained from the</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// Event that produced these details. The corresponding RangeEnd will have</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// an identical name.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	Name string
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// Scope is the resource that the range is scoped to.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// For example, a ResourceGoroutine scope means that the same goroutine</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// must have a start and end for the range, and that goroutine can only</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// have one range of a particular name active at any given time. The</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// ID that this range is scoped to may be obtained via Event.Goroutine.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">// The ResourceNone scope means that the range is globally scoped. As a</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// result, any goroutine/proc/thread may start or end the range, and only</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// one such named range may be active globally at any given time.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// For RangeBegin and RangeEnd events, this will always reference some</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// resource ID in the current execution context. For RangeActive events,</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// this may reference a resource not in the current context. Prefer Scope</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// over the current execution context.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	Scope ResourceID
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// RangeAttributes provides attributes about a completed Range.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>type RangeAttribute struct {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// Name is the human-readable name for the range.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	Name string
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Value is the value of the attribute.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	Value Value
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// TaskID is the internal ID of a task used to disambiguate tasks (even if they</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// are of the same type).</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>type TaskID uint64
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>const (
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// NoTask indicates the lack of a task.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	NoTask = TaskID(^uint64(0))
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// BackgroundTask is the global task that events are attached to if there was</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// no other task in the context at the point the event was emitted.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	BackgroundTask = TaskID(0)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// Task provides details about a Task event.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>type Task struct {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// ID is a unique identifier for the task.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// This can be used to associate the beginning of a task with its end.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	ID TaskID
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">// ParentID is the ID of the parent task.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	Parent TaskID
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// Type is the taskType that was passed to runtime/trace.NewTask.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// May be &#34;&#34; if a task&#39;s TaskBegin event isn&#39;t present in the trace.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	Type string
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// Region provides details about a Region event.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>type Region struct {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// Task is the ID of the task this region is associated with.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	Task TaskID
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// Type is the regionType that was passed to runtime/trace.StartRegion or runtime/trace.WithRegion.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	Type string
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// Log provides details about a Log event.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>type Log struct {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">// Task is the ID of the task this region is associated with.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	Task TaskID
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// Category is the category that was passed to runtime/trace.Log or runtime/trace.Logf.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	Category string
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// Message is the message that was passed to runtime/trace.Log or runtime/trace.Logf.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	Message string
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// Stack represents a stack. It&#39;s really a handle to a stack and it&#39;s trivially comparable.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// If two Stacks are equal then their Frames are guaranteed to be identical. If they are not</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// equal, however, their Frames may still be equal.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>type Stack struct {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	table *evTable
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	id    stackID
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// Frames is an iterator over the frames in a Stack.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func (s Stack) Frames(yield func(f StackFrame) bool) bool {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if s.id == 0 {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		return true
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	stk := s.table.stacks.mustGet(s.id)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	for _, f := range stk.frames {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		sf := StackFrame{
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			PC:   f.pc,
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>			Func: s.table.strings.mustGet(f.funcID),
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			File: s.table.strings.mustGet(f.fileID),
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			Line: f.line,
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		if !yield(sf) {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			return false
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return true
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// NoStack is a sentinel value that can be compared against any Stack value, indicating</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// a lack of a stack trace.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>var NoStack = Stack{}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// StackFrame represents a single frame of a stack.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>type StackFrame struct {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// PC is the program counter of the function call if this</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// is not a leaf frame. If it&#39;s a leaf frame, it&#39;s the point</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// at which the stack trace was taken.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	PC uint64
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// Func is the name of the function this frame maps to.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	Func string
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// File is the file which contains the source code of Func.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	File string
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// Line is the line number within File which maps to PC.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	Line uint64
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// Event represents a single event in the trace.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>type Event struct {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	table *evTable
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	ctx   schedCtx
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	base  baseEvent
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// Kind returns the kind of event that this is.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func (e Event) Kind() EventKind {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return go122Type2Kind[e.base.typ]
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// Time returns the timestamp of the event.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>func (e Event) Time() Time {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return e.base.time
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// Goroutine returns the ID of the goroutine that was executing when</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// this event happened. It describes part of the execution context</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// for this event.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// Note that for goroutine state transitions this always refers to the</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// state before the transition. For example, if a goroutine is just</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">// starting to run on this thread and/or proc, then this will return</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// NoGoroutine. In this case, the goroutine starting to run will be</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// can be found at Event.StateTransition().Resource.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>func (e Event) Goroutine() GoID {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return e.ctx.G
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// Proc returns the ID of the proc this event event pertains to.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// Note that for proc state transitions this always refers to the</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// state before the transition. For example, if a proc is just</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// starting to run on this thread, then this will return NoProc.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>func (e Event) Proc() ProcID {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return e.ctx.P
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// Thread returns the ID of the thread this event pertains to.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// Note that for thread state transitions this always refers to the</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// state before the transition. For example, if a thread is just</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// starting to run, then this will return NoThread.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// Note: tracking thread state is not currently supported, so this</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// will always return a valid thread ID. However thread state transitions</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// may be tracked in the future, and callers must be robust to this</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// possibility.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func (e Event) Thread() ThreadID {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	return e.ctx.M
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// Stack returns a handle to a stack associated with the event.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// This represents a stack trace at the current moment in time for</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// the current execution context.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (e Event) Stack() Stack {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if e.base.typ == evSync {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return NoStack
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	if e.base.typ == go122.EvCPUSample {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		return Stack{table: e.table, id: stackID(e.base.args[0])}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	spec := go122.Specs()[e.base.typ]
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if len(spec.StackIDs) == 0 {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		return NoStack
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	<span class="comment">// The stack for the main execution context is always the</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	<span class="comment">// first stack listed in StackIDs. Subtract one from this</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	<span class="comment">// because we&#39;ve peeled away the timestamp argument.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	id := stackID(e.base.args[spec.StackIDs[0]-1])
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	if id == 0 {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		return NoStack
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	return Stack{table: e.table, id: id}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>}
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// Metric returns details about a Metric event.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventMetric.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>func (e Event) Metric() Metric {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	if e.Kind() != EventMetric {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		panic(&#34;Metric called on non-Metric event&#34;)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	var m Metric
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	switch e.base.typ {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	case go122.EvProcsChange:
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		m.Name = &#34;/sched/gomaxprocs:threads&#34;
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		m.Value = Value{kind: ValueUint64, scalar: e.base.args[0]}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	case go122.EvHeapAlloc:
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		m.Name = &#34;/memory/classes/heap/objects:bytes&#34;
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		m.Value = Value{kind: ValueUint64, scalar: e.base.args[0]}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	case go122.EvHeapGoal:
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		m.Name = &#34;/gc/heap/goal:bytes&#34;
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		m.Value = Value{kind: ValueUint64, scalar: e.base.args[0]}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	default:
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Metric kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return m
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// Label returns details about a Label event.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventLabel.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>func (e Event) Label() Label {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	if e.Kind() != EventLabel {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		panic(&#34;Label called on non-Label event&#34;)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	if e.base.typ != go122.EvGoLabel {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Label kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	return Label{
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		Label:    e.table.strings.mustGet(stringID(e.base.args[0])),
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		Resource: ResourceID{Kind: ResourceGoroutine, id: int64(e.ctx.G)},
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">// Range returns details about an EventRangeBegin, EventRangeActive, or EventRangeEnd event.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventRangeBegin, Kind != EventRangeActive, and Kind != EventRangeEnd.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>func (e Event) Range() Range {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	if kind := e.Kind(); kind != EventRangeBegin &amp;&amp; kind != EventRangeActive &amp;&amp; kind != EventRangeEnd {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		panic(&#34;Range called on non-Range event&#34;)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	var r Range
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	switch e.base.typ {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	case go122.EvSTWBegin, go122.EvSTWEnd:
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		<span class="comment">// N.B. ordering.advance smuggles in the STW reason as e.base.args[0]</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		<span class="comment">// for go122.EvSTWEnd (it&#39;s already there for Begin).</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		r.Name = &#34;stop-the-world (&#34; + e.table.strings.mustGet(stringID(e.base.args[0])) + &#34;)&#34;
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		r.Scope = ResourceID{Kind: ResourceGoroutine, id: int64(e.Goroutine())}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	case go122.EvGCBegin, go122.EvGCActive, go122.EvGCEnd:
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		r.Name = &#34;GC concurrent mark phase&#34;
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		r.Scope = ResourceID{Kind: ResourceNone}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	case go122.EvGCSweepBegin, go122.EvGCSweepActive, go122.EvGCSweepEnd:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		r.Name = &#34;GC incremental sweep&#34;
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		r.Scope = ResourceID{Kind: ResourceProc}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		if e.base.typ == go122.EvGCSweepActive {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			r.Scope.id = int64(e.base.args[0])
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		} else {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			r.Scope.id = int64(e.Proc())
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		r.Scope.id = int64(e.Proc())
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	case go122.EvGCMarkAssistBegin, go122.EvGCMarkAssistActive, go122.EvGCMarkAssistEnd:
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		r.Name = &#34;GC mark assist&#34;
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		r.Scope = ResourceID{Kind: ResourceGoroutine}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		if e.base.typ == go122.EvGCMarkAssistActive {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			r.Scope.id = int64(e.base.args[0])
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		} else {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			r.Scope.id = int64(e.Goroutine())
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	default:
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Range kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	return r
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// RangeAttributes returns attributes for a completed range.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventRangeEnd.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>func (e Event) RangeAttributes() []RangeAttribute {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	if e.Kind() != EventRangeEnd {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		panic(&#34;Range called on non-Range event&#34;)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	if e.base.typ != go122.EvGCSweepEnd {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		return nil
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	return []RangeAttribute{
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		{
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			Name:  &#34;bytes swept&#34;,
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			Value: Value{kind: ValueUint64, scalar: e.base.args[0]},
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		},
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		{
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			Name:  &#34;bytes reclaimed&#34;,
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>			Value: Value{kind: ValueUint64, scalar: e.base.args[1]},
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		},
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// Task returns details about a TaskBegin or TaskEnd event.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventTaskBegin and Kind != EventTaskEnd.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>func (e Event) Task() Task {
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if kind := e.Kind(); kind != EventTaskBegin &amp;&amp; kind != EventTaskEnd {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		panic(&#34;Task called on non-Task event&#34;)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	parentID := NoTask
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	var typ string
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	switch e.base.typ {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	case go122.EvUserTaskBegin:
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		parentID = TaskID(e.base.args[1])
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		typ = e.table.strings.mustGet(stringID(e.base.args[2]))
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	case go122.EvUserTaskEnd:
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		parentID = TaskID(e.base.extra(version.Go122)[0])
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		typ = e.table.getExtraString(extraStringID(e.base.extra(version.Go122)[1]))
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	default:
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Task kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return Task{
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		ID:     TaskID(e.base.args[0]),
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		Parent: parentID,
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		Type:   typ,
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// Region returns details about a RegionBegin or RegionEnd event.</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventRegionBegin and Kind != EventRegionEnd.</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>func (e Event) Region() Region {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	if kind := e.Kind(); kind != EventRegionBegin &amp;&amp; kind != EventRegionEnd {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		panic(&#34;Region called on non-Region event&#34;)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	if e.base.typ != go122.EvUserRegionBegin &amp;&amp; e.base.typ != go122.EvUserRegionEnd {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Region kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	return Region{
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		Task: TaskID(e.base.args[0]),
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		Type: e.table.strings.mustGet(stringID(e.base.args[1])),
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// Log returns details about a Log event.</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventLog.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>func (e Event) Log() Log {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	if e.Kind() != EventLog {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		panic(&#34;Log called on non-Log event&#34;)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	if e.base.typ != go122.EvUserLog {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for Log kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	return Log{
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		Task:     TaskID(e.base.args[0]),
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		Category: e.table.strings.mustGet(stringID(e.base.args[1])),
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		Message:  e.table.strings.mustGet(stringID(e.base.args[2])),
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// StateTransition returns details about a StateTransition event.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span><span class="comment">// Panics if Kind != EventStateTransition.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func (e Event) StateTransition() StateTransition {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	if e.Kind() != EventStateTransition {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		panic(&#34;StateTransition called on non-StateTransition event&#34;)
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	var s StateTransition
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	switch e.base.typ {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	case go122.EvProcStart:
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		s = procStateTransition(ProcID(e.base.args[0]), ProcIdle, ProcRunning)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	case go122.EvProcStop:
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		s = procStateTransition(e.ctx.P, ProcRunning, ProcIdle)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	case go122.EvProcSteal:
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		<span class="comment">// N.B. ordering.advance populates e.base.extra.</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		beforeState := ProcRunning
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		if go122.ProcStatus(e.base.extra(version.Go122)[0]) == go122.ProcSyscallAbandoned {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ve lost information because this ProcSteal advanced on a</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			<span class="comment">// SyscallAbandoned state. Treat the P as idle because ProcStatus</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			<span class="comment">// treats SyscallAbandoned as Idle. Otherwise we&#39;ll have an invalid</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			<span class="comment">// transition.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			beforeState = ProcIdle
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		s = procStateTransition(ProcID(e.base.args[0]), beforeState, ProcIdle)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	case go122.EvProcStatus:
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		<span class="comment">// N.B. ordering.advance populates e.base.extra.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		s = procStateTransition(ProcID(e.base.args[0]), ProcState(e.base.extra(version.Go122)[0]), go122ProcStatus2ProcState[e.base.args[1]])
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	case go122.EvGoCreate:
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		s = goStateTransition(GoID(e.base.args[0]), GoNotExist, GoRunnable)
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		s.Stack = Stack{table: e.table, id: stackID(e.base.args[1])}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	case go122.EvGoCreateSyscall:
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		s = goStateTransition(GoID(e.base.args[0]), GoNotExist, GoSyscall)
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	case go122.EvGoStart:
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		s = goStateTransition(GoID(e.base.args[0]), GoRunnable, GoRunning)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	case go122.EvGoDestroy:
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoRunning, GoNotExist)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	case go122.EvGoDestroySyscall:
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoSyscall, GoNotExist)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	case go122.EvGoStop:
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoRunning, GoRunnable)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		s.Reason = e.table.strings.mustGet(stringID(e.base.args[0]))
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	case go122.EvGoBlock:
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoRunning, GoWaiting)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		s.Reason = e.table.strings.mustGet(stringID(e.base.args[0]))
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	case go122.EvGoUnblock:
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		s = goStateTransition(GoID(e.base.args[0]), GoWaiting, GoRunnable)
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	case go122.EvGoSyscallBegin:
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoRunning, GoSyscall)
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	case go122.EvGoSyscallEnd:
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoSyscall, GoRunning)
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	case go122.EvGoSyscallEndBlocked:
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		s = goStateTransition(e.ctx.G, GoSyscall, GoRunnable)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		s.Stack = e.Stack() <span class="comment">// This event references the resource the event happened on.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	case go122.EvGoStatus:
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		<span class="comment">// N.B. ordering.advance populates e.base.extra.</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		s = goStateTransition(GoID(e.base.args[0]), GoState(e.base.extra(version.Go122)[0]), go122GoStatus2GoState[e.base.args[2]])
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	default:
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;internal error: unexpected event type for StateTransition kind: %s&#34;, go122.EventString(e.base.typ)))
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	return s
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>const evSync = ^event.Type(0)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>var go122Type2Kind = [...]EventKind{
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	go122.EvCPUSample:           EventStackSample,
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	go122.EvProcsChange:         EventMetric,
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	go122.EvProcStart:           EventStateTransition,
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	go122.EvProcStop:            EventStateTransition,
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	go122.EvProcSteal:           EventStateTransition,
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	go122.EvProcStatus:          EventStateTransition,
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	go122.EvGoCreate:            EventStateTransition,
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	go122.EvGoCreateSyscall:     EventStateTransition,
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	go122.EvGoStart:             EventStateTransition,
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	go122.EvGoDestroy:           EventStateTransition,
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	go122.EvGoDestroySyscall:    EventStateTransition,
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	go122.EvGoStop:              EventStateTransition,
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	go122.EvGoBlock:             EventStateTransition,
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	go122.EvGoUnblock:           EventStateTransition,
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	go122.EvGoSyscallBegin:      EventStateTransition,
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	go122.EvGoSyscallEnd:        EventStateTransition,
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	go122.EvGoSyscallEndBlocked: EventStateTransition,
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	go122.EvGoStatus:            EventStateTransition,
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	go122.EvSTWBegin:            EventRangeBegin,
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	go122.EvSTWEnd:              EventRangeEnd,
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	go122.EvGCActive:            EventRangeActive,
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	go122.EvGCBegin:             EventRangeBegin,
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	go122.EvGCEnd:               EventRangeEnd,
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	go122.EvGCSweepActive:       EventRangeActive,
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	go122.EvGCSweepBegin:        EventRangeBegin,
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	go122.EvGCSweepEnd:          EventRangeEnd,
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	go122.EvGCMarkAssistActive:  EventRangeActive,
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	go122.EvGCMarkAssistBegin:   EventRangeBegin,
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	go122.EvGCMarkAssistEnd:     EventRangeEnd,
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	go122.EvHeapAlloc:           EventMetric,
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	go122.EvHeapGoal:            EventMetric,
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	go122.EvGoLabel:             EventLabel,
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	go122.EvUserTaskBegin:       EventTaskBegin,
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	go122.EvUserTaskEnd:         EventTaskEnd,
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	go122.EvUserRegionBegin:     EventRegionBegin,
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	go122.EvUserRegionEnd:       EventRegionEnd,
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	go122.EvUserLog:             EventLog,
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	evSync:                      EventSync,
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>var go122GoStatus2GoState = [...]GoState{
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	go122.GoRunnable: GoRunnable,
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	go122.GoRunning:  GoRunning,
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	go122.GoWaiting:  GoWaiting,
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>	go122.GoSyscall:  GoSyscall,
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>var go122ProcStatus2ProcState = [...]ProcState{
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	go122.ProcRunning:          ProcRunning,
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	go122.ProcIdle:             ProcIdle,
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	go122.ProcSyscall:          ProcRunning,
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	go122.ProcSyscallAbandoned: ProcIdle,
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span><span class="comment">// String returns the event as a human-readable string.</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span><span class="comment">// The format of the string is intended for debugging and is subject to change.</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>func (e Event) String() string {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;sb, &#34;M=%d P=%d G=%d&#34;, e.Thread(), e.Proc(), e.Goroutine())
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;sb, &#34; %s Time=%d&#34;, e.Kind(), e.Time())
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	<span class="comment">// Kind-specific fields.</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	switch kind := e.Kind(); kind {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	case EventMetric:
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		m := e.Metric()
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Name=%q Value=%s&#34;, m.Name, valueAsString(m.Value))
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	case EventLabel:
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		l := e.Label()
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Label=%q Resource=%s&#34;, l.Label, l.Resource)
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	case EventRangeBegin, EventRangeActive, EventRangeEnd:
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		r := e.Range()
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Name=%q Scope=%s&#34;, r.Name, r.Scope)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		if kind == EventRangeEnd {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34; Attributes=[&#34;)
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			for i, attr := range e.RangeAttributes() {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>				if i != 0 {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>					fmt.Fprintf(&amp;sb, &#34; &#34;)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>				}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>				fmt.Fprintf(&amp;sb, &#34;%q=%s&#34;, attr.Name, valueAsString(attr.Value))
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34;]&#34;)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	case EventTaskBegin, EventTaskEnd:
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		t := e.Task()
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; ID=%d Parent=%d Type=%q&#34;, t.ID, t.Parent, t.Type)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	case EventRegionBegin, EventRegionEnd:
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		r := e.Region()
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Task=%d Type=%q&#34;, r.Task, r.Type)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	case EventLog:
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		l := e.Log()
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Task=%d Category=%q Message=%q&#34;, l.Task, l.Category, l.Message)
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	case EventStateTransition:
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		s := e.StateTransition()
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34; Resource=%s Reason=%q&#34;, s.Resource, s.Reason)
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		switch s.Resource.Kind {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		case ResourceGoroutine:
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			id := s.Resource.Goroutine()
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			old, new := s.Goroutine()
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34; GoID=%d %s-&gt;%s&#34;, id, old, new)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		case ResourceProc:
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>			id := s.Resource.Proc()
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>			old, new := s.Proc()
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34; ProcID=%d %s-&gt;%s&#34;, id, old, new)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		if s.Stack != NoStack {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			fmt.Fprintln(&amp;sb)
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			fmt.Fprintln(&amp;sb, &#34;TransitionStack=&#34;)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			s.Stack.Frames(func(f StackFrame) bool {
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>				fmt.Fprintf(&amp;sb, &#34;\t%s @ 0x%x\n&#34;, f.Func, f.PC)
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>				fmt.Fprintf(&amp;sb, &#34;\t\t%s:%d\n&#34;, f.File, f.Line)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>				return true
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			})
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	if stk := e.Stack(); stk != NoStack {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		fmt.Fprintln(&amp;sb)
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		fmt.Fprintln(&amp;sb, &#34;Stack=&#34;)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		stk.Frames(func(f StackFrame) bool {
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34;\t%s @ 0x%x\n&#34;, f.Func, f.PC)
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34;\t\t%s:%d\n&#34;, f.File, f.Line)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>			return true
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		})
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	return sb.String()
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// validateTableIDs checks to make sure lookups in e.table</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// will work.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>func (e Event) validateTableIDs() error {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	if e.base.typ == evSync {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		return nil
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	}
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	spec := go122.Specs()[e.base.typ]
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	<span class="comment">// Check stacks.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	for _, i := range spec.StackIDs {
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		id := stackID(e.base.args[i-1])
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		_, ok := e.table.stacks.get(id)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		if !ok {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;found invalid stack ID %d for event %s&#34;, id, spec.Name)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	}
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	<span class="comment">// N.B. Strings referenced by stack frames are validated</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	<span class="comment">// early on, when reading the stacks in to begin with.</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	<span class="comment">// Check strings.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	for _, i := range spec.StringIDs {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		id := stringID(e.base.args[i-1])
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		_, ok := e.table.strings.get(id)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		if !ok {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;found invalid string ID %d for event %s&#34;, id, spec.Name)
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	}
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	return nil
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func syncEvent(table *evTable, ts Time) Event {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	return Event{
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		table: table,
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		ctx: schedCtx{
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			G: NoGoroutine,
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			P: NoProc,
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			M: NoThread,
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		},
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		base: baseEvent{
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			typ:  evSync,
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			time: ts,
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		},
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>}
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>
</pre><p><a href="event.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
