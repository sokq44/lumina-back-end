<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/internal/trace/v2/reader.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./reader.go?s=1311:1360#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/internal">internal</a>/<a href="http://localhost:8080/src/internal/trace">trace</a>/<a href="http://localhost:8080/src/internal/trace/v2">v2</a>/<span class="text-muted">reader.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/internal/trace/v2">internal/trace/v2</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package trace
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;slices&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;internal/trace/v2/event/go122&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;internal/trace/v2/version&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Reader reads a byte stream, validates it, and produces trace events.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>type Reader struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	r           *bufio.Reader
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	lastTs      Time
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	gen         *generation
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	spill       *spilledBatch
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	frontier    []*batchCursor
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	cpuSamples  []cpuSample
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	order       ordering
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	emittedSync bool
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// NewReader creates a new trace reader.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func NewReader(r io.Reader) (*Reader, error) {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	br := bufio.NewReader(r)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	v, err := version.ReadHeader(br)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	if err != nil {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		return nil, err
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	if v != version.Go122 {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;unknown or unsupported version go 1.%d&#34;, v)
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	}
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	return &amp;Reader{
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		r: br,
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		order: ordering{
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			mStates:     make(map[ThreadID]*mState),
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			pStates:     make(map[ProcID]*pState),
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			gStates:     make(map[GoID]*gState),
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			activeTasks: make(map[TaskID]taskState),
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		},
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t emit a sync event when we first go to emit events.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		emittedSync: true,
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}, nil
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// ReadEvent reads a single event from the stream.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// If the stream has been exhausted, it returns an invalid</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// event and io.EOF.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="selection">func (r *Reader) ReadEvent() (e Event, err error)</span> {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// Go 1.22+ trace parsing algorithm.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// (1) Read in all the batches for the next generation from the stream.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">//   (a) Use the size field in the header to quickly find all batches.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// (2) Parse out the strings, stacks, CPU samples, and timestamp conversion data.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// (3) Group each event batch by M, sorted by timestamp. (batchCursor contains the groups.)</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// (4) Organize batchCursors in a min-heap, ordered by the timestamp of the next event for each M.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// (5) Try to advance the next event for the M at the top of the min-heap.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">//   (a) On success, select that M.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">//   (b) On failure, sort the min-heap and try to advance other Ms. Select the first M that advances.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">//   (c) If there&#39;s nothing left to advance, goto (1).</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// (6) Select the latest event for the selected M and get it ready to be returned.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// (7) Read the next event for the selected M and update the min-heap.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// (8) Return the selected event, goto (5) on the next call.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// Set us up to track the last timestamp and fix up</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// the timestamp of any event that comes through.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	defer func() {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		if err != nil {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			return
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		if err = e.validateTableIDs(); err != nil {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>			return
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		if e.base.time &lt;= r.lastTs {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			e.base.time = r.lastTs + 1
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		r.lastTs = e.base.time
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}()
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Consume any extra events produced during parsing.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if ev := r.order.consumeExtraEvent(); ev.Kind() != EventBad {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		return ev, nil
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// Check if we need to refresh the generation.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	if len(r.frontier) == 0 &amp;&amp; len(r.cpuSamples) == 0 {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if !r.emittedSync {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			r.emittedSync = true
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			return syncEvent(r.gen.evTable, r.lastTs), nil
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if r.gen != nil &amp;&amp; r.spill == nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			<span class="comment">// If we have a generation from the last read,</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			<span class="comment">// and there&#39;s nothing left in the frontier, and</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			<span class="comment">// there&#39;s no spilled batch, indicating that there&#39;s</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			<span class="comment">// no further generation, it means we&#39;re done.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			<span class="comment">// Return io.EOF.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			return Event{}, io.EOF
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// Read the next generation.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		r.gen, r.spill, err = readGeneration(r.r, r.spill)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		if err != nil {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			return Event{}, err
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		<span class="comment">// Reset CPU samples cursor.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		r.cpuSamples = r.gen.cpuSamples
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		<span class="comment">// Reset frontier.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		for m, batches := range r.gen.batches {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			bc := &amp;batchCursor{m: m}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			ok, err := bc.nextEvent(batches, r.gen.freq)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			if err != nil {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				return Event{}, err
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			if !ok {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>				<span class="comment">// Turns out there aren&#39;t actually any events in these batches.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				continue
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			r.frontier = heapInsert(r.frontier, bc)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		<span class="comment">// Reset emittedSync.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		r.emittedSync = false
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	refresh := func(i int) error {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		bc := r.frontier[i]
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		<span class="comment">// Refresh the cursor&#39;s event.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		ok, err := bc.nextEvent(r.gen.batches[bc.m], r.gen.freq)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		if err != nil {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			return err
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		if ok {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			<span class="comment">// If we successfully refreshed, update the heap.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			heapUpdate(r.frontier, i)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		} else {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			<span class="comment">// There&#39;s nothing else to read. Delete this cursor from the frontier.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>			r.frontier = heapRemove(r.frontier, i)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		return nil
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// Inject a CPU sample if it comes next.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if len(r.cpuSamples) != 0 {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		if len(r.frontier) == 0 || r.cpuSamples[0].time &lt; r.frontier[0].ev.time {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			e := r.cpuSamples[0].asEvent(r.gen.evTable)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			r.cpuSamples = r.cpuSamples[1:]
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			return e, nil
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// Try to advance the head of the frontier, which should have the minimum timestamp.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// This should be by far the most common case</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if len(r.frontier) == 0 {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		return Event{}, fmt.Errorf(&#34;broken trace: frontier is empty:\n[gen=%d]\n\n%s\n%s\n&#34;, r.gen.gen, dumpFrontier(r.frontier), dumpOrdering(&amp;r.order))
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	bc := r.frontier[0]
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	if ctx, ok, err := r.order.advance(&amp;bc.ev, r.gen.evTable, bc.m, r.gen.gen); err != nil {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return Event{}, err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	} else if ok {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		e := Event{table: r.gen.evTable, ctx: ctx, base: bc.ev}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return e, refresh(0)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// Sort the min-heap. A sorted min-heap is still a min-heap,</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// but now we can iterate over the rest and try to advance in</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// order. This path should be rare.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	slices.SortFunc(r.frontier, (*batchCursor).compare)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// Try to advance the rest of the frontier, in timestamp order.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	for i := 1; i &lt; len(r.frontier); i++ {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		bc := r.frontier[i]
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		if ctx, ok, err := r.order.advance(&amp;bc.ev, r.gen.evTable, bc.m, r.gen.gen); err != nil {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			return Event{}, err
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		} else if ok {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			e := Event{table: r.gen.evTable, ctx: ctx, base: bc.ev}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			return e, refresh(i)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	return Event{}, fmt.Errorf(&#34;broken trace: failed to advance: frontier:\n[gen=%d]\n\n%s\n%s\n&#34;, r.gen.gen, dumpFrontier(r.frontier), dumpOrdering(&amp;r.order))
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func dumpFrontier(frontier []*batchCursor) string {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	var sb strings.Builder
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	for _, bc := range frontier {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		spec := go122.Specs()[bc.ev.typ]
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34;M %d [%s time=%d&#34;, bc.m, spec.Name, bc.ev.time)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		for i, arg := range spec.Args[1:] {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;sb, &#34; %s=%d&#34;, arg, bc.ev.args[i])
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;sb, &#34;]\n&#34;)
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return sb.String()
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
</pre><p><a href="reader.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
