<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/io/fs/walk.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./walk.go?s=4526:4582#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/io">io</a>/<a href="http://localhost:8080/src/io/fs">fs</a>/<span class="text-muted">walk.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/io/fs">io/fs</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2020 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package fs
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>)
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// SkipDir is used as a return value from [WalkDirFunc] to indicate that</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// the directory named in the call is to be skipped. It is not returned</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// as an error by any function.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>var SkipDir = errors.New(&#34;skip this directory&#34;)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// SkipAll is used as a return value from [WalkDirFunc] to indicate that</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// all remaining files and directories are to be skipped. It is not returned</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// as an error by any function.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>var SkipAll = errors.New(&#34;skip everything and stop the walk&#34;)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// WalkDirFunc is the type of the function called by [WalkDir] to visit</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// each file or directory.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// The path argument contains the argument to [WalkDir] as a prefix.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// That is, if WalkDir is called with root argument &#34;dir&#34; and finds a file</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// named &#34;a&#34; in that directory, the walk function will be called with</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// argument &#34;dir/a&#34;.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// The d argument is the [DirEntry] for the named path.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// The error result returned by the function controls how [WalkDir]</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// continues. If the function returns the special value [SkipDir], WalkDir</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// skips the current directory (path if d.IsDir() is true, otherwise</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// path&#39;s parent directory). If the function returns the special value</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// [SkipAll], WalkDir skips all remaining files and directories. Otherwise,</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// if the function returns a non-nil error, WalkDir stops entirely and</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// returns that error.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// The err argument reports an error related to path, signaling that</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// [WalkDir] will not walk into that directory. The function can decide how</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// to handle that error; as described earlier, returning the error will</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// cause WalkDir to stop walking the entire tree.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// [WalkDir] calls the function with a non-nil err argument in two cases.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// First, if the initial [Stat] on the root directory fails, WalkDir</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// calls the function with path set to root, d set to nil, and err set to</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// the error from [fs.Stat].</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Second, if a directory&#39;s ReadDir method (see [ReadDirFile]) fails, WalkDir calls the</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// function with path set to the directory&#39;s path, d set to an</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// [DirEntry] describing the directory, and err set to the error from</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// ReadDir. In this second case, the function is called twice with the</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// path of the directory: the first call is before the directory read is</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// attempted and has err set to nil, giving the function a chance to</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// return [SkipDir] or [SkipAll] and avoid the ReadDir entirely. The second call</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// is after a failed ReadDir and reports the error from ReadDir.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// (If ReadDir succeeds, there is no second call.)</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// The differences between WalkDirFunc compared to [path/filepath.WalkFunc] are:</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//   - The second argument has type [DirEntry] instead of [FileInfo].</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//   - The function is called before reading a directory, to allow [SkipDir]</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//     or [SkipAll] to bypass the directory read entirely or skip all remaining</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//     files and directories respectively.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//   - If a directory read fails, the function is called a second time</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//     for that directory to report the error.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>type WalkDirFunc func(path string, d DirEntry, err error) error
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// walkDir recursively descends path, calling walkDirFn.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func walkDir(fsys FS, name string, d DirEntry, walkDirFn WalkDirFunc) error {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if err := walkDirFn(name, d, nil); err != nil || !d.IsDir() {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		if err == SkipDir &amp;&amp; d.IsDir() {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>			<span class="comment">// Successfully skipped directory.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			err = nil
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return err
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	dirs, err := ReadDir(fsys, name)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if err != nil {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		<span class="comment">// Second call, to report ReadDir error.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		err = walkDirFn(name, d, err)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		if err != nil {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			if err == SkipDir &amp;&amp; d.IsDir() {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>				err = nil
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			return err
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	for _, d1 := range dirs {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		name1 := path.Join(name, d1.Name())
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if err := walkDir(fsys, name1, d1, walkDirFn); err != nil {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			if err == SkipDir {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>				break
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			return err
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return nil
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// WalkDir walks the file tree rooted at root, calling fn for each file or</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// directory in the tree, including root.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// All errors that arise visiting files and directories are filtered by fn:</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// see the [fs.WalkDirFunc] documentation for details.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// The files are walked in lexical order, which makes the output deterministic</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// but requires WalkDir to read an entire directory into memory before proceeding</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// to walk that directory.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// WalkDir does not follow symbolic links found in directories,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// but if root itself is a symbolic link, its target will be walked.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="selection">func WalkDir(fsys FS, root string, fn WalkDirFunc) error</span> {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	info, err := Stat(fsys, root)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	if err != nil {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		err = fn(root, nil, err)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	} else {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		err = walkDir(fsys, root, FileInfoToDirEntry(info), fn)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if err == SkipDir || err == SkipAll {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return nil
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return err
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
</pre><p><a href="walk.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
