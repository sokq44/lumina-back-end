<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/io/io.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./io.go?s=18856:18913#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/io">io</a>/<span class="text-muted">io.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/io">io</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package io provides basic interfaces to I/O primitives.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Its primary job is to wrap existing implementations of such primitives,</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// such as those in package os, into shared public interfaces that</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// abstract the functionality, plus some other related primitives.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Because these interfaces and primitives wrap lower-level operations with</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// various implementations, unless otherwise informed clients should not</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// assume they are safe for parallel execution.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>package io
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>import (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Seek whence values.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>const (
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	SeekStart   = 0 <span class="comment">// seek relative to the origin of the file</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	SeekCurrent = 1 <span class="comment">// seek relative to the current offset</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	SeekEnd     = 2 <span class="comment">// seek relative to the end</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// ErrShortWrite means that a write accepted fewer bytes than requested</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// but failed to return an explicit error.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>var ErrShortWrite = errors.New(&#34;short write&#34;)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// errInvalidWrite means that a write returned an impossible count.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>var errInvalidWrite = errors.New(&#34;invalid write result&#34;)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// ErrShortBuffer means that a read required a longer buffer than was provided.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>var ErrShortBuffer = errors.New(&#34;short buffer&#34;)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// EOF is the error returned by Read when no more input is available.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// (Read must return EOF itself, not an error wrapping EOF,</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// because callers will test for EOF using ==.)</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// Functions should return EOF only to signal a graceful end of input.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// If the EOF occurs unexpectedly in a structured data stream,</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// the appropriate error is either [ErrUnexpectedEOF] or some other error</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// giving more detail.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>var EOF = errors.New(&#34;EOF&#34;)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// ErrUnexpectedEOF means that EOF was encountered in the</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// middle of reading a fixed-size block or data structure.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>var ErrUnexpectedEOF = errors.New(&#34;unexpected EOF&#34;)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// ErrNoProgress is returned by some clients of a [Reader] when</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// many calls to Read have failed to return any data or error,</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// usually the sign of a broken [Reader] implementation.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>var ErrNoProgress = errors.New(&#34;multiple Read calls return no data or error&#34;)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// Reader is the interface that wraps the basic Read method.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// Read reads up to len(p) bytes into p. It returns the number of bytes</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// If some data is available but not len(p) bytes, Read conventionally</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// returns what is available instead of waiting for more.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// When Read encounters an error or end-of-file condition after</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// successfully reading n &gt; 0 bytes, it returns the number of</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// bytes read. It may return the (non-nil) error from the same call</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// or return the error (and n == 0) from a subsequent call.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// An instance of this general case is that a Reader returning</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// a non-zero number of bytes at the end of the input stream may</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// return either err == EOF or err == nil. The next Read should</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// return 0, EOF.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// Callers should always process the n &gt; 0 bytes returned before</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// considering the error err. Doing so correctly handles I/O errors</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// that happen after reading some bytes and also both of the</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// allowed EOF behaviors.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// If len(p) == 0, Read should always return n == 0. It may return a</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// non-nil error if some error condition is known, such as EOF.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Implementations of Read are discouraged from returning a</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// zero byte count with a nil error, except when len(p) == 0.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Callers should treat a return of 0 and nil as indicating that</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// nothing happened; in particular it does not indicate EOF.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// Implementations must not retain p.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>type Reader interface {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	Read(p []byte) (n int, err error)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Writer is the interface that wraps the basic Write method.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// Write writes len(p) bytes from p to the underlying data stream.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// and any error encountered that caused the write to stop early.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Write must return a non-nil error if it returns n &lt; len(p).</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Write must not modify the slice data, even temporarily.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Implementations must not retain p.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>type Writer interface {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	Write(p []byte) (n int, err error)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// Closer is the interface that wraps the basic Close method.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// The behavior of Close after the first call is undefined.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// Specific implementations may document their own behavior.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>type Closer interface {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	Close() error
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// Seeker is the interface that wraps the basic Seek method.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// Seek sets the offset for the next Read or Write to offset,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// interpreted according to whence:</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// [SeekStart] means relative to the start of the file,</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// [SeekCurrent] means relative to the current offset, and</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// [SeekEnd] means relative to the end</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// (for example, offset = -2 specifies the penultimate byte of the file).</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// Seek returns the new offset relative to the start of the</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// file or an error, if any.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// Seeking to an offset before the start of the file is an error.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// Seeking to any positive offset may be allowed, but if the new offset exceeds</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// the size of the underlying object the behavior of subsequent I/O operations</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// is implementation-dependent.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>type Seeker interface {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	Seek(offset int64, whence int) (int64, error)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// ReadWriter is the interface that groups the basic Read and Write methods.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>type ReadWriter interface {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	Reader
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	Writer
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// ReadCloser is the interface that groups the basic Read and Close methods.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>type ReadCloser interface {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	Reader
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	Closer
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// WriteCloser is the interface that groups the basic Write and Close methods.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>type WriteCloser interface {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	Writer
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	Closer
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// ReadWriteCloser is the interface that groups the basic Read, Write and Close methods.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>type ReadWriteCloser interface {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	Reader
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	Writer
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	Closer
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// ReadSeeker is the interface that groups the basic Read and Seek methods.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>type ReadSeeker interface {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	Reader
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	Seeker
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// ReadSeekCloser is the interface that groups the basic Read, Seek and Close</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// methods.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>type ReadSeekCloser interface {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	Reader
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	Seeker
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	Closer
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// WriteSeeker is the interface that groups the basic Write and Seek methods.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>type WriteSeeker interface {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	Writer
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	Seeker
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// ReadWriteSeeker is the interface that groups the basic Read, Write and Seek methods.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>type ReadWriteSeeker interface {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	Reader
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	Writer
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	Seeker
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// ReaderFrom is the interface that wraps the ReadFrom method.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// ReadFrom reads data from r until EOF or error.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// The return value n is the number of bytes read.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Any error except EOF encountered during the read is also returned.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// The [Copy] function uses [ReaderFrom] if available.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>type ReaderFrom interface {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	ReadFrom(r Reader) (n int64, err error)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// WriterTo is the interface that wraps the WriteTo method.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// WriteTo writes data to w until there&#39;s no more data to write or</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// when an error occurs. The return value n is the number of bytes</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// written. Any error encountered during the write is also returned.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// The Copy function uses WriterTo if available.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>type WriterTo interface {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	WriteTo(w Writer) (n int64, err error)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// ReaderAt is the interface that wraps the basic ReadAt method.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// ReadAt reads len(p) bytes into p starting at offset off in the</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// underlying input source. It returns the number of bytes</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// When ReadAt returns n &lt; len(p), it returns a non-nil error</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// explaining why more bytes were not returned. In this respect,</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// ReadAt is stricter than Read.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// Even if ReadAt returns n &lt; len(p), it may use all of p as scratch</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// space during the call. If some data is available but not len(p) bytes,</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// ReadAt blocks until either all the data is available or an error occurs.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// In this respect ReadAt is different from Read.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// If the n = len(p) bytes returned by ReadAt are at the end of the</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// input source, ReadAt may return either err == EOF or err == nil.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// If ReadAt is reading from an input source with a seek offset,</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// ReadAt should not affect nor be affected by the underlying</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// seek offset.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// Clients of ReadAt can execute parallel ReadAt calls on the</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// same input source.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// Implementations must not retain p.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>type ReaderAt interface {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	ReadAt(p []byte, off int64) (n int, err error)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// WriterAt is the interface that wraps the basic WriteAt method.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// WriteAt writes len(p) bytes from p to the underlying data stream</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// at offset off. It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// and any error encountered that caused the write to stop early.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// WriteAt must return a non-nil error if it returns n &lt; len(p).</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// If WriteAt is writing to a destination with a seek offset,</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// WriteAt should not affect nor be affected by the underlying</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// seek offset.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// Clients of WriteAt can execute parallel WriteAt calls on the same</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// destination if the ranges do not overlap.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// Implementations must not retain p.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>type WriterAt interface {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	WriteAt(p []byte, off int64) (n int, err error)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// ByteReader is the interface that wraps the ReadByte method.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// ReadByte reads and returns the next byte from the input or</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// any error encountered. If ReadByte returns an error, no input</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// byte was consumed, and the returned byte value is undefined.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// ReadByte provides an efficient interface for byte-at-time</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// processing. A [Reader] that does not implement  ByteReader</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// can be wrapped using bufio.NewReader to add this method.</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>type ByteReader interface {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	ReadByte() (byte, error)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// ByteScanner is the interface that adds the UnreadByte method to the</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// basic ReadByte method.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// UnreadByte causes the next call to ReadByte to return the last byte read.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// If the last operation was not a successful call to ReadByte, UnreadByte may</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// return an error, unread the last byte read (or the byte prior to the</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// last-unread byte), or (in implementations that support the [Seeker] interface)</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// seek to one byte before the current offset.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>type ByteScanner interface {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	ByteReader
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	UnreadByte() error
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// ByteWriter is the interface that wraps the WriteByte method.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>type ByteWriter interface {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	WriteByte(c byte) error
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// RuneReader is the interface that wraps the ReadRune method.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// ReadRune reads a single encoded Unicode character</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// and returns the rune and its size in bytes. If no character is</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// available, err will be set.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>type RuneReader interface {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	ReadRune() (r rune, size int, err error)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// RuneScanner is the interface that adds the UnreadRune method to the</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// basic ReadRune method.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// UnreadRune causes the next call to ReadRune to return the last rune read.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// If the last operation was not a successful call to ReadRune, UnreadRune may</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// return an error, unread the last rune read (or the rune prior to the</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// last-unread rune), or (in implementations that support the [Seeker] interface)</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// seek to the start of the rune before the current offset.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>type RuneScanner interface {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	RuneReader
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	UnreadRune() error
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// StringWriter is the interface that wraps the WriteString method.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>type StringWriter interface {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	WriteString(s string) (n int, err error)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// WriteString writes the contents of the string s to w, which accepts a slice of bytes.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// If w implements [StringWriter], [StringWriter.WriteString] is invoked directly.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// Otherwise, [Writer.Write] is called exactly once.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>func WriteString(w Writer, s string) (n int, err error) {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	if sw, ok := w.(StringWriter); ok {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		return sw.WriteString(s)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	return w.Write([]byte(s))
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// ReadAtLeast reads from r into buf until it has read at least min bytes.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes copied and an error if fewer bytes were read.</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// The error is EOF only if no bytes were read.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// If an EOF happens after reading fewer than min bytes,</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">// ReadAtLeast returns [ErrUnexpectedEOF].</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// If min is greater than the length of buf, ReadAtLeast returns [ErrShortBuffer].</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// On return, n &gt;= min if and only if err == nil.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// If r returns an error having read at least min bytes, the error is dropped.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error) {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	if len(buf) &lt; min {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		return 0, ErrShortBuffer
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	for n &lt; min &amp;&amp; err == nil {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		var nn int
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		nn, err = r.Read(buf[n:])
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		n += nn
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if n &gt;= min {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		err = nil
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	} else if n &gt; 0 &amp;&amp; err == EOF {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		err = ErrUnexpectedEOF
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	return
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// ReadFull reads exactly len(buf) bytes from r into buf.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes copied and an error if fewer bytes were read.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// The error is EOF only if no bytes were read.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// If an EOF happens after reading some but not all the bytes,</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// ReadFull returns [ErrUnexpectedEOF].</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// On return, n == len(buf) if and only if err == nil.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// If r returns an error having read at least len(buf) bytes, the error is dropped.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func ReadFull(r Reader, buf []byte) (n int, err error) {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	return ReadAtLeast(r, buf, len(buf))
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// CopyN copies n bytes (or until an error) from src to dst.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes copied and the earliest</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// error encountered while copying.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// On return, written == n if and only if err == nil.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// If dst implements [ReaderFrom], the copy is implemented using it.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func CopyN(dst Writer, src Reader, n int64) (written int64, err error) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	written, err = Copy(dst, LimitReader(src, n))
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	if written == n {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		return n, nil
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	if written &lt; n &amp;&amp; err == nil {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		<span class="comment">// src stopped early; must have been EOF.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		err = EOF
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	return
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// Copy copies from src to dst until either EOF is reached</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// on src or an error occurs. It returns the number of bytes</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// copied and the first error encountered while copying, if any.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// A successful Copy returns err == nil, not err == EOF.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// Because Copy is defined to read from src until EOF, it does</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// not treat an EOF from Read as an error to be reported.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// If src implements [WriterTo],</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// the copy is implemented by calling src.WriteTo(dst).</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// Otherwise, if dst implements [ReaderFrom],</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// the copy is implemented by calling dst.ReadFrom(src).</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>func Copy(dst Writer, src Reader) (written int64, err error) {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	return copyBuffer(dst, src, nil)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// CopyBuffer is identical to Copy except that it stages through the</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// provided buffer (if one is required) rather than allocating a</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// temporary one. If buf is nil, one is allocated; otherwise if it has</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// zero length, CopyBuffer panics.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// If either src implements [WriterTo] or dst implements [ReaderFrom],</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// buf will not be used to perform the copy.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	if buf != nil &amp;&amp; len(buf) == 0 {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		panic(&#34;empty buffer in CopyBuffer&#34;)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	return copyBuffer(dst, src, buf)
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// copyBuffer is the actual implementation of Copy and CopyBuffer.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// if buf is nil, one is allocated.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>func copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// If the reader has a WriteTo method, use it to do the copy.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	<span class="comment">// Avoids an allocation and a copy.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	if wt, ok := src.(WriterTo); ok {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		return wt.WriteTo(dst)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	<span class="comment">// Similarly, if the writer has a ReadFrom method, use it to do the copy.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	if rt, ok := dst.(ReaderFrom); ok {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		return rt.ReadFrom(src)
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if buf == nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		size := 32 * 1024
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		if l, ok := src.(*LimitedReader); ok &amp;&amp; int64(size) &gt; l.N {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			if l.N &lt; 1 {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>				size = 1
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			} else {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>				size = int(l.N)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		buf = make([]byte, size)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	for {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		nr, er := src.Read(buf)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		if nr &gt; 0 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			nw, ew := dst.Write(buf[0:nr])
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			if nw &lt; 0 || nr &lt; nw {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>				nw = 0
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>				if ew == nil {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>					ew = errInvalidWrite
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>				}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			written += int64(nw)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			if ew != nil {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>				err = ew
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>				break
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			if nr != nw {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>				err = ErrShortWrite
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>				break
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		if er != nil {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			if er != EOF {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>				err = er
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>			break
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	return written, err
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// LimitReader returns a Reader that reads from r</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span><span class="comment">// but stops with EOF after n bytes.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// The underlying implementation is a *LimitedReader.</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>func LimitReader(r Reader, n int64) Reader { return &amp;LimitedReader{r, n} }
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// A LimitedReader reads from R but limits the amount of</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// data returned to just N bytes. Each call to Read</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// updates N to reflect the new amount remaining.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// Read returns EOF when N &lt;= 0 or when the underlying R returns EOF.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>type LimitedReader struct {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	R Reader <span class="comment">// underlying reader</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	N int64  <span class="comment">// max bytes remaining</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>func (l *LimitedReader) Read(p []byte) (n int, err error) {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	if l.N &lt;= 0 {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		return 0, EOF
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	if int64(len(p)) &gt; l.N {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		p = p[0:l.N]
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	}
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	n, err = l.R.Read(p)
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	l.N -= int64(n)
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	return
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>}
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// NewSectionReader returns a [SectionReader] that reads from r</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// starting at offset off and stops with EOF after n bytes.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	var remaining int64
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	const maxint64 = 1&lt;&lt;63 - 1
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	if off &lt;= maxint64-n {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		remaining = n + off
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	} else {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		<span class="comment">// Overflow, with no way to return error.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		<span class="comment">// Assume we can read up to an offset of 1&lt;&lt;63 - 1.</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		remaining = maxint64
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return &amp;SectionReader{r, off, off, remaining, n}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// SectionReader implements Read, Seek, and ReadAt on a section</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// of an underlying [ReaderAt].</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>type SectionReader struct {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	r     ReaderAt <span class="comment">// constant after creation</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	base  int64    <span class="comment">// constant after creation</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	off   int64
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	limit int64 <span class="comment">// constant after creation</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	n     int64 <span class="comment">// constant after creation</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>func (s *SectionReader) Read(p []byte) (n int, err error) {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if s.off &gt;= s.limit {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return 0, EOF
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	if max := s.limit - s.off; int64(len(p)) &gt; max {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		p = p[0:max]
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	n, err = s.r.ReadAt(p, s.off)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	s.off += int64(n)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	return
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>var errWhence = errors.New(&#34;Seek: invalid whence&#34;)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>var errOffset = errors.New(&#34;Seek: invalid offset&#34;)
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>func (s *SectionReader) Seek(offset int64, whence int) (int64, error) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	switch whence {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	default:
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		return 0, errWhence
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	case SeekStart:
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		offset += s.base
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	case SeekCurrent:
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		offset += s.off
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	case SeekEnd:
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		offset += s.limit
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	if offset &lt; s.base {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		return 0, errOffset
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	s.off = offset
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	return offset - s.base, nil
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>}
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error) {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	if off &lt; 0 || off &gt;= s.Size() {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		return 0, EOF
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	off += s.base
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	if max := s.limit - off; int64(len(p)) &gt; max {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		p = p[0:max]
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		n, err = s.r.ReadAt(p, off)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		if err == nil {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			err = EOF
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		return n, err
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	return s.r.ReadAt(p, off)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// Size returns the size of the section in bytes.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>func (s *SectionReader) Size() int64 { return s.limit - s.base }
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// Outer returns the underlying [ReaderAt] and offsets for the section.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// The returned values are the same that were passed to [NewSectionReader]</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span><span class="comment">// when the [SectionReader] was created.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>func (s *SectionReader) Outer() (r ReaderAt, off int64, n int64) {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return s.r, s.base, s.n
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// An OffsetWriter maps writes at offset base to offset base+off in the underlying writer.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>type OffsetWriter struct {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	w    WriterAt
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	base int64 <span class="comment">// the original offset</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	off  int64 <span class="comment">// the current offset</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// NewOffsetWriter returns an [OffsetWriter] that writes to w</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// starting at offset off.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="selection">func NewOffsetWriter(w WriterAt, off int64) *OffsetWriter</span> {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	return &amp;OffsetWriter{w, off, off}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>func (o *OffsetWriter) Write(p []byte) (n int, err error) {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	n, err = o.w.WriteAt(p, o.off)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	o.off += int64(n)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	return
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>func (o *OffsetWriter) WriteAt(p []byte, off int64) (n int, err error) {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if off &lt; 0 {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		return 0, errOffset
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	off += o.base
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	return o.w.WriteAt(p, off)
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>func (o *OffsetWriter) Seek(offset int64, whence int) (int64, error) {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	switch whence {
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	default:
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		return 0, errWhence
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	case SeekStart:
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		offset += o.base
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	case SeekCurrent:
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		offset += o.off
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if offset &lt; o.base {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		return 0, errOffset
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	o.off = offset
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	return offset - o.base, nil
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// TeeReader returns a [Reader] that writes to w what it reads from r.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// All reads from r performed through it are matched with</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// corresponding writes to w. There is no internal buffering -</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// the write must complete before the read completes.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// Any error encountered while writing is reported as a read error.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>func TeeReader(r Reader, w Writer) Reader {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	return &amp;teeReader{r, w}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>}
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>type teeReader struct {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	r Reader
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	w Writer
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>func (t *teeReader) Read(p []byte) (n int, err error) {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	n, err = t.r.Read(p)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if n, err := t.w.Write(p[:n]); err != nil {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			return n, err
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	return
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span><span class="comment">// Discard is a [Writer] on which all Write calls succeed</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// without doing anything.</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>var Discard Writer = discard{}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>type discard struct{}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// discard implements ReaderFrom as an optimization so Copy to</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// io.Discard can avoid doing unnecessary work.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>var _ ReaderFrom = discard{}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>func (discard) Write(p []byte) (int, error) {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	return len(p), nil
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>func (discard) WriteString(s string) (int, error) {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	return len(s), nil
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>var blackHolePool = sync.Pool{
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	New: func() any {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		b := make([]byte, 8192)
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		return &amp;b
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	},
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>func (discard) ReadFrom(r Reader) (n int64, err error) {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	bufp := blackHolePool.Get().(*[]byte)
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	readSize := 0
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	for {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		readSize, err = r.Read(*bufp)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		n += int64(readSize)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		if err != nil {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			blackHolePool.Put(bufp)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			if err == EOF {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>				return n, nil
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>			return
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>}
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span><span class="comment">// NopCloser returns a [ReadCloser] with a no-op Close method wrapping</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span><span class="comment">// the provided [Reader] r.</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span><span class="comment">// If r implements [WriterTo], the returned [ReadCloser] will implement [WriterTo]</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span><span class="comment">// by forwarding calls to r.</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>func NopCloser(r Reader) ReadCloser {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	if _, ok := r.(WriterTo); ok {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		return nopCloserWriterTo{r}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	return nopCloser{r}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>type nopCloser struct {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	Reader
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>func (nopCloser) Close() error { return nil }
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>type nopCloserWriterTo struct {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	Reader
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>func (nopCloserWriterTo) Close() error { return nil }
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>func (c nopCloserWriterTo) WriteTo(w Writer) (n int64, err error) {
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	return c.Reader.(WriterTo).WriteTo(w)
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// as an error to be reported.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>func ReadAll(r Reader) ([]byte, error) {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	b := make([]byte, 0, 512)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	for {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		n, err := r.Read(b[len(b):cap(b)])
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		b = b[:len(b)+n]
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		if err != nil {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>			if err == EOF {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>				err = nil
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			return b, err
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		if len(b) == cap(b) {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>			<span class="comment">// Add more capacity (let append pick how much).</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			b = append(b, 0)[:len(b)]
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>
</pre><p><a href="io.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
