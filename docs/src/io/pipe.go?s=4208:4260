<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/io/pipe.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./pipe.go?s=4208:4260#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/io">io</a>/<span class="text-muted">pipe.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/io">io</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Pipe adapter to connect code expecting an io.Reader</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// with code expecting an io.Writer.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>package io
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>import (
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// onceError is an object that will only store an error once.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>type onceError struct {
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	sync.Mutex <span class="comment">// guards following</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	err        error
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>}
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>func (a *onceError) Store(err error) {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	a.Lock()
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	defer a.Unlock()
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	if a.err != nil {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>		return
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	a.err = err
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>}
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>func (a *onceError) Load() error {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	a.Lock()
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	defer a.Unlock()
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	return a.err
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// ErrClosedPipe is the error used for read or write operations on a closed pipe.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>var ErrClosedPipe = errors.New(&#34;io: read/write on closed pipe&#34;)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// A pipe is the shared pipe structure underlying PipeReader and PipeWriter.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type pipe struct {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	wrMu sync.Mutex <span class="comment">// Serializes Write operations</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	wrCh chan []byte
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	rdCh chan int
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	once sync.Once <span class="comment">// Protects closing done</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	done chan struct{}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	rerr onceError
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	werr onceError
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (p *pipe) read(b []byte) (n int, err error) {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	select {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	case &lt;-p.done:
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		return 0, p.readCloseError()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	default:
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	select {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	case bw := &lt;-p.wrCh:
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		nr := copy(b, bw)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		p.rdCh &lt;- nr
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return nr, nil
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	case &lt;-p.done:
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		return 0, p.readCloseError()
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func (p *pipe) closeRead(err error) error {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	if err == nil {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		err = ErrClosedPipe
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	p.rerr.Store(err)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	p.once.Do(func() { close(p.done) })
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return nil
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func (p *pipe) write(b []byte) (n int, err error) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	select {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	case &lt;-p.done:
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		return 0, p.writeCloseError()
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	default:
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		p.wrMu.Lock()
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		defer p.wrMu.Unlock()
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	for once := true; once || len(b) &gt; 0; once = false {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		select {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		case p.wrCh &lt;- b:
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>			nw := &lt;-p.rdCh
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>			b = b[nw:]
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			n += nw
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		case &lt;-p.done:
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>			return n, p.writeCloseError()
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	return n, nil
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (p *pipe) closeWrite(err error) error {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if err == nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		err = EOF
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	p.werr.Store(err)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	p.once.Do(func() { close(p.done) })
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	return nil
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// readCloseError is considered internal to the pipe type.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>func (p *pipe) readCloseError() error {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	rerr := p.rerr.Load()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	if werr := p.werr.Load(); rerr == nil &amp;&amp; werr != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		return werr
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	return ErrClosedPipe
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// writeCloseError is considered internal to the pipe type.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func (p *pipe) writeCloseError() error {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	werr := p.werr.Load()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	if rerr := p.rerr.Load(); werr == nil &amp;&amp; rerr != nil {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		return rerr
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return ErrClosedPipe
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// A PipeReader is the read half of a pipe.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>type PipeReader struct{ pipe }
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// Read implements the standard Read interface:</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// it reads data from the pipe, blocking until a writer</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// arrives or the write end is closed.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// If the write end is closed with an error, that error is</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// returned as err; otherwise err is EOF.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (r *PipeReader) Read(data []byte) (n int, err error) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return r.pipe.read(data)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Close closes the reader; subsequent writes to the</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// write half of the pipe will return the error [ErrClosedPipe].</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (r *PipeReader) Close() error {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return r.CloseWithError(nil)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// CloseWithError closes the reader; subsequent writes</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// to the write half of the pipe will return the error err.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// CloseWithError never overwrites the previous error if it exists</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// and always returns nil.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func (r *PipeReader) CloseWithError(err error) error {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return r.pipe.closeRead(err)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// A PipeWriter is the write half of a pipe.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>type PipeWriter struct{ r PipeReader }
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// Write implements the standard Write interface:</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// it writes data to the pipe, blocking until one or more readers</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// have consumed all the data or the read end is closed.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// If the read end is closed with an error, that err is</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// returned as err; otherwise err is [ErrClosedPipe].</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>func (w *PipeWriter) Write(data []byte) (n int, err error) {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	return w.r.pipe.write(data)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// Close closes the writer; subsequent reads from the</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// read half of the pipe will return no bytes and EOF.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func (w *PipeWriter) Close() error {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return w.CloseWithError(nil)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// CloseWithError closes the writer; subsequent reads from the</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// read half of the pipe will return no bytes and the error err,</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// or EOF if err is nil.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// CloseWithError never overwrites the previous error if it exists</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// and always returns nil.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="selection">func (w *PipeWriter) CloseWithError(err error) error</span> {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	return w.r.pipe.closeWrite(err)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// Pipe creates a synchronous in-memory pipe.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// It can be used to connect code expecting an [io.Reader]</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// with code expecting an [io.Writer].</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// Reads and Writes on the pipe are matched one to one</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// except when multiple Reads are needed to consume a single Write.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// That is, each Write to the [PipeWriter] blocks until it has satisfied</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// one or more Reads from the [PipeReader] that fully consume</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// the written data.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// The data is copied directly from the Write to the corresponding</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// Read (or Reads); there is no internal buffering.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// It is safe to call Read and Write in parallel with each other or with Close.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// Parallel calls to Read and parallel calls to Write are also safe:</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// the individual calls will be gated sequentially.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>func Pipe() (*PipeReader, *PipeWriter) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	pw := &amp;PipeWriter{r: PipeReader{pipe: pipe{
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		wrCh: make(chan []byte),
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		rdCh: make(chan int),
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		done: make(chan struct{}),
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}}}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return &amp;pw.r, pw
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
</pre><p><a href="pipe.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
