<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/big/arith.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./arith.go?s=602:616#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/big">big</a>/<span class="text-muted">arith.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/big">math/big</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file provides Go implementations of elementary multi-precision</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// arithmetic operations on word vectors. These have the suffix _g.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// These are needed for platforms without assembly implementations of these routines.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// This file also contains elementary operations that can be implemented</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// sufficiently efficiently in Go.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package big
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import &#34;math/bits&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A Word represents a single digit of a multi-precision unsigned integer.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="selection">type Word uint</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>const (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	_S = _W / 8 <span class="comment">// word size in bytes</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	_W = bits.UintSize <span class="comment">// word size in bits</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	_B = 1 &lt;&lt; _W       <span class="comment">// digit base</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	_M = _B - 1        <span class="comment">// digit mask</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Many of the loops in this file are of the form</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//   for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x) &amp;&amp; i &lt; len(y); i++</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// i &lt; len(z) is the real condition.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// However, checking i &lt; len(x) &amp;&amp; i &lt; len(y) as well is faster than</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// having the compiler do a bounds check in the body of the loop;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// remarkably it is even faster than hoisting the bounds check</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// out of the loop, by doing something like</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//   _, _ = x[len(z)-1], y[len(z)-1]</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// There are other ways to hoist the bounds check out of the loop,</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// but the compiler&#39;s BCE isn&#39;t powerful enough for them (yet?).</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// See the discussion in CL 164966.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// ----------------------------------------------------------------------------</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// Elementary operations on words</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// These operations are used by the vector operations below.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// z1&lt;&lt;_W + z0 = x*y</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func mulWW(x, y Word) (z1, z0 Word) {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	hi, lo := bits.Mul(uint(x), uint(y))
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	return Word(hi), Word(lo)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// z1&lt;&lt;_W + z0 = x*y + c</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func mulAddWWW_g(x, y, c Word) (z1, z0 Word) {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	hi, lo := bits.Mul(uint(x), uint(y))
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	var cc uint
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	lo, cc = bits.Add(lo, uint(c), 0)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	return Word(hi + cc), Word(lo)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// nlz returns the number of leading zeros in x.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Wraps bits.LeadingZeros call for convenience.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func nlz(x Word) uint {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	return uint(bits.LeadingZeros(uint(x)))
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// The resulting carry c is either 0 or 1.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func addVV_g(z, x, y []Word) (c Word) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x) &amp;&amp; i &lt; len(y); i++ {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		zi, cc := bits.Add(uint(x[i]), uint(y[i]), uint(c))
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// The resulting carry c is either 0 or 1.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func subVV_g(z, x, y []Word) (c Word) {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x) &amp;&amp; i &lt; len(y); i++ {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		zi, cc := bits.Sub(uint(x[i]), uint(y[i]), uint(c))
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	return
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// The resulting carry c is either 0 or 1.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func addVW_g(z, x []Word, y Word) (c Word) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	c = y
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		zi, cc := bits.Add(uint(x[i]), uint(c), 0)
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	return
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// addVWlarge is addVW, but intended for large z.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// The only difference is that we check on every iteration</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// whether we are done with carries,</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// and if so, switch to a much faster copy instead.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// This is only a good idea for large z,</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// because the overhead of the check and the function call</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// outweigh the benefits when z is small.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func addVWlarge(z, x []Word, y Word) (c Word) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	c = y
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		if c == 0 {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			copy(z[i:], x[i:])
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			return
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>		}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		zi, cc := bits.Add(uint(x[i]), uint(c), 0)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>func subVW_g(z, x []Word, y Word) (c Word) {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	c = y
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		zi, cc := bits.Sub(uint(x[i]), uint(c), 0)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	return
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// subVWlarge is to subVW as addVWlarge is to addVW.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func subVWlarge(z, x []Word, y Word) (c Word) {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	c = y
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		if c == 0 {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			copy(z[i:], x[i:])
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			return
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		zi, cc := bits.Sub(uint(x[i]), uint(c), 0)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		z[i] = Word(zi)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		c = Word(cc)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	return
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>func shlVU_g(z, x []Word, s uint) (c Word) {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	if s == 0 {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		copy(z, x)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if len(z) == 0 {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		return
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	s &amp;= _W - 1 <span class="comment">// hint to the compiler that shifts by s don&#39;t need guard code</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	ŝ := _W - s
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	ŝ &amp;= _W - 1 <span class="comment">// ditto</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	c = x[len(z)-1] &gt;&gt; ŝ
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	for i := len(z) - 1; i &gt; 0; i-- {
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		z[i] = x[i]&lt;&lt;s | x[i-1]&gt;&gt;ŝ
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	z[0] = x[0] &lt;&lt; s
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	return
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>func shrVU_g(z, x []Word, s uint) (c Word) {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	if s == 0 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		copy(z, x)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if len(z) == 0 {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if len(x) != len(z) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		<span class="comment">// This is an invariant guaranteed by the caller.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		panic(&#34;len(x) != len(z)&#34;)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	s &amp;= _W - 1 <span class="comment">// hint to the compiler that shifts by s don&#39;t need guard code</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	ŝ := _W - s
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	ŝ &amp;= _W - 1 <span class="comment">// ditto</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	c = x[0] &lt;&lt; ŝ
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	for i := 1; i &lt; len(z); i++ {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		z[i-1] = x[i-1]&gt;&gt;s | x[i]&lt;&lt;ŝ
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	z[len(z)-1] = x[len(z)-1] &gt;&gt; s
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func mulAddVWW_g(z, x []Word, y, r Word) (c Word) {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	c = r
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		c, z[i] = mulAddWWW_g(x[i], y, c)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func addMulVVW_g(z, x []Word, y Word) (c Word) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// The comment near the top of this file discusses this for loop condition.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	for i := 0; i &lt; len(z) &amp;&amp; i &lt; len(x); i++ {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		z1, z0 := mulAddWWW_g(x[i], y, z[i])
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		lo, cc := bits.Add(uint(z0), uint(c), 0)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		c, z[i] = Word(cc), Word(lo)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		c += z1
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	return
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// q = ( x1 &lt;&lt; _W + x0 - r)/y. m = floor(( _B^2 - 1 ) / d - _B). Requiring x1&lt;y.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// An approximate reciprocal with a reference to &#34;Improved Division by Invariant Integers</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// (IEEE Transactions on Computers, 11 Jun. 2010)&#34;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func divWW(x1, x0, y, m Word) (q, r Word) {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	s := nlz(y)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if s != 0 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		x1 = x1&lt;&lt;s | x0&gt;&gt;(_W-s)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		x0 &lt;&lt;= s
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		y &lt;&lt;= s
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	d := uint(y)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// We know that</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">//   m = ⎣(B^2-1)/d⎦-B</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">//   ⎣(B^2-1)/d⎦ = m+B</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">//   (B^2-1)/d = m+B+delta1    0 &lt;= delta1 &lt;= (d-1)/d</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">//   B^2/d = m+B+delta2        0 &lt;= delta2 &lt;= 1</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// The quotient we&#39;re trying to compute is</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">//   quotient = ⎣(x1*B+x0)/d⎦</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">//            = ⎣(x1*B*(B^2/d)+x0*(B^2/d))/B^2⎦</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">//            = ⎣(x1*B*(m+B+delta2)+x0*(m+B+delta2))/B^2⎦</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">//            = ⎣(x1*m+x1*B+x0)/B + x0*m/B^2 + delta2*(x1*B+x0)/B^2⎦</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// The latter two terms of this three-term sum are between 0 and 1.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// So we can compute just the first term, and we will be low by at most 2.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	t1, t0 := bits.Mul(uint(m), uint(x1))
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	_, c := bits.Add(t0, uint(x0), 0)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	t1, _ = bits.Add(t1, uint(x1), c)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// The quotient is either t1, t1+1, or t1+2.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// We&#39;ll try t1 and adjust if needed.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	qq := t1
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// compute remainder r=x-d*q.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	dq1, dq0 := bits.Mul(d, qq)
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	r0, b := bits.Sub(uint(x0), dq0, 0)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	r1, _ := bits.Sub(uint(x1), dq1, b)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// The remainder we just computed is bounded above by B+d:</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">// r = x1*B + x0 - d*q.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - d*⎣(x1*m+x1*B+x0)/B⎦</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - d*((x1*m+x1*B+x0)/B-alpha)                                   0 &lt;= alpha &lt; 1</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - x1*d/B*m                         - x1*d - x0*d/B + d*alpha</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - x1*d/B*⎣(B^2-1)/d-B⎦             - x1*d - x0*d/B + d*alpha</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - x1*d/B*⎣(B^2-1)/d-B⎦             - x1*d - x0*d/B + d*alpha</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - x1*d/B*((B^2-1)/d-B-beta)        - x1*d - x0*d/B + d*alpha   0 &lt;= beta &lt; 1</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">//   = x1*B + x0 - x1*B + x1/B + x1*d + x1*d/B*beta - x1*d - x0*d/B + d*alpha</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">//   =        x0        + x1/B        + x1*d/B*beta        - x0*d/B + d*alpha</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">//   = x0*(1-d/B) + x1*(1+d*beta)/B + d*alpha</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">//   &lt;  B*(1-d/B) +  d*B/B          + d          because x0&lt;B (and 1-d/B&gt;0), x1&lt;d, 1+d*beta&lt;=B, alpha&lt;1</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">//   =  B - d     +  d              + d</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">//   = B+d</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// So r1 can only be 0 or 1. If r1 is 1, then we know q was too small.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// Add 1 to q and subtract d from r. That guarantees that r is &lt;B, so</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// we no longer need to keep track of r1.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if r1 != 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		qq++
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		r0 -= d
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// If the remainder is still too large, increment q one more time.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if r0 &gt;= d {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		qq++
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		r0 -= d
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	return Word(qq), Word(r0 &gt;&gt; s)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// reciprocalWord return the reciprocal of the divisor. rec = floor(( _B^2 - 1 ) / u - _B). u = d1 &lt;&lt; nlz(d1).</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func reciprocalWord(d1 Word) Word {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	u := uint(d1 &lt;&lt; nlz(d1))
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	x1 := ^u
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	x0 := uint(_M)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	rec, _ := bits.Div(x1, x0, u) <span class="comment">// (_B^2-1)/U-_B = (_B*(_M-C)+_M)/U</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	return Word(rec)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>
</pre><p><a href="arith.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
