<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/big/floatconv.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./floatconv.go?s=645:695#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/big">big</a>/<span class="text-muted">floatconv.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/big">math/big</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2015 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements string-to-Float conversion functions.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package big
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>var floatZero Float
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// SetString sets z to the value of s and returns z and a boolean indicating</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// success. s must be a floating-point number of the same format as accepted</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// by [Float.Parse], with base argument 0. The entire string (not just a prefix) must</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// be valid for success. If the operation failed, the value of z is undefined</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// but the returned value is nil.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="selection">func (z *Float) SetString(s string) (*Float, bool)</span> {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	if f, _, err := z.Parse(s, 0); err == nil {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>		return f, true
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	return nil, false
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// scan is like Parse but reads the longest possible prefix representing a valid</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// floating point number from an io.ByteScanner rather than a string. It serves</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// as the implementation of Parse. It does not recognize Â±Inf and does not expect</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// EOF at the end.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func (z *Float) scan(r io.ByteScanner, base int) (f *Float, b int, err error) {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	prec := z.prec
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	if prec == 0 {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		prec = 64
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// A reasonable value in case of an error.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	z.form = zero
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// sign</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	z.neg, err = scanSign(r)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	if err != nil {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		return
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// mantissa</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	var fcount int <span class="comment">// fractional digit count; valid if &lt;= 0</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	z.mant, b, fcount, err = z.mant.scan(r, base, true)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	if err != nil {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		return
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// exponent</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	var exp int64
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	var ebase int
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	exp, ebase, err = scanExponent(r, true, base == 0)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	if err != nil {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		return
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// special-case 0</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	if len(z.mant) == 0 {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		z.prec = prec
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		z.acc = Exact
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		z.form = zero
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		f = z
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		return
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// len(z.mant) &gt; 0</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// The mantissa may have a radix point (fcount &lt;= 0) and there</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// may be a nonzero exponent exp. The radix point amounts to a</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// division by b**(-fcount). An exponent means multiplication by</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// ebase**exp. Finally, mantissa normalization (shift left) requires</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// a correcting multiplication by 2**(-shiftcount). Multiplications</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// are commutative, so we can apply them in any order as long as there</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// is no loss of precision. We only have powers of 2 and 10, and</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// we split powers of 10 into the product of the same powers of</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// 2 and 5. This reduces the size of the multiplication factor</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// needed for base-10 exponents.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// normalize mantissa and determine initial exponent contributions</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	exp2 := int64(len(z.mant))*_W - fnorm(z.mant)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	exp5 := int64(0)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// determine binary or decimal exponent contribution of radix point</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	if fcount &lt; 0 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		<span class="comment">// The mantissa has a radix point ddd.dddd; and</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		<span class="comment">// -fcount is the number of digits to the right</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		<span class="comment">// of &#39;.&#39;. Adjust relevant exponent accordingly.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		d := int64(fcount)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		switch b {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		case 10:
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			exp5 = d
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			fallthrough <span class="comment">// 10**e == 5**e * 2**e</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		case 2:
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			exp2 += d
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		case 8:
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			exp2 += d * 3 <span class="comment">// octal digits are 3 bits each</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		case 16:
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			exp2 += d * 4 <span class="comment">// hexadecimal digits are 4 bits each</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		default:
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			panic(&#34;unexpected mantissa base&#34;)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		<span class="comment">// fcount consumed - not needed anymore</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// take actual exponent into account</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	switch ebase {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	case 10:
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		exp5 += exp
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		fallthrough <span class="comment">// see fallthrough above</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	case 2:
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		exp2 += exp
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	default:
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		panic(&#34;unexpected exponent base&#34;)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// exp consumed - not needed anymore</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// apply 2**exp2</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	if MinExp &lt;= exp2 &amp;&amp; exp2 &lt;= MaxExp {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		z.prec = prec
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		z.form = finite
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		z.exp = int32(exp2)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		f = z
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	} else {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;exponent overflow&#34;)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		return
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	if exp5 == 0 {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		<span class="comment">// no decimal exponent contribution</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		z.round(0)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		return
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// exp5 != 0</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// apply 5**exp5</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	p := new(Float).SetPrec(z.Prec() + 64) <span class="comment">// use more bits for p -- TODO(gri) what is the right number?</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if exp5 &lt; 0 {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		z.Quo(z, p.pow5(uint64(-exp5)))
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	} else {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		z.Mul(z, p.pow5(uint64(exp5)))
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// These powers of 5 fit into a uint64.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">//	for p, q := uint64(0), uint64(1); p &lt; q; p, q = q, q*5 {</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//		fmt.Println(q)</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>var pow5tab = [...]uint64{
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	1,
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	5,
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	25,
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	125,
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	625,
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	3125,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	15625,
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	78125,
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	390625,
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	1953125,
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	9765625,
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	48828125,
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	244140625,
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	1220703125,
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	6103515625,
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	30517578125,
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	152587890625,
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	762939453125,
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	3814697265625,
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	19073486328125,
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	95367431640625,
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	476837158203125,
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	2384185791015625,
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	11920928955078125,
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	59604644775390625,
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	298023223876953125,
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	1490116119384765625,
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	7450580596923828125,
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// pow5 sets z to 5**n and returns z.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// n must not be negative.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (z *Float) pow5(n uint64) *Float {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	const m = uint64(len(pow5tab) - 1)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if n &lt;= m {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		return z.SetUint64(pow5tab[n])
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// n &gt; m</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	z.SetUint64(pow5tab[m])
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	n -= m
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// use more bits for f than for z</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// TODO(gri) what is the right number?</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	f := new(Float).SetPrec(z.Prec() + 64).SetUint64(5)
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	for n &gt; 0 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		if n&amp;1 != 0 {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			z.Mul(z, f)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		f.Mul(f, f)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		n &gt;&gt;= 1
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return z
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// Parse parses s which must contain a text representation of a floating-</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// point number with a mantissa in the given conversion base (the exponent</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// is always a decimal number), or a string representing an infinite value.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// For base 0, an underscore character â_â may appear between a base</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// prefix and an adjacent digit, and between successive digits; such</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// underscores do not change the value of the number, or the returned</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// digit count. Incorrect placement of underscores is reported as an</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// error if there are no other errors. If base != 0, underscores are</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// not recognized and thus terminate scanning like any other character</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// that is not a valid radix point or digit.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// It sets z to the (possibly rounded) value of the corresponding floating-</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// point value, and returns z, the actual base b, and an error err, if any.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// The entire string (not just a prefix) must be consumed for success.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// If z&#39;s precision is 0, it is changed to 64 before rounding takes effect.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// The number must be of the form:</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//	number    = [ sign ] ( float | &#34;inf&#34; | &#34;Inf&#34; ) .</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">//	sign      = &#34;+&#34; | &#34;-&#34; .</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">//	float     = ( mantissa | prefix pmantissa ) [ exponent ] .</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">//	prefix    = &#34;0&#34; [ &#34;b&#34; | &#34;B&#34; | &#34;o&#34; | &#34;O&#34; | &#34;x&#34; | &#34;X&#34; ] .</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">//	mantissa  = digits &#34;.&#34; [ digits ] | digits | &#34;.&#34; digits .</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">//	pmantissa = [ &#34;_&#34; ] digits &#34;.&#34; [ digits ] | [ &#34;_&#34; ] digits | &#34;.&#34; digits .</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">//	exponent  = ( &#34;e&#34; | &#34;E&#34; | &#34;p&#34; | &#34;P&#34; ) [ sign ] digits .</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">//	digits    = digit { [ &#34;_&#34; ] digit } .</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">//	digit     = &#34;0&#34; ... &#34;9&#34; | &#34;a&#34; ... &#34;z&#34; | &#34;A&#34; ... &#34;Z&#34; .</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// The base argument must be 0, 2, 8, 10, or 16. Providing an invalid base</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// argument will lead to a run-time panic.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// For base 0, the number prefix determines the actual base: A prefix of</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// â0bâ or â0Bâ selects base 2, â0oâ or â0Oâ selects base 8, and</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// â0xâ or â0Xâ selects base 16. Otherwise, the actual base is 10 and</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// no prefix is accepted. The octal prefix &#34;0&#34; is not supported (a leading</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// &#34;0&#34; is simply considered a &#34;0&#34;).</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// A &#34;p&#34; or &#34;P&#34; exponent indicates a base 2 (rather than base 10) exponent;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// for instance, &#34;0x1.fffffffffffffp1023&#34; (using base 0) represents the</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// maximum float64 value. For hexadecimal mantissae, the exponent character</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// must be one of &#39;p&#39; or &#39;P&#39;, if present (an &#34;e&#34; or &#34;E&#34; exponent indicator</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">// cannot be distinguished from a mantissa digit).</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// The returned *Float f is nil and the value of z is valid but not</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// defined if an error is reported.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>func (z *Float) Parse(s string, base int) (f *Float, b int, err error) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// scan doesn&#39;t handle Â±Inf</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if len(s) == 3 &amp;&amp; (s == &#34;Inf&#34; || s == &#34;inf&#34;) {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		f = z.SetInf(false)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		return
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if len(s) == 4 &amp;&amp; (s[0] == &#39;+&#39; || s[0] == &#39;-&#39;) &amp;&amp; (s[1:] == &#34;Inf&#34; || s[1:] == &#34;inf&#34;) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		f = z.SetInf(s[0] == &#39;-&#39;)
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		return
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	r := strings.NewReader(s)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	if f, b, err = z.scan(r, base); err != nil {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// entire string must have been consumed</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	if ch, err2 := r.ReadByte(); err2 == nil {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		err = fmt.Errorf(&#34;expected end of string, found %q&#34;, ch)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	} else if err2 != io.EOF {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		err = err2
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	return
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// ParseFloat is like f.Parse(s, base) with f set to the given precision</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// and rounding mode.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>func ParseFloat(s string, base int, prec uint, mode RoundingMode) (f *Float, b int, err error) {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	return new(Float).SetPrec(prec).SetMode(mode).Parse(s, base)
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>}
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>var _ fmt.Scanner = (*Float)(nil) <span class="comment">// *Float must implement fmt.Scanner</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// Scan is a support routine for [fmt.Scanner]; it sets z to the value of</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// the scanned number. It accepts formats whose verbs are supported by</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// [fmt.Scan] for floating point values, which are:</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// &#39;b&#39; (binary), &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;F&#39;, &#39;g&#39; and &#39;G&#39;.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// Scan doesn&#39;t handle Â±Inf.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func (z *Float) Scan(s fmt.ScanState, ch rune) error {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	s.SkipSpace()
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	_, _, err := z.scan(byteReader{s}, 0)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return err
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
</pre><p><a href="floatconv.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
