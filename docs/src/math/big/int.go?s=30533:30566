<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/big/int.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./int.go?s=30533:30566#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/big">big</a>/<span class="text-muted">int.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/big">math/big</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// This file implements signed multi-precision integers.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package big
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;math/rand&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// An Int represents a signed multi-precision integer.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// The zero value for an Int represents the value 0.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Operations always take pointer arguments (*Int) rather</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// than Int values, and each unique Int value requires</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// its own unique *Int pointer. To &#34;copy&#34; an Int value,</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// an existing (or newly allocated) Int must be set to</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// a new value using the [Int.Set] method; shallow copies</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// of Ints are not supported and may lead to errors.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Note that methods may leak the Int&#39;s value through timing side-channels.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Because of this and because of the scope and complexity of the</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// implementation, Int is not well-suited to implement cryptographic operations.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// The standard library avoids exposing non-trivial Int methods to</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// attacker-controlled inputs and the determination of whether a bug in math/big</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// is considered a security vulnerability might depend on the impact on the</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// standard library.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>type Int struct {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	neg bool <span class="comment">// sign</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	abs nat  <span class="comment">// absolute value of the integer</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>var intOne = &amp;Int{false, natOne}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// Sign returns:</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	-1 if x &lt;  0</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//	 0 if x == 0</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//	+1 if x &gt;  0</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func (x *Int) Sign() int {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// This function is used in cryptographic operations. It must not leak</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// anything but the Int&#39;s sign and bit size through side-channels. Any</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// changes must be reviewed by a security expert.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	if len(x.abs) == 0 {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		return 0
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	if x.neg {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		return -1
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	return 1
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// SetInt64 sets z to x and returns z.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func (z *Int) SetInt64(x int64) *Int {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	neg := false
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		neg = true
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		x = -x
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	z.abs = z.abs.setUint64(uint64(x))
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	z.neg = neg
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	return z
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// SetUint64 sets z to x and returns z.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func (z *Int) SetUint64(x uint64) *Int {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	z.abs = z.abs.setUint64(x)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	z.neg = false
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	return z
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// NewInt allocates and returns a new [Int] set to x.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func NewInt(x int64) *Int {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// This code is arranged to be inlineable and produce</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// zero allocations when inlined. See issue 29951.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	u := uint64(x)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		u = -u
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	var abs []Word
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if x == 0 {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	} else if _W == 32 &amp;&amp; u&gt;&gt;32 != 0 {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		abs = []Word{Word(u), Word(u &gt;&gt; 32)}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	} else {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>		abs = []Word{Word(u)}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return &amp;Int{neg: x &lt; 0, abs: abs}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Set sets z to x and returns z.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (z *Int) Set(x *Int) *Int {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	if z != x {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		z.abs = z.abs.set(x.abs)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		z.neg = x.neg
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return z
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// Bits provides raw (unchecked but fast) access to x by returning its</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// absolute value as a little-endian [Word] slice. The result and x share</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// the same underlying array.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// Bits is intended to support implementation of missing low-level [Int]</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// functionality outside this package; it should be avoided otherwise.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func (x *Int) Bits() []Word {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// This function is used in cryptographic operations. It must not leak</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// anything but the Int&#39;s sign and bit size through side-channels. Any</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// changes must be reviewed by a security expert.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	return x.abs
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// SetBits provides raw (unchecked but fast) access to z by setting its</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// value to abs, interpreted as a little-endian [Word] slice, and returning</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// z. The result and abs share the same underlying array.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// SetBits is intended to support implementation of missing low-level [Int]</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// functionality outside this package; it should be avoided otherwise.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (z *Int) SetBits(abs []Word) *Int {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	z.abs = nat(abs).norm()
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	z.neg = false
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	return z
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// Abs sets z to |x| (the absolute value of x) and returns z.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (z *Int) Abs(x *Int) *Int {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	z.Set(x)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	z.neg = false
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return z
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// Neg sets z to -x and returns z.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (z *Int) Neg(x *Int) *Int {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	z.Set(x)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; !z.neg <span class="comment">// 0 has no sign</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	return z
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// Add sets z to the sum x+y and returns z.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>func (z *Int) Add(x, y *Int) *Int {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	neg := x.neg
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	if x.neg == y.neg {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		<span class="comment">// x + y == x + y</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// (-x) + (-y) == -(x + y)</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		z.abs = z.abs.add(x.abs, y.abs)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	} else {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		<span class="comment">// x + (-y) == x - y == -(y - x)</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		<span class="comment">// (-x) + y == y - x == -(x - y)</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		if x.abs.cmp(y.abs) &gt;= 0 {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>			z.abs = z.abs.sub(x.abs, y.abs)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		} else {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			neg = !neg
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			z.abs = z.abs.sub(y.abs, x.abs)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; neg <span class="comment">// 0 has no sign</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	return z
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// Sub sets z to the difference x-y and returns z.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (z *Int) Sub(x, y *Int) *Int {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	neg := x.neg
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	if x.neg != y.neg {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		<span class="comment">// x - (-y) == x + y</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		<span class="comment">// (-x) - y == -(x + y)</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		z.abs = z.abs.add(x.abs, y.abs)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	} else {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		<span class="comment">// x - y == x - y == -(y - x)</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		<span class="comment">// (-x) - (-y) == y - x == -(x - y)</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		if x.abs.cmp(y.abs) &gt;= 0 {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>			z.abs = z.abs.sub(x.abs, y.abs)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		} else {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>			neg = !neg
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			z.abs = z.abs.sub(y.abs, x.abs)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; neg <span class="comment">// 0 has no sign</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return z
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// Mul sets z to the product x*y and returns z.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (z *Int) Mul(x, y *Int) *Int {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// x * y == x * y</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// x * (-y) == -(x * y)</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// (-x) * y == -(x * y)</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// (-x) * (-y) == x * y</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if x == y {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		z.abs = z.abs.sqr(x.abs)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		z.neg = false
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		return z
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	z.abs = z.abs.mul(x.abs, y.abs)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg <span class="comment">// 0 has no sign</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return z
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// MulRange sets z to the product of all integers</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// in the range [a, b] inclusively and returns z.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// If a &gt; b (empty range), the result is 1.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>func (z *Int) MulRange(a, b int64) *Int {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	switch {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	case a &gt; b:
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return z.SetInt64(1) <span class="comment">// empty range</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	case a &lt;= 0 &amp;&amp; b &gt;= 0:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return z.SetInt64(0) <span class="comment">// range includes 0</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// a &lt;= b &amp;&amp; (b &lt; 0 || a &gt; 0)</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	neg := false
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	if a &lt; 0 {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		neg = (b-a)&amp;1 == 0
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		a, b = -b, -a
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	z.abs = z.abs.mulRange(uint64(a), uint64(b))
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	z.neg = neg
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	return z
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// Binomial sets z to the binomial coefficient C(n, k) and returns z.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (z *Int) Binomial(n, k int64) *Int {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	if k &gt; n {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return z.SetInt64(0)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// reduce the number of multiplications by reducing k</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if k &gt; n-k {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		k = n - k <span class="comment">// C(n, k) == C(n, n-k)</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// C(n, k) == n * (n-1) * ... * (n-k+1) / k * (k-1) * ... * 1</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">//         == n * (n-1) * ... * (n-k+1) / 1 * (1+1) * ... * k</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// Using the multiplicative formula produces smaller values</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// at each step, requiring fewer allocations and computations:</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// z = 1</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// for i := 0; i &lt; k; i = i+1 {</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">//     z *= n-i</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">//     z /= i+1</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// }</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	<span class="comment">// finally to avoid computing i+1 twice per loop:</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// z = 1</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// i := 0</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// for i &lt; k {</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">//     z *= n-i</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">//     i++</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">//     z /= i</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// }</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	var N, K, i, t Int
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	N.SetInt64(n)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	K.SetInt64(k)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	z.Set(intOne)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	for i.Cmp(&amp;K) &lt; 0 {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		z.Mul(z, t.Sub(&amp;N, &amp;i))
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		i.Add(&amp;i, intOne)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		z.Quo(z, &amp;i)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	return z
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// Quo sets z to the quotient x/y for y != 0 and returns z.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// Quo implements truncated division (like Go); see [Int.QuoRem] for more details.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>func (z *Int) Quo(x, y *Int) *Int {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	z.abs, _ = z.abs.div(nil, x.abs, y.abs)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg <span class="comment">// 0 has no sign</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return z
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// Rem sets z to the remainder x%y for y != 0 and returns z.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// Rem implements truncated modulus (like Go); see [Int.QuoRem] for more details.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func (z *Int) Rem(x, y *Int) *Int {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	_, z.abs = nat(nil).div(z.abs, x.abs, y.abs)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg <span class="comment">// 0 has no sign</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	return z
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// QuoRem sets z to the quotient x/y and r to the remainder x%y</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// and returns the pair (z, r) for y != 0.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// QuoRem implements T-division and modulus (like Go):</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">//	q = x/y      with the result truncated to zero</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">//	r = x - y*q</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// (See Daan Leijen, “Division and Modulus for Computer Scientists”.)</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// See DivMod for Euclidean division and modulus (unlike Go).</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int) {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	z.abs, r.abs = z.abs.div(r.abs, x.abs, y.abs)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	z.neg, r.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg, len(r.abs) &gt; 0 &amp;&amp; x.neg <span class="comment">// 0 has no sign</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return z, r
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// Div sets z to the quotient x/y for y != 0 and returns z.</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Div implements Euclidean division (unlike Go); see [Int.DivMod] for more details.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func (z *Int) Div(x, y *Int) *Int {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	y_neg := y.neg <span class="comment">// z may be an alias for y</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	var r Int
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	z.QuoRem(x, y, &amp;r)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	if r.neg {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		if y_neg {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>			z.Add(z, intOne)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		} else {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			z.Sub(z, intOne)
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	return z
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// Mod sets z to the modulus x%y for y != 0 and returns z.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// Mod implements Euclidean modulus (unlike Go); see [Int.DivMod] for more details.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>func (z *Int) Mod(x, y *Int) *Int {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	y0 := y <span class="comment">// save y</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if z == y || alias(z.abs, y.abs) {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		y0 = new(Int).Set(y)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	var q Int
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	q.QuoRem(x, y, z)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	if z.neg {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if y0.neg {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			z.Sub(z, y0)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		} else {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>			z.Add(z, y0)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return z
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// DivMod sets z to the quotient x div y and m to the modulus x mod y</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// and returns the pair (z, m) for y != 0.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// DivMod implements Euclidean division and modulus (unlike Go):</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">//	q = x div y  such that</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">//	m = x - y*q  with 0 &lt;= m &lt; |y|</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// (See Raymond T. Boute, “The Euclidean definition of the functions</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// div and mod”. ACM Transactions on Programming Languages and</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// Systems (TOPLAS), 14(2):127-144, New York, NY, USA, 4/1992.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// ACM press.)</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// See [Int.QuoRem] for T-division and modulus (like Go).</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>func (z *Int) DivMod(x, y, m *Int) (*Int, *Int) {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	y0 := y <span class="comment">// save y</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	if z == y || alias(z.abs, y.abs) {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		y0 = new(Int).Set(y)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	z.QuoRem(x, y, m)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if m.neg {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if y0.neg {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			z.Add(z, intOne)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			m.Sub(m, y0)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		} else {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			z.Sub(z, intOne)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			m.Add(m, y0)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return z, m
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// Cmp compares x and y and returns:</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">//	-1 if x &lt;  y</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">//	 0 if x == y</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">//	+1 if x &gt;  y</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func (x *Int) Cmp(y *Int) (r int) {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">// x cmp y == x cmp y</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	<span class="comment">// x cmp (-y) == x</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	<span class="comment">// (-x) cmp y == y</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	<span class="comment">// (-x) cmp (-y) == -(x cmp y)</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	switch {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	case x == y:
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		<span class="comment">// nothing to do</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	case x.neg == y.neg:
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		r = x.abs.cmp(y.abs)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		if x.neg {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			r = -r
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	case x.neg:
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		r = -1
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	default:
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		r = 1
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	return
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// CmpAbs compares the absolute values of x and y and returns:</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">//	-1 if |x| &lt;  |y|</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">//	 0 if |x| == |y|</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">//	+1 if |x| &gt;  |y|</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func (x *Int) CmpAbs(y *Int) int {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	return x.abs.cmp(y.abs)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// low32 returns the least significant 32 bits of x.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>func low32(x nat) uint32 {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	if len(x) == 0 {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		return 0
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	return uint32(x[0])
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// low64 returns the least significant 64 bits of x.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>func low64(x nat) uint64 {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	if len(x) == 0 {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return 0
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	v := uint64(x[0])
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if _W == 32 &amp;&amp; len(x) &gt; 1 {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		return uint64(x[1])&lt;&lt;32 | v
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	return v
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// Int64 returns the int64 representation of x.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// If x cannot be represented in an int64, the result is undefined.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func (x *Int) Int64() int64 {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	v := int64(low64(x.abs))
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if x.neg {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		v = -v
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	return v
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// Uint64 returns the uint64 representation of x.</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// If x cannot be represented in a uint64, the result is undefined.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>func (x *Int) Uint64() uint64 {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	return low64(x.abs)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// IsInt64 reports whether x can be represented as an int64.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>func (x *Int) IsInt64() bool {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	if len(x.abs) &lt;= 64/_W {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		w := int64(low64(x.abs))
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		return w &gt;= 0 || x.neg &amp;&amp; w == -w
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	return false
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// IsUint64 reports whether x can be represented as a uint64.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>func (x *Int) IsUint64() bool {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	return !x.neg &amp;&amp; len(x.abs) &lt;= 64/_W
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// Float64 returns the float64 value nearest x,</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// and an indication of any rounding that occurred.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>func (x *Int) Float64() (float64, Accuracy) {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	n := x.abs.bitLen() <span class="comment">// NB: still uses slow crypto impl!</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	if n == 0 {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		return 0.0, Exact
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">// Fast path: no more than 53 significant bits.</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	if n &lt;= 53 || n &lt; 64 &amp;&amp; n-int(x.abs.trailingZeroBits()) &lt;= 53 {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		f := float64(low64(x.abs))
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		if x.neg {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			f = -f
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		return f, Exact
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	return new(Float).SetInt(x).Float64()
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// SetString sets z to the value of s, interpreted in the given base,</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// and returns z and a boolean indicating success. The entire string</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// (not just a prefix) must be valid for success. If SetString fails,</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// the value of z is undefined but the returned value is nil.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// The base argument must be 0 or a value between 2 and [MaxBase].</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// For base 0, the number prefix determines the actual base: A prefix of</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// “0b” or “0B” selects base 2, “0”, “0o” or “0O” selects base 8,</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// and “0x” or “0X” selects base 16. Otherwise, the selected base is 10</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// and no prefix is accepted.</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// For bases &lt;= 36, lower and upper case letters are considered the same:</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// The letters &#39;a&#39; to &#39;z&#39; and &#39;A&#39; to &#39;Z&#39; represent digit values 10 to 35.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// For bases &gt; 36, the upper case letters &#39;A&#39; to &#39;Z&#39; represent the digit</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// values 36 to 61.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// For base 0, an underscore character “_” may appear between a base</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// prefix and an adjacent digit, and between successive digits; such</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// underscores do not change the value of the number.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// Incorrect placement of underscores is reported as an error if there</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// are no other errors. If base != 0, underscores are not recognized</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// and act like any other character that is not a valid digit.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (z *Int) SetString(s string, base int) (*Int, bool) {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return z.setFromScanner(strings.NewReader(s), base)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// setFromScanner implements SetString given an io.ByteScanner.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// For documentation see comments of SetString.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (z *Int) setFromScanner(r io.ByteScanner, base int) (*Int, bool) {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	if _, _, err := z.scan(r, base); err != nil {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		return nil, false
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	<span class="comment">// entire content must have been consumed</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	if _, err := r.ReadByte(); err != io.EOF {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return nil, false
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	return z, true <span class="comment">// err == io.EOF =&gt; scan consumed all content of r</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>}
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// SetBytes interprets buf as the bytes of a big-endian unsigned</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// integer, sets z to that value, and returns z.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>func (z *Int) SetBytes(buf []byte) *Int {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	z.abs = z.abs.setBytes(buf)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	z.neg = false
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	return z
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// Bytes returns the absolute value of x as a big-endian byte slice.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span><span class="comment">// To use a fixed length slice, or a preallocated one, use [Int.FillBytes].</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>func (x *Int) Bytes() []byte {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// This function is used in cryptographic operations. It must not leak</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	<span class="comment">// anything but the Int&#39;s sign and bit size through side-channels. Any</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	<span class="comment">// changes must be reviewed by a security expert.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	buf := make([]byte, len(x.abs)*_S)
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	return buf[x.abs.bytes(buf):]
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span><span class="comment">// FillBytes sets buf to the absolute value of x, storing it as a zero-extended</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// big-endian byte slice, and returns buf.</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// If the absolute value of x doesn&#39;t fit in buf, FillBytes will panic.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>func (x *Int) FillBytes(buf []byte) []byte {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	<span class="comment">// Clear whole buffer. (This gets optimized into a memclr.)</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	for i := range buf {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		buf[i] = 0
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	x.abs.bytes(buf)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	return buf
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span><span class="comment">// BitLen returns the length of the absolute value of x in bits.</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">// The bit length of 0 is 0.</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>func (x *Int) BitLen() int {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	<span class="comment">// This function is used in cryptographic operations. It must not leak</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">// anything but the Int&#39;s sign and bit size through side-channels. Any</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">// changes must be reviewed by a security expert.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	return x.abs.bitLen()
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span><span class="comment">// TrailingZeroBits returns the number of consecutive least significant zero</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// bits of |x|.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>func (x *Int) TrailingZeroBits() uint {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	return x.abs.trailingZeroBits()
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// Exp sets z = x**y mod |m| (i.e. the sign of m is ignored), and returns z.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">// If m == nil or m == 0, z = x**y unless y &lt;= 0 then z = 1. If m != 0, y &lt; 0,</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// and x and m are not relatively prime, z is unchanged and nil is returned.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// Modular exponentiation of inputs of a particular size is not a</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span><span class="comment">// cryptographically constant-time operation.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>func (z *Int) Exp(x, y, m *Int) *Int {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return z.exp(x, y, m, false)
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>func (z *Int) expSlow(x, y, m *Int) *Int {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	return z.exp(x, y, m, true)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func (z *Int) exp(x, y, m *Int, slow bool) *Int {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	<span class="comment">// See Knuth, volume 2, section 4.6.3.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	xWords := x.abs
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	if y.neg {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		if m == nil || len(m.abs) == 0 {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>			return z.SetInt64(1)
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		<span class="comment">// for y &lt; 0: x**y mod m == (x**(-1))**|y| mod m</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		inverse := new(Int).ModInverse(x, m)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if inverse == nil {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			return nil
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		xWords = inverse.abs
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	}
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	yWords := y.abs
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	var mWords nat
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	if m != nil {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		if z == m || alias(z.abs, m.abs) {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			m = new(Int).Set(m)
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		}
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		mWords = m.abs <span class="comment">// m.abs may be nil for m == 0</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	z.abs = z.abs.expNN(xWords, yWords, mWords, slow)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg &amp;&amp; len(yWords) &gt; 0 &amp;&amp; yWords[0]&amp;1 == 1 <span class="comment">// 0 has no sign</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if z.neg &amp;&amp; len(mWords) &gt; 0 {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		<span class="comment">// make modulus result positive</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		z.abs = z.abs.sub(mWords, z.abs) <span class="comment">// z == x**y mod |m| &amp;&amp; 0 &lt;= z &lt; |m|</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		z.neg = false
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	return z
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span><span class="comment">// GCD sets z to the greatest common divisor of a and b and returns z.</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span><span class="comment">// If x or y are not nil, GCD sets their value such that z = a*x + b*y.</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">// a and b may be positive, zero or negative. (Before Go 1.14 both had</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// to be &gt; 0.) Regardless of the signs of a and b, z is always &gt;= 0.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// If a == b == 0, GCD sets z = x = y = 0.</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// If a == 0 and b != 0, GCD sets z = |b|, x = 0, y = sign(b) * 1.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span><span class="comment">// If a != 0 and b == 0, GCD sets z = |a|, x = sign(a) * 1, y = 0.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>func (z *Int) GCD(x, y, a, b *Int) *Int {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	if len(a.abs) == 0 || len(b.abs) == 0 {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		lenA, lenB, negA, negB := len(a.abs), len(b.abs), a.neg, b.neg
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		if lenA == 0 {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>			z.Set(b)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		} else {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			z.Set(a)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		z.neg = false
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		if x != nil {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			if lenA == 0 {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>				x.SetUint64(0)
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			} else {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>				x.SetUint64(1)
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>				x.neg = negA
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		if y != nil {
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>			if lenB == 0 {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>				y.SetUint64(0)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			} else {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>				y.SetUint64(1)
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				y.neg = negB
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		return z
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	return z.lehmerGCD(x, y, a, b)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span><span class="comment">// lehmerSimulate attempts to simulate several Euclidean update steps</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// using the leading digits of A and B.  It returns u0, u1, v0, v1</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// such that A and B can be updated as:</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">//	A = u0*A + v0*B</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">//	B = u1*A + v1*B</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// Requirements: A &gt;= B and len(B.abs) &gt;= 2</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span><span class="comment">// Since we are calculating with full words to avoid overflow,</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span><span class="comment">// we use &#39;even&#39; to track the sign of the cosequences.</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// For even iterations: u0, v1 &gt;= 0 &amp;&amp; u1, v0 &lt;= 0</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">// For odd  iterations: u0, v1 &lt;= 0 &amp;&amp; u1, v0 &gt;= 0</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>func lehmerSimulate(A, B *Int) (u0, u1, v0, v1 Word, even bool) {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>	<span class="comment">// initialize the digits</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	var a1, a2, u2, v2 Word
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	m := len(B.abs) <span class="comment">// m &gt;= 2</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	n := len(A.abs) <span class="comment">// n &gt;= m &gt;= 2</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	<span class="comment">// extract the top Word of bits from A and B</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	h := nlz(A.abs[n-1])
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	a1 = A.abs[n-1]&lt;&lt;h | A.abs[n-2]&gt;&gt;(_W-h)
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	<span class="comment">// B may have implicit zero words in the high bits if the lengths differ</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	switch {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	case n == m:
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		a2 = B.abs[n-1]&lt;&lt;h | B.abs[n-2]&gt;&gt;(_W-h)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	case n == m+1:
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		a2 = B.abs[n-2] &gt;&gt; (_W - h)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	default:
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		a2 = 0
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	}
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	<span class="comment">// Since we are calculating with full words to avoid overflow,</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	<span class="comment">// we use &#39;even&#39; to track the sign of the cosequences.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	<span class="comment">// For even iterations: u0, v1 &gt;= 0 &amp;&amp; u1, v0 &lt;= 0</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	<span class="comment">// For odd  iterations: u0, v1 &lt;= 0 &amp;&amp; u1, v0 &gt;= 0</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	<span class="comment">// The first iteration starts with k=1 (odd).</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	even = false
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	<span class="comment">// variables to track the cosequences</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	u0, u1, u2 = 0, 1, 0
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	v0, v1, v2 = 0, 0, 1
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	<span class="comment">// Calculate the quotient and cosequences using Collins&#39; stopping condition.</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	<span class="comment">// Note that overflow of a Word is not possible when computing the remainder</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	<span class="comment">// sequence and cosequences since the cosequence size is bounded by the input size.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	<span class="comment">// See section 4.2 of Jebelean for details.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	for a2 &gt;= v2 &amp;&amp; a1-a2 &gt;= v1+v2 {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		q, r := a1/a2, a1%a2
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		a1, a2 = a2, r
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		u0, u1, u2 = u1, u2, u1+q*u2
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		v0, v1, v2 = v1, v2, v1+q*v2
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		even = !even
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	return
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>}
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">// lehmerUpdate updates the inputs A and B such that:</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">//	A = u0*A + v0*B</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span><span class="comment">//	B = u1*A + v1*B</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// where the signs of u0, u1, v0, v1 are given by even</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">// For even == true: u0, v1 &gt;= 0 &amp;&amp; u1, v0 &lt;= 0</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// For even == false: u0, v1 &lt;= 0 &amp;&amp; u1, v0 &gt;= 0</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">// q, r, s, t are temporary variables to avoid allocations in the multiplication.</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>func lehmerUpdate(A, B, q, r, s, t *Int, u0, u1, v0, v1 Word, even bool) {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	t.abs = t.abs.setWord(u0)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	s.abs = s.abs.setWord(v0)
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	t.neg = !even
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	s.neg = even
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	t.Mul(A, t)
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	s.Mul(B, s)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	r.abs = r.abs.setWord(u1)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	q.abs = q.abs.setWord(v1)
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	r.neg = even
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	q.neg = !even
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	r.Mul(A, r)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	q.Mul(B, q)
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	A.Add(t, s)
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	B.Add(r, q)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// euclidUpdate performs a single step of the Euclidean GCD algorithm</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// if extended is true, it also updates the cosequence Ua, Ub.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>func euclidUpdate(A, B, Ua, Ub, q, r, s, t *Int, extended bool) {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	q, r = q.QuoRem(A, B, r)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	*A, *B, *r = *B, *r, *A
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	if extended {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		<span class="comment">// Ua, Ub = Ub, Ua - q*Ub</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>		t.Set(Ub)
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>		s.Mul(Ub, q)
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		Ub.Sub(Ua, s)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		Ua.Set(t)
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span><span class="comment">// lehmerGCD sets z to the greatest common divisor of a and b,</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span><span class="comment">// which both must be != 0, and returns z.</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span><span class="comment">// If x or y are not nil, their values are set such that z = a*x + b*y.</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span><span class="comment">// See Knuth, The Art of Computer Programming, Vol. 2, Section 4.5.2, Algorithm L.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">// This implementation uses the improved condition by Collins requiring only one</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">// quotient and avoiding the possibility of single Word overflow.</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// See Jebelean, &#34;Improving the multiprecision Euclidean algorithm&#34;,</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">// Design and Implementation of Symbolic Computation Systems, pp 45-58.</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span><span class="comment">// The cosequences are updated according to Algorithm 10.45 from</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// Cohen et al. &#34;Handbook of Elliptic and Hyperelliptic Curve Cryptography&#34; pp 192.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>func (z *Int) lehmerGCD(x, y, a, b *Int) *Int {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	var A, B, Ua, Ub *Int
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	A = new(Int).Abs(a)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	B = new(Int).Abs(b)
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	extended := x != nil || y != nil
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	if extended {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		<span class="comment">// Ua (Ub) tracks how many times input a has been accumulated into A (B).</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		Ua = new(Int).SetInt64(1)
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		Ub = new(Int)
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	<span class="comment">// temp variables for multiprecision update</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	q := new(Int)
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	r := new(Int)
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	s := new(Int)
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	t := new(Int)
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	<span class="comment">// ensure A &gt;= B</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	if A.abs.cmp(B.abs) &lt; 0 {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		A, B = B, A
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		Ub, Ua = Ua, Ub
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	<span class="comment">// loop invariant A &gt;= B</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	for len(B.abs) &gt; 1 {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		<span class="comment">// Attempt to calculate in single-precision using leading words of A and B.</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		u0, u1, v0, v1, even := lehmerSimulate(A, B)
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		<span class="comment">// multiprecision Step</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		if v0 != 0 {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>			<span class="comment">// Simulate the effect of the single-precision steps using the cosequences.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			<span class="comment">// A = u0*A + v0*B</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>			<span class="comment">// B = u1*A + v1*B</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			lehmerUpdate(A, B, q, r, s, t, u0, u1, v0, v1, even)
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			if extended {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>				<span class="comment">// Ua = u0*Ua + v0*Ub</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>				<span class="comment">// Ub = u1*Ua + v1*Ub</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>				lehmerUpdate(Ua, Ub, q, r, s, t, u0, u1, v0, v1, even)
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		} else {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			<span class="comment">// Single-digit calculations failed to simulate any quotients.</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			<span class="comment">// Do a standard Euclidean step.</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>			euclidUpdate(A, B, Ua, Ub, q, r, s, t, extended)
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	if len(B.abs) &gt; 0 {
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		<span class="comment">// extended Euclidean algorithm base case if B is a single Word</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		if len(A.abs) &gt; 1 {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>			<span class="comment">// A is longer than a single Word, so one update is needed.</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>			euclidUpdate(A, B, Ua, Ub, q, r, s, t, extended)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		if len(B.abs) &gt; 0 {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>			<span class="comment">// A and B are both a single Word.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>			aWord, bWord := A.abs[0], B.abs[0]
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>			if extended {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>				var ua, ub, va, vb Word
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>				ua, ub = 1, 0
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>				va, vb = 0, 1
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>				even := true
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>				for bWord != 0 {
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>					q, r := aWord/bWord, aWord%bWord
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>					aWord, bWord = bWord, r
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>					ua, ub = ub, ua+q*ub
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>					va, vb = vb, va+q*vb
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>					even = !even
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>				}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>				t.abs = t.abs.setWord(ua)
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>				s.abs = s.abs.setWord(va)
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>				t.neg = !even
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>				s.neg = even
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>				t.Mul(Ua, t)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>				s.Mul(Ub, s)
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>				Ua.Add(t, s)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>			} else {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>				for bWord != 0 {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>					aWord, bWord = bWord, aWord%bWord
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>				}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>			}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>			A.abs[0] = aWord
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>		}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	negA := a.neg
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	if y != nil {
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>		<span class="comment">// avoid aliasing b needed in the division below</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>		if y == b {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>			B.Set(b)
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>		} else {
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>			B = b
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>		}
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>		<span class="comment">// y = (z - a*x)/b</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		y.Mul(a, Ua) <span class="comment">// y can safely alias a</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		if negA {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>			y.neg = !y.neg
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>		y.Sub(A, y)
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		y.Div(y, B)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	}
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	if x != nil {
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>		*x = *Ua
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>		if negA {
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>			x.neg = !x.neg
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>		}
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>	}
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	*z = *A
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	return z
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>}
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">// Rand sets z to a pseudo-random number in [0, n) and returns z.</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// As this uses the [math/rand] package, it must not be used for</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// security-sensitive work. Use [crypto/rand.Int] instead.</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	<span class="comment">// z.neg is not modified before the if check, because z and n might alias.</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	if n.neg || len(n.abs) == 0 {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>		z.neg = false
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		z.abs = nil
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		return z
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	}
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	z.neg = false
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	z.abs = z.abs.random(rnd, n.abs, n.abs.bitLen())
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	return z
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>}
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// ModInverse sets z to the multiplicative inverse of g in the ring ℤ/nℤ</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span><span class="comment">// and returns z. If g and n are not relatively prime, g has no multiplicative</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span><span class="comment">// inverse in the ring ℤ/nℤ.  In this case, z is unchanged and the return value</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span><span class="comment">// is nil. If n == 0, a division-by-zero run-time panic occurs.</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>func (z *Int) ModInverse(g, n *Int) *Int {
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	<span class="comment">// GCD expects parameters a and b to be &gt; 0.</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	if n.neg {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		var n2 Int
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		n = n2.Neg(n)
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	}
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	if g.neg {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		var g2 Int
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		g = g2.Mod(g, n)
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	var d, x Int
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	d.GCD(&amp;x, nil, g, n)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	<span class="comment">// if and only if d==1, g and n are relatively prime</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	if d.Cmp(intOne) != 0 {
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		return nil
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	}
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	<span class="comment">// x and y are such that g*x + n*y = 1, therefore x is the inverse element,</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	<span class="comment">// but it may be negative, so convert to the range 0 &lt;= z &lt; |n|</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	if x.neg {
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		z.Add(&amp;x, n)
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	} else {
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		z.Set(&amp;x)
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	}
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	return z
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>}
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>func (z nat) modInverse(g, n nat) nat {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	<span class="comment">// TODO(rsc): ModInverse should be implemented in terms of this function.</span>
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	return (&amp;Int{abs: z}).ModInverse(&amp;Int{abs: g}, &amp;Int{abs: n}).abs
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>}
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>
<span id="L935" class="ln">   935&nbsp;&nbsp;</span><span class="comment">// Jacobi returns the Jacobi symbol (x/y), either +1, -1, or 0.</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span><span class="comment">// The y argument must be an odd integer.</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>func Jacobi(x, y *Int) int {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	if len(y.abs) == 0 || y.abs[0]&amp;1 == 0 {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;big: invalid 2nd argument to Int.Jacobi: need odd integer but got %s&#34;, y.String()))
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	<span class="comment">// We use the formulation described in chapter 2, section 2.4,</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	<span class="comment">// &#34;The Yacas Book of Algorithms&#34;:</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	<span class="comment">// http://yacas.sourceforge.net/Algo.book.pdf</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	var a, b, c Int
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	a.Set(x)
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	b.Set(y)
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	j := 1
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	if b.neg {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		if a.neg {
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			j = -1
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>		}
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		b.neg = false
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	for {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		if b.Cmp(intOne) == 0 {
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>			return j
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>		}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		if len(a.abs) == 0 {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			return 0
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		a.Mod(&amp;a, &amp;b)
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		if len(a.abs) == 0 {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>			return 0
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		}
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		<span class="comment">// a &gt; 0</span>
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		<span class="comment">// handle factors of 2 in &#39;a&#39;</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		s := a.abs.trailingZeroBits()
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>		if s&amp;1 != 0 {
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			bmod8 := b.abs[0] &amp; 7
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			if bmod8 == 3 || bmod8 == 5 {
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>				j = -j
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>			}
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>		}
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>		c.Rsh(&amp;a, s) <span class="comment">// a = 2^s*c</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		<span class="comment">// swap numerator and denominator</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>		if b.abs[0]&amp;3 == 3 &amp;&amp; c.abs[0]&amp;3 == 3 {
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			j = -j
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		}
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>		a.Set(&amp;b)
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		b.Set(&amp;c)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span><span class="comment">// modSqrt3Mod4 uses the identity</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span><span class="comment">//	   (a^((p+1)/4))^2  mod p</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span><span class="comment">//	== u^(p+1)          mod p</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span><span class="comment">//	== u^2              mod p</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span><span class="comment">// to calculate the square root of any quadratic residue mod p quickly for 3</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span><span class="comment">// mod 4 primes.</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>func (z *Int) modSqrt3Mod4Prime(x, p *Int) *Int {
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	e := new(Int).Add(p, intOne) <span class="comment">// e = p + 1</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	e.Rsh(e, 2)                  <span class="comment">// e = (p + 1) / 4</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	z.Exp(x, e, p)               <span class="comment">// z = x^e mod p</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return z
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span><span class="comment">// modSqrt5Mod8Prime uses Atkin&#39;s observation that 2 is not a square mod p</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span><span class="comment">//	alpha ==  (2*a)^((p-5)/8)    mod p</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span><span class="comment">//	beta  ==  2*a*alpha^2        mod p  is a square root of -1</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">//	b     ==  a*alpha*(beta-1)   mod p  is a square root of a</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">// to calculate the square root of any quadratic residue mod p quickly for 5</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span><span class="comment">// mod 8 primes.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>func (z *Int) modSqrt5Mod8Prime(x, p *Int) *Int {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	<span class="comment">// p == 5 mod 8 implies p = e*8 + 5</span>
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	<span class="comment">// e is the quotient and 5 the remainder on division by 8</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	e := new(Int).Rsh(p, 3)  <span class="comment">// e = (p - 5) / 8</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	tx := new(Int).Lsh(x, 1) <span class="comment">// tx = 2*x</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	alpha := new(Int).Exp(tx, e, p)
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	beta := new(Int).Mul(alpha, alpha)
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	beta.Mod(beta, p)
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	beta.Mul(beta, tx)
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	beta.Mod(beta, p)
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	beta.Sub(beta, intOne)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	beta.Mul(beta, x)
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	beta.Mod(beta, p)
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	beta.Mul(beta, alpha)
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	z.Mod(beta, p)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	return z
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>}
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span><span class="comment">// modSqrtTonelliShanks uses the Tonelli-Shanks algorithm to find the square</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span><span class="comment">// root of a quadratic residue modulo any prime.</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>func (z *Int) modSqrtTonelliShanks(x, p *Int) *Int {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	<span class="comment">// Break p-1 into s*2^e such that s is odd.</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	var s Int
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	s.Sub(p, intOne)
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	e := s.abs.trailingZeroBits()
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	s.Rsh(&amp;s, e)
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	<span class="comment">// find some non-square n</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	var n Int
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	n.SetInt64(2)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	for Jacobi(&amp;n, p) != -1 {
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		n.Add(&amp;n, intOne)
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	}
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	<span class="comment">// Core of the Tonelli-Shanks algorithm. Follows the description in</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	<span class="comment">// section 6 of &#34;Square roots from 1; 24, 51, 10 to Dan Shanks&#34; by Ezra</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	<span class="comment">// Brown:</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	<span class="comment">// https://www.maa.org/sites/default/files/pdf/upload_library/22/Polya/07468342.di020786.02p0470a.pdf</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	var y, b, g, t Int
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	y.Add(&amp;s, intOne)
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	y.Rsh(&amp;y, 1)
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	y.Exp(x, &amp;y, p)  <span class="comment">// y = x^((s+1)/2)</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	b.Exp(x, &amp;s, p)  <span class="comment">// b = x^s</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	g.Exp(&amp;n, &amp;s, p) <span class="comment">// g = n^s</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	r := e
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	for {
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		<span class="comment">// find the least m such that ord_p(b) = 2^m</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		var m uint
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		t.Set(&amp;b)
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>		for t.Cmp(intOne) != 0 {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>			t.Mul(&amp;t, &amp;t).Mod(&amp;t, p)
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>			m++
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>		if m == 0 {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>			return z.Set(&amp;y)
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>		}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		t.SetInt64(0).SetBit(&amp;t, int(r-m-1), 1).Exp(&amp;g, &amp;t, p)
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>		<span class="comment">// t = g^(2^(r-m-1)) mod p</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		g.Mul(&amp;t, &amp;t).Mod(&amp;g, p) <span class="comment">// g = g^(2^(r-m)) mod p</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		y.Mul(&amp;y, &amp;t).Mod(&amp;y, p)
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>		b.Mul(&amp;b, &amp;g).Mod(&amp;b, p)
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		r = m
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	}
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>}
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span><span class="comment">// ModSqrt sets z to a square root of x mod p if such a square root exists, and</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span><span class="comment">// returns z. The modulus p must be an odd prime. If x is not a square mod p,</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span><span class="comment">// ModSqrt leaves z unchanged and returns nil. This function panics if p is</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span><span class="comment">// not an odd integer, its behavior is undefined if p is odd but not prime.</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>func (z *Int) ModSqrt(x, p *Int) *Int {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	switch Jacobi(x, p) {
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	case -1:
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>		return nil <span class="comment">// x is not a square mod p</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	case 0:
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>		return z.SetInt64(0) <span class="comment">// sqrt(0) mod p = 0</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	case 1:
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>		break
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	}
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	if x.neg || x.Cmp(p) &gt;= 0 { <span class="comment">// ensure 0 &lt;= x &lt; p</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		x = new(Int).Mod(x, p)
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	}
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	switch {
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	case p.abs[0]%4 == 3:
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>		<span class="comment">// Check whether p is 3 mod 4, and if so, use the faster algorithm.</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>		return z.modSqrt3Mod4Prime(x, p)
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	case p.abs[0]%8 == 5:
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>		<span class="comment">// Check whether p is 5 mod 8, use Atkin&#39;s algorithm.</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		return z.modSqrt5Mod8Prime(x, p)
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	default:
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>		<span class="comment">// Otherwise, use Tonelli-Shanks.</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		return z.modSqrtTonelliShanks(x, p)
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span><span class="comment">// Lsh sets z = x &lt;&lt; n and returns z.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>func (z *Int) Lsh(x *Int, n uint) *Int {
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	z.abs = z.abs.shl(x.abs, n)
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	z.neg = x.neg
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	return z
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>}
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span><span class="comment">// Rsh sets z = x &gt;&gt; n and returns z.</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>func (z *Int) Rsh(x *Int, n uint) *Int {
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	if x.neg {
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		<span class="comment">// (-x) &gt;&gt; s == ^(x-1) &gt;&gt; s == ^((x-1) &gt;&gt; s) == -(((x-1) &gt;&gt; s) + 1)</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		t := z.abs.sub(x.abs, natOne) <span class="comment">// no underflow because |x| &gt; 0</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		t = t.shr(t, n)
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		z.abs = t.add(t, natOne)
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>		z.neg = true <span class="comment">// z cannot be zero if x is negative</span>
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		return z
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	}
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>	z.abs = z.abs.shr(x.abs, n)
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	z.neg = false
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	return z
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span><span class="comment">// Bit returns the value of the i&#39;th bit of x. That is, it</span>
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span><span class="comment">// returns (x&gt;&gt;i)&amp;1. The bit index i must be &gt;= 0.</span>
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>func (x *Int) Bit(i int) uint {
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	if i == 0 {
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>		<span class="comment">// optimization for common case: odd/even test of x</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		if len(x.abs) &gt; 0 {
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>			return uint(x.abs[0] &amp; 1) <span class="comment">// bit 0 is same for -x</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		}
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		return 0
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	}
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		panic(&#34;negative bit index&#34;)
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	}
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	if x.neg {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		t := nat(nil).sub(x.abs, natOne)
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		return t.bit(uint(i)) ^ 1
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	}
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	return x.abs.bit(uint(i))
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>}
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span><span class="comment">// SetBit sets z to x, with x&#39;s i&#39;th bit set to b (0 or 1).</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span><span class="comment">// That is, if b is 1 SetBit sets z = x | (1 &lt;&lt; i);</span>
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span><span class="comment">// if b is 0 SetBit sets z = x &amp;^ (1 &lt;&lt; i). If b is not 0 or 1,</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span><span class="comment">// SetBit will panic.</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>func (z *Int) SetBit(x *Int, i int, b uint) *Int {
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		panic(&#34;negative bit index&#34;)
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	}
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	if x.neg {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>		t := z.abs.sub(x.abs, natOne)
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>		t = t.setBit(t, uint(i), b^1)
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		z.abs = t.add(t, natOne)
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>		z.neg = len(z.abs) &gt; 0
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		return z
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>	}
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	z.abs = z.abs.setBit(x.abs, uint(i), b)
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>	z.neg = false
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>	return z
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>}
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span><span class="comment">// And sets z = x &amp; y and returns z.</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span><span class="selection">func (z *Int) And(x, y *Int) *Int</span> {
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	if x.neg == y.neg {
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		if x.neg {
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>			<span class="comment">// (-x) &amp; (-y) == ^(x-1) &amp; ^(y-1) == ^((x-1) | (y-1)) == -(((x-1) | (y-1)) + 1)</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>			x1 := nat(nil).sub(x.abs, natOne)
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>			y1 := nat(nil).sub(y.abs, natOne)
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>			z.abs = z.abs.add(z.abs.or(x1, y1), natOne)
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>			z.neg = true <span class="comment">// z cannot be zero if x and y are negative</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>			return z
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>		}
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>		<span class="comment">// x &amp; y == x &amp; y</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>		z.abs = z.abs.and(x.abs, y.abs)
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		z.neg = false
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>		return z
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	}
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	<span class="comment">// x.neg != y.neg</span>
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	if x.neg {
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		x, y = y, x <span class="comment">// &amp; is symmetric</span>
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>	}
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	<span class="comment">// x &amp; (-y) == x &amp; ^(y-1) == x &amp;^ (y-1)</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	y1 := nat(nil).sub(y.abs, natOne)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	z.abs = z.abs.andNot(x.abs, y1)
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	z.neg = false
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	return z
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>}
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span><span class="comment">// AndNot sets z = x &amp;^ y and returns z.</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>func (z *Int) AndNot(x, y *Int) *Int {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	if x.neg == y.neg {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		if x.neg {
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>			<span class="comment">// (-x) &amp;^ (-y) == ^(x-1) &amp;^ ^(y-1) == ^(x-1) &amp; (y-1) == (y-1) &amp;^ (x-1)</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>			x1 := nat(nil).sub(x.abs, natOne)
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>			y1 := nat(nil).sub(y.abs, natOne)
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>			z.abs = z.abs.andNot(y1, x1)
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>			z.neg = false
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>			return z
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>		}
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>		<span class="comment">// x &amp;^ y == x &amp;^ y</span>
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>		z.abs = z.abs.andNot(x.abs, y.abs)
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		z.neg = false
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		return z
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	if x.neg {
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>		<span class="comment">// (-x) &amp;^ y == ^(x-1) &amp;^ y == ^(x-1) &amp; ^y == ^((x-1) | y) == -(((x-1) | y) + 1)</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>		x1 := nat(nil).sub(x.abs, natOne)
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>		z.abs = z.abs.add(z.abs.or(x1, y.abs), natOne)
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>		z.neg = true <span class="comment">// z cannot be zero if x is negative and y is positive</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>		return z
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>	}
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>	<span class="comment">// x &amp;^ (-y) == x &amp;^ ^(y-1) == x &amp; (y-1)</span>
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	y1 := nat(nil).sub(y.abs, natOne)
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	z.abs = z.abs.and(x.abs, y1)
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>	z.neg = false
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	return z
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>}
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span><span class="comment">// Or sets z = x | y and returns z.</span>
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>func (z *Int) Or(x, y *Int) *Int {
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>	if x.neg == y.neg {
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>		if x.neg {
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>			<span class="comment">// (-x) | (-y) == ^(x-1) | ^(y-1) == ^((x-1) &amp; (y-1)) == -(((x-1) &amp; (y-1)) + 1)</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>			x1 := nat(nil).sub(x.abs, natOne)
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>			y1 := nat(nil).sub(y.abs, natOne)
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>			z.abs = z.abs.add(z.abs.and(x1, y1), natOne)
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>			z.neg = true <span class="comment">// z cannot be zero if x and y are negative</span>
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>			return z
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		}
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		<span class="comment">// x | y == x | y</span>
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>		z.abs = z.abs.or(x.abs, y.abs)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>		z.neg = false
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>		return z
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>	}
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>	<span class="comment">// x.neg != y.neg</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>	if x.neg {
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>		x, y = y, x <span class="comment">// | is symmetric</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>	}
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	<span class="comment">// x | (-y) == x | ^(y-1) == ^((y-1) &amp;^ x) == -(^((y-1) &amp;^ x) + 1)</span>
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	y1 := nat(nil).sub(y.abs, natOne)
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>	z.abs = z.abs.add(z.abs.andNot(y1, x.abs), natOne)
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>	z.neg = true <span class="comment">// z cannot be zero if one of x or y is negative</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	return z
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>}
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span><span class="comment">// Xor sets z = x ^ y and returns z.</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>func (z *Int) Xor(x, y *Int) *Int {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	if x.neg == y.neg {
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>		if x.neg {
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>			<span class="comment">// (-x) ^ (-y) == ^(x-1) ^ ^(y-1) == (x-1) ^ (y-1)</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>			x1 := nat(nil).sub(x.abs, natOne)
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>			y1 := nat(nil).sub(y.abs, natOne)
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>			z.abs = z.abs.xor(x1, y1)
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>			z.neg = false
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>			return z
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>		}
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		<span class="comment">// x ^ y == x ^ y</span>
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>		z.abs = z.abs.xor(x.abs, y.abs)
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>		z.neg = false
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>		return z
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	}
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>	<span class="comment">// x.neg != y.neg</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>	if x.neg {
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>		x, y = y, x <span class="comment">// ^ is symmetric</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>	}
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	<span class="comment">// x ^ (-y) == x ^ ^(y-1) == ^(x ^ (y-1)) == -((x ^ (y-1)) + 1)</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	y1 := nat(nil).sub(y.abs, natOne)
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	z.abs = z.abs.add(z.abs.xor(x.abs, y1), natOne)
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	z.neg = true <span class="comment">// z cannot be zero if only one of x or y is negative</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	return z
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>}
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span><span class="comment">// Not sets z = ^x and returns z.</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>func (z *Int) Not(x *Int) *Int {
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	if x.neg {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>		<span class="comment">// ^(-x) == ^(^(x-1)) == x-1</span>
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		z.abs = z.abs.sub(x.abs, natOne)
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>		z.neg = false
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>		return z
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>	}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	<span class="comment">// ^x == -x-1 == -(x+1)</span>
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>	z.abs = z.abs.add(x.abs, natOne)
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>	z.neg = true <span class="comment">// z cannot be zero if x is positive</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	return z
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>}
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span><span class="comment">// Sqrt sets z to ⌊√x⌋, the largest integer such that z² ≤ x, and returns z.</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span><span class="comment">// It panics if x is negative.</span>
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>func (z *Int) Sqrt(x *Int) *Int {
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>	if x.neg {
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>		panic(&#34;square root of negative number&#34;)
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	}
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	z.neg = false
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	z.abs = z.abs.sqrt(x.abs)
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>	return z
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>
</pre><p><a href="int.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
