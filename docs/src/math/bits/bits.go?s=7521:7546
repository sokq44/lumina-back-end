<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/bits/bits.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./bits.go?s=7521:7546#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/bits">bits</a>/<span class="text-muted">bits.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/bits">math/bits</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2017 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//go:generate go run make_tables.go</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// Package bits implements bit counting and manipulation</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// functions for the predeclared unsigned integer types.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Functions in this package may be implemented directly by</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// the compiler, for better performance. For those functions</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// the code in this package will not be used. Which</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// functions are implemented by the compiler depends on the</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// architecture and the Go release.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>package bits
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>const uintSize = 32 &lt;&lt; (^uint(0) &gt;&gt; 63) <span class="comment">// 32 or 64</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// UintSize is the size of a uint in bits.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>const UintSize = uintSize
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// --- LeadingZeros ---</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// LeadingZeros returns the number of leading zero bits in x; the result is [UintSize] for x == 0.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>func LeadingZeros(x uint) int { return UintSize - Len(x) }
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// LeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>func LeadingZeros8(x uint8) int { return 8 - Len8(x) }
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// LeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func LeadingZeros16(x uint16) int { return 16 - Len16(x) }
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// LeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func LeadingZeros32(x uint32) int { return 32 - Len32(x) }
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// LeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func LeadingZeros64(x uint64) int { return 64 - Len64(x) }
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// --- TrailingZeros ---</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// See http://supertech.csail.mit.edu/papers/debruijn.pdf</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>const deBruijn32 = 0x077CB531
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>var deBruijn32tab = [32]byte{
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>const deBruijn64 = 0x03f79d71b4ca8b09
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>var deBruijn64tab = [64]byte{
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// TrailingZeros returns the number of trailing zero bits in x; the result is [UintSize] for x == 0.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func TrailingZeros(x uint) int {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return TrailingZeros32(uint32(x))
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	return TrailingZeros64(uint64(x))
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func TrailingZeros8(x uint8) int {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	return int(ntz8tab[x])
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func TrailingZeros16(x uint16) int {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	if x == 0 {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		return 16
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// see comment in TrailingZeros64</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	return int(deBruijn32tab[uint32(x&amp;-x)*deBruijn32&gt;&gt;(32-5)])
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func TrailingZeros32(x uint32) int {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if x == 0 {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return 32
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// see comment in TrailingZeros64</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return int(deBruijn32tab[(x&amp;-x)*deBruijn32&gt;&gt;(32-5)])
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>func TrailingZeros64(x uint64) int {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	if x == 0 {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		return 64
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// If popcount is fast, replace code below with return popcount(^x &amp; (x - 1)).</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// x &amp; -x leaves only the right-most bit set in the word. Let k be the</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// index of that bit. Since only a single bit is set, the value is two</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// to the power of k. Multiplying by a power of two is equivalent to</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// left shifting, in this case by k bits. The de Bruijn (64 bit) constant</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// is such that all six bit, consecutive substrings are distinct.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// Therefore, if we have a left shifted version of this constant we can</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// find by how many bits it was shifted by looking at which six bit</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// substring ended up at the top of the word.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// (Knuth, volume 4, section 7.3.1)</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	return int(deBruijn64tab[(x&amp;-x)*deBruijn64&gt;&gt;(64-6)])
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// --- OnesCount ---</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>const m0 = 0x5555555555555555 <span class="comment">// 01010101 ...</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>const m1 = 0x3333333333333333 <span class="comment">// 00110011 ...</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>const m2 = 0x0f0f0f0f0f0f0f0f <span class="comment">// 00001111 ...</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>const m3 = 0x00ff00ff00ff00ff <span class="comment">// etc.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>const m4 = 0x0000ffff0000ffff
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// OnesCount returns the number of one bits (&#34;population count&#34;) in x.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func OnesCount(x uint) int {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return OnesCount32(uint32(x))
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	return OnesCount64(uint64(x))
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// OnesCount8 returns the number of one bits (&#34;population count&#34;) in x.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func OnesCount8(x uint8) int {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return int(pop8tab[x])
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// OnesCount16 returns the number of one bits (&#34;population count&#34;) in x.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func OnesCount16(x uint16) int {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	return int(pop8tab[x&gt;&gt;8] + pop8tab[x&amp;0xff])
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// OnesCount32 returns the number of one bits (&#34;population count&#34;) in x.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func OnesCount32(x uint32) int {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return int(pop8tab[x&gt;&gt;24] + pop8tab[x&gt;&gt;16&amp;0xff] + pop8tab[x&gt;&gt;8&amp;0xff] + pop8tab[x&amp;0xff])
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// OnesCount64 returns the number of one bits (&#34;population count&#34;) in x.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func OnesCount64(x uint64) int {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// Implementation: Parallel summing of adjacent bits.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// See &#34;Hacker&#39;s Delight&#34;, Chap. 5: Counting Bits.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// The following pattern shows the general approach:</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;1&amp;(m0&amp;m) + x&amp;(m0&amp;m)</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;2&amp;(m1&amp;m) + x&amp;(m1&amp;m)</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;4&amp;(m2&amp;m) + x&amp;(m2&amp;m)</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;8&amp;(m3&amp;m) + x&amp;(m3&amp;m)</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;16&amp;(m4&amp;m) + x&amp;(m4&amp;m)</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">//   x = x&gt;&gt;32&amp;(m5&amp;m) + x&amp;(m5&amp;m)</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//   return int(x)</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// Masking (&amp; operations) can be left away when there&#39;s no</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// danger that a field&#39;s sum will carry over into the next</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// field: Since the result cannot be &gt; 64, 8 bits is enough</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// and we can ignore the masks for the shifts by 8 and up.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// Per &#34;Hacker&#39;s Delight&#34;, the first line can be simplified</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// more, but it saves at best one instruction, so we leave</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// it alone for clarity.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	const m = 1&lt;&lt;64 - 1
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	x = x&gt;&gt;1&amp;(m0&amp;m) + x&amp;(m0&amp;m)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	x = x&gt;&gt;2&amp;(m1&amp;m) + x&amp;(m1&amp;m)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	x = (x&gt;&gt;4 + x) &amp; (m2 &amp; m)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	x += x &gt;&gt; 8
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	x += x &gt;&gt; 16
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	x += x &gt;&gt; 32
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return int(x) &amp; (1&lt;&lt;7 - 1)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// --- RotateLeft ---</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// RotateLeft returns the value of x rotated left by (k mod [UintSize]) bits.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// To rotate x right by k bits, call RotateLeft(x, -k).</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>func RotateLeft(x uint, k int) uint {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return uint(RotateLeft32(uint32(x), k))
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return uint(RotateLeft64(uint64(x), k))
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// RotateLeft8 returns the value of x rotated left by (k mod 8) bits.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// To rotate x right by k bits, call RotateLeft8(x, -k).</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func RotateLeft8(x uint8, k int) uint8 {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	const n = 8
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	s := uint(k) &amp; (n - 1)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	return x&lt;&lt;s | x&gt;&gt;(n-s)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// RotateLeft16 returns the value of x rotated left by (k mod 16) bits.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// To rotate x right by k bits, call RotateLeft16(x, -k).</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func RotateLeft16(x uint16, k int) uint16 {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	const n = 16
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	s := uint(k) &amp; (n - 1)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return x&lt;&lt;s | x&gt;&gt;(n-s)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// RotateLeft32 returns the value of x rotated left by (k mod 32) bits.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// To rotate x right by k bits, call RotateLeft32(x, -k).</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>func RotateLeft32(x uint32, k int) uint32 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	const n = 32
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	s := uint(k) &amp; (n - 1)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	return x&lt;&lt;s | x&gt;&gt;(n-s)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// RotateLeft64 returns the value of x rotated left by (k mod 64) bits.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// To rotate x right by k bits, call RotateLeft64(x, -k).</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func RotateLeft64(x uint64, k int) uint64 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	const n = 64
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	s := uint(k) &amp; (n - 1)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	return x&lt;&lt;s | x&gt;&gt;(n-s)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// --- Reverse ---</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// Reverse returns the value of x with its bits in reversed order.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="selection">func Reverse(x uint) uint</span> {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		return uint(Reverse32(uint32(x)))
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	return uint(Reverse64(uint64(x)))
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>}
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// Reverse8 returns the value of x with its bits in reversed order.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>func Reverse8(x uint8) uint8 {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	return rev8tab[x]
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// Reverse16 returns the value of x with its bits in reversed order.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func Reverse16(x uint16) uint16 {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	return uint16(rev8tab[x&gt;&gt;8]) | uint16(rev8tab[x&amp;0xff])&lt;&lt;8
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// Reverse32 returns the value of x with its bits in reversed order.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>func Reverse32(x uint32) uint32 {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	const m = 1&lt;&lt;32 - 1
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	x = x&gt;&gt;1&amp;(m0&amp;m) | x&amp;(m0&amp;m)&lt;&lt;1
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	x = x&gt;&gt;2&amp;(m1&amp;m) | x&amp;(m1&amp;m)&lt;&lt;2
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	x = x&gt;&gt;4&amp;(m2&amp;m) | x&amp;(m2&amp;m)&lt;&lt;4
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	return ReverseBytes32(x)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// Reverse64 returns the value of x with its bits in reversed order.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func Reverse64(x uint64) uint64 {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	const m = 1&lt;&lt;64 - 1
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	x = x&gt;&gt;1&amp;(m0&amp;m) | x&amp;(m0&amp;m)&lt;&lt;1
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	x = x&gt;&gt;2&amp;(m1&amp;m) | x&amp;(m1&amp;m)&lt;&lt;2
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	x = x&gt;&gt;4&amp;(m2&amp;m) | x&amp;(m2&amp;m)&lt;&lt;4
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	return ReverseBytes64(x)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// --- ReverseBytes ---</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// ReverseBytes returns the value of x with its bytes in reversed order.</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>func ReverseBytes(x uint) uint {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		return uint(ReverseBytes32(uint32(x)))
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return uint(ReverseBytes64(uint64(x)))
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// ReverseBytes16 returns the value of x with its bytes in reversed order.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func ReverseBytes16(x uint16) uint16 {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	return x&gt;&gt;8 | x&lt;&lt;8
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// ReverseBytes32 returns the value of x with its bytes in reversed order.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func ReverseBytes32(x uint32) uint32 {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	const m = 1&lt;&lt;32 - 1
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	x = x&gt;&gt;8&amp;(m3&amp;m) | x&amp;(m3&amp;m)&lt;&lt;8
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return x&gt;&gt;16 | x&lt;&lt;16
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// ReverseBytes64 returns the value of x with its bytes in reversed order.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func ReverseBytes64(x uint64) uint64 {
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	const m = 1&lt;&lt;64 - 1
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	x = x&gt;&gt;8&amp;(m3&amp;m) | x&amp;(m3&amp;m)&lt;&lt;8
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	x = x&gt;&gt;16&amp;(m4&amp;m) | x&amp;(m4&amp;m)&lt;&lt;16
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return x&gt;&gt;32 | x&lt;&lt;32
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// --- Len ---</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// Len returns the minimum number of bits required to represent x; the result is 0 for x == 0.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func Len(x uint) int {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		return Len32(uint32(x))
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	return Len64(uint64(x))
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// Len8 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func Len8(x uint8) int {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return int(len8tab[x])
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// Len16 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>func Len16(x uint16) (n int) {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;8 {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		x &gt;&gt;= 8
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		n = 8
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	return n + int(len8tab[x])
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// Len32 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func Len32(x uint32) (n int) {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;16 {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		x &gt;&gt;= 16
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		n = 16
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;8 {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		x &gt;&gt;= 8
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		n += 8
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return n + int(len8tab[x])
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// Len64 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>func Len64(x uint64) (n int) {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;32 {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		x &gt;&gt;= 32
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		n = 32
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;16 {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		x &gt;&gt;= 16
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		n += 16
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	if x &gt;= 1&lt;&lt;8 {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		x &gt;&gt;= 8
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		n += 8
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return n + int(len8tab[x])
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// --- Add with carry ---</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// Add returns the sum with carry of x, y and carry: sum = x + y + carry.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// The carry input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// The carryOut output is guaranteed to be 0 or 1.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>func Add(x, y, carry uint) (sum, carryOut uint) {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		s32, c32 := Add32(uint32(x), uint32(y), uint32(carry))
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		return uint(s32), uint(c32)
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	s64, c64 := Add64(uint64(x), uint64(y), uint64(carry))
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return uint(s64), uint(c64)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// Add32 returns the sum with carry of x, y and carry: sum = x + y + carry.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// The carry input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// The carryOut output is guaranteed to be 0 or 1.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>func Add32(x, y, carry uint32) (sum, carryOut uint32) {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	sum64 := uint64(x) + uint64(y) + uint64(carry)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	sum = uint32(sum64)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	carryOut = uint32(sum64 &gt;&gt; 32)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	return
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// Add64 returns the sum with carry of x, y and carry: sum = x + y + carry.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// The carry input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// The carryOut output is guaranteed to be 0 or 1.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func Add64(x, y, carry uint64) (sum, carryOut uint64) {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	sum = x + y + carry
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	<span class="comment">// The sum will overflow if both top bits are set (x &amp; y) or if one of them</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	<span class="comment">// is (x | y), and a carry from the lower place happened. If such a carry</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	<span class="comment">// happens, the top bit will be 1 + 0 + 1 = 0 (&amp;^ sum).</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	carryOut = ((x &amp; y) | ((x | y) &amp;^ sum)) &gt;&gt; 63
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	return
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// --- Subtract with borrow ---</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">// Sub returns the difference of x, y and borrow: diff = x - y - borrow.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// The borrow input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// The borrowOut output is guaranteed to be 0 or 1.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>func Sub(x, y, borrow uint) (diff, borrowOut uint) {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		d32, b32 := Sub32(uint32(x), uint32(y), uint32(borrow))
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		return uint(d32), uint(b32)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	d64, b64 := Sub64(uint64(x), uint64(y), uint64(borrow))
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	return uint(d64), uint(b64)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// Sub32 returns the difference of x, y and borrow, diff = x - y - borrow.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// The borrow input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// The borrowOut output is guaranteed to be 0 or 1.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>func Sub32(x, y, borrow uint32) (diff, borrowOut uint32) {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	diff = x - y - borrow
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	<span class="comment">// The difference will underflow if the top bit of x is not set and the top</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	<span class="comment">// bit of y is set (^x &amp; y) or if they are the same (^(x ^ y)) and a borrow</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	<span class="comment">// from the lower place happens. If that borrow happens, the result will be</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// 1 - 1 - 1 = 0 - 0 - 1 = 1 (&amp; diff).</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	borrowOut = ((^x &amp; y) | (^(x ^ y) &amp; diff)) &gt;&gt; 31
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	return
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// Sub64 returns the difference of x, y and borrow: diff = x - y - borrow.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">// The borrow input must be 0 or 1; otherwise the behavior is undefined.</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// The borrowOut output is guaranteed to be 0 or 1.</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>func Sub64(x, y, borrow uint64) (diff, borrowOut uint64) {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	diff = x - y - borrow
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">// See Sub32 for the bit logic.</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	borrowOut = ((^x &amp; y) | (^(x ^ y) &amp; diff)) &gt;&gt; 63
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	return
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// --- Full-width multiply ---</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// Mul returns the full-width product of x and y: (hi, lo) = x * y</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// with the product bits&#39; upper half returned in hi and the lower</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// half returned in lo.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>func Mul(x, y uint) (hi, lo uint) {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		h, l := Mul32(uint32(x), uint32(y))
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		return uint(h), uint(l)
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	h, l := Mul64(uint64(x), uint64(y))
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	return uint(h), uint(l)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// Mul32 returns the 64-bit product of x and y: (hi, lo) = x * y</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// with the product bits&#39; upper half returned in hi and the lower</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// half returned in lo.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>func Mul32(x, y uint32) (hi, lo uint32) {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	tmp := uint64(x) * uint64(y)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	hi, lo = uint32(tmp&gt;&gt;32), uint32(tmp)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	return
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// Mul64 returns the 128-bit product of x and y: (hi, lo) = x * y</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// with the product bits&#39; upper half returned in hi and the lower</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">// half returned in lo.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// This function&#39;s execution time does not depend on the inputs.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>func Mul64(x, y uint64) (hi, lo uint64) {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	const mask32 = 1&lt;&lt;32 - 1
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	x0 := x &amp; mask32
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	x1 := x &gt;&gt; 32
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	y0 := y &amp; mask32
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	y1 := y &gt;&gt; 32
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	w0 := x0 * y0
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	t := x1*y0 + w0&gt;&gt;32
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	w1 := t &amp; mask32
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	w2 := t &gt;&gt; 32
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	w1 += x0 * y1
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	hi = x1*y1 + w2 + w1&gt;&gt;32
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	lo = x * y
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	return
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// --- Full-width divide ---</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// Div returns the quotient and remainder of (hi, lo) divided by y:</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// half in parameter hi and the lower half in parameter lo.</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// Div panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>func Div(hi, lo, y uint) (quo, rem uint) {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		q, r := Div32(uint32(hi), uint32(lo), uint32(y))
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		return uint(q), uint(r)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	q, r := Div64(uint64(hi), uint64(lo), uint64(y))
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	return uint(q), uint(r)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// Div32 returns the quotient and remainder of (hi, lo) divided by y:</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">// half in parameter hi and the lower half in parameter lo.</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// Div32 panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>func Div32(hi, lo, y uint32) (quo, rem uint32) {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	if y != 0 &amp;&amp; y &lt;= hi {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		panic(overflowError)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	z := uint64(hi)&lt;&lt;32 | uint64(lo)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	quo, rem = uint32(z/uint64(y)), uint32(z%uint64(y))
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	return
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// Div64 returns the quotient and remainder of (hi, lo) divided by y:</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">// quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits&#39; upper</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// half in parameter hi and the lower half in parameter lo.</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">// Div64 panics for y == 0 (division by zero) or y &lt;= hi (quotient overflow).</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>func Div64(hi, lo, y uint64) (quo, rem uint64) {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	if y == 0 {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		panic(divideError)
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	if y &lt;= hi {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		panic(overflowError)
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	<span class="comment">// If high part is zero, we can directly return the results.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if hi == 0 {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return lo / y, lo % y
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	s := uint(LeadingZeros64(y))
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	y &lt;&lt;= s
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	const (
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		two32  = 1 &lt;&lt; 32
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		mask32 = two32 - 1
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	yn1 := y &gt;&gt; 32
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	yn0 := y &amp; mask32
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	un32 := hi&lt;&lt;s | lo&gt;&gt;(64-s)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	un10 := lo &lt;&lt; s
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	un1 := un10 &gt;&gt; 32
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	un0 := un10 &amp; mask32
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	q1 := un32 / yn1
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	rhat := un32 - q1*yn1
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	for q1 &gt;= two32 || q1*yn0 &gt; two32*rhat+un1 {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		q1--
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		rhat += yn1
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		if rhat &gt;= two32 {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>			break
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	un21 := un32*two32 + un1 - q1*y
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	q0 := un21 / yn1
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	rhat = un21 - q0*yn1
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	for q0 &gt;= two32 || q0*yn0 &gt; two32*rhat+un0 {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		q0--
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		rhat += yn1
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		if rhat &gt;= two32 {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>			break
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	return q1*two32 + q0, (un21*two32 + un0 - q0*y) &gt;&gt; s
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">// Rem returns the remainder of (hi, lo) divided by y. Rem panics for</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// y == 0 (division by zero) but, unlike Div, it doesn&#39;t panic on a</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// quotient overflow.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func Rem(hi, lo, y uint) uint {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	if UintSize == 32 {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		return uint(Rem32(uint32(hi), uint32(lo), uint32(y)))
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	}
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	return uint(Rem64(uint64(hi), uint64(lo), uint64(y)))
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// Rem32 returns the remainder of (hi, lo) divided by y. Rem32 panics</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// for y == 0 (division by zero) but, unlike [Div32], it doesn&#39;t panic</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// on a quotient overflow.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>func Rem32(hi, lo, y uint32) uint32 {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	return uint32((uint64(hi)&lt;&lt;32 | uint64(lo)) % uint64(y))
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// Rem64 returns the remainder of (hi, lo) divided by y. Rem64 panics</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// for y == 0 (division by zero) but, unlike [Div64], it doesn&#39;t panic</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">// on a quotient overflow.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>func Rem64(hi, lo, y uint64) uint64 {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	<span class="comment">// We scale down hi so that hi &lt; y, then use Div64 to compute the</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	<span class="comment">// rem with the guarantee that it won&#39;t panic on quotient overflow.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	<span class="comment">// Given that</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	<span class="comment">//   hi ≡ hi%y    (mod y)</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// we have</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">//   hi&lt;&lt;64 + lo ≡ (hi%y)&lt;&lt;64 + lo    (mod y)</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	_, rem := Div64(hi%y, lo, y)
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	return rem
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
</pre><p><a href="bits.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
