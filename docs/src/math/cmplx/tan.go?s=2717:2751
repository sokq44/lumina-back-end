<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/cmplx/tan.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./tan.go?s=2717:2751#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/cmplx">cmplx</a>/<span class="text-muted">tan.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/cmplx">math/cmplx</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package cmplx
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>)
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// The original C code, the long comment, and the constants</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// below are from http://netlib.sandia.gov/cephes/c9x-complex/clog.c.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The go code is a simplified version of the original C.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// Cephes Math Library Release 2.8:  June, 2000</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// The readme file at http://netlib.sandia.gov/cephes/ says:</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">//    Some software in this archive may be from the book _Methods and</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// Programs for Mathematical Functions_ (Prentice-Hall or Simon &amp; Schuster</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// International, 1989) or from the Cephes Mathematical Library, a</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// commercial product. In either event, it is copyrighted by the author.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// What you see here may be used freely but it comes with no support or</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// guarantee.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//   The two known misprints in the book are repaired here in the</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// source listings for the gamma function and the incomplete beta</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// integral.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//   Stephen L. Moshier</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//   moshier@na-net.ornl.gov</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Complex circular tangent</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// DESCRIPTION:</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// If</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//     z = x + iy,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// then</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//           sin 2x  +  i sinh 2y</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//     w  =  --------------------.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//            cos 2x  +  cosh 2y</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// On the real axis the denominator is zero at odd multiples</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// of PI/2. The denominator is evaluated by its Taylor</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// series near these points.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// ctan(z) = -i ctanh(iz).</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// ACCURACY:</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//                      Relative error:</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// arithmetic   domain     # trials      peak         rms</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//    DEC       -10,+10      5200       7.1e-17     1.6e-17</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//    IEEE      -10,+10     30000       7.2e-16     1.2e-16</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// Also tested by ctan * ccot = 1 and catan(ctan(z))  =  z.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Tan returns the tangent of x.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func Tan(x complex128) complex128 {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	switch re, im := real(x), imag(x); {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	case math.IsInf(im, 0):
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		switch {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		case math.IsInf(re, 0) || math.IsNaN(re):
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			return complex(math.Copysign(0, re), math.Copysign(1, im))
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		return complex(math.Copysign(0, math.Sin(2*re)), math.Copysign(1, im))
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	case re == 0 &amp;&amp; math.IsNaN(im):
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		return x
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	d := math.Cos(2*real(x)) + math.Cosh(2*imag(x))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if math.Abs(d) &lt; 0.25 {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		d = tanSeries(x)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	if d == 0 {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return Inf()
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return complex(math.Sin(2*real(x))/d, math.Sinh(2*imag(x))/d)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Complex hyperbolic tangent</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// DESCRIPTION:</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// tanh z = (sinh 2x  +  i sin 2y) / (cosh 2x + cos 2y) .</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// ACCURACY:</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//                      Relative error:</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// arithmetic   domain     # trials      peak         rms</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//    IEEE      -10,+10     30000       1.7e-14     2.4e-16</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Tanh returns the hyperbolic tangent of x.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="selection">func Tanh(x complex128) complex128</span> {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	switch re, im := real(x), imag(x); {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	case math.IsInf(re, 0):
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		switch {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		case math.IsInf(im, 0) || math.IsNaN(im):
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			return complex(math.Copysign(1, re), math.Copysign(0, im))
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		return complex(math.Copysign(1, re), math.Copysign(0, math.Sin(2*im)))
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	case im == 0 &amp;&amp; math.IsNaN(re):
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		return x
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	d := math.Cosh(2*real(x)) + math.Cos(2*imag(x))
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	if d == 0 {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		return Inf()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return complex(math.Sinh(2*real(x))/d, math.Sin(2*imag(x))/d)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// reducePi reduces the input argument x to the range (-Pi/2, Pi/2].</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// x must be greater than or equal to 0. For small arguments it</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// uses Cody-Waite reduction in 3 float64 parts based on:</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// &#34;Elementary Function Evaluation:  Algorithms and Implementation&#34;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// Jean-Michel Muller, 1997.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// For very large arguments it uses Payne-Hanek range reduction based on:</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// &#34;ARGUMENT REDUCTION FOR HUGE ARGUMENTS: Good to the Last Bit&#34;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// K. C. Ng et al, March 24, 1992.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>func reducePi(x float64) float64 {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// reduceThreshold is the maximum value of x where the reduction using</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// Cody-Waite reduction still gives accurate results. This threshold</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// is set by t*PIn being representable as a float64 without error</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// where t is given by t = floor(x * (1 / Pi)) and PIn are the leading partial</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// terms of Pi. Since the leading terms, PI1 and PI2 below, have 30 and 32</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// trailing zero bits respectively, t should have less than 30 significant bits.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">//	t &lt; 1&lt;&lt;30  -&gt; floor(x*(1/Pi)+0.5) &lt; 1&lt;&lt;30 -&gt; x &lt; (1&lt;&lt;30-1) * Pi - 0.5</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// So, conservatively we can take x &lt; 1&lt;&lt;30.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	const reduceThreshold float64 = 1 &lt;&lt; 30
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	if math.Abs(x) &lt; reduceThreshold {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		<span class="comment">// Use Cody-Waite reduction in three parts.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		const (
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			<span class="comment">// PI1, PI2 and PI3 comprise an extended precision value of PI</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			<span class="comment">// such that PI ~= PI1 + PI2 + PI3. The parts are chosen so</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			<span class="comment">// that PI1 and PI2 have an approximately equal number of trailing</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			<span class="comment">// zero bits. This ensures that t*PI1 and t*PI2 are exact for</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			<span class="comment">// large integer values of t. The full precision PI3 ensures the</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			<span class="comment">// approximation of PI is accurate to 102 bits to handle cancellation</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			<span class="comment">// during subtraction.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			PI1 = 3.141592502593994      <span class="comment">// 0x400921fb40000000</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			PI2 = 1.5099578831723193e-07 <span class="comment">// 0x3e84442d00000000</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			PI3 = 1.0780605716316238e-14 <span class="comment">// 0x3d08469898cc5170</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		t := x / math.Pi
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		t += 0.5
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		t = float64(int64(t)) <span class="comment">// int64(t) = the multiple</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return ((x - t*PI1) - t*PI2) - t*PI3
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// Must apply Payne-Hanek range reduction</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	const (
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		mask     = 0x7FF
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		shift    = 64 - 11 - 1
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		bias     = 1023
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		fracMask = 1&lt;&lt;shift - 1
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// Extract out the integer and exponent such that,</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// x = ix * 2 ** exp.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	ix := math.Float64bits(x)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	exp := int(ix&gt;&gt;shift&amp;mask) - bias - shift
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	ix &amp;= fracMask
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	ix |= 1 &lt;&lt; shift
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// mPi is the binary digits of 1/Pi as a uint64 array,</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// that is, 1/Pi = Sum mPi[i]*2^(-64*i).</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// 19 64-bit digits give 1216 bits of precision</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// to handle the largest possible float64 exponent.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	var mPi = [...]uint64{
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		0x0000000000000000,
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		0x517cc1b727220a94,
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		0xfe13abe8fa9a6ee0,
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		0x6db14acc9e21c820,
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		0xff28b1d5ef5de2b0,
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		0xdb92371d2126e970,
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		0x0324977504e8c90e,
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		0x7f0ef58e5894d39f,
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		0x74411afa975da242,
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		0x74ce38135a2fbf20,
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		0x9cc8eb1cc1a99cfa,
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		0x4e422fc5defc941d,
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		0x8ffc4bffef02cc07,
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		0xf79788c5ad05368f,
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		0xb69b3f6793e584db,
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		0xa7a31fb34f2ff516,
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		0xba93dd63f5f2f8bd,
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		0x9e839cfbc5294975,
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		0x35fdafd88fc6ae84,
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		0x2b0198237e3db5d5,
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// Use the exponent to extract the 3 appropriate uint64 digits from mPi,</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// B ~ (z0, z1, z2), such that the product leading digit has the exponent -64.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// Note, exp &gt;= 50 since x &gt;= reduceThreshold and exp &lt; 971 for maximum float64.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	digit, bitshift := uint(exp+64)/64, uint(exp+64)%64
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	z0 := (mPi[digit] &lt;&lt; bitshift) | (mPi[digit+1] &gt;&gt; (64 - bitshift))
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	z1 := (mPi[digit+1] &lt;&lt; bitshift) | (mPi[digit+2] &gt;&gt; (64 - bitshift))
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	z2 := (mPi[digit+2] &lt;&lt; bitshift) | (mPi[digit+3] &gt;&gt; (64 - bitshift))
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Multiply mantissa by the digits and extract the upper two digits (hi, lo).</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	z2hi, _ := bits.Mul64(z2, ix)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	z1hi, z1lo := bits.Mul64(z1, ix)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	z0lo := z0 * ix
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	lo, c := bits.Add64(z1lo, z2hi, 0)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	hi, _ := bits.Add64(z0lo, z1hi, c)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// Find the magnitude of the fraction.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	lz := uint(bits.LeadingZeros64(hi))
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	e := uint64(bias - (lz + 1))
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// Clear implicit mantissa bit and shift into place.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	hi = (hi &lt;&lt; (lz + 1)) | (lo &gt;&gt; (64 - (lz + 1)))
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	hi &gt;&gt;= 64 - shift
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// Include the exponent and convert to a float.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	hi |= e &lt;&lt; shift
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	x = math.Float64frombits(hi)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// map to (-Pi/2, Pi/2]</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if x &gt; 0.5 {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		x--
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return math.Pi * x
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// Taylor series expansion for cosh(2y) - cos(2x)</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func tanSeries(z complex128) float64 {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	const MACHEP = 1.0 / (1 &lt;&lt; 53)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	x := math.Abs(2 * real(z))
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	y := math.Abs(2 * imag(z))
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	x = reducePi(x)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	x = x * x
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	y = y * y
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	x2 := 1.0
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	y2 := 1.0
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	f := 1.0
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	rn := 0.0
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	d := 0.0
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	for {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		rn++
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		f *= rn
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		rn++
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		f *= rn
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		x2 *= x
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		y2 *= y
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		t := y2 + x2
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		t /= f
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		d += t
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		rn++
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		f *= rn
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		rn++
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		f *= rn
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		x2 *= x
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		y2 *= y
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		t = y2 - x2
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		t /= f
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		d += t
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if !(math.Abs(t/d) &gt; MACHEP) {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			<span class="comment">// Caution: Use ! and &gt; instead of &lt;= for correct behavior if t/d is NaN.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			<span class="comment">// See issue 17577.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			break
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	return d
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// Complex circular cotangent</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// DESCRIPTION:</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// If</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">//     z = x + iy,</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// then</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">//           sin 2x  -  i sinh 2y</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">//     w  =  --------------------.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//            cosh 2y  -  cos 2x</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// On the real axis, the denominator has zeros at even</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// multiples of PI/2.  Near these points it is evaluated</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">// by a Taylor series.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// ACCURACY:</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">//                      Relative error:</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// arithmetic   domain     # trials      peak         rms</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//    DEC       -10,+10      3000       6.5e-17     1.6e-17</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">//    IEEE      -10,+10     30000       9.2e-16     1.2e-16</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Also tested by ctan * ccot = 1 + i0.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// Cot returns the cotangent of x.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>func Cot(x complex128) complex128 {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	d := math.Cosh(2*imag(x)) - math.Cos(2*real(x))
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	if math.Abs(d) &lt; 0.25 {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		d = tanSeries(x)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if d == 0 {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		return Inf()
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return complex(math.Sin(2*real(x))/d, -math.Sinh(2*imag(x))/d)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
</pre><p><a href="tan.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
