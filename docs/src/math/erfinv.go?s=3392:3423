<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/erfinv.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./erfinv.go?s=3392:3423#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<span class="text-muted">erfinv.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math">math</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2017 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package math
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">/*
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	Inverse of the floating-point error function.
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>*/</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// This implementation is based on the rational approximation</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// of percentage points of normal distribution available from</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// https://www.jstor.org/stable/2347330.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>const (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	<span class="comment">// Coefficients for approximation to erf in |x| &lt;= 0.85</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	a0 = 1.1975323115670912564578e0
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	a1 = 4.7072688112383978012285e1
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	a2 = 6.9706266534389598238465e2
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	a3 = 4.8548868893843886794648e3
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	a4 = 1.6235862515167575384252e4
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	a5 = 2.3782041382114385731252e4
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	a6 = 1.1819493347062294404278e4
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	a7 = 8.8709406962545514830200e2
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	b0 = 1.0000000000000000000e0
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	b1 = 4.2313330701600911252e1
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	b2 = 6.8718700749205790830e2
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	b3 = 5.3941960214247511077e3
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	b4 = 2.1213794301586595867e4
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	b5 = 3.9307895800092710610e4
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	b6 = 2.8729085735721942674e4
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	b7 = 5.2264952788528545610e3
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// Coefficients for approximation to erf in 0.85 &lt; |x| &lt;= 1-2*exp(-25)</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	c0 = 1.42343711074968357734e0
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	c1 = 4.63033784615654529590e0
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	c2 = 5.76949722146069140550e0
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	c3 = 3.64784832476320460504e0
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	c4 = 1.27045825245236838258e0
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	c5 = 2.41780725177450611770e-1
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	c6 = 2.27238449892691845833e-2
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	c7 = 7.74545014278341407640e-4
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	d0 = 1.4142135623730950488016887e0
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	d1 = 2.9036514445419946173133295e0
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	d2 = 2.3707661626024532365971225e0
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	d3 = 9.7547832001787427186894837e-1
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	d4 = 2.0945065210512749128288442e-1
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	d5 = 2.1494160384252876777097297e-2
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	d6 = 7.7441459065157709165577218e-4
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	d7 = 1.4859850019840355905497876e-9
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// Coefficients for approximation to erf in 1-2*exp(-25) &lt; |x| &lt; 1</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	e0 = 6.65790464350110377720e0
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	e1 = 5.46378491116411436990e0
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	e2 = 1.78482653991729133580e0
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	e3 = 2.96560571828504891230e-1
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	e4 = 2.65321895265761230930e-2
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	e5 = 1.24266094738807843860e-3
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	e6 = 2.71155556874348757815e-5
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	e7 = 2.01033439929228813265e-7
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	f0 = 1.414213562373095048801689e0
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	f1 = 8.482908416595164588112026e-1
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	f2 = 1.936480946950659106176712e-1
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	f3 = 2.103693768272068968719679e-2
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	f4 = 1.112800997078859844711555e-3
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	f5 = 2.611088405080593625138020e-5
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	f6 = 2.010321207683943062279931e-7
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	f7 = 2.891024605872965461538222e-15
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// Erfinv returns the inverse error function of x.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Special cases are:</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//	Erfinv(1) = +Inf</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//	Erfinv(-1) = -Inf</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//	Erfinv(x) = NaN if x &lt; -1 or x &gt; 1</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//	Erfinv(NaN) = NaN</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func Erfinv(x float64) float64 {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// special cases</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if IsNaN(x) || x &lt;= -1 || x &gt;= 1 {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		if x == -1 || x == 1 {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>			return Inf(int(x))
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return NaN()
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	sign := false
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		x = -x
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		sign = true
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	var ans float64
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	if x &lt;= 0.85 { <span class="comment">// |x| &lt;= 0.85</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		r := 0.180625 - 0.25*x*x
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		z1 := ((((((a7*r+a6)*r+a5)*r+a4)*r+a3)*r+a2)*r+a1)*r + a0
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		z2 := ((((((b7*r+b6)*r+b5)*r+b4)*r+b3)*r+b2)*r+b1)*r + b0
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		ans = (x * z1) / z2
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	} else {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		var z1, z2 float64
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		r := Sqrt(Ln2 - Log(1.0-x))
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		if r &lt;= 5.0 {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			r -= 1.6
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			z1 = ((((((c7*r+c6)*r+c5)*r+c4)*r+c3)*r+c2)*r+c1)*r + c0
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			z2 = ((((((d7*r+d6)*r+d5)*r+d4)*r+d3)*r+d2)*r+d1)*r + d0
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		} else {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			r -= 5.0
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			z1 = ((((((e7*r+e6)*r+e5)*r+e4)*r+e3)*r+e2)*r+e1)*r + e0
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			z2 = ((((((f7*r+f6)*r+f5)*r+f4)*r+f3)*r+f2)*r+f1)*r + f0
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		ans = z1 / z2
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	if sign {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		return -ans
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return ans
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// Erfcinv returns the inverse of [Erfc](x).</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// Special cases are:</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">//	Erfcinv(0) = +Inf</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//	Erfcinv(2) = -Inf</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">//	Erfcinv(x) = NaN if x &lt; 0 or x &gt; 2</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">//	Erfcinv(NaN) = NaN</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="selection">func Erfcinv(x float64) float64</span> {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	return Erfinv(1 - x)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
</pre><p><a href="erfinv.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
