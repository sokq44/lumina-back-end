<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/fma.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./fma.go?s=2262:2295#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<span class="text-muted">fma.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math">math</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2019 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package math
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import &#34;math/bits&#34;
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>func zero(x uint64) uint64 {
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	if x == 0 {
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>		return 1
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	}
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	return 0
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	<span class="comment">// branchless:</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	<span class="comment">// return ((x&gt;&gt;1 | x&amp;1) - 1) &gt;&gt; 63</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>}
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func nonzero(x uint64) uint64 {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	if x != 0 {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>		return 1
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	}
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	return 0
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// branchless:</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// return 1 - ((x&gt;&gt;1|x&amp;1)-1)&gt;&gt;63</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func shl(u1, u2 uint64, n uint) (r1, r2 uint64) {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	r1 = u1&lt;&lt;n | u2&gt;&gt;(64-n) | u2&lt;&lt;(n-64)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	r2 = u2 &lt;&lt; n
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	return
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func shr(u1, u2 uint64, n uint) (r1, r2 uint64) {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	r2 = u2&gt;&gt;n | u1&lt;&lt;(64-n) | u1&gt;&gt;(n-64)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	r1 = u1 &gt;&gt; n
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	return
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// shrcompress compresses the bottom n+1 bits of the two-word</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// value into a single bit. the result is equal to the value</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// shifted to the right by n, except the result&#39;s 0th bit is</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// set to the bitwise OR of the bottom n+1 bits.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>func shrcompress(u1, u2 uint64, n uint) (r1, r2 uint64) {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// TODO: Performance here is really sensitive to the</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// order/placement of these branches. n == 0 is common</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// enough to be in the fast path. Perhaps more measurement</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// needs to be done to find the optimal order/placement?</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	switch {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	case n == 0:
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		return u1, u2
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	case n == 64:
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		return 0, u1 | nonzero(u2)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	case n &gt;= 128:
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		return 0, nonzero(u1 | u2)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	case n &lt; 64:
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		r1, r2 = shr(u1, u2, n)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		r2 |= nonzero(u2 &amp; (1&lt;&lt;n - 1))
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	case n &lt; 128:
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		r1, r2 = shr(u1, u2, n)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		r2 |= nonzero(u1&amp;(1&lt;&lt;(n-64)-1) | u2)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	return
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func lz(u1, u2 uint64) (l int32) {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	l = int32(bits.LeadingZeros64(u1))
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if l == 64 {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		l += int32(bits.LeadingZeros64(u2))
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	return l
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// split splits b into sign, biased exponent, and mantissa.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// It adds the implicit 1 bit to the mantissa for normal values,</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// and normalizes subnormal values.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func split(b uint64) (sign uint32, exp int32, mantissa uint64) {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	sign = uint32(b &gt;&gt; 63)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	exp = int32(b&gt;&gt;52) &amp; mask
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	mantissa = b &amp; fracMask
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	if exp == 0 {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		<span class="comment">// Normalize value if subnormal.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		shift := uint(bits.LeadingZeros64(mantissa) - 11)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		mantissa &lt;&lt;= shift
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		exp = 1 - int32(shift)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	} else {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		<span class="comment">// Add implicit 1 bit</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		mantissa |= 1 &lt;&lt; 52
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// FMA returns x * y + z, computed with only one rounding.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// (That is, FMA returns the fused multiply-add of x, y, and z.)</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="selection">func FMA(x, y, z float64) float64</span> {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	bx, by, bz := Float64bits(x), Float64bits(y), Float64bits(z)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// Inf or NaN or zero involved. At most one rounding will occur.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if x == 0.0 || y == 0.0 || z == 0.0 || bx&amp;uvinf == uvinf || by&amp;uvinf == uvinf {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		return x*y + z
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Handle non-finite z separately. Evaluating x*y+z where</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// x and y are finite, but z is infinite, should always result in z.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	if bz&amp;uvinf == uvinf {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		return z
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// Inputs are (sub)normal.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// Split x, y, z into sign, exponent, mantissa.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	xs, xe, xm := split(bx)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	ys, ye, ym := split(by)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	zs, ze, zm := split(bz)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Compute product p = x*y as sign, exponent, two-word mantissa.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// Start with exponent. &#34;is normal&#34; bit isn&#39;t subtracted yet.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	pe := xe + ye - bias + 1
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// pm1:pm2 is the double-word mantissa for the product p.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// Shift left to leave top bit in product. Effectively</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// shifts the 106-bit product to the left by 21.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	pm1, pm2 := bits.Mul64(xm&lt;&lt;10, ym&lt;&lt;11)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	zm1, zm2 := zm&lt;&lt;10, uint64(0)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	ps := xs ^ ys <span class="comment">// product sign</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// normalize to 62nd bit</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	is62zero := uint((^pm1 &gt;&gt; 62) &amp; 1)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	pm1, pm2 = shl(pm1, pm2, is62zero)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	pe -= int32(is62zero)
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// Swap addition operands so |p| &gt;= |z|</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	if pe &lt; ze || pe == ze &amp;&amp; pm1 &lt; zm1 {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		ps, pe, pm1, pm2, zs, ze, zm1, zm2 = zs, ze, zm1, zm2, ps, pe, pm1, pm2
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// Special case: if p == -z the result is always +0 since neither operand is zero.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if ps != zs &amp;&amp; pe == ze &amp;&amp; pm1 == zm1 &amp;&amp; pm2 == zm2 {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		return 0
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// Align significands</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	zm1, zm2 = shrcompress(zm1, zm2, uint(pe-ze))
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Compute resulting significands, normalizing if necessary.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	var m, c uint64
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if ps == zs {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		<span class="comment">// Adding (pm1:pm2) + (zm1:zm2)</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		pm2, c = bits.Add64(pm2, zm2, 0)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		pm1, _ = bits.Add64(pm1, zm1, c)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		pe -= int32(^pm1 &gt;&gt; 63)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		pm1, m = shrcompress(pm1, pm2, uint(64+pm1&gt;&gt;63))
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	} else {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		<span class="comment">// Subtracting (pm1:pm2) - (zm1:zm2)</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		<span class="comment">// TODO: should we special-case cancellation?</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		pm2, c = bits.Sub64(pm2, zm2, 0)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		pm1, _ = bits.Sub64(pm1, zm1, c)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		nz := lz(pm1, pm2)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		pe -= nz
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		m, pm2 = shl(pm1, pm2, uint(nz-1))
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		m |= nonzero(pm2)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// Round and break ties to even</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	if pe &gt; 1022+bias || pe == 1022+bias &amp;&amp; (m+1&lt;&lt;9)&gt;&gt;63 == 1 {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		<span class="comment">// rounded value overflows exponent range</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return Float64frombits(uint64(ps)&lt;&lt;63 | uvinf)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if pe &lt; 0 {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		n := uint(-pe)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		m = m&gt;&gt;n | nonzero(m&amp;(1&lt;&lt;n-1))
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		pe = 0
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	m = ((m + 1&lt;&lt;9) &gt;&gt; 10) &amp; ^zero((m&amp;(1&lt;&lt;10-1))^1&lt;&lt;9)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	pe &amp;= -int32(nonzero(m))
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	return Float64frombits(uint64(ps)&lt;&lt;63 + uint64(pe)&lt;&lt;52 + m)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
</pre><p><a href="fma.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
