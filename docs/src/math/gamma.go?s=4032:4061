<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/gamma.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./gamma.go?s=4032:4061#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<span class="text-muted">gamma.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math">math</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package math
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// The original C code, the long comment, and the constants</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// below are from http://netlib.sandia.gov/cephes/cprob/gamma.c.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// The go code is a simplified version of the original C.</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//      tgamma.c</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//      Gamma function</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// SYNOPSIS:</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// double x, y, tgamma();</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// extern int signgam;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// y = tgamma( x );</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// DESCRIPTION:</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// Returns gamma function of the argument. The result is</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// correctly signed, and the sign (+1 or -1) is also</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// returned in a global (extern) variable named signgam.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// This variable is also filled in by the logarithmic gamma</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// function lgamma().</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Arguments |x| &lt;= 34 are reduced by recurrence and the function</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// approximated by a rational function of degree 6/7 in the</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// interval (2,3).  Large arguments are handled by Stirling&#39;s</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// formula. Large negative arguments are made positive using</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// a reflection formula.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// ACCURACY:</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//                      Relative error:</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// arithmetic   domain     # trials      peak         rms</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//    DEC      -34, 34      10000       1.3e-16     2.5e-17</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//    IEEE    -170,-33      20000       2.3e-15     3.3e-16</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//    IEEE     -33,  33     20000       9.4e-16     2.2e-16</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//    IEEE      33, 171.6   20000       2.3e-15     3.2e-16</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// Error for arguments outside the test range will be larger</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// owing to error amplification by the exponential function.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Cephes Math Library Release 2.8:  June, 2000</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// The readme file at http://netlib.sandia.gov/cephes/ says:</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//    Some software in this archive may be from the book _Methods and</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Programs for Mathematical Functions_ (Prentice-Hall or Simon &amp; Schuster</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// International, 1989) or from the Cephes Mathematical Library, a</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// commercial product. In either event, it is copyrighted by the author.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// What you see here may be used freely but it comes with no support or</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// guarantee.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//   The two known misprints in the book are repaired here in the</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// source listings for the gamma function and the incomplete beta</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// integral.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//   Stephen L. Moshier</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//   moshier@na-net.ornl.gov</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>var _gamP = [...]float64{
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	1.60119522476751861407e-04,
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	1.19135147006586384913e-03,
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	1.04213797561761569935e-02,
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	4.76367800457137231464e-02,
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	2.07448227648435975150e-01,
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	4.94214826801497100753e-01,
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	9.99999999999999996796e-01,
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>var _gamQ = [...]float64{
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	-2.31581873324120129819e-05,
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	5.39605580493303397842e-04,
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	-4.45641913851797240494e-03,
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	1.18139785222060435552e-02,
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	3.58236398605498653373e-02,
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	-2.34591795718243348568e-01,
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	7.14304917030273074085e-02,
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	1.00000000000000000320e+00,
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>var _gamS = [...]float64{
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	7.87311395793093628397e-04,
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	-2.29549961613378126380e-04,
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	-2.68132617805781232825e-03,
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	3.47222221605458667310e-03,
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	8.33333333333482257126e-02,
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Gamma function computed by Stirling&#39;s formula.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// The pair of results must be multiplied together to get the actual answer.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// The multiplication is left to the caller so that, if careful, the caller can avoid</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// infinity for 172 &lt;= x &lt;= 180.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// The polynomial is valid for 33 &lt;= x &lt;= 172; larger values are only used</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// in reciprocal and produce denormalized floats. The lower precision there</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// masks any imprecision in the polynomial.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func stirling(x float64) (float64, float64) {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	if x &gt; 200 {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		return Inf(1), 1
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	const (
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		SqrtTwoPi   = 2.506628274631000502417
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		MaxStirling = 143.01608
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	w := 1 / x
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	w = 1 + w*((((_gamS[0]*w+_gamS[1])*w+_gamS[2])*w+_gamS[3])*w+_gamS[4])
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	y1 := Exp(x)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	y2 := 1.0
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	if x &gt; MaxStirling { <span class="comment">// avoid Pow() overflow</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		v := Pow(x, 0.5*x-0.25)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		y1, y2 = v, v/y1
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	} else {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		y1 = Pow(x, x-0.5) / y1
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return y1, SqrtTwoPi * w * y2
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// Gamma returns the Gamma function of x.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// Special cases are:</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">//	Gamma(+Inf) = +Inf</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">//	Gamma(+0) = +Inf</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">//	Gamma(-0) = -Inf</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">//	Gamma(x) = NaN for integer x &lt; 0</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">//	Gamma(-Inf) = NaN</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">//	Gamma(NaN) = NaN</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="selection">func Gamma(x float64) float64</span> {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	const Euler = 0.57721566490153286060651209008240243104215933593992 <span class="comment">// A001620</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// special cases</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	switch {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	case isNegInt(x) || IsInf(x, -1) || IsNaN(x):
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		return NaN()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	case IsInf(x, 1):
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		return Inf(1)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	case x == 0:
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		if Signbit(x) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			return Inf(-1)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		return Inf(1)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	q := Abs(x)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	p := Floor(q)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	if q &gt; 33 {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		if x &gt;= 0 {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>			y1, y2 := stirling(x)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>			return y1 * y2
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		<span class="comment">// Note: x is negative but (checked above) not a negative integer,</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		<span class="comment">// so x must be small enough to be in range for conversion to int64.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		<span class="comment">// If |x| were &gt;= 2⁶³ it would have to be an integer.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		signgam := 1
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		if ip := int64(p); ip&amp;1 == 0 {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			signgam = -1
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		z := q - p
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		if z &gt; 0.5 {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			p = p + 1
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			z = q - p
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		z = q * Sin(Pi*z)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		if z == 0 {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			return Inf(signgam)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		sq1, sq2 := stirling(q)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		absz := Abs(z)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		d := absz * sq1 * sq2
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		if IsInf(d, 0) {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			z = Pi / absz / sq1 / sq2
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		} else {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			z = Pi / d
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return float64(signgam) * z
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// Reduce argument</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	z := 1.0
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	for x &gt;= 3 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		x = x - 1
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		z = z * x
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	for x &lt; 0 {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		if x &gt; -1e-09 {
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>			goto small
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		z = z / x
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		x = x + 1
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	for x &lt; 2 {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		if x &lt; 1e-09 {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			goto small
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		z = z / x
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		x = x + 1
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if x == 2 {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return z
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	x = x - 2
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	p = (((((x*_gamP[0]+_gamP[1])*x+_gamP[2])*x+_gamP[3])*x+_gamP[4])*x+_gamP[5])*x + _gamP[6]
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	q = ((((((x*_gamQ[0]+_gamQ[1])*x+_gamQ[2])*x+_gamQ[3])*x+_gamQ[4])*x+_gamQ[5])*x+_gamQ[6])*x + _gamQ[7]
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return z * p / q
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>small:
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	if x == 0 {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return Inf(1)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return z / ((1 + Euler*x) * x)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>func isNegInt(x float64) bool {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		_, xf := Modf(x)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return xf == 0
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	return false
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
</pre><p><a href="gamma.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
