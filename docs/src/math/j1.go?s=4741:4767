<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/j1.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./j1.go?s=4741:4767#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<span class="text-muted">j1.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math">math</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package math
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">/*
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	Bessel function of the first and second kinds of order one.
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>*/</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// The original C code and the long comment below are</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// from FreeBSD&#39;s /usr/src/lib/msun/src/e_j1.c and</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// came with this notice. The go code is a simplified</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// version of the original C.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// ====================================================</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Permission to use, copy, modify, and distribute this</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// software is freely granted, provided that this notice</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// is preserved.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// ====================================================</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// __ieee754_j1(x), __ieee754_y1(x)</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// Bessel function of the first and second kinds of order one.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Method -- j1(x):</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//      1. For tiny x, we use j1(x) = x/2 - x**3/16 + x**5/384 - ...</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//      2. Reduce x to |x| since j1(x)=-j1(-x),  and</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//         for x in (0,2)</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//              j1(x) = x/2 + x*z*R0/S0,  where z = x*x;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//         (precision:  |j1/x - 1/2 - R0/S0 |&lt;2**-61.51 )</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//         for x in (2,inf)</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//              j1(x) = sqrt(2/(pi*x))*(p1(x)*cos(x1)-q1(x)*sin(x1))</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//              y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//         where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//         as follow:</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//              cos(x1) =  cos(x)cos(3pi/4)+sin(x)sin(3pi/4)</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//                      =  1/sqrt(2) * (sin(x) - cos(x))</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//              sin(x1) =  sin(x)cos(3pi/4)-cos(x)sin(3pi/4)</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//                      = -1/sqrt(2) * (sin(x) + cos(x))</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//         (To avoid cancellation, use</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//              sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//         to compute the worse one.)</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//      3 Special cases</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//              j1(nan)= nan</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//              j1(0) = 0</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//              j1(inf) = 0</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Method -- y1(x):</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//      1. screen out x&lt;=0 cases: y1(0)=-inf, y1(x&lt;0)=NaN</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//      2. For x&lt;2.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//         Since</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//              y1(x) = 2/pi*(j1(x)*(ln(x/2)+Euler)-1/x-x/2+5/64*x**3-...)</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//         therefore y1(x)-2/pi*j1(x)*ln(x)-1/x is an odd function.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//         We use the following function to approximate y1,</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//              y1(x) = x*U(z)/V(z) + (2/pi)*(j1(x)*ln(x)-1/x), z= x**2</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//         where for x in [0,2] (abs err less than 2**-65.89)</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//              U(z) = U0[0] + U0[1]*z + ... + U0[4]*z**4</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//              V(z) = 1  + v0[0]*z + ... + v0[4]*z**5</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//         Note: For tiny x, 1/x dominate y1 and hence</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//              y1(tiny) = -2/pi/tiny, (choose tiny&lt;2**-54)</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//      3. For x&gt;=2.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//               y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//         where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//         by method mentioned above.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// J1 returns the order-one Bessel function of the first kind.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// Special cases are:</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//	J1(±Inf) = 0</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//	J1(NaN) = NaN</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func J1(x float64) float64 {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	const (
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		TwoM27 = 1.0 / (1 &lt;&lt; 27) <span class="comment">// 2**-27 0x3e40000000000000</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		Two129 = 1 &lt;&lt; 129        <span class="comment">// 2**129 0x4800000000000000</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		<span class="comment">// R0/S0 on [0, 2]</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		R00 = -6.25000000000000000000e-02 <span class="comment">// 0xBFB0000000000000</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		R01 = 1.40705666955189706048e-03  <span class="comment">// 0x3F570D9F98472C61</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		R02 = -1.59955631084035597520e-05 <span class="comment">// 0xBEF0C5C6BA169668</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		R03 = 4.96727999609584448412e-08  <span class="comment">// 0x3E6AAAFA46CA0BD9</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		S01 = 1.91537599538363460805e-02  <span class="comment">// 0x3F939D0B12637E53</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		S02 = 1.85946785588630915560e-04  <span class="comment">// 0x3F285F56B9CDF664</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		S03 = 1.17718464042623683263e-06  <span class="comment">// 0x3EB3BFF8333F8498</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		S04 = 5.04636257076217042715e-09  <span class="comment">// 0x3E35AC88C97DFF2C</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		S05 = 1.23542274426137913908e-11  <span class="comment">// 0x3DAB2ACFCFB97ED8</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// special cases</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	switch {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	case IsNaN(x):
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return x
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	case IsInf(x, 0) || x == 0:
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		return 0
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	sign := false
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if x &lt; 0 {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		x = -x
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		sign = true
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if x &gt;= 2 {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		s, c := Sincos(x)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		ss := -s - c
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		cc := s - c
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		<span class="comment">// make sure x+x does not overflow</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		if x &lt; MaxFloat64/2 {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>			z := Cos(x + x)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			if s*c &gt; 0 {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				cc = z / ss
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>			} else {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				ss = z / cc
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		<span class="comment">// j1(x) = 1/sqrt(pi) * (P(1,x)*cc - Q(1,x)*ss) / sqrt(x)</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		<span class="comment">// y1(x) = 1/sqrt(pi) * (P(1,x)*ss + Q(1,x)*cc) / sqrt(x)</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		var z float64
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		if x &gt; Two129 {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			z = (1 / SqrtPi) * cc / Sqrt(x)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		} else {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			u := pone(x)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			v := qone(x)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			z = (1 / SqrtPi) * (u*cc - v*ss) / Sqrt(x)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>		if sign {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			return -z
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		return z
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	if x &lt; TwoM27 { <span class="comment">// |x|&lt;2**-27</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		return 0.5 * x <span class="comment">// inexact if x!=0 necessary</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	z := x * x
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	r := z * (R00 + z*(R01+z*(R02+z*R03)))
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	s := 1.0 + z*(S01+z*(S02+z*(S03+z*(S04+z*S05))))
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	r *= x
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	z = 0.5*x + r/s
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	if sign {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		return -z
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return z
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// Y1 returns the order-one Bessel function of the second kind.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// Special cases are:</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">//	Y1(+Inf) = 0</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">//	Y1(0) = -Inf</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">//	Y1(x &lt; 0) = NaN</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">//	Y1(NaN) = NaN</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="selection">func Y1(x float64) float64</span> {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	const (
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		TwoM54 = 1.0 / (1 &lt;&lt; 54)             <span class="comment">// 2**-54 0x3c90000000000000</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		Two129 = 1 &lt;&lt; 129                    <span class="comment">// 2**129 0x4800000000000000</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		U00    = -1.96057090646238940668e-01 <span class="comment">// 0xBFC91866143CBC8A</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		U01    = 5.04438716639811282616e-02  <span class="comment">// 0x3FA9D3C776292CD1</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		U02    = -1.91256895875763547298e-03 <span class="comment">// 0xBF5F55E54844F50F</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		U03    = 2.35252600561610495928e-05  <span class="comment">// 0x3EF8AB038FA6B88E</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		U04    = -9.19099158039878874504e-08 <span class="comment">// 0xBE78AC00569105B8</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		V00    = 1.99167318236649903973e-02  <span class="comment">// 0x3F94650D3F4DA9F0</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		V01    = 2.02552581025135171496e-04  <span class="comment">// 0x3F2A8C896C257764</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		V02    = 1.35608801097516229404e-06  <span class="comment">// 0x3EB6C05A894E8CA6</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		V03    = 6.22741452364621501295e-09  <span class="comment">// 0x3E3ABF1D5BA69A86</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		V04    = 1.66559246207992079114e-11  <span class="comment">// 0x3DB25039DACA772A</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// special cases</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	switch {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	case x &lt; 0 || IsNaN(x):
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return NaN()
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	case IsInf(x, 1):
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		return 0
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	case x == 0:
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return Inf(-1)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if x &gt;= 2 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		s, c := Sincos(x)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		ss := -s - c
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		cc := s - c
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		<span class="comment">// make sure x+x does not overflow</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		if x &lt; MaxFloat64/2 {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>			z := Cos(x + x)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>			if s*c &gt; 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>				cc = z / ss
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>			} else {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>				ss = z / cc
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		<span class="comment">// y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x0)+q1(x)*cos(x0))</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		<span class="comment">// where x0 = x-3pi/4</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">//     Better formula:</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		<span class="comment">//         cos(x0) = cos(x)cos(3pi/4)+sin(x)sin(3pi/4)</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		<span class="comment">//                 =  1/sqrt(2) * (sin(x) - cos(x))</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		<span class="comment">//         sin(x0) = sin(x)cos(3pi/4)-cos(x)sin(3pi/4)</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		<span class="comment">//                 = -1/sqrt(2) * (cos(x) + sin(x))</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		<span class="comment">// To avoid cancellation, use</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		<span class="comment">//     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		<span class="comment">// to compute the worse one.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		var z float64
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		if x &gt; Two129 {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			z = (1 / SqrtPi) * ss / Sqrt(x)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		} else {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			u := pone(x)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>			v := qone(x)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>			z = (1 / SqrtPi) * (u*ss + v*cc) / Sqrt(x)
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		return z
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if x &lt;= TwoM54 { <span class="comment">// x &lt; 2**-54</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return -(2 / Pi) / x
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	z := x * x
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	u := U00 + z*(U01+z*(U02+z*(U03+z*U04)))
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	v := 1 + z*(V00+z*(V01+z*(V02+z*(V03+z*V04))))
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	return x*(u/v) + (2/Pi)*(J1(x)*Log(x)-1/x)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// For x &gt;= 8, the asymptotic expansions of pone is</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">//      1 + 15/128 s**2 - 4725/2**15 s**4 - ..., where s = 1/x.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// We approximate pone by</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">//      pone(x) = 1 + (R/S)</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// where R = pr0 + pr1*s**2 + pr2*s**4 + ... + pr5*s**10</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">//       S = 1 + ps0*s**2 + ... + ps4*s**10</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// and</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">//      | pone(x)-1-R/S | &lt;= 2**(-60.06)</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// for x in [inf, 8]=1/[0,0.125]</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>var p1R8 = [6]float64{
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	0.00000000000000000000e+00, <span class="comment">// 0x0000000000000000</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	1.17187499999988647970e-01, <span class="comment">// 0x3FBDFFFFFFFFFCCE</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	1.32394806593073575129e+01, <span class="comment">// 0x402A7A9D357F7FCE</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	4.12051854307378562225e+02, <span class="comment">// 0x4079C0D4652EA590</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	3.87474538913960532227e+03, <span class="comment">// 0x40AE457DA3A532CC</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	7.91447954031891731574e+03, <span class="comment">// 0x40BEEA7AC32782DD</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>var p1S8 = [5]float64{
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	1.14207370375678408436e+02, <span class="comment">// 0x405C8D458E656CAC</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	3.65093083420853463394e+03, <span class="comment">// 0x40AC85DC964D274F</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	3.69562060269033463555e+04, <span class="comment">// 0x40E20B8697C5BB7F</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	9.76027935934950801311e+04, <span class="comment">// 0x40F7D42CB28F17BB</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	3.08042720627888811578e+04, <span class="comment">// 0x40DE1511697A0B2D</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// for x in [8,4.5454] = 1/[0.125,0.22001]</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>var p1R5 = [6]float64{
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	1.31990519556243522749e-11, <span class="comment">// 0x3DAD0667DAE1CA7D</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	1.17187493190614097638e-01, <span class="comment">// 0x3FBDFFFFE2C10043</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	6.80275127868432871736e+00, <span class="comment">// 0x401B36046E6315E3</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	1.08308182990189109773e+02, <span class="comment">// 0x405B13B9452602ED</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	5.17636139533199752805e+02, <span class="comment">// 0x40802D16D052D649</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	5.28715201363337541807e+02, <span class="comment">// 0x408085B8BB7E0CB7</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>var p1S5 = [5]float64{
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	5.92805987221131331921e+01, <span class="comment">// 0x404DA3EAA8AF633D</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	9.91401418733614377743e+02, <span class="comment">// 0x408EFB361B066701</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	5.35326695291487976647e+03, <span class="comment">// 0x40B4E9445706B6FB</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	7.84469031749551231769e+03, <span class="comment">// 0x40BEA4B0B8A5BB15</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	1.50404688810361062679e+03, <span class="comment">// 0x40978030036F5E51</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// for x in[4.5453,2.8571] = 1/[0.2199,0.35001]</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>var p1R3 = [6]float64{
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	3.02503916137373618024e-09, <span class="comment">// 0x3E29FC21A7AD9EDD</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	1.17186865567253592491e-01, <span class="comment">// 0x3FBDFFF55B21D17B</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	3.93297750033315640650e+00, <span class="comment">// 0x400F76BCE85EAD8A</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	3.51194035591636932736e+01, <span class="comment">// 0x40418F489DA6D129</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	9.10550110750781271918e+01, <span class="comment">// 0x4056C3854D2C1837</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	4.85590685197364919645e+01, <span class="comment">// 0x4048478F8EA83EE5</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>var p1S3 = [5]float64{
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	3.47913095001251519989e+01, <span class="comment">// 0x40416549A134069C</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	3.36762458747825746741e+02, <span class="comment">// 0x40750C3307F1A75F</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	1.04687139975775130551e+03, <span class="comment">// 0x40905B7C5037D523</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	8.90811346398256432622e+02, <span class="comment">// 0x408BD67DA32E31E9</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	1.03787932439639277504e+02, <span class="comment">// 0x4059F26D7C2EED53</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// for x in [2.8570,2] = 1/[0.3499,0.5]</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>var p1R2 = [6]float64{
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	1.07710830106873743082e-07, <span class="comment">// 0x3E7CE9D4F65544F4</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	1.17176219462683348094e-01, <span class="comment">// 0x3FBDFF42BE760D83</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	2.36851496667608785174e+00, <span class="comment">// 0x4002F2B7F98FAEC0</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	1.22426109148261232917e+01, <span class="comment">// 0x40287C377F71A964</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	1.76939711271687727390e+01, <span class="comment">// 0x4031B1A8177F8EE2</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	5.07352312588818499250e+00, <span class="comment">// 0x40144B49A574C1FE</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>var p1S2 = [5]float64{
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	2.14364859363821409488e+01, <span class="comment">// 0x40356FBD8AD5ECDC</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	1.25290227168402751090e+02, <span class="comment">// 0x405F529314F92CD5</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	2.32276469057162813669e+02, <span class="comment">// 0x406D08D8D5A2DBD9</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	1.17679373287147100768e+02, <span class="comment">// 0x405D6B7ADA1884A9</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	8.36463893371618283368e+00, <span class="comment">// 0x4020BAB1F44E5192</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func pone(x float64) float64 {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	var p *[6]float64
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	var q *[5]float64
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	if x &gt;= 8 {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		p = &amp;p1R8
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		q = &amp;p1S8
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	} else if x &gt;= 4.5454 {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		p = &amp;p1R5
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		q = &amp;p1S5
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	} else if x &gt;= 2.8571 {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		p = &amp;p1R3
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		q = &amp;p1S3
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	} else if x &gt;= 2 {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		p = &amp;p1R2
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		q = &amp;p1S2
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	z := 1 / (x * x)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	r := p[0] + z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))))
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	s := 1.0 + z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*q[4]))))
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	return 1 + r/s
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// For x &gt;= 8, the asymptotic expansions of qone is</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">//      3/8 s - 105/1024 s**3 - ..., where s = 1/x.</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// We approximate qone by</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">//      qone(x) = s*(0.375 + (R/S))</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// where R = qr1*s**2 + qr2*s**4 + ... + qr5*s**10</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">//       S = 1 + qs1*s**2 + ... + qs6*s**12</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// and</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">//      | qone(x)/s -0.375-R/S | &lt;= 2**(-61.13)</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// for x in [inf, 8] = 1/[0,0.125]</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>var q1R8 = [6]float64{
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	0.00000000000000000000e+00,  <span class="comment">// 0x0000000000000000</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	-1.02539062499992714161e-01, <span class="comment">// 0xBFBA3FFFFFFFFDF3</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	-1.62717534544589987888e+01, <span class="comment">// 0xC0304591A26779F7</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	-7.59601722513950107896e+02, <span class="comment">// 0xC087BCD053E4B576</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	-1.18498066702429587167e+04, <span class="comment">// 0xC0C724E740F87415</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	-4.84385124285750353010e+04, <span class="comment">// 0xC0E7A6D065D09C6A</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>}
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>var q1S8 = [6]float64{
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	1.61395369700722909556e+02,  <span class="comment">// 0x40642CA6DE5BCDE5</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	7.82538599923348465381e+03,  <span class="comment">// 0x40BE9162D0D88419</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	1.33875336287249578163e+05,  <span class="comment">// 0x4100579AB0B75E98</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	7.19657723683240939863e+05,  <span class="comment">// 0x4125F65372869C19</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	6.66601232617776375264e+05,  <span class="comment">// 0x412457D27719AD5C</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	-2.94490264303834643215e+05, <span class="comment">// 0xC111F9690EA5AA18</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// for x in [8,4.5454] = 1/[0.125,0.22001]</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>var q1R5 = [6]float64{
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	-2.08979931141764104297e-11, <span class="comment">// 0xBDB6FA431AA1A098</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	-1.02539050241375426231e-01, <span class="comment">// 0xBFBA3FFFCB597FEF</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	-8.05644828123936029840e+00, <span class="comment">// 0xC0201CE6CA03AD4B</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	-1.83669607474888380239e+02, <span class="comment">// 0xC066F56D6CA7B9B0</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	-1.37319376065508163265e+03, <span class="comment">// 0xC09574C66931734F</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	-2.61244440453215656817e+03, <span class="comment">// 0xC0A468E388FDA79D</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>var q1S5 = [6]float64{
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	8.12765501384335777857e+01,  <span class="comment">// 0x405451B2FF5A11B2</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	1.99179873460485964642e+03,  <span class="comment">// 0x409F1F31E77BF839</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	1.74684851924908907677e+04,  <span class="comment">// 0x40D10F1F0D64CE29</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	4.98514270910352279316e+04,  <span class="comment">// 0x40E8576DAABAD197</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	2.79480751638918118260e+04,  <span class="comment">// 0x40DB4B04CF7C364B</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	-4.71918354795128470869e+03, <span class="comment">// 0xC0B26F2EFCFFA004</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// for x in [4.5454,2.8571] = 1/[0.2199,0.35001] ???</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>var q1R3 = [6]float64{
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	-5.07831226461766561369e-09, <span class="comment">// 0xBE35CFA9D38FC84F</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	-1.02537829820837089745e-01, <span class="comment">// 0xBFBA3FEB51AEED54</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	-4.61011581139473403113e+00, <span class="comment">// 0xC01270C23302D9FF</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	-5.78472216562783643212e+01, <span class="comment">// 0xC04CEC71C25D16DA</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	-2.28244540737631695038e+02, <span class="comment">// 0xC06C87D34718D55F</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	-2.19210128478909325622e+02, <span class="comment">// 0xC06B66B95F5C1BF6</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>var q1S3 = [6]float64{
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	4.76651550323729509273e+01,  <span class="comment">// 0x4047D523CCD367E4</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	6.73865112676699709482e+02,  <span class="comment">// 0x40850EEBC031EE3E</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	3.38015286679526343505e+03,  <span class="comment">// 0x40AA684E448E7C9A</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	5.54772909720722782367e+03,  <span class="comment">// 0x40B5ABBAA61D54A6</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	1.90311919338810798763e+03,  <span class="comment">// 0x409DBC7A0DD4DF4B</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	-1.35201191444307340817e+02, <span class="comment">// 0xC060E670290A311F</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// for x in [2.8570,2] = 1/[0.3499,0.5]</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>var q1R2 = [6]float64{
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	-1.78381727510958865572e-07, <span class="comment">// 0xBE87F12644C626D2</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	-1.02517042607985553460e-01, <span class="comment">// 0xBFBA3E8E9148B010</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	-2.75220568278187460720e+00, <span class="comment">// 0xC006048469BB4EDA</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	-1.96636162643703720221e+01, <span class="comment">// 0xC033A9E2C168907F</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	-4.23253133372830490089e+01, <span class="comment">// 0xC04529A3DE104AAA</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	-2.13719211703704061733e+01, <span class="comment">// 0xC0355F3639CF6E52</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>var q1S2 = [6]float64{
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	2.95333629060523854548e+01,  <span class="comment">// 0x403D888A78AE64FF</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	2.52981549982190529136e+02,  <span class="comment">// 0x406F9F68DB821CBA</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	7.57502834868645436472e+02,  <span class="comment">// 0x4087AC05CE49A0F7</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	7.39393205320467245656e+02,  <span class="comment">// 0x40871B2548D4C029</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	1.55949003336666123687e+02,  <span class="comment">// 0x40637E5E3C3ED8D4</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	-4.95949898822628210127e+00, <span class="comment">// 0xC013D686E71BE86B</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>func qone(x float64) float64 {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	var p, q *[6]float64
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if x &gt;= 8 {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		p = &amp;q1R8
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		q = &amp;q1S8
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	} else if x &gt;= 4.5454 {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		p = &amp;q1R5
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		q = &amp;q1S5
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	} else if x &gt;= 2.8571 {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		p = &amp;q1R3
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		q = &amp;q1S3
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	} else if x &gt;= 2 {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		p = &amp;q1R2
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		q = &amp;q1S2
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	z := 1 / (x * x)
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	r := p[0] + z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))))
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	s := 1 + z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*(q[4]+z*q[5])))))
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	return (0.375 + r/s) / x
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
</pre><p><a href="j1.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
