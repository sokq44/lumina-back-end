<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/rand/rand.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./rand.go?s=5445:5475#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/rand">rand</a>/<span class="text-muted">rand.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/rand">math/rand</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package rand implements pseudo-random number generators suitable for tasks</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// such as simulation, but it should not be used for security-sensitive work.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// Random numbers are generated by a [Source], usually wrapped in a [Rand].</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Both types should be used by a single goroutine at a time: sharing among</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// multiple goroutines requires some kind of synchronization.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Top-level functions, such as [Float64] and [Int],</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// are safe for concurrent use by multiple goroutines.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// This package&#39;s outputs might be easily predictable regardless of how it&#39;s</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// seeded. For random numbers suitable for security-sensitive work, see the</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// crypto/rand package.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>package rand
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>import (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	_ &#34;unsafe&#34; <span class="comment">// for go:linkname</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// A Source represents a source of uniformly-distributed</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// pseudo-random int64 values in the range [0, 1&lt;&lt;63).</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// A Source is not safe for concurrent use by multiple goroutines.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>type Source interface {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Int63() int64
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Seed(seed int64)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// A Source64 is a [Source] that can also generate</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// uniformly-distributed pseudo-random uint64 values in</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// the range [0, 1&lt;&lt;64) directly.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// If a [Rand] r&#39;s underlying [Source] s implements Source64,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// then r.Uint64 returns the result of one call to s.Uint64</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// instead of making two calls to s.Int63.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>type Source64 interface {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	Source
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	Uint64() uint64
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// NewSource returns a new pseudo-random [Source] seeded with the given value.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Unlike the default [Source] used by top-level functions, this source is not</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// safe for concurrent use by multiple goroutines.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// The returned [Source] implements [Source64].</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func NewSource(seed int64) Source {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	return newSource(seed)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func newSource(seed int64) *rngSource {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	var rng rngSource
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	rng.Seed(seed)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	return &amp;rng
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>}
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// A Rand is a source of random numbers.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>type Rand struct {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	src Source
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	s64 Source64 <span class="comment">// non-nil if src is source64</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// readVal contains remainder of 63-bit integer used for bytes</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// generation during most recent Read call.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// It is saved so next Read call can start where the previous</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// one finished.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	readVal int64
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// readPos indicates the number of low-order bytes of readVal</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// that are still valid.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	readPos int8
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// New returns a new [Rand] that uses random values from src</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// to generate other random values.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func New(src Source) *Rand {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	s64, _ := src.(Source64)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return &amp;Rand{src: src, s64: s64}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Seed uses the provided seed value to initialize the generator to a deterministic state.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// Seed should not be called concurrently with any other [Rand] method.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>func (r *Rand) Seed(seed int64) {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	if lk, ok := r.src.(*lockedSource); ok {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		lk.seedPos(seed, &amp;r.readPos)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		return
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	r.src.Seed(seed)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	r.readPos = 0
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>func (r *Rand) Int63() int64 { return r.src.Int63() }
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// Uint32 returns a pseudo-random 32-bit value as a uint32.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func (r *Rand) Uint32() uint32 { return uint32(r.Int63() &gt;&gt; 31) }
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// Uint64 returns a pseudo-random 64-bit value as a uint64.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>func (r *Rand) Uint64() uint64 {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if r.s64 != nil {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		return r.s64.Uint64()
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	return uint64(r.Int63())&gt;&gt;31 | uint64(r.Int63())&lt;&lt;32
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Int31 returns a non-negative pseudo-random 31-bit integer as an int32.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (r *Rand) Int31() int32 { return int32(r.Int63() &gt;&gt; 32) }
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// Int returns a non-negative pseudo-random int.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>func (r *Rand) Int() int {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	u := uint(r.Int63())
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	return int(u &lt;&lt; 1 &gt;&gt; 1) <span class="comment">// clear sign bit if int == int32</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (r *Rand) Int63n(n int64) int64 {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Int63n&#34;)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if n&amp;(n-1) == 0 { <span class="comment">// n is power of two, can mask</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return r.Int63() &amp; (n - 1)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	max := int64((1 &lt;&lt; 63) - 1 - (1&lt;&lt;63)%uint64(n))
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	v := r.Int63()
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	for v &gt; max {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		v = r.Int63()
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	return v % n
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span><span class="comment">// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>func (r *Rand) Int31n(n int32) int32 {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Int31n&#34;)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if n&amp;(n-1) == 0 { <span class="comment">// n is power of two, can mask</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return r.Int31() &amp; (n - 1)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	max := int32((1 &lt;&lt; 31) - 1 - (1&lt;&lt;31)%uint32(n))
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	v := r.Int31()
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	for v &gt; max {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		v = r.Int31()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return v % n
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// n must be &gt; 0, but int31n does not check this; the caller must ensure it.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// int31n exists because Int31n is inefficient, but Go 1 compatibility</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// requires that the stream of values produced by math/rand remain unchanged.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span><span class="comment">// int31n can thus only be used internally, by newly introduced APIs.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// For implementation details, see:</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// https://lemire.me/blog/2016/06/30/fast-random-shuffling</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func (r *Rand) int31n(n int32) int32 {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	v := r.Uint32()
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	prod := uint64(v) * uint64(n)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	low := uint32(prod)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	if low &lt; uint32(n) {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		thresh := uint32(-n) % uint32(n)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		for low &lt; thresh {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			v = r.Uint32()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			prod = uint64(v) * uint64(n)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			low = uint32(prod)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return int32(prod &gt;&gt; 32)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="selection">func (r *Rand) Intn(n int) int</span> {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Intn&#34;)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if n &lt;= 1&lt;&lt;31-1 {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return int(r.Int31n(int32(n)))
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return int(r.Int63n(int64(n)))
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0).</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (r *Rand) Float64() float64 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// A clearer, simpler implementation would be:</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">//	return float64(r.Int63n(1&lt;&lt;53)) / (1&lt;&lt;53)</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// However, Go 1 shipped with</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">//	return float64(r.Int63()) / (1 &lt;&lt; 63)</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// and we want to preserve that value stream.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// There is one bug in the value stream: r.Int63() may be so close</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// to 1&lt;&lt;63 that the division rounds up to 1.0, and we&#39;ve guaranteed</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// that the result is always less than 1.0.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// We tried to fix this by mapping 1.0 back to 0.0, but since float64</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// values near 0 are much denser than near 1, mapping 1 to 0 caused</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// a theoretically significant overshoot in the probability of returning 0.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// Instead of that, if we round up to 1, just try again.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// Getting 1 only happens 1/2⁵³ of the time, so most clients</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// will not observe it anyway.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>again:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	f := float64(r.Int63()) / (1 &lt;&lt; 63)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if f == 1 {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		goto again <span class="comment">// resample; this branch is taken O(never)</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return f
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0).</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (r *Rand) Float32() float32 {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// Same rationale as in Float64: we want to preserve the Go 1 value</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// stream except we want to fix it not to return 1.0</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// This only happens 1/2²⁴ of the time (plus the 1/2⁵³ of the time in Float64).</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>again:
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	f := float32(r.Float64())
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if f == 1 {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		goto again <span class="comment">// resample; this branch is taken O(very rarely)</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return f
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// in the half-open interval [0,n).</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func (r *Rand) Perm(n int) []int {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	m := make([]int, n)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// In the following loop, the iteration when i=0 always swaps m[0] with m[0].</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// A change to remove this useless iteration is to assign 1 to i in the init</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// statement. But Perm also effects r. Making this change will affect</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// the final state of r. So this change can&#39;t be made for compatibility</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// reasons for Go 1.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		j := r.Intn(i + 1)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		m[i] = m[j]
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		m[j] = i
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	return m
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// Shuffle pseudo-randomizes the order of elements.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// n is the number of elements. Shuffle panics if n &lt; 0.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// swap swaps the elements with indexes i and j.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func (r *Rand) Shuffle(n int, swap func(i, j int)) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Shuffle&#34;)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// Fisher-Yates shuffle: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// Shuffle really ought not be called with n that doesn&#39;t fit in 32 bits.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Not only will it take a very long time, but with 2³¹! possible permutations,</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// there&#39;s no way that any PRNG can have a big enough internal state to</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// generate even a minuscule percentage of the possible permutations.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Nevertheless, the right API signature accepts an int n, so handle it as best we can.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	i := n - 1
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	for ; i &gt; 1&lt;&lt;31-1-1; i-- {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		j := int(r.Int63n(int64(i + 1)))
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		swap(i, j)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	for ; i &gt; 0; i-- {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		j := int(r.int31n(int32(i + 1)))
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		swap(i, j)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// Read generates len(p) random bytes and writes them into p. It</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// always returns len(p) and a nil error.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// Read should not be called concurrently with any other Rand method.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>func (r *Rand) Read(p []byte) (n int, err error) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	switch src := r.src.(type) {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	case *lockedSource:
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		return src.read(p, &amp;r.readVal, &amp;r.readPos)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	case *runtimeSource:
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		return src.read(p, &amp;r.readVal, &amp;r.readPos)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	return read(p, r.src, &amp;r.readVal, &amp;r.readPos)
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>func read(p []byte, src Source, readVal *int64, readPos *int8) (n int, err error) {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	pos := *readPos
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	val := *readVal
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	rng, _ := src.(*rngSource)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	for n = 0; n &lt; len(p); n++ {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		if pos == 0 {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			if rng != nil {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>				val = rng.Int63()
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			} else {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>				val = src.Int63()
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			pos = 7
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		p[n] = byte(val)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		val &gt;&gt;= 8
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		pos--
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	*readPos = pos
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	*readVal = val
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">/*
<span id="L305" class="ln">   305&nbsp;&nbsp;</span> * Top-level convenience functions
<span id="L306" class="ln">   306&nbsp;&nbsp;</span> */</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">// globalRandGenerator is the source of random numbers for the top-level</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// convenience functions. When possible it uses the runtime fastrand64</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// function to avoid locking. This is not possible if the user called Seed,</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// either explicitly or implicitly via GODEBUG=randautoseed=0.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>var globalRandGenerator atomic.Pointer[Rand]
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>var randautoseed = godebug.New(&#34;randautoseed&#34;)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// globalRand returns the generator to use for the top-level convenience</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// functions.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>func globalRand() *Rand {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if r := globalRandGenerator.Load(); r != nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		return r
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// This is the first call. Initialize based on GODEBUG.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	var r *Rand
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if randautoseed.Value() == &#34;0&#34; {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		randautoseed.IncNonDefault()
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		r = New(new(lockedSource))
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		r.Seed(1)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	} else {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		r = &amp;Rand{
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>			src: &amp;runtimeSource{},
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			s64: &amp;runtimeSource{},
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>		}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if !globalRandGenerator.CompareAndSwap(nil, r) {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		<span class="comment">// Two different goroutines called some top-level</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		<span class="comment">// function at the same time. While the results in</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		<span class="comment">// that case are unpredictable, if we just use r here,</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		<span class="comment">// and we are using a seed, we will most likely return</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// the same value for both calls. That doesn&#39;t seem ideal.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		<span class="comment">// Just use the first one to get in.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		return globalRandGenerator.Load()
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return r
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">//go:linkname runtime_rand runtime.rand</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>func runtime_rand() uint64
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// runtimeSource is an implementation of Source64 that uses the runtime</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// fastrand functions.</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>type runtimeSource struct {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// The mutex is used to avoid race conditions in Read.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	mu sync.Mutex
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (*runtimeSource) Int63() int64 {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	return int64(runtime_rand() &amp; rngMask)
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func (*runtimeSource) Seed(int64) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	panic(&#34;internal error: call to runtimeSource.Seed&#34;)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>func (*runtimeSource) Uint64() uint64 {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return runtime_rand()
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func (fs *runtimeSource) read(p []byte, readVal *int64, readPos *int8) (n int, err error) {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	fs.mu.Lock()
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	n, err = read(p, fs, readVal, readPos)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	fs.mu.Unlock()
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	return
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// Seed uses the provided seed value to initialize the default Source to a</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// deterministic state. Seed values that have the same remainder when</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// divided by 2³¹-1 generate the same pseudo-random sequence.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// Seed, unlike the [Rand.Seed] method, is safe for concurrent use.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// If Seed is not called, the generator is seeded randomly at program startup.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// Prior to Go 1.20, the generator was seeded like Seed(1) at program startup.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">// To force the old behavior, call Seed(1) at program startup.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// Alternately, set GODEBUG=randautoseed=0 in the environment</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// before making any calls to functions in this package.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// Deprecated: As of Go 1.20 there is no reason to call Seed with</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// a random value. Programs that call Seed with a known value to get</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// a specific sequence of results should use New(NewSource(seed)) to</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// obtain a local random generator.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>func Seed(seed int64) {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	orig := globalRandGenerator.Load()
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	<span class="comment">// If we are already using a lockedSource, we can just re-seed it.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	if orig != nil {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		if _, ok := orig.src.(*lockedSource); ok {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			orig.Seed(seed)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			return
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// Otherwise either</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// 1) orig == nil, which is the normal case when Seed is the first</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	<span class="comment">// top-level function to be called, or</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// 2) orig is already a runtimeSource, in which case we need to change</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	<span class="comment">// to a lockedSource.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// Either way we do the same thing.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	r := New(new(lockedSource))
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	r.Seed(seed)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	if !globalRandGenerator.CompareAndSwap(orig, r) {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		<span class="comment">// Something changed underfoot. Retry to be safe.</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		Seed(seed)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// Int63 returns a non-negative pseudo-random 63-bit integer as an int64</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>func Int63() int64 { return globalRand().Int63() }
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">// Uint32 returns a pseudo-random 32-bit value as a uint32</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>func Uint32() uint32 { return globalRand().Uint32() }
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">// Uint64 returns a pseudo-random 64-bit value as a uint64</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>func Uint64() uint64 { return globalRand().Uint64() }
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// Int31 returns a non-negative pseudo-random 31-bit integer as an int32</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>func Int31() int32 { return globalRand().Int31() }
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// Int returns a non-negative pseudo-random int from the default [Source].</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>func Int() int { return globalRand().Int() }
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// Int63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n)</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>func Int63n(n int64) int64 { return globalRand().Int63n(n) }
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n)</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func Int31n(n int32) int32 { return globalRand().Int31n(n) }
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n)</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>func Intn(n int) int { return globalRand().Intn(n) }
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0)</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>func Float64() float64 { return globalRand().Float64() }
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span><span class="comment">// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0)</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>func Float32() float32 { return globalRand().Float32() }
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">// in the half-open interval [0,n) from the default [Source].</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>func Perm(n int) []int { return globalRand().Perm(n) }
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">// Shuffle pseudo-randomizes the order of elements using the default [Source].</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// n is the number of elements. Shuffle panics if n &lt; 0.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// swap swaps the elements with indexes i and j.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>func Shuffle(n int, swap func(i, j int)) { globalRand().Shuffle(n, swap) }
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// Read generates len(p) random bytes from the default [Source] and</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// writes them into p. It always returns len(p) and a nil error.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// Read, unlike the [Rand.Read] method, is safe for concurrent use.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// Deprecated: For almost all use cases, [crypto/rand.Read] is more appropriate.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>func Read(p []byte) (n int, err error) { return globalRand().Read(p) }
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// NormFloat64 returns a normally distributed float64 in the range</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// [-[math.MaxFloat64], +[math.MaxFloat64]] with</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// standard normal distribution (mean = 0, stddev = 1)</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// from the default [Source].</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// To produce a different normal distribution, callers can</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// adjust the output using:</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">//	sample = NormFloat64() * desiredStdDev + desiredMean</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>func NormFloat64() float64 { return globalRand().NormFloat64() }
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// ExpFloat64 returns an exponentially distributed float64 in the range</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// (0, +[math.MaxFloat64]] with an exponential distribution whose rate parameter</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// (lambda) is 1 and whose mean is 1/lambda (1) from the default [Source].</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// To produce a distribution with a different rate parameter,</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// callers can adjust the output using:</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">//	sample = ExpFloat64() / desiredRateParameter</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>func ExpFloat64() float64 { return globalRand().ExpFloat64() }
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>type lockedSource struct {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	lk sync.Mutex
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	s  *rngSource
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>func (r *lockedSource) Int63() (n int64) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	r.lk.Lock()
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	n = r.s.Int63()
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	r.lk.Unlock()
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	return
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func (r *lockedSource) Uint64() (n uint64) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	r.lk.Lock()
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	n = r.s.Uint64()
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	r.lk.Unlock()
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	return
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>func (r *lockedSource) Seed(seed int64) {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	r.lk.Lock()
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	r.seed(seed)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	r.lk.Unlock()
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">// seedPos implements Seed for a lockedSource without a race condition.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>func (r *lockedSource) seedPos(seed int64, readPos *int8) {
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	r.lk.Lock()
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	r.seed(seed)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	*readPos = 0
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	r.lk.Unlock()
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span><span class="comment">// seed seeds the underlying source.</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span><span class="comment">// The caller must have locked r.lk.</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>func (r *lockedSource) seed(seed int64) {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	if r.s == nil {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		r.s = newSource(seed)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	} else {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		r.s.Seed(seed)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// read implements Read for a lockedSource without a race condition.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>func (r *lockedSource) read(p []byte, readVal *int64, readPos *int8) (n int, err error) {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	r.lk.Lock()
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	n, err = read(p, r.s, readVal, readPos)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	r.lk.Unlock()
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	return
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>
</pre><p><a href="rand.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
