<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/rand/v2/pcg.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./pcg.go?s=569:606#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/rand">rand</a>/<a href="http://localhost:8080/src/math/rand/v2">v2</a>/<span class="text-muted">pcg.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/rand/v2">math/rand/v2</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2023 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package rand
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>)
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// https://numpy.org/devdocs/reference/random/upgrading-pcg64.html</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// https://github.com/imneme/pcg-cpp/commit/871d0494ee9c9a7b7c43f753e3d8ca47c26f8005</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// A PCG is a PCG generator with 128 bits of internal state.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// A zero PCG is equivalent to NewPCG(0, 0).</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>type PCG struct {
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	hi uint64
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	lo uint64
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>}
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// NewPCG returns a new PCG seeded with the given values.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="selection">func NewPCG(seed1, seed2 uint64) *PCG</span> {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	return &amp;PCG{seed1, seed2}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Seed resets the PCG to behave the same way as NewPCG(seed1, seed2).</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>func (p *PCG) Seed(seed1, seed2 uint64) {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	p.hi = seed1
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	p.lo = seed2
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// binary.bigEndian.Uint64, copied to avoid dependency</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func beUint64(b []byte) uint64 {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	_ = b[7] <span class="comment">// bounds check hint to compiler; see golang.org/issue/14808</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	return uint64(b[7]) | uint64(b[6])&lt;&lt;8 | uint64(b[5])&lt;&lt;16 | uint64(b[4])&lt;&lt;24 |
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		uint64(b[3])&lt;&lt;32 | uint64(b[2])&lt;&lt;40 | uint64(b[1])&lt;&lt;48 | uint64(b[0])&lt;&lt;56
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// binary.bigEndian.PutUint64, copied to avoid dependency</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>func bePutUint64(b []byte, v uint64) {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	_ = b[7] <span class="comment">// early bounds check to guarantee safety of writes below</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	b[0] = byte(v &gt;&gt; 56)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	b[1] = byte(v &gt;&gt; 48)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	b[2] = byte(v &gt;&gt; 40)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	b[3] = byte(v &gt;&gt; 32)
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	b[4] = byte(v &gt;&gt; 24)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	b[5] = byte(v &gt;&gt; 16)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	b[6] = byte(v &gt;&gt; 8)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	b[7] = byte(v)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// MarshalBinary implements the encoding.BinaryMarshaler interface.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (p *PCG) MarshalBinary() ([]byte, error) {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	b := make([]byte, 20)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	copy(b, &#34;pcg:&#34;)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	bePutUint64(b[4:], p.hi)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	bePutUint64(b[4+8:], p.lo)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	return b, nil
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>var errUnmarshalPCG = errors.New(&#34;invalid PCG encoding&#34;)
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>func (p *PCG) UnmarshalBinary(data []byte) error {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	if len(data) != 20 || string(data[:4]) != &#34;pcg:&#34; {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		return errUnmarshalPCG
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	p.hi = beUint64(data[4:])
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	p.lo = beUint64(data[4+8:])
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return nil
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>func (p *PCG) next() (hi, lo uint64) {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L161</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// Numpy&#39;s PCG multiplies by the 64-bit value cheapMul</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// instead of the 128-bit value used here and in the official PCG code.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// This does not seem worthwhile, at least for Go: not having any high</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// bits in the multiplier reduces the effect of low bits on the highest bits,</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// and it only saves 1 multiply out of 3.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// (On 32-bit systems, it saves 1 out of 6, since Mul64 is doing 4.)</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	const (
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		mulHi = 2549297995355413924
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		mulLo = 4865540595714422341
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		incHi = 6364136223846793005
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		incLo = 1442695040888963407
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// state = state * mul + inc</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	hi, lo = bits.Mul64(p.lo, mulLo)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	hi += p.hi*mulLo + p.lo*mulHi
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	lo, c := bits.Add64(lo, incLo, 0)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	hi, _ = bits.Add64(hi, incHi, c)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	p.lo = lo
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	p.hi = hi
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return hi, lo
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Uint64 return a uniformly-distributed random uint64 value.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>func (p *PCG) Uint64() uint64 {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	hi, lo := p.next()
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// XSL-RR would be</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">//	hi, lo := p.next()</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">//	return bits.RotateLeft64(lo^hi, -int(hi&gt;&gt;58))</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// but Numpy uses DXSM and O&#39;Neill suggests doing the same.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// See https://github.com/golang/go/issues/21835#issuecomment-739065688</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// and following comments.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// DXSM &#34;double xorshift multiply&#34;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L1015</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// https://github.com/imneme/pcg-cpp/blob/428802d1a5/include/pcg_random.hpp#L176</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	const cheapMul = 0xda942042e4dd58b5
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	hi ^= hi &gt;&gt; 32
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	hi *= cheapMul
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	hi ^= hi &gt;&gt; 48
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	hi *= (lo | 1)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	return hi
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
</pre><p><a href="pcg.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
