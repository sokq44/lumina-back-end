<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/math/rand/v2/rand.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./rand.go?s=11763:11785#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/math">math</a>/<a href="http://localhost:8080/src/math/rand">rand</a>/<a href="http://localhost:8080/src/math/rand/v2">v2</a>/<span class="text-muted">rand.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/math/rand/v2">math/rand/v2</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package rand implements pseudo-random number generators suitable for tasks</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// such as simulation, but it should not be used for security-sensitive work.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// Random numbers are generated by a [Source], usually wrapped in a [Rand].</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Both types should be used by a single goroutine at a time: sharing among</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// multiple goroutines requires some kind of synchronization.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Top-level functions, such as [Float64] and [Int],</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// are safe for concurrent use by multiple goroutines.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// This package&#39;s outputs might be easily predictable regardless of how it&#39;s</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// seeded. For random numbers suitable for security-sensitive work, see the</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// crypto/rand package.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>package rand
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>import (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	_ &#34;unsafe&#34; <span class="comment">// for go:linkname</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// A Source is a source of uniformly-distributed</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// pseudo-random uint64 values in the range [0, 1&lt;&lt;64).</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// A Source is not safe for concurrent use by multiple goroutines.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Source interface {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	Uint64() uint64
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// A Rand is a source of random numbers.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>type Rand struct {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	src Source
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// New returns a new Rand that uses random values from src</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// to generate other random values.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func New(src Source) *Rand {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	return &amp;Rand{src: src}
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// Int64 returns a non-negative pseudo-random 63-bit integer as an int64.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func (r *Rand) Int64() int64 { return int64(r.src.Uint64() &amp;^ (1 &lt;&lt; 63)) }
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// Uint32 returns a pseudo-random 32-bit value as a uint32.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (r *Rand) Uint32() uint32 { return uint32(r.src.Uint64() &gt;&gt; 32) }
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// Uint64 returns a pseudo-random 64-bit value as a uint64.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func (r *Rand) Uint64() uint64 { return r.src.Uint64() }
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// Int32 returns a non-negative pseudo-random 31-bit integer as an int32.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (r *Rand) Int32() int32 { return int32(r.src.Uint64() &gt;&gt; 33) }
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// Int returns a non-negative pseudo-random int.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>func (r *Rand) Int() int { return int(uint(r.src.Uint64()) &lt;&lt; 1 &gt;&gt; 1) }
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// Int64N returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>func (r *Rand) Int64N(n int64) int64 {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Int64N&#34;)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	return int64(r.uint64n(uint64(n)))
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Uint64N returns, as a uint64, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// It panics if n == 0.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>func (r *Rand) Uint64N(n uint64) uint64 {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	if n == 0 {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Uint64N&#34;)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	return r.uint64n(n)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// uint64n is the no-bounds-checks version of Uint64N.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func (r *Rand) uint64n(n uint64) uint64 {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if is32bit &amp;&amp; uint64(uint32(n)) == n {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		return uint64(r.uint32n(uint32(n)))
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if n&amp;(n-1) == 0 { <span class="comment">// n is power of two, can mask</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return r.Uint64() &amp; (n - 1)
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// Suppose we have a uint64 x uniform in the range [0,2⁶⁴)</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// and want to reduce it to the range [0,n) preserving exact uniformity.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// We can simulate a scaling arbitrary precision x * (n/2⁶⁴) by</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// the high bits of a double-width multiply of x*n, meaning (x*n)/2⁶⁴.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Since there are 2⁶⁴ possible inputs x and only n possible outputs,</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// the output is necessarily biased if n does not divide 2⁶⁴.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// In general (x*n)/2⁶⁴ = k for x*n in [k*2⁶⁴,(k+1)*2⁶⁴).</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// There are either floor(2⁶⁴/n) or ceil(2⁶⁴/n) possible products</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// in that range, depending on k.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// But suppose we reject the sample and try again when</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// x*n is in [k*2⁶⁴, k*2⁶⁴+(2⁶⁴%n)), meaning rejecting fewer than n possible</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// outcomes out of the 2⁶⁴.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// Now there are exactly floor(2⁶⁴/n) possible ways to produce</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// each output value k, so we&#39;ve restored uniformity.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// To get valid uint64 math, 2⁶⁴ % n = (2⁶⁴ - n) % n = -n % n,</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// so the direct implementation of this algorithm would be:</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">//	hi, lo := bits.Mul64(r.Uint64(), n)</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">//	thresh := -n % n</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">//	for lo &lt; thresh {</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">//		hi, lo = bits.Mul64(r.Uint64(), n)</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">//	}</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// That still leaves an expensive 64-bit division that we would rather avoid.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// We know that thresh &lt; n, and n is usually much less than 2⁶⁴, so we can</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// avoid the last four lines unless lo &lt; n.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// See also:</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// https://lemire.me/blog/2016/06/30/fast-random-shuffling</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	hi, lo := bits.Mul64(r.Uint64(), n)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if lo &lt; n {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		thresh := -n % n
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		for lo &lt; thresh {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			hi, lo = bits.Mul64(r.Uint64(), n)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	return hi
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// uint32n is an identical computation to uint64n</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span><span class="comment">// but optimized for 32-bit systems.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (r *Rand) uint32n(n uint32) uint32 {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	if n&amp;(n-1) == 0 { <span class="comment">// n is power of two, can mask</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		return uint32(r.Uint64()) &amp; (n - 1)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// On 64-bit systems we still use the uint64 code below because</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// the probability of a random uint64 lo being &lt; a uint32 n is near zero,</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// meaning the unbiasing loop almost never runs.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// On 32-bit systems, here we need to implement that same logic in 32-bit math,</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// both to preserve the exact output sequence observed on 64-bit machines</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// and to preserve the optimization that the unbiasing loop almost never runs.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// We want to compute</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// 	hi, lo := bits.Mul64(r.Uint64(), n)</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// In terms of 32-bit halves, this is:</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// 	x1:x0 := r.Uint64()</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// 	0:hi, lo1:lo0 := bits.Mul64(x1:x0, 0:n)</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// Writing out the multiplication in terms of bits.Mul32 allows</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// using direct hardware instructions and avoiding</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// the computations involving these zeros.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	x := r.Uint64()
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	lo1a, lo0 := bits.Mul32(uint32(x), n)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	hi, lo1b := bits.Mul32(uint32(x&gt;&gt;32), n)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	lo1, c := bits.Add32(lo1a, lo1b, 0)
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	hi += c
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if lo1 == 0 &amp;&amp; lo0 &lt; uint32(n) {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		n64 := uint64(n)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		thresh := uint32(-n64 % n64)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		for lo1 == 0 &amp;&amp; lo0 &lt; thresh {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>			x := r.Uint64()
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			lo1a, lo0 = bits.Mul32(uint32(x), n)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			hi, lo1b = bits.Mul32(uint32(x&gt;&gt;32), n)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			lo1, c = bits.Add32(lo1a, lo1b, 0)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			hi += c
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return hi
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// Int32N returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>func (r *Rand) Int32N(n int32) int32 {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Int32N&#34;)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	return int32(r.uint64n(uint64(n)))
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// Uint32N returns, as a uint32, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// It panics if n == 0.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>func (r *Rand) Uint32N(n uint32) uint32 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	if n == 0 {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Uint32N&#34;)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return uint32(r.uint64n(uint64(n)))
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>const is32bit = ^uint(0)&gt;&gt;32 == 0
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// IntN returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func (r *Rand) IntN(n int) int {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		panic(&#34;invalid argument to IntN&#34;)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	return int(r.uint64n(uint64(n)))
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// UintN returns, as a uint, a non-negative pseudo-random number in the half-open interval [0,n).</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// It panics if n == 0.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func (r *Rand) UintN(n uint) uint {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if n == 0 {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		panic(&#34;invalid argument to UintN&#34;)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return uint(r.uint64n(uint64(n)))
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0).</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (r *Rand) Float64() float64 {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// There are exactly 1&lt;&lt;53 float64s in [0,1). Use Intn(1&lt;&lt;53) / (1&lt;&lt;53).</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return float64(r.Uint64()&lt;&lt;11&gt;&gt;11) / (1 &lt;&lt; 53)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0).</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func (r *Rand) Float32() float32 {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// There are exactly 1&lt;&lt;24 float32s in [0,1). Use Intn(1&lt;&lt;24) / (1&lt;&lt;24).</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return float32(r.Uint32()&lt;&lt;8&gt;&gt;8) / (1 &lt;&lt; 24)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// in the half-open interval [0,n).</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func (r *Rand) Perm(n int) []int {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	p := make([]int, n)
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	for i := range p {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		p[i] = i
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	r.Shuffle(len(p), func(i, j int) { p[i], p[j] = p[j], p[i] })
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return p
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// Shuffle pseudo-randomizes the order of elements.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// n is the number of elements. Shuffle panics if n &lt; 0.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// swap swaps the elements with indexes i and j.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (r *Rand) Shuffle(n int, swap func(i, j int)) {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		panic(&#34;invalid argument to Shuffle&#34;)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// Fisher-Yates shuffle: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// Shuffle really ought not be called with n that doesn&#39;t fit in 32 bits.</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// Not only will it take a very long time, but with 2³¹! possible permutations,</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// there&#39;s no way that any PRNG can have a big enough internal state to</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// generate even a minuscule percentage of the possible permutations.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// Nevertheless, the right API signature accepts an int n, so handle it as best we can.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	for i := n - 1; i &gt; 0; i-- {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		j := int(r.uint64n(uint64(i + 1)))
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		swap(i, j)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">/*
<span id="L248" class="ln">   248&nbsp;&nbsp;</span> * Top-level convenience functions
<span id="L249" class="ln">   249&nbsp;&nbsp;</span> */</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// globalRand is the source of random numbers for the top-level</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// convenience functions.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>var globalRand = &amp;Rand{src: &amp;runtimeSource{}}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//go:linkname runtime_rand runtime.rand</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>func runtime_rand() uint64
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// runtimeSource is a Source that uses the runtime fastrand functions.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>type runtimeSource struct{}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func (*runtimeSource) Uint64() uint64 {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return runtime_rand()
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// Int64 returns a non-negative pseudo-random 63-bit integer as an int64</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>func Int64() int64 { return globalRand.Int64() }
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// Uint32 returns a pseudo-random 32-bit value as a uint32</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func Uint32() uint32 { return globalRand.Uint32() }
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// Uint64N returns, as a uint64, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>func Uint64N(n uint64) uint64 { return globalRand.Uint64N(n) }
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// Uint32N returns, as a uint32, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func Uint32N(n uint32) uint32 { return globalRand.Uint32N(n) }
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// Uint64 returns a pseudo-random 64-bit value as a uint64</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func Uint64() uint64 { return globalRand.Uint64() }
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// Int32 returns a non-negative pseudo-random 31-bit integer as an int32</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>func Int32() int32 { return globalRand.Int32() }
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// Int returns a non-negative pseudo-random int from the default Source.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>func Int() int { return globalRand.Int() }
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// Int64N returns, as an int64, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>func Int64N(n int64) int64 { return globalRand.Int64N(n) }
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">// Int32N returns, as an int32, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>func Int32N(n int32) int32 { return globalRand.Int32N(n) }
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// IntN returns, as an int, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func IntN(n int) int { return globalRand.IntN(n) }
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// UintN returns, as a uint, a pseudo-random number in the half-open interval [0,n)</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>func UintN(n uint) uint { return globalRand.UintN(n) }
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// N returns a pseudo-random number in the half-open interval [0,n) from the default Source.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// The type parameter Int can be any integer type.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// It panics if n &lt;= 0.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>func N[Int intType](n Int) Int {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		panic(&#34;invalid argument to N&#34;)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	return Int(globalRand.uint64n(uint64(n)))
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>type intType interface {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	~int | ~int8 | ~int16 | ~int32 | ~int64 |
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// Float64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0)</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>func Float64() float64 { return globalRand.Float64() }
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// Float32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0)</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>func Float32() float32 { return globalRand.Float32() }
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// in the half-open interval [0,n) from the default Source.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="selection">func Perm(n int) []int</span> { return globalRand.Perm(n) }
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// Shuffle pseudo-randomizes the order of elements using the default Source.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// n is the number of elements. Shuffle panics if n &lt; 0.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// swap swaps the elements with indexes i and j.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>func Shuffle(n int, swap func(i, j int)) { globalRand.Shuffle(n, swap) }
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// NormFloat64 returns a normally distributed float64 in the range</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// [-math.MaxFloat64, +math.MaxFloat64] with</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// standard normal distribution (mean = 0, stddev = 1)</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// from the default Source.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// To produce a different normal distribution, callers can</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// adjust the output using:</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">//	sample = NormFloat64() * desiredStdDev + desiredMean</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>func NormFloat64() float64 { return globalRand.NormFloat64() }
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// ExpFloat64 returns an exponentially distributed float64 in the range</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// (0, +math.MaxFloat64] with an exponential distribution whose rate parameter</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// (lambda) is 1 and whose mean is 1/lambda (1) from the default Source.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// To produce a distribution with a different rate parameter,</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// callers can adjust the output using:</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">//	sample = ExpFloat64() / desiredRateParameter</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>func ExpFloat64() float64 { return globalRand.ExpFloat64() }
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
</pre><p><a href="rand.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
