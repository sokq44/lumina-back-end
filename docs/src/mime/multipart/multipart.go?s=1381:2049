<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/mime/multipart/multipart.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./multipart.go?s=1381:2049#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/mime">mime</a>/<a href="http://localhost:8080/src/mime/multipart">multipart</a>/<span class="text-muted">multipart.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/mime/multipart">mime/multipart</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">/*
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>Package multipart implements MIME multipart parsing, as defined in RFC
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>2046.
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>The implementation is sufficient for HTTP (RFC 2388) and the multipart
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>bodies generated by popular browsers.
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span># Limits
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>To protect against malicious inputs, this package sets limits on the size
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>of the MIME data it processes.
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>Reader.NextPart and Reader.NextRawPart limit the number of headers in a
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>part to 10000 and Reader.ReadForm limits the total number of headers in all
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>FileHeaders to 10000.
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>These limits may be adjusted with the GODEBUG=multipartmaxheaders=&lt;values&gt;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>setting.
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>Reader.ReadForm further limits the number of parts in a form to 1000.
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>This limit may be adjusted with the GODEBUG=multipartmaxparts=&lt;value&gt;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>setting.
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>*/</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>package multipart
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>import (
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	&#34;mime&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	&#34;mime/quotedprintable&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>)
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>var emptyParams = make(map[string]string)
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// This constant needs to be at least 76 for this package to work correctly.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// This is because \r\n--separator_of_len_70- would fill the buffer and it</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// wouldn&#39;t be safe to consume a single byte from it.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>const peekBufferSize = 4096
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// A Part represents a single part in a multipart body.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="selection">type Part struct {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	</span><span class="selection-comment">// The headers of the body, if any, with the keys canonicalized</span><span class="selection">
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	</span><span class="selection-comment">// in the same fashion that the Go http.Request headers are.</span><span class="selection">
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	</span><span class="selection-comment">// For example, &#34;foo-bar&#34; changes case to &#34;Foo-Bar&#34;</span><span class="selection">
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	Header textproto.MIMEHeader
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	mr *Reader
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	disposition       string
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	dispositionParams map[string]string
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	</span><span class="selection-comment">// r is either a reader directly reading from mr, or it&#39;s a</span><span class="selection">
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	</span><span class="selection-comment">// wrapper around such a reader, decoding the</span><span class="selection">
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Content-Transfer-Encoding</span><span class="selection">
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	r io.Reader
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	n       int   </span><span class="selection-comment">// known data bytes waiting in mr.bufReader</span><span class="selection">
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	total   int64 </span><span class="selection-comment">// total data bytes read already</span><span class="selection">
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	err     error </span><span class="selection-comment">// error to return when n == 0</span><span class="selection">
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	readErr error </span><span class="selection-comment">// read error observed from mr.bufReader</span><span class="selection">
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// FormName returns the name parameter if p has a Content-Disposition</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// of type &#34;form-data&#34;.  Otherwise it returns the empty string.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func (p *Part) FormName() string {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// See https://tools.ietf.org/html/rfc2183 section 2 for EBNF</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// of Content-Disposition value format.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if p.dispositionParams == nil {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		p.parseContentDisposition()
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if p.disposition != &#34;form-data&#34; {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	return p.dispositionParams[&#34;name&#34;]
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// FileName returns the filename parameter of the Part&#39;s Content-Disposition</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// header. If not empty, the filename is passed through filepath.Base (which is</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// platform dependent) before being returned.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (p *Part) FileName() string {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if p.dispositionParams == nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		p.parseContentDisposition()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	filename := p.dispositionParams[&#34;filename&#34;]
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	if filename == &#34;&#34; {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// RFC 7578, Section 4.2 requires that if a filename is provided, the</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// directory path information must not be used.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	return filepath.Base(filename)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func (p *Part) parseContentDisposition() {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	v := p.Header.Get(&#34;Content-Disposition&#34;)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	var err error
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	p.disposition, p.dispositionParams, err = mime.ParseMediaType(v)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	if err != nil {
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		p.dispositionParams = emptyParams
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// NewReader creates a new multipart Reader reading from r using the</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// given MIME boundary.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// The boundary is usually obtained from the &#34;boundary&#34; parameter of</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// the message&#39;s &#34;Content-Type&#34; header. Use mime.ParseMediaType to</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// parse such headers.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>func NewReader(r io.Reader, boundary string) *Reader {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	b := []byte(&#34;\r\n--&#34; + boundary + &#34;--&#34;)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	return &amp;Reader{
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		bufReader:        bufio.NewReaderSize(&amp;stickyErrorReader{r: r}, peekBufferSize),
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		nl:               b[:2],
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		nlDashBoundary:   b[:len(b)-2],
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		dashBoundaryDash: b[2:],
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		dashBoundary:     b[2 : len(b)-2],
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// stickyErrorReader is an io.Reader which never calls Read on its</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// underlying Reader once an error has been seen. (the io.Reader</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// interface&#39;s contract promises nothing about the return values of</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// Read calls after an error, yet this package does do multiple Reads</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span><span class="comment">// after error)</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>type stickyErrorReader struct {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	r   io.Reader
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	err error
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (r *stickyErrorReader) Read(p []byte) (n int, _ error) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if r.err != nil {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return 0, r.err
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	n, r.err = r.r.Read(p)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return n, r.err
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func newPart(mr *Reader, rawPart bool, maxMIMEHeaderSize, maxMIMEHeaders int64) (*Part, error) {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	bp := &amp;Part{
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		Header: make(map[string][]string),
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		mr:     mr,
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if err := bp.populateHeaders(maxMIMEHeaderSize, maxMIMEHeaders); err != nil {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return nil, err
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	bp.r = partReader{bp}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// rawPart is used to switch between Part.NextPart and Part.NextRawPart.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if !rawPart {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		const cte = &#34;Content-Transfer-Encoding&#34;
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		if strings.EqualFold(bp.Header.Get(cte), &#34;quoted-printable&#34;) {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			bp.Header.Del(cte)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			bp.r = quotedprintable.NewReader(bp.r)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	return bp, nil
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (p *Part) populateHeaders(maxMIMEHeaderSize, maxMIMEHeaders int64) error {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	r := textproto.NewReader(p.mr.bufReader)
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	header, err := readMIMEHeader(r, maxMIMEHeaderSize, maxMIMEHeaders)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	if err == nil {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		p.Header = header
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// TODO: Add a distinguishable error to net/textproto.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	if err != nil &amp;&amp; err.Error() == &#34;message too large&#34; {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		err = ErrMessageTooLarge
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	return err
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// Read reads the body of a part, after its headers and before the</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// next part (if any) begins.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>func (p *Part) Read(d []byte) (n int, err error) {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return p.r.Read(d)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// partReader implements io.Reader by reading raw bytes directly from the</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// wrapped *Part, without doing any Transfer-Encoding decoding.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>type partReader struct {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	p *Part
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>func (pr partReader) Read(d []byte) (int, error) {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	p := pr.p
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	br := p.mr.bufReader
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Read into buffer until we identify some data to return,</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// or we find a reason to stop (boundary or read error).</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	for p.n == 0 &amp;&amp; p.err == nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		peek, _ := br.Peek(br.Buffered())
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		p.n, p.err = scanUntilBoundary(peek, p.mr.dashBoundary, p.mr.nlDashBoundary, p.total, p.readErr)
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		if p.n == 0 &amp;&amp; p.err == nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			<span class="comment">// Force buffered I/O to read more into buffer.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			_, p.readErr = br.Peek(len(peek) + 1)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			if p.readErr == io.EOF {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>				p.readErr = io.ErrUnexpectedEOF
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>			}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// Read out from &#34;data to return&#34; part of buffer.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if p.n == 0 {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		return 0, p.err
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	n := len(d)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	if n &gt; p.n {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		n = p.n
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	n, _ = br.Read(d[:n])
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	p.total += int64(n)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	p.n -= n
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if p.n == 0 {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		return n, p.err
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	return n, nil
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// scanUntilBoundary scans buf to identify how much of it can be safely</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// returned as part of the Part body.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// dashBoundary is &#34;--boundary&#34;.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// nlDashBoundary is &#34;\r\n--boundary&#34; or &#34;\n--boundary&#34;, depending on what mode we are in.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// The comments below (and the name) assume &#34;\n--boundary&#34;, but either is accepted.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// total is the number of bytes read out so far. If total == 0, then a leading &#34;--boundary&#34; is recognized.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// readErr is the read error, if any, that followed reading the bytes in buf.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// scanUntilBoundary returns the number of data bytes from buf that can be</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// returned as part of the Part body and also the error to return (if any)</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// once those data bytes are done.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>func scanUntilBoundary(buf, dashBoundary, nlDashBoundary []byte, total int64, readErr error) (int, error) {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	if total == 0 {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		<span class="comment">// At beginning of body, allow dashBoundary.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if bytes.HasPrefix(buf, dashBoundary) {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			switch matchAfterPrefix(buf, dashBoundary, readErr) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			case -1:
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				return len(dashBoundary), nil
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			case 0:
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				return 0, nil
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			case +1:
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>				return 0, io.EOF
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if bytes.HasPrefix(dashBoundary, buf) {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			return 0, readErr
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Search for &#34;\n--boundary&#34;.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if i := bytes.Index(buf, nlDashBoundary); i &gt;= 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		switch matchAfterPrefix(buf[i:], nlDashBoundary, readErr) {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		case -1:
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			return i + len(nlDashBoundary), nil
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		case 0:
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			return i, nil
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		case +1:
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			return i, io.EOF
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	if bytes.HasPrefix(nlDashBoundary, buf) {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return 0, readErr
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, anything up to the final \n is not part of the boundary</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// and so must be part of the body.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// Also if the section from the final \n onward is not a prefix of the boundary,</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// it too must be part of the body.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	i := bytes.LastIndexByte(buf, nlDashBoundary[0])
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	if i &gt;= 0 &amp;&amp; bytes.HasPrefix(nlDashBoundary, buf[i:]) {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		return i, nil
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	return len(buf), readErr
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// matchAfterPrefix checks whether buf should be considered to match the boundary.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// The prefix is &#34;--boundary&#34; or &#34;\r\n--boundary&#34; or &#34;\n--boundary&#34;,</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// and the caller has verified already that bytes.HasPrefix(buf, prefix) is true.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// matchAfterPrefix returns +1 if the buffer does match the boundary,</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// meaning the prefix is followed by a double dash, space, tab, cr, nl,</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// or end of input.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// It returns -1 if the buffer definitely does NOT match the boundary,</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// meaning the prefix is followed by some other character.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// For example, &#34;--foobar&#34; does not match &#34;--foo&#34;.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// It returns 0 more input needs to be read to make the decision,</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// meaning that len(buf) == len(prefix) and readErr == nil.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>func matchAfterPrefix(buf, prefix []byte, readErr error) int {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if len(buf) == len(prefix) {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		if readErr != nil {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			return +1
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		return 0
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	c := buf[len(prefix)]
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if c == &#39; &#39; || c == &#39;\t&#39; || c == &#39;\r&#39; || c == &#39;\n&#39; {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return +1
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// Try to detect boundaryDash</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if c == &#39;-&#39; {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if len(buf) == len(prefix)+1 {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			if readErr != nil {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>				<span class="comment">// Prefix + &#34;-&#34; does not match</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>				return -1
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			return 0
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		if buf[len(prefix)+1] == &#39;-&#39; {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			return +1
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	return -1
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>func (p *Part) Close() error {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	io.Copy(io.Discard, p)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	return nil
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// Reader is an iterator over parts in a MIME multipart body.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// Reader&#39;s underlying parser consumes its input as needed. Seeking</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">// isn&#39;t supported.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>type Reader struct {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	bufReader *bufio.Reader
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	tempDir   string <span class="comment">// used in tests</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	currentPart *Part
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	partsRead   int
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	nl               []byte <span class="comment">// &#34;\r\n&#34; or &#34;\n&#34; (set after seeing first boundary line)</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	nlDashBoundary   []byte <span class="comment">// nl + &#34;--boundary&#34;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	dashBoundaryDash []byte <span class="comment">// &#34;--boundary--&#34;</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	dashBoundary     []byte <span class="comment">// &#34;--boundary&#34;</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// maxMIMEHeaderSize is the maximum size of a MIME header we will parse,</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// including header keys, values, and map overhead.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>const maxMIMEHeaderSize = 10 &lt;&lt; 20
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// multipartMaxHeaders is the maximum number of header entries NextPart will return,</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// as well as the maximum combined total of header entries Reader.ReadForm will return</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">// in FileHeaders.</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>var multipartMaxHeaders = godebug.New(&#34;multipartmaxheaders&#34;)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>func maxMIMEHeaders() int64 {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	if s := multipartMaxHeaders.Value(); s != &#34;&#34; {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if v, err := strconv.ParseInt(s, 10, 64); err == nil &amp;&amp; v &gt;= 0 {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			multipartMaxHeaders.IncNonDefault()
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			return v
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	return 10000
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// NextPart returns the next part in the multipart or an error.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// When there are no more parts, the error io.EOF is returned.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// As a special case, if the &#34;Content-Transfer-Encoding&#34; header</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// has a value of &#34;quoted-printable&#34;, that header is instead</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// hidden and the body is transparently decoded during Read calls.</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>func (r *Reader) NextPart() (*Part, error) {
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	return r.nextPart(false, maxMIMEHeaderSize, maxMIMEHeaders())
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>}
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// NextRawPart returns the next part in the multipart or an error.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// When there are no more parts, the error io.EOF is returned.</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// Unlike NextPart, it does not have special handling for</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// &#34;Content-Transfer-Encoding: quoted-printable&#34;.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>func (r *Reader) NextRawPart() (*Part, error) {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	return r.nextPart(true, maxMIMEHeaderSize, maxMIMEHeaders())
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>func (r *Reader) nextPart(rawPart bool, maxMIMEHeaderSize, maxMIMEHeaders int64) (*Part, error) {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if r.currentPart != nil {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		r.currentPart.Close()
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if string(r.dashBoundary) == &#34;--&#34; {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;multipart: boundary is empty&#34;)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	expectNewPart := false
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	for {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		line, err := r.bufReader.ReadSlice(&#39;\n&#39;)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		if err == io.EOF &amp;&amp; r.isFinalBoundary(line) {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			<span class="comment">// If the buffer ends in &#34;--boundary--&#34; without the</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			<span class="comment">// trailing &#34;\r\n&#34;, ReadSlice will return an error</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			<span class="comment">// (since it&#39;s missing the &#39;\n&#39;), but this is a valid</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			<span class="comment">// multipart EOF so we need to return io.EOF instead of</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			<span class="comment">// a fmt-wrapped one.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			return nil, io.EOF
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		if err != nil {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;multipart: NextPart: %w&#34;, err)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		if r.isBoundaryDelimiterLine(line) {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			r.partsRead++
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			bp, err := newPart(r, rawPart, maxMIMEHeaderSize, maxMIMEHeaders)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			if err != nil {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				return nil, err
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			r.currentPart = bp
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			return bp, nil
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		if r.isFinalBoundary(line) {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>			<span class="comment">// Expected EOF</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>			return nil, io.EOF
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		if expectNewPart {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;multipart: expecting a new Part; got line %q&#34;, string(line))
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		if r.partsRead == 0 {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			<span class="comment">// skip line</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			continue
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		<span class="comment">// Consume the &#34;\n&#34; or &#34;\r\n&#34; separator between the</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		<span class="comment">// body of the previous part and the boundary line we</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		<span class="comment">// now expect will follow. (either a new part or the</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		<span class="comment">// end boundary)</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		if bytes.Equal(line, r.nl) {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			expectNewPart = true
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			continue
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;multipart: unexpected line in Next(): %q&#34;, line)
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// isFinalBoundary reports whether line is the final boundary line</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// indicating that all parts are over.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// It matches `^--boundary--[ \t]*(\r\n)?$`</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>func (r *Reader) isFinalBoundary(line []byte) bool {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	if !bytes.HasPrefix(line, r.dashBoundaryDash) {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		return false
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	rest := line[len(r.dashBoundaryDash):]
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	rest = skipLWSPChar(rest)
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	return len(rest) == 0 || bytes.Equal(rest, r.nl)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>func (r *Reader) isBoundaryDelimiterLine(line []byte) (ret bool) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// https://tools.ietf.org/html/rfc2046#section-5.1</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">//   The boundary delimiter line is then defined as a line</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">//   consisting entirely of two hyphen characters (&#34;-&#34;,</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	<span class="comment">//   decimal value 45) followed by the boundary parameter</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	<span class="comment">//   value from the Content-Type header field, optional linear</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">//   whitespace, and a terminating CRLF.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	if !bytes.HasPrefix(line, r.dashBoundary) {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		return false
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	rest := line[len(r.dashBoundary):]
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	rest = skipLWSPChar(rest)
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">// On the first part, see our lines are ending in \n instead of \r\n</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	<span class="comment">// and switch into that mode if so. This is a violation of the spec,</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">// but occurs in practice.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	if r.partsRead == 0 &amp;&amp; len(rest) == 1 &amp;&amp; rest[0] == &#39;\n&#39; {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		r.nl = r.nl[1:]
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		r.nlDashBoundary = r.nlDashBoundary[1:]
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	return bytes.Equal(rest, r.nl)
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// skipLWSPChar returns b with leading spaces and tabs removed.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// RFC 822 defines:</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">//	LWSP-char = SPACE / HTAB</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>func skipLWSPChar(b []byte) []byte {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	for len(b) &gt; 0 &amp;&amp; (b[0] == &#39; &#39; || b[0] == &#39;\t&#39;) {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		b = b[1:]
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	return b
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
</pre><p><a href="multipart.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
