<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/mime/multipart/writer.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./writer.go?s=316:391#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/mime">mime</a>/<a href="http://localhost:8080/src/mime/multipart">multipart</a>/<span class="text-muted">writer.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/mime/multipart">mime/multipart</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package multipart
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;crypto/rand&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// A Writer generates multipart messages.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="selection">type Writer struct {
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	w        io.Writer
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	boundary string
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	lastpart *part
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>}</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// NewWriter returns a new multipart Writer with a random boundary,</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// writing to w.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func NewWriter(w io.Writer) *Writer {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	return &amp;Writer{
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		w:        w,
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		boundary: randomBoundary(),
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// Boundary returns the Writer&#39;s boundary.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func (w *Writer) Boundary() string {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	return w.boundary
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// SetBoundary overrides the Writer&#39;s default randomly-generated</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// boundary separator with an explicit value.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// SetBoundary must be called before any parts are created, may only</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// contain certain ASCII characters, and must be non-empty and</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// at most 70 bytes long.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>func (w *Writer) SetBoundary(boundary string) error {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	if w.lastpart != nil {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		return errors.New(&#34;mime: SetBoundary called after write&#34;)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// rfc2046#section-5.1.1</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if len(boundary) &lt; 1 || len(boundary) &gt; 70 {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return errors.New(&#34;mime: invalid boundary length&#34;)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	end := len(boundary) - 1
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	for i, b := range boundary {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; || &#39;a&#39; &lt;= b &amp;&amp; b &lt;= &#39;z&#39; || &#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39; {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>			continue
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		switch b {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		case &#39;\&#39;&#39;, &#39;(&#39;, &#39;)&#39;, &#39;+&#39;, &#39;_&#39;, &#39;,&#39;, &#39;-&#39;, &#39;.&#39;, &#39;/&#39;, &#39;:&#39;, &#39;=&#39;, &#39;?&#39;:
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>			continue
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		case &#39; &#39;:
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			if i != end {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>				continue
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		return errors.New(&#34;mime: invalid boundary character&#34;)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	w.boundary = boundary
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	return nil
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// FormDataContentType returns the Content-Type for an HTTP</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// multipart/form-data with this Writer&#39;s Boundary.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>func (w *Writer) FormDataContentType() string {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	b := w.boundary
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// We must quote the boundary if it contains any of the</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// tspecials characters defined by RFC 2045, or space.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if strings.ContainsAny(b, `()&lt;&gt;@,;:\&#34;/[]?= `) {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		b = `&#34;` + b + `&#34;`
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	return &#34;multipart/form-data; boundary=&#34; + b
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func randomBoundary() string {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	var buf [30]byte
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	_, err := io.ReadFull(rand.Reader, buf[:])
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	if err != nil {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		panic(err)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;%x&#34;, buf[:])
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// CreatePart creates a new multipart section with the provided</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// header. The body of the part should be written to the returned</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// Writer. After calling CreatePart, any previous part may no longer</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// be written to.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error) {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	if w.lastpart != nil {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if err := w.lastpart.close(); err != nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			return nil, err
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	if w.lastpart != nil {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;b, &#34;\r\n--%s\r\n&#34;, w.boundary)
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	} else {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;b, &#34;--%s\r\n&#34;, w.boundary)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	keys := make([]string, 0, len(header))
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	for k := range header {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		keys = append(keys, k)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	sort.Strings(keys)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	for _, k := range keys {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		for _, v := range header[k] {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;b, &#34;%s: %s\r\n&#34;, k, v)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;b, &#34;\r\n&#34;)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	_, err := io.Copy(w.w, &amp;b)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if err != nil {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		return nil, err
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	p := &amp;part{
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		mw: w,
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	w.lastpart = p
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return p, nil
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>var quoteEscaper = strings.NewReplacer(&#34;\\&#34;, &#34;\\\\&#34;, `&#34;`, &#34;\\\&#34;&#34;)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func escapeQuotes(s string) string {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	return quoteEscaper.Replace(s)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// CreateFormFile is a convenience wrapper around CreatePart. It creates</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// a new form-data header with the provided field name and file name.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	h := make(textproto.MIMEHeader)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	h.Set(&#34;Content-Disposition&#34;,
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		fmt.Sprintf(`form-data; name=&#34;%s&#34;; filename=&#34;%s&#34;`,
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			escapeQuotes(fieldname), escapeQuotes(filename)))
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	h.Set(&#34;Content-Type&#34;, &#34;application/octet-stream&#34;)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	return w.CreatePart(h)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// CreateFormField calls CreatePart with a header using the</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span><span class="comment">// given field name.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>func (w *Writer) CreateFormField(fieldname string) (io.Writer, error) {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	h := make(textproto.MIMEHeader)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	h.Set(&#34;Content-Disposition&#34;,
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		fmt.Sprintf(`form-data; name=&#34;%s&#34;`, escapeQuotes(fieldname)))
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	return w.CreatePart(h)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// WriteField calls CreateFormField and then writes the given value.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (w *Writer) WriteField(fieldname, value string) error {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	p, err := w.CreateFormField(fieldname)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if err != nil {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		return err
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	_, err = p.Write([]byte(value))
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Close finishes the multipart message and writes the trailing</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// boundary end line to the output.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func (w *Writer) Close() error {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	if w.lastpart != nil {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		if err := w.lastpart.close(); err != nil {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>			return err
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		w.lastpart = nil
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	_, err := fmt.Fprintf(w.w, &#34;\r\n--%s--\r\n&#34;, w.boundary)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	return err
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>type part struct {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	mw     *Writer
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	closed bool
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	we     error <span class="comment">// last error that occurred writing</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func (p *part) close() error {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	p.closed = true
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return p.we
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (p *part) Write(d []byte) (n int, err error) {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if p.closed {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		return 0, errors.New(&#34;multipart: can&#39;t write to finished part&#34;)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	n, err = p.mw.w.Write(d)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	if err != nil {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		p.we = err
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	return
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
</pre><p><a href="writer.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
