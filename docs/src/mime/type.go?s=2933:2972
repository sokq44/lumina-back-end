<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/mime/type.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./type.go?s=2933:2972#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/mime">mime</a>/<span class="text-muted">type.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/mime">mime</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package mime implements parts of the MIME spec.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>package mime
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>import (
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>)
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>var (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	mimeTypes      sync.Map <span class="comment">// map[string]string; &#34;.Z&#34; =&gt; &#34;application/x-compress&#34;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	mimeTypesLower sync.Map <span class="comment">// map[string]string; &#34;.z&#34; =&gt; &#34;application/x-compress&#34;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// extensions maps from MIME type to list of lowercase file</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// extensions: &#34;image/jpeg&#34; =&gt; [&#34;.jpg&#34;, &#34;.jpeg&#34;]</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	extensionsMu sync.Mutex <span class="comment">// Guards stores (but not loads) on extensions.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	extensions   sync.Map   <span class="comment">// map[string][]string; slice values are append-only.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>func clearSyncMap(m *sync.Map) {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	m.Range(func(k, _ any) bool {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		m.Delete(k)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		return true
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	})
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// setMimeTypes is used by initMime&#39;s non-test path, and by tests.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>func setMimeTypes(lowerExt, mixExt map[string]string) {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	clearSyncMap(&amp;mimeTypes)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	clearSyncMap(&amp;mimeTypesLower)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	clearSyncMap(&amp;extensions)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	for k, v := range lowerExt {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		mimeTypesLower.Store(k, v)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	for k, v := range mixExt {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>		mimeTypes.Store(k, v)
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	extensionsMu.Lock()
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	defer extensionsMu.Unlock()
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	for k, v := range lowerExt {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		justType, _, err := ParseMediaType(v)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		if err != nil {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			panic(err)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		var exts []string
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		if ei, ok := extensions.Load(justType); ok {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>			exts = ei.([]string)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		extensions.Store(justType, append(exts, k))
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>var builtinTypesLower = map[string]string{
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	&#34;.avif&#34;: &#34;image/avif&#34;,
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	&#34;.css&#34;:  &#34;text/css; charset=utf-8&#34;,
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	&#34;.gif&#34;:  &#34;image/gif&#34;,
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	&#34;.htm&#34;:  &#34;text/html; charset=utf-8&#34;,
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	&#34;.html&#34;: &#34;text/html; charset=utf-8&#34;,
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	&#34;.jpeg&#34;: &#34;image/jpeg&#34;,
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	&#34;.jpg&#34;:  &#34;image/jpeg&#34;,
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	&#34;.js&#34;:   &#34;text/javascript; charset=utf-8&#34;,
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	&#34;.json&#34;: &#34;application/json&#34;,
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	&#34;.mjs&#34;:  &#34;text/javascript; charset=utf-8&#34;,
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	&#34;.pdf&#34;:  &#34;application/pdf&#34;,
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	&#34;.png&#34;:  &#34;image/png&#34;,
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	&#34;.svg&#34;:  &#34;image/svg+xml&#34;,
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	&#34;.wasm&#34;: &#34;application/wasm&#34;,
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	&#34;.webp&#34;: &#34;image/webp&#34;,
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	&#34;.xml&#34;:  &#34;text/xml; charset=utf-8&#34;,
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>var once sync.Once <span class="comment">// guards initMime</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>var testInitMime, osInitMime func()
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func initMime() {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	if fn := testInitMime; fn != nil {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		fn()
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	} else {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		setMimeTypes(builtinTypesLower, builtinTypesLower)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		osInitMime()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>}
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// TypeByExtension returns the MIME type associated with the file extension ext.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// The extension ext should begin with a leading dot, as in &#34;.html&#34;.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// When ext has no associated type, TypeByExtension returns &#34;&#34;.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Extensions are looked up first case-sensitively, then case-insensitively.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// The built-in table is small but on unix it is augmented by the local</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// system&#39;s MIME-info database or mime.types file(s) if available under one or</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// more of these names:</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//	/usr/local/share/mime/globs2</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">//	/usr/share/mime/globs2</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//	/etc/mime.types</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//	/etc/apache2/mime.types</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//	/etc/apache/mime.types</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// On Windows, MIME types are extracted from the registry.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// Text types have the charset parameter set to &#34;utf-8&#34; by default.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="selection">func TypeByExtension(ext string) string</span> {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	once.Do(initMime)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Case-sensitive lookup.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	if v, ok := mimeTypes.Load(ext); ok {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return v.(string)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// Case-insensitive lookup.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// Optimistically assume a short ASCII extension and be</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// allocation-free in that case.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	var buf [10]byte
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	lower := buf[:0]
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	const utf8RuneSelf = 0x80 <span class="comment">// from utf8 package, but not importing it.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	for i := 0; i &lt; len(ext); i++ {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		c := ext[i]
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		if c &gt;= utf8RuneSelf {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			<span class="comment">// Slow path.</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			si, _ := mimeTypesLower.Load(strings.ToLower(ext))
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			s, _ := si.(string)
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			return s
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		}
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			lower = append(lower, c+(&#39;a&#39;-&#39;A&#39;))
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		} else {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			lower = append(lower, c)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	si, _ := mimeTypesLower.Load(string(lower))
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	s, _ := si.(string)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	return s
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// ExtensionsByType returns the extensions known to be associated with the MIME</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// type typ. The returned extensions will each begin with a leading dot, as in</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// &#34;.html&#34;. When typ has no associated extensions, ExtensionsByType returns an</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// nil slice.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func ExtensionsByType(typ string) ([]string, error) {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	justType, _, err := ParseMediaType(typ)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	if err != nil {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		return nil, err
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	once.Do(initMime)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	s, ok := extensions.Load(justType)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if !ok {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		return nil, nil
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	ret := append([]string(nil), s.([]string)...)
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	sort.Strings(ret)
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	return ret, nil
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// AddExtensionType sets the MIME type associated with</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// the extension ext to typ. The extension should begin with</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// a leading dot, as in &#34;.html&#34;.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func AddExtensionType(ext, typ string) error {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if !strings.HasPrefix(ext, &#34;.&#34;) {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;mime: extension %q missing leading dot&#34;, ext)
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	once.Do(initMime)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	return setExtensionType(ext, typ)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func setExtensionType(extension, mimeType string) error {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	justType, param, err := ParseMediaType(mimeType)
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if err != nil {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return err
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if strings.HasPrefix(mimeType, &#34;text/&#34;) &amp;&amp; param[&#34;charset&#34;] == &#34;&#34; {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		param[&#34;charset&#34;] = &#34;utf-8&#34;
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		mimeType = FormatMediaType(mimeType, param)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	extLower := strings.ToLower(extension)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	mimeTypes.Store(extension, mimeType)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	mimeTypesLower.Store(extLower, mimeType)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	extensionsMu.Lock()
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	defer extensionsMu.Unlock()
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	var exts []string
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if ei, ok := extensions.Load(justType); ok {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		exts = ei.([]string)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	for _, v := range exts {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		if v == extLower {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>			return nil
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	extensions.Store(justType, append(exts, extLower))
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	return nil
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>
</pre><p><a href="type.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
