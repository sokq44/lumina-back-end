<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/dial.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./dial.go?s=10059:10101#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<span class="text-muted">dial.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net">net</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package net
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;internal/bytealg&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;internal/nettrace&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;syscall&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>const (
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	<span class="comment">// defaultTCPKeepAlive is a default constant value for TCPKeepAlive times</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	<span class="comment">// See go.dev/issue/31510</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	defaultTCPKeepAlive = 15 * time.Second
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// For the moment, MultiPath TCP is not used by default</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// See go.dev/issue/56539</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	defaultMPTCPEnabled = false
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>var multipathtcp = godebug.New(&#34;multipathtcp&#34;)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// mptcpStatus is a tristate for Multipath TCP, see go.dev/issue/56539</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type mptcpStatus uint8
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>const (
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// The value 0 is the system default, linked to defaultMPTCPEnabled</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	mptcpUseDefault mptcpStatus = iota
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	mptcpEnabled
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	mptcpDisabled
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func (m *mptcpStatus) get() bool {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	switch *m {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	case mptcpEnabled:
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		return true
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	case mptcpDisabled:
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		return false
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// If MPTCP is forced via GODEBUG=multipathtcp=1</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	if multipathtcp.Value() == &#34;1&#34; {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		multipathtcp.IncNonDefault()
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>		return true
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return defaultMPTCPEnabled
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>func (m *mptcpStatus) set(use bool) {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	if use {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		*m = mptcpEnabled
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	} else {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		*m = mptcpDisabled
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	}
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// A Dialer contains options for connecting to an address.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// The zero value for each field is equivalent to dialing</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// without that option. Dialing with the zero value of Dialer</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// is therefore equivalent to just calling the [Dial] function.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// It is safe to call Dialer&#39;s methods concurrently.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>type Dialer struct {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// Timeout is the maximum amount of time a dial will wait for</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// a connect to complete. If Deadline is also set, it may fail</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// earlier.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// The default is no timeout.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// When using TCP and dialing a host name with multiple IP</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// addresses, the timeout may be divided between them.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// With or without a timeout, the operating system may impose</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// its own earlier timeout. For instance, TCP timeouts are</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// often around 3 minutes.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	Timeout time.Duration
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// Deadline is the absolute point in time after which dials</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// will fail. If Timeout is set, it may fail earlier.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Zero means no deadline, or dependent on the operating system</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// as with the Timeout option.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	Deadline time.Time
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// LocalAddr is the local address to use when dialing an</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// address. The address must be of a compatible type for the</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// network being dialed.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// If nil, a local address is automatically chosen.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	LocalAddr Addr
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// DualStack previously enabled RFC 6555 Fast Fallback</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// support, also known as &#34;Happy Eyeballs&#34;, in which IPv4 is</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// tried soon if IPv6 appears to be misconfigured and</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// hanging.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Fast Fallback is enabled by default. To</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// disable, set FallbackDelay to a negative value.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	DualStack bool
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// FallbackDelay specifies the length of time to wait before</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// spawning a RFC 6555 Fast Fallback connection. That is, this</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// is the amount of time to wait for IPv6 to succeed before</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// assuming that IPv6 is misconfigured and falling back to</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// IPv4.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// If zero, a default delay of 300ms is used.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// A negative value disables Fast Fallback support.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	FallbackDelay time.Duration
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// KeepAlive specifies the interval between keep-alive</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// probes for an active network connection.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// If zero, keep-alive probes are sent with a default value</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// (currently 15 seconds), if supported by the protocol and operating</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// system. Network protocols or operating systems that do</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// not support keep-alives ignore this field.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// If negative, keep-alive probes are disabled.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	KeepAlive time.Duration
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// Resolver optionally specifies an alternate resolver to use.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	Resolver *Resolver
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// Cancel is an optional channel whose closure indicates that</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// the dial should be canceled. Not all types of dials support</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// cancellation.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use DialContext instead.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	Cancel &lt;-chan struct{}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// If Control is not nil, it is called after creating the network</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// connection but before actually dialing.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// Network and address parameters passed to Control function are not</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// necessarily the ones passed to Dial. For example, passing &#34;tcp&#34; to Dial</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// will cause the Control function to be called with &#34;tcp4&#34; or &#34;tcp6&#34;.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// Control is ignored if ControlContext is not nil.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	Control func(network, address string, c syscall.RawConn) error
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// If ControlContext is not nil, it is called after creating the network</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// connection but before actually dialing.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// Network and address parameters passed to ControlContext function are not</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// necessarily the ones passed to Dial. For example, passing &#34;tcp&#34; to Dial</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// will cause the ControlContext function to be called with &#34;tcp4&#34; or &#34;tcp6&#34;.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// If ControlContext is not nil, Control is ignored.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	ControlContext func(ctx context.Context, network, address string, c syscall.RawConn) error
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// If mptcpStatus is set to a value allowing Multipath TCP (MPTCP) to be</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// used, any call to Dial with &#34;tcp(4|6)&#34; as network will use MPTCP if</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// supported by the operating system.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	mptcpStatus mptcpStatus
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (d *Dialer) dualStack() bool { return d.FallbackDelay &gt;= 0 }
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>func minNonzeroTime(a, b time.Time) time.Time {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	if a.IsZero() {
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		return b
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if b.IsZero() || a.Before(b) {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return a
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	return b
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// deadline returns the earliest of:</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">//   - now+Timeout</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">//   - d.Deadline</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">//   - the context&#39;s deadline</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Or zero, if none of Timeout, Deadline, or context&#39;s deadline is set.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func (d *Dialer) deadline(ctx context.Context, now time.Time) (earliest time.Time) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if d.Timeout != 0 { <span class="comment">// including negative, for historical reasons</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		earliest = now.Add(d.Timeout)
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if d, ok := ctx.Deadline(); ok {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		earliest = minNonzeroTime(earliest, d)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	return minNonzeroTime(earliest, d.Deadline)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>func (d *Dialer) resolver() *Resolver {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	if d.Resolver != nil {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		return d.Resolver
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	return DefaultResolver
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span><span class="comment">// partialDeadline returns the deadline to use for a single address,</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// when multiple addresses are pending.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func partialDeadline(now, deadline time.Time, addrsRemaining int) (time.Time, error) {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if deadline.IsZero() {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return deadline, nil
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	timeRemaining := deadline.Sub(now)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	if timeRemaining &lt;= 0 {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return time.Time{}, errTimeout
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// Tentatively allocate equal time to each remaining address.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	timeout := timeRemaining / time.Duration(addrsRemaining)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// If the time per address is too short, steal from the end of the list.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	const saneMinimum = 2 * time.Second
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	if timeout &lt; saneMinimum {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		if timeRemaining &lt; saneMinimum {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			timeout = timeRemaining
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		} else {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>			timeout = saneMinimum
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return now.Add(timeout), nil
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func (d *Dialer) fallbackDelay() time.Duration {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if d.FallbackDelay &gt; 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return d.FallbackDelay
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	} else {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return 300 * time.Millisecond
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func parseNetwork(ctx context.Context, network string, needsProto bool) (afnet string, proto int, err error) {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	i := bytealg.LastIndexByteString(network, &#39;:&#39;)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if i &lt; 0 { <span class="comment">// no colon</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		switch network {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		case &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;:
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			if needsProto {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				return &#34;&#34;, 0, UnknownNetworkError(network)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		case &#34;unix&#34;, &#34;unixgram&#34;, &#34;unixpacket&#34;:
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		default:
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			return &#34;&#34;, 0, UnknownNetworkError(network)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return network, 0, nil
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	afnet = network[:i]
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	switch afnet {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		protostr := network[i+1:]
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		proto, i, ok := dtoi(protostr)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		if !ok || i != len(protostr) {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			proto, err = lookupProtocol(ctx, protostr)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			if err != nil {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>				return &#34;&#34;, 0, err
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		return afnet, proto, nil
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	return &#34;&#34;, 0, UnknownNetworkError(network)
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// resolveAddrList resolves addr using hint and returns a list of</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// addresses. The result contains at least one address when error is</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// nil.</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>func (r *Resolver) resolveAddrList(ctx context.Context, op, network, addr string, hint Addr) (addrList, error) {
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	afnet, _, err := parseNetwork(ctx, network, true)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	if err != nil {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		return nil, err
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if op == &#34;dial&#34; &amp;&amp; addr == &#34;&#34; {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return nil, errMissingAddress
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	switch afnet {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	case &#34;unix&#34;, &#34;unixgram&#34;, &#34;unixpacket&#34;:
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		addr, err := ResolveUnixAddr(afnet, addr)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		if err != nil {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			return nil, err
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		if op == &#34;dial&#34; &amp;&amp; hint != nil &amp;&amp; addr.Network() != hint.Network() {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>			return nil, &amp;AddrError{Err: &#34;mismatched local address type&#34;, Addr: hint.String()}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		return addrList{addr}, nil
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	addrs, err := r.internetAddrList(ctx, afnet, addr)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	if err != nil || op != &#34;dial&#34; || hint == nil {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		return addrs, err
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	var (
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		tcp      *TCPAddr
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		udp      *UDPAddr
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		ip       *IPAddr
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		wildcard bool
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	switch hint := hint.(type) {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	case *TCPAddr:
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		tcp = hint
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		wildcard = tcp.isWildcard()
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	case *UDPAddr:
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		udp = hint
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		wildcard = udp.isWildcard()
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	case *IPAddr:
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		ip = hint
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		wildcard = ip.isWildcard()
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	naddrs := addrs[:0]
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	for _, addr := range addrs {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		if addr.Network() != hint.Network() {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			return nil, &amp;AddrError{Err: &#34;mismatched local address type&#34;, Addr: hint.String()}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		switch addr := addr.(type) {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		case *TCPAddr:
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			if !wildcard &amp;&amp; !addr.isWildcard() &amp;&amp; !addr.IP.matchAddrFamily(tcp.IP) {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>				continue
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			naddrs = append(naddrs, addr)
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		case *UDPAddr:
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>			if !wildcard &amp;&amp; !addr.isWildcard() &amp;&amp; !addr.IP.matchAddrFamily(udp.IP) {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>				continue
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>			naddrs = append(naddrs, addr)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		case *IPAddr:
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			if !wildcard &amp;&amp; !addr.isWildcard() &amp;&amp; !addr.IP.matchAddrFamily(ip.IP) {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>				continue
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>			}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			naddrs = append(naddrs, addr)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	if len(naddrs) == 0 {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		return nil, &amp;AddrError{Err: errNoSuitableAddress.Error(), Addr: hint.String()}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	return naddrs, nil
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">// MultipathTCP reports whether MPTCP will be used.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// This method doesn&#39;t check if MPTCP is supported by the operating</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// system or not.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>func (d *Dialer) MultipathTCP() bool {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	return d.mptcpStatus.get()
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// SetMultipathTCP directs the [Dial] methods to use, or not use, MPTCP,</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// if supported by the operating system. This method overrides the</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// system default and the GODEBUG=multipathtcp=... setting if any.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// If MPTCP is not available on the host or not supported by the server,</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// the Dial methods will fall back to TCP.</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="selection">func (d *Dialer) SetMultipathTCP(use bool)</span> {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	d.mptcpStatus.set(use)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// Dial connects to the address on the named network.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// Known networks are &#34;tcp&#34;, &#34;tcp4&#34; (IPv4-only), &#34;tcp6&#34; (IPv6-only),</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// &#34;udp&#34;, &#34;udp4&#34; (IPv4-only), &#34;udp6&#34; (IPv6-only), &#34;ip&#34;, &#34;ip4&#34;</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// (IPv4-only), &#34;ip6&#34; (IPv6-only), &#34;unix&#34;, &#34;unixgram&#34; and</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// &#34;unixpacket&#34;.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// For TCP and UDP networks, the address has the form &#34;host:port&#34;.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// The host must be a literal IP address, or a host name that can be</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// resolved to IP addresses.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// The port must be a literal port number or a service name.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// If the host is a literal IPv6 address it must be enclosed in square</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// brackets, as in &#34;[2001:db8::1]:80&#34; or &#34;[fe80::1%zone]:80&#34;.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// The zone specifies the scope of the literal IPv6 address as defined</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// in RFC 4007.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// The functions [JoinHostPort] and [SplitHostPort] manipulate a pair of</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">// host and port in this form.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// When using TCP, and the host resolves to multiple IP addresses,</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// Dial will try each IP address in order until one succeeds.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// Examples:</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;tcp&#34;, &#34;golang.org:http&#34;)</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;tcp&#34;, &#34;192.0.2.1:http&#34;)</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;tcp&#34;, &#34;198.51.100.1:80&#34;)</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;udp&#34;, &#34;[2001:db8::1]:domain&#34;)</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;udp&#34;, &#34;[fe80::1%lo0]:53&#34;)</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;tcp&#34;, &#34;:80&#34;)</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// For IP networks, the network must be &#34;ip&#34;, &#34;ip4&#34; or &#34;ip6&#34; followed</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// by a colon and a literal protocol number or a protocol name, and</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// the address has the form &#34;host&#34;. The host must be a literal IP</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// address or a literal IPv6 address with zone.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// It depends on each operating system how the operating system</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// behaves with a non-well known protocol number such as &#34;0&#34; or &#34;255&#34;.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// Examples:</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;ip4:1&#34;, &#34;192.0.2.1&#34;)</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;ip6:ipv6-icmp&#34;, &#34;2001:db8::1&#34;)</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">//	Dial(&#34;ip6:58&#34;, &#34;fe80::1%lo0&#34;)</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// For TCP, UDP and IP networks, if the host is empty or a literal</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// unspecified IP address, as in &#34;:80&#34;, &#34;0.0.0.0:80&#34; or &#34;[::]:80&#34; for</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// TCP and UDP, &#34;&#34;, &#34;0.0.0.0&#34; or &#34;::&#34; for IP, the local system is</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// assumed.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">// For Unix networks, the address must be a file system path.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>func Dial(network, address string) (Conn, error) {
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	var d Dialer
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return d.Dial(network, address)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// DialTimeout acts like [Dial] but takes a timeout.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// The timeout includes name resolution, if required.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// When using TCP, and the host in the address parameter resolves to</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">// multiple IP addresses, the timeout is spread over each consecutive</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// dial, such that each is given an appropriate fraction of the time</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// to connect.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// See func Dial for a description of the network and address</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>func DialTimeout(network, address string, timeout time.Duration) (Conn, error) {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	d := Dialer{Timeout: timeout}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	return d.Dial(network, address)
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// sysDialer contains a Dial&#39;s parameters and configuration.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>type sysDialer struct {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	Dialer
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	network, address string
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	testHookDialTCP  func(ctx context.Context, net string, laddr, raddr *TCPAddr) (*TCPConn, error)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// Dial connects to the address on the named network.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// See func Dial for a description of the network and address</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">// Dial uses [context.Background] internally; to specify the context, use</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// [Dialer.DialContext].</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>func (d *Dialer) Dial(network, address string) (Conn, error) {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	return d.DialContext(context.Background(), network, address)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// DialContext connects to the address on the named network using</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// the provided context.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// The provided Context must be non-nil. If the context expires before</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// the connection is complete, an error is returned. Once successfully</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// connected, any expiration of the context will not affect the</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// connection.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// When using TCP, and the host in the address parameter resolves to multiple</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// network addresses, any dial timeout (from d.Timeout or ctx) is spread</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// over each consecutive dial, such that each is given an appropriate</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// fraction of the time to connect.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// For example, if a host has 4 IP addresses and the timeout is 1 minute,</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// the connect to each single address will be given 15 seconds to complete</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// before trying the next one.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// See func [Dial] for a description of the network and address</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>func (d *Dialer) DialContext(ctx context.Context, network, address string) (Conn, error) {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		panic(&#34;nil context&#34;)
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	deadline := d.deadline(ctx, time.Now())
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if !deadline.IsZero() {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		testHookStepTime()
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		if d, ok := ctx.Deadline(); !ok || deadline.Before(d) {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			subCtx, cancel := context.WithDeadline(ctx, deadline)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			defer cancel()
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			ctx = subCtx
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	if oldCancel := d.Cancel; oldCancel != nil {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		subCtx, cancel := context.WithCancel(ctx)
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		defer cancel()
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		go func() {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			select {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>			case &lt;-oldCancel:
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>				cancel()
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			case &lt;-subCtx.Done():
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>			}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		}()
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		ctx = subCtx
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	<span class="comment">// Shadow the nettrace (if any) during resolve so Connect events don&#39;t fire for DNS lookups.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	resolveCtx := ctx
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if trace, _ := ctx.Value(nettrace.TraceKey{}).(*nettrace.Trace); trace != nil {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		shadow := *trace
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		shadow.ConnectStart = nil
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		shadow.ConnectDone = nil
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		resolveCtx = context.WithValue(resolveCtx, nettrace.TraceKey{}, &amp;shadow)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	addrs, err := d.resolver().resolveAddrList(resolveCtx, &#34;dial&#34;, network, address, d.LocalAddr)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if err != nil {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;dial&#34;, Net: network, Source: nil, Addr: nil, Err: err}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	sd := &amp;sysDialer{
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		Dialer:  *d,
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		network: network,
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		address: address,
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	var primaries, fallbacks addrList
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	if d.dualStack() &amp;&amp; network == &#34;tcp&#34; {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		primaries, fallbacks = addrs.partition(isIPv4)
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	} else {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		primaries = addrs
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	return sd.dialParallel(ctx, primaries, fallbacks)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// dialParallel races two copies of dialSerial, giving the first a</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// head start. It returns the first established connection and</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// closes the others. Otherwise it returns an error from the first</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// primary address.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>func (sd *sysDialer) dialParallel(ctx context.Context, primaries, fallbacks addrList) (Conn, error) {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if len(fallbacks) == 0 {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		return sd.dialSerial(ctx, primaries)
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	returned := make(chan struct{})
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	defer close(returned)
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	type dialResult struct {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		Conn
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		error
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		primary bool
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		done    bool
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	results := make(chan dialResult) <span class="comment">// unbuffered</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	startRacer := func(ctx context.Context, primary bool) {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		ras := primaries
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		if !primary {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			ras = fallbacks
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		c, err := sd.dialSerial(ctx, ras)
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		select {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		case results &lt;- dialResult{Conn: c, error: err, primary: primary, done: true}:
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		case &lt;-returned:
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			if c != nil {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>				c.Close()
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>			}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	var primary, fallback dialResult
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">// Start the main racer.</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	primaryCtx, primaryCancel := context.WithCancel(ctx)
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	defer primaryCancel()
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	go startRacer(primaryCtx, true)
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// Start the timer for the fallback racer.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	fallbackTimer := time.NewTimer(sd.fallbackDelay())
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	defer fallbackTimer.Stop()
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	for {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		select {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		case &lt;-fallbackTimer.C:
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>			fallbackCtx, fallbackCancel := context.WithCancel(ctx)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>			defer fallbackCancel()
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			go startRacer(fallbackCtx, false)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		case res := &lt;-results:
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>			if res.error == nil {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>				return res.Conn, nil
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>			if res.primary {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>				primary = res
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>			} else {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>				fallback = res
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>			}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>			if primary.done &amp;&amp; fallback.done {
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>				return nil, primary.error
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			if res.primary &amp;&amp; fallbackTimer.Stop() {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>				<span class="comment">// If we were able to stop the timer, that means it</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>				<span class="comment">// was running (hadn&#39;t yet started the fallback), but</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>				<span class="comment">// we just got an error on the primary path, so start</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>				<span class="comment">// the fallback immediately (in 0 nanoseconds).</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>				fallbackTimer.Reset(0)
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>			}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>}
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// dialSerial connects to a list of addresses in sequence, returning</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// either the first successful connection, or the first error.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>func (sd *sysDialer) dialSerial(ctx context.Context, ras addrList) (Conn, error) {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	var firstErr error <span class="comment">// The error from the first address is most relevant.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	for i, ra := range ras {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		select {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			return nil, &amp;OpError{Op: &#34;dial&#34;, Net: sd.network, Source: sd.LocalAddr, Addr: ra, Err: mapErr(ctx.Err())}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		default:
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		dialCtx := ctx
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		if deadline, hasDeadline := ctx.Deadline(); hasDeadline {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			partialDeadline, err := partialDeadline(time.Now(), deadline, len(ras)-i)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			if err != nil {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>				<span class="comment">// Ran out of time.</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>				if firstErr == nil {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>					firstErr = &amp;OpError{Op: &#34;dial&#34;, Net: sd.network, Source: sd.LocalAddr, Addr: ra, Err: err}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>				}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>				break
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>			if partialDeadline.Before(deadline) {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>				var cancel context.CancelFunc
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>				dialCtx, cancel = context.WithDeadline(ctx, partialDeadline)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>				defer cancel()
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>			}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		c, err := sd.dialSingle(dialCtx, ra)
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		if err == nil {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>			return c, nil
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		if firstErr == nil {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			firstErr = err
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	if firstErr == nil {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		firstErr = &amp;OpError{Op: &#34;dial&#34;, Net: sd.network, Source: nil, Addr: nil, Err: errMissingAddress}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	}
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	return nil, firstErr
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span><span class="comment">// dialSingle attempts to establish and returns a single connection to</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span><span class="comment">// the destination address.</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>func (sd *sysDialer) dialSingle(ctx context.Context, ra Addr) (c Conn, err error) {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	trace, _ := ctx.Value(nettrace.TraceKey{}).(*nettrace.Trace)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	if trace != nil {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		raStr := ra.String()
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		if trace.ConnectStart != nil {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>			trace.ConnectStart(sd.network, raStr)
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		if trace.ConnectDone != nil {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			defer func() { trace.ConnectDone(sd.network, raStr, err) }()
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	la := sd.LocalAddr
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	switch ra := ra.(type) {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	case *TCPAddr:
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		la, _ := la.(*TCPAddr)
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		if sd.MultipathTCP() {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			c, err = sd.dialMPTCP(ctx, la, ra)
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		} else {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			c, err = sd.dialTCP(ctx, la, ra)
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	case *UDPAddr:
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		la, _ := la.(*UDPAddr)
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		c, err = sd.dialUDP(ctx, la, ra)
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	case *IPAddr:
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		la, _ := la.(*IPAddr)
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		c, err = sd.dialIP(ctx, la, ra)
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	case *UnixAddr:
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		la, _ := la.(*UnixAddr)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		c, err = sd.dialUnix(ctx, la, ra)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	default:
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;dial&#34;, Net: sd.network, Source: la, Addr: ra, Err: &amp;AddrError{Err: &#34;unexpected address type&#34;, Addr: sd.address}}
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	if err != nil {
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;dial&#34;, Net: sd.network, Source: la, Addr: ra, Err: err} <span class="comment">// c is non-nil interface containing nil pointer</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	return c, nil
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">// ListenConfig contains options for listening to an address.</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>type ListenConfig struct {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	<span class="comment">// If Control is not nil, it is called after creating the network</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	<span class="comment">// connection but before binding it to the operating system.</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	<span class="comment">// Network and address parameters passed to Control method are not</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	<span class="comment">// necessarily the ones passed to Listen. For example, passing &#34;tcp&#34; to</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	<span class="comment">// Listen will cause the Control function to be called with &#34;tcp4&#34; or &#34;tcp6&#34;.</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	Control func(network, address string, c syscall.RawConn) error
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	<span class="comment">// KeepAlive specifies the keep-alive period for network</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	<span class="comment">// connections accepted by this listener.</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	<span class="comment">// If zero, keep-alives are enabled if supported by the protocol</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	<span class="comment">// and operating system. Network protocols or operating systems</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	<span class="comment">// that do not support keep-alives ignore this field.</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	<span class="comment">// If negative, keep-alives are disabled.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	KeepAlive time.Duration
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	<span class="comment">// If mptcpStatus is set to a value allowing Multipath TCP (MPTCP) to be</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	<span class="comment">// used, any call to Listen with &#34;tcp(4|6)&#34; as network will use MPTCP if</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	<span class="comment">// supported by the operating system.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	mptcpStatus mptcpStatus
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span><span class="comment">// MultipathTCP reports whether MPTCP will be used.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span><span class="comment">// This method doesn&#39;t check if MPTCP is supported by the operating</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span><span class="comment">// system or not.</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>func (lc *ListenConfig) MultipathTCP() bool {
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	return lc.mptcpStatus.get()
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">// SetMultipathTCP directs the [Listen] method to use, or not use, MPTCP,</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// if supported by the operating system. This method overrides the</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span><span class="comment">// system default and the GODEBUG=multipathtcp=... setting if any.</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span><span class="comment">// If MPTCP is not available on the host or not supported by the client,</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// the Listen method will fall back to TCP.</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>func (lc *ListenConfig) SetMultipathTCP(use bool) {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	lc.mptcpStatus.set(use)
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// Listen announces on the local network address.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="comment">// See func Listen for a description of the network and address</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>func (lc *ListenConfig) Listen(ctx context.Context, network, address string) (Listener, error) {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	addrs, err := DefaultResolver.resolveAddrList(ctx, &#34;listen&#34;, network, address, nil)
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	if err != nil {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: network, Source: nil, Addr: nil, Err: err}
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	sl := &amp;sysListener{
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		ListenConfig: *lc,
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		network:      network,
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		address:      address,
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	var l Listener
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	la := addrs.first(isIPv4)
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	switch la := la.(type) {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	case *TCPAddr:
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if sl.MultipathTCP() {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			l, err = sl.listenMPTCP(ctx, la)
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>		} else {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>			l, err = sl.listenTCP(ctx, la)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>		}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	case *UnixAddr:
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		l, err = sl.listenUnix(ctx, la)
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	default:
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: sl.network, Source: nil, Addr: la, Err: &amp;AddrError{Err: &#34;unexpected address type&#34;, Addr: address}}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	if err != nil {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: sl.network, Source: nil, Addr: la, Err: err} <span class="comment">// l is non-nil interface containing nil pointer</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	return l, nil
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// ListenPacket announces on the local network address.</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// See func ListenPacket for a description of the network and address</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>func (lc *ListenConfig) ListenPacket(ctx context.Context, network, address string) (PacketConn, error) {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	addrs, err := DefaultResolver.resolveAddrList(ctx, &#34;listen&#34;, network, address, nil)
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	if err != nil {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: network, Source: nil, Addr: nil, Err: err}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	sl := &amp;sysListener{
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		ListenConfig: *lc,
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		network:      network,
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		address:      address,
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	var c PacketConn
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	la := addrs.first(isIPv4)
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	switch la := la.(type) {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	case *UDPAddr:
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		c, err = sl.listenUDP(ctx, la)
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	case *IPAddr:
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		c, err = sl.listenIP(ctx, la)
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	case *UnixAddr:
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		c, err = sl.listenUnixgram(ctx, la)
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	default:
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: sl.network, Source: nil, Addr: la, Err: &amp;AddrError{Err: &#34;unexpected address type&#34;, Addr: address}}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	if err != nil {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		return nil, &amp;OpError{Op: &#34;listen&#34;, Net: sl.network, Source: nil, Addr: la, Err: err} <span class="comment">// c is non-nil interface containing nil pointer</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	}
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	return c, nil
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// sysListener contains a Listen&#39;s parameters and configuration.</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>type sysListener struct {
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	ListenConfig
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	network, address string
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>}
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span><span class="comment">// Listen announces on the local network address.</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span><span class="comment">// The network must be &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;, &#34;unix&#34; or &#34;unixpacket&#34;.</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span><span class="comment">// For TCP networks, if the host in the address parameter is empty or</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span><span class="comment">// a literal unspecified IP address, Listen listens on all available</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span><span class="comment">// unicast and anycast IP addresses of the local system.</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span><span class="comment">// To only use IPv4, use network &#34;tcp4&#34;.</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span><span class="comment">// The address can use a host name, but this is not recommended,</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// because it will create a listener for at most one of the host&#39;s IP</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// addresses.</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span><span class="comment">// If the port in the address parameter is empty or &#34;0&#34;, as in</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span><span class="comment">// &#34;127.0.0.1:&#34; or &#34;[::1]:0&#34;, a port number is automatically chosen.</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span><span class="comment">// The [Addr] method of [Listener] can be used to discover the chosen</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span><span class="comment">// port.</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span><span class="comment">// See func [Dial] for a description of the network and address</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L804" class="ln">   804&nbsp;&nbsp;</span><span class="comment">// Listen uses context.Background internally; to specify the context, use</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span><span class="comment">// [ListenConfig.Listen].</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>func Listen(network, address string) (Listener, error) {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	var lc ListenConfig
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	return lc.Listen(context.Background(), network, address)
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span><span class="comment">// ListenPacket announces on the local network address.</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span><span class="comment">// The network must be &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;, &#34;unixgram&#34;, or an IP</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span><span class="comment">// transport. The IP transports are &#34;ip&#34;, &#34;ip4&#34;, or &#34;ip6&#34; followed by</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span><span class="comment">// a colon and a literal protocol number or a protocol name, as in</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">// &#34;ip:1&#34; or &#34;ip:icmp&#34;.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// For UDP and IP networks, if the host in the address parameter is</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// empty or a literal unspecified IP address, ListenPacket listens on</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// all available IP addresses of the local system except multicast IP</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// addresses.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// To only use IPv4, use network &#34;udp4&#34; or &#34;ip4:proto&#34;.</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span><span class="comment">// The address can use a host name, but this is not recommended,</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">// because it will create a listener for at most one of the host&#39;s IP</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span><span class="comment">// addresses.</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span><span class="comment">// If the port in the address parameter is empty or &#34;0&#34;, as in</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span><span class="comment">// &#34;127.0.0.1:&#34; or &#34;[::1]:0&#34;, a port number is automatically chosen.</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span><span class="comment">// The LocalAddr method of [PacketConn] can be used to discover the</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// chosen port.</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span><span class="comment">// See func [Dial] for a description of the network and address</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">// parameters.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span><span class="comment">// ListenPacket uses context.Background internally; to specify the context, use</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span><span class="comment">// [ListenConfig.ListenPacket].</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>func ListenPacket(network, address string) (PacketConn, error) {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	var lc ListenConfig
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	return lc.ListenPacket(context.Background(), network, address)
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>
</pre><p><a href="dial.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
