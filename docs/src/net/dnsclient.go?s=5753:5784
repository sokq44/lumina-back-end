<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/dnsclient.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./dnsclient.go?s=5753:5784#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<span class="text-muted">dnsclient.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net">net</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package net
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;internal/bytealg&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;internal/itoa&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	_ &#34;unsafe&#34; <span class="comment">// for go:linkname</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;golang.org/x/net/dns/dnsmessage&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>)
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// provided by runtime</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//go:linkname runtime_rand runtime.rand</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>func runtime_rand() uint64
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>func randInt() int {
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	return int(uint(runtime_rand()) &gt;&gt; 1) <span class="comment">// clear sign bit</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>}
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>func randIntn(n int) int {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	return randInt() % n
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// reverseaddr returns the in-addr.arpa. or ip6.arpa. hostname of the IP</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// address addr suitable for rDNS (PTR) record lookup or an error if it fails</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// to parse the IP address.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>func reverseaddr(addr string) (arpa string, err error) {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	ip := ParseIP(addr)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	if ip == nil {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		return &#34;&#34;, &amp;DNSError{Err: &#34;unrecognized address&#34;, Name: addr}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	if ip.To4() != nil {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		return itoa.Uitoa(uint(ip[15])) + &#34;.&#34; + itoa.Uitoa(uint(ip[14])) + &#34;.&#34; + itoa.Uitoa(uint(ip[13])) + &#34;.&#34; + itoa.Uitoa(uint(ip[12])) + &#34;.in-addr.arpa.&#34;, nil
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// Must be IPv6</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	buf := make([]byte, 0, len(ip)*4+len(&#34;ip6.arpa.&#34;))
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">// Add it, in reverse, to the buffer</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	for i := len(ip) - 1; i &gt;= 0; i-- {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		v := ip[i]
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		buf = append(buf, hexDigit[v&amp;0xF],
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			&#39;.&#39;,
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			hexDigit[v&gt;&gt;4],
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			&#39;.&#39;)
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// Append &#34;ip6.arpa.&#34; and return (buf already has the final .)</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	buf = append(buf, &#34;ip6.arpa.&#34;...)
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	return string(buf), nil
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func equalASCIIName(x, y dnsmessage.Name) bool {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if x.Length != y.Length {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		return false
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	for i := 0; i &lt; int(x.Length); i++ {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		a := x.Data[i]
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		b := y.Data[i]
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= a &amp;&amp; a &lt;= &#39;Z&#39; {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>			a += 0x20
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			b += 0x20
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		if a != b {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			return false
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return true
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// isDomainName checks if a string is a presentation-format domain name</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// (currently restricted to hostname-compatible &#34;preferred name&#34; LDH labels and</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// SRV-like &#34;underscore labels&#34;; see golang.org/issue/12421).</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func isDomainName(s string) bool {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// The root domain name is valid. See golang.org/issue/45715.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if s == &#34;.&#34; {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		return true
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// See RFC 1035, RFC 3696.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// Presentation format has dots before every label except the first, and the</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// terminal empty label is optional here because we assume fully-qualified</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// (absolute) input. We must therefore reserve space for the first and last</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// labels&#39; length octets in wire format, where they are necessary and the</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// maximum total length is 255.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// So our _effective_ maximum is 253, but 254 is not rejected if the last</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// character is a dot.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	l := len(s)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if l == 0 || l &gt; 254 || l == 254 &amp;&amp; s[l-1] != &#39;.&#39; {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		return false
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	last := byte(&#39;.&#39;)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	nonNumeric := false <span class="comment">// true once we&#39;ve seen a letter or hyphen</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	partlen := 0
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		c := s[i]
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		switch {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		default:
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>			return false
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; || c == &#39;_&#39;:
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			nonNumeric = true
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			partlen++
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>			<span class="comment">// fine</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>			partlen++
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		case c == &#39;-&#39;:
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			<span class="comment">// Byte before dash cannot be dot.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>			if last == &#39;.&#39; {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>				return false
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>			}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>			partlen++
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			nonNumeric = true
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		case c == &#39;.&#39;:
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>			<span class="comment">// Byte before dot cannot be dot, dash.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			if last == &#39;.&#39; || last == &#39;-&#39; {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				return false
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			if partlen &gt; 63 || partlen == 0 {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>				return false
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			partlen = 0
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		last = c
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	if last == &#39;-&#39; || partlen &gt; 63 {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		return false
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	}
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	return nonNumeric
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span><span class="comment">// absDomainName returns an absolute domain name which ends with a</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// trailing dot to match pure Go reverse resolver and all other lookup</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// routines.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span><span class="comment">// See golang.org/issue/12189.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span><span class="comment">// But we don&#39;t want to add dots for local names from /etc/hosts.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span><span class="comment">// It&#39;s hard to tell so we settle on the heuristic that names without dots</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// (like &#34;localhost&#34; or &#34;myhost&#34;) do not get trailing dots, but any other</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// names do.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func absDomainName(s string) string {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if bytealg.IndexByteString(s, &#39;.&#39;) != -1 &amp;&amp; s[len(s)-1] != &#39;.&#39; {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		s += &#34;.&#34;
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return s
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// An SRV represents a single DNS SRV record.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>type SRV struct {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	Target   string
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	Port     uint16
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	Priority uint16
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	Weight   uint16
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// byPriorityWeight sorts SRV records by ascending priority and weight.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>type byPriorityWeight []*SRV
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (s byPriorityWeight) Len() int { return len(s) }
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>func (s byPriorityWeight) Less(i, j int) bool {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	return s[i].Priority &lt; s[j].Priority || (s[i].Priority == s[j].Priority &amp;&amp; s[i].Weight &lt; s[j].Weight)
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>func (s byPriorityWeight) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// shuffleByWeight shuffles SRV records by weight using the algorithm</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// described in RFC 2782.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func (addrs byPriorityWeight) shuffleByWeight() {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	sum := 0
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	for _, addr := range addrs {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>		sum += int(addr.Weight)
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	for sum &gt; 0 &amp;&amp; len(addrs) &gt; 1 {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		s := 0
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		n := randIntn(sum)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		for i := range addrs {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			s += int(addrs[i].Weight)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			if s &gt; n {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>				if i &gt; 0 {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>					addrs[0], addrs[i] = addrs[i], addrs[0]
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>				}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>				break
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>			}
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		sum -= int(addrs[0].Weight)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		addrs = addrs[1:]
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// sort reorders SRV records as specified in RFC 2782.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func (addrs byPriorityWeight) sort() {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	sort.Sort(addrs)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	i := 0
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	for j := 1; j &lt; len(addrs); j++ {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if addrs[i].Priority != addrs[j].Priority {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			addrs[i:j].shuffleByWeight()
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			i = j
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	}
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	addrs[i:].shuffleByWeight()
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// An MX represents a single DNS MX record.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>type MX struct {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	Host string
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	Pref uint16
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>}
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// byPref implements sort.Interface to sort MX records by preference</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>type byPref []*MX
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>func (s byPref) Len() int           { return len(s) }
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>func (s byPref) Less(i, j int) bool { return s[i].Pref &lt; s[j].Pref }
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>func (s byPref) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">// sort reorders MX records as specified in RFC 5321.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>func (s byPref) sort() {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	for i := range s {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		j := randIntn(i + 1)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		s[i], s[j] = s[j], s[i]
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	sort.Sort(s)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span><span class="comment">// An NS represents a single DNS NS record.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="selection">type NS struct {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	Host string
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
</pre><p><a href="dnsclient.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
