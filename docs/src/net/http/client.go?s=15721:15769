<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/client.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./client.go?s=15721:15769#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">client.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// HTTP client. See RFC 7230 through 7235.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This is the high-level Client interface.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// The low-level implementation is in transport.go.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>package http
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>import (
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net/http/internal/ascii&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// A Client is an HTTP client. Its zero value ([DefaultClient]) is a</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// usable client that uses [DefaultTransport].</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// The [Client.Transport] typically has internal state (cached TCP</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// connections), so Clients should be reused instead of created as</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// needed. Clients are safe for concurrent use by multiple goroutines.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// A Client is higher-level than a [RoundTripper] (such as [Transport])</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// and additionally handles HTTP details such as cookies and</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// redirects.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// When following redirects, the Client will forward all headers set on the</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// initial [Request] except:</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//   - when forwarding sensitive headers like &#34;Authorization&#34;,</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//     &#34;WWW-Authenticate&#34;, and &#34;Cookie&#34; to untrusted targets.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//     These headers will be ignored when following a redirect to a domain</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//     that is not a subdomain match or exact match of the initial domain.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//     For example, a redirect from &#34;foo.com&#34; to either &#34;foo.com&#34; or &#34;sub.foo.com&#34;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//     will forward the sensitive headers, but a redirect to &#34;bar.com&#34; will not.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//   - when forwarding the &#34;Cookie&#34; header with a non-nil cookie Jar.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//     Since each redirect may mutate the state of the cookie jar,</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//     a redirect may possibly alter a cookie set in the initial request.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//     When forwarding the &#34;Cookie&#34; header, any mutated cookies will be omitted,</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//     with the expectation that the Jar will insert those mutated cookies</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//     with the updated values (assuming the origin matches).</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//     If Jar is nil, the initial cookies are forwarded without change.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>type Client struct {
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// Transport specifies the mechanism by which individual</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// HTTP requests are made.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// If nil, DefaultTransport is used.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	Transport RoundTripper
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// CheckRedirect specifies the policy for handling redirects.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// If CheckRedirect is not nil, the client calls it before</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// following an HTTP redirect. The arguments req and via are</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// the upcoming request and the requests made already, oldest</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// first. If CheckRedirect returns an error, the Client&#39;s Get</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// method returns both the previous Response (with its Body</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// closed) and CheckRedirect&#39;s error (wrapped in a url.Error)</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// instead of issuing the Request req.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// As a special case, if CheckRedirect returns ErrUseLastResponse,</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">// then the most recent response is returned with its body</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// unclosed, along with a nil error.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// If CheckRedirect is nil, the Client uses its default policy,</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// which is to stop after 10 consecutive requests.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	CheckRedirect func(req *Request, via []*Request) error
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// Jar specifies the cookie jar.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// The Jar is used to insert relevant cookies into every</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// outbound Request and is updated with the cookie values</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// of every inbound Response. The Jar is consulted for every</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// redirect that the Client follows.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// If Jar is nil, cookies are only sent if they are explicitly</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// set on the Request.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	Jar CookieJar
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Timeout specifies a time limit for requests made by this</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// Client. The timeout includes connection time, any</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// redirects, and reading the response body. The timer remains</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// running after Get, Head, Post, or Do return and will</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// interrupt reading of the Response.Body.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// A Timeout of zero means no timeout.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// The Client cancels requests to the underlying Transport</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// as if the Request&#39;s Context ended.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// For compatibility, the Client will also use the deprecated</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// CancelRequest method on Transport if found. New</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// RoundTripper implementations should use the Request&#39;s Context</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// for cancellation instead of implementing CancelRequest.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	Timeout time.Duration
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// DefaultClient is the default [Client] and is used by [Get], [Head], and [Post].</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>var DefaultClient = &amp;Client{}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// RoundTripper is an interface representing the ability to execute a</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// single HTTP transaction, obtaining the [Response] for a given [Request].</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// A RoundTripper must be safe for concurrent use by multiple</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// goroutines.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>type RoundTripper interface {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip executes a single HTTP transaction, returning</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// a Response for the provided Request.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip should not attempt to interpret the response. In</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// particular, RoundTrip must return err == nil if it obtained</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// a response, regardless of the response&#39;s HTTP status code.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// A non-nil err should be reserved for failure to obtain a</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// response. Similarly, RoundTrip should not attempt to</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// handle higher-level protocol details such as redirects,</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// authentication, or cookies.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip should not modify the request, except for</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// consuming and closing the Request&#39;s Body. RoundTrip may</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// read fields of the request in a separate goroutine. Callers</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// should not mutate or reuse the request until the Response&#39;s</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// Body has been closed.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip must always close the body, including on errors,</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// but depending on the implementation may do so in a separate</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// goroutine even after RoundTrip returns. This means that</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// callers wanting to reuse the body for subsequent requests</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// must arrange to wait for the Close call before doing so.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// The Request&#39;s URL and Header fields must be initialized.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	RoundTrip(*Request) (*Response, error)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">// refererForURL returns a referer without any authentication info or</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// an empty string if lastReq scheme is https and newReq scheme is http.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// If the referer was explicitly set, then it will continue to be used.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func refererForURL(lastReq, newReq *url.URL, explicitRef string) string {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// https://tools.ietf.org/html/rfc7231#section-5.5.2</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//   &#34;Clients SHOULD NOT include a Referer header field in a</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">//    (non-secure) HTTP request if the referring page was</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//    transferred with a secure protocol.&#34;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if lastReq.Scheme == &#34;https&#34; &amp;&amp; newReq.Scheme == &#34;http&#34; {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if explicitRef != &#34;&#34; {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return explicitRef
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	referer := lastReq.String()
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if lastReq.User != nil {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		<span class="comment">// This is not very efficient, but is the best we can</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		<span class="comment">// do without:</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		<span class="comment">// - introducing a new method on URL</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		<span class="comment">// - creating a race condition</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		<span class="comment">// - copying the URL struct manually, which would cause</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		<span class="comment">//   maintenance problems down the line</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		auth := lastReq.User.String() + &#34;@&#34;
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		referer = strings.Replace(referer, auth, &#34;&#34;, 1)
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return referer
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// didTimeout is non-nil only if err != nil.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>func (c *Client) send(req *Request, deadline time.Time) (resp *Response, didTimeout func() bool, err error) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	if c.Jar != nil {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		for _, cookie := range c.Jar.Cookies(req.URL) {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			req.AddCookie(cookie)
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	resp, didTimeout, err = send(req, c.transport(), deadline)
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	if err != nil {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return nil, didTimeout, err
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if c.Jar != nil {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		if rc := resp.Cookies(); len(rc) &gt; 0 {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			c.Jar.SetCookies(req.URL, rc)
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return resp, nil, nil
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func (c *Client) deadline() time.Time {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if c.Timeout &gt; 0 {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		return time.Now().Add(c.Timeout)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return time.Time{}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func (c *Client) transport() RoundTripper {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if c.Transport != nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return c.Transport
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	return DefaultTransport
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// ErrSchemeMismatch is returned when a server returns an HTTP response to an HTTPS client.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>var ErrSchemeMismatch = errors.New(&#34;http: server gave HTTP response to HTTPS client&#34;)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// send issues an HTTP request.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>func send(ireq *Request, rt RoundTripper, deadline time.Time) (resp *Response, didTimeout func() bool, err error) {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	req := ireq <span class="comment">// req is either the original request, or a modified fork</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if rt == nil {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		req.closeBody()
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return nil, alwaysFalse, errors.New(&#34;http: no Client.Transport or DefaultTransport&#34;)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	if req.URL == nil {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		req.closeBody()
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		return nil, alwaysFalse, errors.New(&#34;http: nil Request.URL&#34;)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	if req.RequestURI != &#34;&#34; {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		req.closeBody()
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		return nil, alwaysFalse, errors.New(&#34;http: Request.RequestURI can&#39;t be set in client requests&#34;)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// forkReq forks req into a shallow clone of ireq the first</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// time it&#39;s called.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	forkReq := func() {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		if ireq == req {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>			req = new(Request)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			*req = *ireq <span class="comment">// shallow clone</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// Most the callers of send (Get, Post, et al) don&#39;t need</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Headers, leaving it uninitialized. We guarantee to the</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// Transport that this has been initialized, though.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	if req.Header == nil {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		forkReq()
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		req.Header = make(Header)
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if u := req.URL.User; u != nil &amp;&amp; req.Header.Get(&#34;Authorization&#34;) == &#34;&#34; {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		username := u.Username()
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		password, _ := u.Password()
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		forkReq()
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		req.Header = cloneOrMakeHeader(ireq.Header)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		req.Header.Set(&#34;Authorization&#34;, &#34;Basic &#34;+basicAuth(username, password))
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if !deadline.IsZero() {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		forkReq()
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	stopTimer, didTimeout := setRequestCancel(req, rt, deadline)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	resp, err = rt.RoundTrip(req)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if err != nil {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		stopTimer()
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		if resp != nil {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			log.Printf(&#34;RoundTripper returned a response &amp; error; ignoring response&#34;)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if tlsErr, ok := err.(tls.RecordHeaderError); ok {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			<span class="comment">// If we get a bad TLS record header, check to see if the</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			<span class="comment">// response looks like HTTP and give a more helpful error.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			<span class="comment">// See golang.org/issue/11111.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			if string(tlsErr.RecordHeader[:]) == &#34;HTTP/&#34; {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>				err = ErrSchemeMismatch
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		return nil, didTimeout, err
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if resp == nil {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return nil, didTimeout, fmt.Errorf(&#34;http: RoundTripper implementation (%T) returned a nil *Response with a nil error&#34;, rt)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if resp.Body == nil {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		<span class="comment">// The documentation on the Body field says “The http Client and Transport</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		<span class="comment">// guarantee that Body is always non-nil, even on responses without a body</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		<span class="comment">// or responses with a zero-length body.” Unfortunately, we didn&#39;t document</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		<span class="comment">// that same constraint for arbitrary RoundTripper implementations, and</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		<span class="comment">// RoundTripper implementations in the wild (mostly in tests) assume that</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		<span class="comment">// they can use a nil Body to mean an empty one (similar to Request.Body).</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		<span class="comment">// (See https://golang.org/issue/38095.)</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		<span class="comment">// If the ContentLength allows the Body to be empty, fill in an empty one</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		<span class="comment">// here to ensure that it is non-nil.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		if resp.ContentLength &gt; 0 &amp;&amp; req.Method != &#34;HEAD&#34; {
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			return nil, didTimeout, fmt.Errorf(&#34;http: RoundTripper implementation (%T) returned a *Response with content length %d but a nil Body&#34;, rt, resp.ContentLength)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		}
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		resp.Body = io.NopCloser(strings.NewReader(&#34;&#34;))
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	if !deadline.IsZero() {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		resp.Body = &amp;cancelTimerBody{
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			stop:          stopTimer,
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			rc:            resp.Body,
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			reqDidTimeout: didTimeout,
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return resp, nil, nil
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// timeBeforeContextDeadline reports whether the non-zero Time t is</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// before ctx&#39;s deadline, if any. If ctx does not have a deadline, it</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// always reports true (the deadline is considered infinite).</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func timeBeforeContextDeadline(t time.Time, ctx context.Context) bool {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	d, ok := ctx.Deadline()
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	if !ok {
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return true
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	return t.Before(d)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// knownRoundTripperImpl reports whether rt is a RoundTripper that&#39;s</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// maintained by the Go team and known to implement the latest</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// optional semantics (notably contexts). The Request is used</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// to check whether this particular request is using an alternate protocol,</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// in which case we need to check the RoundTripper for that protocol.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func knownRoundTripperImpl(rt RoundTripper, req *Request) bool {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	switch t := rt.(type) {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	case *Transport:
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if altRT := t.alternateRoundTripper(req); altRT != nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			return knownRoundTripperImpl(altRT, req)
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return true
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	case *http2Transport, http2noDialH2RoundTripper:
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		return true
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// There&#39;s a very minor chance of a false positive with this.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// Instead of detecting our golang.org/x/net/http2.Transport,</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// it might detect a Transport type in a different http2</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	<span class="comment">// package. But I know of none, and the only problem would be</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// some temporarily leaked goroutines if the transport didn&#39;t</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// support contexts. So this is a good enough heuristic:</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if reflect.TypeOf(rt).String() == &#34;*http2.Transport&#34; {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		return true
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return false
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// setRequestCancel sets req.Cancel and adds a deadline context to req</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// if deadline is non-zero. The RoundTripper&#39;s type is used to</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// determine whether the legacy CancelRequest behavior should be used.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">// As background, there are three ways to cancel a request:</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// First was Transport.CancelRequest. (deprecated)</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span><span class="comment">// Second was Request.Cancel.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span><span class="comment">// Third was Request.Context.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// This function populates the second and third, and uses the first if it really needs to.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>func setRequestCancel(req *Request, rt RoundTripper, deadline time.Time) (stopTimer func(), didTimeout func() bool) {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	if deadline.IsZero() {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		return nop, alwaysFalse
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	knownTransport := knownRoundTripperImpl(rt, req)
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	oldCtx := req.Context()
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if req.Cancel == nil &amp;&amp; knownTransport {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		<span class="comment">// If they already had a Request.Context that&#39;s</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		<span class="comment">// expiring sooner, do nothing:</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		if !timeBeforeContextDeadline(deadline, oldCtx) {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>			return nop, alwaysFalse
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		var cancelCtx func()
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		req.ctx, cancelCtx = context.WithDeadline(oldCtx, deadline)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		return cancelCtx, func() bool { return time.Now().After(deadline) }
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	initialReqCancel := req.Cancel <span class="comment">// the user&#39;s original Request.Cancel, if any</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	var cancelCtx func()
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if timeBeforeContextDeadline(deadline, oldCtx) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		req.ctx, cancelCtx = context.WithDeadline(oldCtx, deadline)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	cancel := make(chan struct{})
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	req.Cancel = cancel
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	doCancel := func() {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		<span class="comment">// The second way in the func comment above:</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		close(cancel)
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		<span class="comment">// The first way, used only for RoundTripper</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		<span class="comment">// implementations written before Go 1.5 or Go 1.6.</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		type canceler interface{ CancelRequest(*Request) }
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		if v, ok := rt.(canceler); ok {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			v.CancelRequest(req)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	stopTimerCh := make(chan struct{})
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	var once sync.Once
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	stopTimer = func() {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		once.Do(func() {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			close(stopTimerCh)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>			if cancelCtx != nil {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>				cancelCtx()
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>			}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		})
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	timer := time.NewTimer(time.Until(deadline))
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	var timedOut atomic.Bool
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	go func() {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		select {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		case &lt;-initialReqCancel:
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			doCancel()
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>			timer.Stop()
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		case &lt;-timer.C:
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			timedOut.Store(true)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			doCancel()
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		case &lt;-stopTimerCh:
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			timer.Stop()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}()
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	return stopTimer, timedOut.Load
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">// See 2 (end of page 4) https://www.ietf.org/rfc/rfc2617.txt</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// &#34;To receive authorization, the client sends the userid and password,</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// separated by a single colon (&#34;:&#34;) character, within a base64</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// encoded string in the credentials.&#34;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// It is not meant to be urlencoded.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func basicAuth(username, password string) string {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	auth := username + &#34;:&#34; + password
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	return base64.StdEncoding.EncodeToString([]byte(auth))
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// Get issues a GET to the specified URL. If the response is one of</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">// the following redirect codes, Get follows the redirect, up to a</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">// maximum of 10 redirects:</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">//	301 (Moved Permanently)</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">//	302 (Found)</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span><span class="comment">//	303 (See Other)</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">//	307 (Temporary Redirect)</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">//	308 (Permanent Redirect)</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// An error is returned if there were too many redirects or if there</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// was an HTTP protocol error. A non-2xx response doesn&#39;t cause an</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// error. Any returned error will be of type [*url.Error]. The url.Error</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// value&#39;s Timeout method will report true if the request timed out.</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// When err is nil, resp always contains a non-nil resp.Body.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// Get is a wrapper around DefaultClient.Get.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// To make a request with custom headers, use [NewRequest] and</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// DefaultClient.Do.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified context.Context, use [NewRequestWithContext]</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// and DefaultClient.Do.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="selection">func Get(url string) (resp *Response, err error)</span> {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	return DefaultClient.Get(url)
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span><span class="comment">// Get issues a GET to the specified URL. If the response is one of the</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span><span class="comment">// following redirect codes, Get follows the redirect after calling the</span>
<span id="L461" class="ln">   461&nbsp;&nbsp;</span><span class="comment">// [Client.CheckRedirect] function:</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">//	301 (Moved Permanently)</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span><span class="comment">//	302 (Found)</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">//	303 (See Other)</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">//	307 (Temporary Redirect)</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">//	308 (Permanent Redirect)</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// An error is returned if the [Client.CheckRedirect] function fails</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// or if there was an HTTP protocol error. A non-2xx response doesn&#39;t</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// cause an error. Any returned error will be of type [*url.Error]. The</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// url.Error value&#39;s Timeout method will report true if the request</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// timed out.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// When err is nil, resp always contains a non-nil resp.Body.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// To make a request with custom headers, use [NewRequest] and [Client.Do].</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified context.Context, use [NewRequestWithContext]</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// and Client.Do.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (c *Client) Get(url string) (resp *Response, err error) {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	req, err := NewRequest(&#34;GET&#34;, url, nil)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	if err != nil {
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		return nil, err
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	return c.Do(req)
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>func alwaysFalse() bool { return false }
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// ErrUseLastResponse can be returned by Client.CheckRedirect hooks to</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// control how redirects are processed. If returned, the next request</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// is not sent and the most recent response is returned with its body</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">// unclosed.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>var ErrUseLastResponse = errors.New(&#34;net/http: use last response&#34;)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">// checkRedirect calls either the user&#39;s configured CheckRedirect</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// function, or the default.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>func (c *Client) checkRedirect(req *Request, via []*Request) error {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	fn := c.CheckRedirect
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	if fn == nil {
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		fn = defaultCheckRedirect
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	return fn(req, via)
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// redirectBehavior describes what should happen when the</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// client encounters a 3xx status code from the server.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func redirectBehavior(reqMethod string, resp *Response, ireq *Request) (redirectMethod string, shouldRedirect, includeBody bool) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	switch resp.StatusCode {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	case 301, 302, 303:
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		redirectMethod = reqMethod
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		shouldRedirect = true
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		includeBody = false
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		<span class="comment">// RFC 2616 allowed automatic redirection only with GET and</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		<span class="comment">// HEAD requests. RFC 7231 lifts this restriction, but we still</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		<span class="comment">// restrict other methods to GET to maintain compatibility.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		<span class="comment">// See Issue 18570.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		if reqMethod != &#34;GET&#34; &amp;&amp; reqMethod != &#34;HEAD&#34; {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>			redirectMethod = &#34;GET&#34;
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	case 307, 308:
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		redirectMethod = reqMethod
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		shouldRedirect = true
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		includeBody = true
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		if ireq.GetBody == nil &amp;&amp; ireq.outgoingLength() != 0 {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			<span class="comment">// We had a request body, and 307/308 require</span>
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			<span class="comment">// re-sending it, but GetBody is not defined. So just</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			<span class="comment">// return this response to the user instead of an</span>
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			<span class="comment">// error, like we did in Go 1.7 and earlier.</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>			shouldRedirect = false
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	return redirectMethod, shouldRedirect, includeBody
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// urlErrorOp returns the (*url.Error).Op value to use for the</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// provided (*Request).Method value.</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>func urlErrorOp(method string) string {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	if method == &#34;&#34; {
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		return &#34;Get&#34;
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>	if lowerMethod, ok := ascii.ToLower(method); ok {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		return method[:1] + lowerMethod[1:]
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	}
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	return method
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>}
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span><span class="comment">// Do sends an HTTP request and returns an HTTP response, following</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span><span class="comment">// policy (such as redirects, cookies, auth) as configured on the</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// client.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span><span class="comment">// An error is returned if caused by client policy (such as</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span><span class="comment">// CheckRedirect), or failure to speak HTTP (such as a network</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// connectivity problem). A non-2xx status code doesn&#39;t cause an</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// error.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// If the returned error is nil, the [Response] will contain a non-nil</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// Body which the user is expected to close. If the Body is not both</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// read to EOF and closed, the [Client]&#39;s underlying [RoundTripper]</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span><span class="comment">// (typically [Transport]) may not be able to re-use a persistent TCP</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span><span class="comment">// connection to the server for a subsequent &#34;keep-alive&#34; request.</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span><span class="comment">// The request Body, if non-nil, will be closed by the underlying</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// Transport, even on errors. The Body may be closed asynchronously after</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// Do returns.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span><span class="comment">// On error, any Response can be ignored. A non-nil Response with a</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// non-nil error only occurs when CheckRedirect fails, and even then</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// the returned [Response.Body] is already closed.</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// Generally [Get], [Post], or [PostForm] will be used instead of Do.</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// If the server replies with a redirect, the Client first uses the</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span><span class="comment">// CheckRedirect function to determine whether the redirect should be</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span><span class="comment">// followed. If permitted, a 301, 302, or 303 redirect causes</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// subsequent requests to use HTTP method GET</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// (or HEAD if the original request was HEAD), with no body.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// A 307 or 308 redirect preserves the original HTTP method and body,</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// provided that the [Request.GetBody] function is defined.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// The [NewRequest] function automatically sets GetBody for common</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">// standard library body types.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// Any returned error will be of type [*url.Error]. The url.Error</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">// value&#39;s Timeout method will report true if the request timed out.</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>func (c *Client) Do(req *Request) (*Response, error) {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	return c.do(req)
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>var testHookClientDoResult func(retres *Response, reterr error)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>func (c *Client) do(req *Request) (retres *Response, reterr error) {
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	if testHookClientDoResult != nil {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		defer func() { testHookClientDoResult(retres, reterr) }()
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if req.URL == nil {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		req.closeBody()
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		return nil, &amp;url.Error{
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>			Op:  urlErrorOp(req.Method),
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>			Err: errors.New(&#34;http: nil Request.URL&#34;),
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	var (
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		deadline      = c.deadline()
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		reqs          []*Request
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		resp          *Response
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		copyHeaders   = c.makeHeadersCopier(req)
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		reqBodyClosed = false <span class="comment">// have we closed the current req.Body?</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		<span class="comment">// Redirect behavior:</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		redirectMethod string
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		includeBody    bool
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	)
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	uerr := func(err error) error {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		<span class="comment">// the body may have been closed already by c.send()</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		if !reqBodyClosed {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>			req.closeBody()
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		}
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		var urlStr string
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		if resp != nil &amp;&amp; resp.Request != nil {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>			urlStr = stripPassword(resp.Request.URL)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		} else {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>			urlStr = stripPassword(req.URL)
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		}
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		return &amp;url.Error{
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			Op:  urlErrorOp(reqs[0].Method),
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			URL: urlStr,
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			Err: err,
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	for {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		<span class="comment">// For all but the first request, create the next</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		<span class="comment">// request hop and replace req.</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		if len(reqs) &gt; 0 {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			loc := resp.Header.Get(&#34;Location&#34;)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if loc == &#34;&#34; {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				<span class="comment">// While most 3xx responses include a Location, it is not</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>				<span class="comment">// required and 3xx responses without a Location have been</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>				<span class="comment">// observed in the wild. See issues #17773 and #49281.</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>				return resp, nil
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			u, err := req.URL.Parse(loc)
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>			if err != nil {
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>				resp.closeBody()
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>				return nil, uerr(fmt.Errorf(&#34;failed to parse Location header %q: %v&#34;, loc, err))
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			}
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			host := &#34;&#34;
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>			if req.Host != &#34;&#34; &amp;&amp; req.Host != req.URL.Host {
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>				<span class="comment">// If the caller specified a custom Host header and the</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>				<span class="comment">// redirect location is relative, preserve the Host header</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>				<span class="comment">// through the redirect. See issue #22233.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>				if u, _ := url.Parse(loc); u != nil &amp;&amp; !u.IsAbs() {
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>					host = req.Host
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>				}
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			}
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			ireq := reqs[0]
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>			req = &amp;Request{
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>				Method:   redirectMethod,
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>				Response: resp,
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>				URL:      u,
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				Header:   make(Header),
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>				Host:     host,
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>				Cancel:   ireq.Cancel,
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>				ctx:      ireq.ctx,
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>			}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>			if includeBody &amp;&amp; ireq.GetBody != nil {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>				req.Body, err = ireq.GetBody()
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>				if err != nil {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>					resp.closeBody()
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>					return nil, uerr(err)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>				}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>				req.ContentLength = ireq.ContentLength
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			}
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>			<span class="comment">// Copy original headers before setting the Referer,</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>			<span class="comment">// in case the user set Referer on their first request.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>			<span class="comment">// If they really want to override, they can do it in</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			<span class="comment">// their CheckRedirect func.</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			copyHeaders(req)
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			<span class="comment">// Add the Referer header from the most recent</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>			<span class="comment">// request URL to the new one, if it&#39;s not https-&gt;http:</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>			if ref := refererForURL(reqs[len(reqs)-1].URL, req.URL, req.Header.Get(&#34;Referer&#34;)); ref != &#34;&#34; {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>				req.Header.Set(&#34;Referer&#34;, ref)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>			}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>			err = c.checkRedirect(req, reqs)
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>			<span class="comment">// Sentinel error to let users select the</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>			<span class="comment">// previous response, without closing its</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			<span class="comment">// body. See Issue 10069.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			if err == ErrUseLastResponse {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>				return resp, nil
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>			}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			<span class="comment">// Close the previous response&#39;s body. But</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>			<span class="comment">// read at least some of the body so if it&#39;s</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>			<span class="comment">// small the underlying TCP connection will be</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			<span class="comment">// re-used. No need to check for errors: if it</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>			<span class="comment">// fails, the Transport won&#39;t reuse it anyway.</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>			const maxBodySlurpSize = 2 &lt;&lt; 10
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			if resp.ContentLength == -1 || resp.ContentLength &lt;= maxBodySlurpSize {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>				io.CopyN(io.Discard, resp.Body, maxBodySlurpSize)
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>			}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>			resp.Body.Close()
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>			if err != nil {
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>				<span class="comment">// Special case for Go 1 compatibility: return both the response</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>				<span class="comment">// and an error if the CheckRedirect function failed.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>				<span class="comment">// See https://golang.org/issue/3795</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>				<span class="comment">// The resp.Body has already been closed.</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>				ue := uerr(err)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>				ue.(*url.Error).URL = loc
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>				return resp, ue
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		reqs = append(reqs, req)
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		var err error
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		var didTimeout func() bool
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		if resp, didTimeout, err = c.send(req, deadline); err != nil {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			<span class="comment">// c.send() always closes req.Body</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>			reqBodyClosed = true
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>			if !deadline.IsZero() &amp;&amp; didTimeout() {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>				err = &amp;httpError{
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>					err:     err.Error() + &#34; (Client.Timeout exceeded while awaiting headers)&#34;,
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>					timeout: true,
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>				}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			return nil, uerr(err)
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		}
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		var shouldRedirect bool
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		redirectMethod, shouldRedirect, includeBody = redirectBehavior(req.Method, resp, reqs[0])
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		if !shouldRedirect {
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>			return resp, nil
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		}
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>		req.closeBody()
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">// makeHeadersCopier makes a function that copies headers from the</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// initial Request, ireq. For every redirect, this function must be called</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">// so that it can copy headers into the upcoming Request.</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>func (c *Client) makeHeadersCopier(ireq *Request) func(*Request) {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	<span class="comment">// The headers to copy are from the very initial request.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	<span class="comment">// We use a closured callback to keep a reference to these original headers.</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	var (
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		ireqhdr  = cloneOrMakeHeader(ireq.Header)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		icookies map[string][]*Cookie
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	if c.Jar != nil &amp;&amp; ireq.Header.Get(&#34;Cookie&#34;) != &#34;&#34; {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		icookies = make(map[string][]*Cookie)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		for _, c := range ireq.Cookies() {
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>			icookies[c.Name] = append(icookies[c.Name], c)
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		}
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	preq := ireq <span class="comment">// The previous request</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	return func(req *Request) {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		<span class="comment">// If Jar is present and there was some initial cookies provided</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		<span class="comment">// via the request header, then we may need to alter the initial</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		<span class="comment">// cookies as we follow redirects since each redirect may end up</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// modifying a pre-existing cookie.</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		<span class="comment">// Since cookies already set in the request header do not contain</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		<span class="comment">// information about the original domain and path, the logic below</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		<span class="comment">// assumes any new set cookies override the original cookie</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		<span class="comment">// regardless of domain or path.</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		<span class="comment">// See https://golang.org/issue/17494</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		if c.Jar != nil &amp;&amp; icookies != nil {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>			var changed bool
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>			resp := req.Response <span class="comment">// The response that caused the upcoming redirect</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			for _, c := range resp.Cookies() {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>				if _, ok := icookies[c.Name]; ok {
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>					delete(icookies, c.Name)
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>					changed = true
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>				}
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>			}
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			if changed {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>				ireqhdr.Del(&#34;Cookie&#34;)
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>				var ss []string
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>				for _, cs := range icookies {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>					for _, c := range cs {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>						ss = append(ss, c.Name+&#34;=&#34;+c.Value)
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>					}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>				}
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>				sort.Strings(ss) <span class="comment">// Ensure deterministic headers</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>				ireqhdr.Set(&#34;Cookie&#34;, strings.Join(ss, &#34;; &#34;))
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>			}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		<span class="comment">// Copy the initial request&#39;s Header values</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		<span class="comment">// (at least the safe ones).</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		for k, vv := range ireqhdr {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>			if shouldCopyHeaderOnRedirect(k, preq.URL, req.URL) {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>				req.Header[k] = vv
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>			}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		preq = req <span class="comment">// Update previous Request with the current request</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	}
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>}
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func defaultCheckRedirect(req *Request, via []*Request) error {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	if len(via) &gt;= 10 {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		return errors.New(&#34;stopped after 10 redirects&#34;)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	return nil
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">// Post issues a POST to the specified URL.</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// If the provided body is an [io.Closer], it is closed after the</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span><span class="comment">// request.</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span><span class="comment">// Post is a wrapper around DefaultClient.Post.</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span><span class="comment">// To set custom headers, use [NewRequest] and DefaultClient.Do.</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span><span class="comment">// See the [Client.Do] method documentation for details on how redirects</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span><span class="comment">// are handled.</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified context.Context, use [NewRequestWithContext]</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">// and DefaultClient.Do.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>func Post(url, contentType string, body io.Reader) (resp *Response, err error) {
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	return DefaultClient.Post(url, contentType, body)
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span><span class="comment">// Post issues a POST to the specified URL.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span><span class="comment">// If the provided body is an [io.Closer], it is closed after the</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span><span class="comment">// request.</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span><span class="comment">// To set custom headers, use [NewRequest] and [Client.Do].</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L846" class="ln">   846&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified context.Context, use [NewRequestWithContext]</span>
<span id="L847" class="ln">   847&nbsp;&nbsp;</span><span class="comment">// and [Client.Do].</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span><span class="comment">// See the Client.Do method documentation for details on how redirects</span>
<span id="L850" class="ln">   850&nbsp;&nbsp;</span><span class="comment">// are handled.</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>func (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error) {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	req, err := NewRequest(&#34;POST&#34;, url, body)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	if err != nil {
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		return nil, err
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	req.Header.Set(&#34;Content-Type&#34;, contentType)
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	return c.Do(req)
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>}
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span><span class="comment">// PostForm issues a POST to the specified URL, with data&#39;s keys and</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span><span class="comment">// values URL-encoded as the request body.</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span><span class="comment">// The Content-Type header is set to application/x-www-form-urlencoded.</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span><span class="comment">// To set other headers, use [NewRequest] and DefaultClient.Do.</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span><span class="comment">// When err is nil, resp always contains a non-nil resp.Body.</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span><span class="comment">// PostForm is a wrapper around DefaultClient.PostForm.</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span><span class="comment">// See the [Client.Do] method documentation for details on how redirects</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span><span class="comment">// are handled.</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified [context.Context], use [NewRequestWithContext]</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// and DefaultClient.Do.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>func PostForm(url string, data url.Values) (resp *Response, err error) {
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	return DefaultClient.PostForm(url, data)
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">// PostForm issues a POST to the specified URL,</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// with data&#39;s keys and values URL-encoded as the request body.</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// The Content-Type header is set to application/x-www-form-urlencoded.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// To set other headers, use [NewRequest] and [Client.Do].</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// When err is nil, resp always contains a non-nil resp.Body.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">// Caller should close resp.Body when done reading from it.</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span><span class="comment">// See the Client.Do method documentation for details on how redirects</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span><span class="comment">// are handled.</span>
<span id="L891" class="ln">   891&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified context.Context, use [NewRequestWithContext]</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span><span class="comment">// and Client.Do.</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error) {
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	return c.Post(url, &#34;application/x-www-form-urlencoded&#34;, strings.NewReader(data.Encode()))
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>}
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">// Head issues a HEAD to the specified URL. If the response is one of</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span><span class="comment">// the following redirect codes, Head follows the redirect, up to a</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span><span class="comment">// maximum of 10 redirects:</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span><span class="comment">//	301 (Moved Permanently)</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span><span class="comment">//	302 (Found)</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span><span class="comment">//	303 (See Other)</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span><span class="comment">//	307 (Temporary Redirect)</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">//	308 (Permanent Redirect)</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// Head is a wrapper around DefaultClient.Head.</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified [context.Context], use [NewRequestWithContext]</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">// and DefaultClient.Do.</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>func Head(url string) (resp *Response, err error) {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	return DefaultClient.Head(url)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span><span class="comment">// Head issues a HEAD to the specified URL. If the response is one of the</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span><span class="comment">// following redirect codes, Head follows the redirect after calling the</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span><span class="comment">// [Client.CheckRedirect] function:</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span><span class="comment">//	301 (Moved Permanently)</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span><span class="comment">//	302 (Found)</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span><span class="comment">//	303 (See Other)</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span><span class="comment">//	307 (Temporary Redirect)</span>
<span id="L924" class="ln">   924&nbsp;&nbsp;</span><span class="comment">//	308 (Permanent Redirect)</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span><span class="comment">// To make a request with a specified [context.Context], use [NewRequestWithContext]</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span><span class="comment">// and [Client.Do].</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>func (c *Client) Head(url string) (resp *Response, err error) {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	req, err := NewRequest(&#34;HEAD&#34;, url, nil)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	if err != nil {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>		return nil, err
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>	}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	return c.Do(req)
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>
<span id="L936" class="ln">   936&nbsp;&nbsp;</span><span class="comment">// CloseIdleConnections closes any connections on its [Transport] which</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span><span class="comment">// were previously connected from previous requests but are now</span>
<span id="L938" class="ln">   938&nbsp;&nbsp;</span><span class="comment">// sitting idle in a &#34;keep-alive&#34; state. It does not interrupt any</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span><span class="comment">// connections currently in use.</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span><span class="comment">// If [Client.Transport] does not have a [Client.CloseIdleConnections] method</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span><span class="comment">// then this method does nothing.</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func (c *Client) CloseIdleConnections() {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	type closeIdler interface {
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		CloseIdleConnections()
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	if tr, ok := c.transport().(closeIdler); ok {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		tr.CloseIdleConnections()
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>	}
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span><span class="comment">// cancelTimerBody is an io.ReadCloser that wraps rc with two features:</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span><span class="comment">//  1. On Read error or close, the stop func is called.</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">//  2. On Read failure, if reqDidTimeout is true, the error is wrapped and</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">//     marked as net.Error that hit its timeout.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>type cancelTimerBody struct {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	stop          func() <span class="comment">// stops the time.Timer waiting to cancel the request</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	rc            io.ReadCloser
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	reqDidTimeout func() bool
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>}
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>func (b *cancelTimerBody) Read(p []byte) (n int, err error) {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	n, err = b.rc.Read(p)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	if err == nil {
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		return n, nil
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	}
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		return n, err
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>	}
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	if b.reqDidTimeout() {
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		err = &amp;httpError{
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>			err:     err.Error() + &#34; (Client.Timeout or context cancellation while reading body)&#34;,
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			timeout: true,
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	return n, err
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>}
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>func (b *cancelTimerBody) Close() error {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	err := b.rc.Close()
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	b.stop()
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	return err
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>func shouldCopyHeaderOnRedirect(headerKey string, initial, dest *url.URL) bool {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	switch CanonicalHeaderKey(headerKey) {
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	case &#34;Authorization&#34;, &#34;Www-Authenticate&#34;, &#34;Cookie&#34;, &#34;Cookie2&#34;:
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		<span class="comment">// Permit sending auth/cookie headers from &#34;foo.com&#34;</span>
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		<span class="comment">// to &#34;sub.foo.com&#34;.</span>
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>		<span class="comment">// Note that we don&#39;t send all cookies to subdomains</span>
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>		<span class="comment">// automatically. This function is only used for</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		<span class="comment">// Cookies set explicitly on the initial outgoing</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>		<span class="comment">// client request. Cookies automatically added via the</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		<span class="comment">// CookieJar mechanism continue to follow each</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>		<span class="comment">// cookie&#39;s scope as set by Set-Cookie. But for</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>		<span class="comment">// outgoing requests with the Cookie header set</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>		<span class="comment">// directly, we don&#39;t know their scope, so we assume</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>		<span class="comment">// it&#39;s for *.domain.com.</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		ihost := idnaASCIIFromURL(initial)
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		dhost := idnaASCIIFromURL(dest)
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>		return isDomainOrSubdomain(dhost, ihost)
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	}
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	<span class="comment">// All other headers are copied:</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	return true
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// isDomainOrSubdomain reports whether sub is a subdomain (or exact</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span><span class="comment">// match) of the parent domain.</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span><span class="comment">// Both domains must already be in canonical form.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>func isDomainOrSubdomain(sub, parent string) bool {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	if sub == parent {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		return true
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	}
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	<span class="comment">// If sub contains a :, it&#39;s probably an IPv6 address (and is definitely not a hostname).</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t check the suffix in this case, to avoid matching the contents of a IPv6 zone.</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	<span class="comment">// For example, &#34;::1%.www.example.com&#34; is not a subdomain of &#34;www.example.com&#34;.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	if strings.ContainsAny(sub, &#34;:%&#34;) {
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		return false
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	}
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	<span class="comment">// If sub is &#34;foo.example.com&#34; and parent is &#34;example.com&#34;,</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	<span class="comment">// that means sub must end in &#34;.&#34;+parent.</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	<span class="comment">// Do it without allocating.</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	if !strings.HasSuffix(sub, parent) {
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		return false
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	return sub[len(sub)-len(parent)-1] == &#39;.&#39;
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>func stripPassword(u *url.URL) string {
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	_, passSet := u.User.Password()
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	if passSet {
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		return strings.Replace(u.String(), u.User.String()+&#34;@&#34;, u.User.Username()+&#34;:***@&#34;, 1)
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	return u.String()
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>}
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>
</pre><p><a href="client.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
