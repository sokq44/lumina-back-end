<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/cookie.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./cookie.go?s=485:1017#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">cookie.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package http
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;net/http/internal/ascii&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// HTTP response or the Cookie header of an HTTP request.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// See https://tools.ietf.org/html/rfc6265 for details.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="selection">type Cookie struct {
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	Name  string
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	Value string
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	Path       string    </span><span class="selection-comment">// optional</span><span class="selection">
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	Domain     string    </span><span class="selection-comment">// optional</span><span class="selection">
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	Expires    time.Time </span><span class="selection-comment">// optional</span><span class="selection">
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	RawExpires string    </span><span class="selection-comment">// for reading cookies only</span><span class="selection">
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	</span><span class="selection-comment">// MaxAge=0 means no &#39;Max-Age&#39; attribute specified.</span><span class="selection">
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	</span><span class="selection-comment">// MaxAge&lt;0 means delete cookie now, equivalently &#39;Max-Age: 0&#39;</span><span class="selection">
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	</span><span class="selection-comment">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span><span class="selection">
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	MaxAge   int
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	Secure   bool
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	HttpOnly bool
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	SameSite SameSite
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Raw      string
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Unparsed []string </span><span class="selection-comment">// Raw text of unparsed attribute-value pairs</span><span class="selection">
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>}</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// SameSite allows a server to define a cookie attribute making it impossible for</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// the browser to send this cookie along with cross-site requests. The main</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// goal is to mitigate the risk of cross-origin information leakage, and provide</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// some protection against cross-site request forgery attacks.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// See https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00 for details.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>type SameSite int
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>const (
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	SameSiteDefaultMode SameSite = iota + 1
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	SameSiteLaxMode
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	SameSiteStrictMode
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	SameSiteNoneMode
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// readSetCookies parses all &#34;Set-Cookie&#34; values from</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// the header h and returns the successfully parsed Cookies.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>func readSetCookies(h Header) []*Cookie {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	cookieCount := len(h[&#34;Set-Cookie&#34;])
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	if cookieCount == 0 {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		return []*Cookie{}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	cookies := make([]*Cookie, 0, cookieCount)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	for _, line := range h[&#34;Set-Cookie&#34;] {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		parts := strings.Split(textproto.TrimString(line), &#34;;&#34;)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		if len(parts) == 1 &amp;&amp; parts[0] == &#34;&#34; {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>			continue
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		parts[0] = textproto.TrimString(parts[0])
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		name, value, ok := strings.Cut(parts[0], &#34;=&#34;)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		if !ok {
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>			continue
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		name = textproto.TrimString(name)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		if !isCookieNameValid(name) {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>			continue
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		value, ok = parseCookieValue(value, true)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		if !ok {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>			continue
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		c := &amp;Cookie{
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>			Name:  name,
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			Value: value,
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>			Raw:   line,
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		for i := 1; i &lt; len(parts); i++ {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			parts[i] = textproto.TrimString(parts[i])
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			if len(parts[i]) == 0 {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>				continue
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>			}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			attr, val, _ := strings.Cut(parts[i], &#34;=&#34;)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			lowerAttr, isASCII := ascii.ToLower(attr)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			if !isASCII {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>				continue
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			}
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			val, ok = parseCookieValue(val, false)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>			if !ok {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				c.Unparsed = append(c.Unparsed, parts[i])
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				continue
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			switch lowerAttr {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>			case &#34;samesite&#34;:
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>				lowerVal, ascii := ascii.ToLower(val)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>				if !ascii {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>					c.SameSite = SameSiteDefaultMode
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>					continue
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>				switch lowerVal {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				case &#34;lax&#34;:
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>					c.SameSite = SameSiteLaxMode
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>				case &#34;strict&#34;:
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>					c.SameSite = SameSiteStrictMode
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>				case &#34;none&#34;:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>					c.SameSite = SameSiteNoneMode
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>				default:
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>					c.SameSite = SameSiteDefaultMode
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>				continue
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			case &#34;secure&#34;:
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>				c.Secure = true
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>				continue
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			case &#34;httponly&#34;:
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>				c.HttpOnly = true
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>				continue
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>			case &#34;domain&#34;:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>				c.Domain = val
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>				continue
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			case &#34;max-age&#34;:
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>				secs, err := strconv.Atoi(val)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>				if err != nil || secs != 0 &amp;&amp; val[0] == &#39;0&#39; {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>					break
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>				}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>				if secs &lt;= 0 {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>					secs = -1
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>				}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>				c.MaxAge = secs
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>				continue
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			case &#34;expires&#34;:
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>				c.RawExpires = val
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				exptime, err := time.Parse(time.RFC1123, val)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>				if err != nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>					exptime, err = time.Parse(&#34;Mon, 02-Jan-2006 15:04:05 MST&#34;, val)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>					if err != nil {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>						c.Expires = time.Time{}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>						break
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>					}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>				}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>				c.Expires = exptime.UTC()
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>				continue
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			case &#34;path&#34;:
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>				c.Path = val
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>				continue
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			c.Unparsed = append(c.Unparsed, parts[i])
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		}
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		cookies = append(cookies, c)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return cookies
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// SetCookie adds a Set-Cookie header to the provided [ResponseWriter]&#39;s headers.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// The provided cookie must have a valid Name. Invalid cookies may be</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// silently dropped.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func SetCookie(w ResponseWriter, cookie *Cookie) {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if v := cookie.String(); v != &#34;&#34; {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		w.Header().Add(&#34;Set-Cookie&#34;, v)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>}
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// String returns the serialization of the cookie for use in a [Cookie]</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// header (if only Name and Value are set) or a Set-Cookie response</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// header (if other fields are set).</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// If c is nil or c.Name is invalid, the empty string is returned.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (c *Cookie) String() string {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if c == nil || !isCookieNameValid(c.Name) {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// extraCookieLength derived from typical length of cookie attributes</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// see RFC 6265 Sec 4.1.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	const extraCookieLength = 110
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	var b strings.Builder
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	b.Grow(len(c.Name) + len(c.Value) + len(c.Domain) + len(c.Path) + extraCookieLength)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	b.WriteString(c.Name)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	b.WriteRune(&#39;=&#39;)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	b.WriteString(sanitizeCookieValue(c.Value))
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if len(c.Path) &gt; 0 {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		b.WriteString(&#34;; Path=&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		b.WriteString(sanitizeCookiePath(c.Path))
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if len(c.Domain) &gt; 0 {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if validCookieDomain(c.Domain) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			<span class="comment">// A c.Domain containing illegal characters is not</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			<span class="comment">// sanitized but simply dropped which turns the cookie</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>			<span class="comment">// into a host-only cookie. A leading dot is okay</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			<span class="comment">// but won&#39;t be sent.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			d := c.Domain
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			if d[0] == &#39;.&#39; {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>				d = d[1:]
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>			b.WriteString(&#34;; Domain=&#34;)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>			b.WriteString(d)
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		} else {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			log.Printf(&#34;net/http: invalid Cookie.Domain %q; dropping domain attribute&#34;, c.Domain)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>		}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	var buf [len(TimeFormat)]byte
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if validCookieExpires(c.Expires) {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		b.WriteString(&#34;; Expires=&#34;)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		b.Write(c.Expires.UTC().AppendFormat(buf[:0], TimeFormat))
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	if c.MaxAge &gt; 0 {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		b.WriteString(&#34;; Max-Age=&#34;)
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		b.Write(strconv.AppendInt(buf[:0], int64(c.MaxAge), 10))
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	} else if c.MaxAge &lt; 0 {
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		b.WriteString(&#34;; Max-Age=0&#34;)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if c.HttpOnly {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		b.WriteString(&#34;; HttpOnly&#34;)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if c.Secure {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		b.WriteString(&#34;; Secure&#34;)
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	switch c.SameSite {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	case SameSiteDefaultMode:
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		<span class="comment">// Skip, default mode is obtained by not emitting the attribute.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	case SameSiteNoneMode:
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		b.WriteString(&#34;; SameSite=None&#34;)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	case SameSiteLaxMode:
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		b.WriteString(&#34;; SameSite=Lax&#34;)
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	case SameSiteStrictMode:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		b.WriteString(&#34;; SameSite=Strict&#34;)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return b.String()
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// Valid reports whether the cookie is valid.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func (c *Cookie) Valid() error {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	if c == nil {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		return errors.New(&#34;http: nil Cookie&#34;)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	}
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if !isCookieNameValid(c.Name) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return errors.New(&#34;http: invalid Cookie.Name&#34;)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	if !c.Expires.IsZero() &amp;&amp; !validCookieExpires(c.Expires) {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		return errors.New(&#34;http: invalid Cookie.Expires&#34;)
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	for i := 0; i &lt; len(c.Value); i++ {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		if !validCookieValueByte(c.Value[i]) {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;http: invalid byte %q in Cookie.Value&#34;, c.Value[i])
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if len(c.Path) &gt; 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		for i := 0; i &lt; len(c.Path); i++ {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			if !validCookiePathByte(c.Path[i]) {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>				return fmt.Errorf(&#34;http: invalid byte %q in Cookie.Path&#34;, c.Path[i])
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>			}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	if len(c.Domain) &gt; 0 {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		if !validCookieDomain(c.Domain) {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			return errors.New(&#34;http: invalid Cookie.Domain&#34;)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	return nil
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">// readCookies parses all &#34;Cookie&#34; values from the header h and</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// returns the successfully parsed Cookies.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// if filter isn&#39;t empty, only cookies of that name are returned.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func readCookies(h Header, filter string) []*Cookie {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	lines := h[&#34;Cookie&#34;]
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	if len(lines) == 0 {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		return []*Cookie{}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	cookies := make([]*Cookie, 0, len(lines)+strings.Count(lines[0], &#34;;&#34;))
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	for _, line := range lines {
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		line = textproto.TrimString(line)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		var part string
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		for len(line) &gt; 0 { <span class="comment">// continue since we have rest</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			part, line, _ = strings.Cut(line, &#34;;&#34;)
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			part = textproto.TrimString(part)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			if part == &#34;&#34; {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>				continue
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>			}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			name, val, _ := strings.Cut(part, &#34;=&#34;)
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			name = textproto.TrimString(name)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			if !isCookieNameValid(name) {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>				continue
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			if filter != &#34;&#34; &amp;&amp; filter != name {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>				continue
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>			}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			val, ok := parseCookieValue(val, true)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			if !ok {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>				continue
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			cookies = append(cookies, &amp;Cookie{Name: name, Value: val})
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	return cookies
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// validCookieDomain reports whether v is a valid cookie domain-value.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>func validCookieDomain(v string) bool {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	if isCookieDomainName(v) {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		return true
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	if net.ParseIP(v) != nil &amp;&amp; !strings.Contains(v, &#34;:&#34;) {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		return true
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	}
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	return false
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// validCookieExpires reports whether v is a valid cookie expires-value.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func validCookieExpires(t time.Time) bool {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// IETF RFC 6265 Section 5.1.1.5, the year must not be less than 1601</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	return t.Year() &gt;= 1601
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// isCookieDomainName reports whether s is a valid domain name or a valid</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// domain name with a leading dot &#39;.&#39;.  It is almost a direct copy of</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// package net&#39;s isDomainName.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func isCookieDomainName(s string) bool {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	if len(s) == 0 {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		return false
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	if len(s) &gt; 255 {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		return false
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	if s[0] == &#39;.&#39; {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// A cookie a domain attribute may start with a leading dot.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		s = s[1:]
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	last := byte(&#39;.&#39;)
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	ok := false <span class="comment">// Ok once we&#39;ve seen a letter.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	partlen := 0
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		c := s[i]
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		switch {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		default:
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>			return false
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;:
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			<span class="comment">// No &#39;_&#39; allowed here (in contrast to package net).</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			ok = true
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			partlen++
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			<span class="comment">// fine</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			partlen++
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		case c == &#39;-&#39;:
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			<span class="comment">// Byte before dash cannot be dot.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>			if last == &#39;.&#39; {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>				return false
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			partlen++
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		case c == &#39;.&#39;:
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			<span class="comment">// Byte before dot cannot be dot, dash.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			if last == &#39;.&#39; || last == &#39;-&#39; {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				return false
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>			}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			if partlen &gt; 63 || partlen == 0 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>				return false
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>			}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>			partlen = 0
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		last = c
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if last == &#39;-&#39; || partlen &gt; 63 {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		return false
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	return ok
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>var cookieNameSanitizer = strings.NewReplacer(&#34;\n&#34;, &#34;-&#34;, &#34;\r&#34;, &#34;-&#34;)
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>func sanitizeCookieName(n string) string {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	return cookieNameSanitizer.Replace(n)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// sanitizeCookieValue produces a suitable cookie-value from v.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// https://tools.ietf.org/html/rfc6265#section-4.1.1</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">//	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">//	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">//	          ; US-ASCII characters excluding CTLs,</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">//	          ; whitespace DQUOTE, comma, semicolon,</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span><span class="comment">//	          ; and backslash</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// We loosen this as spaces and commas are common in cookie values</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// but we produce a quoted cookie-value if and only if v contains</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">// commas or spaces.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// See https://golang.org/issue/7243 for the discussion.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>func sanitizeCookieValue(v string) string {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	v = sanitizeOrWarn(&#34;Cookie.Value&#34;, validCookieValueByte, v)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	if len(v) == 0 {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		return v
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	if strings.ContainsAny(v, &#34; ,&#34;) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		return `&#34;` + v + `&#34;`
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	}
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	return v
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>func validCookieValueByte(b byte) bool {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	return 0x20 &lt;= b &amp;&amp; b &lt; 0x7f &amp;&amp; b != &#39;&#34;&#39; &amp;&amp; b != &#39;;&#39; &amp;&amp; b != &#39;\\&#39;
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// path-av           = &#34;Path=&#34; path-value</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// path-value        = &lt;any CHAR except CTLs or &#34;;&#34;&gt;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func sanitizeCookiePath(v string) string {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	return sanitizeOrWarn(&#34;Cookie.Path&#34;, validCookiePathByte, v)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>func validCookiePathByte(b byte) bool {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	return 0x20 &lt;= b &amp;&amp; b &lt; 0x7f &amp;&amp; b != &#39;;&#39;
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>func sanitizeOrWarn(fieldName string, valid func(byte) bool, v string) string {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	ok := true
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	for i := 0; i &lt; len(v); i++ {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if valid(v[i]) {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			continue
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		log.Printf(&#34;net/http: invalid byte %q in %s; dropping invalid bytes&#34;, v[i], fieldName)
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		ok = false
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		break
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	if ok {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		return v
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	buf := make([]byte, 0, len(v))
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	for i := 0; i &lt; len(v); i++ {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		if b := v[i]; valid(b) {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			buf = append(buf, b)
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return string(buf)
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>func parseCookieValue(raw string, allowDoubleQuote bool) (string, bool) {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// Strip the quotes, if present.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	if allowDoubleQuote &amp;&amp; len(raw) &gt; 1 &amp;&amp; raw[0] == &#39;&#34;&#39; &amp;&amp; raw[len(raw)-1] == &#39;&#34;&#39; {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		raw = raw[1 : len(raw)-1]
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	for i := 0; i &lt; len(raw); i++ {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		if !validCookieValueByte(raw[i]) {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>			return &#34;&#34;, false
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	}
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	return raw, true
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>func isCookieNameValid(raw string) bool {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	if raw == &#34;&#34; {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		return false
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	return strings.IndexFunc(raw, isNotToken) &lt; 0
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
</pre><p><a href="cookie.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
