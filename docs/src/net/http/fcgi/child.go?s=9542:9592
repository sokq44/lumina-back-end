<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/fcgi/child.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./child.go?s=9542:9592#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/fcgi">fcgi</a>/<span class="text-muted">child.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/fcgi">net/http/fcgi</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package fcgi
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// This file implements FastCGI from the perspective of a child process.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;net/http/cgi&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// request holds the state for an in-progress request. As soon as it&#39;s complete,</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// it&#39;s converted to an http.Request.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>type request struct {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	pw        *io.PipeWriter
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	reqId     uint16
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	params    map[string]string
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	buf       [1024]byte
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	rawParams []byte
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	keepConn  bool
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// envVarsContextKey uniquely identifies a mapping of CGI</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// environment variables to their values in a request context</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>type envVarsContextKey struct{}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>func newRequest(reqId uint16, flags uint8) *request {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	r := &amp;request{
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		reqId:    reqId,
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>		params:   map[string]string{},
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		keepConn: flags&amp;flagKeepConn != 0,
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	r.rawParams = r.buf[:0]
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return r
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// parseParams reads an encoded []byte into Params.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (r *request) parseParams() {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	text := r.rawParams
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	r.rawParams = nil
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	for len(text) &gt; 0 {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		keyLen, n := readSize(text)
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		if n == 0 {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>			return
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		}
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		text = text[n:]
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		valLen, n := readSize(text)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		if n == 0 {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			return
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		text = text[n:]
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		if int(keyLen)+int(valLen) &gt; len(text) {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			return
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		key := readString(text, keyLen)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		text = text[keyLen:]
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		val := readString(text, valLen)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		text = text[valLen:]
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		r.params[key] = val
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// response implements http.ResponseWriter.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>type response struct {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	req            *request
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	header         http.Header
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	code           int
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	wroteHeader    bool
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	wroteCGIHeader bool
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	w              *bufWriter
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func newResponse(c *child, req *request) *response {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	return &amp;response{
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		req:    req,
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		header: http.Header{},
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		w:      newWriter(c.conn, typeStdout, req.reqId),
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func (r *response) Header() http.Header {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	return r.header
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func (r *response) Write(p []byte) (n int, err error) {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	if !r.wroteHeader {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		r.WriteHeader(http.StatusOK)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if !r.wroteCGIHeader {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		r.writeCGIHeader(p)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return r.w.Write(p)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>func (r *response) WriteHeader(code int) {
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	if r.wroteHeader {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		return
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	r.wroteHeader = true
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	r.code = code
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	if code == http.StatusNotModified {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		<span class="comment">// Must not have body.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		r.header.Del(&#34;Content-Type&#34;)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		r.header.Del(&#34;Content-Length&#34;)
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		r.header.Del(&#34;Transfer-Encoding&#34;)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	if r.header.Get(&#34;Date&#34;) == &#34;&#34; {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		r.header.Set(&#34;Date&#34;, time.Now().UTC().Format(http.TimeFormat))
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// writeCGIHeader finalizes the header sent to the client and writes it to the output.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// p is not written by writeHeader, but is the first chunk of the body</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// that will be written. It is sniffed for a Content-Type if none is</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// set explicitly.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (r *response) writeCGIHeader(p []byte) {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	if r.wroteCGIHeader {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		return
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	r.wroteCGIHeader = true
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	fmt.Fprintf(r.w, &#34;Status: %d %s\r\n&#34;, r.code, http.StatusText(r.code))
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	if _, hasType := r.header[&#34;Content-Type&#34;]; r.code != http.StatusNotModified &amp;&amp; !hasType {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		r.header.Set(&#34;Content-Type&#34;, http.DetectContentType(p))
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	r.header.Write(r.w)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	r.w.WriteString(&#34;\r\n&#34;)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	r.w.Flush()
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>func (r *response) Flush() {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if !r.wroteHeader {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		r.WriteHeader(http.StatusOK)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	r.w.Flush()
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (r *response) Close() error {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	r.Flush()
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return r.w.Close()
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>type child struct {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	conn    *conn
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	handler http.Handler
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	requests map[uint16]*request <span class="comment">// keyed by request ID</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func newChild(rwc io.ReadWriteCloser, handler http.Handler) *child {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	return &amp;child{
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		conn:     newConn(rwc),
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		handler:  handler,
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		requests: make(map[uint16]*request),
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (c *child) serve() {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	defer c.conn.Close()
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	defer c.cleanUp()
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	var rec record
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	for {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>		if err := rec.read(c.conn.rwc); err != nil {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>			return
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		if err := c.handleRecord(&amp;rec); err != nil {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			return
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>var errCloseConn = errors.New(&#34;fcgi: connection should be closed&#34;)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>var emptyBody = io.NopCloser(strings.NewReader(&#34;&#34;))
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// ErrRequestAborted is returned by Read when a handler attempts to read the</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// body of a request that has been aborted by the web server.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>var ErrRequestAborted = errors.New(&#34;fcgi: request aborted by web server&#34;)
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// ErrConnClosed is returned by Read when a handler attempts to read the body of</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// a request after the connection to the web server has been closed.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>var ErrConnClosed = errors.New(&#34;fcgi: connection to web server closed&#34;)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func (c *child) handleRecord(rec *record) error {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	req, ok := c.requests[rec.h.Id]
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	if !ok &amp;&amp; rec.h.Type != typeBeginRequest &amp;&amp; rec.h.Type != typeGetValues {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		<span class="comment">// The spec says to ignore unknown request IDs.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		return nil
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	switch rec.h.Type {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	case typeBeginRequest:
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		if req != nil {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			<span class="comment">// The server is trying to begin a request with the same ID</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			<span class="comment">// as an in-progress request. This is an error.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>			return errors.New(&#34;fcgi: received ID that is already in-flight&#34;)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		var br beginRequest
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		if err := br.read(rec.content()); err != nil {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			return err
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		if br.role != roleResponder {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>			c.conn.writeEndRequest(rec.h.Id, 0, statusUnknownRole)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			return nil
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		req = newRequest(rec.h.Id, br.flags)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		c.requests[rec.h.Id] = req
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		return nil
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	case typeParams:
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		<span class="comment">// NOTE(eds): Technically a key-value pair can straddle the boundary</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		<span class="comment">// between two packets. We buffer until we&#39;ve received all parameters.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		if len(rec.content()) &gt; 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			req.rawParams = append(req.rawParams, rec.content()...)
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>			return nil
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>		req.parseParams()
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		return nil
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	case typeStdin:
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		content := rec.content()
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		if req.pw == nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			var body io.ReadCloser
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>			if len(content) &gt; 0 {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>				<span class="comment">// body could be an io.LimitReader, but it shouldn&#39;t matter</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>				<span class="comment">// as long as both sides are behaving.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>				body, req.pw = io.Pipe()
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			} else {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				body = emptyBody
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			go c.serveRequest(req, body)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>		if len(content) &gt; 0 {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			<span class="comment">// TODO(eds): This blocks until the handler reads from the pipe.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			<span class="comment">// If the handler takes a long time, it might be a problem.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			req.pw.Write(content)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>		} else {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			delete(c.requests, req.reqId)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			if req.pw != nil {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>				req.pw.Close()
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>			}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		return nil
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	case typeGetValues:
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		values := map[string]string{&#34;FCGI_MPXS_CONNS&#34;: &#34;1&#34;}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		c.conn.writePairs(typeGetValuesResult, 0, values)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return nil
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	case typeData:
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		<span class="comment">// If the filter role is implemented, read the data stream here.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return nil
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	case typeAbortRequest:
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		delete(c.requests, rec.h.Id)
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		c.conn.writeEndRequest(rec.h.Id, 0, statusRequestComplete)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		if req.pw != nil {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>			req.pw.CloseWithError(ErrRequestAborted)
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		if !req.keepConn {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			<span class="comment">// connection will close upon return</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			return errCloseConn
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>		return nil
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	default:
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		b := make([]byte, 8)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		b[0] = byte(rec.h.Type)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		c.conn.writeRecord(typeUnknownType, 0, b)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		return nil
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">// filterOutUsedEnvVars returns a new map of env vars without the</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// variables in the given envVars map that are read for creating each http.Request</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>func filterOutUsedEnvVars(envVars map[string]string) map[string]string {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	withoutUsedEnvVars := make(map[string]string)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	for k, v := range envVars {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if addFastCGIEnvToContext(k) {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			withoutUsedEnvVars[k] = v
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	return withoutUsedEnvVars
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>func (c *child) serveRequest(req *request, body io.ReadCloser) {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	r := newResponse(c, req)
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	httpReq, err := cgi.RequestFromMap(req.params)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if err != nil {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		<span class="comment">// there was an error reading the request</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		r.WriteHeader(http.StatusInternalServerError)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		c.conn.writeRecord(typeStderr, req.reqId, []byte(err.Error()))
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	} else {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		httpReq.Body = body
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		withoutUsedEnvVars := filterOutUsedEnvVars(req.params)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		envVarCtx := context.WithValue(httpReq.Context(), envVarsContextKey{}, withoutUsedEnvVars)
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		httpReq = httpReq.WithContext(envVarCtx)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		c.handler.ServeHTTP(r, httpReq)
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// Make sure we serve something even if nothing was written to r</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	r.Write(nil)
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	r.Close()
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	c.conn.writeEndRequest(req.reqId, 0, statusRequestComplete)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// Consume the entire body, so the host isn&#39;t still writing to</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">// us when we close the socket below in the !keepConn case,</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// otherwise we&#39;d send a RST. (golang.org/issue/4183)</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): also bound this copy in time. Or send</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// some sort of abort request to the host, so the host</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// can properly cut off the client sending all the data.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	<span class="comment">// For now just bound it a little and</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	io.CopyN(io.Discard, body, 100&lt;&lt;20)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	body.Close()
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if !req.keepConn {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		c.conn.Close()
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>func (c *child) cleanUp() {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	for _, req := range c.requests {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		if req.pw != nil {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			<span class="comment">// race with call to Close in c.serveRequest doesn&#39;t matter because</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			<span class="comment">// Pipe(Reader|Writer).Close are idempotent</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>			req.pw.CloseWithError(ErrConnClosed)
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">// Serve accepts incoming FastCGI connections on the listener l, creating a new</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// goroutine for each. The goroutine reads requests and then calls handler</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// to reply to them.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// If l is nil, Serve accepts connections from os.Stdin.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// If handler is nil, [http.DefaultServeMux] is used.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func Serve(l net.Listener, handler http.Handler) error {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	if l == nil {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		var err error
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		l, err = net.FileListener(os.Stdin)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		if err != nil {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			return err
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		defer l.Close()
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if handler == nil {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		handler = http.DefaultServeMux
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	for {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		rw, err := l.Accept()
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		if err != nil {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>			return err
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		c := newChild(rw, handler)
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		go c.serve()
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// ProcessEnv returns FastCGI environment variables associated with the request r</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// for which no effort was made to be included in the request itself - the data</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// is hidden in the request&#39;s context. As an example, if REMOTE_USER is set for a</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// request, it will not be found anywhere in r, but it will be included in</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// ProcessEnv&#39;s response (via r&#39;s context).</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="selection">func ProcessEnv(r *http.Request) map[string]string</span> {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	env, _ := r.Context().Value(envVarsContextKey{}).(map[string]string)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	return env
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// addFastCGIEnvToContext reports whether to include the FastCGI environment variable s</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// in the http.Request.Context, accessible via ProcessEnv.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func addFastCGIEnvToContext(s string) bool {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">// Exclude things supported by net/http natively:</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	switch s {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	case &#34;CONTENT_LENGTH&#34;, &#34;CONTENT_TYPE&#34;, &#34;HTTPS&#34;,
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		&#34;PATH_INFO&#34;, &#34;QUERY_STRING&#34;, &#34;REMOTE_ADDR&#34;,
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		&#34;REMOTE_HOST&#34;, &#34;REMOTE_PORT&#34;, &#34;REQUEST_METHOD&#34;,
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		&#34;REQUEST_URI&#34;, &#34;SCRIPT_NAME&#34;, &#34;SERVER_PROTOCOL&#34;:
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		return false
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if strings.HasPrefix(s, &#34;HTTP_&#34;) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		return false
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">// Explicitly include FastCGI-specific things.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	<span class="comment">// This list is redundant with the default &#34;return true&#34; below.</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	<span class="comment">// Consider this documentation of the sorts of things we expect</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	<span class="comment">// to maybe see.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	switch s {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	case &#34;REMOTE_USER&#34;:
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		return true
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	<span class="comment">// Unknown, so include it to be safe.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	return true
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
</pre><p><a href="child.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
