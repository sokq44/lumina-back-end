<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/fs.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./fs.go?s=27189:27229#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">fs.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// HTTP file system request handler</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package http
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;internal/safefilepath&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;mime&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;mime/multipart&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// A Dir implements [FileSystem] using the native file system restricted to a</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// specific directory tree.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// While the [FileSystem.Open] method takes &#39;/&#39;-separated paths, a Dir&#39;s string</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// value is a filename on the native file system, not a URL, so it is separated</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// by [filepath.Separator], which isn&#39;t necessarily &#39;/&#39;.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// Note that Dir could expose sensitive files and directories. Dir will follow</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// symlinks pointing out of the directory tree, which can be especially dangerous</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// if serving from a directory in which users are able to create arbitrary symlinks.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Dir will also allow access to files and directories starting with a period,</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// which could expose sensitive directories like .git or sensitive files like</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// .htpasswd. To exclude files with a leading period, remove the files/directories</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// from the server or create a custom FileSystem implementation.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// An empty Dir is treated as &#34;.&#34;.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type Dir string
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// mapOpenError maps the provided non-nil error from opening name</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// to a possibly better non-nil error. In particular, it turns OS-specific errors</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// about opening files in non-directories into fs.ErrNotExist. See Issues 18984 and 49552.</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func mapOpenError(originalErr error, name string, sep rune, stat func(string) (fs.FileInfo, error)) error {
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if errors.Is(originalErr, fs.ErrNotExist) || errors.Is(originalErr, fs.ErrPermission) {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return originalErr
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	parts := strings.Split(name, string(sep))
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	for i := range parts {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		if parts[i] == &#34;&#34; {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>			continue
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		fi, err := stat(strings.Join(parts[:i+1], string(sep)))
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>		if err != nil {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>			return originalErr
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		if !fi.IsDir() {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>			return fs.ErrNotExist
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	return originalErr
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Open implements [FileSystem] using [os.Open], opening files for reading rooted</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// and relative to the directory d.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>func (d Dir) Open(name string) (File, error) {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	path, err := safefilepath.FromFS(path.Clean(&#34;/&#34; + name))
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if err != nil {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http: invalid or unsafe file path&#34;)
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	dir := string(d)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	if dir == &#34;&#34; {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		dir = &#34;.&#34;
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	fullName := filepath.Join(dir, path)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	f, err := os.Open(fullName)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if err != nil {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		return nil, mapOpenError(err, fullName, filepath.Separator, os.Stat)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	return f, nil
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// A FileSystem implements access to a collection of named files.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// The elements in a file path are separated by slash (&#39;/&#39;, U+002F)</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// characters, regardless of host operating system convention.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// See the [FileServer] function to convert a FileSystem to a [Handler].</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// This interface predates the [fs.FS] interface, which can be used instead:</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// the [FS] adapter function converts an fs.FS to a FileSystem.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>type FileSystem interface {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	Open(name string) (File, error)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// A File is returned by a [FileSystem]&#39;s Open method and can be</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// served by the [FileServer] implementation.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// The methods should behave the same as those on an [*os.File].</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>type File interface {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	io.Closer
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	io.Reader
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	io.Seeker
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	Readdir(count int) ([]fs.FileInfo, error)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	Stat() (fs.FileInfo, error)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>type anyDirs interface {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	len() int
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	name(i int) string
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	isDir(i int) bool
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>type fileInfoDirs []fs.FileInfo
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (d fileInfoDirs) len() int          { return len(d) }
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (d fileInfoDirs) isDir(i int) bool  { return d[i].IsDir() }
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>func (d fileInfoDirs) name(i int) string { return d[i].Name() }
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>type dirEntryDirs []fs.DirEntry
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>func (d dirEntryDirs) len() int          { return len(d) }
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>func (d dirEntryDirs) isDir(i int) bool  { return d[i].IsDir() }
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>func (d dirEntryDirs) name(i int) string { return d[i].Name() }
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>func dirList(w ResponseWriter, r *Request, f File) {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// Prefer to use ReadDir instead of Readdir,</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// because the former doesn&#39;t require calling</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// Stat on every entry of a directory on Unix.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	var dirs anyDirs
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	var err error
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	if d, ok := f.(fs.ReadDirFile); ok {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		var list dirEntryDirs
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		list, err = d.ReadDir(-1)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		dirs = list
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	} else {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		var list fileInfoDirs
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		list, err = f.Readdir(-1)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		dirs = list
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	if err != nil {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		logf(r, &#34;http: error reading directory: %v&#34;, err)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>		Error(w, &#34;Error reading directory&#34;, StatusInternalServerError)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	sort.Slice(dirs, func(i, j int) bool { return dirs.name(i) &lt; dirs.name(j) })
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	w.Header().Set(&#34;Content-Type&#34;, &#34;text/html; charset=utf-8&#34;)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	fmt.Fprintf(w, &#34;&lt;pre&gt;\n&#34;)
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	for i, n := 0, dirs.len(); i &lt; n; i++ {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		name := dirs.name(i)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		if dirs.isDir(i) {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			name += &#34;/&#34;
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		<span class="comment">// name may contain &#39;?&#39; or &#39;#&#39;, which must be escaped to remain</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		<span class="comment">// part of the URL path, and not indicate the start of a query</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		<span class="comment">// string or fragment.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		url := url.URL{Path: name}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		fmt.Fprintf(w, &#34;&lt;a href=\&#34;%s\&#34;&gt;%s&lt;/a&gt;\n&#34;, url.String(), htmlReplacer.Replace(name))
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	fmt.Fprintf(w, &#34;&lt;/pre&gt;\n&#34;)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// ServeContent replies to the request using the content in the</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// provided ReadSeeker. The main benefit of ServeContent over [io.Copy]</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// is that it handles Range requests properly, sets the MIME type, and</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// handles If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since,</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// and If-Range requests.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// If the response&#39;s Content-Type header is not set, ServeContent</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// first tries to deduce the type from name&#39;s file extension and,</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// if that fails, falls back to reading the first block of the content</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// and passing it to [DetectContentType].</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// The name is otherwise unused; in particular it can be empty and is</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// never sent in the response.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// If modtime is not the zero time or Unix epoch, ServeContent</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// includes it in a Last-Modified header in the response. If the</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// request includes an If-Modified-Since header, ServeContent uses</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// modtime to decide whether the content needs to be sent at all.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// The content&#39;s Seek method must work: ServeContent uses</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// a seek to the end of the content to determine its size.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// If the caller has set w&#39;s ETag header formatted per RFC 7232, section 2.3,</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// ServeContent uses it to handle requests using If-Match, If-None-Match, or If-Range.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// Note that [*os.File] implements the [io.ReadSeeker] interface.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker) {
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	sizeFunc := func() (int64, error) {
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		size, err := content.Seek(0, io.SeekEnd)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if err != nil {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			return 0, errSeeker
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		_, err = content.Seek(0, io.SeekStart)
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		if err != nil {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			return 0, errSeeker
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		return size, nil
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	serveContent(w, req, name, modtime, sizeFunc, content)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// errSeeker is returned by ServeContent&#39;s sizeFunc when the content</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// doesn&#39;t seek properly. The underlying Seeker&#39;s error text isn&#39;t</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// included in the sizeFunc reply so it&#39;s not sent over HTTP to end</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// users.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>var errSeeker = errors.New(&#34;seeker can&#39;t seek&#34;)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// errNoOverlap is returned by serveContent&#39;s parseRange if first-byte-pos of</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// all of the byte-range-spec values is greater than the content size.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>var errNoOverlap = errors.New(&#34;invalid range: failed to overlap&#34;)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">// if name is empty, filename is unknown. (used for mime type, before sniffing)</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// if modtime.IsZero(), modtime is unknown.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// content must be seeked to the beginning of the file.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// The sizeFunc is called at most once. Its error, if any, is sent in the HTTP response.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func serveContent(w ResponseWriter, r *Request, name string, modtime time.Time, sizeFunc func() (int64, error), content io.ReadSeeker) {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	setLastModified(w, modtime)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	done, rangeReq := checkPreconditions(w, r, modtime)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if done {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		return
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	code := StatusOK
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// If Content-Type isn&#39;t set, use the file&#39;s extension to find it, but</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// if the Content-Type is unset explicitly, do not sniff the type.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	ctypes, haveType := w.Header()[&#34;Content-Type&#34;]
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	var ctype string
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	if !haveType {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		ctype = mime.TypeByExtension(filepath.Ext(name))
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>		if ctype == &#34;&#34; {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>			<span class="comment">// read a chunk to decide between utf-8 text and binary</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			var buf [sniffLen]byte
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>			n, _ := io.ReadFull(content, buf[:])
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			ctype = DetectContentType(buf[:n])
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			_, err := content.Seek(0, io.SeekStart) <span class="comment">// rewind to output whole file</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			if err != nil {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>				Error(w, &#34;seeker can&#39;t seek&#34;, StatusInternalServerError)
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				return
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Type&#34;, ctype)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	} else if len(ctypes) &gt; 0 {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		ctype = ctypes[0]
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	size, err := sizeFunc()
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	if err != nil {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		Error(w, err.Error(), StatusInternalServerError)
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		return
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	if size &lt; 0 {
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>		<span class="comment">// Should never happen but just to be sure</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		Error(w, &#34;negative content size computed&#34;, StatusInternalServerError)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		return
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">// handle Content-Range header.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	sendSize := size
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	var sendContent io.Reader = content
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	ranges, err := parseRange(rangeReq, size)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	switch err {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	case nil:
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	case errNoOverlap:
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		if size == 0 {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>			<span class="comment">// Some clients add a Range header to all requests to</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			<span class="comment">// limit the size of the response. If the file is empty,</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			<span class="comment">// ignore the range header and respond with a 200 rather</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			<span class="comment">// than a 416.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			ranges = nil
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			break
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Range&#34;, fmt.Sprintf(&#34;bytes */%d&#34;, size))
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		fallthrough
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	default:
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		Error(w, err.Error(), StatusRequestedRangeNotSatisfiable)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		return
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	if sumRangesSize(ranges) &gt; size {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		<span class="comment">// The total number of bytes in all the ranges</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		<span class="comment">// is larger than the size of the file by</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		<span class="comment">// itself, so this is probably an attack, or a</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>		<span class="comment">// dumb client. Ignore the range request.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		ranges = nil
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	switch {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	case len(ranges) == 1:
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		<span class="comment">// RFC 7233, Section 4.1:</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		<span class="comment">// &#34;If a single part is being transferred, the server</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		<span class="comment">// generating the 206 response MUST generate a</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		<span class="comment">// Content-Range header field, describing what range</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// of the selected representation is enclosed, and a</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		<span class="comment">// payload consisting of the range.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		<span class="comment">// ...</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>		<span class="comment">// A server MUST NOT generate a multipart response to</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		<span class="comment">// a request for a single range, since a client that</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		<span class="comment">// does not request multiple parts might not support</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		<span class="comment">// multipart responses.&#34;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		ra := ranges[0]
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		if _, err := content.Seek(ra.start, io.SeekStart); err != nil {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			Error(w, err.Error(), StatusRequestedRangeNotSatisfiable)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>			return
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		sendSize = ra.length
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		code = StatusPartialContent
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Range&#34;, ra.contentRange(size))
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	case len(ranges) &gt; 1:
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		sendSize = rangesMIMESize(ranges, ctype, size)
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		code = StatusPartialContent
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		pr, pw := io.Pipe()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		mw := multipart.NewWriter(pw)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;multipart/byteranges; boundary=&#34;+mw.Boundary())
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		sendContent = pr
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		defer pr.Close() <span class="comment">// cause writing goroutine to fail and exit if CopyN doesn&#39;t finish.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		go func() {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			for _, ra := range ranges {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>				part, err := mw.CreatePart(ra.mimeHeader(ctype, size))
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>				if err != nil {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>					pw.CloseWithError(err)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>					return
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>				}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>				if _, err := content.Seek(ra.start, io.SeekStart); err != nil {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>					pw.CloseWithError(err)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>					return
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>				}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>				if _, err := io.CopyN(part, content, ra.length); err != nil {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>					pw.CloseWithError(err)
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>					return
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>				}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>			}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>			mw.Close()
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			pw.Close()
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		}()
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	w.Header().Set(&#34;Accept-Ranges&#34;, &#34;bytes&#34;)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// We should be able to unconditionally set the Content-Length here.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// However, there is a pattern observed in the wild that this breaks:</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	<span class="comment">// The user wraps the ResponseWriter in one which gzips data written to it,</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	<span class="comment">// and sets &#34;Content-Encoding: gzip&#34;.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">// The user shouldn&#39;t be doing this; the serveContent path here depends</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	<span class="comment">// on serving seekable data with a known length. If you want to compress</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// on the fly, then you shouldn&#39;t be using ServeFile/ServeContent, or</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	<span class="comment">// you should compress the entire file up-front and provide a seekable</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// view of the compressed data.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// However, since we&#39;ve observed this pattern in the wild, and since</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// setting Content-Length here breaks code that mostly-works today,</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// skip setting Content-Length if the user set Content-Encoding.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	<span class="comment">// If this is a range request, always set Content-Length.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	<span class="comment">// If the user isn&#39;t changing the bytes sent in the ResponseWrite,</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	<span class="comment">// the Content-Length will be correct.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	<span class="comment">// If the user is changing the bytes sent, then the range request wasn&#39;t</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	<span class="comment">// going to work properly anyway and we aren&#39;t worse off.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	<span class="comment">// A possible future improvement on this might be to look at the type</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	<span class="comment">// of the ResponseWriter, and always set Content-Length if it&#39;s one</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	<span class="comment">// that we recognize.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if len(ranges) &gt; 0 || w.Header().Get(&#34;Content-Encoding&#34;) == &#34;&#34; {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Length&#34;, strconv.FormatInt(sendSize, 10))
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	w.WriteHeader(code)
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if r.Method != &#34;HEAD&#34; {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		io.CopyN(w, sendContent, sendSize)
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span><span class="comment">// scanETag determines if a syntactically valid ETag is present at s. If so,</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span><span class="comment">// the ETag and remaining text after consuming ETag is returned. Otherwise,</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// it returns &#34;&#34;, &#34;&#34;.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>func scanETag(s string) (etag string, remain string) {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	s = textproto.TrimString(s)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	start := 0
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if strings.HasPrefix(s, &#34;W/&#34;) {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		start = 2
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	if len(s[start:]) &lt; 2 || s[start] != &#39;&#34;&#39; {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	<span class="comment">// ETag is either W/&#34;text&#34; or &#34;text&#34;.</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	<span class="comment">// See RFC 7232 2.3.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	for i := start + 1; i &lt; len(s); i++ {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		c := s[i]
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		switch {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		<span class="comment">// Character values allowed in ETags.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		case c == 0x21 || c &gt;= 0x23 &amp;&amp; c &lt;= 0x7E || c &gt;= 0x80:
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>		case c == &#39;&#34;&#39;:
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			return s[:i+1], s[i+1:]
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		default:
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>			return &#34;&#34;, &#34;&#34;
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		}
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	return &#34;&#34;, &#34;&#34;
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// etagStrongMatch reports whether a and b match using strong ETag comparison.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">// Assumes a and b are valid ETags.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>func etagStrongMatch(a, b string) bool {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	return a == b &amp;&amp; a != &#34;&#34; &amp;&amp; a[0] == &#39;&#34;&#39;
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// etagWeakMatch reports whether a and b match using weak ETag comparison.</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// Assumes a and b are valid ETags.</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>func etagWeakMatch(a, b string) bool {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	return strings.TrimPrefix(a, &#34;W/&#34;) == strings.TrimPrefix(b, &#34;W/&#34;)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// condResult is the result of an HTTP request precondition check.</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// See https://tools.ietf.org/html/rfc7232 section 3.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>type condResult int
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>const (
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	condNone condResult = iota
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	condTrue
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	condFalse
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>)
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>func checkIfMatch(w ResponseWriter, r *Request) condResult {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	im := r.Header.Get(&#34;If-Match&#34;)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	if im == &#34;&#34; {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		return condNone
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	for {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		im = textproto.TrimString(im)
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		if len(im) == 0 {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			break
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		if im[0] == &#39;,&#39; {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>			im = im[1:]
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			continue
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		if im[0] == &#39;*&#39; {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			return condTrue
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		etag, remain := scanETag(im)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		if etag == &#34;&#34; {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>			break
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		if etagStrongMatch(etag, w.Header().get(&#34;Etag&#34;)) {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			return condTrue
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		im = remain
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	}
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	return condFalse
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>func checkIfUnmodifiedSince(r *Request, modtime time.Time) condResult {
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	ius := r.Header.Get(&#34;If-Unmodified-Since&#34;)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	if ius == &#34;&#34; || isZeroTime(modtime) {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		return condNone
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	t, err := ParseTime(ius)
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	if err != nil {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		return condNone
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	<span class="comment">// The Last-Modified header truncates sub-second precision so</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	<span class="comment">// the modtime needs to be truncated too.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	modtime = modtime.Truncate(time.Second)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if ret := modtime.Compare(t); ret &lt;= 0 {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		return condTrue
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	return condFalse
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>func checkIfNoneMatch(w ResponseWriter, r *Request) condResult {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	inm := r.Header.get(&#34;If-None-Match&#34;)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if inm == &#34;&#34; {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return condNone
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	buf := inm
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	for {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		buf = textproto.TrimString(buf)
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		if len(buf) == 0 {
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>			break
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		}
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		if buf[0] == &#39;,&#39; {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			buf = buf[1:]
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>			continue
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		}
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		if buf[0] == &#39;*&#39; {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			return condFalse
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		}
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		etag, remain := scanETag(buf)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if etag == &#34;&#34; {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			break
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		if etagWeakMatch(etag, w.Header().get(&#34;Etag&#34;)) {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			return condFalse
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		buf = remain
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	return condTrue
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>func checkIfModifiedSince(r *Request, modtime time.Time) condResult {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	if r.Method != &#34;GET&#34; &amp;&amp; r.Method != &#34;HEAD&#34; {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		return condNone
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	ims := r.Header.Get(&#34;If-Modified-Since&#34;)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if ims == &#34;&#34; || isZeroTime(modtime) {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		return condNone
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	t, err := ParseTime(ims)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	if err != nil {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		return condNone
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	}
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">// The Last-Modified header truncates sub-second precision so</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// the modtime needs to be truncated too.</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	modtime = modtime.Truncate(time.Second)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	if ret := modtime.Compare(t); ret &lt;= 0 {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		return condFalse
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	}
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	return condTrue
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>func checkIfRange(w ResponseWriter, r *Request, modtime time.Time) condResult {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	if r.Method != &#34;GET&#34; &amp;&amp; r.Method != &#34;HEAD&#34; {
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		return condNone
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	ir := r.Header.get(&#34;If-Range&#34;)
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	if ir == &#34;&#34; {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		return condNone
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	etag, _ := scanETag(ir)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	if etag != &#34;&#34; {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		if etagStrongMatch(etag, w.Header().Get(&#34;Etag&#34;)) {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>			return condTrue
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		} else {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>			return condFalse
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	<span class="comment">// The If-Range value is typically the ETag value, but it may also be</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	<span class="comment">// the modtime date. See golang.org/issue/8367.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	if modtime.IsZero() {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		return condFalse
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	t, err := ParseTime(ir)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	if err != nil {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return condFalse
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if t.Unix() == modtime.Unix() {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		return condTrue
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	}
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	return condFalse
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>var unixEpochTime = time.Unix(0, 0)
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span><span class="comment">// isZeroTime reports whether t is obviously unspecified (either zero or Unix()=0).</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>func isZeroTime(t time.Time) bool {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	return t.IsZero() || t.Equal(unixEpochTime)
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>func setLastModified(w ResponseWriter, modtime time.Time) {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	if !isZeroTime(modtime) {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		w.Header().Set(&#34;Last-Modified&#34;, modtime.UTC().Format(TimeFormat))
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>func writeNotModified(w ResponseWriter) {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	<span class="comment">// RFC 7232 section 4.1:</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	<span class="comment">// a sender SHOULD NOT generate representation metadata other than the</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	<span class="comment">// above listed fields unless said metadata exists for the purpose of</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	<span class="comment">// guiding cache updates (e.g., Last-Modified might be useful if the</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	<span class="comment">// response does not have an ETag field).</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	h := w.Header()
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	delete(h, &#34;Content-Type&#34;)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	delete(h, &#34;Content-Length&#34;)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	delete(h, &#34;Content-Encoding&#34;)
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	if h.Get(&#34;Etag&#34;) != &#34;&#34; {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		delete(h, &#34;Last-Modified&#34;)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	w.WriteHeader(StatusNotModified)
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>}
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// checkPreconditions evaluates request preconditions and reports whether a precondition</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// resulted in sending StatusNotModified or StatusPreconditionFailed.</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>func checkPreconditions(w ResponseWriter, r *Request, modtime time.Time) (done bool, rangeHeader string) {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// This function carefully follows RFC 7232 section 6.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	ch := checkIfMatch(w, r)
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	if ch == condNone {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		ch = checkIfUnmodifiedSince(r, modtime)
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	if ch == condFalse {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		w.WriteHeader(StatusPreconditionFailed)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		return true, &#34;&#34;
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	}
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	switch checkIfNoneMatch(w, r) {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	case condFalse:
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		if r.Method == &#34;GET&#34; || r.Method == &#34;HEAD&#34; {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>			writeNotModified(w)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>			return true, &#34;&#34;
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		} else {
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>			w.WriteHeader(StatusPreconditionFailed)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>			return true, &#34;&#34;
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	case condNone:
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		if checkIfModifiedSince(r, modtime) == condFalse {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>			writeNotModified(w)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>			return true, &#34;&#34;
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		}
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	}
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	rangeHeader = r.Header.get(&#34;Range&#34;)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	if rangeHeader != &#34;&#34; &amp;&amp; checkIfRange(w, r, modtime) == condFalse {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		rangeHeader = &#34;&#34;
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	return false, rangeHeader
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span><span class="comment">// name is &#39;/&#39;-separated, not filepath.Separator.</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>func serveFile(w ResponseWriter, r *Request, fs FileSystem, name string, redirect bool) {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	const indexPage = &#34;/index.html&#34;
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	<span class="comment">// redirect .../index.html to .../</span>
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	<span class="comment">// can&#39;t use Redirect() because that would make the path absolute,</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	<span class="comment">// which would be a problem running under StripPrefix</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	if strings.HasSuffix(r.URL.Path, indexPage) {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		localRedirect(w, r, &#34;./&#34;)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	f, err := fs.Open(name)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	if err != nil {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		msg, code := toHTTPError(err)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		Error(w, msg, code)
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		return
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	defer f.Close()
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>	d, err := f.Stat()
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	if err != nil {
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		msg, code := toHTTPError(err)
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		Error(w, msg, code)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		return
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	if redirect {
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		<span class="comment">// redirect to canonical path: / at end of directory url</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		<span class="comment">// r.URL.Path always begins with /</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		url := r.URL.Path
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if d.IsDir() {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			if url[len(url)-1] != &#39;/&#39; {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>				localRedirect(w, r, path.Base(url)+&#34;/&#34;)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>				return
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>			}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		} else {
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			if url[len(url)-1] == &#39;/&#39; {
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>				localRedirect(w, r, &#34;../&#34;+path.Base(url))
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>				return
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>			}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	if d.IsDir() {
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		url := r.URL.Path
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		<span class="comment">// redirect if the directory name doesn&#39;t end in a slash</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		if url == &#34;&#34; || url[len(url)-1] != &#39;/&#39; {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>			localRedirect(w, r, path.Base(url)+&#34;/&#34;)
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>			return
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		}
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		<span class="comment">// use contents of index.html for directory, if present</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		index := strings.TrimSuffix(name, &#34;/&#34;) + indexPage
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		ff, err := fs.Open(index)
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		if err == nil {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>			defer ff.Close()
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			dd, err := ff.Stat()
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			if err == nil {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>				d = dd
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>				f = ff
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			}
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	<span class="comment">// Still a directory? (we didn&#39;t find an index.html file)</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	if d.IsDir() {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		if checkIfModifiedSince(r, d.ModTime()) == condFalse {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>			writeNotModified(w)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>			return
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		}
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		setLastModified(w, d.ModTime())
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		dirList(w, r, f)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		return
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	<span class="comment">// serveContent will check modification time</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	sizeFunc := func() (int64, error) { return d.Size(), nil }
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	serveContent(w, r, d.Name(), d.ModTime(), sizeFunc, f)
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span><span class="comment">// toHTTPError returns a non-specific HTTP error message and status code</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span><span class="comment">// for a given non-nil error value. It&#39;s important that toHTTPError does not</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span><span class="comment">// actually return err.Error(), since msg and httpStatus are returned to users,</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// and historically Go&#39;s ServeContent always returned just &#34;404 Not Found&#34; for</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">// all errors. We don&#39;t want to start leaking information in error messages.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>func toHTTPError(err error) (msg string, httpStatus int) {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	if errors.Is(err, fs.ErrNotExist) {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		return &#34;404 page not found&#34;, StatusNotFound
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	}
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	if errors.Is(err, fs.ErrPermission) {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		return &#34;403 Forbidden&#34;, StatusForbidden
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	<span class="comment">// Default:</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	return &#34;500 Internal Server Error&#34;, StatusInternalServerError
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span><span class="comment">// localRedirect gives a Moved Permanently response.</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span><span class="comment">// It does not convert relative paths to absolute paths like Redirect does.</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>func localRedirect(w ResponseWriter, r *Request, newPath string) {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	if q := r.URL.RawQuery; q != &#34;&#34; {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		newPath += &#34;?&#34; + q
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	w.Header().Set(&#34;Location&#34;, newPath)
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	w.WriteHeader(StatusMovedPermanently)
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span><span class="comment">// ServeFile replies to the request with the contents of the named</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span><span class="comment">// file or directory.</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// If the provided file or directory name is a relative path, it is</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// interpreted relative to the current directory and may ascend to</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span><span class="comment">// parent directories. If the provided name is constructed from user</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// input, it should be sanitized before calling ServeFile.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// As a precaution, ServeFile will reject requests where r.URL.Path</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">// contains a &#34;..&#34; path element; this protects against callers who</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">// might unsafely use [filepath.Join] on r.URL.Path without sanitizing</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">// it and then use that filepath.Join result as the name argument.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// As another special case, ServeFile redirects any request where r.URL.Path</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">// ends in &#34;/index.html&#34; to the same path, without the final</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// &#34;index.html&#34;. To avoid such redirects either modify the path or</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span><span class="comment">// use [ServeContent].</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span><span class="comment">// Outside of those two special cases, ServeFile does not use</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span><span class="comment">// r.URL.Path for selecting the file or directory to serve; only the</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span><span class="comment">// file or directory provided in the name argument is used.</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>func ServeFile(w ResponseWriter, r *Request, name string) {
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	if containsDotDot(r.URL.Path) {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		<span class="comment">// Too many programs use r.URL.Path to construct the argument to</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>		<span class="comment">// serveFile. Reject the request under the assumption that happened</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		<span class="comment">// here and &#34;..&#34; may not be wanted.</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		<span class="comment">// Note that name might not contain &#34;..&#34;, for example if code (still</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		<span class="comment">// incorrectly) used filepath.Join(myDir, r.URL.Path).</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>		Error(w, &#34;invalid URL path&#34;, StatusBadRequest)
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		return
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	dir, file := filepath.Split(name)
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	serveFile(w, r, Dir(dir), file, false)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span><span class="comment">// ServeFileFS replies to the request with the contents</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span><span class="comment">// of the named file or directory from the file system fsys.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span><span class="comment">// If the provided file or directory name is a relative path, it is</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span><span class="comment">// interpreted relative to the current directory and may ascend to</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span><span class="comment">// parent directories. If the provided name is constructed from user</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span><span class="comment">// input, it should be sanitized before calling [ServeFile].</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span><span class="comment">// As a precaution, ServeFile will reject requests where r.URL.Path</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span><span class="comment">// contains a &#34;..&#34; path element; this protects against callers who</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// might unsafely use [filepath.Join] on r.URL.Path without sanitizing</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span><span class="comment">// it and then use that filepath.Join result as the name argument.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span><span class="comment">// As another special case, ServeFile redirects any request where r.URL.Path</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">// ends in &#34;/index.html&#34; to the same path, without the final</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// &#34;index.html&#34;. To avoid such redirects either modify the path or</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span><span class="comment">// use ServeContent.</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L787" class="ln">   787&nbsp;&nbsp;</span><span class="comment">// Outside of those two special cases, ServeFile does not use</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span><span class="comment">// r.URL.Path for selecting the file or directory to serve; only the</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span><span class="comment">// file or directory provided in the name argument is used.</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>func ServeFileFS(w ResponseWriter, r *Request, fsys fs.FS, name string) {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	if containsDotDot(r.URL.Path) {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>		<span class="comment">// Too many programs use r.URL.Path to construct the argument to</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		<span class="comment">// serveFile. Reject the request under the assumption that happened</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		<span class="comment">// here and &#34;..&#34; may not be wanted.</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		<span class="comment">// Note that name might not contain &#34;..&#34;, for example if code (still</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		<span class="comment">// incorrectly) used filepath.Join(myDir, r.URL.Path).</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		Error(w, &#34;invalid URL path&#34;, StatusBadRequest)
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		return
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	serveFile(w, r, FS(fsys), name, false)
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>func containsDotDot(v string) bool {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	if !strings.Contains(v, &#34;..&#34;) {
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		return false
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	}
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	for _, ent := range strings.FieldsFunc(v, isSlashRune) {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		if ent == &#34;..&#34; {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			return true
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	return false
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>func isSlashRune(r rune) bool { return r == &#39;/&#39; || r == &#39;\\&#39; }
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>type fileHandler struct {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	root FileSystem
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>type ioFS struct {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	fsys fs.FS
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>type ioFile struct {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	file fs.File
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>func (f ioFS) Open(name string) (File, error) {
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	if name == &#34;/&#34; {
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		name = &#34;.&#34;
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	} else {
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		name = strings.TrimPrefix(name, &#34;/&#34;)
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	file, err := f.fsys.Open(name)
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	if err != nil {
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		return nil, mapOpenError(err, name, &#39;/&#39;, func(path string) (fs.FileInfo, error) {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>			return fs.Stat(f.fsys, path)
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>		})
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	}
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	return ioFile{file}, nil
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>func (f ioFile) Close() error               { return f.file.Close() }
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>func (f ioFile) Read(b []byte) (int, error) { return f.file.Read(b) }
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>func (f ioFile) Stat() (fs.FileInfo, error) { return f.file.Stat() }
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>var errMissingSeek = errors.New(&#34;io.File missing Seek method&#34;)
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>var errMissingReadDir = errors.New(&#34;io.File directory missing ReadDir method&#34;)
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>func (f ioFile) Seek(offset int64, whence int) (int64, error) {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	s, ok := f.file.(io.Seeker)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	if !ok {
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>		return 0, errMissingSeek
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	return s.Seek(offset, whence)
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>func (f ioFile) ReadDir(count int) ([]fs.DirEntry, error) {
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	d, ok := f.file.(fs.ReadDirFile)
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	if !ok {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>		return nil, errMissingReadDir
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	}
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	return d.ReadDir(count)
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>func (f ioFile) Readdir(count int) ([]fs.FileInfo, error) {
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	d, ok := f.file.(fs.ReadDirFile)
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	if !ok {
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		return nil, errMissingReadDir
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	var list []fs.FileInfo
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>	for {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>		dirs, err := d.ReadDir(count - len(list))
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		for _, dir := range dirs {
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>			info, err := dir.Info()
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>			if err != nil {
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>				<span class="comment">// Pretend it doesn&#39;t exist, like (*os.File).Readdir does.</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>				continue
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>			}
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>			list = append(list, info)
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>		}
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>		if err != nil {
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>			return list, err
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>		}
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>		if count &lt; 0 || len(list) &gt;= count {
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>			break
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	return list, nil
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span><span class="comment">// FS converts fsys to a [FileSystem] implementation,</span>
<span id="L894" class="ln">   894&nbsp;&nbsp;</span><span class="comment">// for use with [FileServer] and [NewFileTransport].</span>
<span id="L895" class="ln">   895&nbsp;&nbsp;</span><span class="comment">// The files provided by fsys must implement [io.Seeker].</span>
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>func FS(fsys fs.FS) FileSystem {
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	return ioFS{fsys}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>}
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span><span class="comment">// FileServer returns a handler that serves HTTP requests</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span><span class="comment">// with the contents of the file system rooted at root.</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span><span class="comment">// As a special case, the returned file server redirects any request</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span><span class="comment">// ending in &#34;/index.html&#34; to the same path, without the final</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span><span class="comment">// &#34;index.html&#34;.</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">// To use the operating system&#39;s file system implementation,</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// use [http.Dir]:</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">//	http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span><span class="comment">// To use an [fs.FS] implementation, use [http.FileServerFS] instead.</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span><span class="selection">func FileServer(root FileSystem) Handler</span> {
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	return &amp;fileHandler{root}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span><span class="comment">// FileServerFS returns a handler that serves HTTP requests</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span><span class="comment">// with the contents of the file system fsys.</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span><span class="comment">// As a special case, the returned file server redirects any request</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span><span class="comment">// ending in &#34;/index.html&#34; to the same path, without the final</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span><span class="comment">// &#34;index.html&#34;.</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L924" class="ln">   924&nbsp;&nbsp;</span><span class="comment">//	http.Handle(&#34;/&#34;, http.FileServerFS(fsys))</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>func FileServerFS(root fs.FS) Handler {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>	return FileServer(FS(root))
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>func (f *fileHandler) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	upath := r.URL.Path
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	if !strings.HasPrefix(upath, &#34;/&#34;) {
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		upath = &#34;/&#34; + upath
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		r.URL.Path = upath
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	}
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	serveFile(w, r, f.root, path.Clean(upath), true)
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>}
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>
<span id="L938" class="ln">   938&nbsp;&nbsp;</span><span class="comment">// httpRange specifies the byte range to be sent to the client.</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>type httpRange struct {
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	start, length int64
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>}
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>func (r httpRange) contentRange(size int64) string {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;bytes %d-%d/%d&#34;, r.start, r.start+r.length-1, size)
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>func (r httpRange) mimeHeader(contentType string, size int64) textproto.MIMEHeader {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	return textproto.MIMEHeader{
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		&#34;Content-Range&#34;: {r.contentRange(size)},
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		&#34;Content-Type&#34;:  {contentType},
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	}
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// parseRange parses a Range header string as per RFC 7233.</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">// errNoOverlap is returned if none of the ranges overlap.</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>func parseRange(s string, size int64) ([]httpRange, error) {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	if s == &#34;&#34; {
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		return nil, nil <span class="comment">// header not present</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	}
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	const b = &#34;bytes=&#34;
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	if !strings.HasPrefix(s, b) {
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		return nil, errors.New(&#34;invalid range&#34;)
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	}
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	var ranges []httpRange
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	noOverlap := false
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	for _, ra := range strings.Split(s[len(b):], &#34;,&#34;) {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		ra = textproto.TrimString(ra)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		if ra == &#34;&#34; {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			continue
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>		}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>		start, end, ok := strings.Cut(ra, &#34;-&#34;)
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		if !ok {
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>			return nil, errors.New(&#34;invalid range&#34;)
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>		}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>		start, end = textproto.TrimString(start), textproto.TrimString(end)
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		var r httpRange
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		if start == &#34;&#34; {
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>			<span class="comment">// If no start is specified, end specifies the</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>			<span class="comment">// range start relative to the end of the file,</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			<span class="comment">// and we are dealing with &lt;suffix-length&gt;</span>
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>			<span class="comment">// which has to be a non-negative integer as per</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>			<span class="comment">// RFC 7233 Section 2.1 &#34;Byte-Ranges&#34;.</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>			if end == &#34;&#34; || end[0] == &#39;-&#39; {
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>				return nil, errors.New(&#34;invalid range&#34;)
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>			}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>			i, err := strconv.ParseInt(end, 10, 64)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>			if i &lt; 0 || err != nil {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>				return nil, errors.New(&#34;invalid range&#34;)
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>			if i &gt; size {
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>				i = size
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>			}
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>			r.start = size - i
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>			r.length = size - r.start
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		} else {
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>			i, err := strconv.ParseInt(start, 10, 64)
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>			if err != nil || i &lt; 0 {
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>				return nil, errors.New(&#34;invalid range&#34;)
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>			}
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>			if i &gt;= size {
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>				<span class="comment">// If the range begins after the size of the content,</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>				<span class="comment">// then it does not overlap.</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>				noOverlap = true
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>				continue
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>			}
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>			r.start = i
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			if end == &#34;&#34; {
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>				<span class="comment">// If no end is specified, range extends to end of the file.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>				r.length = size - r.start
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>			} else {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>				i, err := strconv.ParseInt(end, 10, 64)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>				if err != nil || r.start &gt; i {
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>					return nil, errors.New(&#34;invalid range&#34;)
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>				}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>				if i &gt;= size {
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>					i = size - 1
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>				}
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>				r.length = i - r.start + 1
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>			}
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		ranges = append(ranges, r)
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	}
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	if noOverlap &amp;&amp; len(ranges) == 0 {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		<span class="comment">// The specified ranges did not overlap with the content.</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		return nil, errNoOverlap
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	return ranges, nil
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span><span class="comment">// countingWriter counts how many bytes have been written to it.</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>type countingWriter int64
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>func (w *countingWriter) Write(p []byte) (n int, err error) {
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	*w += countingWriter(len(p))
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	return len(p), nil
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">// rangesMIMESize returns the number of bytes it takes to encode the</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span><span class="comment">// provided ranges as a multipart response.</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>func rangesMIMESize(ranges []httpRange, contentType string, contentSize int64) (encSize int64) {
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	var w countingWriter
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	mw := multipart.NewWriter(&amp;w)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	for _, ra := range ranges {
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		mw.CreatePart(ra.mimeHeader(contentType, contentSize))
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>		encSize += ra.length
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	}
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	mw.Close()
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	encSize += int64(w)
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	return
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>func sumRangesSize(ranges []httpRange) (size int64) {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	for _, ra := range ranges {
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		size += ra.length
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	}
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	return
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>
</pre><p><a href="fs.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
