<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/h2_bundle.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="h2_bundle.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">h2_bundle.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">//go:build !nethttpomithttp2</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">//   $ bundle -o=h2_bundle.go -prefix=http2 -tags=!nethttpomithttp2 golang.org/x/net/http2</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Package http2 implements the HTTP/2 protocol.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// This package is low-level and intended to be used directly by very</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// few people. Most users will use it indirectly through the automatic</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// use by the net/http package (from Go 1.6 and later).</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// For use in earlier Go versions see ConfigureServer. (Transport support</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// requires Go 1.6 or later)</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// See https://http2.github.io/ for more information on HTTP/2.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// See https://http2.golang.org/ for a test server running this code.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>package http
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>import (
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;compress/gzip&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;crypto/rand&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;encoding/binary&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	&#34;math/bits&#34;
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	mathrand &#34;math/rand&#34;
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	&#34;net/http/httptrace&#34;
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http/httpguts&#34;
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http2/hpack&#34;
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	&#34;golang.org/x/net/idna&#34;
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// The HTTP protocols are defined in terms of ASCII, not Unicode. This file</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// contains helper functions which may use Unicode-aware functions which would</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// otherwise be unsafe and could introduce vulnerabilities if used improperly.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// asciiEqualFold is strings.EqualFold, ASCII only. It reports whether s and t</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// are equal, ASCII-case-insensitively.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>func http2asciiEqualFold(s, t string) bool {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	if len(s) != len(t) {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		return false
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		if http2lower(s[i]) != http2lower(t[i]) {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			return false
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return true
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// lower returns the ASCII lowercase version of b.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func http2lower(b byte) byte {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	if &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		return b + (&#39;a&#39; - &#39;A&#39;)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	return b
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// isASCIIPrint returns whether s is ASCII and printable according to</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// https://tools.ietf.org/html/rfc20#section-4.2.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>func http2isASCIIPrint(s string) bool {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		if s[i] &lt; &#39; &#39; || s[i] &gt; &#39;~&#39; {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>			return false
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return true
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// asciiToLower returns the lowercase version of s if s is ASCII and printable,</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// and whether or not it was.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>func http2asciiToLower(s string) (lower string, ok bool) {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	if !http2isASCIIPrint(s) {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		return &#34;&#34;, false
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	return strings.ToLower(s), true
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// A list of the possible cipher suite ids. Taken from</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// https://www.iana.org/assignments/tls-parameters/tls-parameters.txt</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>const (
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	http2cipher_TLS_NULL_WITH_NULL_NULL               uint16 = 0x0000
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_NULL_MD5                 uint16 = 0x0001
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_NULL_SHA                 uint16 = 0x0002
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5        uint16 = 0x0003
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_RC4_128_MD5              uint16 = 0x0004
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_RC4_128_SHA              uint16 = 0x0005
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5    uint16 = 0x0006
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA             uint16 = 0x0007
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA     uint16 = 0x0008
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_DES_CBC_SHA              uint16 = 0x0009
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA         uint16 = 0x000A
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA  uint16 = 0x000B
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA           uint16 = 0x000C
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA      uint16 = 0x000D
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA  uint16 = 0x000E
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA           uint16 = 0x000F
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA      uint16 = 0x0010
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0011
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA          uint16 = 0x0012
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA     uint16 = 0x0013
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0014
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA          uint16 = 0x0015
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA     uint16 = 0x0016
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5    uint16 = 0x0017
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_RC4_128_MD5          uint16 = 0x0018
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0019
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA          uint16 = 0x001A
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA     uint16 = 0x001B
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// Reserved uint16 =  0x001C-1D</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_DES_CBC_SHA             uint16 = 0x001E
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA        uint16 = 0x001F
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_RC4_128_SHA             uint16 = 0x0020
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA            uint16 = 0x0021
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_DES_CBC_MD5             uint16 = 0x0022
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5        uint16 = 0x0023
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_RC4_128_MD5             uint16 = 0x0024
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5            uint16 = 0x0025
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA   uint16 = 0x0026
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA   uint16 = 0x0027
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA       uint16 = 0x0028
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5   uint16 = 0x0029
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5   uint16 = 0x002A
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5       uint16 = 0x002B
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_NULL_SHA                 uint16 = 0x002C
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA             uint16 = 0x002D
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA             uint16 = 0x002E
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA          uint16 = 0x002F
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA       uint16 = 0x0030
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA       uint16 = 0x0031
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA      uint16 = 0x0032
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA      uint16 = 0x0033
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA      uint16 = 0x0034
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA          uint16 = 0x0035
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA       uint16 = 0x0036
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA       uint16 = 0x0037
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA      uint16 = 0x0038
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA      uint16 = 0x0039
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA      uint16 = 0x003A
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_NULL_SHA256              uint16 = 0x003B
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256       uint16 = 0x003C
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256       uint16 = 0x003D
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256    uint16 = 0x003E
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256    uint16 = 0x003F
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256   uint16 = 0x0040
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA     uint16 = 0x0041
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA  uint16 = 0x0042
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA  uint16 = 0x0043
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0044
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0045
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0046
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// Reserved uint16 =  0x0047-4F</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// Reserved uint16 =  0x0050-58</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// Reserved uint16 =  0x0059-5C</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0x005D-5F</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// Reserved uint16 =  0x0060-66</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0x0067
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256  uint16 = 0x0068
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256  uint16 = 0x0069
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 uint16 = 0x006A
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 uint16 = 0x006B
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256 uint16 = 0x006C
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256 uint16 = 0x006D
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0x006E-83</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA        uint16 = 0x0084
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA     uint16 = 0x0085
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA     uint16 = 0x0086
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA    uint16 = 0x0087
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA    uint16 = 0x0088
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA    uint16 = 0x0089
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_RC4_128_SHA                 uint16 = 0x008A
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA            uint16 = 0x008B
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA             uint16 = 0x008C
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA             uint16 = 0x008D
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA             uint16 = 0x008E
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA        uint16 = 0x008F
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA         uint16 = 0x0090
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA         uint16 = 0x0091
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA             uint16 = 0x0092
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA        uint16 = 0x0093
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA         uint16 = 0x0094
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA         uint16 = 0x0095
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_SEED_CBC_SHA                uint16 = 0x0096
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA             uint16 = 0x0097
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA             uint16 = 0x0098
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA            uint16 = 0x0099
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA            uint16 = 0x009A
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA            uint16 = 0x009B
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256          uint16 = 0x009C
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384          uint16 = 0x009D
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      uint16 = 0x009E
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384      uint16 = 0x009F
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256       uint16 = 0x00A0
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384       uint16 = 0x00A1
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256      uint16 = 0x00A2
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384      uint16 = 0x00A3
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256       uint16 = 0x00A4
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384       uint16 = 0x00A5
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256      uint16 = 0x00A6
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384      uint16 = 0x00A7
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256          uint16 = 0x00A8
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384          uint16 = 0x00A9
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256      uint16 = 0x00AA
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384      uint16 = 0x00AB
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256      uint16 = 0x00AC
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384      uint16 = 0x00AD
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256          uint16 = 0x00AE
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384          uint16 = 0x00AF
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_NULL_SHA256                 uint16 = 0x00B0
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_NULL_SHA384                 uint16 = 0x00B1
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256      uint16 = 0x00B2
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384      uint16 = 0x00B3
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256             uint16 = 0x00B4
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384             uint16 = 0x00B5
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256      uint16 = 0x00B6
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384      uint16 = 0x00B7
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256             uint16 = 0x00B8
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384             uint16 = 0x00B9
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256     uint16 = 0x00BA
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256  uint16 = 0x00BB
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256  uint16 = 0x00BC
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BD
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BE
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BF
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256     uint16 = 0x00C0
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256  uint16 = 0x00C1
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256  uint16 = 0x00C2
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C3
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C4
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C5
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0x00C6-FE</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV uint16 = 0x00FF
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0x01-55,*</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	http2cipher_TLS_FALLBACK_SCSV uint16 = 0x5600
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// Unassigned                                   uint16 = 0x5601 - 0xC000</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA                 uint16 = 0xC001
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA              uint16 = 0xC002
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA         uint16 = 0xC003
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA          uint16 = 0xC004
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA          uint16 = 0xC005
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA                uint16 = 0xC006
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA             uint16 = 0xC007
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA        uint16 = 0xC008
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA         uint16 = 0xC009
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA         uint16 = 0xC00A
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA                   uint16 = 0xC00B
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA                uint16 = 0xC00C
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA           uint16 = 0xC00D
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA            uint16 = 0xC00E
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA            uint16 = 0xC00F
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA                  uint16 = 0xC010
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA               uint16 = 0xC011
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA          uint16 = 0xC012
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA           uint16 = 0xC013
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA           uint16 = 0xC014
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_anon_WITH_NULL_SHA                  uint16 = 0xC015
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA               uint16 = 0xC016
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA          uint16 = 0xC017
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA           uint16 = 0xC018
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA           uint16 = 0xC019
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA            uint16 = 0xC01A
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA        uint16 = 0xC01B
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA        uint16 = 0xC01C
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA             uint16 = 0xC01D
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA         uint16 = 0xC01E
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA         uint16 = 0xC01F
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA             uint16 = 0xC020
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA         uint16 = 0xC021
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA         uint16 = 0xC022
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256      uint16 = 0xC023
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384      uint16 = 0xC024
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256       uint16 = 0xC025
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384       uint16 = 0xC026
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256        uint16 = 0xC027
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384        uint16 = 0xC028
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256         uint16 = 0xC029
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384         uint16 = 0xC02A
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256      uint16 = 0xC02B
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384      uint16 = 0xC02C
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256       uint16 = 0xC02D
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384       uint16 = 0xC02E
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256        uint16 = 0xC02F
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384        uint16 = 0xC030
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256         uint16 = 0xC031
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384         uint16 = 0xC032
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA               uint16 = 0xC033
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA          uint16 = 0xC034
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA           uint16 = 0xC035
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA           uint16 = 0xC036
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256        uint16 = 0xC037
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384        uint16 = 0xC038
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA                  uint16 = 0xC039
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256               uint16 = 0xC03A
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384               uint16 = 0xC03B
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256             uint16 = 0xC03C
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384             uint16 = 0xC03D
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256          uint16 = 0xC03E
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384          uint16 = 0xC03F
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256          uint16 = 0xC040
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384          uint16 = 0xC041
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256         uint16 = 0xC042
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384         uint16 = 0xC043
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256         uint16 = 0xC044
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384         uint16 = 0xC045
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256         uint16 = 0xC046
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384         uint16 = 0xC047
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256     uint16 = 0xC048
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384     uint16 = 0xC049
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256      uint16 = 0xC04A
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384      uint16 = 0xC04B
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256       uint16 = 0xC04C
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384       uint16 = 0xC04D
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256        uint16 = 0xC04E
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384        uint16 = 0xC04F
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256             uint16 = 0xC050
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384             uint16 = 0xC051
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256         uint16 = 0xC052
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384         uint16 = 0xC053
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256          uint16 = 0xC054
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384          uint16 = 0xC055
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256         uint16 = 0xC056
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384         uint16 = 0xC057
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256          uint16 = 0xC058
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384          uint16 = 0xC059
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256         uint16 = 0xC05A
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384         uint16 = 0xC05B
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256     uint16 = 0xC05C
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384     uint16 = 0xC05D
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256      uint16 = 0xC05E
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384      uint16 = 0xC05F
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256       uint16 = 0xC060
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384       uint16 = 0xC061
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256        uint16 = 0xC062
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384        uint16 = 0xC063
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256             uint16 = 0xC064
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384             uint16 = 0xC065
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256         uint16 = 0xC066
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384         uint16 = 0xC067
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256         uint16 = 0xC068
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384         uint16 = 0xC069
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256             uint16 = 0xC06A
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384             uint16 = 0xC06B
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256         uint16 = 0xC06C
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384         uint16 = 0xC06D
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256         uint16 = 0xC06E
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384         uint16 = 0xC06F
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256       uint16 = 0xC070
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384       uint16 = 0xC071
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC072
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC073
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  uint16 = 0xC074
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  uint16 = 0xC075
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   uint16 = 0xC076
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   uint16 = 0xC077
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256    uint16 = 0xC078
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384    uint16 = 0xC079
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256         uint16 = 0xC07A
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384         uint16 = 0xC07B
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     uint16 = 0xC07C
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     uint16 = 0xC07D
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256      uint16 = 0xC07E
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384      uint16 = 0xC07F
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256     uint16 = 0xC080
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384     uint16 = 0xC081
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256      uint16 = 0xC082
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384      uint16 = 0xC083
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256     uint16 = 0xC084
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384     uint16 = 0xC085
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC086
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC087
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  uint16 = 0xC088
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  uint16 = 0xC089
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   uint16 = 0xC08A
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384   uint16 = 0xC08B
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256    uint16 = 0xC08C
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384    uint16 = 0xC08D
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256         uint16 = 0xC08E
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384         uint16 = 0xC08F
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256     uint16 = 0xC090
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384     uint16 = 0xC091
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256     uint16 = 0xC092
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384     uint16 = 0xC093
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256         uint16 = 0xC094
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384         uint16 = 0xC095
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256     uint16 = 0xC096
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384     uint16 = 0xC097
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256     uint16 = 0xC098
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384     uint16 = 0xC099
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   uint16 = 0xC09A
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   uint16 = 0xC09B
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_128_CCM                     uint16 = 0xC09C
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_256_CCM                     uint16 = 0xC09D
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM                 uint16 = 0xC09E
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM                 uint16 = 0xC09F
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_128_CCM_8                   uint16 = 0xC0A0
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_WITH_AES_256_CCM_8                   uint16 = 0xC0A1
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8               uint16 = 0xC0A2
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8               uint16 = 0xC0A3
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_128_CCM                     uint16 = 0xC0A4
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_256_CCM                     uint16 = 0xC0A5
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM                 uint16 = 0xC0A6
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM                 uint16 = 0xC0A7
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_128_CCM_8                   uint16 = 0xC0A8
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_AES_256_CCM_8                   uint16 = 0xC0A9
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8               uint16 = 0xC0AA
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8               uint16 = 0xC0AB
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM             uint16 = 0xC0AC
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM             uint16 = 0xC0AD
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8           uint16 = 0xC0AE
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8           uint16 = 0xC0AF
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0xC0B0-FF</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0xC1-CB,*</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// Unassigned uint16 =  0xCC00-A7</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   uint16 = 0xCCA8
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCA9
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256     uint16 = 0xCCAA
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256         uint16 = 0xCCAB
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256   uint16 = 0xCCAC
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256     uint16 = 0xCCAD
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256     uint16 = 0xCCAE
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// isBadCipher reports whether the cipher is blacklisted by the HTTP/2 spec.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// References:</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">// https://tools.ietf.org/html/rfc7540#appendix-A</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// Reject cipher suites from Appendix A.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// &#34;This list includes those cipher suites that do not</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// offer an ephemeral key exchange and those that are</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// based on the TLS null, stream or block cipher type&#34;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>func http2isBadCipher(cipher uint16) bool {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	switch cipher {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	case http2cipher_TLS_NULL_WITH_NULL_NULL,
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_NULL_MD5,
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_NULL_SHA,
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5,
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_RC4_128_MD5,
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_RC4_128_SHA,
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5,
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA,
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA,
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_DES_CBC_SHA,
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA,
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA,
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA,
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA,
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA,
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA,
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA,
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA,
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5,
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_RC4_128_MD5,
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA,
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA,
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA,
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_DES_CBC_SHA,
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA,
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_RC4_128_SHA,
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA,
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_DES_CBC_MD5,
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5,
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_RC4_128_MD5,
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5,
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA,
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA,
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA,
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5,
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5,
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5,
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_NULL_SHA,
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA,
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA,
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA,
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA,
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA,
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA,
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA,
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA,
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA,
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA,
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_NULL_SHA256,
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256,
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256,
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256,
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256,
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA,
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256,
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256,
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256,
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256,
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA,
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_RC4_128_SHA,
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA,
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA,
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA,
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA,
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA,
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_SEED_CBC_SHA,
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA,
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA,
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA,
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA,
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA,
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256,
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384,
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256,
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384,
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256,
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384,
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256,
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384,
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256,
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384,
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256,
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384,
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_NULL_SHA256,
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_NULL_SHA384,
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256,
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384,
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256,
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384,
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256,
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA,
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA,
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA,
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA,
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA,
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA,
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA,
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_anon_WITH_NULL_SHA,
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA,
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA,
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA,
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA,
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA,
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA,
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA,
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256,
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384,
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256,
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384,
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256,
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384,
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256,
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384,
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256,
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384,
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256,
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384,
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256,
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384,
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256,
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384,
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256,
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384,
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256,
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384,
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256,
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384,
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256,
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384,
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_128_CCM,
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_256_CCM,
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_128_CCM_8,
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		http2cipher_TLS_RSA_WITH_AES_256_CCM_8,
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_128_CCM,
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_256_CCM,
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_128_CCM_8,
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		http2cipher_TLS_PSK_WITH_AES_256_CCM_8:
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		return true
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>	default:
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>		return false
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// ClientConnPool manages a pool of HTTP/2 client connections.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>type http2ClientConnPool interface {
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	<span class="comment">// GetClientConn returns a specific HTTP/2 connection (usually</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	<span class="comment">// a TLS-TCP connection) to an HTTP/2 server. On success, the</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	<span class="comment">// returned ClientConn accounts for the upcoming RoundTrip</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	<span class="comment">// call, so the caller should not omit it. If the caller needs</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	<span class="comment">// to, ClientConn.RoundTrip can be called with a bogus</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	<span class="comment">// new(http.Request) to release the stream reservation.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	GetClientConn(req *Request, addr string) (*http2ClientConn, error)
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	MarkDead(*http2ClientConn)
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>}
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span><span class="comment">// clientConnPoolIdleCloser is the interface implemented by ClientConnPool</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span><span class="comment">// implementations which can close their idle connections.</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>type http2clientConnPoolIdleCloser interface {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	http2ClientConnPool
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	closeIdleConnections()
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>var (
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	_ http2clientConnPoolIdleCloser = (*http2clientConnPool)(nil)
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	_ http2clientConnPoolIdleCloser = http2noDialClientConnPool{}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>)
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// TODO: use singleflight for dialing and addConnCalls?</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>type http2clientConnPool struct {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	t *http2Transport
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	mu sync.Mutex <span class="comment">// TODO: maybe switch to RWMutex</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	<span class="comment">// TODO: add support for sharing conns based on cert names</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	<span class="comment">// (e.g. share conn for googleapis.com and appspot.com)</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	conns        map[string][]*http2ClientConn <span class="comment">// key is host:port</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	dialing      map[string]*http2dialCall     <span class="comment">// currently in-flight dials</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	keys         map[*http2ClientConn][]string
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	addConnCalls map[string]*http2addConnCall <span class="comment">// in-flight addConnIfNeeded calls</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>func (p *http2clientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error) {
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	return p.getClientConn(req, addr, http2dialOnMiss)
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>const (
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	http2dialOnMiss   = true
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	http2noDialOnMiss = false
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>)
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>func (p *http2clientConnPool) getClientConn(req *Request, addr string, dialOnMiss bool) (*http2ClientConn, error) {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>	<span class="comment">// TODO(dneil): Dial a new connection when t.DisableKeepAlives is set?</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	if http2isConnectionCloseRequest(req) &amp;&amp; dialOnMiss {
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		<span class="comment">// It gets its own connection.</span>
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		http2traceGetConn(req, addr)
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		const singleUse = true
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		cc, err := p.t.dialClientConn(req.Context(), addr, singleUse)
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		if err != nil {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			return nil, err
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		return cc, nil
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	for {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		p.mu.Lock()
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		for _, cc := range p.conns[addr] {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>			if cc.ReserveNewRequest() {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>				<span class="comment">// When a connection is presented to us by the net/http package,</span>
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>				<span class="comment">// the GetConn hook has already been called.</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>				<span class="comment">// Don&#39;t call it a second time here.</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>				if !cc.getConnCalled {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>					http2traceGetConn(req, addr)
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>				}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>				cc.getConnCalled = false
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>				p.mu.Unlock()
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>				return cc, nil
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		if !dialOnMiss {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			p.mu.Unlock()
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>			return nil, http2ErrNoCachedConn
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		http2traceGetConn(req, addr)
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		call := p.getStartDialLocked(req.Context(), addr)
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		p.mu.Unlock()
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		&lt;-call.done
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		if http2shouldRetryDial(call, req) {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>			continue
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>		cc, err := call.res, call.err
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>		if err != nil {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>			return nil, err
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		}
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		if cc.ReserveNewRequest() {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			return cc, nil
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		}
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span><span class="comment">// dialCall is an in-flight Transport dial call to a host.</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>type http2dialCall struct {
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	_ http2incomparable
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	p *http2clientConnPool
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	<span class="comment">// the context associated with the request</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	<span class="comment">// that created this dialCall</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	ctx  context.Context
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	done chan struct{}    <span class="comment">// closed when done</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	res  *http2ClientConn <span class="comment">// valid after done is closed</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	err  error            <span class="comment">// valid after done is closed</span>
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span><span class="comment">// requires p.mu is held.</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>func (p *http2clientConnPool) getStartDialLocked(ctx context.Context, addr string) *http2dialCall {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	if call, ok := p.dialing[addr]; ok {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		<span class="comment">// A dial is already in-flight. Don&#39;t start another.</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		return call
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	call := &amp;http2dialCall{p: p, done: make(chan struct{}), ctx: ctx}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	if p.dialing == nil {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		p.dialing = make(map[string]*http2dialCall)
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	}
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	p.dialing[addr] = call
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	go call.dial(call.ctx, addr)
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	return call
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span><span class="comment">// run in its own goroutine.</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>func (c *http2dialCall) dial(ctx context.Context, addr string) {
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	const singleUse = false <span class="comment">// shared conn</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	c.res, c.err = c.p.t.dialClientConn(ctx, addr, singleUse)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	c.p.mu.Lock()
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	delete(c.p.dialing, addr)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	if c.err == nil {
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		c.p.addConnLocked(addr, c.res)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	}
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	c.p.mu.Unlock()
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	close(c.done)
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// addConnIfNeeded makes a NewClientConn out of c if a connection for key doesn&#39;t</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// already exist. It coalesces concurrent calls with the same key.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// This is used by the http1 Transport code when it creates a new connection. Because</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// the http1 Transport doesn&#39;t de-dup TCP dials to outbound hosts (because it doesn&#39;t know</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">// the protocol), it can get into a situation where it has multiple TLS connections.</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span><span class="comment">// This code decides which ones live or die.</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">// The return value used is whether c was used.</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// c is never closed.</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>func (p *http2clientConnPool) addConnIfNeeded(key string, t *http2Transport, c *tls.Conn) (used bool, err error) {
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	for _, cc := range p.conns[key] {
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>		if cc.CanTakeNewRequest() {
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>			p.mu.Unlock()
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>			return false, nil
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	}
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	call, dup := p.addConnCalls[key]
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	if !dup {
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>		if p.addConnCalls == nil {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>			p.addConnCalls = make(map[string]*http2addConnCall)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>		call = &amp;http2addConnCall{
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>			p:    p,
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>			done: make(chan struct{}),
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		}
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		p.addConnCalls[key] = call
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		go call.run(t, key, c)
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	p.mu.Unlock()
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	&lt;-call.done
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	if call.err != nil {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		return false, call.err
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>	}
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	return !dup, nil
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>type http2addConnCall struct {
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	_    http2incomparable
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	p    *http2clientConnPool
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	done chan struct{} <span class="comment">// closed when done</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	err  error
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>}
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>func (c *http2addConnCall) run(t *http2Transport, key string, tc *tls.Conn) {
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	cc, err := t.NewClientConn(tc)
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	p := c.p
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	if err != nil {
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>		c.err = err
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	} else {
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>		cc.getConnCalled = true <span class="comment">// already called by the net/http package</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		p.addConnLocked(key, cc)
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>	}
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	delete(p.addConnCalls, key)
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	p.mu.Unlock()
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	close(c.done)
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span><span class="comment">// p.mu must be held</span>
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>func (p *http2clientConnPool) addConnLocked(key string, cc *http2ClientConn) {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	for _, v := range p.conns[key] {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>		if v == cc {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>			return
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		}
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>	if p.conns == nil {
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>		p.conns = make(map[string][]*http2ClientConn)
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	if p.keys == nil {
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		p.keys = make(map[*http2ClientConn][]string)
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	}
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>	p.conns[key] = append(p.conns[key], cc)
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>	p.keys[cc] = append(p.keys[cc], key)
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>}
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>func (p *http2clientConnPool) MarkDead(cc *http2ClientConn) {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>	for _, key := range p.keys[cc] {
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		vv, ok := p.conns[key]
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>		if !ok {
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>			continue
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		}
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		newList := http2filterOutClientConn(vv, cc)
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		if len(newList) &gt; 0 {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>			p.conns[key] = newList
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		} else {
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>			delete(p.conns, key)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		}
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	}
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>	delete(p.keys, cc)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>}
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>func (p *http2clientConnPool) closeIdleConnections() {
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>	<span class="comment">// TODO: don&#39;t close a cc if it was just added to the pool</span>
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	<span class="comment">// milliseconds ago and has never been used. There&#39;s currently</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	<span class="comment">// a small race window with the HTTP/1 Transport&#39;s integration</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>	<span class="comment">// where it can add an idle conn just before using it, and</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	<span class="comment">// somebody else can concurrently call CloseIdleConns and</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	<span class="comment">// break some caller&#39;s RoundTrip.</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	for _, vv := range p.conns {
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>		for _, cc := range vv {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>			cc.closeIfIdle()
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	}
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>}
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>func http2filterOutClientConn(in []*http2ClientConn, exclude *http2ClientConn) []*http2ClientConn {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	out := in[:0]
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	for _, v := range in {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		if v != exclude {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>			out = append(out, v)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	<span class="comment">// If we filtered it out, zero out the last item to prevent</span>
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	<span class="comment">// the GC from seeing it.</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	if len(in) != len(out) {
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		in[len(in)-1] = nil
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	}
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	return out
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span><span class="comment">// noDialClientConnPool is an implementation of http2.ClientConnPool</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span><span class="comment">// which never dials. We let the HTTP/1.1 client dial and use its TLS</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span><span class="comment">// connection instead.</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>type http2noDialClientConnPool struct{ *http2clientConnPool }
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>func (p http2noDialClientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error) {
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	return p.getClientConn(req, addr, http2noDialOnMiss)
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// shouldRetryDial reports whether the current request should</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span><span class="comment">// retry dialing after the call finished unsuccessfully, for example</span>
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span><span class="comment">// if the dial was canceled because of a context cancellation or</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span><span class="comment">// deadline expiry.</span>
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>func http2shouldRetryDial(call *http2dialCall, req *Request) bool {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	if call.err == nil {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>		<span class="comment">// No error, no need to retry</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>		return false
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	}
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>	if call.ctx == req.Context() {
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		<span class="comment">// If the call has the same context as the request, the dial</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>		<span class="comment">// should not be retried, since any cancellation will have come</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>		<span class="comment">// from this request.</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>		return false
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	}
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	if !errors.Is(call.err, context.Canceled) &amp;&amp; !errors.Is(call.err, context.DeadlineExceeded) {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		<span class="comment">// If the call error is not because of a context cancellation or a deadline expiry,</span>
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>		<span class="comment">// the dial should not be retried.</span>
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		return false
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	<span class="comment">// Only retry if the error is a context cancellation error or deadline expiry</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	<span class="comment">// and the context associated with the call was canceled or expired.</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	return call.ctx.Err() != nil
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span><span class="comment">// Buffer chunks are allocated from a pool to reduce pressure on GC.</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">// The maximum wasted space per dataBuffer is 2x the largest size class,</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">// which happens when the dataBuffer has multiple chunks and there is</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">// one unread byte in both the first and last chunks. We use a few size</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">// classes to minimize overheads for servers that typically receive very</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span><span class="comment">// small request bodies.</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span><span class="comment">// TODO: Benchmark to determine if the pools are necessary. The GC may have</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span><span class="comment">// improved enough that we can instead allocate chunks like this:</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">// make([]byte, max(16&lt;&lt;10, expectedBytesRemaining))</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>var http2dataChunkPools = [...]sync.Pool{
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	{New: func() interface{} { return new([1 &lt;&lt; 10]byte) }},
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	{New: func() interface{} { return new([2 &lt;&lt; 10]byte) }},
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	{New: func() interface{} { return new([4 &lt;&lt; 10]byte) }},
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	{New: func() interface{} { return new([8 &lt;&lt; 10]byte) }},
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	{New: func() interface{} { return new([16 &lt;&lt; 10]byte) }},
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>func http2getDataBufferChunk(size int64) []byte {
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	switch {
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	case size &lt;= 1&lt;&lt;10:
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>		return http2dataChunkPools[0].Get().(*[1 &lt;&lt; 10]byte)[:]
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	case size &lt;= 2&lt;&lt;10:
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		return http2dataChunkPools[1].Get().(*[2 &lt;&lt; 10]byte)[:]
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	case size &lt;= 4&lt;&lt;10:
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		return http2dataChunkPools[2].Get().(*[4 &lt;&lt; 10]byte)[:]
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	case size &lt;= 8&lt;&lt;10:
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		return http2dataChunkPools[3].Get().(*[8 &lt;&lt; 10]byte)[:]
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	default:
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		return http2dataChunkPools[4].Get().(*[16 &lt;&lt; 10]byte)[:]
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>	}
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>func http2putDataBufferChunk(p []byte) {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	switch len(p) {
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	case 1 &lt;&lt; 10:
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>		http2dataChunkPools[0].Put((*[1 &lt;&lt; 10]byte)(p))
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	case 2 &lt;&lt; 10:
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>		http2dataChunkPools[1].Put((*[2 &lt;&lt; 10]byte)(p))
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	case 4 &lt;&lt; 10:
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		http2dataChunkPools[2].Put((*[4 &lt;&lt; 10]byte)(p))
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	case 8 &lt;&lt; 10:
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		http2dataChunkPools[3].Put((*[8 &lt;&lt; 10]byte)(p))
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	case 16 &lt;&lt; 10:
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		http2dataChunkPools[4].Put((*[16 &lt;&lt; 10]byte)(p))
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	default:
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unexpected buffer len=%v&#34;, len(p)))
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	}
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span><span class="comment">// dataBuffer is an io.ReadWriter backed by a list of data chunks.</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span><span class="comment">// Each dataBuffer is used to read DATA frames on a single stream.</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span><span class="comment">// The buffer is divided into chunks so the server can limit the</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span><span class="comment">// total memory used by a single connection without limiting the</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span><span class="comment">// request body size on any single stream.</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>type http2dataBuffer struct {
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	chunks   [][]byte
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	r        int   <span class="comment">// next byte to read is chunks[0][r]</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>	w        int   <span class="comment">// next byte to write is chunks[len(chunks)-1][w]</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	size     int   <span class="comment">// total buffered bytes</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	expected int64 <span class="comment">// we expect at least this many bytes in future Write calls (ignored if &lt;= 0)</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>}
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>var http2errReadEmpty = errors.New(&#34;read from empty dataBuffer&#34;)
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span><span class="comment">// Read copies bytes from the buffer into p.</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span><span class="comment">// It is an error to read when no data is available.</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>func (b *http2dataBuffer) Read(p []byte) (int, error) {
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	if b.size == 0 {
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>		return 0, http2errReadEmpty
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	var ntotal int
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	for len(p) &gt; 0 &amp;&amp; b.size &gt; 0 {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		readFrom := b.bytesFromFirstChunk()
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>		n := copy(p, readFrom)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>		p = p[n:]
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>		ntotal += n
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		b.r += n
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		b.size -= n
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		<span class="comment">// If the first chunk has been consumed, advance to the next chunk.</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>		if b.r == len(b.chunks[0]) {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>			http2putDataBufferChunk(b.chunks[0])
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>			end := len(b.chunks) - 1
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>			copy(b.chunks[:end], b.chunks[1:])
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>			b.chunks[end] = nil
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>			b.chunks = b.chunks[:end]
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>			b.r = 0
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		}
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	return ntotal, nil
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>func (b *http2dataBuffer) bytesFromFirstChunk() []byte {
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	if len(b.chunks) == 1 {
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		return b.chunks[0][b.r:b.w]
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>	}
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	return b.chunks[0][b.r:]
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span><span class="comment">// Len returns the number of bytes of the unread portion of the buffer.</span>
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>func (b *http2dataBuffer) Len() int {
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	return b.size
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>}
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span><span class="comment">// Write appends p to the buffer.</span>
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>func (b *http2dataBuffer) Write(p []byte) (int, error) {
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	ntotal := len(p)
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	for len(p) &gt; 0 {
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		<span class="comment">// If the last chunk is empty, allocate a new chunk. Try to allocate</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		<span class="comment">// enough to fully copy p plus any additional bytes we expect to</span>
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		<span class="comment">// receive. However, this may allocate less than len(p).</span>
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>		want := int64(len(p))
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		if b.expected &gt; want {
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>			want = b.expected
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		}
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>		chunk := b.lastChunkOrAlloc(want)
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		n := copy(chunk[b.w:], p)
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>		p = p[n:]
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		b.w += n
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		b.size += n
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>		b.expected -= int64(n)
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	}
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	return ntotal, nil
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>}
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>func (b *http2dataBuffer) lastChunkOrAlloc(want int64) []byte {
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	if len(b.chunks) != 0 {
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>		last := b.chunks[len(b.chunks)-1]
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>		if b.w &lt; len(last) {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>			return last
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>		}
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>	}
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	chunk := http2getDataBufferChunk(want)
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>	b.chunks = append(b.chunks, chunk)
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>	b.w = 0
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	return chunk
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>}
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span><span class="comment">// An ErrCode is an unsigned 32-bit error code as defined in the HTTP/2 spec.</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>type http2ErrCode uint32
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>const (
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	http2ErrCodeNo                 http2ErrCode = 0x0
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	http2ErrCodeProtocol           http2ErrCode = 0x1
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	http2ErrCodeInternal           http2ErrCode = 0x2
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	http2ErrCodeFlowControl        http2ErrCode = 0x3
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	http2ErrCodeSettingsTimeout    http2ErrCode = 0x4
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>	http2ErrCodeStreamClosed       http2ErrCode = 0x5
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	http2ErrCodeFrameSize          http2ErrCode = 0x6
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>	http2ErrCodeRefusedStream      http2ErrCode = 0x7
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	http2ErrCodeCancel             http2ErrCode = 0x8
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>	http2ErrCodeCompression        http2ErrCode = 0x9
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	http2ErrCodeConnect            http2ErrCode = 0xa
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>	http2ErrCodeEnhanceYourCalm    http2ErrCode = 0xb
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>	http2ErrCodeInadequateSecurity http2ErrCode = 0xc
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	http2ErrCodeHTTP11Required     http2ErrCode = 0xd
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>)
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>var http2errCodeName = map[http2ErrCode]string{
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	http2ErrCodeNo:                 &#34;NO_ERROR&#34;,
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	http2ErrCodeProtocol:           &#34;PROTOCOL_ERROR&#34;,
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>	http2ErrCodeInternal:           &#34;INTERNAL_ERROR&#34;,
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	http2ErrCodeFlowControl:        &#34;FLOW_CONTROL_ERROR&#34;,
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	http2ErrCodeSettingsTimeout:    &#34;SETTINGS_TIMEOUT&#34;,
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	http2ErrCodeStreamClosed:       &#34;STREAM_CLOSED&#34;,
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	http2ErrCodeFrameSize:          &#34;FRAME_SIZE_ERROR&#34;,
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	http2ErrCodeRefusedStream:      &#34;REFUSED_STREAM&#34;,
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>	http2ErrCodeCancel:             &#34;CANCEL&#34;,
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	http2ErrCodeCompression:        &#34;COMPRESSION_ERROR&#34;,
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	http2ErrCodeConnect:            &#34;CONNECT_ERROR&#34;,
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	http2ErrCodeEnhanceYourCalm:    &#34;ENHANCE_YOUR_CALM&#34;,
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	http2ErrCodeInadequateSecurity: &#34;INADEQUATE_SECURITY&#34;,
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	http2ErrCodeHTTP11Required:     &#34;HTTP_1_1_REQUIRED&#34;,
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>func (e http2ErrCode) String() string {
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	if s, ok := http2errCodeName[e]; ok {
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>		return s
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>	}
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;unknown error code 0x%x&#34;, uint32(e))
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>}
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>func (e http2ErrCode) stringToken() string {
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	if s, ok := http2errCodeName[e]; ok {
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>		return s
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	}
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;ERR_UNKNOWN_%d&#34;, uint32(e))
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>}
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span><span class="comment">// ConnectionError is an error that results in the termination of the</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span><span class="comment">// entire connection.</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>type http2ConnectionError http2ErrCode
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>func (e http2ConnectionError) Error() string {
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;connection error: %s&#34;, http2ErrCode(e))
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>}
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span><span class="comment">// StreamError is an error that only affects one stream within an</span>
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span><span class="comment">// HTTP/2 connection.</span>
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>type http2StreamError struct {
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	StreamID uint32
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	Code     http2ErrCode
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	Cause    error <span class="comment">// optional additional detail</span>
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>}
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span><span class="comment">// errFromPeer is a sentinel error value for StreamError.Cause to</span>
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span><span class="comment">// indicate that the StreamError was sent from the peer over the wire</span>
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span><span class="comment">// and wasn&#39;t locally generated in the Transport.</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>var http2errFromPeer = errors.New(&#34;received from peer&#34;)
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>func http2streamError(id uint32, code http2ErrCode) http2StreamError {
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>	return http2StreamError{StreamID: id, Code: code}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>}
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>func (e http2StreamError) Error() string {
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>	if e.Cause != nil {
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>		return fmt.Sprintf(&#34;stream error: stream ID %d; %v; %v&#34;, e.StreamID, e.Code, e.Cause)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>	}
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;stream error: stream ID %d; %v&#34;, e.StreamID, e.Code)
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>}
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span><span class="comment">// 6.9.1 The Flow Control Window</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span><span class="comment">// &#34;If a sender receives a WINDOW_UPDATE that causes a flow control</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span><span class="comment">// window to exceed this maximum it MUST terminate either the stream</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// or the connection, as appropriate. For streams, [...]; for the</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span><span class="comment">// connection, a GOAWAY frame with a FLOW_CONTROL_ERROR code.&#34;</span>
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>type http2goAwayFlowError struct{}
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>func (http2goAwayFlowError) Error() string { return &#34;connection exceeded flow control window size&#34; }
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span><span class="comment">// connError represents an HTTP/2 ConnectionError error code, along</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span><span class="comment">// with a string (for debugging) explaining why.</span>
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span><span class="comment">// Errors of this type are only returned by the frame parser functions</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span><span class="comment">// and converted into ConnectionError(Code), after stashing away</span>
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span><span class="comment">// the Reason into the Framer&#39;s errDetail field, accessible via</span>
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span><span class="comment">// the (*Framer).ErrorDetail method.</span>
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>type http2connError struct {
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	Code   http2ErrCode <span class="comment">// the ConnectionError error code</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	Reason string       <span class="comment">// additional reason</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>}
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>func (e http2connError) Error() string {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;http2: connection error: %v: %v&#34;, e.Code, e.Reason)
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>type http2pseudoHeaderError string
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>func (e http2pseudoHeaderError) Error() string {
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;invalid pseudo-header %q&#34;, string(e))
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>}
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>type http2duplicatePseudoHeaderError string
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>func (e http2duplicatePseudoHeaderError) Error() string {
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;duplicate pseudo-header %q&#34;, string(e))
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>}
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>type http2headerFieldNameError string
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>func (e http2headerFieldNameError) Error() string {
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;invalid header field name %q&#34;, string(e))
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>}
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>type http2headerFieldValueError string
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>func (e http2headerFieldValueError) Error() string {
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;invalid header field value for %q&#34;, string(e))
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>}
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>var (
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	http2errMixPseudoHeaderTypes = errors.New(&#34;mix of request and response pseudo headers&#34;)
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	http2errPseudoAfterRegular   = errors.New(&#34;pseudo header field after regular&#34;)
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>)
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span><span class="comment">// inflowMinRefresh is the minimum number of bytes we&#39;ll send for a</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span><span class="comment">// flow control window update.</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>const http2inflowMinRefresh = 4 &lt;&lt; 10
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span><span class="comment">// inflow accounts for an inbound flow control window.</span>
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span><span class="comment">// It tracks both the latest window sent to the peer (used for enforcement)</span>
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span><span class="comment">// and the accumulated unsent window.</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>type http2inflow struct {
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	avail  int32
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	unsent int32
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>}
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span><span class="comment">// init sets the initial window.</span>
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>func (f *http2inflow) init(n int32) {
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	f.avail = n
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>}
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span><span class="comment">// add adds n bytes to the window, with a maximum window size of max,</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span><span class="comment">// indicating that the peer can now send us more data.</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span><span class="comment">// For example, the user read from a {Request,Response} body and consumed</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span><span class="comment">// some of the buffered data, so the peer can now send more.</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span><span class="comment">// It returns the number of bytes to send in a WINDOW_UPDATE frame to the peer.</span>
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span><span class="comment">// Window updates are accumulated and sent when the unsent capacity</span>
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span><span class="comment">// is at least inflowMinRefresh or will at least double the peer&#39;s available window.</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>func (f *http2inflow) add(n int) (connAdd int32) {
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>		panic(&#34;negative update&#34;)
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>	}
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>	unsent := int64(f.unsent) + int64(n)
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>	<span class="comment">// &#34;A sender MUST NOT allow a flow-control window to exceed 2^31-1 octets.&#34;</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>	<span class="comment">// RFC 7540 Section 6.9.1.</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	const maxWindow = 1&lt;&lt;31 - 1
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	if unsent+int64(f.avail) &gt; maxWindow {
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>		panic(&#34;flow control update exceeds maximum window size&#34;)
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	}
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>	f.unsent = int32(unsent)
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	if f.unsent &lt; http2inflowMinRefresh &amp;&amp; f.unsent &lt; f.avail {
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>		<span class="comment">// If there aren&#39;t at least inflowMinRefresh bytes of window to send,</span>
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>		<span class="comment">// and this update won&#39;t at least double the window, buffer the update for later.</span>
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>		return 0
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>	}
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>	f.avail += f.unsent
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	f.unsent = 0
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	return int32(unsent)
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>}
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span><span class="comment">// take attempts to take n bytes from the peer&#39;s flow control window.</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span><span class="comment">// It reports whether the window has available capacity.</span>
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>func (f *http2inflow) take(n uint32) bool {
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>	if n &gt; uint32(f.avail) {
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>		return false
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>	}
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	f.avail -= int32(n)
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	return true
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>}
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span><span class="comment">// takeInflows attempts to take n bytes from two inflows,</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span><span class="comment">// typically connection-level and stream-level flows.</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span><span class="comment">// It reports whether both windows have available capacity.</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>func http2takeInflows(f1, f2 *http2inflow, n uint32) bool {
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	if n &gt; uint32(f1.avail) || n &gt; uint32(f2.avail) {
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>		return false
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	}
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	f1.avail -= int32(n)
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	f2.avail -= int32(n)
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>	return true
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>}
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span><span class="comment">// outflow is the outbound flow control window&#39;s size.</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>type http2outflow struct {
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	_ http2incomparable
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	<span class="comment">// n is the number of DATA bytes we&#39;re allowed to send.</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	<span class="comment">// An outflow is kept both on a conn and a per-stream.</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	n int32
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>	<span class="comment">// conn points to the shared connection-level outflow that is</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	<span class="comment">// shared by all streams on that conn. It is nil for the outflow</span>
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>	<span class="comment">// that&#39;s on the conn directly.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>	conn *http2outflow
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>}
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>func (f *http2outflow) setConnFlow(cf *http2outflow) { f.conn = cf }
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>func (f *http2outflow) available() int32 {
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>	n := f.n
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>	if f.conn != nil &amp;&amp; f.conn.n &lt; n {
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>		n = f.conn.n
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>	}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>	return n
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>}
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>func (f *http2outflow) take(n int32) {
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>	if n &gt; f.available() {
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>		panic(&#34;internal error: took too much&#34;)
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>	}
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	f.n -= n
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>	if f.conn != nil {
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>		f.conn.n -= n
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>	}
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>}
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span><span class="comment">// add adds n bytes (positive or negative) to the flow control window.</span>
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span><span class="comment">// It returns false if the sum would exceed 2^31-1.</span>
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>func (f *http2outflow) add(n int32) bool {
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>	sum := f.n + n
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	if (sum &gt; n) == (f.n &gt; 0) {
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>		f.n = sum
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		return true
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>	}
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>	return false
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>}
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>const http2frameHeaderLen = 9
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>var http2padZeros = make([]byte, 255) <span class="comment">// zeros for padding</span>
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span><span class="comment">// A FrameType is a registered frame type as defined in</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span><span class="comment">// https://httpwg.org/specs/rfc7540.html#rfc.section.11.2</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>type http2FrameType uint8
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>const (
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	http2FrameData         http2FrameType = 0x0
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>	http2FrameHeaders      http2FrameType = 0x1
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	http2FramePriority     http2FrameType = 0x2
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	http2FrameRSTStream    http2FrameType = 0x3
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>	http2FrameSettings     http2FrameType = 0x4
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>	http2FramePushPromise  http2FrameType = 0x5
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>	http2FramePing         http2FrameType = 0x6
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>	http2FrameGoAway       http2FrameType = 0x7
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span>	http2FrameWindowUpdate http2FrameType = 0x8
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>	http2FrameContinuation http2FrameType = 0x9
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>)
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>var http2frameName = map[http2FrameType]string{
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>	http2FrameData:         &#34;DATA&#34;,
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	http2FrameHeaders:      &#34;HEADERS&#34;,
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>	http2FramePriority:     &#34;PRIORITY&#34;,
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>	http2FrameRSTStream:    &#34;RST_STREAM&#34;,
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>	http2FrameSettings:     &#34;SETTINGS&#34;,
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>	http2FramePushPromise:  &#34;PUSH_PROMISE&#34;,
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>	http2FramePing:         &#34;PING&#34;,
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>	http2FrameGoAway:       &#34;GOAWAY&#34;,
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	http2FrameWindowUpdate: &#34;WINDOW_UPDATE&#34;,
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>	http2FrameContinuation: &#34;CONTINUATION&#34;,
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>}
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>func (t http2FrameType) String() string {
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>	if s, ok := http2frameName[t]; ok {
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>		return s
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>	}
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;UNKNOWN_FRAME_TYPE_%d&#34;, uint8(t))
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>}
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span><span class="comment">// Flags is a bitmask of HTTP/2 flags.</span>
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span><span class="comment">// The meaning of flags varies depending on the frame type.</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>type http2Flags uint8
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span><span class="comment">// Has reports whether f contains all (0 or more) flags in v.</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>func (f http2Flags) Has(v http2Flags) bool {
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	return (f &amp; v) == v
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>}
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span><span class="comment">// Frame-specific FrameHeader flag bits.</span>
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>const (
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>	<span class="comment">// Data Frame</span>
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>	http2FlagDataEndStream http2Flags = 0x1
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>	http2FlagDataPadded    http2Flags = 0x8
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	<span class="comment">// Headers Frame</span>
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>	http2FlagHeadersEndStream  http2Flags = 0x1
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>	http2FlagHeadersEndHeaders http2Flags = 0x4
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>	http2FlagHeadersPadded     http2Flags = 0x8
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>	http2FlagHeadersPriority   http2Flags = 0x20
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>	<span class="comment">// Settings Frame</span>
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>	http2FlagSettingsAck http2Flags = 0x1
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>	<span class="comment">// Ping Frame</span>
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>	http2FlagPingAck http2Flags = 0x1
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	<span class="comment">// Continuation Frame</span>
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>	http2FlagContinuationEndHeaders http2Flags = 0x4
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>	http2FlagPushPromiseEndHeaders http2Flags = 0x4
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>	http2FlagPushPromisePadded     http2Flags = 0x8
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>)
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>var http2flagName = map[http2FrameType]map[http2Flags]string{
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>	http2FrameData: {
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>		http2FlagDataEndStream: &#34;END_STREAM&#34;,
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>		http2FlagDataPadded:    &#34;PADDED&#34;,
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>	},
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>	http2FrameHeaders: {
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>		http2FlagHeadersEndStream:  &#34;END_STREAM&#34;,
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>		http2FlagHeadersEndHeaders: &#34;END_HEADERS&#34;,
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>		http2FlagHeadersPadded:     &#34;PADDED&#34;,
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>		http2FlagHeadersPriority:   &#34;PRIORITY&#34;,
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	},
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>	http2FrameSettings: {
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>		http2FlagSettingsAck: &#34;ACK&#34;,
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>	},
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	http2FramePing: {
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>		http2FlagPingAck: &#34;ACK&#34;,
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>	},
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	http2FrameContinuation: {
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>		http2FlagContinuationEndHeaders: &#34;END_HEADERS&#34;,
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>	},
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>	http2FramePushPromise: {
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>		http2FlagPushPromiseEndHeaders: &#34;END_HEADERS&#34;,
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>		http2FlagPushPromisePadded:     &#34;PADDED&#34;,
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>	},
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>}
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span><span class="comment">// a frameParser parses a frame given its FrameHeader and payload</span>
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span><span class="comment">// bytes. The length of payload will always equal fh.Length (which</span>
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span><span class="comment">// might be 0).</span>
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>type http2frameParser func(fc *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error)
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>var http2frameParsers = map[http2FrameType]http2frameParser{
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>	http2FrameData:         http2parseDataFrame,
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>	http2FrameHeaders:      http2parseHeadersFrame,
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>	http2FramePriority:     http2parsePriorityFrame,
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>	http2FrameRSTStream:    http2parseRSTStreamFrame,
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>	http2FrameSettings:     http2parseSettingsFrame,
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>	http2FramePushPromise:  http2parsePushPromise,
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>	http2FramePing:         http2parsePingFrame,
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>	http2FrameGoAway:       http2parseGoAwayFrame,
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>	http2FrameWindowUpdate: http2parseWindowUpdateFrame,
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>	http2FrameContinuation: http2parseContinuationFrame,
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>}
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>func http2typeFrameParser(t http2FrameType) http2frameParser {
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>	if f := http2frameParsers[t]; f != nil {
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>		return f
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>	}
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	return http2parseUnknownFrame
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>}
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span><span class="comment">// A FrameHeader is the 9 byte header of all HTTP/2 frames.</span>
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#FrameHeader</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>type http2FrameHeader struct {
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>	valid bool <span class="comment">// caller can access []byte fields in the Frame</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>	<span class="comment">// Type is the 1 byte frame type. There are ten standard frame</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>	<span class="comment">// types, but extension frame types may be written by WriteRawFrame</span>
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>	<span class="comment">// and will be returned by ReadFrame (as UnknownFrame).</span>
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>	Type http2FrameType
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>	<span class="comment">// Flags are the 1 byte of 8 potential bit flags per frame.</span>
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>	<span class="comment">// They are specific to the frame type.</span>
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>	Flags http2Flags
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>	<span class="comment">// Length is the length of the frame, not including the 9 byte header.</span>
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>	<span class="comment">// The maximum size is one byte less than 16MB (uint24), but only</span>
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>	<span class="comment">// frames up to 16KB are allowed without peer agreement.</span>
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>	Length uint32
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>	<span class="comment">// StreamID is which stream this frame is for. Certain frames</span>
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	<span class="comment">// are not stream-specific, in which case this field is 0.</span>
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>	StreamID uint32
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>}
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span><span class="comment">// Header returns h. It exists so FrameHeaders can be embedded in other</span>
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span><span class="comment">// specific frame types and implement the Frame interface.</span>
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>func (h http2FrameHeader) Header() http2FrameHeader { return h }
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>func (h http2FrameHeader) String() string {
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>	buf.WriteString(&#34;[FrameHeader &#34;)
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>	h.writeDebug(&amp;buf)
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span>	buf.WriteByte(&#39;]&#39;)
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>	return buf.String()
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>}
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>func (h http2FrameHeader) writeDebug(buf *bytes.Buffer) {
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>	buf.WriteString(h.Type.String())
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>	if h.Flags != 0 {
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>		buf.WriteString(&#34; flags=&#34;)
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>		set := 0
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span>		for i := uint8(0); i &lt; 8; i++ {
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span>			if h.Flags&amp;(1&lt;&lt;i) == 0 {
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span>				continue
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span>			}
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span>			set++
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>			if set &gt; 1 {
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>				buf.WriteByte(&#39;|&#39;)
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>			}
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>			name := http2flagName[h.Type][http2Flags(1&lt;&lt;i)]
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>			if name != &#34;&#34; {
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>				buf.WriteString(name)
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>			} else {
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>				fmt.Fprintf(buf, &#34;0x%x&#34;, 1&lt;&lt;i)
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>			}
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>		}
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>	}
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>	if h.StreamID != 0 {
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>		fmt.Fprintf(buf, &#34; stream=%d&#34;, h.StreamID)
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>	}
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>	fmt.Fprintf(buf, &#34; len=%d&#34;, h.Length)
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>}
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>func (h *http2FrameHeader) checkValid() {
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>	if !h.valid {
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>		panic(&#34;Frame accessor called on non-owned Frame&#34;)
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>	}
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>}
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>func (h *http2FrameHeader) invalidate() { h.valid = false }
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span><span class="comment">// frame header bytes.</span>
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span><span class="comment">// Used only by ReadFrameHeader.</span>
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>var http2fhBytes = sync.Pool{
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>	New: func() interface{} {
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>		buf := make([]byte, http2frameHeaderLen)
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>		return &amp;buf
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>	},
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>}
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span><span class="comment">// ReadFrameHeader reads 9 bytes from r and returns a FrameHeader.</span>
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span><span class="comment">// Most users should use Framer.ReadFrame instead.</span>
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>func http2ReadFrameHeader(r io.Reader) (http2FrameHeader, error) {
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>	bufp := http2fhBytes.Get().(*[]byte)
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>	defer http2fhBytes.Put(bufp)
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>	return http2readFrameHeader(*bufp, r)
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>}
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>func http2readFrameHeader(buf []byte, r io.Reader) (http2FrameHeader, error) {
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>	_, err := io.ReadFull(r, buf[:http2frameHeaderLen])
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>	if err != nil {
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>		return http2FrameHeader{}, err
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>	}
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>	return http2FrameHeader{
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>		Length:   (uint32(buf[0])&lt;&lt;16 | uint32(buf[1])&lt;&lt;8 | uint32(buf[2])),
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>		Type:     http2FrameType(buf[3]),
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>		Flags:    http2Flags(buf[4]),
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>		StreamID: binary.BigEndian.Uint32(buf[5:]) &amp; (1&lt;&lt;31 - 1),
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>		valid:    true,
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>	}, nil
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>}
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span><span class="comment">// A Frame is the base interface implemented by all frame types.</span>
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span><span class="comment">// Callers will generally type-assert the specific frame type:</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span><span class="comment">// *HeadersFrame, *SettingsFrame, *WindowUpdateFrame, etc.</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span><span class="comment">// Frames are only valid until the next call to Framer.ReadFrame.</span>
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>type http2Frame interface {
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>	Header() http2FrameHeader
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	<span class="comment">// invalidate is called by Framer.ReadFrame to make this</span>
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>	<span class="comment">// frame&#39;s buffers as being invalid, since the subsequent</span>
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	<span class="comment">// frame will reuse them.</span>
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>	invalidate()
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>}
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span><span class="comment">// A Framer reads and writes Frames.</span>
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>type http2Framer struct {
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>	r         io.Reader
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>	lastFrame http2Frame
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>	errDetail error
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>	<span class="comment">// countError is a non-nil func that&#39;s called on a frame parse</span>
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>	<span class="comment">// error with some unique error path token. It&#39;s initialized</span>
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>	<span class="comment">// from Transport.CountError or Server.CountError.</span>
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	countError func(errToken string)
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>	<span class="comment">// lastHeaderStream is non-zero if the last frame was an</span>
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>	<span class="comment">// unfinished HEADERS/CONTINUATION.</span>
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>	lastHeaderStream uint32
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	maxReadSize uint32
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>	headerBuf   [http2frameHeaderLen]byte
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>	<span class="comment">// TODO: let getReadBuf be configurable, and use a less memory-pinning</span>
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>	<span class="comment">// allocator in server.go to minimize memory pinned for many idle conns.</span>
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	<span class="comment">// Will probably also need to make frame invalidation have a hook too.</span>
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>	getReadBuf func(size uint32) []byte
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>	readBuf    []byte <span class="comment">// cache for default getReadBuf</span>
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	maxWriteSize uint32 <span class="comment">// zero means unlimited; TODO: implement</span>
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	w    io.Writer
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>	wbuf []byte
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>	<span class="comment">// AllowIllegalWrites permits the Framer&#39;s Write methods to</span>
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	<span class="comment">// write frames that do not conform to the HTTP/2 spec. This</span>
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>	<span class="comment">// permits using the Framer to test other HTTP/2</span>
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>	<span class="comment">// implementations&#39; conformance to the spec.</span>
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>	<span class="comment">// If false, the Write methods will prefer to return an error</span>
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>	<span class="comment">// rather than comply.</span>
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>	AllowIllegalWrites bool
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>	<span class="comment">// AllowIllegalReads permits the Framer&#39;s ReadFrame method</span>
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>	<span class="comment">// to return non-compliant frames or frame orders.</span>
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>	<span class="comment">// This is for testing and permits using the Framer to test</span>
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>	<span class="comment">// other HTTP/2 implementations&#39; conformance to the spec.</span>
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>	<span class="comment">// It is not compatible with ReadMetaHeaders.</span>
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>	AllowIllegalReads bool
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>	<span class="comment">// ReadMetaHeaders if non-nil causes ReadFrame to merge</span>
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	<span class="comment">// HEADERS and CONTINUATION frames together and return</span>
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>	<span class="comment">// MetaHeadersFrame instead.</span>
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	ReadMetaHeaders *hpack.Decoder
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>	<span class="comment">// MaxHeaderListSize is the http2 MAX_HEADER_LIST_SIZE.</span>
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s used only if ReadMetaHeaders is set; 0 means a sane default</span>
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	<span class="comment">// (currently 16MB)</span>
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>	<span class="comment">// If the limit is hit, MetaHeadersFrame.Truncated is set true.</span>
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>	MaxHeaderListSize uint32
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>	<span class="comment">// TODO: track which type of frame &amp; with which flags was sent</span>
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>	<span class="comment">// last. Then return an error (unless AllowIllegalWrites) if</span>
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>	<span class="comment">// we&#39;re in the middle of a header block and a</span>
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>	<span class="comment">// non-Continuation or Continuation on a different stream is</span>
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>	<span class="comment">// attempted to be written.</span>
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>	logReads, logWrites bool
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>	debugFramer       *http2Framer <span class="comment">// only use for logging written writes</span>
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>	debugFramerBuf    *bytes.Buffer
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	debugReadLoggerf  func(string, ...interface{})
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>	debugWriteLoggerf func(string, ...interface{})
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>	frameCache *http2frameCache <span class="comment">// nil if frames aren&#39;t reused (default)</span>
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>}
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>func (fr *http2Framer) maxHeaderListSize() uint32 {
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>	if fr.MaxHeaderListSize == 0 {
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>		return 16 &lt;&lt; 20 <span class="comment">// sane default, per docs</span>
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>	}
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	return fr.MaxHeaderListSize
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>}
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>func (f *http2Framer) startWrite(ftype http2FrameType, flags http2Flags, streamID uint32) {
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	<span class="comment">// Write the FrameHeader.</span>
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf[:0],
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>		0, <span class="comment">// 3 bytes of length, filled in in endWrite</span>
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>		0,
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>		0,
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>		byte(ftype),
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>		byte(flags),
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>		byte(streamID&gt;&gt;24),
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>		byte(streamID&gt;&gt;16),
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span>		byte(streamID&gt;&gt;8),
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>		byte(streamID))
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>}
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>func (f *http2Framer) endWrite() error {
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>	<span class="comment">// Now that we know the final size, fill in the FrameHeader in</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span>	<span class="comment">// the space previously reserved for it. Abuse append.</span>
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>	length := len(f.wbuf) - http2frameHeaderLen
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>	if length &gt;= (1 &lt;&lt; 24) {
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>		return http2ErrFrameTooLarge
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>	}
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>	_ = append(f.wbuf[:0],
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>		byte(length&gt;&gt;16),
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>		byte(length&gt;&gt;8),
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>		byte(length))
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>	if f.logWrites {
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>		f.logWrite()
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>	}
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>	n, err := f.w.Write(f.wbuf)
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>	if err == nil &amp;&amp; n != len(f.wbuf) {
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>		err = io.ErrShortWrite
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>	}
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>	return err
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>}
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>func (f *http2Framer) logWrite() {
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>	if f.debugFramer == nil {
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>		f.debugFramerBuf = new(bytes.Buffer)
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>		f.debugFramer = http2NewFramer(nil, f.debugFramerBuf)
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		f.debugFramer.logReads = false <span class="comment">// we log it ourselves, saying &#34;wrote&#34; below</span>
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>		<span class="comment">// Let us read anything, even if we accidentally wrote it</span>
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>		<span class="comment">// in the wrong order:</span>
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>		f.debugFramer.AllowIllegalReads = true
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>	}
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>	f.debugFramerBuf.Write(f.wbuf)
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>	fr, err := f.debugFramer.ReadFrame()
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>	if err != nil {
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>		f.debugWriteLoggerf(&#34;http2: Framer %p: failed to decode just-written frame&#34;, f)
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>		return
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>	}
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>	f.debugWriteLoggerf(&#34;http2: Framer %p: wrote %v&#34;, f, http2summarizeFrame(fr))
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>}
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>func (f *http2Framer) writeByte(v byte) { f.wbuf = append(f.wbuf, v) }
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>func (f *http2Framer) writeBytes(v []byte) { f.wbuf = append(f.wbuf, v...) }
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>func (f *http2Framer) writeUint16(v uint16) { f.wbuf = append(f.wbuf, byte(v&gt;&gt;8), byte(v)) }
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>func (f *http2Framer) writeUint32(v uint32) {
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, byte(v&gt;&gt;24), byte(v&gt;&gt;16), byte(v&gt;&gt;8), byte(v))
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>}
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>const (
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>	http2minMaxFrameSize = 1 &lt;&lt; 14
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>	http2maxFrameSize    = 1&lt;&lt;24 - 1
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>)
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span><span class="comment">// SetReuseFrames allows the Framer to reuse Frames.</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span><span class="comment">// If called on a Framer, Frames returned by calls to ReadFrame are only</span>
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span><span class="comment">// valid until the next call to ReadFrame.</span>
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>func (fr *http2Framer) SetReuseFrames() {
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>	if fr.frameCache != nil {
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>		return
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>	}
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>	fr.frameCache = &amp;http2frameCache{}
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>}
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>type http2frameCache struct {
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>	dataFrame http2DataFrame
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>}
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>func (fc *http2frameCache) getDataFrame() *http2DataFrame {
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>	if fc == nil {
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>		return &amp;http2DataFrame{}
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>	}
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>	return &amp;fc.dataFrame
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>}
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span><span class="comment">// NewFramer returns a Framer that writes frames to w and reads them from r.</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>func http2NewFramer(w io.Writer, r io.Reader) *http2Framer {
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>	fr := &amp;http2Framer{
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>		w:                 w,
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>		r:                 r,
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>		countError:        func(string) {},
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>		logReads:          http2logFrameReads,
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>		logWrites:         http2logFrameWrites,
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>		debugReadLoggerf:  log.Printf,
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>		debugWriteLoggerf: log.Printf,
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>	}
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	fr.getReadBuf = func(size uint32) []byte {
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>		if cap(fr.readBuf) &gt;= int(size) {
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>			return fr.readBuf[:size]
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>		}
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>		fr.readBuf = make([]byte, size)
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>		return fr.readBuf
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>	}
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	fr.SetMaxReadFrameSize(http2maxFrameSize)
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>	return fr
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>}
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span><span class="comment">// SetMaxReadFrameSize sets the maximum size of a frame</span>
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span><span class="comment">// that will be read by a subsequent call to ReadFrame.</span>
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to advertise this</span>
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span><span class="comment">// limit with a SETTINGS frame.</span>
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>func (fr *http2Framer) SetMaxReadFrameSize(v uint32) {
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>	if v &gt; http2maxFrameSize {
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>		v = http2maxFrameSize
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>	}
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>	fr.maxReadSize = v
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>}
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span><span class="comment">// ErrorDetail returns a more detailed error of the last error</span>
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span><span class="comment">// returned by Framer.ReadFrame. For instance, if ReadFrame</span>
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span><span class="comment">// returns a StreamError with code PROTOCOL_ERROR, ErrorDetail</span>
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span><span class="comment">// will say exactly what was invalid. ErrorDetail is not guaranteed</span>
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span><span class="comment">// to return a non-nil value and like the rest of the http2 package,</span>
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span><span class="comment">// its return value is not protected by an API compatibility promise.</span>
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span><span class="comment">// ErrorDetail is reset after the next call to ReadFrame.</span>
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>func (fr *http2Framer) ErrorDetail() error {
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>	return fr.errDetail
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>}
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span><span class="comment">// ErrFrameTooLarge is returned from Framer.ReadFrame when the peer</span>
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span><span class="comment">// sends a frame that is larger than declared with SetMaxReadFrameSize.</span>
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>var http2ErrFrameTooLarge = errors.New(&#34;http2: frame too large&#34;)
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span><span class="comment">// terminalReadFrameError reports whether err is an unrecoverable</span>
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span><span class="comment">// error from ReadFrame and no other frames should be read.</span>
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>func http2terminalReadFrameError(err error) bool {
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>	if _, ok := err.(http2StreamError); ok {
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>		return false
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>	}
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>	return err != nil
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span>}
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span><span class="comment">// ReadFrame reads a single frame. The returned Frame is only valid</span>
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span><span class="comment">// until the next call to ReadFrame.</span>
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span><span class="comment">// If the frame is larger than previously set with SetMaxReadFrameSize, the</span>
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span><span class="comment">// returned error is ErrFrameTooLarge. Other errors may be of type</span>
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span><span class="comment">// ConnectionError, StreamError, or anything else from the underlying</span>
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span><span class="comment">// reader.</span>
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>func (fr *http2Framer) ReadFrame() (http2Frame, error) {
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>	fr.errDetail = nil
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>	if fr.lastFrame != nil {
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>		fr.lastFrame.invalidate()
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>	}
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>	fh, err := http2readFrameHeader(fr.headerBuf[:], fr.r)
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	if err != nil {
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>		return nil, err
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>	}
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>	if fh.Length &gt; fr.maxReadSize {
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>		return nil, http2ErrFrameTooLarge
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>	}
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>	payload := fr.getReadBuf(fh.Length)
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>	if _, err := io.ReadFull(fr.r, payload); err != nil {
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>		return nil, err
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>	}
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>	f, err := http2typeFrameParser(fh.Type)(fr.frameCache, fh, fr.countError, payload)
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>	if err != nil {
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>		if ce, ok := err.(http2connError); ok {
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>			return nil, fr.connError(ce.Code, ce.Reason)
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>		}
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>		return nil, err
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>	}
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>	if err := fr.checkFrameOrder(f); err != nil {
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>		return nil, err
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>	}
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>	if fr.logReads {
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>		fr.debugReadLoggerf(&#34;http2: Framer %p: read %v&#34;, fr, http2summarizeFrame(f))
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>	}
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>	if fh.Type == http2FrameHeaders &amp;&amp; fr.ReadMetaHeaders != nil {
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>		return fr.readMetaFrame(f.(*http2HeadersFrame))
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>	}
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>	return f, nil
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>}
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span><span class="comment">// connError returns ConnectionError(code) but first</span>
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span><span class="comment">// stashes away a public reason to the caller can optionally relay it</span>
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span><span class="comment">// to the peer before hanging up on them. This might help others debug</span>
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span><span class="comment">// their implementations.</span>
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>func (fr *http2Framer) connError(code http2ErrCode, reason string) error {
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>	fr.errDetail = errors.New(reason)
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>	return http2ConnectionError(code)
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>}
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span><span class="comment">// checkFrameOrder reports an error if f is an invalid frame to return</span>
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span><span class="comment">// next from ReadFrame. Mostly it checks whether HEADERS and</span>
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span><span class="comment">// CONTINUATION frames are contiguous.</span>
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>func (fr *http2Framer) checkFrameOrder(f http2Frame) error {
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>	last := fr.lastFrame
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>	fr.lastFrame = f
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>	if fr.AllowIllegalReads {
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>		return nil
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>	}
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>	fh := f.Header()
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>	if fr.lastHeaderStream != 0 {
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>		if fh.Type != http2FrameContinuation {
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>			return fr.connError(http2ErrCodeProtocol,
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>				fmt.Sprintf(&#34;got %s for stream %d; expected CONTINUATION following %s for stream %d&#34;,
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>					fh.Type, fh.StreamID,
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>					last.Header().Type, fr.lastHeaderStream))
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>		}
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>		if fh.StreamID != fr.lastHeaderStream {
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>			return fr.connError(http2ErrCodeProtocol,
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>				fmt.Sprintf(&#34;got CONTINUATION for stream %d; expected stream %d&#34;,
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>					fh.StreamID, fr.lastHeaderStream))
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>		}
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span>	} else if fh.Type == http2FrameContinuation {
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>		return fr.connError(http2ErrCodeProtocol, fmt.Sprintf(&#34;unexpected CONTINUATION for stream %d&#34;, fh.StreamID))
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>	}
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>	switch fh.Type {
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>	case http2FrameHeaders, http2FrameContinuation:
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>		if fh.Flags.Has(http2FlagHeadersEndHeaders) {
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>			fr.lastHeaderStream = 0
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>		} else {
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>			fr.lastHeaderStream = fh.StreamID
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>		}
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	}
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>	return nil
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>}
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span><span class="comment">// A DataFrame conveys arbitrary, variable-length sequences of octets</span>
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span><span class="comment">// associated with a stream.</span>
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.1</span>
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>type http2DataFrame struct {
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>	data []byte
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>}
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>func (f *http2DataFrame) StreamEnded() bool {
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagDataEndStream)
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>}
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span><span class="comment">// Data returns the frame&#39;s data octets, not including any padding</span>
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span><span class="comment">// size byte or padding suffix bytes.</span>
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span><span class="comment">// The caller must not retain the returned memory past the next</span>
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span><span class="comment">// call to ReadFrame.</span>
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>func (f *http2DataFrame) Data() []byte {
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>	f.checkValid()
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>	return f.data
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>}
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>func http2parseDataFrame(fc *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>	if fh.StreamID == 0 {
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>		<span class="comment">// DATA frames MUST be associated with a stream. If a</span>
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>		<span class="comment">// DATA frame is received whose stream identifier</span>
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>		<span class="comment">// field is 0x0, the recipient MUST respond with a</span>
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>		<span class="comment">// connection error (Section 5.4.1) of type</span>
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>		<span class="comment">// PROTOCOL_ERROR.</span>
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>		countError(&#34;frame_data_stream_0&#34;)
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeProtocol, &#34;DATA frame with stream ID 0&#34;}
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>	}
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>	f := fc.getDataFrame()
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>	f.http2FrameHeader = fh
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>	var padSize byte
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>	if fh.Flags.Has(http2FlagDataPadded) {
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>		var err error
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>		payload, padSize, err = http2readByte(payload)
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>		if err != nil {
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>			countError(&#34;frame_data_pad_byte_short&#34;)
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>			return nil, err
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>		}
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>	}
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>	if int(padSize) &gt; len(payload) {
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>		<span class="comment">// If the length of the padding is greater than the</span>
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>		<span class="comment">// length of the frame payload, the recipient MUST</span>
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>		<span class="comment">// treat this as a connection error.</span>
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>		<span class="comment">// Filed: https://github.com/http2/http2-spec/issues/610</span>
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>		countError(&#34;frame_data_pad_too_big&#34;)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeProtocol, &#34;pad size larger than data payload&#34;}
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>	}
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>	f.data = payload[:len(payload)-int(padSize)]
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>	return f, nil
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>}
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>var (
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>	http2errStreamID    = errors.New(&#34;invalid stream ID&#34;)
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>	http2errDepStreamID = errors.New(&#34;invalid dependent stream ID&#34;)
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>	http2errPadLength   = errors.New(&#34;pad length too large&#34;)
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>	http2errPadBytes    = errors.New(&#34;padding bytes must all be zeros unless AllowIllegalWrites is enabled&#34;)
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>)
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>func http2validStreamIDOrZero(streamID uint32) bool {
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>	return streamID&amp;(1&lt;&lt;31) == 0
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>}
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>func http2validStreamID(streamID uint32) bool {
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>	return streamID != 0 &amp;&amp; streamID&amp;(1&lt;&lt;31) == 0
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>}
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span><span class="comment">// WriteData writes a DATA frame.</span>
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility not to violate the maximum frame size</span>
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span><span class="comment">// and to not call other Write methods concurrently.</span>
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>func (f *http2Framer) WriteData(streamID uint32, endStream bool, data []byte) error {
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>	return f.WriteDataPadded(streamID, endStream, data, nil)
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>}
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span><span class="comment">// WriteDataPadded writes a DATA frame with optional padding.</span>
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span><span class="comment">// If pad is nil, the padding bit is not sent.</span>
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span><span class="comment">// The length of pad must not exceed 255 bytes.</span>
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span><span class="comment">// The bytes of pad must all be zero, unless f.AllowIllegalWrites is set.</span>
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility not to violate the maximum frame size</span>
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span><span class="comment">// and to not call other Write methods concurrently.</span>
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>func (f *http2Framer) WriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error {
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>	if err := f.startWriteDataPadded(streamID, endStream, data, pad); err != nil {
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>		return err
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>	}
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>}
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span><span class="comment">// startWriteDataPadded is WriteDataPadded, but only writes the frame to the Framer&#39;s internal buffer.</span>
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span><span class="comment">// The caller should call endWrite to flush the frame to the underlying writer.</span>
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>func (f *http2Framer) startWriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error {
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>	if !http2validStreamID(streamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>	}
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>	if len(pad) &gt; 0 {
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>		if len(pad) &gt; 255 {
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>			return http2errPadLength
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>		}
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>		if !f.AllowIllegalWrites {
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>			for _, b := range pad {
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>				if b != 0 {
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>					<span class="comment">// &#34;Padding octets MUST be set to zero when sending.&#34;</span>
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>					return http2errPadBytes
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>				}
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>			}
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>		}
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>	}
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>	var flags http2Flags
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>	if endStream {
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>		flags |= http2FlagDataEndStream
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>	}
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>	if pad != nil {
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>		flags |= http2FlagDataPadded
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>	}
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	f.startWrite(http2FrameData, flags, streamID)
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	if pad != nil {
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>		f.wbuf = append(f.wbuf, byte(len(pad)))
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>	}
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, data...)
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, pad...)
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>	return nil
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>}
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span><span class="comment">// A SettingsFrame conveys configuration parameters that affect how</span>
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span><span class="comment">// endpoints communicate, such as preferences and constraints on peer</span>
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span><span class="comment">// behavior.</span>
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#SETTINGS</span>
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>type http2SettingsFrame struct {
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>	p []byte
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>}
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>func http2parseSettingsFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	if fh.Flags.Has(http2FlagSettingsAck) &amp;&amp; fh.Length &gt; 0 {
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>		<span class="comment">// When this (ACK 0x1) bit is set, the payload of the</span>
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>		<span class="comment">// SETTINGS frame MUST be empty. Receipt of a</span>
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>		<span class="comment">// SETTINGS frame with the ACK flag set and a length</span>
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>		<span class="comment">// field value other than 0 MUST be treated as a</span>
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>		<span class="comment">// connection error (Section 5.4.1) of type</span>
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>		<span class="comment">// FRAME_SIZE_ERROR.</span>
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>		countError(&#34;frame_settings_ack_with_length&#34;)
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>	}
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>	if fh.StreamID != 0 {
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>		<span class="comment">// SETTINGS frames always apply to a connection,</span>
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>		<span class="comment">// never a single stream. The stream identifier for a</span>
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>		<span class="comment">// SETTINGS frame MUST be zero (0x0).  If an endpoint</span>
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>		<span class="comment">// receives a SETTINGS frame whose stream identifier</span>
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>		<span class="comment">// field is anything other than 0x0, the endpoint MUST</span>
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>		<span class="comment">// respond with a connection error (Section 5.4.1) of</span>
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>		<span class="comment">// type PROTOCOL_ERROR.</span>
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>		countError(&#34;frame_settings_has_stream&#34;)
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>	}
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>	if len(p)%6 != 0 {
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>		countError(&#34;frame_settings_mod_6&#34;)
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>		<span class="comment">// Expecting even number of 6 byte settings.</span>
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span>	}
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span>	f := &amp;http2SettingsFrame{http2FrameHeader: fh, p: p}
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span>	if v, ok := f.Value(http2SettingInitialWindowSize); ok &amp;&amp; v &gt; (1&lt;&lt;31)-1 {
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>		countError(&#34;frame_settings_window_size_too_big&#34;)
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>		<span class="comment">// Values above the maximum flow control window size of 2^31 - 1 MUST</span>
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>		<span class="comment">// be treated as a connection error (Section 5.4.1) of type</span>
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>		<span class="comment">// FLOW_CONTROL_ERROR.</span>
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFlowControl)
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>	}
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span>	return f, nil
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>}
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>func (f *http2SettingsFrame) IsAck() bool {
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagSettingsAck)
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>}
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>func (f *http2SettingsFrame) Value(id http2SettingID) (v uint32, ok bool) {
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>	for i := 0; i &lt; f.NumSettings(); i++ {
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span>		if s := f.Setting(i); s.ID == id {
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span>			return s.Val, true
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>		}
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>	}
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>	return 0, false
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>}
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span><span class="comment">// Setting returns the setting from the frame at the given 0-based index.</span>
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span><span class="comment">// The index must be &gt;= 0 and less than f.NumSettings().</span>
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>func (f *http2SettingsFrame) Setting(i int) http2Setting {
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>	buf := f.p
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>	return http2Setting{
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>		ID:  http2SettingID(binary.BigEndian.Uint16(buf[i*6 : i*6+2])),
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>		Val: binary.BigEndian.Uint32(buf[i*6+2 : i*6+6]),
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>	}
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>}
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>func (f *http2SettingsFrame) NumSettings() int { return len(f.p) / 6 }
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span><span class="comment">// HasDuplicates reports whether f contains any duplicate setting IDs.</span>
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>func (f *http2SettingsFrame) HasDuplicates() bool {
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>	num := f.NumSettings()
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>	if num == 0 {
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>		return false
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>	}
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>	<span class="comment">// If it&#39;s small enough (the common case), just do the n^2</span>
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>	<span class="comment">// thing and avoid a map allocation.</span>
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>	if num &lt; 10 {
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>		for i := 0; i &lt; num; i++ {
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>			idi := f.Setting(i).ID
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>			for j := i + 1; j &lt; num; j++ {
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>				idj := f.Setting(j).ID
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span>				if idi == idj {
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span>					return true
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>				}
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>			}
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>		}
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>		return false
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>	}
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>	seen := map[http2SettingID]bool{}
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>	for i := 0; i &lt; num; i++ {
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>		id := f.Setting(i).ID
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>		if seen[id] {
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>			return true
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>		}
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>		seen[id] = true
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>	}
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>	return false
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>}
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span><span class="comment">// ForeachSetting runs fn for each setting.</span>
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span><span class="comment">// It stops and returns the first error.</span>
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>func (f *http2SettingsFrame) ForeachSetting(fn func(http2Setting) error) error {
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>	for i := 0; i &lt; f.NumSettings(); i++ {
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>		if err := fn(f.Setting(i)); err != nil {
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>			return err
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>		}
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>	}
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>	return nil
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>}
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span><span class="comment">// WriteSettings writes a SETTINGS frame with zero or more settings</span>
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span><span class="comment">// specified and the ACK bit not set.</span>
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>func (f *http2Framer) WriteSettings(settings ...http2Setting) error {
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>	f.startWrite(http2FrameSettings, 0, 0)
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>	for _, s := range settings {
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>		f.writeUint16(uint16(s.ID))
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>		f.writeUint32(s.Val)
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>	}
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>}
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span><span class="comment">// WriteSettingsAck writes an empty SETTINGS frame with the ACK bit set.</span>
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>func (f *http2Framer) WriteSettingsAck() error {
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>	f.startWrite(http2FrameSettings, http2FlagSettingsAck, 0)
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>}
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span><span class="comment">// A PingFrame is a mechanism for measuring a minimal round trip time</span>
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span><span class="comment">// from the sender, as well as determining whether an idle connection</span>
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span><span class="comment">// is still functional.</span>
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.7</span>
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>type http2PingFrame struct {
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>	Data [8]byte
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>}
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>func (f *http2PingFrame) IsAck() bool { return f.Flags.Has(http2FlagPingAck) }
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>func http2parsePingFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>	if len(payload) != 8 {
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>		countError(&#34;frame_ping_length&#34;)
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>	}
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>	if fh.StreamID != 0 {
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>		countError(&#34;frame_ping_has_stream&#34;)
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>	}
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	f := &amp;http2PingFrame{http2FrameHeader: fh}
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	copy(f.Data[:], payload)
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>	return f, nil
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>}
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>func (f *http2Framer) WritePing(ack bool, data [8]byte) error {
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>	var flags http2Flags
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>	if ack {
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>		flags = http2FlagPingAck
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>	}
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	f.startWrite(http2FramePing, flags, 0)
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>	f.writeBytes(data[:])
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>}
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span><span class="comment">// A GoAwayFrame informs the remote peer to stop creating streams on this connection.</span>
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.8</span>
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>type http2GoAwayFrame struct {
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>	LastStreamID uint32
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>	ErrCode      http2ErrCode
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	debugData    []byte
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>}
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span><span class="comment">// DebugData returns any debug data in the GOAWAY frame. Its contents</span>
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span><span class="comment">// are not defined.</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span><span class="comment">// The caller must not retain the returned memory past the next</span>
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span><span class="comment">// call to ReadFrame.</span>
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>func (f *http2GoAwayFrame) DebugData() []byte {
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>	return f.debugData
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>}
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>func http2parseGoAwayFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>	if fh.StreamID != 0 {
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>		countError(&#34;frame_goaway_has_stream&#34;)
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>	}
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>	if len(p) &lt; 8 {
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>		countError(&#34;frame_goaway_short&#34;)
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>	}
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>	return &amp;http2GoAwayFrame{
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>		http2FrameHeader: fh,
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span>		LastStreamID:     binary.BigEndian.Uint32(p[:4]) &amp; (1&lt;&lt;31 - 1),
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span>		ErrCode:          http2ErrCode(binary.BigEndian.Uint32(p[4:8])),
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>		debugData:        p[8:],
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>	}, nil
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>}
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>func (f *http2Framer) WriteGoAway(maxStreamID uint32, code http2ErrCode, debugData []byte) error {
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>	f.startWrite(http2FrameGoAway, 0, 0)
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>	f.writeUint32(maxStreamID &amp; (1&lt;&lt;31 - 1))
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>	f.writeUint32(uint32(code))
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>	f.writeBytes(debugData)
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>}
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span><span class="comment">// An UnknownFrame is the frame type returned when the frame type is unknown</span>
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span><span class="comment">// or no specific frame type parser exists.</span>
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span>type http2UnknownFrame struct {
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span>	p []byte
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span>}
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span><span class="comment">// Payload returns the frame&#39;s payload (after the header).  It is not</span>
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span><span class="comment">// valid to call this method after a subsequent call to</span>
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span><span class="comment">// Framer.ReadFrame, nor is it valid to retain the returned slice.</span>
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span><span class="comment">// The memory is owned by the Framer and is invalidated when the next</span>
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span><span class="comment">// frame is read.</span>
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>func (f *http2UnknownFrame) Payload() []byte {
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>	return f.p
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>}
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span>func http2parseUnknownFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span>	return &amp;http2UnknownFrame{fh, p}, nil
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span>}
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span><span class="comment">// A WindowUpdateFrame is used to implement flow control.</span>
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.9</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>type http2WindowUpdateFrame struct {
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span>	Increment uint32 <span class="comment">// never read with high bit set</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span>}
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span>
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span>func http2parseWindowUpdateFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span>	if len(p) != 4 {
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span>		countError(&#34;frame_windowupdate_bad_len&#34;)
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span>	}
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span>	inc := binary.BigEndian.Uint32(p[:4]) &amp; 0x7fffffff <span class="comment">// mask off high reserved bit</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>	if inc == 0 {
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>		<span class="comment">// A receiver MUST treat the receipt of a</span>
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>		<span class="comment">// WINDOW_UPDATE frame with an flow control window</span>
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>		<span class="comment">// increment of 0 as a stream error (Section 5.4.2) of</span>
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>		<span class="comment">// type PROTOCOL_ERROR; errors on the connection flow</span>
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>		<span class="comment">// control window MUST be treated as a connection</span>
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>		<span class="comment">// error (Section 5.4.1).</span>
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>		if fh.StreamID == 0 {
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>			countError(&#34;frame_windowupdate_zero_inc_conn&#34;)
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>			return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>		}
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>		countError(&#34;frame_windowupdate_zero_inc_stream&#34;)
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>		return nil, http2streamError(fh.StreamID, http2ErrCodeProtocol)
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>	}
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>	return &amp;http2WindowUpdateFrame{
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>		http2FrameHeader: fh,
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>		Increment:        inc,
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>	}, nil
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>}
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span>
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span><span class="comment">// WriteWindowUpdate writes a WINDOW_UPDATE frame.</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span><span class="comment">// The increment value must be between 1 and 2,147,483,647, inclusive.</span>
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span><span class="comment">// If the Stream ID is zero, the window update applies to the</span>
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span><span class="comment">// connection as a whole.</span>
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>func (f *http2Framer) WriteWindowUpdate(streamID, incr uint32) error {
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>	<span class="comment">// &#34;The legal range for the increment to the flow control window is 1 to 2^31-1 (2,147,483,647) octets.&#34;</span>
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>	if (incr &lt; 1 || incr &gt; 2147483647) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>		return errors.New(&#34;illegal window increment value&#34;)
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>	}
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>	f.startWrite(http2FrameWindowUpdate, 0, streamID)
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>	f.writeUint32(incr)
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>}
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span><span class="comment">// A HeadersFrame is used to open a stream and additionally carries a</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span><span class="comment">// header block fragment.</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>type http2HeadersFrame struct {
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>	<span class="comment">// Priority is set if FlagHeadersPriority is set in the FrameHeader.</span>
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>	Priority http2PriorityParam
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>	headerFragBuf []byte <span class="comment">// not owned</span>
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>}
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>func (f *http2HeadersFrame) HeaderBlockFragment() []byte {
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>	return f.headerFragBuf
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>}
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>func (f *http2HeadersFrame) HeadersEnded() bool {
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagHeadersEndHeaders)
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>}
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span>
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span>func (f *http2HeadersFrame) StreamEnded() bool {
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagHeadersEndStream)
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>}
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>func (f *http2HeadersFrame) HasPriority() bool {
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagHeadersPriority)
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>}
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>func http2parseHeadersFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (_ http2Frame, err error) {
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>	hf := &amp;http2HeadersFrame{
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>		http2FrameHeader: fh,
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>	}
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span>	if fh.StreamID == 0 {
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span>		<span class="comment">// HEADERS frames MUST be associated with a stream. If a HEADERS frame</span>
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span>		<span class="comment">// is received whose stream identifier field is 0x0, the recipient MUST</span>
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>		<span class="comment">// respond with a connection error (Section 5.4.1) of type</span>
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>		<span class="comment">// PROTOCOL_ERROR.</span>
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>		countError(&#34;frame_headers_zero_stream&#34;)
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeProtocol, &#34;HEADERS frame with stream ID 0&#34;}
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>	}
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>	var padLength uint8
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>	if fh.Flags.Has(http2FlagHeadersPadded) {
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>		if p, padLength, err = http2readByte(p); err != nil {
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>			countError(&#34;frame_headers_pad_short&#34;)
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>			return
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>		}
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>	}
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>	if fh.Flags.Has(http2FlagHeadersPriority) {
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>		var v uint32
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span>		p, v, err = http2readUint32(p)
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>		if err != nil {
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>			countError(&#34;frame_headers_prio_short&#34;)
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>			return nil, err
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>		}
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>		hf.Priority.StreamDep = v &amp; 0x7fffffff
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>		hf.Priority.Exclusive = (v != hf.Priority.StreamDep) <span class="comment">// high bit was set</span>
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>		p, hf.Priority.Weight, err = http2readByte(p)
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>		if err != nil {
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>			countError(&#34;frame_headers_prio_weight_short&#34;)
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span>			return nil, err
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>		}
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>	}
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>	if len(p)-int(padLength) &lt; 0 {
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>		countError(&#34;frame_headers_pad_too_big&#34;)
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>		return nil, http2streamError(fh.StreamID, http2ErrCodeProtocol)
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>	}
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>	hf.headerFragBuf = p[:len(p)-int(padLength)]
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>	return hf, nil
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>}
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span><span class="comment">// HeadersFrameParam are the parameters for writing a HEADERS frame.</span>
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>type http2HeadersFrameParam struct {
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>	<span class="comment">// StreamID is the required Stream ID to initiate.</span>
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>	StreamID uint32
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>	<span class="comment">// BlockFragment is part (or all) of a Header Block.</span>
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>	BlockFragment []byte
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>	<span class="comment">// EndStream indicates that the header block is the last that</span>
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>	<span class="comment">// the endpoint will send for the identified stream. Setting</span>
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>	<span class="comment">// this flag causes the stream to enter one of &#34;half closed&#34;</span>
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>	<span class="comment">// states.</span>
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>	EndStream bool
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>	<span class="comment">// EndHeaders indicates that this frame contains an entire</span>
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>	<span class="comment">// header block and is not followed by any</span>
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>	<span class="comment">// CONTINUATION frames.</span>
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>	EndHeaders bool
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>	<span class="comment">// PadLength is the optional number of bytes of zeros to add</span>
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>	<span class="comment">// to this frame.</span>
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>	PadLength uint8
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span>	<span class="comment">// Priority, if non-zero, includes stream priority information</span>
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>	<span class="comment">// in the HEADER frame.</span>
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span>	Priority http2PriorityParam
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span>}
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span>
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span><span class="comment">// WriteHeaders writes a single HEADERS frame.</span>
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span><span class="comment">// This is a low-level header writing method. Encoding headers and</span>
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span><span class="comment">// splitting them into any necessary CONTINUATION frames is handled</span>
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span><span class="comment">// elsewhere.</span>
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>func (f *http2Framer) WriteHeaders(p http2HeadersFrameParam) error {
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>	if !http2validStreamID(p.StreamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>	}
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>	var flags http2Flags
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	if p.PadLength != 0 {
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>		flags |= http2FlagHeadersPadded
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>	}
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>	if p.EndStream {
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span>		flags |= http2FlagHeadersEndStream
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span>	}
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span>	if p.EndHeaders {
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span>		flags |= http2FlagHeadersEndHeaders
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span>	}
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span>	if !p.Priority.IsZero() {
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span>		flags |= http2FlagHeadersPriority
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>	}
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span>	f.startWrite(http2FrameHeaders, flags, p.StreamID)
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>	if p.PadLength != 0 {
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>		f.writeByte(p.PadLength)
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>	}
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>	if !p.Priority.IsZero() {
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span>		v := p.Priority.StreamDep
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span>		if !http2validStreamIDOrZero(v) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>			return http2errDepStreamID
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>		}
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>		if p.Priority.Exclusive {
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span>			v |= 1 &lt;&lt; 31
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span>		}
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span>		f.writeUint32(v)
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span>		f.writeByte(p.Priority.Weight)
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span>	}
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, p.BlockFragment...)
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, http2padZeros[:p.PadLength]...)
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span>}
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span>
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span><span class="comment">// A PriorityFrame specifies the sender-advised priority of a stream.</span>
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.3</span>
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span>type http2PriorityFrame struct {
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>	http2PriorityParam
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>}
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span><span class="comment">// PriorityParam are the stream prioritzation parameters.</span>
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span>type http2PriorityParam struct {
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span>	<span class="comment">// StreamDep is a 31-bit stream identifier for the</span>
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span>	<span class="comment">// stream that this stream depends on. Zero means no</span>
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span>	<span class="comment">// dependency.</span>
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span>	StreamDep uint32
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span>
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span>	<span class="comment">// Exclusive is whether the dependency is exclusive.</span>
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span>	Exclusive bool
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span>
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span>	<span class="comment">// Weight is the stream&#39;s zero-indexed weight. It should be</span>
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span>	<span class="comment">// set together with StreamDep, or neither should be set. Per</span>
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span>	<span class="comment">// the spec, &#34;Add one to the value to obtain a weight between</span>
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span>	<span class="comment">// 1 and 256.&#34;</span>
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span>	Weight uint8
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span>}
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span>
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>func (p http2PriorityParam) IsZero() bool {
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>	return p == http2PriorityParam{}
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>}
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span>func http2parsePriorityFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span>	if fh.StreamID == 0 {
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span>		countError(&#34;frame_priority_zero_stream&#34;)
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeProtocol, &#34;PRIORITY frame with stream ID 0&#34;}
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>	}
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>	if len(payload) != 5 {
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>		countError(&#34;frame_priority_bad_length&#34;)
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeFrameSize, fmt.Sprintf(&#34;PRIORITY frame payload size was %d; want 5&#34;, len(payload))}
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span>	}
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span>	v := binary.BigEndian.Uint32(payload[:4])
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span>	streamID := v &amp; 0x7fffffff <span class="comment">// mask off high bit</span>
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span>	return &amp;http2PriorityFrame{
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span>		http2FrameHeader: fh,
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>		http2PriorityParam: http2PriorityParam{
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>			Weight:    payload[4],
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>			StreamDep: streamID,
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>			Exclusive: streamID != v, <span class="comment">// was high bit set?</span>
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>		},
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span>	}, nil
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span>}
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span>
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span><span class="comment">// WritePriority writes a PRIORITY frame.</span>
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span>func (f *http2Framer) WritePriority(streamID uint32, p http2PriorityParam) error {
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span>	if !http2validStreamID(streamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span>	}
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span>	if !http2validStreamIDOrZero(p.StreamDep) {
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span>		return http2errDepStreamID
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span>	}
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span>	f.startWrite(http2FramePriority, 0, streamID)
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span>	v := p.StreamDep
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span>	if p.Exclusive {
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span>		v |= 1 &lt;&lt; 31
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span>	}
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span>	f.writeUint32(v)
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span>	f.writeByte(p.Weight)
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span>}
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span>
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span><span class="comment">// A RSTStreamFrame allows for abnormal termination of a stream.</span>
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.4</span>
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span>type http2RSTStreamFrame struct {
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span>	ErrCode http2ErrCode
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span>}
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span>
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span>func http2parseRSTStreamFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span>	if len(p) != 4 {
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span>		countError(&#34;frame_rststream_bad_len&#34;)
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeFrameSize)
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span>	}
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span>	if fh.StreamID == 0 {
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span>		countError(&#34;frame_rststream_zero_stream&#34;)
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>	}
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span>	return &amp;http2RSTStreamFrame{fh, http2ErrCode(binary.BigEndian.Uint32(p[:4]))}, nil
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span>}
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span>
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span><span class="comment">// WriteRSTStream writes a RST_STREAM frame.</span>
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span>func (f *http2Framer) WriteRSTStream(streamID uint32, code http2ErrCode) error {
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span>	if !http2validStreamID(streamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>	}
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>	f.startWrite(http2FrameRSTStream, 0, streamID)
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>	f.writeUint32(uint32(code))
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>}
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span><span class="comment">// A ContinuationFrame is used to continue a sequence of header block fragments.</span>
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.10</span>
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>type http2ContinuationFrame struct {
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>	headerFragBuf []byte
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span>}
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span>
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span>func http2parseContinuationFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span>	if fh.StreamID == 0 {
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span>		countError(&#34;frame_continuation_zero_stream&#34;)
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span>		return nil, http2connError{http2ErrCodeProtocol, &#34;CONTINUATION frame with stream ID 0&#34;}
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>	}
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span>	return &amp;http2ContinuationFrame{fh, p}, nil
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span>}
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span>
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span>func (f *http2ContinuationFrame) HeaderBlockFragment() []byte {
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>	return f.headerFragBuf
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>}
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>func (f *http2ContinuationFrame) HeadersEnded() bool {
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagContinuationEndHeaders)
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>}
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span>
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span><span class="comment">// WriteContinuation writes a CONTINUATION frame.</span>
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span>func (f *http2Framer) WriteContinuation(streamID uint32, endHeaders bool, headerBlockFragment []byte) error {
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span>	if !http2validStreamID(streamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span>	}
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span>	var flags http2Flags
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span>	if endHeaders {
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>		flags |= http2FlagContinuationEndHeaders
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>	}
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>	f.startWrite(http2FrameContinuation, flags, streamID)
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, headerBlockFragment...)
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span>}
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span>
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span><span class="comment">// A PushPromiseFrame is used to initiate a server stream.</span>
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span><span class="comment">// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.6</span>
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>type http2PushPromiseFrame struct {
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>	http2FrameHeader
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>	PromiseID     uint32
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>	headerFragBuf []byte <span class="comment">// not owned</span>
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>}
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span>func (f *http2PushPromiseFrame) HeaderBlockFragment() []byte {
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>	f.checkValid()
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span>	return f.headerFragBuf
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span>}
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span>func (f *http2PushPromiseFrame) HeadersEnded() bool {
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span>	return f.http2FrameHeader.Flags.Has(http2FlagPushPromiseEndHeaders)
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span>}
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>func http2parsePushPromise(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (_ http2Frame, err error) {
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>	pp := &amp;http2PushPromiseFrame{
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>		http2FrameHeader: fh,
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>	}
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>	if pp.StreamID == 0 {
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span>		<span class="comment">// PUSH_PROMISE frames MUST be associated with an existing,</span>
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span>		<span class="comment">// peer-initiated stream. The stream identifier of a</span>
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span>		<span class="comment">// PUSH_PROMISE frame indicates the stream it is associated</span>
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span>		<span class="comment">// with. If the stream identifier field specifies the value</span>
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span>		<span class="comment">// 0x0, a recipient MUST respond with a connection error</span>
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span>		<span class="comment">// (Section 5.4.1) of type PROTOCOL_ERROR.</span>
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>		countError(&#34;frame_pushpromise_zero_stream&#34;)
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>	}
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>	<span class="comment">// The PUSH_PROMISE frame includes optional padding.</span>
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>	<span class="comment">// Padding fields and flags are identical to those defined for DATA frames</span>
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>	var padLength uint8
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>	if fh.Flags.Has(http2FlagPushPromisePadded) {
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span>		if p, padLength, err = http2readByte(p); err != nil {
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span>			countError(&#34;frame_pushpromise_pad_short&#34;)
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>			return
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>		}
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>	}
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>	p, pp.PromiseID, err = http2readUint32(p)
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>	if err != nil {
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>		countError(&#34;frame_pushpromise_promiseid_short&#34;)
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span>		return
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span>	}
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span>	pp.PromiseID = pp.PromiseID &amp; (1&lt;&lt;31 - 1)
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span>
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span>	if int(padLength) &gt; len(p) {
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span>		<span class="comment">// like the DATA frame, error out if padding is longer than the body.</span>
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span>		countError(&#34;frame_pushpromise_pad_too_big&#34;)
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span>	}
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span>	pp.headerFragBuf = p[:len(p)-int(padLength)]
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span>	return pp, nil
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span>}
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span>
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span><span class="comment">// PushPromiseParam are the parameters for writing a PUSH_PROMISE frame.</span>
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span>type http2PushPromiseParam struct {
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span>	<span class="comment">// StreamID is the required Stream ID to initiate.</span>
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>	StreamID uint32
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>	<span class="comment">// PromiseID is the required Stream ID which this</span>
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>	<span class="comment">// Push Promises</span>
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>	PromiseID uint32
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>	<span class="comment">// BlockFragment is part (or all) of a Header Block.</span>
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>	BlockFragment []byte
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>	<span class="comment">// EndHeaders indicates that this frame contains an entire</span>
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>	<span class="comment">// header block and is not followed by any</span>
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>	<span class="comment">// CONTINUATION frames.</span>
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>	EndHeaders bool
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>	<span class="comment">// PadLength is the optional number of bytes of zeros to add</span>
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>	<span class="comment">// to this frame.</span>
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span>	PadLength uint8
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span>}
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span><span class="comment">// WritePushPromise writes a single PushPromise Frame.</span>
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span><span class="comment">// As with Header Frames, This is the low level call for writing</span>
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span><span class="comment">// individual frames. Continuation frames are handled elsewhere.</span>
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span><span class="comment">// It will perform exactly one Write to the underlying Writer.</span>
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to not call other Write methods concurrently.</span>
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span>func (f *http2Framer) WritePushPromise(p http2PushPromiseParam) error {
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span>	if !http2validStreamID(p.StreamID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>	}
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span>	var flags http2Flags
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span>	if p.PadLength != 0 {
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>		flags |= http2FlagPushPromisePadded
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>	}
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>	if p.EndHeaders {
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>		flags |= http2FlagPushPromiseEndHeaders
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>	}
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>	f.startWrite(http2FramePushPromise, flags, p.StreamID)
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>	if p.PadLength != 0 {
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>		f.writeByte(p.PadLength)
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span>	}
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span>	if !http2validStreamID(p.PromiseID) &amp;&amp; !f.AllowIllegalWrites {
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span>		return http2errStreamID
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span>	}
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span>	f.writeUint32(p.PromiseID)
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, p.BlockFragment...)
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span>	f.wbuf = append(f.wbuf, http2padZeros[:p.PadLength]...)
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span>}
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span>
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span><span class="comment">// WriteRawFrame writes a raw frame. This can be used to write</span>
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span><span class="comment">// extension frames unknown to this package.</span>
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span>func (f *http2Framer) WriteRawFrame(t http2FrameType, flags http2Flags, streamID uint32, payload []byte) error {
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span>	f.startWrite(t, flags, streamID)
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span>	f.writeBytes(payload)
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span>	return f.endWrite()
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span>}
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span>
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span>func http2readByte(p []byte) (remain []byte, b byte, err error) {
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span>	if len(p) == 0 {
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span>		return nil, 0, io.ErrUnexpectedEOF
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span>	}
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span>	return p[1:], p[0], nil
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span>}
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span>
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span>func http2readUint32(p []byte) (remain []byte, v uint32, err error) {
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span>	if len(p) &lt; 4 {
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span>		return nil, 0, io.ErrUnexpectedEOF
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span>	}
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span>	return p[4:], binary.BigEndian.Uint32(p[:4]), nil
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span>}
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span>
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span>type http2streamEnder interface {
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>	StreamEnded() bool
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>}
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>type http2headersEnder interface {
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>	HeadersEnded() bool
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span>}
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span>
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span>type http2headersOrContinuation interface {
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span>	http2headersEnder
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span>	HeaderBlockFragment() []byte
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span>}
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span><span class="comment">// A MetaHeadersFrame is the representation of one HEADERS frame and</span>
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span><span class="comment">// zero or more contiguous CONTINUATION frames and the decoding of</span>
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span><span class="comment">// their HPACK-encoded contents.</span>
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span><span class="comment">// This type of frame does not appear on the wire and is only returned</span>
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span><span class="comment">// by the Framer when Framer.ReadMetaHeaders is set.</span>
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span>type http2MetaHeadersFrame struct {
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span>	*http2HeadersFrame
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span>
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span>	<span class="comment">// Fields are the fields contained in the HEADERS and</span>
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span>	<span class="comment">// CONTINUATION frames. The underlying slice is owned by the</span>
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span>	<span class="comment">// Framer and must not be retained after the next call to</span>
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span>	<span class="comment">// ReadFrame.</span>
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span>	<span class="comment">// Fields are guaranteed to be in the correct http2 order and</span>
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span>	<span class="comment">// not have unknown pseudo header fields or invalid header</span>
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span>	<span class="comment">// field names or values. Required pseudo header fields may be</span>
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span>	<span class="comment">// missing, however. Use the MetaHeadersFrame.Pseudo accessor</span>
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span>	<span class="comment">// method access pseudo headers.</span>
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span>	Fields []hpack.HeaderField
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span>
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span>	<span class="comment">// Truncated is whether the max header list size limit was hit</span>
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span>	<span class="comment">// and Fields is incomplete. The hpack decoder state is still</span>
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span>	<span class="comment">// valid, however.</span>
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span>	Truncated bool
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span>}
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span>
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span><span class="comment">// PseudoValue returns the given pseudo header field&#39;s value.</span>
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span><span class="comment">// The provided pseudo field should not contain the leading colon.</span>
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span>func (mh *http2MetaHeadersFrame) PseudoValue(pseudo string) string {
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span>	for _, hf := range mh.Fields {
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span>		if !hf.IsPseudo() {
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span>			return &#34;&#34;
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span>		}
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span>		if hf.Name[1:] == pseudo {
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span>			return hf.Value
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span>		}
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span>	}
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span>}
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span>
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span><span class="comment">// RegularFields returns the regular (non-pseudo) header fields of mh.</span>
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span><span class="comment">// The caller does not own the returned slice.</span>
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span>func (mh *http2MetaHeadersFrame) RegularFields() []hpack.HeaderField {
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span>	for i, hf := range mh.Fields {
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span>		if !hf.IsPseudo() {
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>			return mh.Fields[i:]
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>		}
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>	}
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>	return nil
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span>}
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span>
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span><span class="comment">// PseudoFields returns the pseudo header fields of mh.</span>
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span><span class="comment">// The caller does not own the returned slice.</span>
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span>func (mh *http2MetaHeadersFrame) PseudoFields() []hpack.HeaderField {
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span>	for i, hf := range mh.Fields {
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span>		if !hf.IsPseudo() {
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>			return mh.Fields[:i]
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>		}
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>	}
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>	return mh.Fields
<span id="L2887" class="ln">  2887&nbsp;&nbsp;</span>}
<span id="L2888" class="ln">  2888&nbsp;&nbsp;</span>
<span id="L2889" class="ln">  2889&nbsp;&nbsp;</span>func (mh *http2MetaHeadersFrame) checkPseudos() error {
<span id="L2890" class="ln">  2890&nbsp;&nbsp;</span>	var isRequest, isResponse bool
<span id="L2891" class="ln">  2891&nbsp;&nbsp;</span>	pf := mh.PseudoFields()
<span id="L2892" class="ln">  2892&nbsp;&nbsp;</span>	for i, hf := range pf {
<span id="L2893" class="ln">  2893&nbsp;&nbsp;</span>		switch hf.Name {
<span id="L2894" class="ln">  2894&nbsp;&nbsp;</span>		case &#34;:method&#34;, &#34;:path&#34;, &#34;:scheme&#34;, &#34;:authority&#34;:
<span id="L2895" class="ln">  2895&nbsp;&nbsp;</span>			isRequest = true
<span id="L2896" class="ln">  2896&nbsp;&nbsp;</span>		case &#34;:status&#34;:
<span id="L2897" class="ln">  2897&nbsp;&nbsp;</span>			isResponse = true
<span id="L2898" class="ln">  2898&nbsp;&nbsp;</span>		default:
<span id="L2899" class="ln">  2899&nbsp;&nbsp;</span>			return http2pseudoHeaderError(hf.Name)
<span id="L2900" class="ln">  2900&nbsp;&nbsp;</span>		}
<span id="L2901" class="ln">  2901&nbsp;&nbsp;</span>		<span class="comment">// Check for duplicates.</span>
<span id="L2902" class="ln">  2902&nbsp;&nbsp;</span>		<span class="comment">// This would be a bad algorithm, but N is 4.</span>
<span id="L2903" class="ln">  2903&nbsp;&nbsp;</span>		<span class="comment">// And this doesn&#39;t allocate.</span>
<span id="L2904" class="ln">  2904&nbsp;&nbsp;</span>		for _, hf2 := range pf[:i] {
<span id="L2905" class="ln">  2905&nbsp;&nbsp;</span>			if hf.Name == hf2.Name {
<span id="L2906" class="ln">  2906&nbsp;&nbsp;</span>				return http2duplicatePseudoHeaderError(hf.Name)
<span id="L2907" class="ln">  2907&nbsp;&nbsp;</span>			}
<span id="L2908" class="ln">  2908&nbsp;&nbsp;</span>		}
<span id="L2909" class="ln">  2909&nbsp;&nbsp;</span>	}
<span id="L2910" class="ln">  2910&nbsp;&nbsp;</span>	if isRequest &amp;&amp; isResponse {
<span id="L2911" class="ln">  2911&nbsp;&nbsp;</span>		return http2errMixPseudoHeaderTypes
<span id="L2912" class="ln">  2912&nbsp;&nbsp;</span>	}
<span id="L2913" class="ln">  2913&nbsp;&nbsp;</span>	return nil
<span id="L2914" class="ln">  2914&nbsp;&nbsp;</span>}
<span id="L2915" class="ln">  2915&nbsp;&nbsp;</span>
<span id="L2916" class="ln">  2916&nbsp;&nbsp;</span>func (fr *http2Framer) maxHeaderStringLen() int {
<span id="L2917" class="ln">  2917&nbsp;&nbsp;</span>	v := fr.maxHeaderListSize()
<span id="L2918" class="ln">  2918&nbsp;&nbsp;</span>	if uint32(int(v)) == v {
<span id="L2919" class="ln">  2919&nbsp;&nbsp;</span>		return int(v)
<span id="L2920" class="ln">  2920&nbsp;&nbsp;</span>	}
<span id="L2921" class="ln">  2921&nbsp;&nbsp;</span>	<span class="comment">// They had a crazy big number for MaxHeaderBytes anyway,</span>
<span id="L2922" class="ln">  2922&nbsp;&nbsp;</span>	<span class="comment">// so give them unlimited header lengths:</span>
<span id="L2923" class="ln">  2923&nbsp;&nbsp;</span>	return 0
<span id="L2924" class="ln">  2924&nbsp;&nbsp;</span>}
<span id="L2925" class="ln">  2925&nbsp;&nbsp;</span>
<span id="L2926" class="ln">  2926&nbsp;&nbsp;</span><span class="comment">// readMetaFrame returns 0 or more CONTINUATION frames from fr and</span>
<span id="L2927" class="ln">  2927&nbsp;&nbsp;</span><span class="comment">// merge them into the provided hf and returns a MetaHeadersFrame</span>
<span id="L2928" class="ln">  2928&nbsp;&nbsp;</span><span class="comment">// with the decoded hpack values.</span>
<span id="L2929" class="ln">  2929&nbsp;&nbsp;</span>func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFrame, error) {
<span id="L2930" class="ln">  2930&nbsp;&nbsp;</span>	if fr.AllowIllegalReads {
<span id="L2931" class="ln">  2931&nbsp;&nbsp;</span>		return nil, errors.New(&#34;illegal use of AllowIllegalReads with ReadMetaHeaders&#34;)
<span id="L2932" class="ln">  2932&nbsp;&nbsp;</span>	}
<span id="L2933" class="ln">  2933&nbsp;&nbsp;</span>	mh := &amp;http2MetaHeadersFrame{
<span id="L2934" class="ln">  2934&nbsp;&nbsp;</span>		http2HeadersFrame: hf,
<span id="L2935" class="ln">  2935&nbsp;&nbsp;</span>	}
<span id="L2936" class="ln">  2936&nbsp;&nbsp;</span>	var remainSize = fr.maxHeaderListSize()
<span id="L2937" class="ln">  2937&nbsp;&nbsp;</span>	var sawRegular bool
<span id="L2938" class="ln">  2938&nbsp;&nbsp;</span>
<span id="L2939" class="ln">  2939&nbsp;&nbsp;</span>	var invalid error <span class="comment">// pseudo header field errors</span>
<span id="L2940" class="ln">  2940&nbsp;&nbsp;</span>	hdec := fr.ReadMetaHeaders
<span id="L2941" class="ln">  2941&nbsp;&nbsp;</span>	hdec.SetEmitEnabled(true)
<span id="L2942" class="ln">  2942&nbsp;&nbsp;</span>	hdec.SetMaxStringLength(fr.maxHeaderStringLen())
<span id="L2943" class="ln">  2943&nbsp;&nbsp;</span>	hdec.SetEmitFunc(func(hf hpack.HeaderField) {
<span id="L2944" class="ln">  2944&nbsp;&nbsp;</span>		if http2VerboseLogs &amp;&amp; fr.logReads {
<span id="L2945" class="ln">  2945&nbsp;&nbsp;</span>			fr.debugReadLoggerf(&#34;http2: decoded hpack field %+v&#34;, hf)
<span id="L2946" class="ln">  2946&nbsp;&nbsp;</span>		}
<span id="L2947" class="ln">  2947&nbsp;&nbsp;</span>		if !httpguts.ValidHeaderFieldValue(hf.Value) {
<span id="L2948" class="ln">  2948&nbsp;&nbsp;</span>			<span class="comment">// Don&#39;t include the value in the error, because it may be sensitive.</span>
<span id="L2949" class="ln">  2949&nbsp;&nbsp;</span>			invalid = http2headerFieldValueError(hf.Name)
<span id="L2950" class="ln">  2950&nbsp;&nbsp;</span>		}
<span id="L2951" class="ln">  2951&nbsp;&nbsp;</span>		isPseudo := strings.HasPrefix(hf.Name, &#34;:&#34;)
<span id="L2952" class="ln">  2952&nbsp;&nbsp;</span>		if isPseudo {
<span id="L2953" class="ln">  2953&nbsp;&nbsp;</span>			if sawRegular {
<span id="L2954" class="ln">  2954&nbsp;&nbsp;</span>				invalid = http2errPseudoAfterRegular
<span id="L2955" class="ln">  2955&nbsp;&nbsp;</span>			}
<span id="L2956" class="ln">  2956&nbsp;&nbsp;</span>		} else {
<span id="L2957" class="ln">  2957&nbsp;&nbsp;</span>			sawRegular = true
<span id="L2958" class="ln">  2958&nbsp;&nbsp;</span>			if !http2validWireHeaderFieldName(hf.Name) {
<span id="L2959" class="ln">  2959&nbsp;&nbsp;</span>				invalid = http2headerFieldNameError(hf.Name)
<span id="L2960" class="ln">  2960&nbsp;&nbsp;</span>			}
<span id="L2961" class="ln">  2961&nbsp;&nbsp;</span>		}
<span id="L2962" class="ln">  2962&nbsp;&nbsp;</span>
<span id="L2963" class="ln">  2963&nbsp;&nbsp;</span>		if invalid != nil {
<span id="L2964" class="ln">  2964&nbsp;&nbsp;</span>			hdec.SetEmitEnabled(false)
<span id="L2965" class="ln">  2965&nbsp;&nbsp;</span>			return
<span id="L2966" class="ln">  2966&nbsp;&nbsp;</span>		}
<span id="L2967" class="ln">  2967&nbsp;&nbsp;</span>
<span id="L2968" class="ln">  2968&nbsp;&nbsp;</span>		size := hf.Size()
<span id="L2969" class="ln">  2969&nbsp;&nbsp;</span>		if size &gt; remainSize {
<span id="L2970" class="ln">  2970&nbsp;&nbsp;</span>			hdec.SetEmitEnabled(false)
<span id="L2971" class="ln">  2971&nbsp;&nbsp;</span>			mh.Truncated = true
<span id="L2972" class="ln">  2972&nbsp;&nbsp;</span>			remainSize = 0
<span id="L2973" class="ln">  2973&nbsp;&nbsp;</span>			return
<span id="L2974" class="ln">  2974&nbsp;&nbsp;</span>		}
<span id="L2975" class="ln">  2975&nbsp;&nbsp;</span>		remainSize -= size
<span id="L2976" class="ln">  2976&nbsp;&nbsp;</span>
<span id="L2977" class="ln">  2977&nbsp;&nbsp;</span>		mh.Fields = append(mh.Fields, hf)
<span id="L2978" class="ln">  2978&nbsp;&nbsp;</span>	})
<span id="L2979" class="ln">  2979&nbsp;&nbsp;</span>	<span class="comment">// Lose reference to MetaHeadersFrame:</span>
<span id="L2980" class="ln">  2980&nbsp;&nbsp;</span>	defer hdec.SetEmitFunc(func(hf hpack.HeaderField) {})
<span id="L2981" class="ln">  2981&nbsp;&nbsp;</span>
<span id="L2982" class="ln">  2982&nbsp;&nbsp;</span>	var hc http2headersOrContinuation = hf
<span id="L2983" class="ln">  2983&nbsp;&nbsp;</span>	for {
<span id="L2984" class="ln">  2984&nbsp;&nbsp;</span>		frag := hc.HeaderBlockFragment()
<span id="L2985" class="ln">  2985&nbsp;&nbsp;</span>
<span id="L2986" class="ln">  2986&nbsp;&nbsp;</span>		<span class="comment">// Avoid parsing large amounts of headers that we will then discard.</span>
<span id="L2987" class="ln">  2987&nbsp;&nbsp;</span>		<span class="comment">// If the sender exceeds the max header list size by too much,</span>
<span id="L2988" class="ln">  2988&nbsp;&nbsp;</span>		<span class="comment">// skip parsing the fragment and close the connection.</span>
<span id="L2989" class="ln">  2989&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L2990" class="ln">  2990&nbsp;&nbsp;</span>		<span class="comment">// &#34;Too much&#34; is either any CONTINUATION frame after we&#39;ve already</span>
<span id="L2991" class="ln">  2991&nbsp;&nbsp;</span>		<span class="comment">// exceeded the max header list size (in which case remainSize is 0),</span>
<span id="L2992" class="ln">  2992&nbsp;&nbsp;</span>		<span class="comment">// or a frame whose encoded size is more than twice the remaining</span>
<span id="L2993" class="ln">  2993&nbsp;&nbsp;</span>		<span class="comment">// header list bytes we&#39;re willing to accept.</span>
<span id="L2994" class="ln">  2994&nbsp;&nbsp;</span>		if int64(len(frag)) &gt; int64(2*remainSize) {
<span id="L2995" class="ln">  2995&nbsp;&nbsp;</span>			if http2VerboseLogs {
<span id="L2996" class="ln">  2996&nbsp;&nbsp;</span>				log.Printf(&#34;http2: header list too large&#34;)
<span id="L2997" class="ln">  2997&nbsp;&nbsp;</span>			}
<span id="L2998" class="ln">  2998&nbsp;&nbsp;</span>			<span class="comment">// It would be nice to send a RST_STREAM before sending the GOAWAY,</span>
<span id="L2999" class="ln">  2999&nbsp;&nbsp;</span>			<span class="comment">// but the struture of the server&#39;s frame writer makes this difficult.</span>
<span id="L3000" class="ln">  3000&nbsp;&nbsp;</span>			return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L3001" class="ln">  3001&nbsp;&nbsp;</span>		}
<span id="L3002" class="ln">  3002&nbsp;&nbsp;</span>
<span id="L3003" class="ln">  3003&nbsp;&nbsp;</span>		<span class="comment">// Also close the connection after any CONTINUATION frame following an</span>
<span id="L3004" class="ln">  3004&nbsp;&nbsp;</span>		<span class="comment">// invalid header, since we stop tracking the size of the headers after</span>
<span id="L3005" class="ln">  3005&nbsp;&nbsp;</span>		<span class="comment">// an invalid one.</span>
<span id="L3006" class="ln">  3006&nbsp;&nbsp;</span>		if invalid != nil {
<span id="L3007" class="ln">  3007&nbsp;&nbsp;</span>			if http2VerboseLogs {
<span id="L3008" class="ln">  3008&nbsp;&nbsp;</span>				log.Printf(&#34;http2: invalid header: %v&#34;, invalid)
<span id="L3009" class="ln">  3009&nbsp;&nbsp;</span>			}
<span id="L3010" class="ln">  3010&nbsp;&nbsp;</span>			<span class="comment">// It would be nice to send a RST_STREAM before sending the GOAWAY,</span>
<span id="L3011" class="ln">  3011&nbsp;&nbsp;</span>			<span class="comment">// but the struture of the server&#39;s frame writer makes this difficult.</span>
<span id="L3012" class="ln">  3012&nbsp;&nbsp;</span>			return nil, http2ConnectionError(http2ErrCodeProtocol)
<span id="L3013" class="ln">  3013&nbsp;&nbsp;</span>		}
<span id="L3014" class="ln">  3014&nbsp;&nbsp;</span>
<span id="L3015" class="ln">  3015&nbsp;&nbsp;</span>		if _, err := hdec.Write(frag); err != nil {
<span id="L3016" class="ln">  3016&nbsp;&nbsp;</span>			return nil, http2ConnectionError(http2ErrCodeCompression)
<span id="L3017" class="ln">  3017&nbsp;&nbsp;</span>		}
<span id="L3018" class="ln">  3018&nbsp;&nbsp;</span>
<span id="L3019" class="ln">  3019&nbsp;&nbsp;</span>		if hc.HeadersEnded() {
<span id="L3020" class="ln">  3020&nbsp;&nbsp;</span>			break
<span id="L3021" class="ln">  3021&nbsp;&nbsp;</span>		}
<span id="L3022" class="ln">  3022&nbsp;&nbsp;</span>		if f, err := fr.ReadFrame(); err != nil {
<span id="L3023" class="ln">  3023&nbsp;&nbsp;</span>			return nil, err
<span id="L3024" class="ln">  3024&nbsp;&nbsp;</span>		} else {
<span id="L3025" class="ln">  3025&nbsp;&nbsp;</span>			hc = f.(*http2ContinuationFrame) <span class="comment">// guaranteed by checkFrameOrder</span>
<span id="L3026" class="ln">  3026&nbsp;&nbsp;</span>		}
<span id="L3027" class="ln">  3027&nbsp;&nbsp;</span>	}
<span id="L3028" class="ln">  3028&nbsp;&nbsp;</span>
<span id="L3029" class="ln">  3029&nbsp;&nbsp;</span>	mh.http2HeadersFrame.headerFragBuf = nil
<span id="L3030" class="ln">  3030&nbsp;&nbsp;</span>	mh.http2HeadersFrame.invalidate()
<span id="L3031" class="ln">  3031&nbsp;&nbsp;</span>
<span id="L3032" class="ln">  3032&nbsp;&nbsp;</span>	if err := hdec.Close(); err != nil {
<span id="L3033" class="ln">  3033&nbsp;&nbsp;</span>		return nil, http2ConnectionError(http2ErrCodeCompression)
<span id="L3034" class="ln">  3034&nbsp;&nbsp;</span>	}
<span id="L3035" class="ln">  3035&nbsp;&nbsp;</span>	if invalid != nil {
<span id="L3036" class="ln">  3036&nbsp;&nbsp;</span>		fr.errDetail = invalid
<span id="L3037" class="ln">  3037&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L3038" class="ln">  3038&nbsp;&nbsp;</span>			log.Printf(&#34;http2: invalid header: %v&#34;, invalid)
<span id="L3039" class="ln">  3039&nbsp;&nbsp;</span>		}
<span id="L3040" class="ln">  3040&nbsp;&nbsp;</span>		return nil, http2StreamError{mh.StreamID, http2ErrCodeProtocol, invalid}
<span id="L3041" class="ln">  3041&nbsp;&nbsp;</span>	}
<span id="L3042" class="ln">  3042&nbsp;&nbsp;</span>	if err := mh.checkPseudos(); err != nil {
<span id="L3043" class="ln">  3043&nbsp;&nbsp;</span>		fr.errDetail = err
<span id="L3044" class="ln">  3044&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L3045" class="ln">  3045&nbsp;&nbsp;</span>			log.Printf(&#34;http2: invalid pseudo headers: %v&#34;, err)
<span id="L3046" class="ln">  3046&nbsp;&nbsp;</span>		}
<span id="L3047" class="ln">  3047&nbsp;&nbsp;</span>		return nil, http2StreamError{mh.StreamID, http2ErrCodeProtocol, err}
<span id="L3048" class="ln">  3048&nbsp;&nbsp;</span>	}
<span id="L3049" class="ln">  3049&nbsp;&nbsp;</span>	return mh, nil
<span id="L3050" class="ln">  3050&nbsp;&nbsp;</span>}
<span id="L3051" class="ln">  3051&nbsp;&nbsp;</span>
<span id="L3052" class="ln">  3052&nbsp;&nbsp;</span>func http2summarizeFrame(f http2Frame) string {
<span id="L3053" class="ln">  3053&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L3054" class="ln">  3054&nbsp;&nbsp;</span>	f.Header().writeDebug(&amp;buf)
<span id="L3055" class="ln">  3055&nbsp;&nbsp;</span>	switch f := f.(type) {
<span id="L3056" class="ln">  3056&nbsp;&nbsp;</span>	case *http2SettingsFrame:
<span id="L3057" class="ln">  3057&nbsp;&nbsp;</span>		n := 0
<span id="L3058" class="ln">  3058&nbsp;&nbsp;</span>		f.ForeachSetting(func(s http2Setting) error {
<span id="L3059" class="ln">  3059&nbsp;&nbsp;</span>			n++
<span id="L3060" class="ln">  3060&nbsp;&nbsp;</span>			if n == 1 {
<span id="L3061" class="ln">  3061&nbsp;&nbsp;</span>				buf.WriteString(&#34;, settings:&#34;)
<span id="L3062" class="ln">  3062&nbsp;&nbsp;</span>			}
<span id="L3063" class="ln">  3063&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;buf, &#34; %v=%v,&#34;, s.ID, s.Val)
<span id="L3064" class="ln">  3064&nbsp;&nbsp;</span>			return nil
<span id="L3065" class="ln">  3065&nbsp;&nbsp;</span>		})
<span id="L3066" class="ln">  3066&nbsp;&nbsp;</span>		if n &gt; 0 {
<span id="L3067" class="ln">  3067&nbsp;&nbsp;</span>			buf.Truncate(buf.Len() - 1) <span class="comment">// remove trailing comma</span>
<span id="L3068" class="ln">  3068&nbsp;&nbsp;</span>		}
<span id="L3069" class="ln">  3069&nbsp;&nbsp;</span>	case *http2DataFrame:
<span id="L3070" class="ln">  3070&nbsp;&nbsp;</span>		data := f.Data()
<span id="L3071" class="ln">  3071&nbsp;&nbsp;</span>		const max = 256
<span id="L3072" class="ln">  3072&nbsp;&nbsp;</span>		if len(data) &gt; max {
<span id="L3073" class="ln">  3073&nbsp;&nbsp;</span>			data = data[:max]
<span id="L3074" class="ln">  3074&nbsp;&nbsp;</span>		}
<span id="L3075" class="ln">  3075&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34; data=%q&#34;, data)
<span id="L3076" class="ln">  3076&nbsp;&nbsp;</span>		if len(f.Data()) &gt; max {
<span id="L3077" class="ln">  3077&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;buf, &#34; (%d bytes omitted)&#34;, len(f.Data())-max)
<span id="L3078" class="ln">  3078&nbsp;&nbsp;</span>		}
<span id="L3079" class="ln">  3079&nbsp;&nbsp;</span>	case *http2WindowUpdateFrame:
<span id="L3080" class="ln">  3080&nbsp;&nbsp;</span>		if f.StreamID == 0 {
<span id="L3081" class="ln">  3081&nbsp;&nbsp;</span>			buf.WriteString(&#34; (conn)&#34;)
<span id="L3082" class="ln">  3082&nbsp;&nbsp;</span>		}
<span id="L3083" class="ln">  3083&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34; incr=%v&#34;, f.Increment)
<span id="L3084" class="ln">  3084&nbsp;&nbsp;</span>	case *http2PingFrame:
<span id="L3085" class="ln">  3085&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34; ping=%q&#34;, f.Data[:])
<span id="L3086" class="ln">  3086&nbsp;&nbsp;</span>	case *http2GoAwayFrame:
<span id="L3087" class="ln">  3087&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34; LastStreamID=%v ErrCode=%v Debug=%q&#34;,
<span id="L3088" class="ln">  3088&nbsp;&nbsp;</span>			f.LastStreamID, f.ErrCode, f.debugData)
<span id="L3089" class="ln">  3089&nbsp;&nbsp;</span>	case *http2RSTStreamFrame:
<span id="L3090" class="ln">  3090&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;buf, &#34; ErrCode=%v&#34;, f.ErrCode)
<span id="L3091" class="ln">  3091&nbsp;&nbsp;</span>	}
<span id="L3092" class="ln">  3092&nbsp;&nbsp;</span>	return buf.String()
<span id="L3093" class="ln">  3093&nbsp;&nbsp;</span>}
<span id="L3094" class="ln">  3094&nbsp;&nbsp;</span>
<span id="L3095" class="ln">  3095&nbsp;&nbsp;</span>var http2DebugGoroutines = os.Getenv(&#34;DEBUG_HTTP2_GOROUTINES&#34;) == &#34;1&#34;
<span id="L3096" class="ln">  3096&nbsp;&nbsp;</span>
<span id="L3097" class="ln">  3097&nbsp;&nbsp;</span>type http2goroutineLock uint64
<span id="L3098" class="ln">  3098&nbsp;&nbsp;</span>
<span id="L3099" class="ln">  3099&nbsp;&nbsp;</span>func http2newGoroutineLock() http2goroutineLock {
<span id="L3100" class="ln">  3100&nbsp;&nbsp;</span>	if !http2DebugGoroutines {
<span id="L3101" class="ln">  3101&nbsp;&nbsp;</span>		return 0
<span id="L3102" class="ln">  3102&nbsp;&nbsp;</span>	}
<span id="L3103" class="ln">  3103&nbsp;&nbsp;</span>	return http2goroutineLock(http2curGoroutineID())
<span id="L3104" class="ln">  3104&nbsp;&nbsp;</span>}
<span id="L3105" class="ln">  3105&nbsp;&nbsp;</span>
<span id="L3106" class="ln">  3106&nbsp;&nbsp;</span>func (g http2goroutineLock) check() {
<span id="L3107" class="ln">  3107&nbsp;&nbsp;</span>	if !http2DebugGoroutines {
<span id="L3108" class="ln">  3108&nbsp;&nbsp;</span>		return
<span id="L3109" class="ln">  3109&nbsp;&nbsp;</span>	}
<span id="L3110" class="ln">  3110&nbsp;&nbsp;</span>	if http2curGoroutineID() != uint64(g) {
<span id="L3111" class="ln">  3111&nbsp;&nbsp;</span>		panic(&#34;running on the wrong goroutine&#34;)
<span id="L3112" class="ln">  3112&nbsp;&nbsp;</span>	}
<span id="L3113" class="ln">  3113&nbsp;&nbsp;</span>}
<span id="L3114" class="ln">  3114&nbsp;&nbsp;</span>
<span id="L3115" class="ln">  3115&nbsp;&nbsp;</span>func (g http2goroutineLock) checkNotOn() {
<span id="L3116" class="ln">  3116&nbsp;&nbsp;</span>	if !http2DebugGoroutines {
<span id="L3117" class="ln">  3117&nbsp;&nbsp;</span>		return
<span id="L3118" class="ln">  3118&nbsp;&nbsp;</span>	}
<span id="L3119" class="ln">  3119&nbsp;&nbsp;</span>	if http2curGoroutineID() == uint64(g) {
<span id="L3120" class="ln">  3120&nbsp;&nbsp;</span>		panic(&#34;running on the wrong goroutine&#34;)
<span id="L3121" class="ln">  3121&nbsp;&nbsp;</span>	}
<span id="L3122" class="ln">  3122&nbsp;&nbsp;</span>}
<span id="L3123" class="ln">  3123&nbsp;&nbsp;</span>
<span id="L3124" class="ln">  3124&nbsp;&nbsp;</span>var http2goroutineSpace = []byte(&#34;goroutine &#34;)
<span id="L3125" class="ln">  3125&nbsp;&nbsp;</span>
<span id="L3126" class="ln">  3126&nbsp;&nbsp;</span>func http2curGoroutineID() uint64 {
<span id="L3127" class="ln">  3127&nbsp;&nbsp;</span>	bp := http2littleBuf.Get().(*[]byte)
<span id="L3128" class="ln">  3128&nbsp;&nbsp;</span>	defer http2littleBuf.Put(bp)
<span id="L3129" class="ln">  3129&nbsp;&nbsp;</span>	b := *bp
<span id="L3130" class="ln">  3130&nbsp;&nbsp;</span>	b = b[:runtime.Stack(b, false)]
<span id="L3131" class="ln">  3131&nbsp;&nbsp;</span>	<span class="comment">// Parse the 4707 out of &#34;goroutine 4707 [&#34;</span>
<span id="L3132" class="ln">  3132&nbsp;&nbsp;</span>	b = bytes.TrimPrefix(b, http2goroutineSpace)
<span id="L3133" class="ln">  3133&nbsp;&nbsp;</span>	i := bytes.IndexByte(b, &#39; &#39;)
<span id="L3134" class="ln">  3134&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L3135" class="ln">  3135&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;No space found in %q&#34;, b))
<span id="L3136" class="ln">  3136&nbsp;&nbsp;</span>	}
<span id="L3137" class="ln">  3137&nbsp;&nbsp;</span>	b = b[:i]
<span id="L3138" class="ln">  3138&nbsp;&nbsp;</span>	n, err := http2parseUintBytes(b, 10, 64)
<span id="L3139" class="ln">  3139&nbsp;&nbsp;</span>	if err != nil {
<span id="L3140" class="ln">  3140&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;Failed to parse goroutine ID out of %q: %v&#34;, b, err))
<span id="L3141" class="ln">  3141&nbsp;&nbsp;</span>	}
<span id="L3142" class="ln">  3142&nbsp;&nbsp;</span>	return n
<span id="L3143" class="ln">  3143&nbsp;&nbsp;</span>}
<span id="L3144" class="ln">  3144&nbsp;&nbsp;</span>
<span id="L3145" class="ln">  3145&nbsp;&nbsp;</span>var http2littleBuf = sync.Pool{
<span id="L3146" class="ln">  3146&nbsp;&nbsp;</span>	New: func() interface{} {
<span id="L3147" class="ln">  3147&nbsp;&nbsp;</span>		buf := make([]byte, 64)
<span id="L3148" class="ln">  3148&nbsp;&nbsp;</span>		return &amp;buf
<span id="L3149" class="ln">  3149&nbsp;&nbsp;</span>	},
<span id="L3150" class="ln">  3150&nbsp;&nbsp;</span>}
<span id="L3151" class="ln">  3151&nbsp;&nbsp;</span>
<span id="L3152" class="ln">  3152&nbsp;&nbsp;</span><span class="comment">// parseUintBytes is like strconv.ParseUint, but using a []byte.</span>
<span id="L3153" class="ln">  3153&nbsp;&nbsp;</span>func http2parseUintBytes(s []byte, base int, bitSize int) (n uint64, err error) {
<span id="L3154" class="ln">  3154&nbsp;&nbsp;</span>	var cutoff, maxVal uint64
<span id="L3155" class="ln">  3155&nbsp;&nbsp;</span>
<span id="L3156" class="ln">  3156&nbsp;&nbsp;</span>	if bitSize == 0 {
<span id="L3157" class="ln">  3157&nbsp;&nbsp;</span>		bitSize = int(strconv.IntSize)
<span id="L3158" class="ln">  3158&nbsp;&nbsp;</span>	}
<span id="L3159" class="ln">  3159&nbsp;&nbsp;</span>
<span id="L3160" class="ln">  3160&nbsp;&nbsp;</span>	s0 := s
<span id="L3161" class="ln">  3161&nbsp;&nbsp;</span>	switch {
<span id="L3162" class="ln">  3162&nbsp;&nbsp;</span>	case len(s) &lt; 1:
<span id="L3163" class="ln">  3163&nbsp;&nbsp;</span>		err = strconv.ErrSyntax
<span id="L3164" class="ln">  3164&nbsp;&nbsp;</span>		goto Error
<span id="L3165" class="ln">  3165&nbsp;&nbsp;</span>
<span id="L3166" class="ln">  3166&nbsp;&nbsp;</span>	case 2 &lt;= base &amp;&amp; base &lt;= 36:
<span id="L3167" class="ln">  3167&nbsp;&nbsp;</span>		<span class="comment">// valid base; nothing to do</span>
<span id="L3168" class="ln">  3168&nbsp;&nbsp;</span>
<span id="L3169" class="ln">  3169&nbsp;&nbsp;</span>	case base == 0:
<span id="L3170" class="ln">  3170&nbsp;&nbsp;</span>		<span class="comment">// Look for octal, hex prefix.</span>
<span id="L3171" class="ln">  3171&nbsp;&nbsp;</span>		switch {
<span id="L3172" class="ln">  3172&nbsp;&nbsp;</span>		case s[0] == &#39;0&#39; &amp;&amp; len(s) &gt; 1 &amp;&amp; (s[1] == &#39;x&#39; || s[1] == &#39;X&#39;):
<span id="L3173" class="ln">  3173&nbsp;&nbsp;</span>			base = 16
<span id="L3174" class="ln">  3174&nbsp;&nbsp;</span>			s = s[2:]
<span id="L3175" class="ln">  3175&nbsp;&nbsp;</span>			if len(s) &lt; 1 {
<span id="L3176" class="ln">  3176&nbsp;&nbsp;</span>				err = strconv.ErrSyntax
<span id="L3177" class="ln">  3177&nbsp;&nbsp;</span>				goto Error
<span id="L3178" class="ln">  3178&nbsp;&nbsp;</span>			}
<span id="L3179" class="ln">  3179&nbsp;&nbsp;</span>		case s[0] == &#39;0&#39;:
<span id="L3180" class="ln">  3180&nbsp;&nbsp;</span>			base = 8
<span id="L3181" class="ln">  3181&nbsp;&nbsp;</span>		default:
<span id="L3182" class="ln">  3182&nbsp;&nbsp;</span>			base = 10
<span id="L3183" class="ln">  3183&nbsp;&nbsp;</span>		}
<span id="L3184" class="ln">  3184&nbsp;&nbsp;</span>
<span id="L3185" class="ln">  3185&nbsp;&nbsp;</span>	default:
<span id="L3186" class="ln">  3186&nbsp;&nbsp;</span>		err = errors.New(&#34;invalid base &#34; + strconv.Itoa(base))
<span id="L3187" class="ln">  3187&nbsp;&nbsp;</span>		goto Error
<span id="L3188" class="ln">  3188&nbsp;&nbsp;</span>	}
<span id="L3189" class="ln">  3189&nbsp;&nbsp;</span>
<span id="L3190" class="ln">  3190&nbsp;&nbsp;</span>	n = 0
<span id="L3191" class="ln">  3191&nbsp;&nbsp;</span>	cutoff = http2cutoff64(base)
<span id="L3192" class="ln">  3192&nbsp;&nbsp;</span>	maxVal = 1&lt;&lt;uint(bitSize) - 1
<span id="L3193" class="ln">  3193&nbsp;&nbsp;</span>
<span id="L3194" class="ln">  3194&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L3195" class="ln">  3195&nbsp;&nbsp;</span>		var v byte
<span id="L3196" class="ln">  3196&nbsp;&nbsp;</span>		d := s[i]
<span id="L3197" class="ln">  3197&nbsp;&nbsp;</span>		switch {
<span id="L3198" class="ln">  3198&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= d &amp;&amp; d &lt;= &#39;9&#39;:
<span id="L3199" class="ln">  3199&nbsp;&nbsp;</span>			v = d - &#39;0&#39;
<span id="L3200" class="ln">  3200&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= d &amp;&amp; d &lt;= &#39;z&#39;:
<span id="L3201" class="ln">  3201&nbsp;&nbsp;</span>			v = d - &#39;a&#39; + 10
<span id="L3202" class="ln">  3202&nbsp;&nbsp;</span>		case &#39;A&#39; &lt;= d &amp;&amp; d &lt;= &#39;Z&#39;:
<span id="L3203" class="ln">  3203&nbsp;&nbsp;</span>			v = d - &#39;A&#39; + 10
<span id="L3204" class="ln">  3204&nbsp;&nbsp;</span>		default:
<span id="L3205" class="ln">  3205&nbsp;&nbsp;</span>			n = 0
<span id="L3206" class="ln">  3206&nbsp;&nbsp;</span>			err = strconv.ErrSyntax
<span id="L3207" class="ln">  3207&nbsp;&nbsp;</span>			goto Error
<span id="L3208" class="ln">  3208&nbsp;&nbsp;</span>		}
<span id="L3209" class="ln">  3209&nbsp;&nbsp;</span>		if int(v) &gt;= base {
<span id="L3210" class="ln">  3210&nbsp;&nbsp;</span>			n = 0
<span id="L3211" class="ln">  3211&nbsp;&nbsp;</span>			err = strconv.ErrSyntax
<span id="L3212" class="ln">  3212&nbsp;&nbsp;</span>			goto Error
<span id="L3213" class="ln">  3213&nbsp;&nbsp;</span>		}
<span id="L3214" class="ln">  3214&nbsp;&nbsp;</span>
<span id="L3215" class="ln">  3215&nbsp;&nbsp;</span>		if n &gt;= cutoff {
<span id="L3216" class="ln">  3216&nbsp;&nbsp;</span>			<span class="comment">// n*base overflows</span>
<span id="L3217" class="ln">  3217&nbsp;&nbsp;</span>			n = 1&lt;&lt;64 - 1
<span id="L3218" class="ln">  3218&nbsp;&nbsp;</span>			err = strconv.ErrRange
<span id="L3219" class="ln">  3219&nbsp;&nbsp;</span>			goto Error
<span id="L3220" class="ln">  3220&nbsp;&nbsp;</span>		}
<span id="L3221" class="ln">  3221&nbsp;&nbsp;</span>		n *= uint64(base)
<span id="L3222" class="ln">  3222&nbsp;&nbsp;</span>
<span id="L3223" class="ln">  3223&nbsp;&nbsp;</span>		n1 := n + uint64(v)
<span id="L3224" class="ln">  3224&nbsp;&nbsp;</span>		if n1 &lt; n || n1 &gt; maxVal {
<span id="L3225" class="ln">  3225&nbsp;&nbsp;</span>			<span class="comment">// n+v overflows</span>
<span id="L3226" class="ln">  3226&nbsp;&nbsp;</span>			n = 1&lt;&lt;64 - 1
<span id="L3227" class="ln">  3227&nbsp;&nbsp;</span>			err = strconv.ErrRange
<span id="L3228" class="ln">  3228&nbsp;&nbsp;</span>			goto Error
<span id="L3229" class="ln">  3229&nbsp;&nbsp;</span>		}
<span id="L3230" class="ln">  3230&nbsp;&nbsp;</span>		n = n1
<span id="L3231" class="ln">  3231&nbsp;&nbsp;</span>	}
<span id="L3232" class="ln">  3232&nbsp;&nbsp;</span>
<span id="L3233" class="ln">  3233&nbsp;&nbsp;</span>	return n, nil
<span id="L3234" class="ln">  3234&nbsp;&nbsp;</span>
<span id="L3235" class="ln">  3235&nbsp;&nbsp;</span>Error:
<span id="L3236" class="ln">  3236&nbsp;&nbsp;</span>	return n, &amp;strconv.NumError{Func: &#34;ParseUint&#34;, Num: string(s0), Err: err}
<span id="L3237" class="ln">  3237&nbsp;&nbsp;</span>}
<span id="L3238" class="ln">  3238&nbsp;&nbsp;</span>
<span id="L3239" class="ln">  3239&nbsp;&nbsp;</span><span class="comment">// Return the first number n such that n*base &gt;= 1&lt;&lt;64.</span>
<span id="L3240" class="ln">  3240&nbsp;&nbsp;</span>func http2cutoff64(base int) uint64 {
<span id="L3241" class="ln">  3241&nbsp;&nbsp;</span>	if base &lt; 2 {
<span id="L3242" class="ln">  3242&nbsp;&nbsp;</span>		return 0
<span id="L3243" class="ln">  3243&nbsp;&nbsp;</span>	}
<span id="L3244" class="ln">  3244&nbsp;&nbsp;</span>	return (1&lt;&lt;64-1)/uint64(base) + 1
<span id="L3245" class="ln">  3245&nbsp;&nbsp;</span>}
<span id="L3246" class="ln">  3246&nbsp;&nbsp;</span>
<span id="L3247" class="ln">  3247&nbsp;&nbsp;</span>var (
<span id="L3248" class="ln">  3248&nbsp;&nbsp;</span>	http2commonBuildOnce   sync.Once
<span id="L3249" class="ln">  3249&nbsp;&nbsp;</span>	http2commonLowerHeader map[string]string <span class="comment">// Go-Canonical-Case -&gt; lower-case</span>
<span id="L3250" class="ln">  3250&nbsp;&nbsp;</span>	http2commonCanonHeader map[string]string <span class="comment">// lower-case -&gt; Go-Canonical-Case</span>
<span id="L3251" class="ln">  3251&nbsp;&nbsp;</span>)
<span id="L3252" class="ln">  3252&nbsp;&nbsp;</span>
<span id="L3253" class="ln">  3253&nbsp;&nbsp;</span>func http2buildCommonHeaderMapsOnce() {
<span id="L3254" class="ln">  3254&nbsp;&nbsp;</span>	http2commonBuildOnce.Do(http2buildCommonHeaderMaps)
<span id="L3255" class="ln">  3255&nbsp;&nbsp;</span>}
<span id="L3256" class="ln">  3256&nbsp;&nbsp;</span>
<span id="L3257" class="ln">  3257&nbsp;&nbsp;</span>func http2buildCommonHeaderMaps() {
<span id="L3258" class="ln">  3258&nbsp;&nbsp;</span>	common := []string{
<span id="L3259" class="ln">  3259&nbsp;&nbsp;</span>		&#34;accept&#34;,
<span id="L3260" class="ln">  3260&nbsp;&nbsp;</span>		&#34;accept-charset&#34;,
<span id="L3261" class="ln">  3261&nbsp;&nbsp;</span>		&#34;accept-encoding&#34;,
<span id="L3262" class="ln">  3262&nbsp;&nbsp;</span>		&#34;accept-language&#34;,
<span id="L3263" class="ln">  3263&nbsp;&nbsp;</span>		&#34;accept-ranges&#34;,
<span id="L3264" class="ln">  3264&nbsp;&nbsp;</span>		&#34;age&#34;,
<span id="L3265" class="ln">  3265&nbsp;&nbsp;</span>		&#34;access-control-allow-credentials&#34;,
<span id="L3266" class="ln">  3266&nbsp;&nbsp;</span>		&#34;access-control-allow-headers&#34;,
<span id="L3267" class="ln">  3267&nbsp;&nbsp;</span>		&#34;access-control-allow-methods&#34;,
<span id="L3268" class="ln">  3268&nbsp;&nbsp;</span>		&#34;access-control-allow-origin&#34;,
<span id="L3269" class="ln">  3269&nbsp;&nbsp;</span>		&#34;access-control-expose-headers&#34;,
<span id="L3270" class="ln">  3270&nbsp;&nbsp;</span>		&#34;access-control-max-age&#34;,
<span id="L3271" class="ln">  3271&nbsp;&nbsp;</span>		&#34;access-control-request-headers&#34;,
<span id="L3272" class="ln">  3272&nbsp;&nbsp;</span>		&#34;access-control-request-method&#34;,
<span id="L3273" class="ln">  3273&nbsp;&nbsp;</span>		&#34;allow&#34;,
<span id="L3274" class="ln">  3274&nbsp;&nbsp;</span>		&#34;authorization&#34;,
<span id="L3275" class="ln">  3275&nbsp;&nbsp;</span>		&#34;cache-control&#34;,
<span id="L3276" class="ln">  3276&nbsp;&nbsp;</span>		&#34;content-disposition&#34;,
<span id="L3277" class="ln">  3277&nbsp;&nbsp;</span>		&#34;content-encoding&#34;,
<span id="L3278" class="ln">  3278&nbsp;&nbsp;</span>		&#34;content-language&#34;,
<span id="L3279" class="ln">  3279&nbsp;&nbsp;</span>		&#34;content-length&#34;,
<span id="L3280" class="ln">  3280&nbsp;&nbsp;</span>		&#34;content-location&#34;,
<span id="L3281" class="ln">  3281&nbsp;&nbsp;</span>		&#34;content-range&#34;,
<span id="L3282" class="ln">  3282&nbsp;&nbsp;</span>		&#34;content-type&#34;,
<span id="L3283" class="ln">  3283&nbsp;&nbsp;</span>		&#34;cookie&#34;,
<span id="L3284" class="ln">  3284&nbsp;&nbsp;</span>		&#34;date&#34;,
<span id="L3285" class="ln">  3285&nbsp;&nbsp;</span>		&#34;etag&#34;,
<span id="L3286" class="ln">  3286&nbsp;&nbsp;</span>		&#34;expect&#34;,
<span id="L3287" class="ln">  3287&nbsp;&nbsp;</span>		&#34;expires&#34;,
<span id="L3288" class="ln">  3288&nbsp;&nbsp;</span>		&#34;from&#34;,
<span id="L3289" class="ln">  3289&nbsp;&nbsp;</span>		&#34;host&#34;,
<span id="L3290" class="ln">  3290&nbsp;&nbsp;</span>		&#34;if-match&#34;,
<span id="L3291" class="ln">  3291&nbsp;&nbsp;</span>		&#34;if-modified-since&#34;,
<span id="L3292" class="ln">  3292&nbsp;&nbsp;</span>		&#34;if-none-match&#34;,
<span id="L3293" class="ln">  3293&nbsp;&nbsp;</span>		&#34;if-unmodified-since&#34;,
<span id="L3294" class="ln">  3294&nbsp;&nbsp;</span>		&#34;last-modified&#34;,
<span id="L3295" class="ln">  3295&nbsp;&nbsp;</span>		&#34;link&#34;,
<span id="L3296" class="ln">  3296&nbsp;&nbsp;</span>		&#34;location&#34;,
<span id="L3297" class="ln">  3297&nbsp;&nbsp;</span>		&#34;max-forwards&#34;,
<span id="L3298" class="ln">  3298&nbsp;&nbsp;</span>		&#34;origin&#34;,
<span id="L3299" class="ln">  3299&nbsp;&nbsp;</span>		&#34;proxy-authenticate&#34;,
<span id="L3300" class="ln">  3300&nbsp;&nbsp;</span>		&#34;proxy-authorization&#34;,
<span id="L3301" class="ln">  3301&nbsp;&nbsp;</span>		&#34;range&#34;,
<span id="L3302" class="ln">  3302&nbsp;&nbsp;</span>		&#34;referer&#34;,
<span id="L3303" class="ln">  3303&nbsp;&nbsp;</span>		&#34;refresh&#34;,
<span id="L3304" class="ln">  3304&nbsp;&nbsp;</span>		&#34;retry-after&#34;,
<span id="L3305" class="ln">  3305&nbsp;&nbsp;</span>		&#34;server&#34;,
<span id="L3306" class="ln">  3306&nbsp;&nbsp;</span>		&#34;set-cookie&#34;,
<span id="L3307" class="ln">  3307&nbsp;&nbsp;</span>		&#34;strict-transport-security&#34;,
<span id="L3308" class="ln">  3308&nbsp;&nbsp;</span>		&#34;trailer&#34;,
<span id="L3309" class="ln">  3309&nbsp;&nbsp;</span>		&#34;transfer-encoding&#34;,
<span id="L3310" class="ln">  3310&nbsp;&nbsp;</span>		&#34;user-agent&#34;,
<span id="L3311" class="ln">  3311&nbsp;&nbsp;</span>		&#34;vary&#34;,
<span id="L3312" class="ln">  3312&nbsp;&nbsp;</span>		&#34;via&#34;,
<span id="L3313" class="ln">  3313&nbsp;&nbsp;</span>		&#34;www-authenticate&#34;,
<span id="L3314" class="ln">  3314&nbsp;&nbsp;</span>		&#34;x-forwarded-for&#34;,
<span id="L3315" class="ln">  3315&nbsp;&nbsp;</span>		&#34;x-forwarded-proto&#34;,
<span id="L3316" class="ln">  3316&nbsp;&nbsp;</span>	}
<span id="L3317" class="ln">  3317&nbsp;&nbsp;</span>	http2commonLowerHeader = make(map[string]string, len(common))
<span id="L3318" class="ln">  3318&nbsp;&nbsp;</span>	http2commonCanonHeader = make(map[string]string, len(common))
<span id="L3319" class="ln">  3319&nbsp;&nbsp;</span>	for _, v := range common {
<span id="L3320" class="ln">  3320&nbsp;&nbsp;</span>		chk := CanonicalHeaderKey(v)
<span id="L3321" class="ln">  3321&nbsp;&nbsp;</span>		http2commonLowerHeader[chk] = v
<span id="L3322" class="ln">  3322&nbsp;&nbsp;</span>		http2commonCanonHeader[v] = chk
<span id="L3323" class="ln">  3323&nbsp;&nbsp;</span>	}
<span id="L3324" class="ln">  3324&nbsp;&nbsp;</span>}
<span id="L3325" class="ln">  3325&nbsp;&nbsp;</span>
<span id="L3326" class="ln">  3326&nbsp;&nbsp;</span>func http2lowerHeader(v string) (lower string, ascii bool) {
<span id="L3327" class="ln">  3327&nbsp;&nbsp;</span>	http2buildCommonHeaderMapsOnce()
<span id="L3328" class="ln">  3328&nbsp;&nbsp;</span>	if s, ok := http2commonLowerHeader[v]; ok {
<span id="L3329" class="ln">  3329&nbsp;&nbsp;</span>		return s, true
<span id="L3330" class="ln">  3330&nbsp;&nbsp;</span>	}
<span id="L3331" class="ln">  3331&nbsp;&nbsp;</span>	return http2asciiToLower(v)
<span id="L3332" class="ln">  3332&nbsp;&nbsp;</span>}
<span id="L3333" class="ln">  3333&nbsp;&nbsp;</span>
<span id="L3334" class="ln">  3334&nbsp;&nbsp;</span>func http2canonicalHeader(v string) string {
<span id="L3335" class="ln">  3335&nbsp;&nbsp;</span>	http2buildCommonHeaderMapsOnce()
<span id="L3336" class="ln">  3336&nbsp;&nbsp;</span>	if s, ok := http2commonCanonHeader[v]; ok {
<span id="L3337" class="ln">  3337&nbsp;&nbsp;</span>		return s
<span id="L3338" class="ln">  3338&nbsp;&nbsp;</span>	}
<span id="L3339" class="ln">  3339&nbsp;&nbsp;</span>	return CanonicalHeaderKey(v)
<span id="L3340" class="ln">  3340&nbsp;&nbsp;</span>}
<span id="L3341" class="ln">  3341&nbsp;&nbsp;</span>
<span id="L3342" class="ln">  3342&nbsp;&nbsp;</span>var (
<span id="L3343" class="ln">  3343&nbsp;&nbsp;</span>	http2VerboseLogs    bool
<span id="L3344" class="ln">  3344&nbsp;&nbsp;</span>	http2logFrameWrites bool
<span id="L3345" class="ln">  3345&nbsp;&nbsp;</span>	http2logFrameReads  bool
<span id="L3346" class="ln">  3346&nbsp;&nbsp;</span>	http2inTests        bool
<span id="L3347" class="ln">  3347&nbsp;&nbsp;</span>)
<span id="L3348" class="ln">  3348&nbsp;&nbsp;</span>
<span id="L3349" class="ln">  3349&nbsp;&nbsp;</span>func init() {
<span id="L3350" class="ln">  3350&nbsp;&nbsp;</span>	e := os.Getenv(&#34;GODEBUG&#34;)
<span id="L3351" class="ln">  3351&nbsp;&nbsp;</span>	if strings.Contains(e, &#34;http2debug=1&#34;) {
<span id="L3352" class="ln">  3352&nbsp;&nbsp;</span>		http2VerboseLogs = true
<span id="L3353" class="ln">  3353&nbsp;&nbsp;</span>	}
<span id="L3354" class="ln">  3354&nbsp;&nbsp;</span>	if strings.Contains(e, &#34;http2debug=2&#34;) {
<span id="L3355" class="ln">  3355&nbsp;&nbsp;</span>		http2VerboseLogs = true
<span id="L3356" class="ln">  3356&nbsp;&nbsp;</span>		http2logFrameWrites = true
<span id="L3357" class="ln">  3357&nbsp;&nbsp;</span>		http2logFrameReads = true
<span id="L3358" class="ln">  3358&nbsp;&nbsp;</span>	}
<span id="L3359" class="ln">  3359&nbsp;&nbsp;</span>}
<span id="L3360" class="ln">  3360&nbsp;&nbsp;</span>
<span id="L3361" class="ln">  3361&nbsp;&nbsp;</span>const (
<span id="L3362" class="ln">  3362&nbsp;&nbsp;</span>	<span class="comment">// ClientPreface is the string that must be sent by new</span>
<span id="L3363" class="ln">  3363&nbsp;&nbsp;</span>	<span class="comment">// connections from clients.</span>
<span id="L3364" class="ln">  3364&nbsp;&nbsp;</span>	http2ClientPreface = &#34;PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n&#34;
<span id="L3365" class="ln">  3365&nbsp;&nbsp;</span>
<span id="L3366" class="ln">  3366&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_MAX_FRAME_SIZE default</span>
<span id="L3367" class="ln">  3367&nbsp;&nbsp;</span>	<span class="comment">// https://httpwg.org/specs/rfc7540.html#rfc.section.6.5.2</span>
<span id="L3368" class="ln">  3368&nbsp;&nbsp;</span>	http2initialMaxFrameSize = 16384
<span id="L3369" class="ln">  3369&nbsp;&nbsp;</span>
<span id="L3370" class="ln">  3370&nbsp;&nbsp;</span>	<span class="comment">// NextProtoTLS is the NPN/ALPN protocol negotiated during</span>
<span id="L3371" class="ln">  3371&nbsp;&nbsp;</span>	<span class="comment">// HTTP/2&#39;s TLS setup.</span>
<span id="L3372" class="ln">  3372&nbsp;&nbsp;</span>	http2NextProtoTLS = &#34;h2&#34;
<span id="L3373" class="ln">  3373&nbsp;&nbsp;</span>
<span id="L3374" class="ln">  3374&nbsp;&nbsp;</span>	<span class="comment">// https://httpwg.org/specs/rfc7540.html#SettingValues</span>
<span id="L3375" class="ln">  3375&nbsp;&nbsp;</span>	http2initialHeaderTableSize = 4096
<span id="L3376" class="ln">  3376&nbsp;&nbsp;</span>
<span id="L3377" class="ln">  3377&nbsp;&nbsp;</span>	http2initialWindowSize = 65535 <span class="comment">// 6.9.2 Initial Flow Control Window Size</span>
<span id="L3378" class="ln">  3378&nbsp;&nbsp;</span>
<span id="L3379" class="ln">  3379&nbsp;&nbsp;</span>	http2defaultMaxReadFrameSize = 1 &lt;&lt; 20
<span id="L3380" class="ln">  3380&nbsp;&nbsp;</span>)
<span id="L3381" class="ln">  3381&nbsp;&nbsp;</span>
<span id="L3382" class="ln">  3382&nbsp;&nbsp;</span>var (
<span id="L3383" class="ln">  3383&nbsp;&nbsp;</span>	http2clientPreface = []byte(http2ClientPreface)
<span id="L3384" class="ln">  3384&nbsp;&nbsp;</span>)
<span id="L3385" class="ln">  3385&nbsp;&nbsp;</span>
<span id="L3386" class="ln">  3386&nbsp;&nbsp;</span>type http2streamState int
<span id="L3387" class="ln">  3387&nbsp;&nbsp;</span>
<span id="L3388" class="ln">  3388&nbsp;&nbsp;</span><span class="comment">// HTTP/2 stream states.</span>
<span id="L3389" class="ln">  3389&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3390" class="ln">  3390&nbsp;&nbsp;</span><span class="comment">// See http://tools.ietf.org/html/rfc7540#section-5.1.</span>
<span id="L3391" class="ln">  3391&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3392" class="ln">  3392&nbsp;&nbsp;</span><span class="comment">// For simplicity, the server code merges &#34;reserved (local)&#34; into</span>
<span id="L3393" class="ln">  3393&nbsp;&nbsp;</span><span class="comment">// &#34;half-closed (remote)&#34;. This is one less state transition to track.</span>
<span id="L3394" class="ln">  3394&nbsp;&nbsp;</span><span class="comment">// The only downside is that we send PUSH_PROMISEs slightly less</span>
<span id="L3395" class="ln">  3395&nbsp;&nbsp;</span><span class="comment">// liberally than allowable. More discussion here:</span>
<span id="L3396" class="ln">  3396&nbsp;&nbsp;</span><span class="comment">// https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html</span>
<span id="L3397" class="ln">  3397&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3398" class="ln">  3398&nbsp;&nbsp;</span><span class="comment">// &#34;reserved (remote)&#34; is omitted since the client code does not</span>
<span id="L3399" class="ln">  3399&nbsp;&nbsp;</span><span class="comment">// support server push.</span>
<span id="L3400" class="ln">  3400&nbsp;&nbsp;</span>const (
<span id="L3401" class="ln">  3401&nbsp;&nbsp;</span>	http2stateIdle http2streamState = iota
<span id="L3402" class="ln">  3402&nbsp;&nbsp;</span>	http2stateOpen
<span id="L3403" class="ln">  3403&nbsp;&nbsp;</span>	http2stateHalfClosedLocal
<span id="L3404" class="ln">  3404&nbsp;&nbsp;</span>	http2stateHalfClosedRemote
<span id="L3405" class="ln">  3405&nbsp;&nbsp;</span>	http2stateClosed
<span id="L3406" class="ln">  3406&nbsp;&nbsp;</span>)
<span id="L3407" class="ln">  3407&nbsp;&nbsp;</span>
<span id="L3408" class="ln">  3408&nbsp;&nbsp;</span>var http2stateName = [...]string{
<span id="L3409" class="ln">  3409&nbsp;&nbsp;</span>	http2stateIdle:             &#34;Idle&#34;,
<span id="L3410" class="ln">  3410&nbsp;&nbsp;</span>	http2stateOpen:             &#34;Open&#34;,
<span id="L3411" class="ln">  3411&nbsp;&nbsp;</span>	http2stateHalfClosedLocal:  &#34;HalfClosedLocal&#34;,
<span id="L3412" class="ln">  3412&nbsp;&nbsp;</span>	http2stateHalfClosedRemote: &#34;HalfClosedRemote&#34;,
<span id="L3413" class="ln">  3413&nbsp;&nbsp;</span>	http2stateClosed:           &#34;Closed&#34;,
<span id="L3414" class="ln">  3414&nbsp;&nbsp;</span>}
<span id="L3415" class="ln">  3415&nbsp;&nbsp;</span>
<span id="L3416" class="ln">  3416&nbsp;&nbsp;</span>func (st http2streamState) String() string {
<span id="L3417" class="ln">  3417&nbsp;&nbsp;</span>	return http2stateName[st]
<span id="L3418" class="ln">  3418&nbsp;&nbsp;</span>}
<span id="L3419" class="ln">  3419&nbsp;&nbsp;</span>
<span id="L3420" class="ln">  3420&nbsp;&nbsp;</span><span class="comment">// Setting is a setting parameter: which setting it is, and its value.</span>
<span id="L3421" class="ln">  3421&nbsp;&nbsp;</span>type http2Setting struct {
<span id="L3422" class="ln">  3422&nbsp;&nbsp;</span>	<span class="comment">// ID is which setting is being set.</span>
<span id="L3423" class="ln">  3423&nbsp;&nbsp;</span>	<span class="comment">// See https://httpwg.org/specs/rfc7540.html#SettingFormat</span>
<span id="L3424" class="ln">  3424&nbsp;&nbsp;</span>	ID http2SettingID
<span id="L3425" class="ln">  3425&nbsp;&nbsp;</span>
<span id="L3426" class="ln">  3426&nbsp;&nbsp;</span>	<span class="comment">// Val is the value.</span>
<span id="L3427" class="ln">  3427&nbsp;&nbsp;</span>	Val uint32
<span id="L3428" class="ln">  3428&nbsp;&nbsp;</span>}
<span id="L3429" class="ln">  3429&nbsp;&nbsp;</span>
<span id="L3430" class="ln">  3430&nbsp;&nbsp;</span>func (s http2Setting) String() string {
<span id="L3431" class="ln">  3431&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;[%v = %d]&#34;, s.ID, s.Val)
<span id="L3432" class="ln">  3432&nbsp;&nbsp;</span>}
<span id="L3433" class="ln">  3433&nbsp;&nbsp;</span>
<span id="L3434" class="ln">  3434&nbsp;&nbsp;</span><span class="comment">// Valid reports whether the setting is valid.</span>
<span id="L3435" class="ln">  3435&nbsp;&nbsp;</span>func (s http2Setting) Valid() error {
<span id="L3436" class="ln">  3436&nbsp;&nbsp;</span>	<span class="comment">// Limits and error codes from 6.5.2 Defined SETTINGS Parameters</span>
<span id="L3437" class="ln">  3437&nbsp;&nbsp;</span>	switch s.ID {
<span id="L3438" class="ln">  3438&nbsp;&nbsp;</span>	case http2SettingEnablePush:
<span id="L3439" class="ln">  3439&nbsp;&nbsp;</span>		if s.Val != 1 &amp;&amp; s.Val != 0 {
<span id="L3440" class="ln">  3440&nbsp;&nbsp;</span>			return http2ConnectionError(http2ErrCodeProtocol)
<span id="L3441" class="ln">  3441&nbsp;&nbsp;</span>		}
<span id="L3442" class="ln">  3442&nbsp;&nbsp;</span>	case http2SettingInitialWindowSize:
<span id="L3443" class="ln">  3443&nbsp;&nbsp;</span>		if s.Val &gt; 1&lt;&lt;31-1 {
<span id="L3444" class="ln">  3444&nbsp;&nbsp;</span>			return http2ConnectionError(http2ErrCodeFlowControl)
<span id="L3445" class="ln">  3445&nbsp;&nbsp;</span>		}
<span id="L3446" class="ln">  3446&nbsp;&nbsp;</span>	case http2SettingMaxFrameSize:
<span id="L3447" class="ln">  3447&nbsp;&nbsp;</span>		if s.Val &lt; 16384 || s.Val &gt; 1&lt;&lt;24-1 {
<span id="L3448" class="ln">  3448&nbsp;&nbsp;</span>			return http2ConnectionError(http2ErrCodeProtocol)
<span id="L3449" class="ln">  3449&nbsp;&nbsp;</span>		}
<span id="L3450" class="ln">  3450&nbsp;&nbsp;</span>	}
<span id="L3451" class="ln">  3451&nbsp;&nbsp;</span>	return nil
<span id="L3452" class="ln">  3452&nbsp;&nbsp;</span>}
<span id="L3453" class="ln">  3453&nbsp;&nbsp;</span>
<span id="L3454" class="ln">  3454&nbsp;&nbsp;</span><span class="comment">// A SettingID is an HTTP/2 setting as defined in</span>
<span id="L3455" class="ln">  3455&nbsp;&nbsp;</span><span class="comment">// https://httpwg.org/specs/rfc7540.html#iana-settings</span>
<span id="L3456" class="ln">  3456&nbsp;&nbsp;</span>type http2SettingID uint16
<span id="L3457" class="ln">  3457&nbsp;&nbsp;</span>
<span id="L3458" class="ln">  3458&nbsp;&nbsp;</span>const (
<span id="L3459" class="ln">  3459&nbsp;&nbsp;</span>	http2SettingHeaderTableSize      http2SettingID = 0x1
<span id="L3460" class="ln">  3460&nbsp;&nbsp;</span>	http2SettingEnablePush           http2SettingID = 0x2
<span id="L3461" class="ln">  3461&nbsp;&nbsp;</span>	http2SettingMaxConcurrentStreams http2SettingID = 0x3
<span id="L3462" class="ln">  3462&nbsp;&nbsp;</span>	http2SettingInitialWindowSize    http2SettingID = 0x4
<span id="L3463" class="ln">  3463&nbsp;&nbsp;</span>	http2SettingMaxFrameSize         http2SettingID = 0x5
<span id="L3464" class="ln">  3464&nbsp;&nbsp;</span>	http2SettingMaxHeaderListSize    http2SettingID = 0x6
<span id="L3465" class="ln">  3465&nbsp;&nbsp;</span>)
<span id="L3466" class="ln">  3466&nbsp;&nbsp;</span>
<span id="L3467" class="ln">  3467&nbsp;&nbsp;</span>var http2settingName = map[http2SettingID]string{
<span id="L3468" class="ln">  3468&nbsp;&nbsp;</span>	http2SettingHeaderTableSize:      &#34;HEADER_TABLE_SIZE&#34;,
<span id="L3469" class="ln">  3469&nbsp;&nbsp;</span>	http2SettingEnablePush:           &#34;ENABLE_PUSH&#34;,
<span id="L3470" class="ln">  3470&nbsp;&nbsp;</span>	http2SettingMaxConcurrentStreams: &#34;MAX_CONCURRENT_STREAMS&#34;,
<span id="L3471" class="ln">  3471&nbsp;&nbsp;</span>	http2SettingInitialWindowSize:    &#34;INITIAL_WINDOW_SIZE&#34;,
<span id="L3472" class="ln">  3472&nbsp;&nbsp;</span>	http2SettingMaxFrameSize:         &#34;MAX_FRAME_SIZE&#34;,
<span id="L3473" class="ln">  3473&nbsp;&nbsp;</span>	http2SettingMaxHeaderListSize:    &#34;MAX_HEADER_LIST_SIZE&#34;,
<span id="L3474" class="ln">  3474&nbsp;&nbsp;</span>}
<span id="L3475" class="ln">  3475&nbsp;&nbsp;</span>
<span id="L3476" class="ln">  3476&nbsp;&nbsp;</span>func (s http2SettingID) String() string {
<span id="L3477" class="ln">  3477&nbsp;&nbsp;</span>	if v, ok := http2settingName[s]; ok {
<span id="L3478" class="ln">  3478&nbsp;&nbsp;</span>		return v
<span id="L3479" class="ln">  3479&nbsp;&nbsp;</span>	}
<span id="L3480" class="ln">  3480&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;UNKNOWN_SETTING_%d&#34;, uint16(s))
<span id="L3481" class="ln">  3481&nbsp;&nbsp;</span>}
<span id="L3482" class="ln">  3482&nbsp;&nbsp;</span>
<span id="L3483" class="ln">  3483&nbsp;&nbsp;</span><span class="comment">// validWireHeaderFieldName reports whether v is a valid header field</span>
<span id="L3484" class="ln">  3484&nbsp;&nbsp;</span><span class="comment">// name (key). See httpguts.ValidHeaderName for the base rules.</span>
<span id="L3485" class="ln">  3485&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3486" class="ln">  3486&nbsp;&nbsp;</span><span class="comment">// Further, http2 says:</span>
<span id="L3487" class="ln">  3487&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3488" class="ln">  3488&nbsp;&nbsp;</span><span class="comment">//	&#34;Just as in HTTP/1.x, header field names are strings of ASCII</span>
<span id="L3489" class="ln">  3489&nbsp;&nbsp;</span><span class="comment">//	characters that are compared in a case-insensitive</span>
<span id="L3490" class="ln">  3490&nbsp;&nbsp;</span><span class="comment">//	fashion. However, header field names MUST be converted to</span>
<span id="L3491" class="ln">  3491&nbsp;&nbsp;</span><span class="comment">//	lowercase prior to their encoding in HTTP/2. &#34;</span>
<span id="L3492" class="ln">  3492&nbsp;&nbsp;</span>func http2validWireHeaderFieldName(v string) bool {
<span id="L3493" class="ln">  3493&nbsp;&nbsp;</span>	if len(v) == 0 {
<span id="L3494" class="ln">  3494&nbsp;&nbsp;</span>		return false
<span id="L3495" class="ln">  3495&nbsp;&nbsp;</span>	}
<span id="L3496" class="ln">  3496&nbsp;&nbsp;</span>	for _, r := range v {
<span id="L3497" class="ln">  3497&nbsp;&nbsp;</span>		if !httpguts.IsTokenRune(r) {
<span id="L3498" class="ln">  3498&nbsp;&nbsp;</span>			return false
<span id="L3499" class="ln">  3499&nbsp;&nbsp;</span>		}
<span id="L3500" class="ln">  3500&nbsp;&nbsp;</span>		if &#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39; {
<span id="L3501" class="ln">  3501&nbsp;&nbsp;</span>			return false
<span id="L3502" class="ln">  3502&nbsp;&nbsp;</span>		}
<span id="L3503" class="ln">  3503&nbsp;&nbsp;</span>	}
<span id="L3504" class="ln">  3504&nbsp;&nbsp;</span>	return true
<span id="L3505" class="ln">  3505&nbsp;&nbsp;</span>}
<span id="L3506" class="ln">  3506&nbsp;&nbsp;</span>
<span id="L3507" class="ln">  3507&nbsp;&nbsp;</span>func http2httpCodeString(code int) string {
<span id="L3508" class="ln">  3508&nbsp;&nbsp;</span>	switch code {
<span id="L3509" class="ln">  3509&nbsp;&nbsp;</span>	case 200:
<span id="L3510" class="ln">  3510&nbsp;&nbsp;</span>		return &#34;200&#34;
<span id="L3511" class="ln">  3511&nbsp;&nbsp;</span>	case 404:
<span id="L3512" class="ln">  3512&nbsp;&nbsp;</span>		return &#34;404&#34;
<span id="L3513" class="ln">  3513&nbsp;&nbsp;</span>	}
<span id="L3514" class="ln">  3514&nbsp;&nbsp;</span>	return strconv.Itoa(code)
<span id="L3515" class="ln">  3515&nbsp;&nbsp;</span>}
<span id="L3516" class="ln">  3516&nbsp;&nbsp;</span>
<span id="L3517" class="ln">  3517&nbsp;&nbsp;</span><span class="comment">// from pkg io</span>
<span id="L3518" class="ln">  3518&nbsp;&nbsp;</span>type http2stringWriter interface {
<span id="L3519" class="ln">  3519&nbsp;&nbsp;</span>	WriteString(s string) (n int, err error)
<span id="L3520" class="ln">  3520&nbsp;&nbsp;</span>}
<span id="L3521" class="ln">  3521&nbsp;&nbsp;</span>
<span id="L3522" class="ln">  3522&nbsp;&nbsp;</span><span class="comment">// A gate lets two goroutines coordinate their activities.</span>
<span id="L3523" class="ln">  3523&nbsp;&nbsp;</span>type http2gate chan struct{}
<span id="L3524" class="ln">  3524&nbsp;&nbsp;</span>
<span id="L3525" class="ln">  3525&nbsp;&nbsp;</span>func (g http2gate) Done() { g &lt;- struct{}{} }
<span id="L3526" class="ln">  3526&nbsp;&nbsp;</span>
<span id="L3527" class="ln">  3527&nbsp;&nbsp;</span>func (g http2gate) Wait() { &lt;-g }
<span id="L3528" class="ln">  3528&nbsp;&nbsp;</span>
<span id="L3529" class="ln">  3529&nbsp;&nbsp;</span><span class="comment">// A closeWaiter is like a sync.WaitGroup but only goes 1 to 0 (open to closed).</span>
<span id="L3530" class="ln">  3530&nbsp;&nbsp;</span>type http2closeWaiter chan struct{}
<span id="L3531" class="ln">  3531&nbsp;&nbsp;</span>
<span id="L3532" class="ln">  3532&nbsp;&nbsp;</span><span class="comment">// Init makes a closeWaiter usable.</span>
<span id="L3533" class="ln">  3533&nbsp;&nbsp;</span><span class="comment">// It exists because so a closeWaiter value can be placed inside a</span>
<span id="L3534" class="ln">  3534&nbsp;&nbsp;</span><span class="comment">// larger struct and have the Mutex and Cond&#39;s memory in the same</span>
<span id="L3535" class="ln">  3535&nbsp;&nbsp;</span><span class="comment">// allocation.</span>
<span id="L3536" class="ln">  3536&nbsp;&nbsp;</span>func (cw *http2closeWaiter) Init() {
<span id="L3537" class="ln">  3537&nbsp;&nbsp;</span>	*cw = make(chan struct{})
<span id="L3538" class="ln">  3538&nbsp;&nbsp;</span>}
<span id="L3539" class="ln">  3539&nbsp;&nbsp;</span>
<span id="L3540" class="ln">  3540&nbsp;&nbsp;</span><span class="comment">// Close marks the closeWaiter as closed and unblocks any waiters.</span>
<span id="L3541" class="ln">  3541&nbsp;&nbsp;</span>func (cw http2closeWaiter) Close() {
<span id="L3542" class="ln">  3542&nbsp;&nbsp;</span>	close(cw)
<span id="L3543" class="ln">  3543&nbsp;&nbsp;</span>}
<span id="L3544" class="ln">  3544&nbsp;&nbsp;</span>
<span id="L3545" class="ln">  3545&nbsp;&nbsp;</span><span class="comment">// Wait waits for the closeWaiter to become closed.</span>
<span id="L3546" class="ln">  3546&nbsp;&nbsp;</span>func (cw http2closeWaiter) Wait() {
<span id="L3547" class="ln">  3547&nbsp;&nbsp;</span>	&lt;-cw
<span id="L3548" class="ln">  3548&nbsp;&nbsp;</span>}
<span id="L3549" class="ln">  3549&nbsp;&nbsp;</span>
<span id="L3550" class="ln">  3550&nbsp;&nbsp;</span><span class="comment">// bufferedWriter is a buffered writer that writes to w.</span>
<span id="L3551" class="ln">  3551&nbsp;&nbsp;</span><span class="comment">// Its buffered writer is lazily allocated as needed, to minimize</span>
<span id="L3552" class="ln">  3552&nbsp;&nbsp;</span><span class="comment">// idle memory usage with many connections.</span>
<span id="L3553" class="ln">  3553&nbsp;&nbsp;</span>type http2bufferedWriter struct {
<span id="L3554" class="ln">  3554&nbsp;&nbsp;</span>	_  http2incomparable
<span id="L3555" class="ln">  3555&nbsp;&nbsp;</span>	w  io.Writer     <span class="comment">// immutable</span>
<span id="L3556" class="ln">  3556&nbsp;&nbsp;</span>	bw *bufio.Writer <span class="comment">// non-nil when data is buffered</span>
<span id="L3557" class="ln">  3557&nbsp;&nbsp;</span>}
<span id="L3558" class="ln">  3558&nbsp;&nbsp;</span>
<span id="L3559" class="ln">  3559&nbsp;&nbsp;</span>func http2newBufferedWriter(w io.Writer) *http2bufferedWriter {
<span id="L3560" class="ln">  3560&nbsp;&nbsp;</span>	return &amp;http2bufferedWriter{w: w}
<span id="L3561" class="ln">  3561&nbsp;&nbsp;</span>}
<span id="L3562" class="ln">  3562&nbsp;&nbsp;</span>
<span id="L3563" class="ln">  3563&nbsp;&nbsp;</span><span class="comment">// bufWriterPoolBufferSize is the size of bufio.Writer&#39;s</span>
<span id="L3564" class="ln">  3564&nbsp;&nbsp;</span><span class="comment">// buffers created using bufWriterPool.</span>
<span id="L3565" class="ln">  3565&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3566" class="ln">  3566&nbsp;&nbsp;</span><span class="comment">// TODO: pick a less arbitrary value? this is a bit under</span>
<span id="L3567" class="ln">  3567&nbsp;&nbsp;</span><span class="comment">// (3 x typical 1500 byte MTU) at least. Other than that,</span>
<span id="L3568" class="ln">  3568&nbsp;&nbsp;</span><span class="comment">// not much thought went into it.</span>
<span id="L3569" class="ln">  3569&nbsp;&nbsp;</span>const http2bufWriterPoolBufferSize = 4 &lt;&lt; 10
<span id="L3570" class="ln">  3570&nbsp;&nbsp;</span>
<span id="L3571" class="ln">  3571&nbsp;&nbsp;</span>var http2bufWriterPool = sync.Pool{
<span id="L3572" class="ln">  3572&nbsp;&nbsp;</span>	New: func() interface{} {
<span id="L3573" class="ln">  3573&nbsp;&nbsp;</span>		return bufio.NewWriterSize(nil, http2bufWriterPoolBufferSize)
<span id="L3574" class="ln">  3574&nbsp;&nbsp;</span>	},
<span id="L3575" class="ln">  3575&nbsp;&nbsp;</span>}
<span id="L3576" class="ln">  3576&nbsp;&nbsp;</span>
<span id="L3577" class="ln">  3577&nbsp;&nbsp;</span>func (w *http2bufferedWriter) Available() int {
<span id="L3578" class="ln">  3578&nbsp;&nbsp;</span>	if w.bw == nil {
<span id="L3579" class="ln">  3579&nbsp;&nbsp;</span>		return http2bufWriterPoolBufferSize
<span id="L3580" class="ln">  3580&nbsp;&nbsp;</span>	}
<span id="L3581" class="ln">  3581&nbsp;&nbsp;</span>	return w.bw.Available()
<span id="L3582" class="ln">  3582&nbsp;&nbsp;</span>}
<span id="L3583" class="ln">  3583&nbsp;&nbsp;</span>
<span id="L3584" class="ln">  3584&nbsp;&nbsp;</span>func (w *http2bufferedWriter) Write(p []byte) (n int, err error) {
<span id="L3585" class="ln">  3585&nbsp;&nbsp;</span>	if w.bw == nil {
<span id="L3586" class="ln">  3586&nbsp;&nbsp;</span>		bw := http2bufWriterPool.Get().(*bufio.Writer)
<span id="L3587" class="ln">  3587&nbsp;&nbsp;</span>		bw.Reset(w.w)
<span id="L3588" class="ln">  3588&nbsp;&nbsp;</span>		w.bw = bw
<span id="L3589" class="ln">  3589&nbsp;&nbsp;</span>	}
<span id="L3590" class="ln">  3590&nbsp;&nbsp;</span>	return w.bw.Write(p)
<span id="L3591" class="ln">  3591&nbsp;&nbsp;</span>}
<span id="L3592" class="ln">  3592&nbsp;&nbsp;</span>
<span id="L3593" class="ln">  3593&nbsp;&nbsp;</span>func (w *http2bufferedWriter) Flush() error {
<span id="L3594" class="ln">  3594&nbsp;&nbsp;</span>	bw := w.bw
<span id="L3595" class="ln">  3595&nbsp;&nbsp;</span>	if bw == nil {
<span id="L3596" class="ln">  3596&nbsp;&nbsp;</span>		return nil
<span id="L3597" class="ln">  3597&nbsp;&nbsp;</span>	}
<span id="L3598" class="ln">  3598&nbsp;&nbsp;</span>	err := bw.Flush()
<span id="L3599" class="ln">  3599&nbsp;&nbsp;</span>	bw.Reset(nil)
<span id="L3600" class="ln">  3600&nbsp;&nbsp;</span>	http2bufWriterPool.Put(bw)
<span id="L3601" class="ln">  3601&nbsp;&nbsp;</span>	w.bw = nil
<span id="L3602" class="ln">  3602&nbsp;&nbsp;</span>	return err
<span id="L3603" class="ln">  3603&nbsp;&nbsp;</span>}
<span id="L3604" class="ln">  3604&nbsp;&nbsp;</span>
<span id="L3605" class="ln">  3605&nbsp;&nbsp;</span>func http2mustUint31(v int32) uint32 {
<span id="L3606" class="ln">  3606&nbsp;&nbsp;</span>	if v &lt; 0 || v &gt; 2147483647 {
<span id="L3607" class="ln">  3607&nbsp;&nbsp;</span>		panic(&#34;out of range&#34;)
<span id="L3608" class="ln">  3608&nbsp;&nbsp;</span>	}
<span id="L3609" class="ln">  3609&nbsp;&nbsp;</span>	return uint32(v)
<span id="L3610" class="ln">  3610&nbsp;&nbsp;</span>}
<span id="L3611" class="ln">  3611&nbsp;&nbsp;</span>
<span id="L3612" class="ln">  3612&nbsp;&nbsp;</span><span class="comment">// bodyAllowedForStatus reports whether a given response status code</span>
<span id="L3613" class="ln">  3613&nbsp;&nbsp;</span><span class="comment">// permits a body. See RFC 7230, section 3.3.</span>
<span id="L3614" class="ln">  3614&nbsp;&nbsp;</span>func http2bodyAllowedForStatus(status int) bool {
<span id="L3615" class="ln">  3615&nbsp;&nbsp;</span>	switch {
<span id="L3616" class="ln">  3616&nbsp;&nbsp;</span>	case status &gt;= 100 &amp;&amp; status &lt;= 199:
<span id="L3617" class="ln">  3617&nbsp;&nbsp;</span>		return false
<span id="L3618" class="ln">  3618&nbsp;&nbsp;</span>	case status == 204:
<span id="L3619" class="ln">  3619&nbsp;&nbsp;</span>		return false
<span id="L3620" class="ln">  3620&nbsp;&nbsp;</span>	case status == 304:
<span id="L3621" class="ln">  3621&nbsp;&nbsp;</span>		return false
<span id="L3622" class="ln">  3622&nbsp;&nbsp;</span>	}
<span id="L3623" class="ln">  3623&nbsp;&nbsp;</span>	return true
<span id="L3624" class="ln">  3624&nbsp;&nbsp;</span>}
<span id="L3625" class="ln">  3625&nbsp;&nbsp;</span>
<span id="L3626" class="ln">  3626&nbsp;&nbsp;</span>type http2httpError struct {
<span id="L3627" class="ln">  3627&nbsp;&nbsp;</span>	_       http2incomparable
<span id="L3628" class="ln">  3628&nbsp;&nbsp;</span>	msg     string
<span id="L3629" class="ln">  3629&nbsp;&nbsp;</span>	timeout bool
<span id="L3630" class="ln">  3630&nbsp;&nbsp;</span>}
<span id="L3631" class="ln">  3631&nbsp;&nbsp;</span>
<span id="L3632" class="ln">  3632&nbsp;&nbsp;</span>func (e *http2httpError) Error() string { return e.msg }
<span id="L3633" class="ln">  3633&nbsp;&nbsp;</span>
<span id="L3634" class="ln">  3634&nbsp;&nbsp;</span>func (e *http2httpError) Timeout() bool { return e.timeout }
<span id="L3635" class="ln">  3635&nbsp;&nbsp;</span>
<span id="L3636" class="ln">  3636&nbsp;&nbsp;</span>func (e *http2httpError) Temporary() bool { return true }
<span id="L3637" class="ln">  3637&nbsp;&nbsp;</span>
<span id="L3638" class="ln">  3638&nbsp;&nbsp;</span>var http2errTimeout error = &amp;http2httpError{msg: &#34;http2: timeout awaiting response headers&#34;, timeout: true}
<span id="L3639" class="ln">  3639&nbsp;&nbsp;</span>
<span id="L3640" class="ln">  3640&nbsp;&nbsp;</span>type http2connectionStater interface {
<span id="L3641" class="ln">  3641&nbsp;&nbsp;</span>	ConnectionState() tls.ConnectionState
<span id="L3642" class="ln">  3642&nbsp;&nbsp;</span>}
<span id="L3643" class="ln">  3643&nbsp;&nbsp;</span>
<span id="L3644" class="ln">  3644&nbsp;&nbsp;</span>var http2sorterPool = sync.Pool{New: func() interface{} { return new(http2sorter) }}
<span id="L3645" class="ln">  3645&nbsp;&nbsp;</span>
<span id="L3646" class="ln">  3646&nbsp;&nbsp;</span>type http2sorter struct {
<span id="L3647" class="ln">  3647&nbsp;&nbsp;</span>	v []string <span class="comment">// owned by sorter</span>
<span id="L3648" class="ln">  3648&nbsp;&nbsp;</span>}
<span id="L3649" class="ln">  3649&nbsp;&nbsp;</span>
<span id="L3650" class="ln">  3650&nbsp;&nbsp;</span>func (s *http2sorter) Len() int { return len(s.v) }
<span id="L3651" class="ln">  3651&nbsp;&nbsp;</span>
<span id="L3652" class="ln">  3652&nbsp;&nbsp;</span>func (s *http2sorter) Swap(i, j int) { s.v[i], s.v[j] = s.v[j], s.v[i] }
<span id="L3653" class="ln">  3653&nbsp;&nbsp;</span>
<span id="L3654" class="ln">  3654&nbsp;&nbsp;</span>func (s *http2sorter) Less(i, j int) bool { return s.v[i] &lt; s.v[j] }
<span id="L3655" class="ln">  3655&nbsp;&nbsp;</span>
<span id="L3656" class="ln">  3656&nbsp;&nbsp;</span><span class="comment">// Keys returns the sorted keys of h.</span>
<span id="L3657" class="ln">  3657&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3658" class="ln">  3658&nbsp;&nbsp;</span><span class="comment">// The returned slice is only valid until s used again or returned to</span>
<span id="L3659" class="ln">  3659&nbsp;&nbsp;</span><span class="comment">// its pool.</span>
<span id="L3660" class="ln">  3660&nbsp;&nbsp;</span>func (s *http2sorter) Keys(h Header) []string {
<span id="L3661" class="ln">  3661&nbsp;&nbsp;</span>	keys := s.v[:0]
<span id="L3662" class="ln">  3662&nbsp;&nbsp;</span>	for k := range h {
<span id="L3663" class="ln">  3663&nbsp;&nbsp;</span>		keys = append(keys, k)
<span id="L3664" class="ln">  3664&nbsp;&nbsp;</span>	}
<span id="L3665" class="ln">  3665&nbsp;&nbsp;</span>	s.v = keys
<span id="L3666" class="ln">  3666&nbsp;&nbsp;</span>	sort.Sort(s)
<span id="L3667" class="ln">  3667&nbsp;&nbsp;</span>	return keys
<span id="L3668" class="ln">  3668&nbsp;&nbsp;</span>}
<span id="L3669" class="ln">  3669&nbsp;&nbsp;</span>
<span id="L3670" class="ln">  3670&nbsp;&nbsp;</span>func (s *http2sorter) SortStrings(ss []string) {
<span id="L3671" class="ln">  3671&nbsp;&nbsp;</span>	<span class="comment">// Our sorter works on s.v, which sorter owns, so</span>
<span id="L3672" class="ln">  3672&nbsp;&nbsp;</span>	<span class="comment">// stash it away while we sort the user&#39;s buffer.</span>
<span id="L3673" class="ln">  3673&nbsp;&nbsp;</span>	save := s.v
<span id="L3674" class="ln">  3674&nbsp;&nbsp;</span>	s.v = ss
<span id="L3675" class="ln">  3675&nbsp;&nbsp;</span>	sort.Sort(s)
<span id="L3676" class="ln">  3676&nbsp;&nbsp;</span>	s.v = save
<span id="L3677" class="ln">  3677&nbsp;&nbsp;</span>}
<span id="L3678" class="ln">  3678&nbsp;&nbsp;</span>
<span id="L3679" class="ln">  3679&nbsp;&nbsp;</span><span class="comment">// validPseudoPath reports whether v is a valid :path pseudo-header</span>
<span id="L3680" class="ln">  3680&nbsp;&nbsp;</span><span class="comment">// value. It must be either:</span>
<span id="L3681" class="ln">  3681&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3682" class="ln">  3682&nbsp;&nbsp;</span><span class="comment">//   - a non-empty string starting with &#39;/&#39;</span>
<span id="L3683" class="ln">  3683&nbsp;&nbsp;</span><span class="comment">//   - the string &#39;*&#39;, for OPTIONS requests.</span>
<span id="L3684" class="ln">  3684&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3685" class="ln">  3685&nbsp;&nbsp;</span><span class="comment">// For now this is only used a quick check for deciding when to clean</span>
<span id="L3686" class="ln">  3686&nbsp;&nbsp;</span><span class="comment">// up Opaque URLs before sending requests from the Transport.</span>
<span id="L3687" class="ln">  3687&nbsp;&nbsp;</span><span class="comment">// See golang.org/issue/16847</span>
<span id="L3688" class="ln">  3688&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3689" class="ln">  3689&nbsp;&nbsp;</span><span class="comment">// We used to enforce that the path also didn&#39;t start with &#34;//&#34;, but</span>
<span id="L3690" class="ln">  3690&nbsp;&nbsp;</span><span class="comment">// Google&#39;s GFE accepts such paths and Chrome sends them, so ignore</span>
<span id="L3691" class="ln">  3691&nbsp;&nbsp;</span><span class="comment">// that part of the spec. See golang.org/issue/19103.</span>
<span id="L3692" class="ln">  3692&nbsp;&nbsp;</span>func http2validPseudoPath(v string) bool {
<span id="L3693" class="ln">  3693&nbsp;&nbsp;</span>	return (len(v) &gt; 0 &amp;&amp; v[0] == &#39;/&#39;) || v == &#34;*&#34;
<span id="L3694" class="ln">  3694&nbsp;&nbsp;</span>}
<span id="L3695" class="ln">  3695&nbsp;&nbsp;</span>
<span id="L3696" class="ln">  3696&nbsp;&nbsp;</span><span class="comment">// incomparable is a zero-width, non-comparable type. Adding it to a struct</span>
<span id="L3697" class="ln">  3697&nbsp;&nbsp;</span><span class="comment">// makes that struct also non-comparable, and generally doesn&#39;t add</span>
<span id="L3698" class="ln">  3698&nbsp;&nbsp;</span><span class="comment">// any size (as long as it&#39;s first).</span>
<span id="L3699" class="ln">  3699&nbsp;&nbsp;</span>type http2incomparable [0]func()
<span id="L3700" class="ln">  3700&nbsp;&nbsp;</span>
<span id="L3701" class="ln">  3701&nbsp;&nbsp;</span><span class="comment">// pipe is a goroutine-safe io.Reader/io.Writer pair. It&#39;s like</span>
<span id="L3702" class="ln">  3702&nbsp;&nbsp;</span><span class="comment">// io.Pipe except there are no PipeReader/PipeWriter halves, and the</span>
<span id="L3703" class="ln">  3703&nbsp;&nbsp;</span><span class="comment">// underlying buffer is an interface. (io.Pipe is always unbuffered)</span>
<span id="L3704" class="ln">  3704&nbsp;&nbsp;</span>type http2pipe struct {
<span id="L3705" class="ln">  3705&nbsp;&nbsp;</span>	mu       sync.Mutex
<span id="L3706" class="ln">  3706&nbsp;&nbsp;</span>	c        sync.Cond       <span class="comment">// c.L lazily initialized to &amp;p.mu</span>
<span id="L3707" class="ln">  3707&nbsp;&nbsp;</span>	b        http2pipeBuffer <span class="comment">// nil when done reading</span>
<span id="L3708" class="ln">  3708&nbsp;&nbsp;</span>	unread   int             <span class="comment">// bytes unread when done</span>
<span id="L3709" class="ln">  3709&nbsp;&nbsp;</span>	err      error           <span class="comment">// read error once empty. non-nil means closed.</span>
<span id="L3710" class="ln">  3710&nbsp;&nbsp;</span>	breakErr error           <span class="comment">// immediate read error (caller doesn&#39;t see rest of b)</span>
<span id="L3711" class="ln">  3711&nbsp;&nbsp;</span>	donec    chan struct{}   <span class="comment">// closed on error</span>
<span id="L3712" class="ln">  3712&nbsp;&nbsp;</span>	readFn   func()          <span class="comment">// optional code to run in Read before error</span>
<span id="L3713" class="ln">  3713&nbsp;&nbsp;</span>}
<span id="L3714" class="ln">  3714&nbsp;&nbsp;</span>
<span id="L3715" class="ln">  3715&nbsp;&nbsp;</span>type http2pipeBuffer interface {
<span id="L3716" class="ln">  3716&nbsp;&nbsp;</span>	Len() int
<span id="L3717" class="ln">  3717&nbsp;&nbsp;</span>	io.Writer
<span id="L3718" class="ln">  3718&nbsp;&nbsp;</span>	io.Reader
<span id="L3719" class="ln">  3719&nbsp;&nbsp;</span>}
<span id="L3720" class="ln">  3720&nbsp;&nbsp;</span>
<span id="L3721" class="ln">  3721&nbsp;&nbsp;</span><span class="comment">// setBuffer initializes the pipe buffer.</span>
<span id="L3722" class="ln">  3722&nbsp;&nbsp;</span><span class="comment">// It has no effect if the pipe is already closed.</span>
<span id="L3723" class="ln">  3723&nbsp;&nbsp;</span>func (p *http2pipe) setBuffer(b http2pipeBuffer) {
<span id="L3724" class="ln">  3724&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3725" class="ln">  3725&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3726" class="ln">  3726&nbsp;&nbsp;</span>	if p.err != nil || p.breakErr != nil {
<span id="L3727" class="ln">  3727&nbsp;&nbsp;</span>		return
<span id="L3728" class="ln">  3728&nbsp;&nbsp;</span>	}
<span id="L3729" class="ln">  3729&nbsp;&nbsp;</span>	p.b = b
<span id="L3730" class="ln">  3730&nbsp;&nbsp;</span>}
<span id="L3731" class="ln">  3731&nbsp;&nbsp;</span>
<span id="L3732" class="ln">  3732&nbsp;&nbsp;</span>func (p *http2pipe) Len() int {
<span id="L3733" class="ln">  3733&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3734" class="ln">  3734&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3735" class="ln">  3735&nbsp;&nbsp;</span>	if p.b == nil {
<span id="L3736" class="ln">  3736&nbsp;&nbsp;</span>		return p.unread
<span id="L3737" class="ln">  3737&nbsp;&nbsp;</span>	}
<span id="L3738" class="ln">  3738&nbsp;&nbsp;</span>	return p.b.Len()
<span id="L3739" class="ln">  3739&nbsp;&nbsp;</span>}
<span id="L3740" class="ln">  3740&nbsp;&nbsp;</span>
<span id="L3741" class="ln">  3741&nbsp;&nbsp;</span><span class="comment">// Read waits until data is available and copies bytes</span>
<span id="L3742" class="ln">  3742&nbsp;&nbsp;</span><span class="comment">// from the buffer into p.</span>
<span id="L3743" class="ln">  3743&nbsp;&nbsp;</span>func (p *http2pipe) Read(d []byte) (n int, err error) {
<span id="L3744" class="ln">  3744&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3745" class="ln">  3745&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3746" class="ln">  3746&nbsp;&nbsp;</span>	if p.c.L == nil {
<span id="L3747" class="ln">  3747&nbsp;&nbsp;</span>		p.c.L = &amp;p.mu
<span id="L3748" class="ln">  3748&nbsp;&nbsp;</span>	}
<span id="L3749" class="ln">  3749&nbsp;&nbsp;</span>	for {
<span id="L3750" class="ln">  3750&nbsp;&nbsp;</span>		if p.breakErr != nil {
<span id="L3751" class="ln">  3751&nbsp;&nbsp;</span>			return 0, p.breakErr
<span id="L3752" class="ln">  3752&nbsp;&nbsp;</span>		}
<span id="L3753" class="ln">  3753&nbsp;&nbsp;</span>		if p.b != nil &amp;&amp; p.b.Len() &gt; 0 {
<span id="L3754" class="ln">  3754&nbsp;&nbsp;</span>			return p.b.Read(d)
<span id="L3755" class="ln">  3755&nbsp;&nbsp;</span>		}
<span id="L3756" class="ln">  3756&nbsp;&nbsp;</span>		if p.err != nil {
<span id="L3757" class="ln">  3757&nbsp;&nbsp;</span>			if p.readFn != nil {
<span id="L3758" class="ln">  3758&nbsp;&nbsp;</span>				p.readFn()     <span class="comment">// e.g. copy trailers</span>
<span id="L3759" class="ln">  3759&nbsp;&nbsp;</span>				p.readFn = nil <span class="comment">// not sticky like p.err</span>
<span id="L3760" class="ln">  3760&nbsp;&nbsp;</span>			}
<span id="L3761" class="ln">  3761&nbsp;&nbsp;</span>			p.b = nil
<span id="L3762" class="ln">  3762&nbsp;&nbsp;</span>			return 0, p.err
<span id="L3763" class="ln">  3763&nbsp;&nbsp;</span>		}
<span id="L3764" class="ln">  3764&nbsp;&nbsp;</span>		p.c.Wait()
<span id="L3765" class="ln">  3765&nbsp;&nbsp;</span>	}
<span id="L3766" class="ln">  3766&nbsp;&nbsp;</span>}
<span id="L3767" class="ln">  3767&nbsp;&nbsp;</span>
<span id="L3768" class="ln">  3768&nbsp;&nbsp;</span>var http2errClosedPipeWrite = errors.New(&#34;write on closed buffer&#34;)
<span id="L3769" class="ln">  3769&nbsp;&nbsp;</span>
<span id="L3770" class="ln">  3770&nbsp;&nbsp;</span><span class="comment">// Write copies bytes from p into the buffer and wakes a reader.</span>
<span id="L3771" class="ln">  3771&nbsp;&nbsp;</span><span class="comment">// It is an error to write more data than the buffer can hold.</span>
<span id="L3772" class="ln">  3772&nbsp;&nbsp;</span>func (p *http2pipe) Write(d []byte) (n int, err error) {
<span id="L3773" class="ln">  3773&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3774" class="ln">  3774&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3775" class="ln">  3775&nbsp;&nbsp;</span>	if p.c.L == nil {
<span id="L3776" class="ln">  3776&nbsp;&nbsp;</span>		p.c.L = &amp;p.mu
<span id="L3777" class="ln">  3777&nbsp;&nbsp;</span>	}
<span id="L3778" class="ln">  3778&nbsp;&nbsp;</span>	defer p.c.Signal()
<span id="L3779" class="ln">  3779&nbsp;&nbsp;</span>	if p.err != nil || p.breakErr != nil {
<span id="L3780" class="ln">  3780&nbsp;&nbsp;</span>		return 0, http2errClosedPipeWrite
<span id="L3781" class="ln">  3781&nbsp;&nbsp;</span>	}
<span id="L3782" class="ln">  3782&nbsp;&nbsp;</span>	return p.b.Write(d)
<span id="L3783" class="ln">  3783&nbsp;&nbsp;</span>}
<span id="L3784" class="ln">  3784&nbsp;&nbsp;</span>
<span id="L3785" class="ln">  3785&nbsp;&nbsp;</span><span class="comment">// CloseWithError causes the next Read (waking up a current blocked</span>
<span id="L3786" class="ln">  3786&nbsp;&nbsp;</span><span class="comment">// Read if needed) to return the provided err after all data has been</span>
<span id="L3787" class="ln">  3787&nbsp;&nbsp;</span><span class="comment">// read.</span>
<span id="L3788" class="ln">  3788&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3789" class="ln">  3789&nbsp;&nbsp;</span><span class="comment">// The error must be non-nil.</span>
<span id="L3790" class="ln">  3790&nbsp;&nbsp;</span>func (p *http2pipe) CloseWithError(err error) { p.closeWithError(&amp;p.err, err, nil) }
<span id="L3791" class="ln">  3791&nbsp;&nbsp;</span>
<span id="L3792" class="ln">  3792&nbsp;&nbsp;</span><span class="comment">// BreakWithError causes the next Read (waking up a current blocked</span>
<span id="L3793" class="ln">  3793&nbsp;&nbsp;</span><span class="comment">// Read if needed) to return the provided err immediately, without</span>
<span id="L3794" class="ln">  3794&nbsp;&nbsp;</span><span class="comment">// waiting for unread data.</span>
<span id="L3795" class="ln">  3795&nbsp;&nbsp;</span>func (p *http2pipe) BreakWithError(err error) { p.closeWithError(&amp;p.breakErr, err, nil) }
<span id="L3796" class="ln">  3796&nbsp;&nbsp;</span>
<span id="L3797" class="ln">  3797&nbsp;&nbsp;</span><span class="comment">// closeWithErrorAndCode is like CloseWithError but also sets some code to run</span>
<span id="L3798" class="ln">  3798&nbsp;&nbsp;</span><span class="comment">// in the caller&#39;s goroutine before returning the error.</span>
<span id="L3799" class="ln">  3799&nbsp;&nbsp;</span>func (p *http2pipe) closeWithErrorAndCode(err error, fn func()) { p.closeWithError(&amp;p.err, err, fn) }
<span id="L3800" class="ln">  3800&nbsp;&nbsp;</span>
<span id="L3801" class="ln">  3801&nbsp;&nbsp;</span>func (p *http2pipe) closeWithError(dst *error, err error, fn func()) {
<span id="L3802" class="ln">  3802&nbsp;&nbsp;</span>	if err == nil {
<span id="L3803" class="ln">  3803&nbsp;&nbsp;</span>		panic(&#34;err must be non-nil&#34;)
<span id="L3804" class="ln">  3804&nbsp;&nbsp;</span>	}
<span id="L3805" class="ln">  3805&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3806" class="ln">  3806&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3807" class="ln">  3807&nbsp;&nbsp;</span>	if p.c.L == nil {
<span id="L3808" class="ln">  3808&nbsp;&nbsp;</span>		p.c.L = &amp;p.mu
<span id="L3809" class="ln">  3809&nbsp;&nbsp;</span>	}
<span id="L3810" class="ln">  3810&nbsp;&nbsp;</span>	defer p.c.Signal()
<span id="L3811" class="ln">  3811&nbsp;&nbsp;</span>	if *dst != nil {
<span id="L3812" class="ln">  3812&nbsp;&nbsp;</span>		<span class="comment">// Already been done.</span>
<span id="L3813" class="ln">  3813&nbsp;&nbsp;</span>		return
<span id="L3814" class="ln">  3814&nbsp;&nbsp;</span>	}
<span id="L3815" class="ln">  3815&nbsp;&nbsp;</span>	p.readFn = fn
<span id="L3816" class="ln">  3816&nbsp;&nbsp;</span>	if dst == &amp;p.breakErr {
<span id="L3817" class="ln">  3817&nbsp;&nbsp;</span>		if p.b != nil {
<span id="L3818" class="ln">  3818&nbsp;&nbsp;</span>			p.unread += p.b.Len()
<span id="L3819" class="ln">  3819&nbsp;&nbsp;</span>		}
<span id="L3820" class="ln">  3820&nbsp;&nbsp;</span>		p.b = nil
<span id="L3821" class="ln">  3821&nbsp;&nbsp;</span>	}
<span id="L3822" class="ln">  3822&nbsp;&nbsp;</span>	*dst = err
<span id="L3823" class="ln">  3823&nbsp;&nbsp;</span>	p.closeDoneLocked()
<span id="L3824" class="ln">  3824&nbsp;&nbsp;</span>}
<span id="L3825" class="ln">  3825&nbsp;&nbsp;</span>
<span id="L3826" class="ln">  3826&nbsp;&nbsp;</span><span class="comment">// requires p.mu be held.</span>
<span id="L3827" class="ln">  3827&nbsp;&nbsp;</span>func (p *http2pipe) closeDoneLocked() {
<span id="L3828" class="ln">  3828&nbsp;&nbsp;</span>	if p.donec == nil {
<span id="L3829" class="ln">  3829&nbsp;&nbsp;</span>		return
<span id="L3830" class="ln">  3830&nbsp;&nbsp;</span>	}
<span id="L3831" class="ln">  3831&nbsp;&nbsp;</span>	<span class="comment">// Close if unclosed. This isn&#39;t racy since we always</span>
<span id="L3832" class="ln">  3832&nbsp;&nbsp;</span>	<span class="comment">// hold p.mu while closing.</span>
<span id="L3833" class="ln">  3833&nbsp;&nbsp;</span>	select {
<span id="L3834" class="ln">  3834&nbsp;&nbsp;</span>	case &lt;-p.donec:
<span id="L3835" class="ln">  3835&nbsp;&nbsp;</span>	default:
<span id="L3836" class="ln">  3836&nbsp;&nbsp;</span>		close(p.donec)
<span id="L3837" class="ln">  3837&nbsp;&nbsp;</span>	}
<span id="L3838" class="ln">  3838&nbsp;&nbsp;</span>}
<span id="L3839" class="ln">  3839&nbsp;&nbsp;</span>
<span id="L3840" class="ln">  3840&nbsp;&nbsp;</span><span class="comment">// Err returns the error (if any) first set by BreakWithError or CloseWithError.</span>
<span id="L3841" class="ln">  3841&nbsp;&nbsp;</span>func (p *http2pipe) Err() error {
<span id="L3842" class="ln">  3842&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3843" class="ln">  3843&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3844" class="ln">  3844&nbsp;&nbsp;</span>	if p.breakErr != nil {
<span id="L3845" class="ln">  3845&nbsp;&nbsp;</span>		return p.breakErr
<span id="L3846" class="ln">  3846&nbsp;&nbsp;</span>	}
<span id="L3847" class="ln">  3847&nbsp;&nbsp;</span>	return p.err
<span id="L3848" class="ln">  3848&nbsp;&nbsp;</span>}
<span id="L3849" class="ln">  3849&nbsp;&nbsp;</span>
<span id="L3850" class="ln">  3850&nbsp;&nbsp;</span><span class="comment">// Done returns a channel which is closed if and when this pipe is closed</span>
<span id="L3851" class="ln">  3851&nbsp;&nbsp;</span><span class="comment">// with CloseWithError.</span>
<span id="L3852" class="ln">  3852&nbsp;&nbsp;</span>func (p *http2pipe) Done() &lt;-chan struct{} {
<span id="L3853" class="ln">  3853&nbsp;&nbsp;</span>	p.mu.Lock()
<span id="L3854" class="ln">  3854&nbsp;&nbsp;</span>	defer p.mu.Unlock()
<span id="L3855" class="ln">  3855&nbsp;&nbsp;</span>	if p.donec == nil {
<span id="L3856" class="ln">  3856&nbsp;&nbsp;</span>		p.donec = make(chan struct{})
<span id="L3857" class="ln">  3857&nbsp;&nbsp;</span>		if p.err != nil || p.breakErr != nil {
<span id="L3858" class="ln">  3858&nbsp;&nbsp;</span>			<span class="comment">// Already hit an error.</span>
<span id="L3859" class="ln">  3859&nbsp;&nbsp;</span>			p.closeDoneLocked()
<span id="L3860" class="ln">  3860&nbsp;&nbsp;</span>		}
<span id="L3861" class="ln">  3861&nbsp;&nbsp;</span>	}
<span id="L3862" class="ln">  3862&nbsp;&nbsp;</span>	return p.donec
<span id="L3863" class="ln">  3863&nbsp;&nbsp;</span>}
<span id="L3864" class="ln">  3864&nbsp;&nbsp;</span>
<span id="L3865" class="ln">  3865&nbsp;&nbsp;</span>const (
<span id="L3866" class="ln">  3866&nbsp;&nbsp;</span>	http2prefaceTimeout         = 10 * time.Second
<span id="L3867" class="ln">  3867&nbsp;&nbsp;</span>	http2firstSettingsTimeout   = 2 * time.Second <span class="comment">// should be in-flight with preface anyway</span>
<span id="L3868" class="ln">  3868&nbsp;&nbsp;</span>	http2handlerChunkWriteSize  = 4 &lt;&lt; 10
<span id="L3869" class="ln">  3869&nbsp;&nbsp;</span>	http2defaultMaxStreams      = 250 <span class="comment">// TODO: make this 100 as the GFE seems to?</span>
<span id="L3870" class="ln">  3870&nbsp;&nbsp;</span>	http2maxQueuedControlFrames = 10000
<span id="L3871" class="ln">  3871&nbsp;&nbsp;</span>)
<span id="L3872" class="ln">  3872&nbsp;&nbsp;</span>
<span id="L3873" class="ln">  3873&nbsp;&nbsp;</span>var (
<span id="L3874" class="ln">  3874&nbsp;&nbsp;</span>	http2errClientDisconnected = errors.New(&#34;client disconnected&#34;)
<span id="L3875" class="ln">  3875&nbsp;&nbsp;</span>	http2errClosedBody         = errors.New(&#34;body closed by handler&#34;)
<span id="L3876" class="ln">  3876&nbsp;&nbsp;</span>	http2errHandlerComplete    = errors.New(&#34;http2: request body closed due to handler exiting&#34;)
<span id="L3877" class="ln">  3877&nbsp;&nbsp;</span>	http2errStreamClosed       = errors.New(&#34;http2: stream closed&#34;)
<span id="L3878" class="ln">  3878&nbsp;&nbsp;</span>)
<span id="L3879" class="ln">  3879&nbsp;&nbsp;</span>
<span id="L3880" class="ln">  3880&nbsp;&nbsp;</span>var http2responseWriterStatePool = sync.Pool{
<span id="L3881" class="ln">  3881&nbsp;&nbsp;</span>	New: func() interface{} {
<span id="L3882" class="ln">  3882&nbsp;&nbsp;</span>		rws := &amp;http2responseWriterState{}
<span id="L3883" class="ln">  3883&nbsp;&nbsp;</span>		rws.bw = bufio.NewWriterSize(http2chunkWriter{rws}, http2handlerChunkWriteSize)
<span id="L3884" class="ln">  3884&nbsp;&nbsp;</span>		return rws
<span id="L3885" class="ln">  3885&nbsp;&nbsp;</span>	},
<span id="L3886" class="ln">  3886&nbsp;&nbsp;</span>}
<span id="L3887" class="ln">  3887&nbsp;&nbsp;</span>
<span id="L3888" class="ln">  3888&nbsp;&nbsp;</span><span class="comment">// Test hooks.</span>
<span id="L3889" class="ln">  3889&nbsp;&nbsp;</span>var (
<span id="L3890" class="ln">  3890&nbsp;&nbsp;</span>	http2testHookOnConn        func()
<span id="L3891" class="ln">  3891&nbsp;&nbsp;</span>	http2testHookGetServerConn func(*http2serverConn)
<span id="L3892" class="ln">  3892&nbsp;&nbsp;</span>	http2testHookOnPanicMu     *sync.Mutex <span class="comment">// nil except in tests</span>
<span id="L3893" class="ln">  3893&nbsp;&nbsp;</span>	http2testHookOnPanic       func(sc *http2serverConn, panicVal interface{}) (rePanic bool)
<span id="L3894" class="ln">  3894&nbsp;&nbsp;</span>)
<span id="L3895" class="ln">  3895&nbsp;&nbsp;</span>
<span id="L3896" class="ln">  3896&nbsp;&nbsp;</span><span class="comment">// Server is an HTTP/2 server.</span>
<span id="L3897" class="ln">  3897&nbsp;&nbsp;</span>type http2Server struct {
<span id="L3898" class="ln">  3898&nbsp;&nbsp;</span>	<span class="comment">// MaxHandlers limits the number of http.Handler ServeHTTP goroutines</span>
<span id="L3899" class="ln">  3899&nbsp;&nbsp;</span>	<span class="comment">// which may run at a time over all connections.</span>
<span id="L3900" class="ln">  3900&nbsp;&nbsp;</span>	<span class="comment">// Negative or zero no limit.</span>
<span id="L3901" class="ln">  3901&nbsp;&nbsp;</span>	<span class="comment">// TODO: implement</span>
<span id="L3902" class="ln">  3902&nbsp;&nbsp;</span>	MaxHandlers int
<span id="L3903" class="ln">  3903&nbsp;&nbsp;</span>
<span id="L3904" class="ln">  3904&nbsp;&nbsp;</span>	<span class="comment">// MaxConcurrentStreams optionally specifies the number of</span>
<span id="L3905" class="ln">  3905&nbsp;&nbsp;</span>	<span class="comment">// concurrent streams that each client may have open at a</span>
<span id="L3906" class="ln">  3906&nbsp;&nbsp;</span>	<span class="comment">// time. This is unrelated to the number of http.Handler goroutines</span>
<span id="L3907" class="ln">  3907&nbsp;&nbsp;</span>	<span class="comment">// which may be active globally, which is MaxHandlers.</span>
<span id="L3908" class="ln">  3908&nbsp;&nbsp;</span>	<span class="comment">// If zero, MaxConcurrentStreams defaults to at least 100, per</span>
<span id="L3909" class="ln">  3909&nbsp;&nbsp;</span>	<span class="comment">// the HTTP/2 spec&#39;s recommendations.</span>
<span id="L3910" class="ln">  3910&nbsp;&nbsp;</span>	MaxConcurrentStreams uint32
<span id="L3911" class="ln">  3911&nbsp;&nbsp;</span>
<span id="L3912" class="ln">  3912&nbsp;&nbsp;</span>	<span class="comment">// MaxDecoderHeaderTableSize optionally specifies the http2</span>
<span id="L3913" class="ln">  3913&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It</span>
<span id="L3914" class="ln">  3914&nbsp;&nbsp;</span>	<span class="comment">// informs the remote endpoint of the maximum size of the header compression</span>
<span id="L3915" class="ln">  3915&nbsp;&nbsp;</span>	<span class="comment">// table used to decode header blocks, in octets. If zero, the default value</span>
<span id="L3916" class="ln">  3916&nbsp;&nbsp;</span>	<span class="comment">// of 4096 is used.</span>
<span id="L3917" class="ln">  3917&nbsp;&nbsp;</span>	MaxDecoderHeaderTableSize uint32
<span id="L3918" class="ln">  3918&nbsp;&nbsp;</span>
<span id="L3919" class="ln">  3919&nbsp;&nbsp;</span>	<span class="comment">// MaxEncoderHeaderTableSize optionally specifies an upper limit for the</span>
<span id="L3920" class="ln">  3920&nbsp;&nbsp;</span>	<span class="comment">// header compression table used for encoding request headers. Received</span>
<span id="L3921" class="ln">  3921&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,</span>
<span id="L3922" class="ln">  3922&nbsp;&nbsp;</span>	<span class="comment">// the default value of 4096 is used.</span>
<span id="L3923" class="ln">  3923&nbsp;&nbsp;</span>	MaxEncoderHeaderTableSize uint32
<span id="L3924" class="ln">  3924&nbsp;&nbsp;</span>
<span id="L3925" class="ln">  3925&nbsp;&nbsp;</span>	<span class="comment">// MaxReadFrameSize optionally specifies the largest frame</span>
<span id="L3926" class="ln">  3926&nbsp;&nbsp;</span>	<span class="comment">// this server is willing to read. A valid value is between</span>
<span id="L3927" class="ln">  3927&nbsp;&nbsp;</span>	<span class="comment">// 16k and 16M, inclusive. If zero or otherwise invalid, a</span>
<span id="L3928" class="ln">  3928&nbsp;&nbsp;</span>	<span class="comment">// default value is used.</span>
<span id="L3929" class="ln">  3929&nbsp;&nbsp;</span>	MaxReadFrameSize uint32
<span id="L3930" class="ln">  3930&nbsp;&nbsp;</span>
<span id="L3931" class="ln">  3931&nbsp;&nbsp;</span>	<span class="comment">// PermitProhibitedCipherSuites, if true, permits the use of</span>
<span id="L3932" class="ln">  3932&nbsp;&nbsp;</span>	<span class="comment">// cipher suites prohibited by the HTTP/2 spec.</span>
<span id="L3933" class="ln">  3933&nbsp;&nbsp;</span>	PermitProhibitedCipherSuites bool
<span id="L3934" class="ln">  3934&nbsp;&nbsp;</span>
<span id="L3935" class="ln">  3935&nbsp;&nbsp;</span>	<span class="comment">// IdleTimeout specifies how long until idle clients should be</span>
<span id="L3936" class="ln">  3936&nbsp;&nbsp;</span>	<span class="comment">// closed with a GOAWAY frame. PING frames are not considered</span>
<span id="L3937" class="ln">  3937&nbsp;&nbsp;</span>	<span class="comment">// activity for the purposes of IdleTimeout.</span>
<span id="L3938" class="ln">  3938&nbsp;&nbsp;</span>	IdleTimeout time.Duration
<span id="L3939" class="ln">  3939&nbsp;&nbsp;</span>
<span id="L3940" class="ln">  3940&nbsp;&nbsp;</span>	<span class="comment">// MaxUploadBufferPerConnection is the size of the initial flow</span>
<span id="L3941" class="ln">  3941&nbsp;&nbsp;</span>	<span class="comment">// control window for each connections. The HTTP/2 spec does not</span>
<span id="L3942" class="ln">  3942&nbsp;&nbsp;</span>	<span class="comment">// allow this to be smaller than 65535 or larger than 2^32-1.</span>
<span id="L3943" class="ln">  3943&nbsp;&nbsp;</span>	<span class="comment">// If the value is outside this range, a default value will be</span>
<span id="L3944" class="ln">  3944&nbsp;&nbsp;</span>	<span class="comment">// used instead.</span>
<span id="L3945" class="ln">  3945&nbsp;&nbsp;</span>	MaxUploadBufferPerConnection int32
<span id="L3946" class="ln">  3946&nbsp;&nbsp;</span>
<span id="L3947" class="ln">  3947&nbsp;&nbsp;</span>	<span class="comment">// MaxUploadBufferPerStream is the size of the initial flow control</span>
<span id="L3948" class="ln">  3948&nbsp;&nbsp;</span>	<span class="comment">// window for each stream. The HTTP/2 spec does not allow this to</span>
<span id="L3949" class="ln">  3949&nbsp;&nbsp;</span>	<span class="comment">// be larger than 2^32-1. If the value is zero or larger than the</span>
<span id="L3950" class="ln">  3950&nbsp;&nbsp;</span>	<span class="comment">// maximum, a default value will be used instead.</span>
<span id="L3951" class="ln">  3951&nbsp;&nbsp;</span>	MaxUploadBufferPerStream int32
<span id="L3952" class="ln">  3952&nbsp;&nbsp;</span>
<span id="L3953" class="ln">  3953&nbsp;&nbsp;</span>	<span class="comment">// NewWriteScheduler constructs a write scheduler for a connection.</span>
<span id="L3954" class="ln">  3954&nbsp;&nbsp;</span>	<span class="comment">// If nil, a default scheduler is chosen.</span>
<span id="L3955" class="ln">  3955&nbsp;&nbsp;</span>	NewWriteScheduler func() http2WriteScheduler
<span id="L3956" class="ln">  3956&nbsp;&nbsp;</span>
<span id="L3957" class="ln">  3957&nbsp;&nbsp;</span>	<span class="comment">// CountError, if non-nil, is called on HTTP/2 server errors.</span>
<span id="L3958" class="ln">  3958&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s intended to increment a metric for monitoring, such</span>
<span id="L3959" class="ln">  3959&nbsp;&nbsp;</span>	<span class="comment">// as an expvar or Prometheus metric.</span>
<span id="L3960" class="ln">  3960&nbsp;&nbsp;</span>	<span class="comment">// The errType consists of only ASCII word characters.</span>
<span id="L3961" class="ln">  3961&nbsp;&nbsp;</span>	CountError func(errType string)
<span id="L3962" class="ln">  3962&nbsp;&nbsp;</span>
<span id="L3963" class="ln">  3963&nbsp;&nbsp;</span>	<span class="comment">// Internal state. This is a pointer (rather than embedded directly)</span>
<span id="L3964" class="ln">  3964&nbsp;&nbsp;</span>	<span class="comment">// so that we don&#39;t embed a Mutex in this struct, which will make the</span>
<span id="L3965" class="ln">  3965&nbsp;&nbsp;</span>	<span class="comment">// struct non-copyable, which might break some callers.</span>
<span id="L3966" class="ln">  3966&nbsp;&nbsp;</span>	state *http2serverInternalState
<span id="L3967" class="ln">  3967&nbsp;&nbsp;</span>}
<span id="L3968" class="ln">  3968&nbsp;&nbsp;</span>
<span id="L3969" class="ln">  3969&nbsp;&nbsp;</span>func (s *http2Server) initialConnRecvWindowSize() int32 {
<span id="L3970" class="ln">  3970&nbsp;&nbsp;</span>	if s.MaxUploadBufferPerConnection &gt;= http2initialWindowSize {
<span id="L3971" class="ln">  3971&nbsp;&nbsp;</span>		return s.MaxUploadBufferPerConnection
<span id="L3972" class="ln">  3972&nbsp;&nbsp;</span>	}
<span id="L3973" class="ln">  3973&nbsp;&nbsp;</span>	return 1 &lt;&lt; 20
<span id="L3974" class="ln">  3974&nbsp;&nbsp;</span>}
<span id="L3975" class="ln">  3975&nbsp;&nbsp;</span>
<span id="L3976" class="ln">  3976&nbsp;&nbsp;</span>func (s *http2Server) initialStreamRecvWindowSize() int32 {
<span id="L3977" class="ln">  3977&nbsp;&nbsp;</span>	if s.MaxUploadBufferPerStream &gt; 0 {
<span id="L3978" class="ln">  3978&nbsp;&nbsp;</span>		return s.MaxUploadBufferPerStream
<span id="L3979" class="ln">  3979&nbsp;&nbsp;</span>	}
<span id="L3980" class="ln">  3980&nbsp;&nbsp;</span>	return 1 &lt;&lt; 20
<span id="L3981" class="ln">  3981&nbsp;&nbsp;</span>}
<span id="L3982" class="ln">  3982&nbsp;&nbsp;</span>
<span id="L3983" class="ln">  3983&nbsp;&nbsp;</span>func (s *http2Server) maxReadFrameSize() uint32 {
<span id="L3984" class="ln">  3984&nbsp;&nbsp;</span>	if v := s.MaxReadFrameSize; v &gt;= http2minMaxFrameSize &amp;&amp; v &lt;= http2maxFrameSize {
<span id="L3985" class="ln">  3985&nbsp;&nbsp;</span>		return v
<span id="L3986" class="ln">  3986&nbsp;&nbsp;</span>	}
<span id="L3987" class="ln">  3987&nbsp;&nbsp;</span>	return http2defaultMaxReadFrameSize
<span id="L3988" class="ln">  3988&nbsp;&nbsp;</span>}
<span id="L3989" class="ln">  3989&nbsp;&nbsp;</span>
<span id="L3990" class="ln">  3990&nbsp;&nbsp;</span>func (s *http2Server) maxConcurrentStreams() uint32 {
<span id="L3991" class="ln">  3991&nbsp;&nbsp;</span>	if v := s.MaxConcurrentStreams; v &gt; 0 {
<span id="L3992" class="ln">  3992&nbsp;&nbsp;</span>		return v
<span id="L3993" class="ln">  3993&nbsp;&nbsp;</span>	}
<span id="L3994" class="ln">  3994&nbsp;&nbsp;</span>	return http2defaultMaxStreams
<span id="L3995" class="ln">  3995&nbsp;&nbsp;</span>}
<span id="L3996" class="ln">  3996&nbsp;&nbsp;</span>
<span id="L3997" class="ln">  3997&nbsp;&nbsp;</span>func (s *http2Server) maxDecoderHeaderTableSize() uint32 {
<span id="L3998" class="ln">  3998&nbsp;&nbsp;</span>	if v := s.MaxDecoderHeaderTableSize; v &gt; 0 {
<span id="L3999" class="ln">  3999&nbsp;&nbsp;</span>		return v
<span id="L4000" class="ln">  4000&nbsp;&nbsp;</span>	}
<span id="L4001" class="ln">  4001&nbsp;&nbsp;</span>	return http2initialHeaderTableSize
<span id="L4002" class="ln">  4002&nbsp;&nbsp;</span>}
<span id="L4003" class="ln">  4003&nbsp;&nbsp;</span>
<span id="L4004" class="ln">  4004&nbsp;&nbsp;</span>func (s *http2Server) maxEncoderHeaderTableSize() uint32 {
<span id="L4005" class="ln">  4005&nbsp;&nbsp;</span>	if v := s.MaxEncoderHeaderTableSize; v &gt; 0 {
<span id="L4006" class="ln">  4006&nbsp;&nbsp;</span>		return v
<span id="L4007" class="ln">  4007&nbsp;&nbsp;</span>	}
<span id="L4008" class="ln">  4008&nbsp;&nbsp;</span>	return http2initialHeaderTableSize
<span id="L4009" class="ln">  4009&nbsp;&nbsp;</span>}
<span id="L4010" class="ln">  4010&nbsp;&nbsp;</span>
<span id="L4011" class="ln">  4011&nbsp;&nbsp;</span><span class="comment">// maxQueuedControlFrames is the maximum number of control frames like</span>
<span id="L4012" class="ln">  4012&nbsp;&nbsp;</span><span class="comment">// SETTINGS, PING and RST_STREAM that will be queued for writing before</span>
<span id="L4013" class="ln">  4013&nbsp;&nbsp;</span><span class="comment">// the connection is closed to prevent memory exhaustion attacks.</span>
<span id="L4014" class="ln">  4014&nbsp;&nbsp;</span>func (s *http2Server) maxQueuedControlFrames() int {
<span id="L4015" class="ln">  4015&nbsp;&nbsp;</span>	<span class="comment">// TODO: if anybody asks, add a Server field, and remember to define the</span>
<span id="L4016" class="ln">  4016&nbsp;&nbsp;</span>	<span class="comment">// behavior of negative values.</span>
<span id="L4017" class="ln">  4017&nbsp;&nbsp;</span>	return http2maxQueuedControlFrames
<span id="L4018" class="ln">  4018&nbsp;&nbsp;</span>}
<span id="L4019" class="ln">  4019&nbsp;&nbsp;</span>
<span id="L4020" class="ln">  4020&nbsp;&nbsp;</span>type http2serverInternalState struct {
<span id="L4021" class="ln">  4021&nbsp;&nbsp;</span>	mu          sync.Mutex
<span id="L4022" class="ln">  4022&nbsp;&nbsp;</span>	activeConns map[*http2serverConn]struct{}
<span id="L4023" class="ln">  4023&nbsp;&nbsp;</span>}
<span id="L4024" class="ln">  4024&nbsp;&nbsp;</span>
<span id="L4025" class="ln">  4025&nbsp;&nbsp;</span>func (s *http2serverInternalState) registerConn(sc *http2serverConn) {
<span id="L4026" class="ln">  4026&nbsp;&nbsp;</span>	if s == nil {
<span id="L4027" class="ln">  4027&nbsp;&nbsp;</span>		return <span class="comment">// if the Server was used without calling ConfigureServer</span>
<span id="L4028" class="ln">  4028&nbsp;&nbsp;</span>	}
<span id="L4029" class="ln">  4029&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L4030" class="ln">  4030&nbsp;&nbsp;</span>	s.activeConns[sc] = struct{}{}
<span id="L4031" class="ln">  4031&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L4032" class="ln">  4032&nbsp;&nbsp;</span>}
<span id="L4033" class="ln">  4033&nbsp;&nbsp;</span>
<span id="L4034" class="ln">  4034&nbsp;&nbsp;</span>func (s *http2serverInternalState) unregisterConn(sc *http2serverConn) {
<span id="L4035" class="ln">  4035&nbsp;&nbsp;</span>	if s == nil {
<span id="L4036" class="ln">  4036&nbsp;&nbsp;</span>		return <span class="comment">// if the Server was used without calling ConfigureServer</span>
<span id="L4037" class="ln">  4037&nbsp;&nbsp;</span>	}
<span id="L4038" class="ln">  4038&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L4039" class="ln">  4039&nbsp;&nbsp;</span>	delete(s.activeConns, sc)
<span id="L4040" class="ln">  4040&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L4041" class="ln">  4041&nbsp;&nbsp;</span>}
<span id="L4042" class="ln">  4042&nbsp;&nbsp;</span>
<span id="L4043" class="ln">  4043&nbsp;&nbsp;</span>func (s *http2serverInternalState) startGracefulShutdown() {
<span id="L4044" class="ln">  4044&nbsp;&nbsp;</span>	if s == nil {
<span id="L4045" class="ln">  4045&nbsp;&nbsp;</span>		return <span class="comment">// if the Server was used without calling ConfigureServer</span>
<span id="L4046" class="ln">  4046&nbsp;&nbsp;</span>	}
<span id="L4047" class="ln">  4047&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L4048" class="ln">  4048&nbsp;&nbsp;</span>	for sc := range s.activeConns {
<span id="L4049" class="ln">  4049&nbsp;&nbsp;</span>		sc.startGracefulShutdown()
<span id="L4050" class="ln">  4050&nbsp;&nbsp;</span>	}
<span id="L4051" class="ln">  4051&nbsp;&nbsp;</span>	s.mu.Unlock()
<span id="L4052" class="ln">  4052&nbsp;&nbsp;</span>}
<span id="L4053" class="ln">  4053&nbsp;&nbsp;</span>
<span id="L4054" class="ln">  4054&nbsp;&nbsp;</span><span class="comment">// ConfigureServer adds HTTP/2 support to a net/http Server.</span>
<span id="L4055" class="ln">  4055&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4056" class="ln">  4056&nbsp;&nbsp;</span><span class="comment">// The configuration conf may be nil.</span>
<span id="L4057" class="ln">  4057&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4058" class="ln">  4058&nbsp;&nbsp;</span><span class="comment">// ConfigureServer must be called before s begins serving.</span>
<span id="L4059" class="ln">  4059&nbsp;&nbsp;</span>func http2ConfigureServer(s *Server, conf *http2Server) error {
<span id="L4060" class="ln">  4060&nbsp;&nbsp;</span>	if s == nil {
<span id="L4061" class="ln">  4061&nbsp;&nbsp;</span>		panic(&#34;nil *http.Server&#34;)
<span id="L4062" class="ln">  4062&nbsp;&nbsp;</span>	}
<span id="L4063" class="ln">  4063&nbsp;&nbsp;</span>	if conf == nil {
<span id="L4064" class="ln">  4064&nbsp;&nbsp;</span>		conf = new(http2Server)
<span id="L4065" class="ln">  4065&nbsp;&nbsp;</span>	}
<span id="L4066" class="ln">  4066&nbsp;&nbsp;</span>	conf.state = &amp;http2serverInternalState{activeConns: make(map[*http2serverConn]struct{})}
<span id="L4067" class="ln">  4067&nbsp;&nbsp;</span>	if h1, h2 := s, conf; h2.IdleTimeout == 0 {
<span id="L4068" class="ln">  4068&nbsp;&nbsp;</span>		if h1.IdleTimeout != 0 {
<span id="L4069" class="ln">  4069&nbsp;&nbsp;</span>			h2.IdleTimeout = h1.IdleTimeout
<span id="L4070" class="ln">  4070&nbsp;&nbsp;</span>		} else {
<span id="L4071" class="ln">  4071&nbsp;&nbsp;</span>			h2.IdleTimeout = h1.ReadTimeout
<span id="L4072" class="ln">  4072&nbsp;&nbsp;</span>		}
<span id="L4073" class="ln">  4073&nbsp;&nbsp;</span>	}
<span id="L4074" class="ln">  4074&nbsp;&nbsp;</span>	s.RegisterOnShutdown(conf.state.startGracefulShutdown)
<span id="L4075" class="ln">  4075&nbsp;&nbsp;</span>
<span id="L4076" class="ln">  4076&nbsp;&nbsp;</span>	if s.TLSConfig == nil {
<span id="L4077" class="ln">  4077&nbsp;&nbsp;</span>		s.TLSConfig = new(tls.Config)
<span id="L4078" class="ln">  4078&nbsp;&nbsp;</span>	} else if s.TLSConfig.CipherSuites != nil &amp;&amp; s.TLSConfig.MinVersion &lt; tls.VersionTLS13 {
<span id="L4079" class="ln">  4079&nbsp;&nbsp;</span>		<span class="comment">// If they already provided a TLS 1.0–1.2 CipherSuite list, return an</span>
<span id="L4080" class="ln">  4080&nbsp;&nbsp;</span>		<span class="comment">// error if it is missing ECDHE_RSA_WITH_AES_128_GCM_SHA256 or</span>
<span id="L4081" class="ln">  4081&nbsp;&nbsp;</span>		<span class="comment">// ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.</span>
<span id="L4082" class="ln">  4082&nbsp;&nbsp;</span>		haveRequired := false
<span id="L4083" class="ln">  4083&nbsp;&nbsp;</span>		for _, cs := range s.TLSConfig.CipherSuites {
<span id="L4084" class="ln">  4084&nbsp;&nbsp;</span>			switch cs {
<span id="L4085" class="ln">  4085&nbsp;&nbsp;</span>			case tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
<span id="L4086" class="ln">  4086&nbsp;&nbsp;</span>				<span class="comment">// Alternative MTI cipher to not discourage ECDSA-only servers.</span>
<span id="L4087" class="ln">  4087&nbsp;&nbsp;</span>				<span class="comment">// See http://golang.org/cl/30721 for further information.</span>
<span id="L4088" class="ln">  4088&nbsp;&nbsp;</span>				tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
<span id="L4089" class="ln">  4089&nbsp;&nbsp;</span>				haveRequired = true
<span id="L4090" class="ln">  4090&nbsp;&nbsp;</span>			}
<span id="L4091" class="ln">  4091&nbsp;&nbsp;</span>		}
<span id="L4092" class="ln">  4092&nbsp;&nbsp;</span>		if !haveRequired {
<span id="L4093" class="ln">  4093&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;http2: TLSConfig.CipherSuites is missing an HTTP/2-required AES_128_GCM_SHA256 cipher (need at least one of TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 or TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)&#34;)
<span id="L4094" class="ln">  4094&nbsp;&nbsp;</span>		}
<span id="L4095" class="ln">  4095&nbsp;&nbsp;</span>	}
<span id="L4096" class="ln">  4096&nbsp;&nbsp;</span>
<span id="L4097" class="ln">  4097&nbsp;&nbsp;</span>	<span class="comment">// Note: not setting MinVersion to tls.VersionTLS12,</span>
<span id="L4098" class="ln">  4098&nbsp;&nbsp;</span>	<span class="comment">// as we don&#39;t want to interfere with HTTP/1.1 traffic</span>
<span id="L4099" class="ln">  4099&nbsp;&nbsp;</span>	<span class="comment">// on the user&#39;s server. We enforce TLS 1.2 later once</span>
<span id="L4100" class="ln">  4100&nbsp;&nbsp;</span>	<span class="comment">// we accept a connection. Ideally this should be done</span>
<span id="L4101" class="ln">  4101&nbsp;&nbsp;</span>	<span class="comment">// during next-proto selection, but using TLS &lt;1.2 with</span>
<span id="L4102" class="ln">  4102&nbsp;&nbsp;</span>	<span class="comment">// HTTP/2 is still the client&#39;s bug.</span>
<span id="L4103" class="ln">  4103&nbsp;&nbsp;</span>
<span id="L4104" class="ln">  4104&nbsp;&nbsp;</span>	s.TLSConfig.PreferServerCipherSuites = true
<span id="L4105" class="ln">  4105&nbsp;&nbsp;</span>
<span id="L4106" class="ln">  4106&nbsp;&nbsp;</span>	if !http2strSliceContains(s.TLSConfig.NextProtos, http2NextProtoTLS) {
<span id="L4107" class="ln">  4107&nbsp;&nbsp;</span>		s.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, http2NextProtoTLS)
<span id="L4108" class="ln">  4108&nbsp;&nbsp;</span>	}
<span id="L4109" class="ln">  4109&nbsp;&nbsp;</span>	if !http2strSliceContains(s.TLSConfig.NextProtos, &#34;http/1.1&#34;) {
<span id="L4110" class="ln">  4110&nbsp;&nbsp;</span>		s.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, &#34;http/1.1&#34;)
<span id="L4111" class="ln">  4111&nbsp;&nbsp;</span>	}
<span id="L4112" class="ln">  4112&nbsp;&nbsp;</span>
<span id="L4113" class="ln">  4113&nbsp;&nbsp;</span>	if s.TLSNextProto == nil {
<span id="L4114" class="ln">  4114&nbsp;&nbsp;</span>		s.TLSNextProto = map[string]func(*Server, *tls.Conn, Handler){}
<span id="L4115" class="ln">  4115&nbsp;&nbsp;</span>	}
<span id="L4116" class="ln">  4116&nbsp;&nbsp;</span>	protoHandler := func(hs *Server, c *tls.Conn, h Handler) {
<span id="L4117" class="ln">  4117&nbsp;&nbsp;</span>		if http2testHookOnConn != nil {
<span id="L4118" class="ln">  4118&nbsp;&nbsp;</span>			http2testHookOnConn()
<span id="L4119" class="ln">  4119&nbsp;&nbsp;</span>		}
<span id="L4120" class="ln">  4120&nbsp;&nbsp;</span>		<span class="comment">// The TLSNextProto interface predates contexts, so</span>
<span id="L4121" class="ln">  4121&nbsp;&nbsp;</span>		<span class="comment">// the net/http package passes down its per-connection</span>
<span id="L4122" class="ln">  4122&nbsp;&nbsp;</span>		<span class="comment">// base context via an exported but unadvertised</span>
<span id="L4123" class="ln">  4123&nbsp;&nbsp;</span>		<span class="comment">// method on the Handler. This is for internal</span>
<span id="L4124" class="ln">  4124&nbsp;&nbsp;</span>		<span class="comment">// net/http&lt;=&gt;http2 use only.</span>
<span id="L4125" class="ln">  4125&nbsp;&nbsp;</span>		var ctx context.Context
<span id="L4126" class="ln">  4126&nbsp;&nbsp;</span>		type baseContexter interface {
<span id="L4127" class="ln">  4127&nbsp;&nbsp;</span>			BaseContext() context.Context
<span id="L4128" class="ln">  4128&nbsp;&nbsp;</span>		}
<span id="L4129" class="ln">  4129&nbsp;&nbsp;</span>		if bc, ok := h.(baseContexter); ok {
<span id="L4130" class="ln">  4130&nbsp;&nbsp;</span>			ctx = bc.BaseContext()
<span id="L4131" class="ln">  4131&nbsp;&nbsp;</span>		}
<span id="L4132" class="ln">  4132&nbsp;&nbsp;</span>		conf.ServeConn(c, &amp;http2ServeConnOpts{
<span id="L4133" class="ln">  4133&nbsp;&nbsp;</span>			Context:    ctx,
<span id="L4134" class="ln">  4134&nbsp;&nbsp;</span>			Handler:    h,
<span id="L4135" class="ln">  4135&nbsp;&nbsp;</span>			BaseConfig: hs,
<span id="L4136" class="ln">  4136&nbsp;&nbsp;</span>		})
<span id="L4137" class="ln">  4137&nbsp;&nbsp;</span>	}
<span id="L4138" class="ln">  4138&nbsp;&nbsp;</span>	s.TLSNextProto[http2NextProtoTLS] = protoHandler
<span id="L4139" class="ln">  4139&nbsp;&nbsp;</span>	return nil
<span id="L4140" class="ln">  4140&nbsp;&nbsp;</span>}
<span id="L4141" class="ln">  4141&nbsp;&nbsp;</span>
<span id="L4142" class="ln">  4142&nbsp;&nbsp;</span><span class="comment">// ServeConnOpts are options for the Server.ServeConn method.</span>
<span id="L4143" class="ln">  4143&nbsp;&nbsp;</span>type http2ServeConnOpts struct {
<span id="L4144" class="ln">  4144&nbsp;&nbsp;</span>	<span class="comment">// Context is the base context to use.</span>
<span id="L4145" class="ln">  4145&nbsp;&nbsp;</span>	<span class="comment">// If nil, context.Background is used.</span>
<span id="L4146" class="ln">  4146&nbsp;&nbsp;</span>	Context context.Context
<span id="L4147" class="ln">  4147&nbsp;&nbsp;</span>
<span id="L4148" class="ln">  4148&nbsp;&nbsp;</span>	<span class="comment">// BaseConfig optionally sets the base configuration</span>
<span id="L4149" class="ln">  4149&nbsp;&nbsp;</span>	<span class="comment">// for values. If nil, defaults are used.</span>
<span id="L4150" class="ln">  4150&nbsp;&nbsp;</span>	BaseConfig *Server
<span id="L4151" class="ln">  4151&nbsp;&nbsp;</span>
<span id="L4152" class="ln">  4152&nbsp;&nbsp;</span>	<span class="comment">// Handler specifies which handler to use for processing</span>
<span id="L4153" class="ln">  4153&nbsp;&nbsp;</span>	<span class="comment">// requests. If nil, BaseConfig.Handler is used. If BaseConfig</span>
<span id="L4154" class="ln">  4154&nbsp;&nbsp;</span>	<span class="comment">// or BaseConfig.Handler is nil, http.DefaultServeMux is used.</span>
<span id="L4155" class="ln">  4155&nbsp;&nbsp;</span>	Handler Handler
<span id="L4156" class="ln">  4156&nbsp;&nbsp;</span>
<span id="L4157" class="ln">  4157&nbsp;&nbsp;</span>	<span class="comment">// UpgradeRequest is an initial request received on a connection</span>
<span id="L4158" class="ln">  4158&nbsp;&nbsp;</span>	<span class="comment">// undergoing an h2c upgrade. The request body must have been</span>
<span id="L4159" class="ln">  4159&nbsp;&nbsp;</span>	<span class="comment">// completely read from the connection before calling ServeConn,</span>
<span id="L4160" class="ln">  4160&nbsp;&nbsp;</span>	<span class="comment">// and the 101 Switching Protocols response written.</span>
<span id="L4161" class="ln">  4161&nbsp;&nbsp;</span>	UpgradeRequest *Request
<span id="L4162" class="ln">  4162&nbsp;&nbsp;</span>
<span id="L4163" class="ln">  4163&nbsp;&nbsp;</span>	<span class="comment">// Settings is the decoded contents of the HTTP2-Settings header</span>
<span id="L4164" class="ln">  4164&nbsp;&nbsp;</span>	<span class="comment">// in an h2c upgrade request.</span>
<span id="L4165" class="ln">  4165&nbsp;&nbsp;</span>	Settings []byte
<span id="L4166" class="ln">  4166&nbsp;&nbsp;</span>
<span id="L4167" class="ln">  4167&nbsp;&nbsp;</span>	<span class="comment">// SawClientPreface is set if the HTTP/2 connection preface</span>
<span id="L4168" class="ln">  4168&nbsp;&nbsp;</span>	<span class="comment">// has already been read from the connection.</span>
<span id="L4169" class="ln">  4169&nbsp;&nbsp;</span>	SawClientPreface bool
<span id="L4170" class="ln">  4170&nbsp;&nbsp;</span>}
<span id="L4171" class="ln">  4171&nbsp;&nbsp;</span>
<span id="L4172" class="ln">  4172&nbsp;&nbsp;</span>func (o *http2ServeConnOpts) context() context.Context {
<span id="L4173" class="ln">  4173&nbsp;&nbsp;</span>	if o != nil &amp;&amp; o.Context != nil {
<span id="L4174" class="ln">  4174&nbsp;&nbsp;</span>		return o.Context
<span id="L4175" class="ln">  4175&nbsp;&nbsp;</span>	}
<span id="L4176" class="ln">  4176&nbsp;&nbsp;</span>	return context.Background()
<span id="L4177" class="ln">  4177&nbsp;&nbsp;</span>}
<span id="L4178" class="ln">  4178&nbsp;&nbsp;</span>
<span id="L4179" class="ln">  4179&nbsp;&nbsp;</span>func (o *http2ServeConnOpts) baseConfig() *Server {
<span id="L4180" class="ln">  4180&nbsp;&nbsp;</span>	if o != nil &amp;&amp; o.BaseConfig != nil {
<span id="L4181" class="ln">  4181&nbsp;&nbsp;</span>		return o.BaseConfig
<span id="L4182" class="ln">  4182&nbsp;&nbsp;</span>	}
<span id="L4183" class="ln">  4183&nbsp;&nbsp;</span>	return new(Server)
<span id="L4184" class="ln">  4184&nbsp;&nbsp;</span>}
<span id="L4185" class="ln">  4185&nbsp;&nbsp;</span>
<span id="L4186" class="ln">  4186&nbsp;&nbsp;</span>func (o *http2ServeConnOpts) handler() Handler {
<span id="L4187" class="ln">  4187&nbsp;&nbsp;</span>	if o != nil {
<span id="L4188" class="ln">  4188&nbsp;&nbsp;</span>		if o.Handler != nil {
<span id="L4189" class="ln">  4189&nbsp;&nbsp;</span>			return o.Handler
<span id="L4190" class="ln">  4190&nbsp;&nbsp;</span>		}
<span id="L4191" class="ln">  4191&nbsp;&nbsp;</span>		if o.BaseConfig != nil &amp;&amp; o.BaseConfig.Handler != nil {
<span id="L4192" class="ln">  4192&nbsp;&nbsp;</span>			return o.BaseConfig.Handler
<span id="L4193" class="ln">  4193&nbsp;&nbsp;</span>		}
<span id="L4194" class="ln">  4194&nbsp;&nbsp;</span>	}
<span id="L4195" class="ln">  4195&nbsp;&nbsp;</span>	return DefaultServeMux
<span id="L4196" class="ln">  4196&nbsp;&nbsp;</span>}
<span id="L4197" class="ln">  4197&nbsp;&nbsp;</span>
<span id="L4198" class="ln">  4198&nbsp;&nbsp;</span><span class="comment">// ServeConn serves HTTP/2 requests on the provided connection and</span>
<span id="L4199" class="ln">  4199&nbsp;&nbsp;</span><span class="comment">// blocks until the connection is no longer readable.</span>
<span id="L4200" class="ln">  4200&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4201" class="ln">  4201&nbsp;&nbsp;</span><span class="comment">// ServeConn starts speaking HTTP/2 assuming that c has not had any</span>
<span id="L4202" class="ln">  4202&nbsp;&nbsp;</span><span class="comment">// reads or writes. It writes its initial settings frame and expects</span>
<span id="L4203" class="ln">  4203&nbsp;&nbsp;</span><span class="comment">// to be able to read the preface and settings frame from the</span>
<span id="L4204" class="ln">  4204&nbsp;&nbsp;</span><span class="comment">// client. If c has a ConnectionState method like a *tls.Conn, the</span>
<span id="L4205" class="ln">  4205&nbsp;&nbsp;</span><span class="comment">// ConnectionState is used to verify the TLS ciphersuite and to set</span>
<span id="L4206" class="ln">  4206&nbsp;&nbsp;</span><span class="comment">// the Request.TLS field in Handlers.</span>
<span id="L4207" class="ln">  4207&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4208" class="ln">  4208&nbsp;&nbsp;</span><span class="comment">// ServeConn does not support h2c by itself. Any h2c support must be</span>
<span id="L4209" class="ln">  4209&nbsp;&nbsp;</span><span class="comment">// implemented in terms of providing a suitably-behaving net.Conn.</span>
<span id="L4210" class="ln">  4210&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4211" class="ln">  4211&nbsp;&nbsp;</span><span class="comment">// The opts parameter is optional. If nil, default values are used.</span>
<span id="L4212" class="ln">  4212&nbsp;&nbsp;</span>func (s *http2Server) ServeConn(c net.Conn, opts *http2ServeConnOpts) {
<span id="L4213" class="ln">  4213&nbsp;&nbsp;</span>	baseCtx, cancel := http2serverConnBaseContext(c, opts)
<span id="L4214" class="ln">  4214&nbsp;&nbsp;</span>	defer cancel()
<span id="L4215" class="ln">  4215&nbsp;&nbsp;</span>
<span id="L4216" class="ln">  4216&nbsp;&nbsp;</span>	sc := &amp;http2serverConn{
<span id="L4217" class="ln">  4217&nbsp;&nbsp;</span>		srv:                         s,
<span id="L4218" class="ln">  4218&nbsp;&nbsp;</span>		hs:                          opts.baseConfig(),
<span id="L4219" class="ln">  4219&nbsp;&nbsp;</span>		conn:                        c,
<span id="L4220" class="ln">  4220&nbsp;&nbsp;</span>		baseCtx:                     baseCtx,
<span id="L4221" class="ln">  4221&nbsp;&nbsp;</span>		remoteAddrStr:               c.RemoteAddr().String(),
<span id="L4222" class="ln">  4222&nbsp;&nbsp;</span>		bw:                          http2newBufferedWriter(c),
<span id="L4223" class="ln">  4223&nbsp;&nbsp;</span>		handler:                     opts.handler(),
<span id="L4224" class="ln">  4224&nbsp;&nbsp;</span>		streams:                     make(map[uint32]*http2stream),
<span id="L4225" class="ln">  4225&nbsp;&nbsp;</span>		readFrameCh:                 make(chan http2readFrameResult),
<span id="L4226" class="ln">  4226&nbsp;&nbsp;</span>		wantWriteFrameCh:            make(chan http2FrameWriteRequest, 8),
<span id="L4227" class="ln">  4227&nbsp;&nbsp;</span>		serveMsgCh:                  make(chan interface{}, 8),
<span id="L4228" class="ln">  4228&nbsp;&nbsp;</span>		wroteFrameCh:                make(chan http2frameWriteResult, 1), <span class="comment">// buffered; one send in writeFrameAsync</span>
<span id="L4229" class="ln">  4229&nbsp;&nbsp;</span>		bodyReadCh:                  make(chan http2bodyReadMsg),         <span class="comment">// buffering doesn&#39;t matter either way</span>
<span id="L4230" class="ln">  4230&nbsp;&nbsp;</span>		doneServing:                 make(chan struct{}),
<span id="L4231" class="ln">  4231&nbsp;&nbsp;</span>		clientMaxStreams:            math.MaxUint32, <span class="comment">// Section 6.5.2: &#34;Initially, there is no limit to this value&#34;</span>
<span id="L4232" class="ln">  4232&nbsp;&nbsp;</span>		advMaxStreams:               s.maxConcurrentStreams(),
<span id="L4233" class="ln">  4233&nbsp;&nbsp;</span>		initialStreamSendWindowSize: http2initialWindowSize,
<span id="L4234" class="ln">  4234&nbsp;&nbsp;</span>		maxFrameSize:                http2initialMaxFrameSize,
<span id="L4235" class="ln">  4235&nbsp;&nbsp;</span>		serveG:                      http2newGoroutineLock(),
<span id="L4236" class="ln">  4236&nbsp;&nbsp;</span>		pushEnabled:                 true,
<span id="L4237" class="ln">  4237&nbsp;&nbsp;</span>		sawClientPreface:            opts.SawClientPreface,
<span id="L4238" class="ln">  4238&nbsp;&nbsp;</span>	}
<span id="L4239" class="ln">  4239&nbsp;&nbsp;</span>
<span id="L4240" class="ln">  4240&nbsp;&nbsp;</span>	s.state.registerConn(sc)
<span id="L4241" class="ln">  4241&nbsp;&nbsp;</span>	defer s.state.unregisterConn(sc)
<span id="L4242" class="ln">  4242&nbsp;&nbsp;</span>
<span id="L4243" class="ln">  4243&nbsp;&nbsp;</span>	<span class="comment">// The net/http package sets the write deadline from the</span>
<span id="L4244" class="ln">  4244&nbsp;&nbsp;</span>	<span class="comment">// http.Server.WriteTimeout during the TLS handshake, but then</span>
<span id="L4245" class="ln">  4245&nbsp;&nbsp;</span>	<span class="comment">// passes the connection off to us with the deadline already set.</span>
<span id="L4246" class="ln">  4246&nbsp;&nbsp;</span>	<span class="comment">// Write deadlines are set per stream in serverConn.newStream.</span>
<span id="L4247" class="ln">  4247&nbsp;&nbsp;</span>	<span class="comment">// Disarm the net.Conn write deadline here.</span>
<span id="L4248" class="ln">  4248&nbsp;&nbsp;</span>	if sc.hs.WriteTimeout != 0 {
<span id="L4249" class="ln">  4249&nbsp;&nbsp;</span>		sc.conn.SetWriteDeadline(time.Time{})
<span id="L4250" class="ln">  4250&nbsp;&nbsp;</span>	}
<span id="L4251" class="ln">  4251&nbsp;&nbsp;</span>
<span id="L4252" class="ln">  4252&nbsp;&nbsp;</span>	if s.NewWriteScheduler != nil {
<span id="L4253" class="ln">  4253&nbsp;&nbsp;</span>		sc.writeSched = s.NewWriteScheduler()
<span id="L4254" class="ln">  4254&nbsp;&nbsp;</span>	} else {
<span id="L4255" class="ln">  4255&nbsp;&nbsp;</span>		sc.writeSched = http2newRoundRobinWriteScheduler()
<span id="L4256" class="ln">  4256&nbsp;&nbsp;</span>	}
<span id="L4257" class="ln">  4257&nbsp;&nbsp;</span>
<span id="L4258" class="ln">  4258&nbsp;&nbsp;</span>	<span class="comment">// These start at the RFC-specified defaults. If there is a higher</span>
<span id="L4259" class="ln">  4259&nbsp;&nbsp;</span>	<span class="comment">// configured value for inflow, that will be updated when we send a</span>
<span id="L4260" class="ln">  4260&nbsp;&nbsp;</span>	<span class="comment">// WINDOW_UPDATE shortly after sending SETTINGS.</span>
<span id="L4261" class="ln">  4261&nbsp;&nbsp;</span>	sc.flow.add(http2initialWindowSize)
<span id="L4262" class="ln">  4262&nbsp;&nbsp;</span>	sc.inflow.init(http2initialWindowSize)
<span id="L4263" class="ln">  4263&nbsp;&nbsp;</span>	sc.hpackEncoder = hpack.NewEncoder(&amp;sc.headerWriteBuf)
<span id="L4264" class="ln">  4264&nbsp;&nbsp;</span>	sc.hpackEncoder.SetMaxDynamicTableSizeLimit(s.maxEncoderHeaderTableSize())
<span id="L4265" class="ln">  4265&nbsp;&nbsp;</span>
<span id="L4266" class="ln">  4266&nbsp;&nbsp;</span>	fr := http2NewFramer(sc.bw, c)
<span id="L4267" class="ln">  4267&nbsp;&nbsp;</span>	if s.CountError != nil {
<span id="L4268" class="ln">  4268&nbsp;&nbsp;</span>		fr.countError = s.CountError
<span id="L4269" class="ln">  4269&nbsp;&nbsp;</span>	}
<span id="L4270" class="ln">  4270&nbsp;&nbsp;</span>	fr.ReadMetaHeaders = hpack.NewDecoder(s.maxDecoderHeaderTableSize(), nil)
<span id="L4271" class="ln">  4271&nbsp;&nbsp;</span>	fr.MaxHeaderListSize = sc.maxHeaderListSize()
<span id="L4272" class="ln">  4272&nbsp;&nbsp;</span>	fr.SetMaxReadFrameSize(s.maxReadFrameSize())
<span id="L4273" class="ln">  4273&nbsp;&nbsp;</span>	sc.framer = fr
<span id="L4274" class="ln">  4274&nbsp;&nbsp;</span>
<span id="L4275" class="ln">  4275&nbsp;&nbsp;</span>	if tc, ok := c.(http2connectionStater); ok {
<span id="L4276" class="ln">  4276&nbsp;&nbsp;</span>		sc.tlsState = new(tls.ConnectionState)
<span id="L4277" class="ln">  4277&nbsp;&nbsp;</span>		*sc.tlsState = tc.ConnectionState()
<span id="L4278" class="ln">  4278&nbsp;&nbsp;</span>		<span class="comment">// 9.2 Use of TLS Features</span>
<span id="L4279" class="ln">  4279&nbsp;&nbsp;</span>		<span class="comment">// An implementation of HTTP/2 over TLS MUST use TLS</span>
<span id="L4280" class="ln">  4280&nbsp;&nbsp;</span>		<span class="comment">// 1.2 or higher with the restrictions on feature set</span>
<span id="L4281" class="ln">  4281&nbsp;&nbsp;</span>		<span class="comment">// and cipher suite described in this section. Due to</span>
<span id="L4282" class="ln">  4282&nbsp;&nbsp;</span>		<span class="comment">// implementation limitations, it might not be</span>
<span id="L4283" class="ln">  4283&nbsp;&nbsp;</span>		<span class="comment">// possible to fail TLS negotiation. An endpoint MUST</span>
<span id="L4284" class="ln">  4284&nbsp;&nbsp;</span>		<span class="comment">// immediately terminate an HTTP/2 connection that</span>
<span id="L4285" class="ln">  4285&nbsp;&nbsp;</span>		<span class="comment">// does not meet the TLS requirements described in</span>
<span id="L4286" class="ln">  4286&nbsp;&nbsp;</span>		<span class="comment">// this section with a connection error (Section</span>
<span id="L4287" class="ln">  4287&nbsp;&nbsp;</span>		<span class="comment">// 5.4.1) of type INADEQUATE_SECURITY.</span>
<span id="L4288" class="ln">  4288&nbsp;&nbsp;</span>		if sc.tlsState.Version &lt; tls.VersionTLS12 {
<span id="L4289" class="ln">  4289&nbsp;&nbsp;</span>			sc.rejectConn(http2ErrCodeInadequateSecurity, &#34;TLS version too low&#34;)
<span id="L4290" class="ln">  4290&nbsp;&nbsp;</span>			return
<span id="L4291" class="ln">  4291&nbsp;&nbsp;</span>		}
<span id="L4292" class="ln">  4292&nbsp;&nbsp;</span>
<span id="L4293" class="ln">  4293&nbsp;&nbsp;</span>		if sc.tlsState.ServerName == &#34;&#34; {
<span id="L4294" class="ln">  4294&nbsp;&nbsp;</span>			<span class="comment">// Client must use SNI, but we don&#39;t enforce that anymore,</span>
<span id="L4295" class="ln">  4295&nbsp;&nbsp;</span>			<span class="comment">// since it was causing problems when connecting to bare IP</span>
<span id="L4296" class="ln">  4296&nbsp;&nbsp;</span>			<span class="comment">// addresses during development.</span>
<span id="L4297" class="ln">  4297&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L4298" class="ln">  4298&nbsp;&nbsp;</span>			<span class="comment">// TODO: optionally enforce? Or enforce at the time we receive</span>
<span id="L4299" class="ln">  4299&nbsp;&nbsp;</span>			<span class="comment">// a new request, and verify the ServerName matches the :authority?</span>
<span id="L4300" class="ln">  4300&nbsp;&nbsp;</span>			<span class="comment">// But that precludes proxy situations, perhaps.</span>
<span id="L4301" class="ln">  4301&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L4302" class="ln">  4302&nbsp;&nbsp;</span>			<span class="comment">// So for now, do nothing here again.</span>
<span id="L4303" class="ln">  4303&nbsp;&nbsp;</span>		}
<span id="L4304" class="ln">  4304&nbsp;&nbsp;</span>
<span id="L4305" class="ln">  4305&nbsp;&nbsp;</span>		if !s.PermitProhibitedCipherSuites &amp;&amp; http2isBadCipher(sc.tlsState.CipherSuite) {
<span id="L4306" class="ln">  4306&nbsp;&nbsp;</span>			<span class="comment">// &#34;Endpoints MAY choose to generate a connection error</span>
<span id="L4307" class="ln">  4307&nbsp;&nbsp;</span>			<span class="comment">// (Section 5.4.1) of type INADEQUATE_SECURITY if one of</span>
<span id="L4308" class="ln">  4308&nbsp;&nbsp;</span>			<span class="comment">// the prohibited cipher suites are negotiated.&#34;</span>
<span id="L4309" class="ln">  4309&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L4310" class="ln">  4310&nbsp;&nbsp;</span>			<span class="comment">// We choose that. In my opinion, the spec is weak</span>
<span id="L4311" class="ln">  4311&nbsp;&nbsp;</span>			<span class="comment">// here. It also says both parties must support at least</span>
<span id="L4312" class="ln">  4312&nbsp;&nbsp;</span>			<span class="comment">// TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 so there&#39;s no</span>
<span id="L4313" class="ln">  4313&nbsp;&nbsp;</span>			<span class="comment">// excuses here. If we really must, we could allow an</span>
<span id="L4314" class="ln">  4314&nbsp;&nbsp;</span>			<span class="comment">// &#34;AllowInsecureWeakCiphers&#34; option on the server later.</span>
<span id="L4315" class="ln">  4315&nbsp;&nbsp;</span>			<span class="comment">// Let&#39;s see how it plays out first.</span>
<span id="L4316" class="ln">  4316&nbsp;&nbsp;</span>			sc.rejectConn(http2ErrCodeInadequateSecurity, fmt.Sprintf(&#34;Prohibited TLS 1.2 Cipher Suite: %x&#34;, sc.tlsState.CipherSuite))
<span id="L4317" class="ln">  4317&nbsp;&nbsp;</span>			return
<span id="L4318" class="ln">  4318&nbsp;&nbsp;</span>		}
<span id="L4319" class="ln">  4319&nbsp;&nbsp;</span>	}
<span id="L4320" class="ln">  4320&nbsp;&nbsp;</span>
<span id="L4321" class="ln">  4321&nbsp;&nbsp;</span>	if opts.Settings != nil {
<span id="L4322" class="ln">  4322&nbsp;&nbsp;</span>		fr := &amp;http2SettingsFrame{
<span id="L4323" class="ln">  4323&nbsp;&nbsp;</span>			http2FrameHeader: http2FrameHeader{valid: true},
<span id="L4324" class="ln">  4324&nbsp;&nbsp;</span>			p:                opts.Settings,
<span id="L4325" class="ln">  4325&nbsp;&nbsp;</span>		}
<span id="L4326" class="ln">  4326&nbsp;&nbsp;</span>		if err := fr.ForeachSetting(sc.processSetting); err != nil {
<span id="L4327" class="ln">  4327&nbsp;&nbsp;</span>			sc.rejectConn(http2ErrCodeProtocol, &#34;invalid settings&#34;)
<span id="L4328" class="ln">  4328&nbsp;&nbsp;</span>			return
<span id="L4329" class="ln">  4329&nbsp;&nbsp;</span>		}
<span id="L4330" class="ln">  4330&nbsp;&nbsp;</span>		opts.Settings = nil
<span id="L4331" class="ln">  4331&nbsp;&nbsp;</span>	}
<span id="L4332" class="ln">  4332&nbsp;&nbsp;</span>
<span id="L4333" class="ln">  4333&nbsp;&nbsp;</span>	if hook := http2testHookGetServerConn; hook != nil {
<span id="L4334" class="ln">  4334&nbsp;&nbsp;</span>		hook(sc)
<span id="L4335" class="ln">  4335&nbsp;&nbsp;</span>	}
<span id="L4336" class="ln">  4336&nbsp;&nbsp;</span>
<span id="L4337" class="ln">  4337&nbsp;&nbsp;</span>	if opts.UpgradeRequest != nil {
<span id="L4338" class="ln">  4338&nbsp;&nbsp;</span>		sc.upgradeRequest(opts.UpgradeRequest)
<span id="L4339" class="ln">  4339&nbsp;&nbsp;</span>		opts.UpgradeRequest = nil
<span id="L4340" class="ln">  4340&nbsp;&nbsp;</span>	}
<span id="L4341" class="ln">  4341&nbsp;&nbsp;</span>
<span id="L4342" class="ln">  4342&nbsp;&nbsp;</span>	sc.serve()
<span id="L4343" class="ln">  4343&nbsp;&nbsp;</span>}
<span id="L4344" class="ln">  4344&nbsp;&nbsp;</span>
<span id="L4345" class="ln">  4345&nbsp;&nbsp;</span>func http2serverConnBaseContext(c net.Conn, opts *http2ServeConnOpts) (ctx context.Context, cancel func()) {
<span id="L4346" class="ln">  4346&nbsp;&nbsp;</span>	ctx, cancel = context.WithCancel(opts.context())
<span id="L4347" class="ln">  4347&nbsp;&nbsp;</span>	ctx = context.WithValue(ctx, LocalAddrContextKey, c.LocalAddr())
<span id="L4348" class="ln">  4348&nbsp;&nbsp;</span>	if hs := opts.baseConfig(); hs != nil {
<span id="L4349" class="ln">  4349&nbsp;&nbsp;</span>		ctx = context.WithValue(ctx, ServerContextKey, hs)
<span id="L4350" class="ln">  4350&nbsp;&nbsp;</span>	}
<span id="L4351" class="ln">  4351&nbsp;&nbsp;</span>	return
<span id="L4352" class="ln">  4352&nbsp;&nbsp;</span>}
<span id="L4353" class="ln">  4353&nbsp;&nbsp;</span>
<span id="L4354" class="ln">  4354&nbsp;&nbsp;</span>func (sc *http2serverConn) rejectConn(err http2ErrCode, debug string) {
<span id="L4355" class="ln">  4355&nbsp;&nbsp;</span>	sc.vlogf(&#34;http2: server rejecting conn: %v, %s&#34;, err, debug)
<span id="L4356" class="ln">  4356&nbsp;&nbsp;</span>	<span class="comment">// ignoring errors. hanging up anyway.</span>
<span id="L4357" class="ln">  4357&nbsp;&nbsp;</span>	sc.framer.WriteGoAway(0, err, []byte(debug))
<span id="L4358" class="ln">  4358&nbsp;&nbsp;</span>	sc.bw.Flush()
<span id="L4359" class="ln">  4359&nbsp;&nbsp;</span>	sc.conn.Close()
<span id="L4360" class="ln">  4360&nbsp;&nbsp;</span>}
<span id="L4361" class="ln">  4361&nbsp;&nbsp;</span>
<span id="L4362" class="ln">  4362&nbsp;&nbsp;</span>type http2serverConn struct {
<span id="L4363" class="ln">  4363&nbsp;&nbsp;</span>	<span class="comment">// Immutable:</span>
<span id="L4364" class="ln">  4364&nbsp;&nbsp;</span>	srv              *http2Server
<span id="L4365" class="ln">  4365&nbsp;&nbsp;</span>	hs               *Server
<span id="L4366" class="ln">  4366&nbsp;&nbsp;</span>	conn             net.Conn
<span id="L4367" class="ln">  4367&nbsp;&nbsp;</span>	bw               *http2bufferedWriter <span class="comment">// writing to conn</span>
<span id="L4368" class="ln">  4368&nbsp;&nbsp;</span>	handler          Handler
<span id="L4369" class="ln">  4369&nbsp;&nbsp;</span>	baseCtx          context.Context
<span id="L4370" class="ln">  4370&nbsp;&nbsp;</span>	framer           *http2Framer
<span id="L4371" class="ln">  4371&nbsp;&nbsp;</span>	doneServing      chan struct{}               <span class="comment">// closed when serverConn.serve ends</span>
<span id="L4372" class="ln">  4372&nbsp;&nbsp;</span>	readFrameCh      chan http2readFrameResult   <span class="comment">// written by serverConn.readFrames</span>
<span id="L4373" class="ln">  4373&nbsp;&nbsp;</span>	wantWriteFrameCh chan http2FrameWriteRequest <span class="comment">// from handlers -&gt; serve</span>
<span id="L4374" class="ln">  4374&nbsp;&nbsp;</span>	wroteFrameCh     chan http2frameWriteResult  <span class="comment">// from writeFrameAsync -&gt; serve, tickles more frame writes</span>
<span id="L4375" class="ln">  4375&nbsp;&nbsp;</span>	bodyReadCh       chan http2bodyReadMsg       <span class="comment">// from handlers -&gt; serve</span>
<span id="L4376" class="ln">  4376&nbsp;&nbsp;</span>	serveMsgCh       chan interface{}            <span class="comment">// misc messages &amp; code to send to / run on the serve loop</span>
<span id="L4377" class="ln">  4377&nbsp;&nbsp;</span>	flow             http2outflow                <span class="comment">// conn-wide (not stream-specific) outbound flow control</span>
<span id="L4378" class="ln">  4378&nbsp;&nbsp;</span>	inflow           http2inflow                 <span class="comment">// conn-wide inbound flow control</span>
<span id="L4379" class="ln">  4379&nbsp;&nbsp;</span>	tlsState         *tls.ConnectionState        <span class="comment">// shared by all handlers, like net/http</span>
<span id="L4380" class="ln">  4380&nbsp;&nbsp;</span>	remoteAddrStr    string
<span id="L4381" class="ln">  4381&nbsp;&nbsp;</span>	writeSched       http2WriteScheduler
<span id="L4382" class="ln">  4382&nbsp;&nbsp;</span>
<span id="L4383" class="ln">  4383&nbsp;&nbsp;</span>	<span class="comment">// Everything following is owned by the serve loop; use serveG.check():</span>
<span id="L4384" class="ln">  4384&nbsp;&nbsp;</span>	serveG                      http2goroutineLock <span class="comment">// used to verify funcs are on serve()</span>
<span id="L4385" class="ln">  4385&nbsp;&nbsp;</span>	pushEnabled                 bool
<span id="L4386" class="ln">  4386&nbsp;&nbsp;</span>	sawClientPreface            bool <span class="comment">// preface has already been read, used in h2c upgrade</span>
<span id="L4387" class="ln">  4387&nbsp;&nbsp;</span>	sawFirstSettings            bool <span class="comment">// got the initial SETTINGS frame after the preface</span>
<span id="L4388" class="ln">  4388&nbsp;&nbsp;</span>	needToSendSettingsAck       bool
<span id="L4389" class="ln">  4389&nbsp;&nbsp;</span>	unackedSettings             int    <span class="comment">// how many SETTINGS have we sent without ACKs?</span>
<span id="L4390" class="ln">  4390&nbsp;&nbsp;</span>	queuedControlFrames         int    <span class="comment">// control frames in the writeSched queue</span>
<span id="L4391" class="ln">  4391&nbsp;&nbsp;</span>	clientMaxStreams            uint32 <span class="comment">// SETTINGS_MAX_CONCURRENT_STREAMS from client (our PUSH_PROMISE limit)</span>
<span id="L4392" class="ln">  4392&nbsp;&nbsp;</span>	advMaxStreams               uint32 <span class="comment">// our SETTINGS_MAX_CONCURRENT_STREAMS advertised the client</span>
<span id="L4393" class="ln">  4393&nbsp;&nbsp;</span>	curClientStreams            uint32 <span class="comment">// number of open streams initiated by the client</span>
<span id="L4394" class="ln">  4394&nbsp;&nbsp;</span>	curPushedStreams            uint32 <span class="comment">// number of open streams initiated by server push</span>
<span id="L4395" class="ln">  4395&nbsp;&nbsp;</span>	curHandlers                 uint32 <span class="comment">// number of running handler goroutines</span>
<span id="L4396" class="ln">  4396&nbsp;&nbsp;</span>	maxClientStreamID           uint32 <span class="comment">// max ever seen from client (odd), or 0 if there have been no client requests</span>
<span id="L4397" class="ln">  4397&nbsp;&nbsp;</span>	maxPushPromiseID            uint32 <span class="comment">// ID of the last push promise (even), or 0 if there have been no pushes</span>
<span id="L4398" class="ln">  4398&nbsp;&nbsp;</span>	streams                     map[uint32]*http2stream
<span id="L4399" class="ln">  4399&nbsp;&nbsp;</span>	unstartedHandlers           []http2unstartedHandler
<span id="L4400" class="ln">  4400&nbsp;&nbsp;</span>	initialStreamSendWindowSize int32
<span id="L4401" class="ln">  4401&nbsp;&nbsp;</span>	maxFrameSize                int32
<span id="L4402" class="ln">  4402&nbsp;&nbsp;</span>	peerMaxHeaderListSize       uint32            <span class="comment">// zero means unknown (default)</span>
<span id="L4403" class="ln">  4403&nbsp;&nbsp;</span>	canonHeader                 map[string]string <span class="comment">// http2-lower-case -&gt; Go-Canonical-Case</span>
<span id="L4404" class="ln">  4404&nbsp;&nbsp;</span>	canonHeaderKeysSize         int               <span class="comment">// canonHeader keys size in bytes</span>
<span id="L4405" class="ln">  4405&nbsp;&nbsp;</span>	writingFrame                bool              <span class="comment">// started writing a frame (on serve goroutine or separate)</span>
<span id="L4406" class="ln">  4406&nbsp;&nbsp;</span>	writingFrameAsync           bool              <span class="comment">// started a frame on its own goroutine but haven&#39;t heard back on wroteFrameCh</span>
<span id="L4407" class="ln">  4407&nbsp;&nbsp;</span>	needsFrameFlush             bool              <span class="comment">// last frame write wasn&#39;t a flush</span>
<span id="L4408" class="ln">  4408&nbsp;&nbsp;</span>	inGoAway                    bool              <span class="comment">// we&#39;ve started to or sent GOAWAY</span>
<span id="L4409" class="ln">  4409&nbsp;&nbsp;</span>	inFrameScheduleLoop         bool              <span class="comment">// whether we&#39;re in the scheduleFrameWrite loop</span>
<span id="L4410" class="ln">  4410&nbsp;&nbsp;</span>	needToSendGoAway            bool              <span class="comment">// we need to schedule a GOAWAY frame write</span>
<span id="L4411" class="ln">  4411&nbsp;&nbsp;</span>	goAwayCode                  http2ErrCode
<span id="L4412" class="ln">  4412&nbsp;&nbsp;</span>	shutdownTimer               *time.Timer <span class="comment">// nil until used</span>
<span id="L4413" class="ln">  4413&nbsp;&nbsp;</span>	idleTimer                   *time.Timer <span class="comment">// nil if unused</span>
<span id="L4414" class="ln">  4414&nbsp;&nbsp;</span>
<span id="L4415" class="ln">  4415&nbsp;&nbsp;</span>	<span class="comment">// Owned by the writeFrameAsync goroutine:</span>
<span id="L4416" class="ln">  4416&nbsp;&nbsp;</span>	headerWriteBuf bytes.Buffer
<span id="L4417" class="ln">  4417&nbsp;&nbsp;</span>	hpackEncoder   *hpack.Encoder
<span id="L4418" class="ln">  4418&nbsp;&nbsp;</span>
<span id="L4419" class="ln">  4419&nbsp;&nbsp;</span>	<span class="comment">// Used by startGracefulShutdown.</span>
<span id="L4420" class="ln">  4420&nbsp;&nbsp;</span>	shutdownOnce sync.Once
<span id="L4421" class="ln">  4421&nbsp;&nbsp;</span>}
<span id="L4422" class="ln">  4422&nbsp;&nbsp;</span>
<span id="L4423" class="ln">  4423&nbsp;&nbsp;</span>func (sc *http2serverConn) maxHeaderListSize() uint32 {
<span id="L4424" class="ln">  4424&nbsp;&nbsp;</span>	n := sc.hs.MaxHeaderBytes
<span id="L4425" class="ln">  4425&nbsp;&nbsp;</span>	if n &lt;= 0 {
<span id="L4426" class="ln">  4426&nbsp;&nbsp;</span>		n = DefaultMaxHeaderBytes
<span id="L4427" class="ln">  4427&nbsp;&nbsp;</span>	}
<span id="L4428" class="ln">  4428&nbsp;&nbsp;</span>	<span class="comment">// http2&#39;s count is in a slightly different unit and includes 32 bytes per pair.</span>
<span id="L4429" class="ln">  4429&nbsp;&nbsp;</span>	<span class="comment">// So, take the net/http.Server value and pad it up a bit, assuming 10 headers.</span>
<span id="L4430" class="ln">  4430&nbsp;&nbsp;</span>	const perFieldOverhead = 32 <span class="comment">// per http2 spec</span>
<span id="L4431" class="ln">  4431&nbsp;&nbsp;</span>	const typicalHeaders = 10   <span class="comment">// conservative</span>
<span id="L4432" class="ln">  4432&nbsp;&nbsp;</span>	return uint32(n + typicalHeaders*perFieldOverhead)
<span id="L4433" class="ln">  4433&nbsp;&nbsp;</span>}
<span id="L4434" class="ln">  4434&nbsp;&nbsp;</span>
<span id="L4435" class="ln">  4435&nbsp;&nbsp;</span>func (sc *http2serverConn) curOpenStreams() uint32 {
<span id="L4436" class="ln">  4436&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4437" class="ln">  4437&nbsp;&nbsp;</span>	return sc.curClientStreams + sc.curPushedStreams
<span id="L4438" class="ln">  4438&nbsp;&nbsp;</span>}
<span id="L4439" class="ln">  4439&nbsp;&nbsp;</span>
<span id="L4440" class="ln">  4440&nbsp;&nbsp;</span><span class="comment">// stream represents a stream. This is the minimal metadata needed by</span>
<span id="L4441" class="ln">  4441&nbsp;&nbsp;</span><span class="comment">// the serve goroutine. Most of the actual stream state is owned by</span>
<span id="L4442" class="ln">  4442&nbsp;&nbsp;</span><span class="comment">// the http.Handler&#39;s goroutine in the responseWriter. Because the</span>
<span id="L4443" class="ln">  4443&nbsp;&nbsp;</span><span class="comment">// responseWriter&#39;s responseWriterState is recycled at the end of a</span>
<span id="L4444" class="ln">  4444&nbsp;&nbsp;</span><span class="comment">// handler, this struct intentionally has no pointer to the</span>
<span id="L4445" class="ln">  4445&nbsp;&nbsp;</span><span class="comment">// *responseWriter{,State} itself, as the Handler ending nils out the</span>
<span id="L4446" class="ln">  4446&nbsp;&nbsp;</span><span class="comment">// responseWriter&#39;s state field.</span>
<span id="L4447" class="ln">  4447&nbsp;&nbsp;</span>type http2stream struct {
<span id="L4448" class="ln">  4448&nbsp;&nbsp;</span>	<span class="comment">// immutable:</span>
<span id="L4449" class="ln">  4449&nbsp;&nbsp;</span>	sc        *http2serverConn
<span id="L4450" class="ln">  4450&nbsp;&nbsp;</span>	id        uint32
<span id="L4451" class="ln">  4451&nbsp;&nbsp;</span>	body      *http2pipe       <span class="comment">// non-nil if expecting DATA frames</span>
<span id="L4452" class="ln">  4452&nbsp;&nbsp;</span>	cw        http2closeWaiter <span class="comment">// closed wait stream transitions to closed state</span>
<span id="L4453" class="ln">  4453&nbsp;&nbsp;</span>	ctx       context.Context
<span id="L4454" class="ln">  4454&nbsp;&nbsp;</span>	cancelCtx func()
<span id="L4455" class="ln">  4455&nbsp;&nbsp;</span>
<span id="L4456" class="ln">  4456&nbsp;&nbsp;</span>	<span class="comment">// owned by serverConn&#39;s serve loop:</span>
<span id="L4457" class="ln">  4457&nbsp;&nbsp;</span>	bodyBytes        int64        <span class="comment">// body bytes seen so far</span>
<span id="L4458" class="ln">  4458&nbsp;&nbsp;</span>	declBodyBytes    int64        <span class="comment">// or -1 if undeclared</span>
<span id="L4459" class="ln">  4459&nbsp;&nbsp;</span>	flow             http2outflow <span class="comment">// limits writing from Handler to client</span>
<span id="L4460" class="ln">  4460&nbsp;&nbsp;</span>	inflow           http2inflow  <span class="comment">// what the client is allowed to POST/etc to us</span>
<span id="L4461" class="ln">  4461&nbsp;&nbsp;</span>	state            http2streamState
<span id="L4462" class="ln">  4462&nbsp;&nbsp;</span>	resetQueued      bool        <span class="comment">// RST_STREAM queued for write; set by sc.resetStream</span>
<span id="L4463" class="ln">  4463&nbsp;&nbsp;</span>	gotTrailerHeader bool        <span class="comment">// HEADER frame for trailers was seen</span>
<span id="L4464" class="ln">  4464&nbsp;&nbsp;</span>	wroteHeaders     bool        <span class="comment">// whether we wrote headers (not status 100)</span>
<span id="L4465" class="ln">  4465&nbsp;&nbsp;</span>	readDeadline     *time.Timer <span class="comment">// nil if unused</span>
<span id="L4466" class="ln">  4466&nbsp;&nbsp;</span>	writeDeadline    *time.Timer <span class="comment">// nil if unused</span>
<span id="L4467" class="ln">  4467&nbsp;&nbsp;</span>	closeErr         error       <span class="comment">// set before cw is closed</span>
<span id="L4468" class="ln">  4468&nbsp;&nbsp;</span>
<span id="L4469" class="ln">  4469&nbsp;&nbsp;</span>	trailer    Header <span class="comment">// accumulated trailers</span>
<span id="L4470" class="ln">  4470&nbsp;&nbsp;</span>	reqTrailer Header <span class="comment">// handler&#39;s Request.Trailer</span>
<span id="L4471" class="ln">  4471&nbsp;&nbsp;</span>}
<span id="L4472" class="ln">  4472&nbsp;&nbsp;</span>
<span id="L4473" class="ln">  4473&nbsp;&nbsp;</span>func (sc *http2serverConn) Framer() *http2Framer { return sc.framer }
<span id="L4474" class="ln">  4474&nbsp;&nbsp;</span>
<span id="L4475" class="ln">  4475&nbsp;&nbsp;</span>func (sc *http2serverConn) CloseConn() error { return sc.conn.Close() }
<span id="L4476" class="ln">  4476&nbsp;&nbsp;</span>
<span id="L4477" class="ln">  4477&nbsp;&nbsp;</span>func (sc *http2serverConn) Flush() error { return sc.bw.Flush() }
<span id="L4478" class="ln">  4478&nbsp;&nbsp;</span>
<span id="L4479" class="ln">  4479&nbsp;&nbsp;</span>func (sc *http2serverConn) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer) {
<span id="L4480" class="ln">  4480&nbsp;&nbsp;</span>	return sc.hpackEncoder, &amp;sc.headerWriteBuf
<span id="L4481" class="ln">  4481&nbsp;&nbsp;</span>}
<span id="L4482" class="ln">  4482&nbsp;&nbsp;</span>
<span id="L4483" class="ln">  4483&nbsp;&nbsp;</span>func (sc *http2serverConn) state(streamID uint32) (http2streamState, *http2stream) {
<span id="L4484" class="ln">  4484&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4485" class="ln">  4485&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-5.1</span>
<span id="L4486" class="ln">  4486&nbsp;&nbsp;</span>	if st, ok := sc.streams[streamID]; ok {
<span id="L4487" class="ln">  4487&nbsp;&nbsp;</span>		return st.state, st
<span id="L4488" class="ln">  4488&nbsp;&nbsp;</span>	}
<span id="L4489" class="ln">  4489&nbsp;&nbsp;</span>	<span class="comment">// &#34;The first use of a new stream identifier implicitly closes all</span>
<span id="L4490" class="ln">  4490&nbsp;&nbsp;</span>	<span class="comment">// streams in the &#34;idle&#34; state that might have been initiated by</span>
<span id="L4491" class="ln">  4491&nbsp;&nbsp;</span>	<span class="comment">// that peer with a lower-valued stream identifier. For example, if</span>
<span id="L4492" class="ln">  4492&nbsp;&nbsp;</span>	<span class="comment">// a client sends a HEADERS frame on stream 7 without ever sending a</span>
<span id="L4493" class="ln">  4493&nbsp;&nbsp;</span>	<span class="comment">// frame on stream 5, then stream 5 transitions to the &#34;closed&#34;</span>
<span id="L4494" class="ln">  4494&nbsp;&nbsp;</span>	<span class="comment">// state when the first frame for stream 7 is sent or received.&#34;</span>
<span id="L4495" class="ln">  4495&nbsp;&nbsp;</span>	if streamID%2 == 1 {
<span id="L4496" class="ln">  4496&nbsp;&nbsp;</span>		if streamID &lt;= sc.maxClientStreamID {
<span id="L4497" class="ln">  4497&nbsp;&nbsp;</span>			return http2stateClosed, nil
<span id="L4498" class="ln">  4498&nbsp;&nbsp;</span>		}
<span id="L4499" class="ln">  4499&nbsp;&nbsp;</span>	} else {
<span id="L4500" class="ln">  4500&nbsp;&nbsp;</span>		if streamID &lt;= sc.maxPushPromiseID {
<span id="L4501" class="ln">  4501&nbsp;&nbsp;</span>			return http2stateClosed, nil
<span id="L4502" class="ln">  4502&nbsp;&nbsp;</span>		}
<span id="L4503" class="ln">  4503&nbsp;&nbsp;</span>	}
<span id="L4504" class="ln">  4504&nbsp;&nbsp;</span>	return http2stateIdle, nil
<span id="L4505" class="ln">  4505&nbsp;&nbsp;</span>}
<span id="L4506" class="ln">  4506&nbsp;&nbsp;</span>
<span id="L4507" class="ln">  4507&nbsp;&nbsp;</span><span class="comment">// setConnState calls the net/http ConnState hook for this connection, if configured.</span>
<span id="L4508" class="ln">  4508&nbsp;&nbsp;</span><span class="comment">// Note that the net/http package does StateNew and StateClosed for us.</span>
<span id="L4509" class="ln">  4509&nbsp;&nbsp;</span><span class="comment">// There is currently no plan for StateHijacked or hijacking HTTP/2 connections.</span>
<span id="L4510" class="ln">  4510&nbsp;&nbsp;</span>func (sc *http2serverConn) setConnState(state ConnState) {
<span id="L4511" class="ln">  4511&nbsp;&nbsp;</span>	if sc.hs.ConnState != nil {
<span id="L4512" class="ln">  4512&nbsp;&nbsp;</span>		sc.hs.ConnState(sc.conn, state)
<span id="L4513" class="ln">  4513&nbsp;&nbsp;</span>	}
<span id="L4514" class="ln">  4514&nbsp;&nbsp;</span>}
<span id="L4515" class="ln">  4515&nbsp;&nbsp;</span>
<span id="L4516" class="ln">  4516&nbsp;&nbsp;</span>func (sc *http2serverConn) vlogf(format string, args ...interface{}) {
<span id="L4517" class="ln">  4517&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L4518" class="ln">  4518&nbsp;&nbsp;</span>		sc.logf(format, args...)
<span id="L4519" class="ln">  4519&nbsp;&nbsp;</span>	}
<span id="L4520" class="ln">  4520&nbsp;&nbsp;</span>}
<span id="L4521" class="ln">  4521&nbsp;&nbsp;</span>
<span id="L4522" class="ln">  4522&nbsp;&nbsp;</span>func (sc *http2serverConn) logf(format string, args ...interface{}) {
<span id="L4523" class="ln">  4523&nbsp;&nbsp;</span>	if lg := sc.hs.ErrorLog; lg != nil {
<span id="L4524" class="ln">  4524&nbsp;&nbsp;</span>		lg.Printf(format, args...)
<span id="L4525" class="ln">  4525&nbsp;&nbsp;</span>	} else {
<span id="L4526" class="ln">  4526&nbsp;&nbsp;</span>		log.Printf(format, args...)
<span id="L4527" class="ln">  4527&nbsp;&nbsp;</span>	}
<span id="L4528" class="ln">  4528&nbsp;&nbsp;</span>}
<span id="L4529" class="ln">  4529&nbsp;&nbsp;</span>
<span id="L4530" class="ln">  4530&nbsp;&nbsp;</span><span class="comment">// errno returns v&#39;s underlying uintptr, else 0.</span>
<span id="L4531" class="ln">  4531&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4532" class="ln">  4532&nbsp;&nbsp;</span><span class="comment">// TODO: remove this helper function once http2 can use build</span>
<span id="L4533" class="ln">  4533&nbsp;&nbsp;</span><span class="comment">// tags. See comment in isClosedConnError.</span>
<span id="L4534" class="ln">  4534&nbsp;&nbsp;</span>func http2errno(v error) uintptr {
<span id="L4535" class="ln">  4535&nbsp;&nbsp;</span>	if rv := reflect.ValueOf(v); rv.Kind() == reflect.Uintptr {
<span id="L4536" class="ln">  4536&nbsp;&nbsp;</span>		return uintptr(rv.Uint())
<span id="L4537" class="ln">  4537&nbsp;&nbsp;</span>	}
<span id="L4538" class="ln">  4538&nbsp;&nbsp;</span>	return 0
<span id="L4539" class="ln">  4539&nbsp;&nbsp;</span>}
<span id="L4540" class="ln">  4540&nbsp;&nbsp;</span>
<span id="L4541" class="ln">  4541&nbsp;&nbsp;</span><span class="comment">// isClosedConnError reports whether err is an error from use of a closed</span>
<span id="L4542" class="ln">  4542&nbsp;&nbsp;</span><span class="comment">// network connection.</span>
<span id="L4543" class="ln">  4543&nbsp;&nbsp;</span>func http2isClosedConnError(err error) bool {
<span id="L4544" class="ln">  4544&nbsp;&nbsp;</span>	if err == nil {
<span id="L4545" class="ln">  4545&nbsp;&nbsp;</span>		return false
<span id="L4546" class="ln">  4546&nbsp;&nbsp;</span>	}
<span id="L4547" class="ln">  4547&nbsp;&nbsp;</span>
<span id="L4548" class="ln">  4548&nbsp;&nbsp;</span>	<span class="comment">// TODO: remove this string search and be more like the Windows</span>
<span id="L4549" class="ln">  4549&nbsp;&nbsp;</span>	<span class="comment">// case below. That might involve modifying the standard library</span>
<span id="L4550" class="ln">  4550&nbsp;&nbsp;</span>	<span class="comment">// to return better error types.</span>
<span id="L4551" class="ln">  4551&nbsp;&nbsp;</span>	str := err.Error()
<span id="L4552" class="ln">  4552&nbsp;&nbsp;</span>	if strings.Contains(str, &#34;use of closed network connection&#34;) {
<span id="L4553" class="ln">  4553&nbsp;&nbsp;</span>		return true
<span id="L4554" class="ln">  4554&nbsp;&nbsp;</span>	}
<span id="L4555" class="ln">  4555&nbsp;&nbsp;</span>
<span id="L4556" class="ln">  4556&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): x/tools/cmd/bundle doesn&#39;t really support</span>
<span id="L4557" class="ln">  4557&nbsp;&nbsp;</span>	<span class="comment">// build tags, so I can&#39;t make an http2_windows.go file with</span>
<span id="L4558" class="ln">  4558&nbsp;&nbsp;</span>	<span class="comment">// Windows-specific stuff. Fix that and move this, once we</span>
<span id="L4559" class="ln">  4559&nbsp;&nbsp;</span>	<span class="comment">// have a way to bundle this into std&#39;s net/http somehow.</span>
<span id="L4560" class="ln">  4560&nbsp;&nbsp;</span>	if runtime.GOOS == &#34;windows&#34; {
<span id="L4561" class="ln">  4561&nbsp;&nbsp;</span>		if oe, ok := err.(*net.OpError); ok &amp;&amp; oe.Op == &#34;read&#34; {
<span id="L4562" class="ln">  4562&nbsp;&nbsp;</span>			if se, ok := oe.Err.(*os.SyscallError); ok &amp;&amp; se.Syscall == &#34;wsarecv&#34; {
<span id="L4563" class="ln">  4563&nbsp;&nbsp;</span>				const WSAECONNABORTED = 10053
<span id="L4564" class="ln">  4564&nbsp;&nbsp;</span>				const WSAECONNRESET = 10054
<span id="L4565" class="ln">  4565&nbsp;&nbsp;</span>				if n := http2errno(se.Err); n == WSAECONNRESET || n == WSAECONNABORTED {
<span id="L4566" class="ln">  4566&nbsp;&nbsp;</span>					return true
<span id="L4567" class="ln">  4567&nbsp;&nbsp;</span>				}
<span id="L4568" class="ln">  4568&nbsp;&nbsp;</span>			}
<span id="L4569" class="ln">  4569&nbsp;&nbsp;</span>		}
<span id="L4570" class="ln">  4570&nbsp;&nbsp;</span>	}
<span id="L4571" class="ln">  4571&nbsp;&nbsp;</span>	return false
<span id="L4572" class="ln">  4572&nbsp;&nbsp;</span>}
<span id="L4573" class="ln">  4573&nbsp;&nbsp;</span>
<span id="L4574" class="ln">  4574&nbsp;&nbsp;</span>func (sc *http2serverConn) condlogf(err error, format string, args ...interface{}) {
<span id="L4575" class="ln">  4575&nbsp;&nbsp;</span>	if err == nil {
<span id="L4576" class="ln">  4576&nbsp;&nbsp;</span>		return
<span id="L4577" class="ln">  4577&nbsp;&nbsp;</span>	}
<span id="L4578" class="ln">  4578&nbsp;&nbsp;</span>	if err == io.EOF || err == io.ErrUnexpectedEOF || http2isClosedConnError(err) || err == http2errPrefaceTimeout {
<span id="L4579" class="ln">  4579&nbsp;&nbsp;</span>		<span class="comment">// Boring, expected errors.</span>
<span id="L4580" class="ln">  4580&nbsp;&nbsp;</span>		sc.vlogf(format, args...)
<span id="L4581" class="ln">  4581&nbsp;&nbsp;</span>	} else {
<span id="L4582" class="ln">  4582&nbsp;&nbsp;</span>		sc.logf(format, args...)
<span id="L4583" class="ln">  4583&nbsp;&nbsp;</span>	}
<span id="L4584" class="ln">  4584&nbsp;&nbsp;</span>}
<span id="L4585" class="ln">  4585&nbsp;&nbsp;</span>
<span id="L4586" class="ln">  4586&nbsp;&nbsp;</span><span class="comment">// maxCachedCanonicalHeadersKeysSize is an arbitrarily-chosen limit on the size</span>
<span id="L4587" class="ln">  4587&nbsp;&nbsp;</span><span class="comment">// of the entries in the canonHeader cache.</span>
<span id="L4588" class="ln">  4588&nbsp;&nbsp;</span><span class="comment">// This should be larger than the size of unique, uncommon header keys likely to</span>
<span id="L4589" class="ln">  4589&nbsp;&nbsp;</span><span class="comment">// be sent by the peer, while not so high as to permit unreasonable memory usage</span>
<span id="L4590" class="ln">  4590&nbsp;&nbsp;</span><span class="comment">// if the peer sends an unbounded number of unique header keys.</span>
<span id="L4591" class="ln">  4591&nbsp;&nbsp;</span>const http2maxCachedCanonicalHeadersKeysSize = 2048
<span id="L4592" class="ln">  4592&nbsp;&nbsp;</span>
<span id="L4593" class="ln">  4593&nbsp;&nbsp;</span>func (sc *http2serverConn) canonicalHeader(v string) string {
<span id="L4594" class="ln">  4594&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4595" class="ln">  4595&nbsp;&nbsp;</span>	http2buildCommonHeaderMapsOnce()
<span id="L4596" class="ln">  4596&nbsp;&nbsp;</span>	cv, ok := http2commonCanonHeader[v]
<span id="L4597" class="ln">  4597&nbsp;&nbsp;</span>	if ok {
<span id="L4598" class="ln">  4598&nbsp;&nbsp;</span>		return cv
<span id="L4599" class="ln">  4599&nbsp;&nbsp;</span>	}
<span id="L4600" class="ln">  4600&nbsp;&nbsp;</span>	cv, ok = sc.canonHeader[v]
<span id="L4601" class="ln">  4601&nbsp;&nbsp;</span>	if ok {
<span id="L4602" class="ln">  4602&nbsp;&nbsp;</span>		return cv
<span id="L4603" class="ln">  4603&nbsp;&nbsp;</span>	}
<span id="L4604" class="ln">  4604&nbsp;&nbsp;</span>	if sc.canonHeader == nil {
<span id="L4605" class="ln">  4605&nbsp;&nbsp;</span>		sc.canonHeader = make(map[string]string)
<span id="L4606" class="ln">  4606&nbsp;&nbsp;</span>	}
<span id="L4607" class="ln">  4607&nbsp;&nbsp;</span>	cv = CanonicalHeaderKey(v)
<span id="L4608" class="ln">  4608&nbsp;&nbsp;</span>	size := 100 + len(v)*2 <span class="comment">// 100 bytes of map overhead + key + value</span>
<span id="L4609" class="ln">  4609&nbsp;&nbsp;</span>	if sc.canonHeaderKeysSize+size &lt;= http2maxCachedCanonicalHeadersKeysSize {
<span id="L4610" class="ln">  4610&nbsp;&nbsp;</span>		sc.canonHeader[v] = cv
<span id="L4611" class="ln">  4611&nbsp;&nbsp;</span>		sc.canonHeaderKeysSize += size
<span id="L4612" class="ln">  4612&nbsp;&nbsp;</span>	}
<span id="L4613" class="ln">  4613&nbsp;&nbsp;</span>	return cv
<span id="L4614" class="ln">  4614&nbsp;&nbsp;</span>}
<span id="L4615" class="ln">  4615&nbsp;&nbsp;</span>
<span id="L4616" class="ln">  4616&nbsp;&nbsp;</span>type http2readFrameResult struct {
<span id="L4617" class="ln">  4617&nbsp;&nbsp;</span>	f   http2Frame <span class="comment">// valid until readMore is called</span>
<span id="L4618" class="ln">  4618&nbsp;&nbsp;</span>	err error
<span id="L4619" class="ln">  4619&nbsp;&nbsp;</span>
<span id="L4620" class="ln">  4620&nbsp;&nbsp;</span>	<span class="comment">// readMore should be called once the consumer no longer needs or</span>
<span id="L4621" class="ln">  4621&nbsp;&nbsp;</span>	<span class="comment">// retains f. After readMore, f is invalid and more frames can be</span>
<span id="L4622" class="ln">  4622&nbsp;&nbsp;</span>	<span class="comment">// read.</span>
<span id="L4623" class="ln">  4623&nbsp;&nbsp;</span>	readMore func()
<span id="L4624" class="ln">  4624&nbsp;&nbsp;</span>}
<span id="L4625" class="ln">  4625&nbsp;&nbsp;</span>
<span id="L4626" class="ln">  4626&nbsp;&nbsp;</span><span class="comment">// readFrames is the loop that reads incoming frames.</span>
<span id="L4627" class="ln">  4627&nbsp;&nbsp;</span><span class="comment">// It takes care to only read one frame at a time, blocking until the</span>
<span id="L4628" class="ln">  4628&nbsp;&nbsp;</span><span class="comment">// consumer is done with the frame.</span>
<span id="L4629" class="ln">  4629&nbsp;&nbsp;</span><span class="comment">// It&#39;s run on its own goroutine.</span>
<span id="L4630" class="ln">  4630&nbsp;&nbsp;</span>func (sc *http2serverConn) readFrames() {
<span id="L4631" class="ln">  4631&nbsp;&nbsp;</span>	gate := make(http2gate)
<span id="L4632" class="ln">  4632&nbsp;&nbsp;</span>	gateDone := gate.Done
<span id="L4633" class="ln">  4633&nbsp;&nbsp;</span>	for {
<span id="L4634" class="ln">  4634&nbsp;&nbsp;</span>		f, err := sc.framer.ReadFrame()
<span id="L4635" class="ln">  4635&nbsp;&nbsp;</span>		select {
<span id="L4636" class="ln">  4636&nbsp;&nbsp;</span>		case sc.readFrameCh &lt;- http2readFrameResult{f, err, gateDone}:
<span id="L4637" class="ln">  4637&nbsp;&nbsp;</span>		case &lt;-sc.doneServing:
<span id="L4638" class="ln">  4638&nbsp;&nbsp;</span>			return
<span id="L4639" class="ln">  4639&nbsp;&nbsp;</span>		}
<span id="L4640" class="ln">  4640&nbsp;&nbsp;</span>		select {
<span id="L4641" class="ln">  4641&nbsp;&nbsp;</span>		case &lt;-gate:
<span id="L4642" class="ln">  4642&nbsp;&nbsp;</span>		case &lt;-sc.doneServing:
<span id="L4643" class="ln">  4643&nbsp;&nbsp;</span>			return
<span id="L4644" class="ln">  4644&nbsp;&nbsp;</span>		}
<span id="L4645" class="ln">  4645&nbsp;&nbsp;</span>		if http2terminalReadFrameError(err) {
<span id="L4646" class="ln">  4646&nbsp;&nbsp;</span>			return
<span id="L4647" class="ln">  4647&nbsp;&nbsp;</span>		}
<span id="L4648" class="ln">  4648&nbsp;&nbsp;</span>	}
<span id="L4649" class="ln">  4649&nbsp;&nbsp;</span>}
<span id="L4650" class="ln">  4650&nbsp;&nbsp;</span>
<span id="L4651" class="ln">  4651&nbsp;&nbsp;</span><span class="comment">// frameWriteResult is the message passed from writeFrameAsync to the serve goroutine.</span>
<span id="L4652" class="ln">  4652&nbsp;&nbsp;</span>type http2frameWriteResult struct {
<span id="L4653" class="ln">  4653&nbsp;&nbsp;</span>	_   http2incomparable
<span id="L4654" class="ln">  4654&nbsp;&nbsp;</span>	wr  http2FrameWriteRequest <span class="comment">// what was written (or attempted)</span>
<span id="L4655" class="ln">  4655&nbsp;&nbsp;</span>	err error                  <span class="comment">// result of the writeFrame call</span>
<span id="L4656" class="ln">  4656&nbsp;&nbsp;</span>}
<span id="L4657" class="ln">  4657&nbsp;&nbsp;</span>
<span id="L4658" class="ln">  4658&nbsp;&nbsp;</span><span class="comment">// writeFrameAsync runs in its own goroutine and writes a single frame</span>
<span id="L4659" class="ln">  4659&nbsp;&nbsp;</span><span class="comment">// and then reports when it&#39;s done.</span>
<span id="L4660" class="ln">  4660&nbsp;&nbsp;</span><span class="comment">// At most one goroutine can be running writeFrameAsync at a time per</span>
<span id="L4661" class="ln">  4661&nbsp;&nbsp;</span><span class="comment">// serverConn.</span>
<span id="L4662" class="ln">  4662&nbsp;&nbsp;</span>func (sc *http2serverConn) writeFrameAsync(wr http2FrameWriteRequest, wd *http2writeData) {
<span id="L4663" class="ln">  4663&nbsp;&nbsp;</span>	var err error
<span id="L4664" class="ln">  4664&nbsp;&nbsp;</span>	if wd == nil {
<span id="L4665" class="ln">  4665&nbsp;&nbsp;</span>		err = wr.write.writeFrame(sc)
<span id="L4666" class="ln">  4666&nbsp;&nbsp;</span>	} else {
<span id="L4667" class="ln">  4667&nbsp;&nbsp;</span>		err = sc.framer.endWrite()
<span id="L4668" class="ln">  4668&nbsp;&nbsp;</span>	}
<span id="L4669" class="ln">  4669&nbsp;&nbsp;</span>	sc.wroteFrameCh &lt;- http2frameWriteResult{wr: wr, err: err}
<span id="L4670" class="ln">  4670&nbsp;&nbsp;</span>}
<span id="L4671" class="ln">  4671&nbsp;&nbsp;</span>
<span id="L4672" class="ln">  4672&nbsp;&nbsp;</span>func (sc *http2serverConn) closeAllStreamsOnConnClose() {
<span id="L4673" class="ln">  4673&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4674" class="ln">  4674&nbsp;&nbsp;</span>	for _, st := range sc.streams {
<span id="L4675" class="ln">  4675&nbsp;&nbsp;</span>		sc.closeStream(st, http2errClientDisconnected)
<span id="L4676" class="ln">  4676&nbsp;&nbsp;</span>	}
<span id="L4677" class="ln">  4677&nbsp;&nbsp;</span>}
<span id="L4678" class="ln">  4678&nbsp;&nbsp;</span>
<span id="L4679" class="ln">  4679&nbsp;&nbsp;</span>func (sc *http2serverConn) stopShutdownTimer() {
<span id="L4680" class="ln">  4680&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4681" class="ln">  4681&nbsp;&nbsp;</span>	if t := sc.shutdownTimer; t != nil {
<span id="L4682" class="ln">  4682&nbsp;&nbsp;</span>		t.Stop()
<span id="L4683" class="ln">  4683&nbsp;&nbsp;</span>	}
<span id="L4684" class="ln">  4684&nbsp;&nbsp;</span>}
<span id="L4685" class="ln">  4685&nbsp;&nbsp;</span>
<span id="L4686" class="ln">  4686&nbsp;&nbsp;</span>func (sc *http2serverConn) notePanic() {
<span id="L4687" class="ln">  4687&nbsp;&nbsp;</span>	<span class="comment">// Note: this is for serverConn.serve panicking, not http.Handler code.</span>
<span id="L4688" class="ln">  4688&nbsp;&nbsp;</span>	if http2testHookOnPanicMu != nil {
<span id="L4689" class="ln">  4689&nbsp;&nbsp;</span>		http2testHookOnPanicMu.Lock()
<span id="L4690" class="ln">  4690&nbsp;&nbsp;</span>		defer http2testHookOnPanicMu.Unlock()
<span id="L4691" class="ln">  4691&nbsp;&nbsp;</span>	}
<span id="L4692" class="ln">  4692&nbsp;&nbsp;</span>	if http2testHookOnPanic != nil {
<span id="L4693" class="ln">  4693&nbsp;&nbsp;</span>		if e := recover(); e != nil {
<span id="L4694" class="ln">  4694&nbsp;&nbsp;</span>			if http2testHookOnPanic(sc, e) {
<span id="L4695" class="ln">  4695&nbsp;&nbsp;</span>				panic(e)
<span id="L4696" class="ln">  4696&nbsp;&nbsp;</span>			}
<span id="L4697" class="ln">  4697&nbsp;&nbsp;</span>		}
<span id="L4698" class="ln">  4698&nbsp;&nbsp;</span>	}
<span id="L4699" class="ln">  4699&nbsp;&nbsp;</span>}
<span id="L4700" class="ln">  4700&nbsp;&nbsp;</span>
<span id="L4701" class="ln">  4701&nbsp;&nbsp;</span>func (sc *http2serverConn) serve() {
<span id="L4702" class="ln">  4702&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4703" class="ln">  4703&nbsp;&nbsp;</span>	defer sc.notePanic()
<span id="L4704" class="ln">  4704&nbsp;&nbsp;</span>	defer sc.conn.Close()
<span id="L4705" class="ln">  4705&nbsp;&nbsp;</span>	defer sc.closeAllStreamsOnConnClose()
<span id="L4706" class="ln">  4706&nbsp;&nbsp;</span>	defer sc.stopShutdownTimer()
<span id="L4707" class="ln">  4707&nbsp;&nbsp;</span>	defer close(sc.doneServing) <span class="comment">// unblocks handlers trying to send</span>
<span id="L4708" class="ln">  4708&nbsp;&nbsp;</span>
<span id="L4709" class="ln">  4709&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L4710" class="ln">  4710&nbsp;&nbsp;</span>		sc.vlogf(&#34;http2: server connection from %v on %p&#34;, sc.conn.RemoteAddr(), sc.hs)
<span id="L4711" class="ln">  4711&nbsp;&nbsp;</span>	}
<span id="L4712" class="ln">  4712&nbsp;&nbsp;</span>
<span id="L4713" class="ln">  4713&nbsp;&nbsp;</span>	sc.writeFrame(http2FrameWriteRequest{
<span id="L4714" class="ln">  4714&nbsp;&nbsp;</span>		write: http2writeSettings{
<span id="L4715" class="ln">  4715&nbsp;&nbsp;</span>			{http2SettingMaxFrameSize, sc.srv.maxReadFrameSize()},
<span id="L4716" class="ln">  4716&nbsp;&nbsp;</span>			{http2SettingMaxConcurrentStreams, sc.advMaxStreams},
<span id="L4717" class="ln">  4717&nbsp;&nbsp;</span>			{http2SettingMaxHeaderListSize, sc.maxHeaderListSize()},
<span id="L4718" class="ln">  4718&nbsp;&nbsp;</span>			{http2SettingHeaderTableSize, sc.srv.maxDecoderHeaderTableSize()},
<span id="L4719" class="ln">  4719&nbsp;&nbsp;</span>			{http2SettingInitialWindowSize, uint32(sc.srv.initialStreamRecvWindowSize())},
<span id="L4720" class="ln">  4720&nbsp;&nbsp;</span>		},
<span id="L4721" class="ln">  4721&nbsp;&nbsp;</span>	})
<span id="L4722" class="ln">  4722&nbsp;&nbsp;</span>	sc.unackedSettings++
<span id="L4723" class="ln">  4723&nbsp;&nbsp;</span>
<span id="L4724" class="ln">  4724&nbsp;&nbsp;</span>	<span class="comment">// Each connection starts with initialWindowSize inflow tokens.</span>
<span id="L4725" class="ln">  4725&nbsp;&nbsp;</span>	<span class="comment">// If a higher value is configured, we add more tokens.</span>
<span id="L4726" class="ln">  4726&nbsp;&nbsp;</span>	if diff := sc.srv.initialConnRecvWindowSize() - http2initialWindowSize; diff &gt; 0 {
<span id="L4727" class="ln">  4727&nbsp;&nbsp;</span>		sc.sendWindowUpdate(nil, int(diff))
<span id="L4728" class="ln">  4728&nbsp;&nbsp;</span>	}
<span id="L4729" class="ln">  4729&nbsp;&nbsp;</span>
<span id="L4730" class="ln">  4730&nbsp;&nbsp;</span>	if err := sc.readPreface(); err != nil {
<span id="L4731" class="ln">  4731&nbsp;&nbsp;</span>		sc.condlogf(err, &#34;http2: server: error reading preface from client %v: %v&#34;, sc.conn.RemoteAddr(), err)
<span id="L4732" class="ln">  4732&nbsp;&nbsp;</span>		return
<span id="L4733" class="ln">  4733&nbsp;&nbsp;</span>	}
<span id="L4734" class="ln">  4734&nbsp;&nbsp;</span>	<span class="comment">// Now that we&#39;ve got the preface, get us out of the</span>
<span id="L4735" class="ln">  4735&nbsp;&nbsp;</span>	<span class="comment">// &#34;StateNew&#34; state. We can&#39;t go directly to idle, though.</span>
<span id="L4736" class="ln">  4736&nbsp;&nbsp;</span>	<span class="comment">// Active means we read some data and anticipate a request. We&#39;ll</span>
<span id="L4737" class="ln">  4737&nbsp;&nbsp;</span>	<span class="comment">// do another Active when we get a HEADERS frame.</span>
<span id="L4738" class="ln">  4738&nbsp;&nbsp;</span>	sc.setConnState(StateActive)
<span id="L4739" class="ln">  4739&nbsp;&nbsp;</span>	sc.setConnState(StateIdle)
<span id="L4740" class="ln">  4740&nbsp;&nbsp;</span>
<span id="L4741" class="ln">  4741&nbsp;&nbsp;</span>	if sc.srv.IdleTimeout != 0 {
<span id="L4742" class="ln">  4742&nbsp;&nbsp;</span>		sc.idleTimer = time.AfterFunc(sc.srv.IdleTimeout, sc.onIdleTimer)
<span id="L4743" class="ln">  4743&nbsp;&nbsp;</span>		defer sc.idleTimer.Stop()
<span id="L4744" class="ln">  4744&nbsp;&nbsp;</span>	}
<span id="L4745" class="ln">  4745&nbsp;&nbsp;</span>
<span id="L4746" class="ln">  4746&nbsp;&nbsp;</span>	go sc.readFrames() <span class="comment">// closed by defer sc.conn.Close above</span>
<span id="L4747" class="ln">  4747&nbsp;&nbsp;</span>
<span id="L4748" class="ln">  4748&nbsp;&nbsp;</span>	settingsTimer := time.AfterFunc(http2firstSettingsTimeout, sc.onSettingsTimer)
<span id="L4749" class="ln">  4749&nbsp;&nbsp;</span>	defer settingsTimer.Stop()
<span id="L4750" class="ln">  4750&nbsp;&nbsp;</span>
<span id="L4751" class="ln">  4751&nbsp;&nbsp;</span>	loopNum := 0
<span id="L4752" class="ln">  4752&nbsp;&nbsp;</span>	for {
<span id="L4753" class="ln">  4753&nbsp;&nbsp;</span>		loopNum++
<span id="L4754" class="ln">  4754&nbsp;&nbsp;</span>		select {
<span id="L4755" class="ln">  4755&nbsp;&nbsp;</span>		case wr := &lt;-sc.wantWriteFrameCh:
<span id="L4756" class="ln">  4756&nbsp;&nbsp;</span>			if se, ok := wr.write.(http2StreamError); ok {
<span id="L4757" class="ln">  4757&nbsp;&nbsp;</span>				sc.resetStream(se)
<span id="L4758" class="ln">  4758&nbsp;&nbsp;</span>				break
<span id="L4759" class="ln">  4759&nbsp;&nbsp;</span>			}
<span id="L4760" class="ln">  4760&nbsp;&nbsp;</span>			sc.writeFrame(wr)
<span id="L4761" class="ln">  4761&nbsp;&nbsp;</span>		case res := &lt;-sc.wroteFrameCh:
<span id="L4762" class="ln">  4762&nbsp;&nbsp;</span>			sc.wroteFrame(res)
<span id="L4763" class="ln">  4763&nbsp;&nbsp;</span>		case res := &lt;-sc.readFrameCh:
<span id="L4764" class="ln">  4764&nbsp;&nbsp;</span>			<span class="comment">// Process any written frames before reading new frames from the client since a</span>
<span id="L4765" class="ln">  4765&nbsp;&nbsp;</span>			<span class="comment">// written frame could have triggered a new stream to be started.</span>
<span id="L4766" class="ln">  4766&nbsp;&nbsp;</span>			if sc.writingFrameAsync {
<span id="L4767" class="ln">  4767&nbsp;&nbsp;</span>				select {
<span id="L4768" class="ln">  4768&nbsp;&nbsp;</span>				case wroteRes := &lt;-sc.wroteFrameCh:
<span id="L4769" class="ln">  4769&nbsp;&nbsp;</span>					sc.wroteFrame(wroteRes)
<span id="L4770" class="ln">  4770&nbsp;&nbsp;</span>				default:
<span id="L4771" class="ln">  4771&nbsp;&nbsp;</span>				}
<span id="L4772" class="ln">  4772&nbsp;&nbsp;</span>			}
<span id="L4773" class="ln">  4773&nbsp;&nbsp;</span>			if !sc.processFrameFromReader(res) {
<span id="L4774" class="ln">  4774&nbsp;&nbsp;</span>				return
<span id="L4775" class="ln">  4775&nbsp;&nbsp;</span>			}
<span id="L4776" class="ln">  4776&nbsp;&nbsp;</span>			res.readMore()
<span id="L4777" class="ln">  4777&nbsp;&nbsp;</span>			if settingsTimer != nil {
<span id="L4778" class="ln">  4778&nbsp;&nbsp;</span>				settingsTimer.Stop()
<span id="L4779" class="ln">  4779&nbsp;&nbsp;</span>				settingsTimer = nil
<span id="L4780" class="ln">  4780&nbsp;&nbsp;</span>			}
<span id="L4781" class="ln">  4781&nbsp;&nbsp;</span>		case m := &lt;-sc.bodyReadCh:
<span id="L4782" class="ln">  4782&nbsp;&nbsp;</span>			sc.noteBodyRead(m.st, m.n)
<span id="L4783" class="ln">  4783&nbsp;&nbsp;</span>		case msg := &lt;-sc.serveMsgCh:
<span id="L4784" class="ln">  4784&nbsp;&nbsp;</span>			switch v := msg.(type) {
<span id="L4785" class="ln">  4785&nbsp;&nbsp;</span>			case func(int):
<span id="L4786" class="ln">  4786&nbsp;&nbsp;</span>				v(loopNum) <span class="comment">// for testing</span>
<span id="L4787" class="ln">  4787&nbsp;&nbsp;</span>			case *http2serverMessage:
<span id="L4788" class="ln">  4788&nbsp;&nbsp;</span>				switch v {
<span id="L4789" class="ln">  4789&nbsp;&nbsp;</span>				case http2settingsTimerMsg:
<span id="L4790" class="ln">  4790&nbsp;&nbsp;</span>					sc.logf(&#34;timeout waiting for SETTINGS frames from %v&#34;, sc.conn.RemoteAddr())
<span id="L4791" class="ln">  4791&nbsp;&nbsp;</span>					return
<span id="L4792" class="ln">  4792&nbsp;&nbsp;</span>				case http2idleTimerMsg:
<span id="L4793" class="ln">  4793&nbsp;&nbsp;</span>					sc.vlogf(&#34;connection is idle&#34;)
<span id="L4794" class="ln">  4794&nbsp;&nbsp;</span>					sc.goAway(http2ErrCodeNo)
<span id="L4795" class="ln">  4795&nbsp;&nbsp;</span>				case http2shutdownTimerMsg:
<span id="L4796" class="ln">  4796&nbsp;&nbsp;</span>					sc.vlogf(&#34;GOAWAY close timer fired; closing conn from %v&#34;, sc.conn.RemoteAddr())
<span id="L4797" class="ln">  4797&nbsp;&nbsp;</span>					return
<span id="L4798" class="ln">  4798&nbsp;&nbsp;</span>				case http2gracefulShutdownMsg:
<span id="L4799" class="ln">  4799&nbsp;&nbsp;</span>					sc.startGracefulShutdownInternal()
<span id="L4800" class="ln">  4800&nbsp;&nbsp;</span>				case http2handlerDoneMsg:
<span id="L4801" class="ln">  4801&nbsp;&nbsp;</span>					sc.handlerDone()
<span id="L4802" class="ln">  4802&nbsp;&nbsp;</span>				default:
<span id="L4803" class="ln">  4803&nbsp;&nbsp;</span>					panic(&#34;unknown timer&#34;)
<span id="L4804" class="ln">  4804&nbsp;&nbsp;</span>				}
<span id="L4805" class="ln">  4805&nbsp;&nbsp;</span>			case *http2startPushRequest:
<span id="L4806" class="ln">  4806&nbsp;&nbsp;</span>				sc.startPush(v)
<span id="L4807" class="ln">  4807&nbsp;&nbsp;</span>			case func(*http2serverConn):
<span id="L4808" class="ln">  4808&nbsp;&nbsp;</span>				v(sc)
<span id="L4809" class="ln">  4809&nbsp;&nbsp;</span>			default:
<span id="L4810" class="ln">  4810&nbsp;&nbsp;</span>				panic(fmt.Sprintf(&#34;unexpected type %T&#34;, v))
<span id="L4811" class="ln">  4811&nbsp;&nbsp;</span>			}
<span id="L4812" class="ln">  4812&nbsp;&nbsp;</span>		}
<span id="L4813" class="ln">  4813&nbsp;&nbsp;</span>
<span id="L4814" class="ln">  4814&nbsp;&nbsp;</span>		<span class="comment">// If the peer is causing us to generate a lot of control frames,</span>
<span id="L4815" class="ln">  4815&nbsp;&nbsp;</span>		<span class="comment">// but not reading them from us, assume they are trying to make us</span>
<span id="L4816" class="ln">  4816&nbsp;&nbsp;</span>		<span class="comment">// run out of memory.</span>
<span id="L4817" class="ln">  4817&nbsp;&nbsp;</span>		if sc.queuedControlFrames &gt; sc.srv.maxQueuedControlFrames() {
<span id="L4818" class="ln">  4818&nbsp;&nbsp;</span>			sc.vlogf(&#34;http2: too many control frames in send queue, closing connection&#34;)
<span id="L4819" class="ln">  4819&nbsp;&nbsp;</span>			return
<span id="L4820" class="ln">  4820&nbsp;&nbsp;</span>		}
<span id="L4821" class="ln">  4821&nbsp;&nbsp;</span>
<span id="L4822" class="ln">  4822&nbsp;&nbsp;</span>		<span class="comment">// Start the shutdown timer after sending a GOAWAY. When sending GOAWAY</span>
<span id="L4823" class="ln">  4823&nbsp;&nbsp;</span>		<span class="comment">// with no error code (graceful shutdown), don&#39;t start the timer until</span>
<span id="L4824" class="ln">  4824&nbsp;&nbsp;</span>		<span class="comment">// all open streams have been completed.</span>
<span id="L4825" class="ln">  4825&nbsp;&nbsp;</span>		sentGoAway := sc.inGoAway &amp;&amp; !sc.needToSendGoAway &amp;&amp; !sc.writingFrame
<span id="L4826" class="ln">  4826&nbsp;&nbsp;</span>		gracefulShutdownComplete := sc.goAwayCode == http2ErrCodeNo &amp;&amp; sc.curOpenStreams() == 0
<span id="L4827" class="ln">  4827&nbsp;&nbsp;</span>		if sentGoAway &amp;&amp; sc.shutdownTimer == nil &amp;&amp; (sc.goAwayCode != http2ErrCodeNo || gracefulShutdownComplete) {
<span id="L4828" class="ln">  4828&nbsp;&nbsp;</span>			sc.shutDownIn(http2goAwayTimeout)
<span id="L4829" class="ln">  4829&nbsp;&nbsp;</span>		}
<span id="L4830" class="ln">  4830&nbsp;&nbsp;</span>	}
<span id="L4831" class="ln">  4831&nbsp;&nbsp;</span>}
<span id="L4832" class="ln">  4832&nbsp;&nbsp;</span>
<span id="L4833" class="ln">  4833&nbsp;&nbsp;</span>type http2serverMessage int
<span id="L4834" class="ln">  4834&nbsp;&nbsp;</span>
<span id="L4835" class="ln">  4835&nbsp;&nbsp;</span><span class="comment">// Message values sent to serveMsgCh.</span>
<span id="L4836" class="ln">  4836&nbsp;&nbsp;</span>var (
<span id="L4837" class="ln">  4837&nbsp;&nbsp;</span>	http2settingsTimerMsg    = new(http2serverMessage)
<span id="L4838" class="ln">  4838&nbsp;&nbsp;</span>	http2idleTimerMsg        = new(http2serverMessage)
<span id="L4839" class="ln">  4839&nbsp;&nbsp;</span>	http2shutdownTimerMsg    = new(http2serverMessage)
<span id="L4840" class="ln">  4840&nbsp;&nbsp;</span>	http2gracefulShutdownMsg = new(http2serverMessage)
<span id="L4841" class="ln">  4841&nbsp;&nbsp;</span>	http2handlerDoneMsg      = new(http2serverMessage)
<span id="L4842" class="ln">  4842&nbsp;&nbsp;</span>)
<span id="L4843" class="ln">  4843&nbsp;&nbsp;</span>
<span id="L4844" class="ln">  4844&nbsp;&nbsp;</span>func (sc *http2serverConn) onSettingsTimer() { sc.sendServeMsg(http2settingsTimerMsg) }
<span id="L4845" class="ln">  4845&nbsp;&nbsp;</span>
<span id="L4846" class="ln">  4846&nbsp;&nbsp;</span>func (sc *http2serverConn) onIdleTimer() { sc.sendServeMsg(http2idleTimerMsg) }
<span id="L4847" class="ln">  4847&nbsp;&nbsp;</span>
<span id="L4848" class="ln">  4848&nbsp;&nbsp;</span>func (sc *http2serverConn) onShutdownTimer() { sc.sendServeMsg(http2shutdownTimerMsg) }
<span id="L4849" class="ln">  4849&nbsp;&nbsp;</span>
<span id="L4850" class="ln">  4850&nbsp;&nbsp;</span>func (sc *http2serverConn) sendServeMsg(msg interface{}) {
<span id="L4851" class="ln">  4851&nbsp;&nbsp;</span>	sc.serveG.checkNotOn() <span class="comment">// NOT</span>
<span id="L4852" class="ln">  4852&nbsp;&nbsp;</span>	select {
<span id="L4853" class="ln">  4853&nbsp;&nbsp;</span>	case sc.serveMsgCh &lt;- msg:
<span id="L4854" class="ln">  4854&nbsp;&nbsp;</span>	case &lt;-sc.doneServing:
<span id="L4855" class="ln">  4855&nbsp;&nbsp;</span>	}
<span id="L4856" class="ln">  4856&nbsp;&nbsp;</span>}
<span id="L4857" class="ln">  4857&nbsp;&nbsp;</span>
<span id="L4858" class="ln">  4858&nbsp;&nbsp;</span>var http2errPrefaceTimeout = errors.New(&#34;timeout waiting for client preface&#34;)
<span id="L4859" class="ln">  4859&nbsp;&nbsp;</span>
<span id="L4860" class="ln">  4860&nbsp;&nbsp;</span><span class="comment">// readPreface reads the ClientPreface greeting from the peer or</span>
<span id="L4861" class="ln">  4861&nbsp;&nbsp;</span><span class="comment">// returns errPrefaceTimeout on timeout, or an error if the greeting</span>
<span id="L4862" class="ln">  4862&nbsp;&nbsp;</span><span class="comment">// is invalid.</span>
<span id="L4863" class="ln">  4863&nbsp;&nbsp;</span>func (sc *http2serverConn) readPreface() error {
<span id="L4864" class="ln">  4864&nbsp;&nbsp;</span>	if sc.sawClientPreface {
<span id="L4865" class="ln">  4865&nbsp;&nbsp;</span>		return nil
<span id="L4866" class="ln">  4866&nbsp;&nbsp;</span>	}
<span id="L4867" class="ln">  4867&nbsp;&nbsp;</span>	errc := make(chan error, 1)
<span id="L4868" class="ln">  4868&nbsp;&nbsp;</span>	go func() {
<span id="L4869" class="ln">  4869&nbsp;&nbsp;</span>		<span class="comment">// Read the client preface</span>
<span id="L4870" class="ln">  4870&nbsp;&nbsp;</span>		buf := make([]byte, len(http2ClientPreface))
<span id="L4871" class="ln">  4871&nbsp;&nbsp;</span>		if _, err := io.ReadFull(sc.conn, buf); err != nil {
<span id="L4872" class="ln">  4872&nbsp;&nbsp;</span>			errc &lt;- err
<span id="L4873" class="ln">  4873&nbsp;&nbsp;</span>		} else if !bytes.Equal(buf, http2clientPreface) {
<span id="L4874" class="ln">  4874&nbsp;&nbsp;</span>			errc &lt;- fmt.Errorf(&#34;bogus greeting %q&#34;, buf)
<span id="L4875" class="ln">  4875&nbsp;&nbsp;</span>		} else {
<span id="L4876" class="ln">  4876&nbsp;&nbsp;</span>			errc &lt;- nil
<span id="L4877" class="ln">  4877&nbsp;&nbsp;</span>		}
<span id="L4878" class="ln">  4878&nbsp;&nbsp;</span>	}()
<span id="L4879" class="ln">  4879&nbsp;&nbsp;</span>	timer := time.NewTimer(http2prefaceTimeout) <span class="comment">// TODO: configurable on *Server?</span>
<span id="L4880" class="ln">  4880&nbsp;&nbsp;</span>	defer timer.Stop()
<span id="L4881" class="ln">  4881&nbsp;&nbsp;</span>	select {
<span id="L4882" class="ln">  4882&nbsp;&nbsp;</span>	case &lt;-timer.C:
<span id="L4883" class="ln">  4883&nbsp;&nbsp;</span>		return http2errPrefaceTimeout
<span id="L4884" class="ln">  4884&nbsp;&nbsp;</span>	case err := &lt;-errc:
<span id="L4885" class="ln">  4885&nbsp;&nbsp;</span>		if err == nil {
<span id="L4886" class="ln">  4886&nbsp;&nbsp;</span>			if http2VerboseLogs {
<span id="L4887" class="ln">  4887&nbsp;&nbsp;</span>				sc.vlogf(&#34;http2: server: client %v said hello&#34;, sc.conn.RemoteAddr())
<span id="L4888" class="ln">  4888&nbsp;&nbsp;</span>			}
<span id="L4889" class="ln">  4889&nbsp;&nbsp;</span>		}
<span id="L4890" class="ln">  4890&nbsp;&nbsp;</span>		return err
<span id="L4891" class="ln">  4891&nbsp;&nbsp;</span>	}
<span id="L4892" class="ln">  4892&nbsp;&nbsp;</span>}
<span id="L4893" class="ln">  4893&nbsp;&nbsp;</span>
<span id="L4894" class="ln">  4894&nbsp;&nbsp;</span>var http2errChanPool = sync.Pool{
<span id="L4895" class="ln">  4895&nbsp;&nbsp;</span>	New: func() interface{} { return make(chan error, 1) },
<span id="L4896" class="ln">  4896&nbsp;&nbsp;</span>}
<span id="L4897" class="ln">  4897&nbsp;&nbsp;</span>
<span id="L4898" class="ln">  4898&nbsp;&nbsp;</span>var http2writeDataPool = sync.Pool{
<span id="L4899" class="ln">  4899&nbsp;&nbsp;</span>	New: func() interface{} { return new(http2writeData) },
<span id="L4900" class="ln">  4900&nbsp;&nbsp;</span>}
<span id="L4901" class="ln">  4901&nbsp;&nbsp;</span>
<span id="L4902" class="ln">  4902&nbsp;&nbsp;</span><span class="comment">// writeDataFromHandler writes DATA response frames from a handler on</span>
<span id="L4903" class="ln">  4903&nbsp;&nbsp;</span><span class="comment">// the given stream.</span>
<span id="L4904" class="ln">  4904&nbsp;&nbsp;</span>func (sc *http2serverConn) writeDataFromHandler(stream *http2stream, data []byte, endStream bool) error {
<span id="L4905" class="ln">  4905&nbsp;&nbsp;</span>	ch := http2errChanPool.Get().(chan error)
<span id="L4906" class="ln">  4906&nbsp;&nbsp;</span>	writeArg := http2writeDataPool.Get().(*http2writeData)
<span id="L4907" class="ln">  4907&nbsp;&nbsp;</span>	*writeArg = http2writeData{stream.id, data, endStream}
<span id="L4908" class="ln">  4908&nbsp;&nbsp;</span>	err := sc.writeFrameFromHandler(http2FrameWriteRequest{
<span id="L4909" class="ln">  4909&nbsp;&nbsp;</span>		write:  writeArg,
<span id="L4910" class="ln">  4910&nbsp;&nbsp;</span>		stream: stream,
<span id="L4911" class="ln">  4911&nbsp;&nbsp;</span>		done:   ch,
<span id="L4912" class="ln">  4912&nbsp;&nbsp;</span>	})
<span id="L4913" class="ln">  4913&nbsp;&nbsp;</span>	if err != nil {
<span id="L4914" class="ln">  4914&nbsp;&nbsp;</span>		return err
<span id="L4915" class="ln">  4915&nbsp;&nbsp;</span>	}
<span id="L4916" class="ln">  4916&nbsp;&nbsp;</span>	var frameWriteDone bool <span class="comment">// the frame write is done (successfully or not)</span>
<span id="L4917" class="ln">  4917&nbsp;&nbsp;</span>	select {
<span id="L4918" class="ln">  4918&nbsp;&nbsp;</span>	case err = &lt;-ch:
<span id="L4919" class="ln">  4919&nbsp;&nbsp;</span>		frameWriteDone = true
<span id="L4920" class="ln">  4920&nbsp;&nbsp;</span>	case &lt;-sc.doneServing:
<span id="L4921" class="ln">  4921&nbsp;&nbsp;</span>		return http2errClientDisconnected
<span id="L4922" class="ln">  4922&nbsp;&nbsp;</span>	case &lt;-stream.cw:
<span id="L4923" class="ln">  4923&nbsp;&nbsp;</span>		<span class="comment">// If both ch and stream.cw were ready (as might</span>
<span id="L4924" class="ln">  4924&nbsp;&nbsp;</span>		<span class="comment">// happen on the final Write after an http.Handler</span>
<span id="L4925" class="ln">  4925&nbsp;&nbsp;</span>		<span class="comment">// ends), prefer the write result. Otherwise this</span>
<span id="L4926" class="ln">  4926&nbsp;&nbsp;</span>		<span class="comment">// might just be us successfully closing the stream.</span>
<span id="L4927" class="ln">  4927&nbsp;&nbsp;</span>		<span class="comment">// The writeFrameAsync and serve goroutines guarantee</span>
<span id="L4928" class="ln">  4928&nbsp;&nbsp;</span>		<span class="comment">// that the ch send will happen before the stream.cw</span>
<span id="L4929" class="ln">  4929&nbsp;&nbsp;</span>		<span class="comment">// close.</span>
<span id="L4930" class="ln">  4930&nbsp;&nbsp;</span>		select {
<span id="L4931" class="ln">  4931&nbsp;&nbsp;</span>		case err = &lt;-ch:
<span id="L4932" class="ln">  4932&nbsp;&nbsp;</span>			frameWriteDone = true
<span id="L4933" class="ln">  4933&nbsp;&nbsp;</span>		default:
<span id="L4934" class="ln">  4934&nbsp;&nbsp;</span>			return http2errStreamClosed
<span id="L4935" class="ln">  4935&nbsp;&nbsp;</span>		}
<span id="L4936" class="ln">  4936&nbsp;&nbsp;</span>	}
<span id="L4937" class="ln">  4937&nbsp;&nbsp;</span>	http2errChanPool.Put(ch)
<span id="L4938" class="ln">  4938&nbsp;&nbsp;</span>	if frameWriteDone {
<span id="L4939" class="ln">  4939&nbsp;&nbsp;</span>		http2writeDataPool.Put(writeArg)
<span id="L4940" class="ln">  4940&nbsp;&nbsp;</span>	}
<span id="L4941" class="ln">  4941&nbsp;&nbsp;</span>	return err
<span id="L4942" class="ln">  4942&nbsp;&nbsp;</span>}
<span id="L4943" class="ln">  4943&nbsp;&nbsp;</span>
<span id="L4944" class="ln">  4944&nbsp;&nbsp;</span><span class="comment">// writeFrameFromHandler sends wr to sc.wantWriteFrameCh, but aborts</span>
<span id="L4945" class="ln">  4945&nbsp;&nbsp;</span><span class="comment">// if the connection has gone away.</span>
<span id="L4946" class="ln">  4946&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4947" class="ln">  4947&nbsp;&nbsp;</span><span class="comment">// This must not be run from the serve goroutine itself, else it might</span>
<span id="L4948" class="ln">  4948&nbsp;&nbsp;</span><span class="comment">// deadlock writing to sc.wantWriteFrameCh (which is only mildly</span>
<span id="L4949" class="ln">  4949&nbsp;&nbsp;</span><span class="comment">// buffered and is read by serve itself). If you&#39;re on the serve</span>
<span id="L4950" class="ln">  4950&nbsp;&nbsp;</span><span class="comment">// goroutine, call writeFrame instead.</span>
<span id="L4951" class="ln">  4951&nbsp;&nbsp;</span>func (sc *http2serverConn) writeFrameFromHandler(wr http2FrameWriteRequest) error {
<span id="L4952" class="ln">  4952&nbsp;&nbsp;</span>	sc.serveG.checkNotOn() <span class="comment">// NOT</span>
<span id="L4953" class="ln">  4953&nbsp;&nbsp;</span>	select {
<span id="L4954" class="ln">  4954&nbsp;&nbsp;</span>	case sc.wantWriteFrameCh &lt;- wr:
<span id="L4955" class="ln">  4955&nbsp;&nbsp;</span>		return nil
<span id="L4956" class="ln">  4956&nbsp;&nbsp;</span>	case &lt;-sc.doneServing:
<span id="L4957" class="ln">  4957&nbsp;&nbsp;</span>		<span class="comment">// Serve loop is gone.</span>
<span id="L4958" class="ln">  4958&nbsp;&nbsp;</span>		<span class="comment">// Client has closed their connection to the server.</span>
<span id="L4959" class="ln">  4959&nbsp;&nbsp;</span>		return http2errClientDisconnected
<span id="L4960" class="ln">  4960&nbsp;&nbsp;</span>	}
<span id="L4961" class="ln">  4961&nbsp;&nbsp;</span>}
<span id="L4962" class="ln">  4962&nbsp;&nbsp;</span>
<span id="L4963" class="ln">  4963&nbsp;&nbsp;</span><span class="comment">// writeFrame schedules a frame to write and sends it if there&#39;s nothing</span>
<span id="L4964" class="ln">  4964&nbsp;&nbsp;</span><span class="comment">// already being written.</span>
<span id="L4965" class="ln">  4965&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4966" class="ln">  4966&nbsp;&nbsp;</span><span class="comment">// There is no pushback here (the serve goroutine never blocks). It&#39;s</span>
<span id="L4967" class="ln">  4967&nbsp;&nbsp;</span><span class="comment">// the http.Handlers that block, waiting for their previous frames to</span>
<span id="L4968" class="ln">  4968&nbsp;&nbsp;</span><span class="comment">// make it onto the wire</span>
<span id="L4969" class="ln">  4969&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L4970" class="ln">  4970&nbsp;&nbsp;</span><span class="comment">// If you&#39;re not on the serve goroutine, use writeFrameFromHandler instead.</span>
<span id="L4971" class="ln">  4971&nbsp;&nbsp;</span>func (sc *http2serverConn) writeFrame(wr http2FrameWriteRequest) {
<span id="L4972" class="ln">  4972&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L4973" class="ln">  4973&nbsp;&nbsp;</span>
<span id="L4974" class="ln">  4974&nbsp;&nbsp;</span>	<span class="comment">// If true, wr will not be written and wr.done will not be signaled.</span>
<span id="L4975" class="ln">  4975&nbsp;&nbsp;</span>	var ignoreWrite bool
<span id="L4976" class="ln">  4976&nbsp;&nbsp;</span>
<span id="L4977" class="ln">  4977&nbsp;&nbsp;</span>	<span class="comment">// We are not allowed to write frames on closed streams. RFC 7540 Section</span>
<span id="L4978" class="ln">  4978&nbsp;&nbsp;</span>	<span class="comment">// 5.1.1 says: &#34;An endpoint MUST NOT send frames other than PRIORITY on</span>
<span id="L4979" class="ln">  4979&nbsp;&nbsp;</span>	<span class="comment">// a closed stream.&#34; Our server never sends PRIORITY, so that exception</span>
<span id="L4980" class="ln">  4980&nbsp;&nbsp;</span>	<span class="comment">// does not apply.</span>
<span id="L4981" class="ln">  4981&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L4982" class="ln">  4982&nbsp;&nbsp;</span>	<span class="comment">// The serverConn might close an open stream while the stream&#39;s handler</span>
<span id="L4983" class="ln">  4983&nbsp;&nbsp;</span>	<span class="comment">// is still running. For example, the server might close a stream when it</span>
<span id="L4984" class="ln">  4984&nbsp;&nbsp;</span>	<span class="comment">// receives bad data from the client. If this happens, the handler might</span>
<span id="L4985" class="ln">  4985&nbsp;&nbsp;</span>	<span class="comment">// attempt to write a frame after the stream has been closed (since the</span>
<span id="L4986" class="ln">  4986&nbsp;&nbsp;</span>	<span class="comment">// handler hasn&#39;t yet been notified of the close). In this case, we simply</span>
<span id="L4987" class="ln">  4987&nbsp;&nbsp;</span>	<span class="comment">// ignore the frame. The handler will notice that the stream is closed when</span>
<span id="L4988" class="ln">  4988&nbsp;&nbsp;</span>	<span class="comment">// it waits for the frame to be written.</span>
<span id="L4989" class="ln">  4989&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L4990" class="ln">  4990&nbsp;&nbsp;</span>	<span class="comment">// As an exception to this rule, we allow sending RST_STREAM after close.</span>
<span id="L4991" class="ln">  4991&nbsp;&nbsp;</span>	<span class="comment">// This allows us to immediately reject new streams without tracking any</span>
<span id="L4992" class="ln">  4992&nbsp;&nbsp;</span>	<span class="comment">// state for those streams (except for the queued RST_STREAM frame). This</span>
<span id="L4993" class="ln">  4993&nbsp;&nbsp;</span>	<span class="comment">// may result in duplicate RST_STREAMs in some cases, but the client should</span>
<span id="L4994" class="ln">  4994&nbsp;&nbsp;</span>	<span class="comment">// ignore those.</span>
<span id="L4995" class="ln">  4995&nbsp;&nbsp;</span>	if wr.StreamID() != 0 {
<span id="L4996" class="ln">  4996&nbsp;&nbsp;</span>		_, isReset := wr.write.(http2StreamError)
<span id="L4997" class="ln">  4997&nbsp;&nbsp;</span>		if state, _ := sc.state(wr.StreamID()); state == http2stateClosed &amp;&amp; !isReset {
<span id="L4998" class="ln">  4998&nbsp;&nbsp;</span>			ignoreWrite = true
<span id="L4999" class="ln">  4999&nbsp;&nbsp;</span>		}
<span id="L5000" class="ln">  5000&nbsp;&nbsp;</span>	}
<span id="L5001" class="ln">  5001&nbsp;&nbsp;</span>
<span id="L5002" class="ln">  5002&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t send a 100-continue response if we&#39;ve already sent headers.</span>
<span id="L5003" class="ln">  5003&nbsp;&nbsp;</span>	<span class="comment">// See golang.org/issue/14030.</span>
<span id="L5004" class="ln">  5004&nbsp;&nbsp;</span>	switch wr.write.(type) {
<span id="L5005" class="ln">  5005&nbsp;&nbsp;</span>	case *http2writeResHeaders:
<span id="L5006" class="ln">  5006&nbsp;&nbsp;</span>		wr.stream.wroteHeaders = true
<span id="L5007" class="ln">  5007&nbsp;&nbsp;</span>	case http2write100ContinueHeadersFrame:
<span id="L5008" class="ln">  5008&nbsp;&nbsp;</span>		if wr.stream.wroteHeaders {
<span id="L5009" class="ln">  5009&nbsp;&nbsp;</span>			<span class="comment">// We do not need to notify wr.done because this frame is</span>
<span id="L5010" class="ln">  5010&nbsp;&nbsp;</span>			<span class="comment">// never written with wr.done != nil.</span>
<span id="L5011" class="ln">  5011&nbsp;&nbsp;</span>			if wr.done != nil {
<span id="L5012" class="ln">  5012&nbsp;&nbsp;</span>				panic(&#34;wr.done != nil for write100ContinueHeadersFrame&#34;)
<span id="L5013" class="ln">  5013&nbsp;&nbsp;</span>			}
<span id="L5014" class="ln">  5014&nbsp;&nbsp;</span>			ignoreWrite = true
<span id="L5015" class="ln">  5015&nbsp;&nbsp;</span>		}
<span id="L5016" class="ln">  5016&nbsp;&nbsp;</span>	}
<span id="L5017" class="ln">  5017&nbsp;&nbsp;</span>
<span id="L5018" class="ln">  5018&nbsp;&nbsp;</span>	if !ignoreWrite {
<span id="L5019" class="ln">  5019&nbsp;&nbsp;</span>		if wr.isControl() {
<span id="L5020" class="ln">  5020&nbsp;&nbsp;</span>			sc.queuedControlFrames++
<span id="L5021" class="ln">  5021&nbsp;&nbsp;</span>			<span class="comment">// For extra safety, detect wraparounds, which should not happen,</span>
<span id="L5022" class="ln">  5022&nbsp;&nbsp;</span>			<span class="comment">// and pull the plug.</span>
<span id="L5023" class="ln">  5023&nbsp;&nbsp;</span>			if sc.queuedControlFrames &lt; 0 {
<span id="L5024" class="ln">  5024&nbsp;&nbsp;</span>				sc.conn.Close()
<span id="L5025" class="ln">  5025&nbsp;&nbsp;</span>			}
<span id="L5026" class="ln">  5026&nbsp;&nbsp;</span>		}
<span id="L5027" class="ln">  5027&nbsp;&nbsp;</span>		sc.writeSched.Push(wr)
<span id="L5028" class="ln">  5028&nbsp;&nbsp;</span>	}
<span id="L5029" class="ln">  5029&nbsp;&nbsp;</span>	sc.scheduleFrameWrite()
<span id="L5030" class="ln">  5030&nbsp;&nbsp;</span>}
<span id="L5031" class="ln">  5031&nbsp;&nbsp;</span>
<span id="L5032" class="ln">  5032&nbsp;&nbsp;</span><span class="comment">// startFrameWrite starts a goroutine to write wr (in a separate</span>
<span id="L5033" class="ln">  5033&nbsp;&nbsp;</span><span class="comment">// goroutine since that might block on the network), and updates the</span>
<span id="L5034" class="ln">  5034&nbsp;&nbsp;</span><span class="comment">// serve goroutine&#39;s state about the world, updated from info in wr.</span>
<span id="L5035" class="ln">  5035&nbsp;&nbsp;</span>func (sc *http2serverConn) startFrameWrite(wr http2FrameWriteRequest) {
<span id="L5036" class="ln">  5036&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5037" class="ln">  5037&nbsp;&nbsp;</span>	if sc.writingFrame {
<span id="L5038" class="ln">  5038&nbsp;&nbsp;</span>		panic(&#34;internal error: can only be writing one frame at a time&#34;)
<span id="L5039" class="ln">  5039&nbsp;&nbsp;</span>	}
<span id="L5040" class="ln">  5040&nbsp;&nbsp;</span>
<span id="L5041" class="ln">  5041&nbsp;&nbsp;</span>	st := wr.stream
<span id="L5042" class="ln">  5042&nbsp;&nbsp;</span>	if st != nil {
<span id="L5043" class="ln">  5043&nbsp;&nbsp;</span>		switch st.state {
<span id="L5044" class="ln">  5044&nbsp;&nbsp;</span>		case http2stateHalfClosedLocal:
<span id="L5045" class="ln">  5045&nbsp;&nbsp;</span>			switch wr.write.(type) {
<span id="L5046" class="ln">  5046&nbsp;&nbsp;</span>			case http2StreamError, http2handlerPanicRST, http2writeWindowUpdate:
<span id="L5047" class="ln">  5047&nbsp;&nbsp;</span>				<span class="comment">// RFC 7540 Section 5.1 allows sending RST_STREAM, PRIORITY, and WINDOW_UPDATE</span>
<span id="L5048" class="ln">  5048&nbsp;&nbsp;</span>				<span class="comment">// in this state. (We never send PRIORITY from the server, so that is not checked.)</span>
<span id="L5049" class="ln">  5049&nbsp;&nbsp;</span>			default:
<span id="L5050" class="ln">  5050&nbsp;&nbsp;</span>				panic(fmt.Sprintf(&#34;internal error: attempt to send frame on a half-closed-local stream: %v&#34;, wr))
<span id="L5051" class="ln">  5051&nbsp;&nbsp;</span>			}
<span id="L5052" class="ln">  5052&nbsp;&nbsp;</span>		case http2stateClosed:
<span id="L5053" class="ln">  5053&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;internal error: attempt to send frame on a closed stream: %v&#34;, wr))
<span id="L5054" class="ln">  5054&nbsp;&nbsp;</span>		}
<span id="L5055" class="ln">  5055&nbsp;&nbsp;</span>	}
<span id="L5056" class="ln">  5056&nbsp;&nbsp;</span>	if wpp, ok := wr.write.(*http2writePushPromise); ok {
<span id="L5057" class="ln">  5057&nbsp;&nbsp;</span>		var err error
<span id="L5058" class="ln">  5058&nbsp;&nbsp;</span>		wpp.promisedID, err = wpp.allocatePromisedID()
<span id="L5059" class="ln">  5059&nbsp;&nbsp;</span>		if err != nil {
<span id="L5060" class="ln">  5060&nbsp;&nbsp;</span>			sc.writingFrameAsync = false
<span id="L5061" class="ln">  5061&nbsp;&nbsp;</span>			wr.replyToWriter(err)
<span id="L5062" class="ln">  5062&nbsp;&nbsp;</span>			return
<span id="L5063" class="ln">  5063&nbsp;&nbsp;</span>		}
<span id="L5064" class="ln">  5064&nbsp;&nbsp;</span>	}
<span id="L5065" class="ln">  5065&nbsp;&nbsp;</span>
<span id="L5066" class="ln">  5066&nbsp;&nbsp;</span>	sc.writingFrame = true
<span id="L5067" class="ln">  5067&nbsp;&nbsp;</span>	sc.needsFrameFlush = true
<span id="L5068" class="ln">  5068&nbsp;&nbsp;</span>	if wr.write.staysWithinBuffer(sc.bw.Available()) {
<span id="L5069" class="ln">  5069&nbsp;&nbsp;</span>		sc.writingFrameAsync = false
<span id="L5070" class="ln">  5070&nbsp;&nbsp;</span>		err := wr.write.writeFrame(sc)
<span id="L5071" class="ln">  5071&nbsp;&nbsp;</span>		sc.wroteFrame(http2frameWriteResult{wr: wr, err: err})
<span id="L5072" class="ln">  5072&nbsp;&nbsp;</span>	} else if wd, ok := wr.write.(*http2writeData); ok {
<span id="L5073" class="ln">  5073&nbsp;&nbsp;</span>		<span class="comment">// Encode the frame in the serve goroutine, to ensure we don&#39;t have</span>
<span id="L5074" class="ln">  5074&nbsp;&nbsp;</span>		<span class="comment">// any lingering asynchronous references to data passed to Write.</span>
<span id="L5075" class="ln">  5075&nbsp;&nbsp;</span>		<span class="comment">// See https://go.dev/issue/58446.</span>
<span id="L5076" class="ln">  5076&nbsp;&nbsp;</span>		sc.framer.startWriteDataPadded(wd.streamID, wd.endStream, wd.p, nil)
<span id="L5077" class="ln">  5077&nbsp;&nbsp;</span>		sc.writingFrameAsync = true
<span id="L5078" class="ln">  5078&nbsp;&nbsp;</span>		go sc.writeFrameAsync(wr, wd)
<span id="L5079" class="ln">  5079&nbsp;&nbsp;</span>	} else {
<span id="L5080" class="ln">  5080&nbsp;&nbsp;</span>		sc.writingFrameAsync = true
<span id="L5081" class="ln">  5081&nbsp;&nbsp;</span>		go sc.writeFrameAsync(wr, nil)
<span id="L5082" class="ln">  5082&nbsp;&nbsp;</span>	}
<span id="L5083" class="ln">  5083&nbsp;&nbsp;</span>}
<span id="L5084" class="ln">  5084&nbsp;&nbsp;</span>
<span id="L5085" class="ln">  5085&nbsp;&nbsp;</span><span class="comment">// errHandlerPanicked is the error given to any callers blocked in a read from</span>
<span id="L5086" class="ln">  5086&nbsp;&nbsp;</span><span class="comment">// Request.Body when the main goroutine panics. Since most handlers read in the</span>
<span id="L5087" class="ln">  5087&nbsp;&nbsp;</span><span class="comment">// main ServeHTTP goroutine, this will show up rarely.</span>
<span id="L5088" class="ln">  5088&nbsp;&nbsp;</span>var http2errHandlerPanicked = errors.New(&#34;http2: handler panicked&#34;)
<span id="L5089" class="ln">  5089&nbsp;&nbsp;</span>
<span id="L5090" class="ln">  5090&nbsp;&nbsp;</span><span class="comment">// wroteFrame is called on the serve goroutine with the result of</span>
<span id="L5091" class="ln">  5091&nbsp;&nbsp;</span><span class="comment">// whatever happened on writeFrameAsync.</span>
<span id="L5092" class="ln">  5092&nbsp;&nbsp;</span>func (sc *http2serverConn) wroteFrame(res http2frameWriteResult) {
<span id="L5093" class="ln">  5093&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5094" class="ln">  5094&nbsp;&nbsp;</span>	if !sc.writingFrame {
<span id="L5095" class="ln">  5095&nbsp;&nbsp;</span>		panic(&#34;internal error: expected to be already writing a frame&#34;)
<span id="L5096" class="ln">  5096&nbsp;&nbsp;</span>	}
<span id="L5097" class="ln">  5097&nbsp;&nbsp;</span>	sc.writingFrame = false
<span id="L5098" class="ln">  5098&nbsp;&nbsp;</span>	sc.writingFrameAsync = false
<span id="L5099" class="ln">  5099&nbsp;&nbsp;</span>
<span id="L5100" class="ln">  5100&nbsp;&nbsp;</span>	wr := res.wr
<span id="L5101" class="ln">  5101&nbsp;&nbsp;</span>
<span id="L5102" class="ln">  5102&nbsp;&nbsp;</span>	if http2writeEndsStream(wr.write) {
<span id="L5103" class="ln">  5103&nbsp;&nbsp;</span>		st := wr.stream
<span id="L5104" class="ln">  5104&nbsp;&nbsp;</span>		if st == nil {
<span id="L5105" class="ln">  5105&nbsp;&nbsp;</span>			panic(&#34;internal error: expecting non-nil stream&#34;)
<span id="L5106" class="ln">  5106&nbsp;&nbsp;</span>		}
<span id="L5107" class="ln">  5107&nbsp;&nbsp;</span>		switch st.state {
<span id="L5108" class="ln">  5108&nbsp;&nbsp;</span>		case http2stateOpen:
<span id="L5109" class="ln">  5109&nbsp;&nbsp;</span>			<span class="comment">// Here we would go to stateHalfClosedLocal in</span>
<span id="L5110" class="ln">  5110&nbsp;&nbsp;</span>			<span class="comment">// theory, but since our handler is done and</span>
<span id="L5111" class="ln">  5111&nbsp;&nbsp;</span>			<span class="comment">// the net/http package provides no mechanism</span>
<span id="L5112" class="ln">  5112&nbsp;&nbsp;</span>			<span class="comment">// for closing a ResponseWriter while still</span>
<span id="L5113" class="ln">  5113&nbsp;&nbsp;</span>			<span class="comment">// reading data (see possible TODO at top of</span>
<span id="L5114" class="ln">  5114&nbsp;&nbsp;</span>			<span class="comment">// this file), we go into closed state here</span>
<span id="L5115" class="ln">  5115&nbsp;&nbsp;</span>			<span class="comment">// anyway, after telling the peer we&#39;re</span>
<span id="L5116" class="ln">  5116&nbsp;&nbsp;</span>			<span class="comment">// hanging up on them. We&#39;ll transition to</span>
<span id="L5117" class="ln">  5117&nbsp;&nbsp;</span>			<span class="comment">// stateClosed after the RST_STREAM frame is</span>
<span id="L5118" class="ln">  5118&nbsp;&nbsp;</span>			<span class="comment">// written.</span>
<span id="L5119" class="ln">  5119&nbsp;&nbsp;</span>			st.state = http2stateHalfClosedLocal
<span id="L5120" class="ln">  5120&nbsp;&nbsp;</span>			<span class="comment">// Section 8.1: a server MAY request that the client abort</span>
<span id="L5121" class="ln">  5121&nbsp;&nbsp;</span>			<span class="comment">// transmission of a request without error by sending a</span>
<span id="L5122" class="ln">  5122&nbsp;&nbsp;</span>			<span class="comment">// RST_STREAM with an error code of NO_ERROR after sending</span>
<span id="L5123" class="ln">  5123&nbsp;&nbsp;</span>			<span class="comment">// a complete response.</span>
<span id="L5124" class="ln">  5124&nbsp;&nbsp;</span>			sc.resetStream(http2streamError(st.id, http2ErrCodeNo))
<span id="L5125" class="ln">  5125&nbsp;&nbsp;</span>		case http2stateHalfClosedRemote:
<span id="L5126" class="ln">  5126&nbsp;&nbsp;</span>			sc.closeStream(st, http2errHandlerComplete)
<span id="L5127" class="ln">  5127&nbsp;&nbsp;</span>		}
<span id="L5128" class="ln">  5128&nbsp;&nbsp;</span>	} else {
<span id="L5129" class="ln">  5129&nbsp;&nbsp;</span>		switch v := wr.write.(type) {
<span id="L5130" class="ln">  5130&nbsp;&nbsp;</span>		case http2StreamError:
<span id="L5131" class="ln">  5131&nbsp;&nbsp;</span>			<span class="comment">// st may be unknown if the RST_STREAM was generated to reject bad input.</span>
<span id="L5132" class="ln">  5132&nbsp;&nbsp;</span>			if st, ok := sc.streams[v.StreamID]; ok {
<span id="L5133" class="ln">  5133&nbsp;&nbsp;</span>				sc.closeStream(st, v)
<span id="L5134" class="ln">  5134&nbsp;&nbsp;</span>			}
<span id="L5135" class="ln">  5135&nbsp;&nbsp;</span>		case http2handlerPanicRST:
<span id="L5136" class="ln">  5136&nbsp;&nbsp;</span>			sc.closeStream(wr.stream, http2errHandlerPanicked)
<span id="L5137" class="ln">  5137&nbsp;&nbsp;</span>		}
<span id="L5138" class="ln">  5138&nbsp;&nbsp;</span>	}
<span id="L5139" class="ln">  5139&nbsp;&nbsp;</span>
<span id="L5140" class="ln">  5140&nbsp;&nbsp;</span>	<span class="comment">// Reply (if requested) to unblock the ServeHTTP goroutine.</span>
<span id="L5141" class="ln">  5141&nbsp;&nbsp;</span>	wr.replyToWriter(res.err)
<span id="L5142" class="ln">  5142&nbsp;&nbsp;</span>
<span id="L5143" class="ln">  5143&nbsp;&nbsp;</span>	sc.scheduleFrameWrite()
<span id="L5144" class="ln">  5144&nbsp;&nbsp;</span>}
<span id="L5145" class="ln">  5145&nbsp;&nbsp;</span>
<span id="L5146" class="ln">  5146&nbsp;&nbsp;</span><span class="comment">// scheduleFrameWrite tickles the frame writing scheduler.</span>
<span id="L5147" class="ln">  5147&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5148" class="ln">  5148&nbsp;&nbsp;</span><span class="comment">// If a frame is already being written, nothing happens. This will be called again</span>
<span id="L5149" class="ln">  5149&nbsp;&nbsp;</span><span class="comment">// when the frame is done being written.</span>
<span id="L5150" class="ln">  5150&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5151" class="ln">  5151&nbsp;&nbsp;</span><span class="comment">// If a frame isn&#39;t being written and we need to send one, the best frame</span>
<span id="L5152" class="ln">  5152&nbsp;&nbsp;</span><span class="comment">// to send is selected by writeSched.</span>
<span id="L5153" class="ln">  5153&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5154" class="ln">  5154&nbsp;&nbsp;</span><span class="comment">// If a frame isn&#39;t being written and there&#39;s nothing else to send, we</span>
<span id="L5155" class="ln">  5155&nbsp;&nbsp;</span><span class="comment">// flush the write buffer.</span>
<span id="L5156" class="ln">  5156&nbsp;&nbsp;</span>func (sc *http2serverConn) scheduleFrameWrite() {
<span id="L5157" class="ln">  5157&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5158" class="ln">  5158&nbsp;&nbsp;</span>	if sc.writingFrame || sc.inFrameScheduleLoop {
<span id="L5159" class="ln">  5159&nbsp;&nbsp;</span>		return
<span id="L5160" class="ln">  5160&nbsp;&nbsp;</span>	}
<span id="L5161" class="ln">  5161&nbsp;&nbsp;</span>	sc.inFrameScheduleLoop = true
<span id="L5162" class="ln">  5162&nbsp;&nbsp;</span>	for !sc.writingFrameAsync {
<span id="L5163" class="ln">  5163&nbsp;&nbsp;</span>		if sc.needToSendGoAway {
<span id="L5164" class="ln">  5164&nbsp;&nbsp;</span>			sc.needToSendGoAway = false
<span id="L5165" class="ln">  5165&nbsp;&nbsp;</span>			sc.startFrameWrite(http2FrameWriteRequest{
<span id="L5166" class="ln">  5166&nbsp;&nbsp;</span>				write: &amp;http2writeGoAway{
<span id="L5167" class="ln">  5167&nbsp;&nbsp;</span>					maxStreamID: sc.maxClientStreamID,
<span id="L5168" class="ln">  5168&nbsp;&nbsp;</span>					code:        sc.goAwayCode,
<span id="L5169" class="ln">  5169&nbsp;&nbsp;</span>				},
<span id="L5170" class="ln">  5170&nbsp;&nbsp;</span>			})
<span id="L5171" class="ln">  5171&nbsp;&nbsp;</span>			continue
<span id="L5172" class="ln">  5172&nbsp;&nbsp;</span>		}
<span id="L5173" class="ln">  5173&nbsp;&nbsp;</span>		if sc.needToSendSettingsAck {
<span id="L5174" class="ln">  5174&nbsp;&nbsp;</span>			sc.needToSendSettingsAck = false
<span id="L5175" class="ln">  5175&nbsp;&nbsp;</span>			sc.startFrameWrite(http2FrameWriteRequest{write: http2writeSettingsAck{}})
<span id="L5176" class="ln">  5176&nbsp;&nbsp;</span>			continue
<span id="L5177" class="ln">  5177&nbsp;&nbsp;</span>		}
<span id="L5178" class="ln">  5178&nbsp;&nbsp;</span>		if !sc.inGoAway || sc.goAwayCode == http2ErrCodeNo {
<span id="L5179" class="ln">  5179&nbsp;&nbsp;</span>			if wr, ok := sc.writeSched.Pop(); ok {
<span id="L5180" class="ln">  5180&nbsp;&nbsp;</span>				if wr.isControl() {
<span id="L5181" class="ln">  5181&nbsp;&nbsp;</span>					sc.queuedControlFrames--
<span id="L5182" class="ln">  5182&nbsp;&nbsp;</span>				}
<span id="L5183" class="ln">  5183&nbsp;&nbsp;</span>				sc.startFrameWrite(wr)
<span id="L5184" class="ln">  5184&nbsp;&nbsp;</span>				continue
<span id="L5185" class="ln">  5185&nbsp;&nbsp;</span>			}
<span id="L5186" class="ln">  5186&nbsp;&nbsp;</span>		}
<span id="L5187" class="ln">  5187&nbsp;&nbsp;</span>		if sc.needsFrameFlush {
<span id="L5188" class="ln">  5188&nbsp;&nbsp;</span>			sc.startFrameWrite(http2FrameWriteRequest{write: http2flushFrameWriter{}})
<span id="L5189" class="ln">  5189&nbsp;&nbsp;</span>			sc.needsFrameFlush = false <span class="comment">// after startFrameWrite, since it sets this true</span>
<span id="L5190" class="ln">  5190&nbsp;&nbsp;</span>			continue
<span id="L5191" class="ln">  5191&nbsp;&nbsp;</span>		}
<span id="L5192" class="ln">  5192&nbsp;&nbsp;</span>		break
<span id="L5193" class="ln">  5193&nbsp;&nbsp;</span>	}
<span id="L5194" class="ln">  5194&nbsp;&nbsp;</span>	sc.inFrameScheduleLoop = false
<span id="L5195" class="ln">  5195&nbsp;&nbsp;</span>}
<span id="L5196" class="ln">  5196&nbsp;&nbsp;</span>
<span id="L5197" class="ln">  5197&nbsp;&nbsp;</span><span class="comment">// startGracefulShutdown gracefully shuts down a connection. This</span>
<span id="L5198" class="ln">  5198&nbsp;&nbsp;</span><span class="comment">// sends GOAWAY with ErrCodeNo to tell the client we&#39;re gracefully</span>
<span id="L5199" class="ln">  5199&nbsp;&nbsp;</span><span class="comment">// shutting down. The connection isn&#39;t closed until all current</span>
<span id="L5200" class="ln">  5200&nbsp;&nbsp;</span><span class="comment">// streams are done.</span>
<span id="L5201" class="ln">  5201&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5202" class="ln">  5202&nbsp;&nbsp;</span><span class="comment">// startGracefulShutdown returns immediately; it does not wait until</span>
<span id="L5203" class="ln">  5203&nbsp;&nbsp;</span><span class="comment">// the connection has shut down.</span>
<span id="L5204" class="ln">  5204&nbsp;&nbsp;</span>func (sc *http2serverConn) startGracefulShutdown() {
<span id="L5205" class="ln">  5205&nbsp;&nbsp;</span>	sc.serveG.checkNotOn() <span class="comment">// NOT</span>
<span id="L5206" class="ln">  5206&nbsp;&nbsp;</span>	sc.shutdownOnce.Do(func() { sc.sendServeMsg(http2gracefulShutdownMsg) })
<span id="L5207" class="ln">  5207&nbsp;&nbsp;</span>}
<span id="L5208" class="ln">  5208&nbsp;&nbsp;</span>
<span id="L5209" class="ln">  5209&nbsp;&nbsp;</span><span class="comment">// After sending GOAWAY with an error code (non-graceful shutdown), the</span>
<span id="L5210" class="ln">  5210&nbsp;&nbsp;</span><span class="comment">// connection will close after goAwayTimeout.</span>
<span id="L5211" class="ln">  5211&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5212" class="ln">  5212&nbsp;&nbsp;</span><span class="comment">// If we close the connection immediately after sending GOAWAY, there may</span>
<span id="L5213" class="ln">  5213&nbsp;&nbsp;</span><span class="comment">// be unsent data in our kernel receive buffer, which will cause the kernel</span>
<span id="L5214" class="ln">  5214&nbsp;&nbsp;</span><span class="comment">// to send a TCP RST on close() instead of a FIN. This RST will abort the</span>
<span id="L5215" class="ln">  5215&nbsp;&nbsp;</span><span class="comment">// connection immediately, whether or not the client had received the GOAWAY.</span>
<span id="L5216" class="ln">  5216&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5217" class="ln">  5217&nbsp;&nbsp;</span><span class="comment">// Ideally we should delay for at least 1 RTT + epsilon so the client has</span>
<span id="L5218" class="ln">  5218&nbsp;&nbsp;</span><span class="comment">// a chance to read the GOAWAY and stop sending messages. Measuring RTT</span>
<span id="L5219" class="ln">  5219&nbsp;&nbsp;</span><span class="comment">// is hard, so we approximate with 1 second. See golang.org/issue/18701.</span>
<span id="L5220" class="ln">  5220&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5221" class="ln">  5221&nbsp;&nbsp;</span><span class="comment">// This is a var so it can be shorter in tests, where all requests uses the</span>
<span id="L5222" class="ln">  5222&nbsp;&nbsp;</span><span class="comment">// loopback interface making the expected RTT very small.</span>
<span id="L5223" class="ln">  5223&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L5224" class="ln">  5224&nbsp;&nbsp;</span><span class="comment">// TODO: configurable?</span>
<span id="L5225" class="ln">  5225&nbsp;&nbsp;</span>var http2goAwayTimeout = 1 * time.Second
<span id="L5226" class="ln">  5226&nbsp;&nbsp;</span>
<span id="L5227" class="ln">  5227&nbsp;&nbsp;</span>func (sc *http2serverConn) startGracefulShutdownInternal() {
<span id="L5228" class="ln">  5228&nbsp;&nbsp;</span>	sc.goAway(http2ErrCodeNo)
<span id="L5229" class="ln">  5229&nbsp;&nbsp;</span>}
<span id="L5230" class="ln">  5230&nbsp;&nbsp;</span>
<span id="L5231" class="ln">  5231&nbsp;&nbsp;</span>func (sc *http2serverConn) goAway(code http2ErrCode) {
<span id="L5232" class="ln">  5232&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5233" class="ln">  5233&nbsp;&nbsp;</span>	if sc.inGoAway {
<span id="L5234" class="ln">  5234&nbsp;&nbsp;</span>		if sc.goAwayCode == http2ErrCodeNo {
<span id="L5235" class="ln">  5235&nbsp;&nbsp;</span>			sc.goAwayCode = code
<span id="L5236" class="ln">  5236&nbsp;&nbsp;</span>		}
<span id="L5237" class="ln">  5237&nbsp;&nbsp;</span>		return
<span id="L5238" class="ln">  5238&nbsp;&nbsp;</span>	}
<span id="L5239" class="ln">  5239&nbsp;&nbsp;</span>	sc.inGoAway = true
<span id="L5240" class="ln">  5240&nbsp;&nbsp;</span>	sc.needToSendGoAway = true
<span id="L5241" class="ln">  5241&nbsp;&nbsp;</span>	sc.goAwayCode = code
<span id="L5242" class="ln">  5242&nbsp;&nbsp;</span>	sc.scheduleFrameWrite()
<span id="L5243" class="ln">  5243&nbsp;&nbsp;</span>}
<span id="L5244" class="ln">  5244&nbsp;&nbsp;</span>
<span id="L5245" class="ln">  5245&nbsp;&nbsp;</span>func (sc *http2serverConn) shutDownIn(d time.Duration) {
<span id="L5246" class="ln">  5246&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5247" class="ln">  5247&nbsp;&nbsp;</span>	sc.shutdownTimer = time.AfterFunc(d, sc.onShutdownTimer)
<span id="L5248" class="ln">  5248&nbsp;&nbsp;</span>}
<span id="L5249" class="ln">  5249&nbsp;&nbsp;</span>
<span id="L5250" class="ln">  5250&nbsp;&nbsp;</span>func (sc *http2serverConn) resetStream(se http2StreamError) {
<span id="L5251" class="ln">  5251&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5252" class="ln">  5252&nbsp;&nbsp;</span>	sc.writeFrame(http2FrameWriteRequest{write: se})
<span id="L5253" class="ln">  5253&nbsp;&nbsp;</span>	if st, ok := sc.streams[se.StreamID]; ok {
<span id="L5254" class="ln">  5254&nbsp;&nbsp;</span>		st.resetQueued = true
<span id="L5255" class="ln">  5255&nbsp;&nbsp;</span>	}
<span id="L5256" class="ln">  5256&nbsp;&nbsp;</span>}
<span id="L5257" class="ln">  5257&nbsp;&nbsp;</span>
<span id="L5258" class="ln">  5258&nbsp;&nbsp;</span><span class="comment">// processFrameFromReader processes the serve loop&#39;s read from readFrameCh from the</span>
<span id="L5259" class="ln">  5259&nbsp;&nbsp;</span><span class="comment">// frame-reading goroutine.</span>
<span id="L5260" class="ln">  5260&nbsp;&nbsp;</span><span class="comment">// processFrameFromReader returns whether the connection should be kept open.</span>
<span id="L5261" class="ln">  5261&nbsp;&nbsp;</span>func (sc *http2serverConn) processFrameFromReader(res http2readFrameResult) bool {
<span id="L5262" class="ln">  5262&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5263" class="ln">  5263&nbsp;&nbsp;</span>	err := res.err
<span id="L5264" class="ln">  5264&nbsp;&nbsp;</span>	if err != nil {
<span id="L5265" class="ln">  5265&nbsp;&nbsp;</span>		if err == http2ErrFrameTooLarge {
<span id="L5266" class="ln">  5266&nbsp;&nbsp;</span>			sc.goAway(http2ErrCodeFrameSize)
<span id="L5267" class="ln">  5267&nbsp;&nbsp;</span>			return true <span class="comment">// goAway will close the loop</span>
<span id="L5268" class="ln">  5268&nbsp;&nbsp;</span>		}
<span id="L5269" class="ln">  5269&nbsp;&nbsp;</span>		clientGone := err == io.EOF || err == io.ErrUnexpectedEOF || http2isClosedConnError(err)
<span id="L5270" class="ln">  5270&nbsp;&nbsp;</span>		if clientGone {
<span id="L5271" class="ln">  5271&nbsp;&nbsp;</span>			<span class="comment">// TODO: could we also get into this state if</span>
<span id="L5272" class="ln">  5272&nbsp;&nbsp;</span>			<span class="comment">// the peer does a half close</span>
<span id="L5273" class="ln">  5273&nbsp;&nbsp;</span>			<span class="comment">// (e.g. CloseWrite) because they&#39;re done</span>
<span id="L5274" class="ln">  5274&nbsp;&nbsp;</span>			<span class="comment">// sending frames but they&#39;re still wanting</span>
<span id="L5275" class="ln">  5275&nbsp;&nbsp;</span>			<span class="comment">// our open replies?  Investigate.</span>
<span id="L5276" class="ln">  5276&nbsp;&nbsp;</span>			<span class="comment">// TODO: add CloseWrite to crypto/tls.Conn first</span>
<span id="L5277" class="ln">  5277&nbsp;&nbsp;</span>			<span class="comment">// so we have a way to test this? I suppose</span>
<span id="L5278" class="ln">  5278&nbsp;&nbsp;</span>			<span class="comment">// just for testing we could have a non-TLS mode.</span>
<span id="L5279" class="ln">  5279&nbsp;&nbsp;</span>			return false
<span id="L5280" class="ln">  5280&nbsp;&nbsp;</span>		}
<span id="L5281" class="ln">  5281&nbsp;&nbsp;</span>	} else {
<span id="L5282" class="ln">  5282&nbsp;&nbsp;</span>		f := res.f
<span id="L5283" class="ln">  5283&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L5284" class="ln">  5284&nbsp;&nbsp;</span>			sc.vlogf(&#34;http2: server read frame %v&#34;, http2summarizeFrame(f))
<span id="L5285" class="ln">  5285&nbsp;&nbsp;</span>		}
<span id="L5286" class="ln">  5286&nbsp;&nbsp;</span>		err = sc.processFrame(f)
<span id="L5287" class="ln">  5287&nbsp;&nbsp;</span>		if err == nil {
<span id="L5288" class="ln">  5288&nbsp;&nbsp;</span>			return true
<span id="L5289" class="ln">  5289&nbsp;&nbsp;</span>		}
<span id="L5290" class="ln">  5290&nbsp;&nbsp;</span>	}
<span id="L5291" class="ln">  5291&nbsp;&nbsp;</span>
<span id="L5292" class="ln">  5292&nbsp;&nbsp;</span>	switch ev := err.(type) {
<span id="L5293" class="ln">  5293&nbsp;&nbsp;</span>	case http2StreamError:
<span id="L5294" class="ln">  5294&nbsp;&nbsp;</span>		sc.resetStream(ev)
<span id="L5295" class="ln">  5295&nbsp;&nbsp;</span>		return true
<span id="L5296" class="ln">  5296&nbsp;&nbsp;</span>	case http2goAwayFlowError:
<span id="L5297" class="ln">  5297&nbsp;&nbsp;</span>		sc.goAway(http2ErrCodeFlowControl)
<span id="L5298" class="ln">  5298&nbsp;&nbsp;</span>		return true
<span id="L5299" class="ln">  5299&nbsp;&nbsp;</span>	case http2ConnectionError:
<span id="L5300" class="ln">  5300&nbsp;&nbsp;</span>		sc.logf(&#34;http2: server connection error from %v: %v&#34;, sc.conn.RemoteAddr(), ev)
<span id="L5301" class="ln">  5301&nbsp;&nbsp;</span>		sc.goAway(http2ErrCode(ev))
<span id="L5302" class="ln">  5302&nbsp;&nbsp;</span>		return true <span class="comment">// goAway will handle shutdown</span>
<span id="L5303" class="ln">  5303&nbsp;&nbsp;</span>	default:
<span id="L5304" class="ln">  5304&nbsp;&nbsp;</span>		if res.err != nil {
<span id="L5305" class="ln">  5305&nbsp;&nbsp;</span>			sc.vlogf(&#34;http2: server closing client connection; error reading frame from client %s: %v&#34;, sc.conn.RemoteAddr(), err)
<span id="L5306" class="ln">  5306&nbsp;&nbsp;</span>		} else {
<span id="L5307" class="ln">  5307&nbsp;&nbsp;</span>			sc.logf(&#34;http2: server closing client connection: %v&#34;, err)
<span id="L5308" class="ln">  5308&nbsp;&nbsp;</span>		}
<span id="L5309" class="ln">  5309&nbsp;&nbsp;</span>		return false
<span id="L5310" class="ln">  5310&nbsp;&nbsp;</span>	}
<span id="L5311" class="ln">  5311&nbsp;&nbsp;</span>}
<span id="L5312" class="ln">  5312&nbsp;&nbsp;</span>
<span id="L5313" class="ln">  5313&nbsp;&nbsp;</span>func (sc *http2serverConn) processFrame(f http2Frame) error {
<span id="L5314" class="ln">  5314&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5315" class="ln">  5315&nbsp;&nbsp;</span>
<span id="L5316" class="ln">  5316&nbsp;&nbsp;</span>	<span class="comment">// First frame received must be SETTINGS.</span>
<span id="L5317" class="ln">  5317&nbsp;&nbsp;</span>	if !sc.sawFirstSettings {
<span id="L5318" class="ln">  5318&nbsp;&nbsp;</span>		if _, ok := f.(*http2SettingsFrame); !ok {
<span id="L5319" class="ln">  5319&nbsp;&nbsp;</span>			return sc.countError(&#34;first_settings&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5320" class="ln">  5320&nbsp;&nbsp;</span>		}
<span id="L5321" class="ln">  5321&nbsp;&nbsp;</span>		sc.sawFirstSettings = true
<span id="L5322" class="ln">  5322&nbsp;&nbsp;</span>	}
<span id="L5323" class="ln">  5323&nbsp;&nbsp;</span>
<span id="L5324" class="ln">  5324&nbsp;&nbsp;</span>	<span class="comment">// Discard frames for streams initiated after the identified last</span>
<span id="L5325" class="ln">  5325&nbsp;&nbsp;</span>	<span class="comment">// stream sent in a GOAWAY, or all frames after sending an error.</span>
<span id="L5326" class="ln">  5326&nbsp;&nbsp;</span>	<span class="comment">// We still need to return connection-level flow control for DATA frames.</span>
<span id="L5327" class="ln">  5327&nbsp;&nbsp;</span>	<span class="comment">// RFC 9113 Section 6.8.</span>
<span id="L5328" class="ln">  5328&nbsp;&nbsp;</span>	if sc.inGoAway &amp;&amp; (sc.goAwayCode != http2ErrCodeNo || f.Header().StreamID &gt; sc.maxClientStreamID) {
<span id="L5329" class="ln">  5329&nbsp;&nbsp;</span>
<span id="L5330" class="ln">  5330&nbsp;&nbsp;</span>		if f, ok := f.(*http2DataFrame); ok {
<span id="L5331" class="ln">  5331&nbsp;&nbsp;</span>			if !sc.inflow.take(f.Length) {
<span id="L5332" class="ln">  5332&nbsp;&nbsp;</span>				return sc.countError(&#34;data_flow&#34;, http2streamError(f.Header().StreamID, http2ErrCodeFlowControl))
<span id="L5333" class="ln">  5333&nbsp;&nbsp;</span>			}
<span id="L5334" class="ln">  5334&nbsp;&nbsp;</span>			sc.sendWindowUpdate(nil, int(f.Length)) <span class="comment">// conn-level</span>
<span id="L5335" class="ln">  5335&nbsp;&nbsp;</span>		}
<span id="L5336" class="ln">  5336&nbsp;&nbsp;</span>		return nil
<span id="L5337" class="ln">  5337&nbsp;&nbsp;</span>	}
<span id="L5338" class="ln">  5338&nbsp;&nbsp;</span>
<span id="L5339" class="ln">  5339&nbsp;&nbsp;</span>	switch f := f.(type) {
<span id="L5340" class="ln">  5340&nbsp;&nbsp;</span>	case *http2SettingsFrame:
<span id="L5341" class="ln">  5341&nbsp;&nbsp;</span>		return sc.processSettings(f)
<span id="L5342" class="ln">  5342&nbsp;&nbsp;</span>	case *http2MetaHeadersFrame:
<span id="L5343" class="ln">  5343&nbsp;&nbsp;</span>		return sc.processHeaders(f)
<span id="L5344" class="ln">  5344&nbsp;&nbsp;</span>	case *http2WindowUpdateFrame:
<span id="L5345" class="ln">  5345&nbsp;&nbsp;</span>		return sc.processWindowUpdate(f)
<span id="L5346" class="ln">  5346&nbsp;&nbsp;</span>	case *http2PingFrame:
<span id="L5347" class="ln">  5347&nbsp;&nbsp;</span>		return sc.processPing(f)
<span id="L5348" class="ln">  5348&nbsp;&nbsp;</span>	case *http2DataFrame:
<span id="L5349" class="ln">  5349&nbsp;&nbsp;</span>		return sc.processData(f)
<span id="L5350" class="ln">  5350&nbsp;&nbsp;</span>	case *http2RSTStreamFrame:
<span id="L5351" class="ln">  5351&nbsp;&nbsp;</span>		return sc.processResetStream(f)
<span id="L5352" class="ln">  5352&nbsp;&nbsp;</span>	case *http2PriorityFrame:
<span id="L5353" class="ln">  5353&nbsp;&nbsp;</span>		return sc.processPriority(f)
<span id="L5354" class="ln">  5354&nbsp;&nbsp;</span>	case *http2GoAwayFrame:
<span id="L5355" class="ln">  5355&nbsp;&nbsp;</span>		return sc.processGoAway(f)
<span id="L5356" class="ln">  5356&nbsp;&nbsp;</span>	case *http2PushPromiseFrame:
<span id="L5357" class="ln">  5357&nbsp;&nbsp;</span>		<span class="comment">// A client cannot push. Thus, servers MUST treat the receipt of a PUSH_PROMISE</span>
<span id="L5358" class="ln">  5358&nbsp;&nbsp;</span>		<span class="comment">// frame as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.</span>
<span id="L5359" class="ln">  5359&nbsp;&nbsp;</span>		return sc.countError(&#34;push_promise&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5360" class="ln">  5360&nbsp;&nbsp;</span>	default:
<span id="L5361" class="ln">  5361&nbsp;&nbsp;</span>		sc.vlogf(&#34;http2: server ignoring frame: %v&#34;, f.Header())
<span id="L5362" class="ln">  5362&nbsp;&nbsp;</span>		return nil
<span id="L5363" class="ln">  5363&nbsp;&nbsp;</span>	}
<span id="L5364" class="ln">  5364&nbsp;&nbsp;</span>}
<span id="L5365" class="ln">  5365&nbsp;&nbsp;</span>
<span id="L5366" class="ln">  5366&nbsp;&nbsp;</span>func (sc *http2serverConn) processPing(f *http2PingFrame) error {
<span id="L5367" class="ln">  5367&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5368" class="ln">  5368&nbsp;&nbsp;</span>	if f.IsAck() {
<span id="L5369" class="ln">  5369&nbsp;&nbsp;</span>		<span class="comment">// 6.7 PING: &#34; An endpoint MUST NOT respond to PING frames</span>
<span id="L5370" class="ln">  5370&nbsp;&nbsp;</span>		<span class="comment">// containing this flag.&#34;</span>
<span id="L5371" class="ln">  5371&nbsp;&nbsp;</span>		return nil
<span id="L5372" class="ln">  5372&nbsp;&nbsp;</span>	}
<span id="L5373" class="ln">  5373&nbsp;&nbsp;</span>	if f.StreamID != 0 {
<span id="L5374" class="ln">  5374&nbsp;&nbsp;</span>		<span class="comment">// &#34;PING frames are not associated with any individual</span>
<span id="L5375" class="ln">  5375&nbsp;&nbsp;</span>		<span class="comment">// stream. If a PING frame is received with a stream</span>
<span id="L5376" class="ln">  5376&nbsp;&nbsp;</span>		<span class="comment">// identifier field value other than 0x0, the recipient MUST</span>
<span id="L5377" class="ln">  5377&nbsp;&nbsp;</span>		<span class="comment">// respond with a connection error (Section 5.4.1) of type</span>
<span id="L5378" class="ln">  5378&nbsp;&nbsp;</span>		<span class="comment">// PROTOCOL_ERROR.&#34;</span>
<span id="L5379" class="ln">  5379&nbsp;&nbsp;</span>		return sc.countError(&#34;ping_on_stream&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5380" class="ln">  5380&nbsp;&nbsp;</span>	}
<span id="L5381" class="ln">  5381&nbsp;&nbsp;</span>	sc.writeFrame(http2FrameWriteRequest{write: http2writePingAck{f}})
<span id="L5382" class="ln">  5382&nbsp;&nbsp;</span>	return nil
<span id="L5383" class="ln">  5383&nbsp;&nbsp;</span>}
<span id="L5384" class="ln">  5384&nbsp;&nbsp;</span>
<span id="L5385" class="ln">  5385&nbsp;&nbsp;</span>func (sc *http2serverConn) processWindowUpdate(f *http2WindowUpdateFrame) error {
<span id="L5386" class="ln">  5386&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5387" class="ln">  5387&nbsp;&nbsp;</span>	switch {
<span id="L5388" class="ln">  5388&nbsp;&nbsp;</span>	case f.StreamID != 0: <span class="comment">// stream-level flow control</span>
<span id="L5389" class="ln">  5389&nbsp;&nbsp;</span>		state, st := sc.state(f.StreamID)
<span id="L5390" class="ln">  5390&nbsp;&nbsp;</span>		if state == http2stateIdle {
<span id="L5391" class="ln">  5391&nbsp;&nbsp;</span>			<span class="comment">// Section 5.1: &#34;Receiving any frame other than HEADERS</span>
<span id="L5392" class="ln">  5392&nbsp;&nbsp;</span>			<span class="comment">// or PRIORITY on a stream in this state MUST be</span>
<span id="L5393" class="ln">  5393&nbsp;&nbsp;</span>			<span class="comment">// treated as a connection error (Section 5.4.1) of</span>
<span id="L5394" class="ln">  5394&nbsp;&nbsp;</span>			<span class="comment">// type PROTOCOL_ERROR.&#34;</span>
<span id="L5395" class="ln">  5395&nbsp;&nbsp;</span>			return sc.countError(&#34;stream_idle&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5396" class="ln">  5396&nbsp;&nbsp;</span>		}
<span id="L5397" class="ln">  5397&nbsp;&nbsp;</span>		if st == nil {
<span id="L5398" class="ln">  5398&nbsp;&nbsp;</span>			<span class="comment">// &#34;WINDOW_UPDATE can be sent by a peer that has sent a</span>
<span id="L5399" class="ln">  5399&nbsp;&nbsp;</span>			<span class="comment">// frame bearing the END_STREAM flag. This means that a</span>
<span id="L5400" class="ln">  5400&nbsp;&nbsp;</span>			<span class="comment">// receiver could receive a WINDOW_UPDATE frame on a &#34;half</span>
<span id="L5401" class="ln">  5401&nbsp;&nbsp;</span>			<span class="comment">// closed (remote)&#34; or &#34;closed&#34; stream. A receiver MUST</span>
<span id="L5402" class="ln">  5402&nbsp;&nbsp;</span>			<span class="comment">// NOT treat this as an error, see Section 5.1.&#34;</span>
<span id="L5403" class="ln">  5403&nbsp;&nbsp;</span>			return nil
<span id="L5404" class="ln">  5404&nbsp;&nbsp;</span>		}
<span id="L5405" class="ln">  5405&nbsp;&nbsp;</span>		if !st.flow.add(int32(f.Increment)) {
<span id="L5406" class="ln">  5406&nbsp;&nbsp;</span>			return sc.countError(&#34;bad_flow&#34;, http2streamError(f.StreamID, http2ErrCodeFlowControl))
<span id="L5407" class="ln">  5407&nbsp;&nbsp;</span>		}
<span id="L5408" class="ln">  5408&nbsp;&nbsp;</span>	default: <span class="comment">// connection-level flow control</span>
<span id="L5409" class="ln">  5409&nbsp;&nbsp;</span>		if !sc.flow.add(int32(f.Increment)) {
<span id="L5410" class="ln">  5410&nbsp;&nbsp;</span>			return http2goAwayFlowError{}
<span id="L5411" class="ln">  5411&nbsp;&nbsp;</span>		}
<span id="L5412" class="ln">  5412&nbsp;&nbsp;</span>	}
<span id="L5413" class="ln">  5413&nbsp;&nbsp;</span>	sc.scheduleFrameWrite()
<span id="L5414" class="ln">  5414&nbsp;&nbsp;</span>	return nil
<span id="L5415" class="ln">  5415&nbsp;&nbsp;</span>}
<span id="L5416" class="ln">  5416&nbsp;&nbsp;</span>
<span id="L5417" class="ln">  5417&nbsp;&nbsp;</span>func (sc *http2serverConn) processResetStream(f *http2RSTStreamFrame) error {
<span id="L5418" class="ln">  5418&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5419" class="ln">  5419&nbsp;&nbsp;</span>
<span id="L5420" class="ln">  5420&nbsp;&nbsp;</span>	state, st := sc.state(f.StreamID)
<span id="L5421" class="ln">  5421&nbsp;&nbsp;</span>	if state == http2stateIdle {
<span id="L5422" class="ln">  5422&nbsp;&nbsp;</span>		<span class="comment">// 6.4 &#34;RST_STREAM frames MUST NOT be sent for a</span>
<span id="L5423" class="ln">  5423&nbsp;&nbsp;</span>		<span class="comment">// stream in the &#34;idle&#34; state. If a RST_STREAM frame</span>
<span id="L5424" class="ln">  5424&nbsp;&nbsp;</span>		<span class="comment">// identifying an idle stream is received, the</span>
<span id="L5425" class="ln">  5425&nbsp;&nbsp;</span>		<span class="comment">// recipient MUST treat this as a connection error</span>
<span id="L5426" class="ln">  5426&nbsp;&nbsp;</span>		<span class="comment">// (Section 5.4.1) of type PROTOCOL_ERROR.</span>
<span id="L5427" class="ln">  5427&nbsp;&nbsp;</span>		return sc.countError(&#34;reset_idle_stream&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5428" class="ln">  5428&nbsp;&nbsp;</span>	}
<span id="L5429" class="ln">  5429&nbsp;&nbsp;</span>	if st != nil {
<span id="L5430" class="ln">  5430&nbsp;&nbsp;</span>		st.cancelCtx()
<span id="L5431" class="ln">  5431&nbsp;&nbsp;</span>		sc.closeStream(st, http2streamError(f.StreamID, f.ErrCode))
<span id="L5432" class="ln">  5432&nbsp;&nbsp;</span>	}
<span id="L5433" class="ln">  5433&nbsp;&nbsp;</span>	return nil
<span id="L5434" class="ln">  5434&nbsp;&nbsp;</span>}
<span id="L5435" class="ln">  5435&nbsp;&nbsp;</span>
<span id="L5436" class="ln">  5436&nbsp;&nbsp;</span>func (sc *http2serverConn) closeStream(st *http2stream, err error) {
<span id="L5437" class="ln">  5437&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5438" class="ln">  5438&nbsp;&nbsp;</span>	if st.state == http2stateIdle || st.state == http2stateClosed {
<span id="L5439" class="ln">  5439&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invariant; can&#39;t close stream in state %v&#34;, st.state))
<span id="L5440" class="ln">  5440&nbsp;&nbsp;</span>	}
<span id="L5441" class="ln">  5441&nbsp;&nbsp;</span>	st.state = http2stateClosed
<span id="L5442" class="ln">  5442&nbsp;&nbsp;</span>	if st.readDeadline != nil {
<span id="L5443" class="ln">  5443&nbsp;&nbsp;</span>		st.readDeadline.Stop()
<span id="L5444" class="ln">  5444&nbsp;&nbsp;</span>	}
<span id="L5445" class="ln">  5445&nbsp;&nbsp;</span>	if st.writeDeadline != nil {
<span id="L5446" class="ln">  5446&nbsp;&nbsp;</span>		st.writeDeadline.Stop()
<span id="L5447" class="ln">  5447&nbsp;&nbsp;</span>	}
<span id="L5448" class="ln">  5448&nbsp;&nbsp;</span>	if st.isPushed() {
<span id="L5449" class="ln">  5449&nbsp;&nbsp;</span>		sc.curPushedStreams--
<span id="L5450" class="ln">  5450&nbsp;&nbsp;</span>	} else {
<span id="L5451" class="ln">  5451&nbsp;&nbsp;</span>		sc.curClientStreams--
<span id="L5452" class="ln">  5452&nbsp;&nbsp;</span>	}
<span id="L5453" class="ln">  5453&nbsp;&nbsp;</span>	delete(sc.streams, st.id)
<span id="L5454" class="ln">  5454&nbsp;&nbsp;</span>	if len(sc.streams) == 0 {
<span id="L5455" class="ln">  5455&nbsp;&nbsp;</span>		sc.setConnState(StateIdle)
<span id="L5456" class="ln">  5456&nbsp;&nbsp;</span>		if sc.srv.IdleTimeout != 0 {
<span id="L5457" class="ln">  5457&nbsp;&nbsp;</span>			sc.idleTimer.Reset(sc.srv.IdleTimeout)
<span id="L5458" class="ln">  5458&nbsp;&nbsp;</span>		}
<span id="L5459" class="ln">  5459&nbsp;&nbsp;</span>		if http2h1ServerKeepAlivesDisabled(sc.hs) {
<span id="L5460" class="ln">  5460&nbsp;&nbsp;</span>			sc.startGracefulShutdownInternal()
<span id="L5461" class="ln">  5461&nbsp;&nbsp;</span>		}
<span id="L5462" class="ln">  5462&nbsp;&nbsp;</span>	}
<span id="L5463" class="ln">  5463&nbsp;&nbsp;</span>	if p := st.body; p != nil {
<span id="L5464" class="ln">  5464&nbsp;&nbsp;</span>		<span class="comment">// Return any buffered unread bytes worth of conn-level flow control.</span>
<span id="L5465" class="ln">  5465&nbsp;&nbsp;</span>		<span class="comment">// See golang.org/issue/16481</span>
<span id="L5466" class="ln">  5466&nbsp;&nbsp;</span>		sc.sendWindowUpdate(nil, p.Len())
<span id="L5467" class="ln">  5467&nbsp;&nbsp;</span>
<span id="L5468" class="ln">  5468&nbsp;&nbsp;</span>		p.CloseWithError(err)
<span id="L5469" class="ln">  5469&nbsp;&nbsp;</span>	}
<span id="L5470" class="ln">  5470&nbsp;&nbsp;</span>	if e, ok := err.(http2StreamError); ok {
<span id="L5471" class="ln">  5471&nbsp;&nbsp;</span>		if e.Cause != nil {
<span id="L5472" class="ln">  5472&nbsp;&nbsp;</span>			err = e.Cause
<span id="L5473" class="ln">  5473&nbsp;&nbsp;</span>		} else {
<span id="L5474" class="ln">  5474&nbsp;&nbsp;</span>			err = http2errStreamClosed
<span id="L5475" class="ln">  5475&nbsp;&nbsp;</span>		}
<span id="L5476" class="ln">  5476&nbsp;&nbsp;</span>	}
<span id="L5477" class="ln">  5477&nbsp;&nbsp;</span>	st.closeErr = err
<span id="L5478" class="ln">  5478&nbsp;&nbsp;</span>	st.cw.Close() <span class="comment">// signals Handler&#39;s CloseNotifier, unblocks writes, etc</span>
<span id="L5479" class="ln">  5479&nbsp;&nbsp;</span>	sc.writeSched.CloseStream(st.id)
<span id="L5480" class="ln">  5480&nbsp;&nbsp;</span>}
<span id="L5481" class="ln">  5481&nbsp;&nbsp;</span>
<span id="L5482" class="ln">  5482&nbsp;&nbsp;</span>func (sc *http2serverConn) processSettings(f *http2SettingsFrame) error {
<span id="L5483" class="ln">  5483&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5484" class="ln">  5484&nbsp;&nbsp;</span>	if f.IsAck() {
<span id="L5485" class="ln">  5485&nbsp;&nbsp;</span>		sc.unackedSettings--
<span id="L5486" class="ln">  5486&nbsp;&nbsp;</span>		if sc.unackedSettings &lt; 0 {
<span id="L5487" class="ln">  5487&nbsp;&nbsp;</span>			<span class="comment">// Why is the peer ACKing settings we never sent?</span>
<span id="L5488" class="ln">  5488&nbsp;&nbsp;</span>			<span class="comment">// The spec doesn&#39;t mention this case, but</span>
<span id="L5489" class="ln">  5489&nbsp;&nbsp;</span>			<span class="comment">// hang up on them anyway.</span>
<span id="L5490" class="ln">  5490&nbsp;&nbsp;</span>			return sc.countError(&#34;ack_mystery&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5491" class="ln">  5491&nbsp;&nbsp;</span>		}
<span id="L5492" class="ln">  5492&nbsp;&nbsp;</span>		return nil
<span id="L5493" class="ln">  5493&nbsp;&nbsp;</span>	}
<span id="L5494" class="ln">  5494&nbsp;&nbsp;</span>	if f.NumSettings() &gt; 100 || f.HasDuplicates() {
<span id="L5495" class="ln">  5495&nbsp;&nbsp;</span>		<span class="comment">// This isn&#39;t actually in the spec, but hang up on</span>
<span id="L5496" class="ln">  5496&nbsp;&nbsp;</span>		<span class="comment">// suspiciously large settings frames or those with</span>
<span id="L5497" class="ln">  5497&nbsp;&nbsp;</span>		<span class="comment">// duplicate entries.</span>
<span id="L5498" class="ln">  5498&nbsp;&nbsp;</span>		return sc.countError(&#34;settings_big_or_dups&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5499" class="ln">  5499&nbsp;&nbsp;</span>	}
<span id="L5500" class="ln">  5500&nbsp;&nbsp;</span>	if err := f.ForeachSetting(sc.processSetting); err != nil {
<span id="L5501" class="ln">  5501&nbsp;&nbsp;</span>		return err
<span id="L5502" class="ln">  5502&nbsp;&nbsp;</span>	}
<span id="L5503" class="ln">  5503&nbsp;&nbsp;</span>	<span class="comment">// TODO: judging by RFC 7540, Section 6.5.3 each SETTINGS frame should be</span>
<span id="L5504" class="ln">  5504&nbsp;&nbsp;</span>	<span class="comment">// acknowledged individually, even if multiple are received before the ACK.</span>
<span id="L5505" class="ln">  5505&nbsp;&nbsp;</span>	sc.needToSendSettingsAck = true
<span id="L5506" class="ln">  5506&nbsp;&nbsp;</span>	sc.scheduleFrameWrite()
<span id="L5507" class="ln">  5507&nbsp;&nbsp;</span>	return nil
<span id="L5508" class="ln">  5508&nbsp;&nbsp;</span>}
<span id="L5509" class="ln">  5509&nbsp;&nbsp;</span>
<span id="L5510" class="ln">  5510&nbsp;&nbsp;</span>func (sc *http2serverConn) processSetting(s http2Setting) error {
<span id="L5511" class="ln">  5511&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5512" class="ln">  5512&nbsp;&nbsp;</span>	if err := s.Valid(); err != nil {
<span id="L5513" class="ln">  5513&nbsp;&nbsp;</span>		return err
<span id="L5514" class="ln">  5514&nbsp;&nbsp;</span>	}
<span id="L5515" class="ln">  5515&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L5516" class="ln">  5516&nbsp;&nbsp;</span>		sc.vlogf(&#34;http2: server processing setting %v&#34;, s)
<span id="L5517" class="ln">  5517&nbsp;&nbsp;</span>	}
<span id="L5518" class="ln">  5518&nbsp;&nbsp;</span>	switch s.ID {
<span id="L5519" class="ln">  5519&nbsp;&nbsp;</span>	case http2SettingHeaderTableSize:
<span id="L5520" class="ln">  5520&nbsp;&nbsp;</span>		sc.hpackEncoder.SetMaxDynamicTableSize(s.Val)
<span id="L5521" class="ln">  5521&nbsp;&nbsp;</span>	case http2SettingEnablePush:
<span id="L5522" class="ln">  5522&nbsp;&nbsp;</span>		sc.pushEnabled = s.Val != 0
<span id="L5523" class="ln">  5523&nbsp;&nbsp;</span>	case http2SettingMaxConcurrentStreams:
<span id="L5524" class="ln">  5524&nbsp;&nbsp;</span>		sc.clientMaxStreams = s.Val
<span id="L5525" class="ln">  5525&nbsp;&nbsp;</span>	case http2SettingInitialWindowSize:
<span id="L5526" class="ln">  5526&nbsp;&nbsp;</span>		return sc.processSettingInitialWindowSize(s.Val)
<span id="L5527" class="ln">  5527&nbsp;&nbsp;</span>	case http2SettingMaxFrameSize:
<span id="L5528" class="ln">  5528&nbsp;&nbsp;</span>		sc.maxFrameSize = int32(s.Val) <span class="comment">// the maximum valid s.Val is &lt; 2^31</span>
<span id="L5529" class="ln">  5529&nbsp;&nbsp;</span>	case http2SettingMaxHeaderListSize:
<span id="L5530" class="ln">  5530&nbsp;&nbsp;</span>		sc.peerMaxHeaderListSize = s.Val
<span id="L5531" class="ln">  5531&nbsp;&nbsp;</span>	default:
<span id="L5532" class="ln">  5532&nbsp;&nbsp;</span>		<span class="comment">// Unknown setting: &#34;An endpoint that receives a SETTINGS</span>
<span id="L5533" class="ln">  5533&nbsp;&nbsp;</span>		<span class="comment">// frame with any unknown or unsupported identifier MUST</span>
<span id="L5534" class="ln">  5534&nbsp;&nbsp;</span>		<span class="comment">// ignore that setting.&#34;</span>
<span id="L5535" class="ln">  5535&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L5536" class="ln">  5536&nbsp;&nbsp;</span>			sc.vlogf(&#34;http2: server ignoring unknown setting %v&#34;, s)
<span id="L5537" class="ln">  5537&nbsp;&nbsp;</span>		}
<span id="L5538" class="ln">  5538&nbsp;&nbsp;</span>	}
<span id="L5539" class="ln">  5539&nbsp;&nbsp;</span>	return nil
<span id="L5540" class="ln">  5540&nbsp;&nbsp;</span>}
<span id="L5541" class="ln">  5541&nbsp;&nbsp;</span>
<span id="L5542" class="ln">  5542&nbsp;&nbsp;</span>func (sc *http2serverConn) processSettingInitialWindowSize(val uint32) error {
<span id="L5543" class="ln">  5543&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5544" class="ln">  5544&nbsp;&nbsp;</span>	<span class="comment">// Note: val already validated to be within range by</span>
<span id="L5545" class="ln">  5545&nbsp;&nbsp;</span>	<span class="comment">// processSetting&#39;s Valid call.</span>
<span id="L5546" class="ln">  5546&nbsp;&nbsp;</span>
<span id="L5547" class="ln">  5547&nbsp;&nbsp;</span>	<span class="comment">// &#34;A SETTINGS frame can alter the initial flow control window</span>
<span id="L5548" class="ln">  5548&nbsp;&nbsp;</span>	<span class="comment">// size for all current streams. When the value of</span>
<span id="L5549" class="ln">  5549&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST</span>
<span id="L5550" class="ln">  5550&nbsp;&nbsp;</span>	<span class="comment">// adjust the size of all stream flow control windows that it</span>
<span id="L5551" class="ln">  5551&nbsp;&nbsp;</span>	<span class="comment">// maintains by the difference between the new value and the</span>
<span id="L5552" class="ln">  5552&nbsp;&nbsp;</span>	<span class="comment">// old value.&#34;</span>
<span id="L5553" class="ln">  5553&nbsp;&nbsp;</span>	old := sc.initialStreamSendWindowSize
<span id="L5554" class="ln">  5554&nbsp;&nbsp;</span>	sc.initialStreamSendWindowSize = int32(val)
<span id="L5555" class="ln">  5555&nbsp;&nbsp;</span>	growth := int32(val) - old <span class="comment">// may be negative</span>
<span id="L5556" class="ln">  5556&nbsp;&nbsp;</span>	for _, st := range sc.streams {
<span id="L5557" class="ln">  5557&nbsp;&nbsp;</span>		if !st.flow.add(growth) {
<span id="L5558" class="ln">  5558&nbsp;&nbsp;</span>			<span class="comment">// 6.9.2 Initial Flow Control Window Size</span>
<span id="L5559" class="ln">  5559&nbsp;&nbsp;</span>			<span class="comment">// &#34;An endpoint MUST treat a change to</span>
<span id="L5560" class="ln">  5560&nbsp;&nbsp;</span>			<span class="comment">// SETTINGS_INITIAL_WINDOW_SIZE that causes any flow</span>
<span id="L5561" class="ln">  5561&nbsp;&nbsp;</span>			<span class="comment">// control window to exceed the maximum size as a</span>
<span id="L5562" class="ln">  5562&nbsp;&nbsp;</span>			<span class="comment">// connection error (Section 5.4.1) of type</span>
<span id="L5563" class="ln">  5563&nbsp;&nbsp;</span>			<span class="comment">// FLOW_CONTROL_ERROR.&#34;</span>
<span id="L5564" class="ln">  5564&nbsp;&nbsp;</span>			return sc.countError(&#34;setting_win_size&#34;, http2ConnectionError(http2ErrCodeFlowControl))
<span id="L5565" class="ln">  5565&nbsp;&nbsp;</span>		}
<span id="L5566" class="ln">  5566&nbsp;&nbsp;</span>	}
<span id="L5567" class="ln">  5567&nbsp;&nbsp;</span>	return nil
<span id="L5568" class="ln">  5568&nbsp;&nbsp;</span>}
<span id="L5569" class="ln">  5569&nbsp;&nbsp;</span>
<span id="L5570" class="ln">  5570&nbsp;&nbsp;</span>func (sc *http2serverConn) processData(f *http2DataFrame) error {
<span id="L5571" class="ln">  5571&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5572" class="ln">  5572&nbsp;&nbsp;</span>	id := f.Header().StreamID
<span id="L5573" class="ln">  5573&nbsp;&nbsp;</span>
<span id="L5574" class="ln">  5574&nbsp;&nbsp;</span>	data := f.Data()
<span id="L5575" class="ln">  5575&nbsp;&nbsp;</span>	state, st := sc.state(id)
<span id="L5576" class="ln">  5576&nbsp;&nbsp;</span>	if id == 0 || state == http2stateIdle {
<span id="L5577" class="ln">  5577&nbsp;&nbsp;</span>		<span class="comment">// Section 6.1: &#34;DATA frames MUST be associated with a</span>
<span id="L5578" class="ln">  5578&nbsp;&nbsp;</span>		<span class="comment">// stream. If a DATA frame is received whose stream</span>
<span id="L5579" class="ln">  5579&nbsp;&nbsp;</span>		<span class="comment">// identifier field is 0x0, the recipient MUST respond</span>
<span id="L5580" class="ln">  5580&nbsp;&nbsp;</span>		<span class="comment">// with a connection error (Section 5.4.1) of type</span>
<span id="L5581" class="ln">  5581&nbsp;&nbsp;</span>		<span class="comment">// PROTOCOL_ERROR.&#34;</span>
<span id="L5582" class="ln">  5582&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5583" class="ln">  5583&nbsp;&nbsp;</span>		<span class="comment">// Section 5.1: &#34;Receiving any frame other than HEADERS</span>
<span id="L5584" class="ln">  5584&nbsp;&nbsp;</span>		<span class="comment">// or PRIORITY on a stream in this state MUST be</span>
<span id="L5585" class="ln">  5585&nbsp;&nbsp;</span>		<span class="comment">// treated as a connection error (Section 5.4.1) of</span>
<span id="L5586" class="ln">  5586&nbsp;&nbsp;</span>		<span class="comment">// type PROTOCOL_ERROR.&#34;</span>
<span id="L5587" class="ln">  5587&nbsp;&nbsp;</span>		return sc.countError(&#34;data_on_idle&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5588" class="ln">  5588&nbsp;&nbsp;</span>	}
<span id="L5589" class="ln">  5589&nbsp;&nbsp;</span>
<span id="L5590" class="ln">  5590&nbsp;&nbsp;</span>	<span class="comment">// &#34;If a DATA frame is received whose stream is not in &#34;open&#34;</span>
<span id="L5591" class="ln">  5591&nbsp;&nbsp;</span>	<span class="comment">// or &#34;half closed (local)&#34; state, the recipient MUST respond</span>
<span id="L5592" class="ln">  5592&nbsp;&nbsp;</span>	<span class="comment">// with a stream error (Section 5.4.2) of type STREAM_CLOSED.&#34;</span>
<span id="L5593" class="ln">  5593&nbsp;&nbsp;</span>	if st == nil || state != http2stateOpen || st.gotTrailerHeader || st.resetQueued {
<span id="L5594" class="ln">  5594&nbsp;&nbsp;</span>		<span class="comment">// This includes sending a RST_STREAM if the stream is</span>
<span id="L5595" class="ln">  5595&nbsp;&nbsp;</span>		<span class="comment">// in stateHalfClosedLocal (which currently means that</span>
<span id="L5596" class="ln">  5596&nbsp;&nbsp;</span>		<span class="comment">// the http.Handler returned, so it&#39;s done reading &amp;</span>
<span id="L5597" class="ln">  5597&nbsp;&nbsp;</span>		<span class="comment">// done writing). Try to stop the client from sending</span>
<span id="L5598" class="ln">  5598&nbsp;&nbsp;</span>		<span class="comment">// more DATA.</span>
<span id="L5599" class="ln">  5599&nbsp;&nbsp;</span>
<span id="L5600" class="ln">  5600&nbsp;&nbsp;</span>		<span class="comment">// But still enforce their connection-level flow control,</span>
<span id="L5601" class="ln">  5601&nbsp;&nbsp;</span>		<span class="comment">// and return any flow control bytes since we&#39;re not going</span>
<span id="L5602" class="ln">  5602&nbsp;&nbsp;</span>		<span class="comment">// to consume them.</span>
<span id="L5603" class="ln">  5603&nbsp;&nbsp;</span>		if !sc.inflow.take(f.Length) {
<span id="L5604" class="ln">  5604&nbsp;&nbsp;</span>			return sc.countError(&#34;data_flow&#34;, http2streamError(id, http2ErrCodeFlowControl))
<span id="L5605" class="ln">  5605&nbsp;&nbsp;</span>		}
<span id="L5606" class="ln">  5606&nbsp;&nbsp;</span>		sc.sendWindowUpdate(nil, int(f.Length)) <span class="comment">// conn-level</span>
<span id="L5607" class="ln">  5607&nbsp;&nbsp;</span>
<span id="L5608" class="ln">  5608&nbsp;&nbsp;</span>		if st != nil &amp;&amp; st.resetQueued {
<span id="L5609" class="ln">  5609&nbsp;&nbsp;</span>			<span class="comment">// Already have a stream error in flight. Don&#39;t send another.</span>
<span id="L5610" class="ln">  5610&nbsp;&nbsp;</span>			return nil
<span id="L5611" class="ln">  5611&nbsp;&nbsp;</span>		}
<span id="L5612" class="ln">  5612&nbsp;&nbsp;</span>		return sc.countError(&#34;closed&#34;, http2streamError(id, http2ErrCodeStreamClosed))
<span id="L5613" class="ln">  5613&nbsp;&nbsp;</span>	}
<span id="L5614" class="ln">  5614&nbsp;&nbsp;</span>	if st.body == nil {
<span id="L5615" class="ln">  5615&nbsp;&nbsp;</span>		panic(&#34;internal error: should have a body in this state&#34;)
<span id="L5616" class="ln">  5616&nbsp;&nbsp;</span>	}
<span id="L5617" class="ln">  5617&nbsp;&nbsp;</span>
<span id="L5618" class="ln">  5618&nbsp;&nbsp;</span>	<span class="comment">// Sender sending more than they&#39;d declared?</span>
<span id="L5619" class="ln">  5619&nbsp;&nbsp;</span>	if st.declBodyBytes != -1 &amp;&amp; st.bodyBytes+int64(len(data)) &gt; st.declBodyBytes {
<span id="L5620" class="ln">  5620&nbsp;&nbsp;</span>		if !sc.inflow.take(f.Length) {
<span id="L5621" class="ln">  5621&nbsp;&nbsp;</span>			return sc.countError(&#34;data_flow&#34;, http2streamError(id, http2ErrCodeFlowControl))
<span id="L5622" class="ln">  5622&nbsp;&nbsp;</span>		}
<span id="L5623" class="ln">  5623&nbsp;&nbsp;</span>		sc.sendWindowUpdate(nil, int(f.Length)) <span class="comment">// conn-level</span>
<span id="L5624" class="ln">  5624&nbsp;&nbsp;</span>
<span id="L5625" class="ln">  5625&nbsp;&nbsp;</span>		st.body.CloseWithError(fmt.Errorf(&#34;sender tried to send more than declared Content-Length of %d bytes&#34;, st.declBodyBytes))
<span id="L5626" class="ln">  5626&nbsp;&nbsp;</span>		<span class="comment">// RFC 7540, sec 8.1.2.6: A request or response is also malformed if the</span>
<span id="L5627" class="ln">  5627&nbsp;&nbsp;</span>		<span class="comment">// value of a content-length header field does not equal the sum of the</span>
<span id="L5628" class="ln">  5628&nbsp;&nbsp;</span>		<span class="comment">// DATA frame payload lengths that form the body.</span>
<span id="L5629" class="ln">  5629&nbsp;&nbsp;</span>		return sc.countError(&#34;send_too_much&#34;, http2streamError(id, http2ErrCodeProtocol))
<span id="L5630" class="ln">  5630&nbsp;&nbsp;</span>	}
<span id="L5631" class="ln">  5631&nbsp;&nbsp;</span>	if f.Length &gt; 0 {
<span id="L5632" class="ln">  5632&nbsp;&nbsp;</span>		<span class="comment">// Check whether the client has flow control quota.</span>
<span id="L5633" class="ln">  5633&nbsp;&nbsp;</span>		if !http2takeInflows(&amp;sc.inflow, &amp;st.inflow, f.Length) {
<span id="L5634" class="ln">  5634&nbsp;&nbsp;</span>			return sc.countError(&#34;flow_on_data_length&#34;, http2streamError(id, http2ErrCodeFlowControl))
<span id="L5635" class="ln">  5635&nbsp;&nbsp;</span>		}
<span id="L5636" class="ln">  5636&nbsp;&nbsp;</span>
<span id="L5637" class="ln">  5637&nbsp;&nbsp;</span>		if len(data) &gt; 0 {
<span id="L5638" class="ln">  5638&nbsp;&nbsp;</span>			st.bodyBytes += int64(len(data))
<span id="L5639" class="ln">  5639&nbsp;&nbsp;</span>			wrote, err := st.body.Write(data)
<span id="L5640" class="ln">  5640&nbsp;&nbsp;</span>			if err != nil {
<span id="L5641" class="ln">  5641&nbsp;&nbsp;</span>				<span class="comment">// The handler has closed the request body.</span>
<span id="L5642" class="ln">  5642&nbsp;&nbsp;</span>				<span class="comment">// Return the connection-level flow control for the discarded data,</span>
<span id="L5643" class="ln">  5643&nbsp;&nbsp;</span>				<span class="comment">// but not the stream-level flow control.</span>
<span id="L5644" class="ln">  5644&nbsp;&nbsp;</span>				sc.sendWindowUpdate(nil, int(f.Length)-wrote)
<span id="L5645" class="ln">  5645&nbsp;&nbsp;</span>				return nil
<span id="L5646" class="ln">  5646&nbsp;&nbsp;</span>			}
<span id="L5647" class="ln">  5647&nbsp;&nbsp;</span>			if wrote != len(data) {
<span id="L5648" class="ln">  5648&nbsp;&nbsp;</span>				panic(&#34;internal error: bad Writer&#34;)
<span id="L5649" class="ln">  5649&nbsp;&nbsp;</span>			}
<span id="L5650" class="ln">  5650&nbsp;&nbsp;</span>		}
<span id="L5651" class="ln">  5651&nbsp;&nbsp;</span>
<span id="L5652" class="ln">  5652&nbsp;&nbsp;</span>		<span class="comment">// Return any padded flow control now, since we won&#39;t</span>
<span id="L5653" class="ln">  5653&nbsp;&nbsp;</span>		<span class="comment">// refund it later on body reads.</span>
<span id="L5654" class="ln">  5654&nbsp;&nbsp;</span>		<span class="comment">// Call sendWindowUpdate even if there is no padding,</span>
<span id="L5655" class="ln">  5655&nbsp;&nbsp;</span>		<span class="comment">// to return buffered flow control credit if the sent</span>
<span id="L5656" class="ln">  5656&nbsp;&nbsp;</span>		<span class="comment">// window has shrunk.</span>
<span id="L5657" class="ln">  5657&nbsp;&nbsp;</span>		pad := int32(f.Length) - int32(len(data))
<span id="L5658" class="ln">  5658&nbsp;&nbsp;</span>		sc.sendWindowUpdate32(nil, pad)
<span id="L5659" class="ln">  5659&nbsp;&nbsp;</span>		sc.sendWindowUpdate32(st, pad)
<span id="L5660" class="ln">  5660&nbsp;&nbsp;</span>	}
<span id="L5661" class="ln">  5661&nbsp;&nbsp;</span>	if f.StreamEnded() {
<span id="L5662" class="ln">  5662&nbsp;&nbsp;</span>		st.endStream()
<span id="L5663" class="ln">  5663&nbsp;&nbsp;</span>	}
<span id="L5664" class="ln">  5664&nbsp;&nbsp;</span>	return nil
<span id="L5665" class="ln">  5665&nbsp;&nbsp;</span>}
<span id="L5666" class="ln">  5666&nbsp;&nbsp;</span>
<span id="L5667" class="ln">  5667&nbsp;&nbsp;</span>func (sc *http2serverConn) processGoAway(f *http2GoAwayFrame) error {
<span id="L5668" class="ln">  5668&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5669" class="ln">  5669&nbsp;&nbsp;</span>	if f.ErrCode != http2ErrCodeNo {
<span id="L5670" class="ln">  5670&nbsp;&nbsp;</span>		sc.logf(&#34;http2: received GOAWAY %+v, starting graceful shutdown&#34;, f)
<span id="L5671" class="ln">  5671&nbsp;&nbsp;</span>	} else {
<span id="L5672" class="ln">  5672&nbsp;&nbsp;</span>		sc.vlogf(&#34;http2: received GOAWAY %+v, starting graceful shutdown&#34;, f)
<span id="L5673" class="ln">  5673&nbsp;&nbsp;</span>	}
<span id="L5674" class="ln">  5674&nbsp;&nbsp;</span>	sc.startGracefulShutdownInternal()
<span id="L5675" class="ln">  5675&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-6.8</span>
<span id="L5676" class="ln">  5676&nbsp;&nbsp;</span>	<span class="comment">// We should not create any new streams, which means we should disable push.</span>
<span id="L5677" class="ln">  5677&nbsp;&nbsp;</span>	sc.pushEnabled = false
<span id="L5678" class="ln">  5678&nbsp;&nbsp;</span>	return nil
<span id="L5679" class="ln">  5679&nbsp;&nbsp;</span>}
<span id="L5680" class="ln">  5680&nbsp;&nbsp;</span>
<span id="L5681" class="ln">  5681&nbsp;&nbsp;</span><span class="comment">// isPushed reports whether the stream is server-initiated.</span>
<span id="L5682" class="ln">  5682&nbsp;&nbsp;</span>func (st *http2stream) isPushed() bool {
<span id="L5683" class="ln">  5683&nbsp;&nbsp;</span>	return st.id%2 == 0
<span id="L5684" class="ln">  5684&nbsp;&nbsp;</span>}
<span id="L5685" class="ln">  5685&nbsp;&nbsp;</span>
<span id="L5686" class="ln">  5686&nbsp;&nbsp;</span><span class="comment">// endStream closes a Request.Body&#39;s pipe. It is called when a DATA</span>
<span id="L5687" class="ln">  5687&nbsp;&nbsp;</span><span class="comment">// frame says a request body is over (or after trailers).</span>
<span id="L5688" class="ln">  5688&nbsp;&nbsp;</span>func (st *http2stream) endStream() {
<span id="L5689" class="ln">  5689&nbsp;&nbsp;</span>	sc := st.sc
<span id="L5690" class="ln">  5690&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5691" class="ln">  5691&nbsp;&nbsp;</span>
<span id="L5692" class="ln">  5692&nbsp;&nbsp;</span>	if st.declBodyBytes != -1 &amp;&amp; st.declBodyBytes != st.bodyBytes {
<span id="L5693" class="ln">  5693&nbsp;&nbsp;</span>		st.body.CloseWithError(fmt.Errorf(&#34;request declared a Content-Length of %d but only wrote %d bytes&#34;,
<span id="L5694" class="ln">  5694&nbsp;&nbsp;</span>			st.declBodyBytes, st.bodyBytes))
<span id="L5695" class="ln">  5695&nbsp;&nbsp;</span>	} else {
<span id="L5696" class="ln">  5696&nbsp;&nbsp;</span>		st.body.closeWithErrorAndCode(io.EOF, st.copyTrailersToHandlerRequest)
<span id="L5697" class="ln">  5697&nbsp;&nbsp;</span>		st.body.CloseWithError(io.EOF)
<span id="L5698" class="ln">  5698&nbsp;&nbsp;</span>	}
<span id="L5699" class="ln">  5699&nbsp;&nbsp;</span>	st.state = http2stateHalfClosedRemote
<span id="L5700" class="ln">  5700&nbsp;&nbsp;</span>}
<span id="L5701" class="ln">  5701&nbsp;&nbsp;</span>
<span id="L5702" class="ln">  5702&nbsp;&nbsp;</span><span class="comment">// copyTrailersToHandlerRequest is run in the Handler&#39;s goroutine in</span>
<span id="L5703" class="ln">  5703&nbsp;&nbsp;</span><span class="comment">// its Request.Body.Read just before it gets io.EOF.</span>
<span id="L5704" class="ln">  5704&nbsp;&nbsp;</span>func (st *http2stream) copyTrailersToHandlerRequest() {
<span id="L5705" class="ln">  5705&nbsp;&nbsp;</span>	for k, vv := range st.trailer {
<span id="L5706" class="ln">  5706&nbsp;&nbsp;</span>		if _, ok := st.reqTrailer[k]; ok {
<span id="L5707" class="ln">  5707&nbsp;&nbsp;</span>			<span class="comment">// Only copy it over it was pre-declared.</span>
<span id="L5708" class="ln">  5708&nbsp;&nbsp;</span>			st.reqTrailer[k] = vv
<span id="L5709" class="ln">  5709&nbsp;&nbsp;</span>		}
<span id="L5710" class="ln">  5710&nbsp;&nbsp;</span>	}
<span id="L5711" class="ln">  5711&nbsp;&nbsp;</span>}
<span id="L5712" class="ln">  5712&nbsp;&nbsp;</span>
<span id="L5713" class="ln">  5713&nbsp;&nbsp;</span><span class="comment">// onReadTimeout is run on its own goroutine (from time.AfterFunc)</span>
<span id="L5714" class="ln">  5714&nbsp;&nbsp;</span><span class="comment">// when the stream&#39;s ReadTimeout has fired.</span>
<span id="L5715" class="ln">  5715&nbsp;&nbsp;</span>func (st *http2stream) onReadTimeout() {
<span id="L5716" class="ln">  5716&nbsp;&nbsp;</span>	if st.body != nil {
<span id="L5717" class="ln">  5717&nbsp;&nbsp;</span>		<span class="comment">// Wrap the ErrDeadlineExceeded to avoid callers depending on us</span>
<span id="L5718" class="ln">  5718&nbsp;&nbsp;</span>		<span class="comment">// returning the bare error.</span>
<span id="L5719" class="ln">  5719&nbsp;&nbsp;</span>		st.body.CloseWithError(fmt.Errorf(&#34;%w&#34;, os.ErrDeadlineExceeded))
<span id="L5720" class="ln">  5720&nbsp;&nbsp;</span>	}
<span id="L5721" class="ln">  5721&nbsp;&nbsp;</span>}
<span id="L5722" class="ln">  5722&nbsp;&nbsp;</span>
<span id="L5723" class="ln">  5723&nbsp;&nbsp;</span><span class="comment">// onWriteTimeout is run on its own goroutine (from time.AfterFunc)</span>
<span id="L5724" class="ln">  5724&nbsp;&nbsp;</span><span class="comment">// when the stream&#39;s WriteTimeout has fired.</span>
<span id="L5725" class="ln">  5725&nbsp;&nbsp;</span>func (st *http2stream) onWriteTimeout() {
<span id="L5726" class="ln">  5726&nbsp;&nbsp;</span>	st.sc.writeFrameFromHandler(http2FrameWriteRequest{write: http2StreamError{
<span id="L5727" class="ln">  5727&nbsp;&nbsp;</span>		StreamID: st.id,
<span id="L5728" class="ln">  5728&nbsp;&nbsp;</span>		Code:     http2ErrCodeInternal,
<span id="L5729" class="ln">  5729&nbsp;&nbsp;</span>		Cause:    os.ErrDeadlineExceeded,
<span id="L5730" class="ln">  5730&nbsp;&nbsp;</span>	}})
<span id="L5731" class="ln">  5731&nbsp;&nbsp;</span>}
<span id="L5732" class="ln">  5732&nbsp;&nbsp;</span>
<span id="L5733" class="ln">  5733&nbsp;&nbsp;</span>func (sc *http2serverConn) processHeaders(f *http2MetaHeadersFrame) error {
<span id="L5734" class="ln">  5734&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5735" class="ln">  5735&nbsp;&nbsp;</span>	id := f.StreamID
<span id="L5736" class="ln">  5736&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-5.1.1</span>
<span id="L5737" class="ln">  5737&nbsp;&nbsp;</span>	<span class="comment">// Streams initiated by a client MUST use odd-numbered stream</span>
<span id="L5738" class="ln">  5738&nbsp;&nbsp;</span>	<span class="comment">// identifiers. [...] An endpoint that receives an unexpected</span>
<span id="L5739" class="ln">  5739&nbsp;&nbsp;</span>	<span class="comment">// stream identifier MUST respond with a connection error</span>
<span id="L5740" class="ln">  5740&nbsp;&nbsp;</span>	<span class="comment">// (Section 5.4.1) of type PROTOCOL_ERROR.</span>
<span id="L5741" class="ln">  5741&nbsp;&nbsp;</span>	if id%2 != 1 {
<span id="L5742" class="ln">  5742&nbsp;&nbsp;</span>		return sc.countError(&#34;headers_even&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5743" class="ln">  5743&nbsp;&nbsp;</span>	}
<span id="L5744" class="ln">  5744&nbsp;&nbsp;</span>	<span class="comment">// A HEADERS frame can be used to create a new stream or</span>
<span id="L5745" class="ln">  5745&nbsp;&nbsp;</span>	<span class="comment">// send a trailer for an open one. If we already have a stream</span>
<span id="L5746" class="ln">  5746&nbsp;&nbsp;</span>	<span class="comment">// open, let it process its own HEADERS frame (trailers at this</span>
<span id="L5747" class="ln">  5747&nbsp;&nbsp;</span>	<span class="comment">// point, if it&#39;s valid).</span>
<span id="L5748" class="ln">  5748&nbsp;&nbsp;</span>	if st := sc.streams[f.StreamID]; st != nil {
<span id="L5749" class="ln">  5749&nbsp;&nbsp;</span>		if st.resetQueued {
<span id="L5750" class="ln">  5750&nbsp;&nbsp;</span>			<span class="comment">// We&#39;re sending RST_STREAM to close the stream, so don&#39;t bother</span>
<span id="L5751" class="ln">  5751&nbsp;&nbsp;</span>			<span class="comment">// processing this frame.</span>
<span id="L5752" class="ln">  5752&nbsp;&nbsp;</span>			return nil
<span id="L5753" class="ln">  5753&nbsp;&nbsp;</span>		}
<span id="L5754" class="ln">  5754&nbsp;&nbsp;</span>		<span class="comment">// RFC 7540, sec 5.1: If an endpoint receives additional frames, other than</span>
<span id="L5755" class="ln">  5755&nbsp;&nbsp;</span>		<span class="comment">// WINDOW_UPDATE, PRIORITY, or RST_STREAM, for a stream that is in</span>
<span id="L5756" class="ln">  5756&nbsp;&nbsp;</span>		<span class="comment">// this state, it MUST respond with a stream error (Section 5.4.2) of</span>
<span id="L5757" class="ln">  5757&nbsp;&nbsp;</span>		<span class="comment">// type STREAM_CLOSED.</span>
<span id="L5758" class="ln">  5758&nbsp;&nbsp;</span>		if st.state == http2stateHalfClosedRemote {
<span id="L5759" class="ln">  5759&nbsp;&nbsp;</span>			return sc.countError(&#34;headers_half_closed&#34;, http2streamError(id, http2ErrCodeStreamClosed))
<span id="L5760" class="ln">  5760&nbsp;&nbsp;</span>		}
<span id="L5761" class="ln">  5761&nbsp;&nbsp;</span>		return st.processTrailerHeaders(f)
<span id="L5762" class="ln">  5762&nbsp;&nbsp;</span>	}
<span id="L5763" class="ln">  5763&nbsp;&nbsp;</span>
<span id="L5764" class="ln">  5764&nbsp;&nbsp;</span>	<span class="comment">// [...] The identifier of a newly established stream MUST be</span>
<span id="L5765" class="ln">  5765&nbsp;&nbsp;</span>	<span class="comment">// numerically greater than all streams that the initiating</span>
<span id="L5766" class="ln">  5766&nbsp;&nbsp;</span>	<span class="comment">// endpoint has opened or reserved. [...]  An endpoint that</span>
<span id="L5767" class="ln">  5767&nbsp;&nbsp;</span>	<span class="comment">// receives an unexpected stream identifier MUST respond with</span>
<span id="L5768" class="ln">  5768&nbsp;&nbsp;</span>	<span class="comment">// a connection error (Section 5.4.1) of type PROTOCOL_ERROR.</span>
<span id="L5769" class="ln">  5769&nbsp;&nbsp;</span>	if id &lt;= sc.maxClientStreamID {
<span id="L5770" class="ln">  5770&nbsp;&nbsp;</span>		return sc.countError(&#34;stream_went_down&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5771" class="ln">  5771&nbsp;&nbsp;</span>	}
<span id="L5772" class="ln">  5772&nbsp;&nbsp;</span>	sc.maxClientStreamID = id
<span id="L5773" class="ln">  5773&nbsp;&nbsp;</span>
<span id="L5774" class="ln">  5774&nbsp;&nbsp;</span>	if sc.idleTimer != nil {
<span id="L5775" class="ln">  5775&nbsp;&nbsp;</span>		sc.idleTimer.Stop()
<span id="L5776" class="ln">  5776&nbsp;&nbsp;</span>	}
<span id="L5777" class="ln">  5777&nbsp;&nbsp;</span>
<span id="L5778" class="ln">  5778&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-5.1.2</span>
<span id="L5779" class="ln">  5779&nbsp;&nbsp;</span>	<span class="comment">// [...] Endpoints MUST NOT exceed the limit set by their peer. An</span>
<span id="L5780" class="ln">  5780&nbsp;&nbsp;</span>	<span class="comment">// endpoint that receives a HEADERS frame that causes their</span>
<span id="L5781" class="ln">  5781&nbsp;&nbsp;</span>	<span class="comment">// advertised concurrent stream limit to be exceeded MUST treat</span>
<span id="L5782" class="ln">  5782&nbsp;&nbsp;</span>	<span class="comment">// this as a stream error (Section 5.4.2) of type PROTOCOL_ERROR</span>
<span id="L5783" class="ln">  5783&nbsp;&nbsp;</span>	<span class="comment">// or REFUSED_STREAM.</span>
<span id="L5784" class="ln">  5784&nbsp;&nbsp;</span>	if sc.curClientStreams+1 &gt; sc.advMaxStreams {
<span id="L5785" class="ln">  5785&nbsp;&nbsp;</span>		if sc.unackedSettings == 0 {
<span id="L5786" class="ln">  5786&nbsp;&nbsp;</span>			<span class="comment">// They should know better.</span>
<span id="L5787" class="ln">  5787&nbsp;&nbsp;</span>			return sc.countError(&#34;over_max_streams&#34;, http2streamError(id, http2ErrCodeProtocol))
<span id="L5788" class="ln">  5788&nbsp;&nbsp;</span>		}
<span id="L5789" class="ln">  5789&nbsp;&nbsp;</span>		<span class="comment">// Assume it&#39;s a network race, where they just haven&#39;t</span>
<span id="L5790" class="ln">  5790&nbsp;&nbsp;</span>		<span class="comment">// received our last SETTINGS update. But actually</span>
<span id="L5791" class="ln">  5791&nbsp;&nbsp;</span>		<span class="comment">// this can&#39;t happen yet, because we don&#39;t yet provide</span>
<span id="L5792" class="ln">  5792&nbsp;&nbsp;</span>		<span class="comment">// a way for users to adjust server parameters at</span>
<span id="L5793" class="ln">  5793&nbsp;&nbsp;</span>		<span class="comment">// runtime.</span>
<span id="L5794" class="ln">  5794&nbsp;&nbsp;</span>		return sc.countError(&#34;over_max_streams_race&#34;, http2streamError(id, http2ErrCodeRefusedStream))
<span id="L5795" class="ln">  5795&nbsp;&nbsp;</span>	}
<span id="L5796" class="ln">  5796&nbsp;&nbsp;</span>
<span id="L5797" class="ln">  5797&nbsp;&nbsp;</span>	initialState := http2stateOpen
<span id="L5798" class="ln">  5798&nbsp;&nbsp;</span>	if f.StreamEnded() {
<span id="L5799" class="ln">  5799&nbsp;&nbsp;</span>		initialState = http2stateHalfClosedRemote
<span id="L5800" class="ln">  5800&nbsp;&nbsp;</span>	}
<span id="L5801" class="ln">  5801&nbsp;&nbsp;</span>	st := sc.newStream(id, 0, initialState)
<span id="L5802" class="ln">  5802&nbsp;&nbsp;</span>
<span id="L5803" class="ln">  5803&nbsp;&nbsp;</span>	if f.HasPriority() {
<span id="L5804" class="ln">  5804&nbsp;&nbsp;</span>		if err := sc.checkPriority(f.StreamID, f.Priority); err != nil {
<span id="L5805" class="ln">  5805&nbsp;&nbsp;</span>			return err
<span id="L5806" class="ln">  5806&nbsp;&nbsp;</span>		}
<span id="L5807" class="ln">  5807&nbsp;&nbsp;</span>		sc.writeSched.AdjustStream(st.id, f.Priority)
<span id="L5808" class="ln">  5808&nbsp;&nbsp;</span>	}
<span id="L5809" class="ln">  5809&nbsp;&nbsp;</span>
<span id="L5810" class="ln">  5810&nbsp;&nbsp;</span>	rw, req, err := sc.newWriterAndRequest(st, f)
<span id="L5811" class="ln">  5811&nbsp;&nbsp;</span>	if err != nil {
<span id="L5812" class="ln">  5812&nbsp;&nbsp;</span>		return err
<span id="L5813" class="ln">  5813&nbsp;&nbsp;</span>	}
<span id="L5814" class="ln">  5814&nbsp;&nbsp;</span>	st.reqTrailer = req.Trailer
<span id="L5815" class="ln">  5815&nbsp;&nbsp;</span>	if st.reqTrailer != nil {
<span id="L5816" class="ln">  5816&nbsp;&nbsp;</span>		st.trailer = make(Header)
<span id="L5817" class="ln">  5817&nbsp;&nbsp;</span>	}
<span id="L5818" class="ln">  5818&nbsp;&nbsp;</span>	st.body = req.Body.(*http2requestBody).pipe <span class="comment">// may be nil</span>
<span id="L5819" class="ln">  5819&nbsp;&nbsp;</span>	st.declBodyBytes = req.ContentLength
<span id="L5820" class="ln">  5820&nbsp;&nbsp;</span>
<span id="L5821" class="ln">  5821&nbsp;&nbsp;</span>	handler := sc.handler.ServeHTTP
<span id="L5822" class="ln">  5822&nbsp;&nbsp;</span>	if f.Truncated {
<span id="L5823" class="ln">  5823&nbsp;&nbsp;</span>		<span class="comment">// Their header list was too long. Send a 431 error.</span>
<span id="L5824" class="ln">  5824&nbsp;&nbsp;</span>		handler = http2handleHeaderListTooLong
<span id="L5825" class="ln">  5825&nbsp;&nbsp;</span>	} else if err := http2checkValidHTTP2RequestHeaders(req.Header); err != nil {
<span id="L5826" class="ln">  5826&nbsp;&nbsp;</span>		handler = http2new400Handler(err)
<span id="L5827" class="ln">  5827&nbsp;&nbsp;</span>	}
<span id="L5828" class="ln">  5828&nbsp;&nbsp;</span>
<span id="L5829" class="ln">  5829&nbsp;&nbsp;</span>	<span class="comment">// The net/http package sets the read deadline from the</span>
<span id="L5830" class="ln">  5830&nbsp;&nbsp;</span>	<span class="comment">// http.Server.ReadTimeout during the TLS handshake, but then</span>
<span id="L5831" class="ln">  5831&nbsp;&nbsp;</span>	<span class="comment">// passes the connection off to us with the deadline already</span>
<span id="L5832" class="ln">  5832&nbsp;&nbsp;</span>	<span class="comment">// set. Disarm it here after the request headers are read,</span>
<span id="L5833" class="ln">  5833&nbsp;&nbsp;</span>	<span class="comment">// similar to how the http1 server works. Here it&#39;s</span>
<span id="L5834" class="ln">  5834&nbsp;&nbsp;</span>	<span class="comment">// technically more like the http1 Server&#39;s ReadHeaderTimeout</span>
<span id="L5835" class="ln">  5835&nbsp;&nbsp;</span>	<span class="comment">// (in Go 1.8), though. That&#39;s a more sane option anyway.</span>
<span id="L5836" class="ln">  5836&nbsp;&nbsp;</span>	if sc.hs.ReadTimeout != 0 {
<span id="L5837" class="ln">  5837&nbsp;&nbsp;</span>		sc.conn.SetReadDeadline(time.Time{})
<span id="L5838" class="ln">  5838&nbsp;&nbsp;</span>		st.readDeadline = time.AfterFunc(sc.hs.ReadTimeout, st.onReadTimeout)
<span id="L5839" class="ln">  5839&nbsp;&nbsp;</span>	}
<span id="L5840" class="ln">  5840&nbsp;&nbsp;</span>
<span id="L5841" class="ln">  5841&nbsp;&nbsp;</span>	return sc.scheduleHandler(id, rw, req, handler)
<span id="L5842" class="ln">  5842&nbsp;&nbsp;</span>}
<span id="L5843" class="ln">  5843&nbsp;&nbsp;</span>
<span id="L5844" class="ln">  5844&nbsp;&nbsp;</span>func (sc *http2serverConn) upgradeRequest(req *Request) {
<span id="L5845" class="ln">  5845&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5846" class="ln">  5846&nbsp;&nbsp;</span>	id := uint32(1)
<span id="L5847" class="ln">  5847&nbsp;&nbsp;</span>	sc.maxClientStreamID = id
<span id="L5848" class="ln">  5848&nbsp;&nbsp;</span>	st := sc.newStream(id, 0, http2stateHalfClosedRemote)
<span id="L5849" class="ln">  5849&nbsp;&nbsp;</span>	st.reqTrailer = req.Trailer
<span id="L5850" class="ln">  5850&nbsp;&nbsp;</span>	if st.reqTrailer != nil {
<span id="L5851" class="ln">  5851&nbsp;&nbsp;</span>		st.trailer = make(Header)
<span id="L5852" class="ln">  5852&nbsp;&nbsp;</span>	}
<span id="L5853" class="ln">  5853&nbsp;&nbsp;</span>	rw := sc.newResponseWriter(st, req)
<span id="L5854" class="ln">  5854&nbsp;&nbsp;</span>
<span id="L5855" class="ln">  5855&nbsp;&nbsp;</span>	<span class="comment">// Disable any read deadline set by the net/http package</span>
<span id="L5856" class="ln">  5856&nbsp;&nbsp;</span>	<span class="comment">// prior to the upgrade.</span>
<span id="L5857" class="ln">  5857&nbsp;&nbsp;</span>	if sc.hs.ReadTimeout != 0 {
<span id="L5858" class="ln">  5858&nbsp;&nbsp;</span>		sc.conn.SetReadDeadline(time.Time{})
<span id="L5859" class="ln">  5859&nbsp;&nbsp;</span>	}
<span id="L5860" class="ln">  5860&nbsp;&nbsp;</span>
<span id="L5861" class="ln">  5861&nbsp;&nbsp;</span>	<span class="comment">// This is the first request on the connection,</span>
<span id="L5862" class="ln">  5862&nbsp;&nbsp;</span>	<span class="comment">// so start the handler directly rather than going</span>
<span id="L5863" class="ln">  5863&nbsp;&nbsp;</span>	<span class="comment">// through scheduleHandler.</span>
<span id="L5864" class="ln">  5864&nbsp;&nbsp;</span>	sc.curHandlers++
<span id="L5865" class="ln">  5865&nbsp;&nbsp;</span>	go sc.runHandler(rw, req, sc.handler.ServeHTTP)
<span id="L5866" class="ln">  5866&nbsp;&nbsp;</span>}
<span id="L5867" class="ln">  5867&nbsp;&nbsp;</span>
<span id="L5868" class="ln">  5868&nbsp;&nbsp;</span>func (st *http2stream) processTrailerHeaders(f *http2MetaHeadersFrame) error {
<span id="L5869" class="ln">  5869&nbsp;&nbsp;</span>	sc := st.sc
<span id="L5870" class="ln">  5870&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5871" class="ln">  5871&nbsp;&nbsp;</span>	if st.gotTrailerHeader {
<span id="L5872" class="ln">  5872&nbsp;&nbsp;</span>		return sc.countError(&#34;dup_trailers&#34;, http2ConnectionError(http2ErrCodeProtocol))
<span id="L5873" class="ln">  5873&nbsp;&nbsp;</span>	}
<span id="L5874" class="ln">  5874&nbsp;&nbsp;</span>	st.gotTrailerHeader = true
<span id="L5875" class="ln">  5875&nbsp;&nbsp;</span>	if !f.StreamEnded() {
<span id="L5876" class="ln">  5876&nbsp;&nbsp;</span>		return sc.countError(&#34;trailers_not_ended&#34;, http2streamError(st.id, http2ErrCodeProtocol))
<span id="L5877" class="ln">  5877&nbsp;&nbsp;</span>	}
<span id="L5878" class="ln">  5878&nbsp;&nbsp;</span>
<span id="L5879" class="ln">  5879&nbsp;&nbsp;</span>	if len(f.PseudoFields()) &gt; 0 {
<span id="L5880" class="ln">  5880&nbsp;&nbsp;</span>		return sc.countError(&#34;trailers_pseudo&#34;, http2streamError(st.id, http2ErrCodeProtocol))
<span id="L5881" class="ln">  5881&nbsp;&nbsp;</span>	}
<span id="L5882" class="ln">  5882&nbsp;&nbsp;</span>	if st.trailer != nil {
<span id="L5883" class="ln">  5883&nbsp;&nbsp;</span>		for _, hf := range f.RegularFields() {
<span id="L5884" class="ln">  5884&nbsp;&nbsp;</span>			key := sc.canonicalHeader(hf.Name)
<span id="L5885" class="ln">  5885&nbsp;&nbsp;</span>			if !httpguts.ValidTrailerHeader(key) {
<span id="L5886" class="ln">  5886&nbsp;&nbsp;</span>				<span class="comment">// TODO: send more details to the peer somehow. But http2 has</span>
<span id="L5887" class="ln">  5887&nbsp;&nbsp;</span>				<span class="comment">// no way to send debug data at a stream level. Discuss with</span>
<span id="L5888" class="ln">  5888&nbsp;&nbsp;</span>				<span class="comment">// HTTP folk.</span>
<span id="L5889" class="ln">  5889&nbsp;&nbsp;</span>				return sc.countError(&#34;trailers_bogus&#34;, http2streamError(st.id, http2ErrCodeProtocol))
<span id="L5890" class="ln">  5890&nbsp;&nbsp;</span>			}
<span id="L5891" class="ln">  5891&nbsp;&nbsp;</span>			st.trailer[key] = append(st.trailer[key], hf.Value)
<span id="L5892" class="ln">  5892&nbsp;&nbsp;</span>		}
<span id="L5893" class="ln">  5893&nbsp;&nbsp;</span>	}
<span id="L5894" class="ln">  5894&nbsp;&nbsp;</span>	st.endStream()
<span id="L5895" class="ln">  5895&nbsp;&nbsp;</span>	return nil
<span id="L5896" class="ln">  5896&nbsp;&nbsp;</span>}
<span id="L5897" class="ln">  5897&nbsp;&nbsp;</span>
<span id="L5898" class="ln">  5898&nbsp;&nbsp;</span>func (sc *http2serverConn) checkPriority(streamID uint32, p http2PriorityParam) error {
<span id="L5899" class="ln">  5899&nbsp;&nbsp;</span>	if streamID == p.StreamDep {
<span id="L5900" class="ln">  5900&nbsp;&nbsp;</span>		<span class="comment">// Section 5.3.1: &#34;A stream cannot depend on itself. An endpoint MUST treat</span>
<span id="L5901" class="ln">  5901&nbsp;&nbsp;</span>		<span class="comment">// this as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.&#34;</span>
<span id="L5902" class="ln">  5902&nbsp;&nbsp;</span>		<span class="comment">// Section 5.3.3 says that a stream can depend on one of its dependencies,</span>
<span id="L5903" class="ln">  5903&nbsp;&nbsp;</span>		<span class="comment">// so it&#39;s only self-dependencies that are forbidden.</span>
<span id="L5904" class="ln">  5904&nbsp;&nbsp;</span>		return sc.countError(&#34;priority&#34;, http2streamError(streamID, http2ErrCodeProtocol))
<span id="L5905" class="ln">  5905&nbsp;&nbsp;</span>	}
<span id="L5906" class="ln">  5906&nbsp;&nbsp;</span>	return nil
<span id="L5907" class="ln">  5907&nbsp;&nbsp;</span>}
<span id="L5908" class="ln">  5908&nbsp;&nbsp;</span>
<span id="L5909" class="ln">  5909&nbsp;&nbsp;</span>func (sc *http2serverConn) processPriority(f *http2PriorityFrame) error {
<span id="L5910" class="ln">  5910&nbsp;&nbsp;</span>	if err := sc.checkPriority(f.StreamID, f.http2PriorityParam); err != nil {
<span id="L5911" class="ln">  5911&nbsp;&nbsp;</span>		return err
<span id="L5912" class="ln">  5912&nbsp;&nbsp;</span>	}
<span id="L5913" class="ln">  5913&nbsp;&nbsp;</span>	sc.writeSched.AdjustStream(f.StreamID, f.http2PriorityParam)
<span id="L5914" class="ln">  5914&nbsp;&nbsp;</span>	return nil
<span id="L5915" class="ln">  5915&nbsp;&nbsp;</span>}
<span id="L5916" class="ln">  5916&nbsp;&nbsp;</span>
<span id="L5917" class="ln">  5917&nbsp;&nbsp;</span>func (sc *http2serverConn) newStream(id, pusherID uint32, state http2streamState) *http2stream {
<span id="L5918" class="ln">  5918&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5919" class="ln">  5919&nbsp;&nbsp;</span>	if id == 0 {
<span id="L5920" class="ln">  5920&nbsp;&nbsp;</span>		panic(&#34;internal error: cannot create stream with id 0&#34;)
<span id="L5921" class="ln">  5921&nbsp;&nbsp;</span>	}
<span id="L5922" class="ln">  5922&nbsp;&nbsp;</span>
<span id="L5923" class="ln">  5923&nbsp;&nbsp;</span>	ctx, cancelCtx := context.WithCancel(sc.baseCtx)
<span id="L5924" class="ln">  5924&nbsp;&nbsp;</span>	st := &amp;http2stream{
<span id="L5925" class="ln">  5925&nbsp;&nbsp;</span>		sc:        sc,
<span id="L5926" class="ln">  5926&nbsp;&nbsp;</span>		id:        id,
<span id="L5927" class="ln">  5927&nbsp;&nbsp;</span>		state:     state,
<span id="L5928" class="ln">  5928&nbsp;&nbsp;</span>		ctx:       ctx,
<span id="L5929" class="ln">  5929&nbsp;&nbsp;</span>		cancelCtx: cancelCtx,
<span id="L5930" class="ln">  5930&nbsp;&nbsp;</span>	}
<span id="L5931" class="ln">  5931&nbsp;&nbsp;</span>	st.cw.Init()
<span id="L5932" class="ln">  5932&nbsp;&nbsp;</span>	st.flow.conn = &amp;sc.flow <span class="comment">// link to conn-level counter</span>
<span id="L5933" class="ln">  5933&nbsp;&nbsp;</span>	st.flow.add(sc.initialStreamSendWindowSize)
<span id="L5934" class="ln">  5934&nbsp;&nbsp;</span>	st.inflow.init(sc.srv.initialStreamRecvWindowSize())
<span id="L5935" class="ln">  5935&nbsp;&nbsp;</span>	if sc.hs.WriteTimeout != 0 {
<span id="L5936" class="ln">  5936&nbsp;&nbsp;</span>		st.writeDeadline = time.AfterFunc(sc.hs.WriteTimeout, st.onWriteTimeout)
<span id="L5937" class="ln">  5937&nbsp;&nbsp;</span>	}
<span id="L5938" class="ln">  5938&nbsp;&nbsp;</span>
<span id="L5939" class="ln">  5939&nbsp;&nbsp;</span>	sc.streams[id] = st
<span id="L5940" class="ln">  5940&nbsp;&nbsp;</span>	sc.writeSched.OpenStream(st.id, http2OpenStreamOptions{PusherID: pusherID})
<span id="L5941" class="ln">  5941&nbsp;&nbsp;</span>	if st.isPushed() {
<span id="L5942" class="ln">  5942&nbsp;&nbsp;</span>		sc.curPushedStreams++
<span id="L5943" class="ln">  5943&nbsp;&nbsp;</span>	} else {
<span id="L5944" class="ln">  5944&nbsp;&nbsp;</span>		sc.curClientStreams++
<span id="L5945" class="ln">  5945&nbsp;&nbsp;</span>	}
<span id="L5946" class="ln">  5946&nbsp;&nbsp;</span>	if sc.curOpenStreams() == 1 {
<span id="L5947" class="ln">  5947&nbsp;&nbsp;</span>		sc.setConnState(StateActive)
<span id="L5948" class="ln">  5948&nbsp;&nbsp;</span>	}
<span id="L5949" class="ln">  5949&nbsp;&nbsp;</span>
<span id="L5950" class="ln">  5950&nbsp;&nbsp;</span>	return st
<span id="L5951" class="ln">  5951&nbsp;&nbsp;</span>}
<span id="L5952" class="ln">  5952&nbsp;&nbsp;</span>
<span id="L5953" class="ln">  5953&nbsp;&nbsp;</span>func (sc *http2serverConn) newWriterAndRequest(st *http2stream, f *http2MetaHeadersFrame) (*http2responseWriter, *Request, error) {
<span id="L5954" class="ln">  5954&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L5955" class="ln">  5955&nbsp;&nbsp;</span>
<span id="L5956" class="ln">  5956&nbsp;&nbsp;</span>	rp := http2requestParam{
<span id="L5957" class="ln">  5957&nbsp;&nbsp;</span>		method:    f.PseudoValue(&#34;method&#34;),
<span id="L5958" class="ln">  5958&nbsp;&nbsp;</span>		scheme:    f.PseudoValue(&#34;scheme&#34;),
<span id="L5959" class="ln">  5959&nbsp;&nbsp;</span>		authority: f.PseudoValue(&#34;authority&#34;),
<span id="L5960" class="ln">  5960&nbsp;&nbsp;</span>		path:      f.PseudoValue(&#34;path&#34;),
<span id="L5961" class="ln">  5961&nbsp;&nbsp;</span>	}
<span id="L5962" class="ln">  5962&nbsp;&nbsp;</span>
<span id="L5963" class="ln">  5963&nbsp;&nbsp;</span>	isConnect := rp.method == &#34;CONNECT&#34;
<span id="L5964" class="ln">  5964&nbsp;&nbsp;</span>	if isConnect {
<span id="L5965" class="ln">  5965&nbsp;&nbsp;</span>		if rp.path != &#34;&#34; || rp.scheme != &#34;&#34; || rp.authority == &#34;&#34; {
<span id="L5966" class="ln">  5966&nbsp;&nbsp;</span>			return nil, nil, sc.countError(&#34;bad_connect&#34;, http2streamError(f.StreamID, http2ErrCodeProtocol))
<span id="L5967" class="ln">  5967&nbsp;&nbsp;</span>		}
<span id="L5968" class="ln">  5968&nbsp;&nbsp;</span>	} else if rp.method == &#34;&#34; || rp.path == &#34;&#34; || (rp.scheme != &#34;https&#34; &amp;&amp; rp.scheme != &#34;http&#34;) {
<span id="L5969" class="ln">  5969&nbsp;&nbsp;</span>		<span class="comment">// See 8.1.2.6 Malformed Requests and Responses:</span>
<span id="L5970" class="ln">  5970&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5971" class="ln">  5971&nbsp;&nbsp;</span>		<span class="comment">// Malformed requests or responses that are detected</span>
<span id="L5972" class="ln">  5972&nbsp;&nbsp;</span>		<span class="comment">// MUST be treated as a stream error (Section 5.4.2)</span>
<span id="L5973" class="ln">  5973&nbsp;&nbsp;</span>		<span class="comment">// of type PROTOCOL_ERROR.&#34;</span>
<span id="L5974" class="ln">  5974&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L5975" class="ln">  5975&nbsp;&nbsp;</span>		<span class="comment">// 8.1.2.3 Request Pseudo-Header Fields</span>
<span id="L5976" class="ln">  5976&nbsp;&nbsp;</span>		<span class="comment">// &#34;All HTTP/2 requests MUST include exactly one valid</span>
<span id="L5977" class="ln">  5977&nbsp;&nbsp;</span>		<span class="comment">// value for the :method, :scheme, and :path</span>
<span id="L5978" class="ln">  5978&nbsp;&nbsp;</span>		<span class="comment">// pseudo-header fields&#34;</span>
<span id="L5979" class="ln">  5979&nbsp;&nbsp;</span>		return nil, nil, sc.countError(&#34;bad_path_method&#34;, http2streamError(f.StreamID, http2ErrCodeProtocol))
<span id="L5980" class="ln">  5980&nbsp;&nbsp;</span>	}
<span id="L5981" class="ln">  5981&nbsp;&nbsp;</span>
<span id="L5982" class="ln">  5982&nbsp;&nbsp;</span>	rp.header = make(Header)
<span id="L5983" class="ln">  5983&nbsp;&nbsp;</span>	for _, hf := range f.RegularFields() {
<span id="L5984" class="ln">  5984&nbsp;&nbsp;</span>		rp.header.Add(sc.canonicalHeader(hf.Name), hf.Value)
<span id="L5985" class="ln">  5985&nbsp;&nbsp;</span>	}
<span id="L5986" class="ln">  5986&nbsp;&nbsp;</span>	if rp.authority == &#34;&#34; {
<span id="L5987" class="ln">  5987&nbsp;&nbsp;</span>		rp.authority = rp.header.Get(&#34;Host&#34;)
<span id="L5988" class="ln">  5988&nbsp;&nbsp;</span>	}
<span id="L5989" class="ln">  5989&nbsp;&nbsp;</span>
<span id="L5990" class="ln">  5990&nbsp;&nbsp;</span>	rw, req, err := sc.newWriterAndRequestNoBody(st, rp)
<span id="L5991" class="ln">  5991&nbsp;&nbsp;</span>	if err != nil {
<span id="L5992" class="ln">  5992&nbsp;&nbsp;</span>		return nil, nil, err
<span id="L5993" class="ln">  5993&nbsp;&nbsp;</span>	}
<span id="L5994" class="ln">  5994&nbsp;&nbsp;</span>	bodyOpen := !f.StreamEnded()
<span id="L5995" class="ln">  5995&nbsp;&nbsp;</span>	if bodyOpen {
<span id="L5996" class="ln">  5996&nbsp;&nbsp;</span>		if vv, ok := rp.header[&#34;Content-Length&#34;]; ok {
<span id="L5997" class="ln">  5997&nbsp;&nbsp;</span>			if cl, err := strconv.ParseUint(vv[0], 10, 63); err == nil {
<span id="L5998" class="ln">  5998&nbsp;&nbsp;</span>				req.ContentLength = int64(cl)
<span id="L5999" class="ln">  5999&nbsp;&nbsp;</span>			} else {
<span id="L6000" class="ln">  6000&nbsp;&nbsp;</span>				req.ContentLength = 0
<span id="L6001" class="ln">  6001&nbsp;&nbsp;</span>			}
<span id="L6002" class="ln">  6002&nbsp;&nbsp;</span>		} else {
<span id="L6003" class="ln">  6003&nbsp;&nbsp;</span>			req.ContentLength = -1
<span id="L6004" class="ln">  6004&nbsp;&nbsp;</span>		}
<span id="L6005" class="ln">  6005&nbsp;&nbsp;</span>		req.Body.(*http2requestBody).pipe = &amp;http2pipe{
<span id="L6006" class="ln">  6006&nbsp;&nbsp;</span>			b: &amp;http2dataBuffer{expected: req.ContentLength},
<span id="L6007" class="ln">  6007&nbsp;&nbsp;</span>		}
<span id="L6008" class="ln">  6008&nbsp;&nbsp;</span>	}
<span id="L6009" class="ln">  6009&nbsp;&nbsp;</span>	return rw, req, nil
<span id="L6010" class="ln">  6010&nbsp;&nbsp;</span>}
<span id="L6011" class="ln">  6011&nbsp;&nbsp;</span>
<span id="L6012" class="ln">  6012&nbsp;&nbsp;</span>type http2requestParam struct {
<span id="L6013" class="ln">  6013&nbsp;&nbsp;</span>	method                  string
<span id="L6014" class="ln">  6014&nbsp;&nbsp;</span>	scheme, authority, path string
<span id="L6015" class="ln">  6015&nbsp;&nbsp;</span>	header                  Header
<span id="L6016" class="ln">  6016&nbsp;&nbsp;</span>}
<span id="L6017" class="ln">  6017&nbsp;&nbsp;</span>
<span id="L6018" class="ln">  6018&nbsp;&nbsp;</span>func (sc *http2serverConn) newWriterAndRequestNoBody(st *http2stream, rp http2requestParam) (*http2responseWriter, *Request, error) {
<span id="L6019" class="ln">  6019&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6020" class="ln">  6020&nbsp;&nbsp;</span>
<span id="L6021" class="ln">  6021&nbsp;&nbsp;</span>	var tlsState *tls.ConnectionState <span class="comment">// nil if not scheme https</span>
<span id="L6022" class="ln">  6022&nbsp;&nbsp;</span>	if rp.scheme == &#34;https&#34; {
<span id="L6023" class="ln">  6023&nbsp;&nbsp;</span>		tlsState = sc.tlsState
<span id="L6024" class="ln">  6024&nbsp;&nbsp;</span>	}
<span id="L6025" class="ln">  6025&nbsp;&nbsp;</span>
<span id="L6026" class="ln">  6026&nbsp;&nbsp;</span>	needsContinue := httpguts.HeaderValuesContainsToken(rp.header[&#34;Expect&#34;], &#34;100-continue&#34;)
<span id="L6027" class="ln">  6027&nbsp;&nbsp;</span>	if needsContinue {
<span id="L6028" class="ln">  6028&nbsp;&nbsp;</span>		rp.header.Del(&#34;Expect&#34;)
<span id="L6029" class="ln">  6029&nbsp;&nbsp;</span>	}
<span id="L6030" class="ln">  6030&nbsp;&nbsp;</span>	<span class="comment">// Merge Cookie headers into one &#34;; &#34;-delimited value.</span>
<span id="L6031" class="ln">  6031&nbsp;&nbsp;</span>	if cookies := rp.header[&#34;Cookie&#34;]; len(cookies) &gt; 1 {
<span id="L6032" class="ln">  6032&nbsp;&nbsp;</span>		rp.header.Set(&#34;Cookie&#34;, strings.Join(cookies, &#34;; &#34;))
<span id="L6033" class="ln">  6033&nbsp;&nbsp;</span>	}
<span id="L6034" class="ln">  6034&nbsp;&nbsp;</span>
<span id="L6035" class="ln">  6035&nbsp;&nbsp;</span>	<span class="comment">// Setup Trailers</span>
<span id="L6036" class="ln">  6036&nbsp;&nbsp;</span>	var trailer Header
<span id="L6037" class="ln">  6037&nbsp;&nbsp;</span>	for _, v := range rp.header[&#34;Trailer&#34;] {
<span id="L6038" class="ln">  6038&nbsp;&nbsp;</span>		for _, key := range strings.Split(v, &#34;,&#34;) {
<span id="L6039" class="ln">  6039&nbsp;&nbsp;</span>			key = CanonicalHeaderKey(textproto.TrimString(key))
<span id="L6040" class="ln">  6040&nbsp;&nbsp;</span>			switch key {
<span id="L6041" class="ln">  6041&nbsp;&nbsp;</span>			case &#34;Transfer-Encoding&#34;, &#34;Trailer&#34;, &#34;Content-Length&#34;:
<span id="L6042" class="ln">  6042&nbsp;&nbsp;</span>				<span class="comment">// Bogus. (copy of http1 rules)</span>
<span id="L6043" class="ln">  6043&nbsp;&nbsp;</span>				<span class="comment">// Ignore.</span>
<span id="L6044" class="ln">  6044&nbsp;&nbsp;</span>			default:
<span id="L6045" class="ln">  6045&nbsp;&nbsp;</span>				if trailer == nil {
<span id="L6046" class="ln">  6046&nbsp;&nbsp;</span>					trailer = make(Header)
<span id="L6047" class="ln">  6047&nbsp;&nbsp;</span>				}
<span id="L6048" class="ln">  6048&nbsp;&nbsp;</span>				trailer[key] = nil
<span id="L6049" class="ln">  6049&nbsp;&nbsp;</span>			}
<span id="L6050" class="ln">  6050&nbsp;&nbsp;</span>		}
<span id="L6051" class="ln">  6051&nbsp;&nbsp;</span>	}
<span id="L6052" class="ln">  6052&nbsp;&nbsp;</span>	delete(rp.header, &#34;Trailer&#34;)
<span id="L6053" class="ln">  6053&nbsp;&nbsp;</span>
<span id="L6054" class="ln">  6054&nbsp;&nbsp;</span>	var url_ *url.URL
<span id="L6055" class="ln">  6055&nbsp;&nbsp;</span>	var requestURI string
<span id="L6056" class="ln">  6056&nbsp;&nbsp;</span>	if rp.method == &#34;CONNECT&#34; {
<span id="L6057" class="ln">  6057&nbsp;&nbsp;</span>		url_ = &amp;url.URL{Host: rp.authority}
<span id="L6058" class="ln">  6058&nbsp;&nbsp;</span>		requestURI = rp.authority <span class="comment">// mimic HTTP/1 server behavior</span>
<span id="L6059" class="ln">  6059&nbsp;&nbsp;</span>	} else {
<span id="L6060" class="ln">  6060&nbsp;&nbsp;</span>		var err error
<span id="L6061" class="ln">  6061&nbsp;&nbsp;</span>		url_, err = url.ParseRequestURI(rp.path)
<span id="L6062" class="ln">  6062&nbsp;&nbsp;</span>		if err != nil {
<span id="L6063" class="ln">  6063&nbsp;&nbsp;</span>			return nil, nil, sc.countError(&#34;bad_path&#34;, http2streamError(st.id, http2ErrCodeProtocol))
<span id="L6064" class="ln">  6064&nbsp;&nbsp;</span>		}
<span id="L6065" class="ln">  6065&nbsp;&nbsp;</span>		requestURI = rp.path
<span id="L6066" class="ln">  6066&nbsp;&nbsp;</span>	}
<span id="L6067" class="ln">  6067&nbsp;&nbsp;</span>
<span id="L6068" class="ln">  6068&nbsp;&nbsp;</span>	body := &amp;http2requestBody{
<span id="L6069" class="ln">  6069&nbsp;&nbsp;</span>		conn:          sc,
<span id="L6070" class="ln">  6070&nbsp;&nbsp;</span>		stream:        st,
<span id="L6071" class="ln">  6071&nbsp;&nbsp;</span>		needsContinue: needsContinue,
<span id="L6072" class="ln">  6072&nbsp;&nbsp;</span>	}
<span id="L6073" class="ln">  6073&nbsp;&nbsp;</span>	req := &amp;Request{
<span id="L6074" class="ln">  6074&nbsp;&nbsp;</span>		Method:     rp.method,
<span id="L6075" class="ln">  6075&nbsp;&nbsp;</span>		URL:        url_,
<span id="L6076" class="ln">  6076&nbsp;&nbsp;</span>		RemoteAddr: sc.remoteAddrStr,
<span id="L6077" class="ln">  6077&nbsp;&nbsp;</span>		Header:     rp.header,
<span id="L6078" class="ln">  6078&nbsp;&nbsp;</span>		RequestURI: requestURI,
<span id="L6079" class="ln">  6079&nbsp;&nbsp;</span>		Proto:      &#34;HTTP/2.0&#34;,
<span id="L6080" class="ln">  6080&nbsp;&nbsp;</span>		ProtoMajor: 2,
<span id="L6081" class="ln">  6081&nbsp;&nbsp;</span>		ProtoMinor: 0,
<span id="L6082" class="ln">  6082&nbsp;&nbsp;</span>		TLS:        tlsState,
<span id="L6083" class="ln">  6083&nbsp;&nbsp;</span>		Host:       rp.authority,
<span id="L6084" class="ln">  6084&nbsp;&nbsp;</span>		Body:       body,
<span id="L6085" class="ln">  6085&nbsp;&nbsp;</span>		Trailer:    trailer,
<span id="L6086" class="ln">  6086&nbsp;&nbsp;</span>	}
<span id="L6087" class="ln">  6087&nbsp;&nbsp;</span>	req = req.WithContext(st.ctx)
<span id="L6088" class="ln">  6088&nbsp;&nbsp;</span>
<span id="L6089" class="ln">  6089&nbsp;&nbsp;</span>	rw := sc.newResponseWriter(st, req)
<span id="L6090" class="ln">  6090&nbsp;&nbsp;</span>	return rw, req, nil
<span id="L6091" class="ln">  6091&nbsp;&nbsp;</span>}
<span id="L6092" class="ln">  6092&nbsp;&nbsp;</span>
<span id="L6093" class="ln">  6093&nbsp;&nbsp;</span>func (sc *http2serverConn) newResponseWriter(st *http2stream, req *Request) *http2responseWriter {
<span id="L6094" class="ln">  6094&nbsp;&nbsp;</span>	rws := http2responseWriterStatePool.Get().(*http2responseWriterState)
<span id="L6095" class="ln">  6095&nbsp;&nbsp;</span>	bwSave := rws.bw
<span id="L6096" class="ln">  6096&nbsp;&nbsp;</span>	*rws = http2responseWriterState{} <span class="comment">// zero all the fields</span>
<span id="L6097" class="ln">  6097&nbsp;&nbsp;</span>	rws.conn = sc
<span id="L6098" class="ln">  6098&nbsp;&nbsp;</span>	rws.bw = bwSave
<span id="L6099" class="ln">  6099&nbsp;&nbsp;</span>	rws.bw.Reset(http2chunkWriter{rws})
<span id="L6100" class="ln">  6100&nbsp;&nbsp;</span>	rws.stream = st
<span id="L6101" class="ln">  6101&nbsp;&nbsp;</span>	rws.req = req
<span id="L6102" class="ln">  6102&nbsp;&nbsp;</span>	return &amp;http2responseWriter{rws: rws}
<span id="L6103" class="ln">  6103&nbsp;&nbsp;</span>}
<span id="L6104" class="ln">  6104&nbsp;&nbsp;</span>
<span id="L6105" class="ln">  6105&nbsp;&nbsp;</span>type http2unstartedHandler struct {
<span id="L6106" class="ln">  6106&nbsp;&nbsp;</span>	streamID uint32
<span id="L6107" class="ln">  6107&nbsp;&nbsp;</span>	rw       *http2responseWriter
<span id="L6108" class="ln">  6108&nbsp;&nbsp;</span>	req      *Request
<span id="L6109" class="ln">  6109&nbsp;&nbsp;</span>	handler  func(ResponseWriter, *Request)
<span id="L6110" class="ln">  6110&nbsp;&nbsp;</span>}
<span id="L6111" class="ln">  6111&nbsp;&nbsp;</span>
<span id="L6112" class="ln">  6112&nbsp;&nbsp;</span><span class="comment">// scheduleHandler starts a handler goroutine,</span>
<span id="L6113" class="ln">  6113&nbsp;&nbsp;</span><span class="comment">// or schedules one to start as soon as an existing handler finishes.</span>
<span id="L6114" class="ln">  6114&nbsp;&nbsp;</span>func (sc *http2serverConn) scheduleHandler(streamID uint32, rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request)) error {
<span id="L6115" class="ln">  6115&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6116" class="ln">  6116&nbsp;&nbsp;</span>	maxHandlers := sc.advMaxStreams
<span id="L6117" class="ln">  6117&nbsp;&nbsp;</span>	if sc.curHandlers &lt; maxHandlers {
<span id="L6118" class="ln">  6118&nbsp;&nbsp;</span>		sc.curHandlers++
<span id="L6119" class="ln">  6119&nbsp;&nbsp;</span>		go sc.runHandler(rw, req, handler)
<span id="L6120" class="ln">  6120&nbsp;&nbsp;</span>		return nil
<span id="L6121" class="ln">  6121&nbsp;&nbsp;</span>	}
<span id="L6122" class="ln">  6122&nbsp;&nbsp;</span>	if len(sc.unstartedHandlers) &gt; int(4*sc.advMaxStreams) {
<span id="L6123" class="ln">  6123&nbsp;&nbsp;</span>		return sc.countError(&#34;too_many_early_resets&#34;, http2ConnectionError(http2ErrCodeEnhanceYourCalm))
<span id="L6124" class="ln">  6124&nbsp;&nbsp;</span>	}
<span id="L6125" class="ln">  6125&nbsp;&nbsp;</span>	sc.unstartedHandlers = append(sc.unstartedHandlers, http2unstartedHandler{
<span id="L6126" class="ln">  6126&nbsp;&nbsp;</span>		streamID: streamID,
<span id="L6127" class="ln">  6127&nbsp;&nbsp;</span>		rw:       rw,
<span id="L6128" class="ln">  6128&nbsp;&nbsp;</span>		req:      req,
<span id="L6129" class="ln">  6129&nbsp;&nbsp;</span>		handler:  handler,
<span id="L6130" class="ln">  6130&nbsp;&nbsp;</span>	})
<span id="L6131" class="ln">  6131&nbsp;&nbsp;</span>	return nil
<span id="L6132" class="ln">  6132&nbsp;&nbsp;</span>}
<span id="L6133" class="ln">  6133&nbsp;&nbsp;</span>
<span id="L6134" class="ln">  6134&nbsp;&nbsp;</span>func (sc *http2serverConn) handlerDone() {
<span id="L6135" class="ln">  6135&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6136" class="ln">  6136&nbsp;&nbsp;</span>	sc.curHandlers--
<span id="L6137" class="ln">  6137&nbsp;&nbsp;</span>	i := 0
<span id="L6138" class="ln">  6138&nbsp;&nbsp;</span>	maxHandlers := sc.advMaxStreams
<span id="L6139" class="ln">  6139&nbsp;&nbsp;</span>	for ; i &lt; len(sc.unstartedHandlers); i++ {
<span id="L6140" class="ln">  6140&nbsp;&nbsp;</span>		u := sc.unstartedHandlers[i]
<span id="L6141" class="ln">  6141&nbsp;&nbsp;</span>		if sc.streams[u.streamID] == nil {
<span id="L6142" class="ln">  6142&nbsp;&nbsp;</span>			<span class="comment">// This stream was reset before its goroutine had a chance to start.</span>
<span id="L6143" class="ln">  6143&nbsp;&nbsp;</span>			continue
<span id="L6144" class="ln">  6144&nbsp;&nbsp;</span>		}
<span id="L6145" class="ln">  6145&nbsp;&nbsp;</span>		if sc.curHandlers &gt;= maxHandlers {
<span id="L6146" class="ln">  6146&nbsp;&nbsp;</span>			break
<span id="L6147" class="ln">  6147&nbsp;&nbsp;</span>		}
<span id="L6148" class="ln">  6148&nbsp;&nbsp;</span>		sc.curHandlers++
<span id="L6149" class="ln">  6149&nbsp;&nbsp;</span>		go sc.runHandler(u.rw, u.req, u.handler)
<span id="L6150" class="ln">  6150&nbsp;&nbsp;</span>		sc.unstartedHandlers[i] = http2unstartedHandler{} <span class="comment">// don&#39;t retain references</span>
<span id="L6151" class="ln">  6151&nbsp;&nbsp;</span>	}
<span id="L6152" class="ln">  6152&nbsp;&nbsp;</span>	sc.unstartedHandlers = sc.unstartedHandlers[i:]
<span id="L6153" class="ln">  6153&nbsp;&nbsp;</span>	if len(sc.unstartedHandlers) == 0 {
<span id="L6154" class="ln">  6154&nbsp;&nbsp;</span>		sc.unstartedHandlers = nil
<span id="L6155" class="ln">  6155&nbsp;&nbsp;</span>	}
<span id="L6156" class="ln">  6156&nbsp;&nbsp;</span>}
<span id="L6157" class="ln">  6157&nbsp;&nbsp;</span>
<span id="L6158" class="ln">  6158&nbsp;&nbsp;</span><span class="comment">// Run on its own goroutine.</span>
<span id="L6159" class="ln">  6159&nbsp;&nbsp;</span>func (sc *http2serverConn) runHandler(rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request)) {
<span id="L6160" class="ln">  6160&nbsp;&nbsp;</span>	defer sc.sendServeMsg(http2handlerDoneMsg)
<span id="L6161" class="ln">  6161&nbsp;&nbsp;</span>	didPanic := true
<span id="L6162" class="ln">  6162&nbsp;&nbsp;</span>	defer func() {
<span id="L6163" class="ln">  6163&nbsp;&nbsp;</span>		rw.rws.stream.cancelCtx()
<span id="L6164" class="ln">  6164&nbsp;&nbsp;</span>		if req.MultipartForm != nil {
<span id="L6165" class="ln">  6165&nbsp;&nbsp;</span>			req.MultipartForm.RemoveAll()
<span id="L6166" class="ln">  6166&nbsp;&nbsp;</span>		}
<span id="L6167" class="ln">  6167&nbsp;&nbsp;</span>		if didPanic {
<span id="L6168" class="ln">  6168&nbsp;&nbsp;</span>			e := recover()
<span id="L6169" class="ln">  6169&nbsp;&nbsp;</span>			sc.writeFrameFromHandler(http2FrameWriteRequest{
<span id="L6170" class="ln">  6170&nbsp;&nbsp;</span>				write:  http2handlerPanicRST{rw.rws.stream.id},
<span id="L6171" class="ln">  6171&nbsp;&nbsp;</span>				stream: rw.rws.stream,
<span id="L6172" class="ln">  6172&nbsp;&nbsp;</span>			})
<span id="L6173" class="ln">  6173&nbsp;&nbsp;</span>			<span class="comment">// Same as net/http:</span>
<span id="L6174" class="ln">  6174&nbsp;&nbsp;</span>			if e != nil &amp;&amp; e != ErrAbortHandler {
<span id="L6175" class="ln">  6175&nbsp;&nbsp;</span>				const size = 64 &lt;&lt; 10
<span id="L6176" class="ln">  6176&nbsp;&nbsp;</span>				buf := make([]byte, size)
<span id="L6177" class="ln">  6177&nbsp;&nbsp;</span>				buf = buf[:runtime.Stack(buf, false)]
<span id="L6178" class="ln">  6178&nbsp;&nbsp;</span>				sc.logf(&#34;http2: panic serving %v: %v\n%s&#34;, sc.conn.RemoteAddr(), e, buf)
<span id="L6179" class="ln">  6179&nbsp;&nbsp;</span>			}
<span id="L6180" class="ln">  6180&nbsp;&nbsp;</span>			return
<span id="L6181" class="ln">  6181&nbsp;&nbsp;</span>		}
<span id="L6182" class="ln">  6182&nbsp;&nbsp;</span>		rw.handlerDone()
<span id="L6183" class="ln">  6183&nbsp;&nbsp;</span>	}()
<span id="L6184" class="ln">  6184&nbsp;&nbsp;</span>	handler(rw, req)
<span id="L6185" class="ln">  6185&nbsp;&nbsp;</span>	didPanic = false
<span id="L6186" class="ln">  6186&nbsp;&nbsp;</span>}
<span id="L6187" class="ln">  6187&nbsp;&nbsp;</span>
<span id="L6188" class="ln">  6188&nbsp;&nbsp;</span>func http2handleHeaderListTooLong(w ResponseWriter, r *Request) {
<span id="L6189" class="ln">  6189&nbsp;&nbsp;</span>	<span class="comment">// 10.5.1 Limits on Header Block Size:</span>
<span id="L6190" class="ln">  6190&nbsp;&nbsp;</span>	<span class="comment">// .. &#34;A server that receives a larger header block than it is</span>
<span id="L6191" class="ln">  6191&nbsp;&nbsp;</span>	<span class="comment">// willing to handle can send an HTTP 431 (Request Header Fields Too</span>
<span id="L6192" class="ln">  6192&nbsp;&nbsp;</span>	<span class="comment">// Large) status code&#34;</span>
<span id="L6193" class="ln">  6193&nbsp;&nbsp;</span>	const statusRequestHeaderFieldsTooLarge = 431 <span class="comment">// only in Go 1.6+</span>
<span id="L6194" class="ln">  6194&nbsp;&nbsp;</span>	w.WriteHeader(statusRequestHeaderFieldsTooLarge)
<span id="L6195" class="ln">  6195&nbsp;&nbsp;</span>	io.WriteString(w, &#34;&lt;h1&gt;HTTP Error 431&lt;/h1&gt;&lt;p&gt;Request Header Field(s) Too Large&lt;/p&gt;&#34;)
<span id="L6196" class="ln">  6196&nbsp;&nbsp;</span>}
<span id="L6197" class="ln">  6197&nbsp;&nbsp;</span>
<span id="L6198" class="ln">  6198&nbsp;&nbsp;</span><span class="comment">// called from handler goroutines.</span>
<span id="L6199" class="ln">  6199&nbsp;&nbsp;</span><span class="comment">// h may be nil.</span>
<span id="L6200" class="ln">  6200&nbsp;&nbsp;</span>func (sc *http2serverConn) writeHeaders(st *http2stream, headerData *http2writeResHeaders) error {
<span id="L6201" class="ln">  6201&nbsp;&nbsp;</span>	sc.serveG.checkNotOn() <span class="comment">// NOT on</span>
<span id="L6202" class="ln">  6202&nbsp;&nbsp;</span>	var errc chan error
<span id="L6203" class="ln">  6203&nbsp;&nbsp;</span>	if headerData.h != nil {
<span id="L6204" class="ln">  6204&nbsp;&nbsp;</span>		<span class="comment">// If there&#39;s a header map (which we don&#39;t own), so we have to block on</span>
<span id="L6205" class="ln">  6205&nbsp;&nbsp;</span>		<span class="comment">// waiting for this frame to be written, so an http.Flush mid-handler</span>
<span id="L6206" class="ln">  6206&nbsp;&nbsp;</span>		<span class="comment">// writes out the correct value of keys, before a handler later potentially</span>
<span id="L6207" class="ln">  6207&nbsp;&nbsp;</span>		<span class="comment">// mutates it.</span>
<span id="L6208" class="ln">  6208&nbsp;&nbsp;</span>		errc = http2errChanPool.Get().(chan error)
<span id="L6209" class="ln">  6209&nbsp;&nbsp;</span>	}
<span id="L6210" class="ln">  6210&nbsp;&nbsp;</span>	if err := sc.writeFrameFromHandler(http2FrameWriteRequest{
<span id="L6211" class="ln">  6211&nbsp;&nbsp;</span>		write:  headerData,
<span id="L6212" class="ln">  6212&nbsp;&nbsp;</span>		stream: st,
<span id="L6213" class="ln">  6213&nbsp;&nbsp;</span>		done:   errc,
<span id="L6214" class="ln">  6214&nbsp;&nbsp;</span>	}); err != nil {
<span id="L6215" class="ln">  6215&nbsp;&nbsp;</span>		return err
<span id="L6216" class="ln">  6216&nbsp;&nbsp;</span>	}
<span id="L6217" class="ln">  6217&nbsp;&nbsp;</span>	if errc != nil {
<span id="L6218" class="ln">  6218&nbsp;&nbsp;</span>		select {
<span id="L6219" class="ln">  6219&nbsp;&nbsp;</span>		case err := &lt;-errc:
<span id="L6220" class="ln">  6220&nbsp;&nbsp;</span>			http2errChanPool.Put(errc)
<span id="L6221" class="ln">  6221&nbsp;&nbsp;</span>			return err
<span id="L6222" class="ln">  6222&nbsp;&nbsp;</span>		case &lt;-sc.doneServing:
<span id="L6223" class="ln">  6223&nbsp;&nbsp;</span>			return http2errClientDisconnected
<span id="L6224" class="ln">  6224&nbsp;&nbsp;</span>		case &lt;-st.cw:
<span id="L6225" class="ln">  6225&nbsp;&nbsp;</span>			return http2errStreamClosed
<span id="L6226" class="ln">  6226&nbsp;&nbsp;</span>		}
<span id="L6227" class="ln">  6227&nbsp;&nbsp;</span>	}
<span id="L6228" class="ln">  6228&nbsp;&nbsp;</span>	return nil
<span id="L6229" class="ln">  6229&nbsp;&nbsp;</span>}
<span id="L6230" class="ln">  6230&nbsp;&nbsp;</span>
<span id="L6231" class="ln">  6231&nbsp;&nbsp;</span><span class="comment">// called from handler goroutines.</span>
<span id="L6232" class="ln">  6232&nbsp;&nbsp;</span>func (sc *http2serverConn) write100ContinueHeaders(st *http2stream) {
<span id="L6233" class="ln">  6233&nbsp;&nbsp;</span>	sc.writeFrameFromHandler(http2FrameWriteRequest{
<span id="L6234" class="ln">  6234&nbsp;&nbsp;</span>		write:  http2write100ContinueHeadersFrame{st.id},
<span id="L6235" class="ln">  6235&nbsp;&nbsp;</span>		stream: st,
<span id="L6236" class="ln">  6236&nbsp;&nbsp;</span>	})
<span id="L6237" class="ln">  6237&nbsp;&nbsp;</span>}
<span id="L6238" class="ln">  6238&nbsp;&nbsp;</span>
<span id="L6239" class="ln">  6239&nbsp;&nbsp;</span><span class="comment">// A bodyReadMsg tells the server loop that the http.Handler read n</span>
<span id="L6240" class="ln">  6240&nbsp;&nbsp;</span><span class="comment">// bytes of the DATA from the client on the given stream.</span>
<span id="L6241" class="ln">  6241&nbsp;&nbsp;</span>type http2bodyReadMsg struct {
<span id="L6242" class="ln">  6242&nbsp;&nbsp;</span>	st *http2stream
<span id="L6243" class="ln">  6243&nbsp;&nbsp;</span>	n  int
<span id="L6244" class="ln">  6244&nbsp;&nbsp;</span>}
<span id="L6245" class="ln">  6245&nbsp;&nbsp;</span>
<span id="L6246" class="ln">  6246&nbsp;&nbsp;</span><span class="comment">// called from handler goroutines.</span>
<span id="L6247" class="ln">  6247&nbsp;&nbsp;</span><span class="comment">// Notes that the handler for the given stream ID read n bytes of its body</span>
<span id="L6248" class="ln">  6248&nbsp;&nbsp;</span><span class="comment">// and schedules flow control tokens to be sent.</span>
<span id="L6249" class="ln">  6249&nbsp;&nbsp;</span>func (sc *http2serverConn) noteBodyReadFromHandler(st *http2stream, n int, err error) {
<span id="L6250" class="ln">  6250&nbsp;&nbsp;</span>	sc.serveG.checkNotOn() <span class="comment">// NOT on</span>
<span id="L6251" class="ln">  6251&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L6252" class="ln">  6252&nbsp;&nbsp;</span>		select {
<span id="L6253" class="ln">  6253&nbsp;&nbsp;</span>		case sc.bodyReadCh &lt;- http2bodyReadMsg{st, n}:
<span id="L6254" class="ln">  6254&nbsp;&nbsp;</span>		case &lt;-sc.doneServing:
<span id="L6255" class="ln">  6255&nbsp;&nbsp;</span>		}
<span id="L6256" class="ln">  6256&nbsp;&nbsp;</span>	}
<span id="L6257" class="ln">  6257&nbsp;&nbsp;</span>}
<span id="L6258" class="ln">  6258&nbsp;&nbsp;</span>
<span id="L6259" class="ln">  6259&nbsp;&nbsp;</span>func (sc *http2serverConn) noteBodyRead(st *http2stream, n int) {
<span id="L6260" class="ln">  6260&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6261" class="ln">  6261&nbsp;&nbsp;</span>	sc.sendWindowUpdate(nil, n) <span class="comment">// conn-level</span>
<span id="L6262" class="ln">  6262&nbsp;&nbsp;</span>	if st.state != http2stateHalfClosedRemote &amp;&amp; st.state != http2stateClosed {
<span id="L6263" class="ln">  6263&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t send this WINDOW_UPDATE if the stream is closed</span>
<span id="L6264" class="ln">  6264&nbsp;&nbsp;</span>		<span class="comment">// remotely.</span>
<span id="L6265" class="ln">  6265&nbsp;&nbsp;</span>		sc.sendWindowUpdate(st, n)
<span id="L6266" class="ln">  6266&nbsp;&nbsp;</span>	}
<span id="L6267" class="ln">  6267&nbsp;&nbsp;</span>}
<span id="L6268" class="ln">  6268&nbsp;&nbsp;</span>
<span id="L6269" class="ln">  6269&nbsp;&nbsp;</span><span class="comment">// st may be nil for conn-level</span>
<span id="L6270" class="ln">  6270&nbsp;&nbsp;</span>func (sc *http2serverConn) sendWindowUpdate32(st *http2stream, n int32) {
<span id="L6271" class="ln">  6271&nbsp;&nbsp;</span>	sc.sendWindowUpdate(st, int(n))
<span id="L6272" class="ln">  6272&nbsp;&nbsp;</span>}
<span id="L6273" class="ln">  6273&nbsp;&nbsp;</span>
<span id="L6274" class="ln">  6274&nbsp;&nbsp;</span><span class="comment">// st may be nil for conn-level</span>
<span id="L6275" class="ln">  6275&nbsp;&nbsp;</span>func (sc *http2serverConn) sendWindowUpdate(st *http2stream, n int) {
<span id="L6276" class="ln">  6276&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6277" class="ln">  6277&nbsp;&nbsp;</span>	var streamID uint32
<span id="L6278" class="ln">  6278&nbsp;&nbsp;</span>	var send int32
<span id="L6279" class="ln">  6279&nbsp;&nbsp;</span>	if st == nil {
<span id="L6280" class="ln">  6280&nbsp;&nbsp;</span>		send = sc.inflow.add(n)
<span id="L6281" class="ln">  6281&nbsp;&nbsp;</span>	} else {
<span id="L6282" class="ln">  6282&nbsp;&nbsp;</span>		streamID = st.id
<span id="L6283" class="ln">  6283&nbsp;&nbsp;</span>		send = st.inflow.add(n)
<span id="L6284" class="ln">  6284&nbsp;&nbsp;</span>	}
<span id="L6285" class="ln">  6285&nbsp;&nbsp;</span>	if send == 0 {
<span id="L6286" class="ln">  6286&nbsp;&nbsp;</span>		return
<span id="L6287" class="ln">  6287&nbsp;&nbsp;</span>	}
<span id="L6288" class="ln">  6288&nbsp;&nbsp;</span>	sc.writeFrame(http2FrameWriteRequest{
<span id="L6289" class="ln">  6289&nbsp;&nbsp;</span>		write:  http2writeWindowUpdate{streamID: streamID, n: uint32(send)},
<span id="L6290" class="ln">  6290&nbsp;&nbsp;</span>		stream: st,
<span id="L6291" class="ln">  6291&nbsp;&nbsp;</span>	})
<span id="L6292" class="ln">  6292&nbsp;&nbsp;</span>}
<span id="L6293" class="ln">  6293&nbsp;&nbsp;</span>
<span id="L6294" class="ln">  6294&nbsp;&nbsp;</span><span class="comment">// requestBody is the Handler&#39;s Request.Body type.</span>
<span id="L6295" class="ln">  6295&nbsp;&nbsp;</span><span class="comment">// Read and Close may be called concurrently.</span>
<span id="L6296" class="ln">  6296&nbsp;&nbsp;</span>type http2requestBody struct {
<span id="L6297" class="ln">  6297&nbsp;&nbsp;</span>	_             http2incomparable
<span id="L6298" class="ln">  6298&nbsp;&nbsp;</span>	stream        *http2stream
<span id="L6299" class="ln">  6299&nbsp;&nbsp;</span>	conn          *http2serverConn
<span id="L6300" class="ln">  6300&nbsp;&nbsp;</span>	closeOnce     sync.Once  <span class="comment">// for use by Close only</span>
<span id="L6301" class="ln">  6301&nbsp;&nbsp;</span>	sawEOF        bool       <span class="comment">// for use by Read only</span>
<span id="L6302" class="ln">  6302&nbsp;&nbsp;</span>	pipe          *http2pipe <span class="comment">// non-nil if we have an HTTP entity message body</span>
<span id="L6303" class="ln">  6303&nbsp;&nbsp;</span>	needsContinue bool       <span class="comment">// need to send a 100-continue</span>
<span id="L6304" class="ln">  6304&nbsp;&nbsp;</span>}
<span id="L6305" class="ln">  6305&nbsp;&nbsp;</span>
<span id="L6306" class="ln">  6306&nbsp;&nbsp;</span>func (b *http2requestBody) Close() error {
<span id="L6307" class="ln">  6307&nbsp;&nbsp;</span>	b.closeOnce.Do(func() {
<span id="L6308" class="ln">  6308&nbsp;&nbsp;</span>		if b.pipe != nil {
<span id="L6309" class="ln">  6309&nbsp;&nbsp;</span>			b.pipe.BreakWithError(http2errClosedBody)
<span id="L6310" class="ln">  6310&nbsp;&nbsp;</span>		}
<span id="L6311" class="ln">  6311&nbsp;&nbsp;</span>	})
<span id="L6312" class="ln">  6312&nbsp;&nbsp;</span>	return nil
<span id="L6313" class="ln">  6313&nbsp;&nbsp;</span>}
<span id="L6314" class="ln">  6314&nbsp;&nbsp;</span>
<span id="L6315" class="ln">  6315&nbsp;&nbsp;</span>func (b *http2requestBody) Read(p []byte) (n int, err error) {
<span id="L6316" class="ln">  6316&nbsp;&nbsp;</span>	if b.needsContinue {
<span id="L6317" class="ln">  6317&nbsp;&nbsp;</span>		b.needsContinue = false
<span id="L6318" class="ln">  6318&nbsp;&nbsp;</span>		b.conn.write100ContinueHeaders(b.stream)
<span id="L6319" class="ln">  6319&nbsp;&nbsp;</span>	}
<span id="L6320" class="ln">  6320&nbsp;&nbsp;</span>	if b.pipe == nil || b.sawEOF {
<span id="L6321" class="ln">  6321&nbsp;&nbsp;</span>		return 0, io.EOF
<span id="L6322" class="ln">  6322&nbsp;&nbsp;</span>	}
<span id="L6323" class="ln">  6323&nbsp;&nbsp;</span>	n, err = b.pipe.Read(p)
<span id="L6324" class="ln">  6324&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L6325" class="ln">  6325&nbsp;&nbsp;</span>		b.sawEOF = true
<span id="L6326" class="ln">  6326&nbsp;&nbsp;</span>	}
<span id="L6327" class="ln">  6327&nbsp;&nbsp;</span>	if b.conn == nil &amp;&amp; http2inTests {
<span id="L6328" class="ln">  6328&nbsp;&nbsp;</span>		return
<span id="L6329" class="ln">  6329&nbsp;&nbsp;</span>	}
<span id="L6330" class="ln">  6330&nbsp;&nbsp;</span>	b.conn.noteBodyReadFromHandler(b.stream, n, err)
<span id="L6331" class="ln">  6331&nbsp;&nbsp;</span>	return
<span id="L6332" class="ln">  6332&nbsp;&nbsp;</span>}
<span id="L6333" class="ln">  6333&nbsp;&nbsp;</span>
<span id="L6334" class="ln">  6334&nbsp;&nbsp;</span><span class="comment">// responseWriter is the http.ResponseWriter implementation. It&#39;s</span>
<span id="L6335" class="ln">  6335&nbsp;&nbsp;</span><span class="comment">// intentionally small (1 pointer wide) to minimize garbage. The</span>
<span id="L6336" class="ln">  6336&nbsp;&nbsp;</span><span class="comment">// responseWriterState pointer inside is zeroed at the end of a</span>
<span id="L6337" class="ln">  6337&nbsp;&nbsp;</span><span class="comment">// request (in handlerDone) and calls on the responseWriter thereafter</span>
<span id="L6338" class="ln">  6338&nbsp;&nbsp;</span><span class="comment">// simply crash (caller&#39;s mistake), but the much larger responseWriterState</span>
<span id="L6339" class="ln">  6339&nbsp;&nbsp;</span><span class="comment">// and buffers are reused between multiple requests.</span>
<span id="L6340" class="ln">  6340&nbsp;&nbsp;</span>type http2responseWriter struct {
<span id="L6341" class="ln">  6341&nbsp;&nbsp;</span>	rws *http2responseWriterState
<span id="L6342" class="ln">  6342&nbsp;&nbsp;</span>}
<span id="L6343" class="ln">  6343&nbsp;&nbsp;</span>
<span id="L6344" class="ln">  6344&nbsp;&nbsp;</span><span class="comment">// Optional http.ResponseWriter interfaces implemented.</span>
<span id="L6345" class="ln">  6345&nbsp;&nbsp;</span>var (
<span id="L6346" class="ln">  6346&nbsp;&nbsp;</span>	_ CloseNotifier     = (*http2responseWriter)(nil)
<span id="L6347" class="ln">  6347&nbsp;&nbsp;</span>	_ Flusher           = (*http2responseWriter)(nil)
<span id="L6348" class="ln">  6348&nbsp;&nbsp;</span>	_ http2stringWriter = (*http2responseWriter)(nil)
<span id="L6349" class="ln">  6349&nbsp;&nbsp;</span>)
<span id="L6350" class="ln">  6350&nbsp;&nbsp;</span>
<span id="L6351" class="ln">  6351&nbsp;&nbsp;</span>type http2responseWriterState struct {
<span id="L6352" class="ln">  6352&nbsp;&nbsp;</span>	<span class="comment">// immutable within a request:</span>
<span id="L6353" class="ln">  6353&nbsp;&nbsp;</span>	stream *http2stream
<span id="L6354" class="ln">  6354&nbsp;&nbsp;</span>	req    *Request
<span id="L6355" class="ln">  6355&nbsp;&nbsp;</span>	conn   *http2serverConn
<span id="L6356" class="ln">  6356&nbsp;&nbsp;</span>
<span id="L6357" class="ln">  6357&nbsp;&nbsp;</span>	<span class="comment">// TODO: adjust buffer writing sizes based on server config, frame size updates from peer, etc</span>
<span id="L6358" class="ln">  6358&nbsp;&nbsp;</span>	bw *bufio.Writer <span class="comment">// writing to a chunkWriter{this *responseWriterState}</span>
<span id="L6359" class="ln">  6359&nbsp;&nbsp;</span>
<span id="L6360" class="ln">  6360&nbsp;&nbsp;</span>	<span class="comment">// mutated by http.Handler goroutine:</span>
<span id="L6361" class="ln">  6361&nbsp;&nbsp;</span>	handlerHeader Header   <span class="comment">// nil until called</span>
<span id="L6362" class="ln">  6362&nbsp;&nbsp;</span>	snapHeader    Header   <span class="comment">// snapshot of handlerHeader at WriteHeader time</span>
<span id="L6363" class="ln">  6363&nbsp;&nbsp;</span>	trailers      []string <span class="comment">// set in writeChunk</span>
<span id="L6364" class="ln">  6364&nbsp;&nbsp;</span>	status        int      <span class="comment">// status code passed to WriteHeader</span>
<span id="L6365" class="ln">  6365&nbsp;&nbsp;</span>	wroteHeader   bool     <span class="comment">// WriteHeader called (explicitly or implicitly). Not necessarily sent to user yet.</span>
<span id="L6366" class="ln">  6366&nbsp;&nbsp;</span>	sentHeader    bool     <span class="comment">// have we sent the header frame?</span>
<span id="L6367" class="ln">  6367&nbsp;&nbsp;</span>	handlerDone   bool     <span class="comment">// handler has finished</span>
<span id="L6368" class="ln">  6368&nbsp;&nbsp;</span>
<span id="L6369" class="ln">  6369&nbsp;&nbsp;</span>	sentContentLen int64 <span class="comment">// non-zero if handler set a Content-Length header</span>
<span id="L6370" class="ln">  6370&nbsp;&nbsp;</span>	wroteBytes     int64
<span id="L6371" class="ln">  6371&nbsp;&nbsp;</span>
<span id="L6372" class="ln">  6372&nbsp;&nbsp;</span>	closeNotifierMu sync.Mutex <span class="comment">// guards closeNotifierCh</span>
<span id="L6373" class="ln">  6373&nbsp;&nbsp;</span>	closeNotifierCh chan bool  <span class="comment">// nil until first used</span>
<span id="L6374" class="ln">  6374&nbsp;&nbsp;</span>}
<span id="L6375" class="ln">  6375&nbsp;&nbsp;</span>
<span id="L6376" class="ln">  6376&nbsp;&nbsp;</span>type http2chunkWriter struct{ rws *http2responseWriterState }
<span id="L6377" class="ln">  6377&nbsp;&nbsp;</span>
<span id="L6378" class="ln">  6378&nbsp;&nbsp;</span>func (cw http2chunkWriter) Write(p []byte) (n int, err error) {
<span id="L6379" class="ln">  6379&nbsp;&nbsp;</span>	n, err = cw.rws.writeChunk(p)
<span id="L6380" class="ln">  6380&nbsp;&nbsp;</span>	if err == http2errStreamClosed {
<span id="L6381" class="ln">  6381&nbsp;&nbsp;</span>		<span class="comment">// If writing failed because the stream has been closed,</span>
<span id="L6382" class="ln">  6382&nbsp;&nbsp;</span>		<span class="comment">// return the reason it was closed.</span>
<span id="L6383" class="ln">  6383&nbsp;&nbsp;</span>		err = cw.rws.stream.closeErr
<span id="L6384" class="ln">  6384&nbsp;&nbsp;</span>	}
<span id="L6385" class="ln">  6385&nbsp;&nbsp;</span>	return n, err
<span id="L6386" class="ln">  6386&nbsp;&nbsp;</span>}
<span id="L6387" class="ln">  6387&nbsp;&nbsp;</span>
<span id="L6388" class="ln">  6388&nbsp;&nbsp;</span>func (rws *http2responseWriterState) hasTrailers() bool { return len(rws.trailers) &gt; 0 }
<span id="L6389" class="ln">  6389&nbsp;&nbsp;</span>
<span id="L6390" class="ln">  6390&nbsp;&nbsp;</span>func (rws *http2responseWriterState) hasNonemptyTrailers() bool {
<span id="L6391" class="ln">  6391&nbsp;&nbsp;</span>	for _, trailer := range rws.trailers {
<span id="L6392" class="ln">  6392&nbsp;&nbsp;</span>		if _, ok := rws.handlerHeader[trailer]; ok {
<span id="L6393" class="ln">  6393&nbsp;&nbsp;</span>			return true
<span id="L6394" class="ln">  6394&nbsp;&nbsp;</span>		}
<span id="L6395" class="ln">  6395&nbsp;&nbsp;</span>	}
<span id="L6396" class="ln">  6396&nbsp;&nbsp;</span>	return false
<span id="L6397" class="ln">  6397&nbsp;&nbsp;</span>}
<span id="L6398" class="ln">  6398&nbsp;&nbsp;</span>
<span id="L6399" class="ln">  6399&nbsp;&nbsp;</span><span class="comment">// declareTrailer is called for each Trailer header when the</span>
<span id="L6400" class="ln">  6400&nbsp;&nbsp;</span><span class="comment">// response header is written. It notes that a header will need to be</span>
<span id="L6401" class="ln">  6401&nbsp;&nbsp;</span><span class="comment">// written in the trailers at the end of the response.</span>
<span id="L6402" class="ln">  6402&nbsp;&nbsp;</span>func (rws *http2responseWriterState) declareTrailer(k string) {
<span id="L6403" class="ln">  6403&nbsp;&nbsp;</span>	k = CanonicalHeaderKey(k)
<span id="L6404" class="ln">  6404&nbsp;&nbsp;</span>	if !httpguts.ValidTrailerHeader(k) {
<span id="L6405" class="ln">  6405&nbsp;&nbsp;</span>		<span class="comment">// Forbidden by RFC 7230, section 4.1.2.</span>
<span id="L6406" class="ln">  6406&nbsp;&nbsp;</span>		rws.conn.logf(&#34;ignoring invalid trailer %q&#34;, k)
<span id="L6407" class="ln">  6407&nbsp;&nbsp;</span>		return
<span id="L6408" class="ln">  6408&nbsp;&nbsp;</span>	}
<span id="L6409" class="ln">  6409&nbsp;&nbsp;</span>	if !http2strSliceContains(rws.trailers, k) {
<span id="L6410" class="ln">  6410&nbsp;&nbsp;</span>		rws.trailers = append(rws.trailers, k)
<span id="L6411" class="ln">  6411&nbsp;&nbsp;</span>	}
<span id="L6412" class="ln">  6412&nbsp;&nbsp;</span>}
<span id="L6413" class="ln">  6413&nbsp;&nbsp;</span>
<span id="L6414" class="ln">  6414&nbsp;&nbsp;</span><span class="comment">// writeChunk writes chunks from the bufio.Writer. But because</span>
<span id="L6415" class="ln">  6415&nbsp;&nbsp;</span><span class="comment">// bufio.Writer may bypass its chunking, sometimes p may be</span>
<span id="L6416" class="ln">  6416&nbsp;&nbsp;</span><span class="comment">// arbitrarily large.</span>
<span id="L6417" class="ln">  6417&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6418" class="ln">  6418&nbsp;&nbsp;</span><span class="comment">// writeChunk is also responsible (on the first chunk) for sending the</span>
<span id="L6419" class="ln">  6419&nbsp;&nbsp;</span><span class="comment">// HEADER response.</span>
<span id="L6420" class="ln">  6420&nbsp;&nbsp;</span>func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error) {
<span id="L6421" class="ln">  6421&nbsp;&nbsp;</span>	if !rws.wroteHeader {
<span id="L6422" class="ln">  6422&nbsp;&nbsp;</span>		rws.writeHeader(200)
<span id="L6423" class="ln">  6423&nbsp;&nbsp;</span>	}
<span id="L6424" class="ln">  6424&nbsp;&nbsp;</span>
<span id="L6425" class="ln">  6425&nbsp;&nbsp;</span>	if rws.handlerDone {
<span id="L6426" class="ln">  6426&nbsp;&nbsp;</span>		rws.promoteUndeclaredTrailers()
<span id="L6427" class="ln">  6427&nbsp;&nbsp;</span>	}
<span id="L6428" class="ln">  6428&nbsp;&nbsp;</span>
<span id="L6429" class="ln">  6429&nbsp;&nbsp;</span>	isHeadResp := rws.req.Method == &#34;HEAD&#34;
<span id="L6430" class="ln">  6430&nbsp;&nbsp;</span>	if !rws.sentHeader {
<span id="L6431" class="ln">  6431&nbsp;&nbsp;</span>		rws.sentHeader = true
<span id="L6432" class="ln">  6432&nbsp;&nbsp;</span>		var ctype, clen string
<span id="L6433" class="ln">  6433&nbsp;&nbsp;</span>		if clen = rws.snapHeader.Get(&#34;Content-Length&#34;); clen != &#34;&#34; {
<span id="L6434" class="ln">  6434&nbsp;&nbsp;</span>			rws.snapHeader.Del(&#34;Content-Length&#34;)
<span id="L6435" class="ln">  6435&nbsp;&nbsp;</span>			if cl, err := strconv.ParseUint(clen, 10, 63); err == nil {
<span id="L6436" class="ln">  6436&nbsp;&nbsp;</span>				rws.sentContentLen = int64(cl)
<span id="L6437" class="ln">  6437&nbsp;&nbsp;</span>			} else {
<span id="L6438" class="ln">  6438&nbsp;&nbsp;</span>				clen = &#34;&#34;
<span id="L6439" class="ln">  6439&nbsp;&nbsp;</span>			}
<span id="L6440" class="ln">  6440&nbsp;&nbsp;</span>		}
<span id="L6441" class="ln">  6441&nbsp;&nbsp;</span>		_, hasContentLength := rws.snapHeader[&#34;Content-Length&#34;]
<span id="L6442" class="ln">  6442&nbsp;&nbsp;</span>		if !hasContentLength &amp;&amp; clen == &#34;&#34; &amp;&amp; rws.handlerDone &amp;&amp; http2bodyAllowedForStatus(rws.status) &amp;&amp; (len(p) &gt; 0 || !isHeadResp) {
<span id="L6443" class="ln">  6443&nbsp;&nbsp;</span>			clen = strconv.Itoa(len(p))
<span id="L6444" class="ln">  6444&nbsp;&nbsp;</span>		}
<span id="L6445" class="ln">  6445&nbsp;&nbsp;</span>		_, hasContentType := rws.snapHeader[&#34;Content-Type&#34;]
<span id="L6446" class="ln">  6446&nbsp;&nbsp;</span>		<span class="comment">// If the Content-Encoding is non-blank, we shouldn&#39;t</span>
<span id="L6447" class="ln">  6447&nbsp;&nbsp;</span>		<span class="comment">// sniff the body. See Issue golang.org/issue/31753.</span>
<span id="L6448" class="ln">  6448&nbsp;&nbsp;</span>		ce := rws.snapHeader.Get(&#34;Content-Encoding&#34;)
<span id="L6449" class="ln">  6449&nbsp;&nbsp;</span>		hasCE := len(ce) &gt; 0
<span id="L6450" class="ln">  6450&nbsp;&nbsp;</span>		if !hasCE &amp;&amp; !hasContentType &amp;&amp; http2bodyAllowedForStatus(rws.status) &amp;&amp; len(p) &gt; 0 {
<span id="L6451" class="ln">  6451&nbsp;&nbsp;</span>			ctype = DetectContentType(p)
<span id="L6452" class="ln">  6452&nbsp;&nbsp;</span>		}
<span id="L6453" class="ln">  6453&nbsp;&nbsp;</span>		var date string
<span id="L6454" class="ln">  6454&nbsp;&nbsp;</span>		if _, ok := rws.snapHeader[&#34;Date&#34;]; !ok {
<span id="L6455" class="ln">  6455&nbsp;&nbsp;</span>			<span class="comment">// TODO(bradfitz): be faster here, like net/http? measure.</span>
<span id="L6456" class="ln">  6456&nbsp;&nbsp;</span>			date = time.Now().UTC().Format(TimeFormat)
<span id="L6457" class="ln">  6457&nbsp;&nbsp;</span>		}
<span id="L6458" class="ln">  6458&nbsp;&nbsp;</span>
<span id="L6459" class="ln">  6459&nbsp;&nbsp;</span>		for _, v := range rws.snapHeader[&#34;Trailer&#34;] {
<span id="L6460" class="ln">  6460&nbsp;&nbsp;</span>			http2foreachHeaderElement(v, rws.declareTrailer)
<span id="L6461" class="ln">  6461&nbsp;&nbsp;</span>		}
<span id="L6462" class="ln">  6462&nbsp;&nbsp;</span>
<span id="L6463" class="ln">  6463&nbsp;&nbsp;</span>		<span class="comment">// &#34;Connection&#34; headers aren&#39;t allowed in HTTP/2 (RFC 7540, 8.1.2.2),</span>
<span id="L6464" class="ln">  6464&nbsp;&nbsp;</span>		<span class="comment">// but respect &#34;Connection&#34; == &#34;close&#34; to mean sending a GOAWAY and tearing</span>
<span id="L6465" class="ln">  6465&nbsp;&nbsp;</span>		<span class="comment">// down the TCP connection when idle, like we do for HTTP/1.</span>
<span id="L6466" class="ln">  6466&nbsp;&nbsp;</span>		<span class="comment">// TODO: remove more Connection-specific header fields here, in addition</span>
<span id="L6467" class="ln">  6467&nbsp;&nbsp;</span>		<span class="comment">// to &#34;Connection&#34;.</span>
<span id="L6468" class="ln">  6468&nbsp;&nbsp;</span>		if _, ok := rws.snapHeader[&#34;Connection&#34;]; ok {
<span id="L6469" class="ln">  6469&nbsp;&nbsp;</span>			v := rws.snapHeader.Get(&#34;Connection&#34;)
<span id="L6470" class="ln">  6470&nbsp;&nbsp;</span>			delete(rws.snapHeader, &#34;Connection&#34;)
<span id="L6471" class="ln">  6471&nbsp;&nbsp;</span>			if v == &#34;close&#34; {
<span id="L6472" class="ln">  6472&nbsp;&nbsp;</span>				rws.conn.startGracefulShutdown()
<span id="L6473" class="ln">  6473&nbsp;&nbsp;</span>			}
<span id="L6474" class="ln">  6474&nbsp;&nbsp;</span>		}
<span id="L6475" class="ln">  6475&nbsp;&nbsp;</span>
<span id="L6476" class="ln">  6476&nbsp;&nbsp;</span>		endStream := (rws.handlerDone &amp;&amp; !rws.hasTrailers() &amp;&amp; len(p) == 0) || isHeadResp
<span id="L6477" class="ln">  6477&nbsp;&nbsp;</span>		err = rws.conn.writeHeaders(rws.stream, &amp;http2writeResHeaders{
<span id="L6478" class="ln">  6478&nbsp;&nbsp;</span>			streamID:      rws.stream.id,
<span id="L6479" class="ln">  6479&nbsp;&nbsp;</span>			httpResCode:   rws.status,
<span id="L6480" class="ln">  6480&nbsp;&nbsp;</span>			h:             rws.snapHeader,
<span id="L6481" class="ln">  6481&nbsp;&nbsp;</span>			endStream:     endStream,
<span id="L6482" class="ln">  6482&nbsp;&nbsp;</span>			contentType:   ctype,
<span id="L6483" class="ln">  6483&nbsp;&nbsp;</span>			contentLength: clen,
<span id="L6484" class="ln">  6484&nbsp;&nbsp;</span>			date:          date,
<span id="L6485" class="ln">  6485&nbsp;&nbsp;</span>		})
<span id="L6486" class="ln">  6486&nbsp;&nbsp;</span>		if err != nil {
<span id="L6487" class="ln">  6487&nbsp;&nbsp;</span>			return 0, err
<span id="L6488" class="ln">  6488&nbsp;&nbsp;</span>		}
<span id="L6489" class="ln">  6489&nbsp;&nbsp;</span>		if endStream {
<span id="L6490" class="ln">  6490&nbsp;&nbsp;</span>			return 0, nil
<span id="L6491" class="ln">  6491&nbsp;&nbsp;</span>		}
<span id="L6492" class="ln">  6492&nbsp;&nbsp;</span>	}
<span id="L6493" class="ln">  6493&nbsp;&nbsp;</span>	if isHeadResp {
<span id="L6494" class="ln">  6494&nbsp;&nbsp;</span>		return len(p), nil
<span id="L6495" class="ln">  6495&nbsp;&nbsp;</span>	}
<span id="L6496" class="ln">  6496&nbsp;&nbsp;</span>	if len(p) == 0 &amp;&amp; !rws.handlerDone {
<span id="L6497" class="ln">  6497&nbsp;&nbsp;</span>		return 0, nil
<span id="L6498" class="ln">  6498&nbsp;&nbsp;</span>	}
<span id="L6499" class="ln">  6499&nbsp;&nbsp;</span>
<span id="L6500" class="ln">  6500&nbsp;&nbsp;</span>	<span class="comment">// only send trailers if they have actually been defined by the</span>
<span id="L6501" class="ln">  6501&nbsp;&nbsp;</span>	<span class="comment">// server handler.</span>
<span id="L6502" class="ln">  6502&nbsp;&nbsp;</span>	hasNonemptyTrailers := rws.hasNonemptyTrailers()
<span id="L6503" class="ln">  6503&nbsp;&nbsp;</span>	endStream := rws.handlerDone &amp;&amp; !hasNonemptyTrailers
<span id="L6504" class="ln">  6504&nbsp;&nbsp;</span>	if len(p) &gt; 0 || endStream {
<span id="L6505" class="ln">  6505&nbsp;&nbsp;</span>		<span class="comment">// only send a 0 byte DATA frame if we&#39;re ending the stream.</span>
<span id="L6506" class="ln">  6506&nbsp;&nbsp;</span>		if err := rws.conn.writeDataFromHandler(rws.stream, p, endStream); err != nil {
<span id="L6507" class="ln">  6507&nbsp;&nbsp;</span>			return 0, err
<span id="L6508" class="ln">  6508&nbsp;&nbsp;</span>		}
<span id="L6509" class="ln">  6509&nbsp;&nbsp;</span>	}
<span id="L6510" class="ln">  6510&nbsp;&nbsp;</span>
<span id="L6511" class="ln">  6511&nbsp;&nbsp;</span>	if rws.handlerDone &amp;&amp; hasNonemptyTrailers {
<span id="L6512" class="ln">  6512&nbsp;&nbsp;</span>		err = rws.conn.writeHeaders(rws.stream, &amp;http2writeResHeaders{
<span id="L6513" class="ln">  6513&nbsp;&nbsp;</span>			streamID:  rws.stream.id,
<span id="L6514" class="ln">  6514&nbsp;&nbsp;</span>			h:         rws.handlerHeader,
<span id="L6515" class="ln">  6515&nbsp;&nbsp;</span>			trailers:  rws.trailers,
<span id="L6516" class="ln">  6516&nbsp;&nbsp;</span>			endStream: true,
<span id="L6517" class="ln">  6517&nbsp;&nbsp;</span>		})
<span id="L6518" class="ln">  6518&nbsp;&nbsp;</span>		return len(p), err
<span id="L6519" class="ln">  6519&nbsp;&nbsp;</span>	}
<span id="L6520" class="ln">  6520&nbsp;&nbsp;</span>	return len(p), nil
<span id="L6521" class="ln">  6521&nbsp;&nbsp;</span>}
<span id="L6522" class="ln">  6522&nbsp;&nbsp;</span>
<span id="L6523" class="ln">  6523&nbsp;&nbsp;</span><span class="comment">// TrailerPrefix is a magic prefix for ResponseWriter.Header map keys</span>
<span id="L6524" class="ln">  6524&nbsp;&nbsp;</span><span class="comment">// that, if present, signals that the map entry is actually for</span>
<span id="L6525" class="ln">  6525&nbsp;&nbsp;</span><span class="comment">// the response trailers, and not the response headers. The prefix</span>
<span id="L6526" class="ln">  6526&nbsp;&nbsp;</span><span class="comment">// is stripped after the ServeHTTP call finishes and the values are</span>
<span id="L6527" class="ln">  6527&nbsp;&nbsp;</span><span class="comment">// sent in the trailers.</span>
<span id="L6528" class="ln">  6528&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6529" class="ln">  6529&nbsp;&nbsp;</span><span class="comment">// This mechanism is intended only for trailers that are not known</span>
<span id="L6530" class="ln">  6530&nbsp;&nbsp;</span><span class="comment">// prior to the headers being written. If the set of trailers is fixed</span>
<span id="L6531" class="ln">  6531&nbsp;&nbsp;</span><span class="comment">// or known before the header is written, the normal Go trailers mechanism</span>
<span id="L6532" class="ln">  6532&nbsp;&nbsp;</span><span class="comment">// is preferred:</span>
<span id="L6533" class="ln">  6533&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6534" class="ln">  6534&nbsp;&nbsp;</span><span class="comment">//	https://golang.org/pkg/net/http/#ResponseWriter</span>
<span id="L6535" class="ln">  6535&nbsp;&nbsp;</span><span class="comment">//	https://golang.org/pkg/net/http/#example_ResponseWriter_trailers</span>
<span id="L6536" class="ln">  6536&nbsp;&nbsp;</span>const http2TrailerPrefix = &#34;Trailer:&#34;
<span id="L6537" class="ln">  6537&nbsp;&nbsp;</span>
<span id="L6538" class="ln">  6538&nbsp;&nbsp;</span><span class="comment">// promoteUndeclaredTrailers permits http.Handlers to set trailers</span>
<span id="L6539" class="ln">  6539&nbsp;&nbsp;</span><span class="comment">// after the header has already been flushed. Because the Go</span>
<span id="L6540" class="ln">  6540&nbsp;&nbsp;</span><span class="comment">// ResponseWriter interface has no way to set Trailers (only the</span>
<span id="L6541" class="ln">  6541&nbsp;&nbsp;</span><span class="comment">// Header), and because we didn&#39;t want to expand the ResponseWriter</span>
<span id="L6542" class="ln">  6542&nbsp;&nbsp;</span><span class="comment">// interface, and because nobody used trailers, and because RFC 7230</span>
<span id="L6543" class="ln">  6543&nbsp;&nbsp;</span><span class="comment">// says you SHOULD (but not must) predeclare any trailers in the</span>
<span id="L6544" class="ln">  6544&nbsp;&nbsp;</span><span class="comment">// header, the official ResponseWriter rules said trailers in Go must</span>
<span id="L6545" class="ln">  6545&nbsp;&nbsp;</span><span class="comment">// be predeclared, and then we reuse the same ResponseWriter.Header()</span>
<span id="L6546" class="ln">  6546&nbsp;&nbsp;</span><span class="comment">// map to mean both Headers and Trailers. When it&#39;s time to write the</span>
<span id="L6547" class="ln">  6547&nbsp;&nbsp;</span><span class="comment">// Trailers, we pick out the fields of Headers that were declared as</span>
<span id="L6548" class="ln">  6548&nbsp;&nbsp;</span><span class="comment">// trailers. That worked for a while, until we found the first major</span>
<span id="L6549" class="ln">  6549&nbsp;&nbsp;</span><span class="comment">// user of Trailers in the wild: gRPC (using them only over http2),</span>
<span id="L6550" class="ln">  6550&nbsp;&nbsp;</span><span class="comment">// and gRPC libraries permit setting trailers mid-stream without</span>
<span id="L6551" class="ln">  6551&nbsp;&nbsp;</span><span class="comment">// predeclaring them. So: change of plans. We still permit the old</span>
<span id="L6552" class="ln">  6552&nbsp;&nbsp;</span><span class="comment">// way, but we also permit this hack: if a Header() key begins with</span>
<span id="L6553" class="ln">  6553&nbsp;&nbsp;</span><span class="comment">// &#34;Trailer:&#34;, the suffix of that key is a Trailer. Because &#39;:&#39; is an</span>
<span id="L6554" class="ln">  6554&nbsp;&nbsp;</span><span class="comment">// invalid token byte anyway, there is no ambiguity. (And it&#39;s already</span>
<span id="L6555" class="ln">  6555&nbsp;&nbsp;</span><span class="comment">// filtered out) It&#39;s mildly hacky, but not terrible.</span>
<span id="L6556" class="ln">  6556&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6557" class="ln">  6557&nbsp;&nbsp;</span><span class="comment">// This method runs after the Handler is done and promotes any Header</span>
<span id="L6558" class="ln">  6558&nbsp;&nbsp;</span><span class="comment">// fields to be trailers.</span>
<span id="L6559" class="ln">  6559&nbsp;&nbsp;</span>func (rws *http2responseWriterState) promoteUndeclaredTrailers() {
<span id="L6560" class="ln">  6560&nbsp;&nbsp;</span>	for k, vv := range rws.handlerHeader {
<span id="L6561" class="ln">  6561&nbsp;&nbsp;</span>		if !strings.HasPrefix(k, http2TrailerPrefix) {
<span id="L6562" class="ln">  6562&nbsp;&nbsp;</span>			continue
<span id="L6563" class="ln">  6563&nbsp;&nbsp;</span>		}
<span id="L6564" class="ln">  6564&nbsp;&nbsp;</span>		trailerKey := strings.TrimPrefix(k, http2TrailerPrefix)
<span id="L6565" class="ln">  6565&nbsp;&nbsp;</span>		rws.declareTrailer(trailerKey)
<span id="L6566" class="ln">  6566&nbsp;&nbsp;</span>		rws.handlerHeader[CanonicalHeaderKey(trailerKey)] = vv
<span id="L6567" class="ln">  6567&nbsp;&nbsp;</span>	}
<span id="L6568" class="ln">  6568&nbsp;&nbsp;</span>
<span id="L6569" class="ln">  6569&nbsp;&nbsp;</span>	if len(rws.trailers) &gt; 1 {
<span id="L6570" class="ln">  6570&nbsp;&nbsp;</span>		sorter := http2sorterPool.Get().(*http2sorter)
<span id="L6571" class="ln">  6571&nbsp;&nbsp;</span>		sorter.SortStrings(rws.trailers)
<span id="L6572" class="ln">  6572&nbsp;&nbsp;</span>		http2sorterPool.Put(sorter)
<span id="L6573" class="ln">  6573&nbsp;&nbsp;</span>	}
<span id="L6574" class="ln">  6574&nbsp;&nbsp;</span>}
<span id="L6575" class="ln">  6575&nbsp;&nbsp;</span>
<span id="L6576" class="ln">  6576&nbsp;&nbsp;</span>func (w *http2responseWriter) SetReadDeadline(deadline time.Time) error {
<span id="L6577" class="ln">  6577&nbsp;&nbsp;</span>	st := w.rws.stream
<span id="L6578" class="ln">  6578&nbsp;&nbsp;</span>	if !deadline.IsZero() &amp;&amp; deadline.Before(time.Now()) {
<span id="L6579" class="ln">  6579&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;re setting a deadline in the past, reset the stream immediately</span>
<span id="L6580" class="ln">  6580&nbsp;&nbsp;</span>		<span class="comment">// so writes after SetWriteDeadline returns will fail.</span>
<span id="L6581" class="ln">  6581&nbsp;&nbsp;</span>		st.onReadTimeout()
<span id="L6582" class="ln">  6582&nbsp;&nbsp;</span>		return nil
<span id="L6583" class="ln">  6583&nbsp;&nbsp;</span>	}
<span id="L6584" class="ln">  6584&nbsp;&nbsp;</span>	w.rws.conn.sendServeMsg(func(sc *http2serverConn) {
<span id="L6585" class="ln">  6585&nbsp;&nbsp;</span>		if st.readDeadline != nil {
<span id="L6586" class="ln">  6586&nbsp;&nbsp;</span>			if !st.readDeadline.Stop() {
<span id="L6587" class="ln">  6587&nbsp;&nbsp;</span>				<span class="comment">// Deadline already exceeded, or stream has been closed.</span>
<span id="L6588" class="ln">  6588&nbsp;&nbsp;</span>				return
<span id="L6589" class="ln">  6589&nbsp;&nbsp;</span>			}
<span id="L6590" class="ln">  6590&nbsp;&nbsp;</span>		}
<span id="L6591" class="ln">  6591&nbsp;&nbsp;</span>		if deadline.IsZero() {
<span id="L6592" class="ln">  6592&nbsp;&nbsp;</span>			st.readDeadline = nil
<span id="L6593" class="ln">  6593&nbsp;&nbsp;</span>		} else if st.readDeadline == nil {
<span id="L6594" class="ln">  6594&nbsp;&nbsp;</span>			st.readDeadline = time.AfterFunc(deadline.Sub(time.Now()), st.onReadTimeout)
<span id="L6595" class="ln">  6595&nbsp;&nbsp;</span>		} else {
<span id="L6596" class="ln">  6596&nbsp;&nbsp;</span>			st.readDeadline.Reset(deadline.Sub(time.Now()))
<span id="L6597" class="ln">  6597&nbsp;&nbsp;</span>		}
<span id="L6598" class="ln">  6598&nbsp;&nbsp;</span>	})
<span id="L6599" class="ln">  6599&nbsp;&nbsp;</span>	return nil
<span id="L6600" class="ln">  6600&nbsp;&nbsp;</span>}
<span id="L6601" class="ln">  6601&nbsp;&nbsp;</span>
<span id="L6602" class="ln">  6602&nbsp;&nbsp;</span>func (w *http2responseWriter) SetWriteDeadline(deadline time.Time) error {
<span id="L6603" class="ln">  6603&nbsp;&nbsp;</span>	st := w.rws.stream
<span id="L6604" class="ln">  6604&nbsp;&nbsp;</span>	if !deadline.IsZero() &amp;&amp; deadline.Before(time.Now()) {
<span id="L6605" class="ln">  6605&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;re setting a deadline in the past, reset the stream immediately</span>
<span id="L6606" class="ln">  6606&nbsp;&nbsp;</span>		<span class="comment">// so writes after SetWriteDeadline returns will fail.</span>
<span id="L6607" class="ln">  6607&nbsp;&nbsp;</span>		st.onWriteTimeout()
<span id="L6608" class="ln">  6608&nbsp;&nbsp;</span>		return nil
<span id="L6609" class="ln">  6609&nbsp;&nbsp;</span>	}
<span id="L6610" class="ln">  6610&nbsp;&nbsp;</span>	w.rws.conn.sendServeMsg(func(sc *http2serverConn) {
<span id="L6611" class="ln">  6611&nbsp;&nbsp;</span>		if st.writeDeadline != nil {
<span id="L6612" class="ln">  6612&nbsp;&nbsp;</span>			if !st.writeDeadline.Stop() {
<span id="L6613" class="ln">  6613&nbsp;&nbsp;</span>				<span class="comment">// Deadline already exceeded, or stream has been closed.</span>
<span id="L6614" class="ln">  6614&nbsp;&nbsp;</span>				return
<span id="L6615" class="ln">  6615&nbsp;&nbsp;</span>			}
<span id="L6616" class="ln">  6616&nbsp;&nbsp;</span>		}
<span id="L6617" class="ln">  6617&nbsp;&nbsp;</span>		if deadline.IsZero() {
<span id="L6618" class="ln">  6618&nbsp;&nbsp;</span>			st.writeDeadline = nil
<span id="L6619" class="ln">  6619&nbsp;&nbsp;</span>		} else if st.writeDeadline == nil {
<span id="L6620" class="ln">  6620&nbsp;&nbsp;</span>			st.writeDeadline = time.AfterFunc(deadline.Sub(time.Now()), st.onWriteTimeout)
<span id="L6621" class="ln">  6621&nbsp;&nbsp;</span>		} else {
<span id="L6622" class="ln">  6622&nbsp;&nbsp;</span>			st.writeDeadline.Reset(deadline.Sub(time.Now()))
<span id="L6623" class="ln">  6623&nbsp;&nbsp;</span>		}
<span id="L6624" class="ln">  6624&nbsp;&nbsp;</span>	})
<span id="L6625" class="ln">  6625&nbsp;&nbsp;</span>	return nil
<span id="L6626" class="ln">  6626&nbsp;&nbsp;</span>}
<span id="L6627" class="ln">  6627&nbsp;&nbsp;</span>
<span id="L6628" class="ln">  6628&nbsp;&nbsp;</span>func (w *http2responseWriter) Flush() {
<span id="L6629" class="ln">  6629&nbsp;&nbsp;</span>	w.FlushError()
<span id="L6630" class="ln">  6630&nbsp;&nbsp;</span>}
<span id="L6631" class="ln">  6631&nbsp;&nbsp;</span>
<span id="L6632" class="ln">  6632&nbsp;&nbsp;</span>func (w *http2responseWriter) FlushError() error {
<span id="L6633" class="ln">  6633&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6634" class="ln">  6634&nbsp;&nbsp;</span>	if rws == nil {
<span id="L6635" class="ln">  6635&nbsp;&nbsp;</span>		panic(&#34;Header called after Handler finished&#34;)
<span id="L6636" class="ln">  6636&nbsp;&nbsp;</span>	}
<span id="L6637" class="ln">  6637&nbsp;&nbsp;</span>	var err error
<span id="L6638" class="ln">  6638&nbsp;&nbsp;</span>	if rws.bw.Buffered() &gt; 0 {
<span id="L6639" class="ln">  6639&nbsp;&nbsp;</span>		err = rws.bw.Flush()
<span id="L6640" class="ln">  6640&nbsp;&nbsp;</span>	} else {
<span id="L6641" class="ln">  6641&nbsp;&nbsp;</span>		<span class="comment">// The bufio.Writer won&#39;t call chunkWriter.Write</span>
<span id="L6642" class="ln">  6642&nbsp;&nbsp;</span>		<span class="comment">// (writeChunk with zero bytes), so we have to do it</span>
<span id="L6643" class="ln">  6643&nbsp;&nbsp;</span>		<span class="comment">// ourselves to force the HTTP response header and/or</span>
<span id="L6644" class="ln">  6644&nbsp;&nbsp;</span>		<span class="comment">// final DATA frame (with END_STREAM) to be sent.</span>
<span id="L6645" class="ln">  6645&nbsp;&nbsp;</span>		_, err = http2chunkWriter{rws}.Write(nil)
<span id="L6646" class="ln">  6646&nbsp;&nbsp;</span>		if err == nil {
<span id="L6647" class="ln">  6647&nbsp;&nbsp;</span>			select {
<span id="L6648" class="ln">  6648&nbsp;&nbsp;</span>			case &lt;-rws.stream.cw:
<span id="L6649" class="ln">  6649&nbsp;&nbsp;</span>				err = rws.stream.closeErr
<span id="L6650" class="ln">  6650&nbsp;&nbsp;</span>			default:
<span id="L6651" class="ln">  6651&nbsp;&nbsp;</span>			}
<span id="L6652" class="ln">  6652&nbsp;&nbsp;</span>		}
<span id="L6653" class="ln">  6653&nbsp;&nbsp;</span>	}
<span id="L6654" class="ln">  6654&nbsp;&nbsp;</span>	return err
<span id="L6655" class="ln">  6655&nbsp;&nbsp;</span>}
<span id="L6656" class="ln">  6656&nbsp;&nbsp;</span>
<span id="L6657" class="ln">  6657&nbsp;&nbsp;</span>func (w *http2responseWriter) CloseNotify() &lt;-chan bool {
<span id="L6658" class="ln">  6658&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6659" class="ln">  6659&nbsp;&nbsp;</span>	if rws == nil {
<span id="L6660" class="ln">  6660&nbsp;&nbsp;</span>		panic(&#34;CloseNotify called after Handler finished&#34;)
<span id="L6661" class="ln">  6661&nbsp;&nbsp;</span>	}
<span id="L6662" class="ln">  6662&nbsp;&nbsp;</span>	rws.closeNotifierMu.Lock()
<span id="L6663" class="ln">  6663&nbsp;&nbsp;</span>	ch := rws.closeNotifierCh
<span id="L6664" class="ln">  6664&nbsp;&nbsp;</span>	if ch == nil {
<span id="L6665" class="ln">  6665&nbsp;&nbsp;</span>		ch = make(chan bool, 1)
<span id="L6666" class="ln">  6666&nbsp;&nbsp;</span>		rws.closeNotifierCh = ch
<span id="L6667" class="ln">  6667&nbsp;&nbsp;</span>		cw := rws.stream.cw
<span id="L6668" class="ln">  6668&nbsp;&nbsp;</span>		go func() {
<span id="L6669" class="ln">  6669&nbsp;&nbsp;</span>			cw.Wait() <span class="comment">// wait for close</span>
<span id="L6670" class="ln">  6670&nbsp;&nbsp;</span>			ch &lt;- true
<span id="L6671" class="ln">  6671&nbsp;&nbsp;</span>		}()
<span id="L6672" class="ln">  6672&nbsp;&nbsp;</span>	}
<span id="L6673" class="ln">  6673&nbsp;&nbsp;</span>	rws.closeNotifierMu.Unlock()
<span id="L6674" class="ln">  6674&nbsp;&nbsp;</span>	return ch
<span id="L6675" class="ln">  6675&nbsp;&nbsp;</span>}
<span id="L6676" class="ln">  6676&nbsp;&nbsp;</span>
<span id="L6677" class="ln">  6677&nbsp;&nbsp;</span>func (w *http2responseWriter) Header() Header {
<span id="L6678" class="ln">  6678&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6679" class="ln">  6679&nbsp;&nbsp;</span>	if rws == nil {
<span id="L6680" class="ln">  6680&nbsp;&nbsp;</span>		panic(&#34;Header called after Handler finished&#34;)
<span id="L6681" class="ln">  6681&nbsp;&nbsp;</span>	}
<span id="L6682" class="ln">  6682&nbsp;&nbsp;</span>	if rws.handlerHeader == nil {
<span id="L6683" class="ln">  6683&nbsp;&nbsp;</span>		rws.handlerHeader = make(Header)
<span id="L6684" class="ln">  6684&nbsp;&nbsp;</span>	}
<span id="L6685" class="ln">  6685&nbsp;&nbsp;</span>	return rws.handlerHeader
<span id="L6686" class="ln">  6686&nbsp;&nbsp;</span>}
<span id="L6687" class="ln">  6687&nbsp;&nbsp;</span>
<span id="L6688" class="ln">  6688&nbsp;&nbsp;</span><span class="comment">// checkWriteHeaderCode is a copy of net/http&#39;s checkWriteHeaderCode.</span>
<span id="L6689" class="ln">  6689&nbsp;&nbsp;</span>func http2checkWriteHeaderCode(code int) {
<span id="L6690" class="ln">  6690&nbsp;&nbsp;</span>	<span class="comment">// Issue 22880: require valid WriteHeader status codes.</span>
<span id="L6691" class="ln">  6691&nbsp;&nbsp;</span>	<span class="comment">// For now we only enforce that it&#39;s three digits.</span>
<span id="L6692" class="ln">  6692&nbsp;&nbsp;</span>	<span class="comment">// In the future we might block things over 599 (600 and above aren&#39;t defined</span>
<span id="L6693" class="ln">  6693&nbsp;&nbsp;</span>	<span class="comment">// at http://httpwg.org/specs/rfc7231.html#status.codes).</span>
<span id="L6694" class="ln">  6694&nbsp;&nbsp;</span>	<span class="comment">// But for now any three digits.</span>
<span id="L6695" class="ln">  6695&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L6696" class="ln">  6696&nbsp;&nbsp;</span>	<span class="comment">// We used to send &#34;HTTP/1.1 000 0&#34; on the wire in responses but there&#39;s</span>
<span id="L6697" class="ln">  6697&nbsp;&nbsp;</span>	<span class="comment">// no equivalent bogus thing we can realistically send in HTTP/2,</span>
<span id="L6698" class="ln">  6698&nbsp;&nbsp;</span>	<span class="comment">// so we&#39;ll consistently panic instead and help people find their bugs</span>
<span id="L6699" class="ln">  6699&nbsp;&nbsp;</span>	<span class="comment">// early. (We can&#39;t return an error from WriteHeader even if we wanted to.)</span>
<span id="L6700" class="ln">  6700&nbsp;&nbsp;</span>	if code &lt; 100 || code &gt; 999 {
<span id="L6701" class="ln">  6701&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid WriteHeader code %v&#34;, code))
<span id="L6702" class="ln">  6702&nbsp;&nbsp;</span>	}
<span id="L6703" class="ln">  6703&nbsp;&nbsp;</span>}
<span id="L6704" class="ln">  6704&nbsp;&nbsp;</span>
<span id="L6705" class="ln">  6705&nbsp;&nbsp;</span>func (w *http2responseWriter) WriteHeader(code int) {
<span id="L6706" class="ln">  6706&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6707" class="ln">  6707&nbsp;&nbsp;</span>	if rws == nil {
<span id="L6708" class="ln">  6708&nbsp;&nbsp;</span>		panic(&#34;WriteHeader called after Handler finished&#34;)
<span id="L6709" class="ln">  6709&nbsp;&nbsp;</span>	}
<span id="L6710" class="ln">  6710&nbsp;&nbsp;</span>	rws.writeHeader(code)
<span id="L6711" class="ln">  6711&nbsp;&nbsp;</span>}
<span id="L6712" class="ln">  6712&nbsp;&nbsp;</span>
<span id="L6713" class="ln">  6713&nbsp;&nbsp;</span>func (rws *http2responseWriterState) writeHeader(code int) {
<span id="L6714" class="ln">  6714&nbsp;&nbsp;</span>	if rws.wroteHeader {
<span id="L6715" class="ln">  6715&nbsp;&nbsp;</span>		return
<span id="L6716" class="ln">  6716&nbsp;&nbsp;</span>	}
<span id="L6717" class="ln">  6717&nbsp;&nbsp;</span>
<span id="L6718" class="ln">  6718&nbsp;&nbsp;</span>	http2checkWriteHeaderCode(code)
<span id="L6719" class="ln">  6719&nbsp;&nbsp;</span>
<span id="L6720" class="ln">  6720&nbsp;&nbsp;</span>	<span class="comment">// Handle informational headers</span>
<span id="L6721" class="ln">  6721&nbsp;&nbsp;</span>	if code &gt;= 100 &amp;&amp; code &lt;= 199 {
<span id="L6722" class="ln">  6722&nbsp;&nbsp;</span>		<span class="comment">// Per RFC 8297 we must not clear the current header map</span>
<span id="L6723" class="ln">  6723&nbsp;&nbsp;</span>		h := rws.handlerHeader
<span id="L6724" class="ln">  6724&nbsp;&nbsp;</span>
<span id="L6725" class="ln">  6725&nbsp;&nbsp;</span>		_, cl := h[&#34;Content-Length&#34;]
<span id="L6726" class="ln">  6726&nbsp;&nbsp;</span>		_, te := h[&#34;Transfer-Encoding&#34;]
<span id="L6727" class="ln">  6727&nbsp;&nbsp;</span>		if cl || te {
<span id="L6728" class="ln">  6728&nbsp;&nbsp;</span>			h = h.Clone()
<span id="L6729" class="ln">  6729&nbsp;&nbsp;</span>			h.Del(&#34;Content-Length&#34;)
<span id="L6730" class="ln">  6730&nbsp;&nbsp;</span>			h.Del(&#34;Transfer-Encoding&#34;)
<span id="L6731" class="ln">  6731&nbsp;&nbsp;</span>		}
<span id="L6732" class="ln">  6732&nbsp;&nbsp;</span>
<span id="L6733" class="ln">  6733&nbsp;&nbsp;</span>		rws.conn.writeHeaders(rws.stream, &amp;http2writeResHeaders{
<span id="L6734" class="ln">  6734&nbsp;&nbsp;</span>			streamID:    rws.stream.id,
<span id="L6735" class="ln">  6735&nbsp;&nbsp;</span>			httpResCode: code,
<span id="L6736" class="ln">  6736&nbsp;&nbsp;</span>			h:           h,
<span id="L6737" class="ln">  6737&nbsp;&nbsp;</span>			endStream:   rws.handlerDone &amp;&amp; !rws.hasTrailers(),
<span id="L6738" class="ln">  6738&nbsp;&nbsp;</span>		})
<span id="L6739" class="ln">  6739&nbsp;&nbsp;</span>
<span id="L6740" class="ln">  6740&nbsp;&nbsp;</span>		return
<span id="L6741" class="ln">  6741&nbsp;&nbsp;</span>	}
<span id="L6742" class="ln">  6742&nbsp;&nbsp;</span>
<span id="L6743" class="ln">  6743&nbsp;&nbsp;</span>	rws.wroteHeader = true
<span id="L6744" class="ln">  6744&nbsp;&nbsp;</span>	rws.status = code
<span id="L6745" class="ln">  6745&nbsp;&nbsp;</span>	if len(rws.handlerHeader) &gt; 0 {
<span id="L6746" class="ln">  6746&nbsp;&nbsp;</span>		rws.snapHeader = http2cloneHeader(rws.handlerHeader)
<span id="L6747" class="ln">  6747&nbsp;&nbsp;</span>	}
<span id="L6748" class="ln">  6748&nbsp;&nbsp;</span>}
<span id="L6749" class="ln">  6749&nbsp;&nbsp;</span>
<span id="L6750" class="ln">  6750&nbsp;&nbsp;</span>func http2cloneHeader(h Header) Header {
<span id="L6751" class="ln">  6751&nbsp;&nbsp;</span>	h2 := make(Header, len(h))
<span id="L6752" class="ln">  6752&nbsp;&nbsp;</span>	for k, vv := range h {
<span id="L6753" class="ln">  6753&nbsp;&nbsp;</span>		vv2 := make([]string, len(vv))
<span id="L6754" class="ln">  6754&nbsp;&nbsp;</span>		copy(vv2, vv)
<span id="L6755" class="ln">  6755&nbsp;&nbsp;</span>		h2[k] = vv2
<span id="L6756" class="ln">  6756&nbsp;&nbsp;</span>	}
<span id="L6757" class="ln">  6757&nbsp;&nbsp;</span>	return h2
<span id="L6758" class="ln">  6758&nbsp;&nbsp;</span>}
<span id="L6759" class="ln">  6759&nbsp;&nbsp;</span>
<span id="L6760" class="ln">  6760&nbsp;&nbsp;</span><span class="comment">// The Life Of A Write is like this:</span>
<span id="L6761" class="ln">  6761&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6762" class="ln">  6762&nbsp;&nbsp;</span><span class="comment">// * Handler calls w.Write or w.WriteString -&gt;</span>
<span id="L6763" class="ln">  6763&nbsp;&nbsp;</span><span class="comment">// * -&gt; rws.bw (*bufio.Writer) -&gt;</span>
<span id="L6764" class="ln">  6764&nbsp;&nbsp;</span><span class="comment">// * (Handler might call Flush)</span>
<span id="L6765" class="ln">  6765&nbsp;&nbsp;</span><span class="comment">// * -&gt; chunkWriter{rws}</span>
<span id="L6766" class="ln">  6766&nbsp;&nbsp;</span><span class="comment">// * -&gt; responseWriterState.writeChunk(p []byte)</span>
<span id="L6767" class="ln">  6767&nbsp;&nbsp;</span><span class="comment">// * -&gt; responseWriterState.writeChunk (most of the magic; see comment there)</span>
<span id="L6768" class="ln">  6768&nbsp;&nbsp;</span>func (w *http2responseWriter) Write(p []byte) (n int, err error) {
<span id="L6769" class="ln">  6769&nbsp;&nbsp;</span>	return w.write(len(p), p, &#34;&#34;)
<span id="L6770" class="ln">  6770&nbsp;&nbsp;</span>}
<span id="L6771" class="ln">  6771&nbsp;&nbsp;</span>
<span id="L6772" class="ln">  6772&nbsp;&nbsp;</span>func (w *http2responseWriter) WriteString(s string) (n int, err error) {
<span id="L6773" class="ln">  6773&nbsp;&nbsp;</span>	return w.write(len(s), nil, s)
<span id="L6774" class="ln">  6774&nbsp;&nbsp;</span>}
<span id="L6775" class="ln">  6775&nbsp;&nbsp;</span>
<span id="L6776" class="ln">  6776&nbsp;&nbsp;</span><span class="comment">// either dataB or dataS is non-zero.</span>
<span id="L6777" class="ln">  6777&nbsp;&nbsp;</span>func (w *http2responseWriter) write(lenData int, dataB []byte, dataS string) (n int, err error) {
<span id="L6778" class="ln">  6778&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6779" class="ln">  6779&nbsp;&nbsp;</span>	if rws == nil {
<span id="L6780" class="ln">  6780&nbsp;&nbsp;</span>		panic(&#34;Write called after Handler finished&#34;)
<span id="L6781" class="ln">  6781&nbsp;&nbsp;</span>	}
<span id="L6782" class="ln">  6782&nbsp;&nbsp;</span>	if !rws.wroteHeader {
<span id="L6783" class="ln">  6783&nbsp;&nbsp;</span>		w.WriteHeader(200)
<span id="L6784" class="ln">  6784&nbsp;&nbsp;</span>	}
<span id="L6785" class="ln">  6785&nbsp;&nbsp;</span>	if !http2bodyAllowedForStatus(rws.status) {
<span id="L6786" class="ln">  6786&nbsp;&nbsp;</span>		return 0, ErrBodyNotAllowed
<span id="L6787" class="ln">  6787&nbsp;&nbsp;</span>	}
<span id="L6788" class="ln">  6788&nbsp;&nbsp;</span>	rws.wroteBytes += int64(len(dataB)) + int64(len(dataS)) <span class="comment">// only one can be set</span>
<span id="L6789" class="ln">  6789&nbsp;&nbsp;</span>	if rws.sentContentLen != 0 &amp;&amp; rws.wroteBytes &gt; rws.sentContentLen {
<span id="L6790" class="ln">  6790&nbsp;&nbsp;</span>		<span class="comment">// TODO: send a RST_STREAM</span>
<span id="L6791" class="ln">  6791&nbsp;&nbsp;</span>		return 0, errors.New(&#34;http2: handler wrote more than declared Content-Length&#34;)
<span id="L6792" class="ln">  6792&nbsp;&nbsp;</span>	}
<span id="L6793" class="ln">  6793&nbsp;&nbsp;</span>
<span id="L6794" class="ln">  6794&nbsp;&nbsp;</span>	if dataB != nil {
<span id="L6795" class="ln">  6795&nbsp;&nbsp;</span>		return rws.bw.Write(dataB)
<span id="L6796" class="ln">  6796&nbsp;&nbsp;</span>	} else {
<span id="L6797" class="ln">  6797&nbsp;&nbsp;</span>		return rws.bw.WriteString(dataS)
<span id="L6798" class="ln">  6798&nbsp;&nbsp;</span>	}
<span id="L6799" class="ln">  6799&nbsp;&nbsp;</span>}
<span id="L6800" class="ln">  6800&nbsp;&nbsp;</span>
<span id="L6801" class="ln">  6801&nbsp;&nbsp;</span>func (w *http2responseWriter) handlerDone() {
<span id="L6802" class="ln">  6802&nbsp;&nbsp;</span>	rws := w.rws
<span id="L6803" class="ln">  6803&nbsp;&nbsp;</span>	rws.handlerDone = true
<span id="L6804" class="ln">  6804&nbsp;&nbsp;</span>	w.Flush()
<span id="L6805" class="ln">  6805&nbsp;&nbsp;</span>	w.rws = nil
<span id="L6806" class="ln">  6806&nbsp;&nbsp;</span>	http2responseWriterStatePool.Put(rws)
<span id="L6807" class="ln">  6807&nbsp;&nbsp;</span>}
<span id="L6808" class="ln">  6808&nbsp;&nbsp;</span>
<span id="L6809" class="ln">  6809&nbsp;&nbsp;</span><span class="comment">// Push errors.</span>
<span id="L6810" class="ln">  6810&nbsp;&nbsp;</span>var (
<span id="L6811" class="ln">  6811&nbsp;&nbsp;</span>	http2ErrRecursivePush    = errors.New(&#34;http2: recursive push not allowed&#34;)
<span id="L6812" class="ln">  6812&nbsp;&nbsp;</span>	http2ErrPushLimitReached = errors.New(&#34;http2: push would exceed peer&#39;s SETTINGS_MAX_CONCURRENT_STREAMS&#34;)
<span id="L6813" class="ln">  6813&nbsp;&nbsp;</span>)
<span id="L6814" class="ln">  6814&nbsp;&nbsp;</span>
<span id="L6815" class="ln">  6815&nbsp;&nbsp;</span>var _ Pusher = (*http2responseWriter)(nil)
<span id="L6816" class="ln">  6816&nbsp;&nbsp;</span>
<span id="L6817" class="ln">  6817&nbsp;&nbsp;</span>func (w *http2responseWriter) Push(target string, opts *PushOptions) error {
<span id="L6818" class="ln">  6818&nbsp;&nbsp;</span>	st := w.rws.stream
<span id="L6819" class="ln">  6819&nbsp;&nbsp;</span>	sc := st.sc
<span id="L6820" class="ln">  6820&nbsp;&nbsp;</span>	sc.serveG.checkNotOn()
<span id="L6821" class="ln">  6821&nbsp;&nbsp;</span>
<span id="L6822" class="ln">  6822&nbsp;&nbsp;</span>	<span class="comment">// No recursive pushes: &#34;PUSH_PROMISE frames MUST only be sent on a peer-initiated stream.&#34;</span>
<span id="L6823" class="ln">  6823&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-6.6</span>
<span id="L6824" class="ln">  6824&nbsp;&nbsp;</span>	if st.isPushed() {
<span id="L6825" class="ln">  6825&nbsp;&nbsp;</span>		return http2ErrRecursivePush
<span id="L6826" class="ln">  6826&nbsp;&nbsp;</span>	}
<span id="L6827" class="ln">  6827&nbsp;&nbsp;</span>
<span id="L6828" class="ln">  6828&nbsp;&nbsp;</span>	if opts == nil {
<span id="L6829" class="ln">  6829&nbsp;&nbsp;</span>		opts = new(PushOptions)
<span id="L6830" class="ln">  6830&nbsp;&nbsp;</span>	}
<span id="L6831" class="ln">  6831&nbsp;&nbsp;</span>
<span id="L6832" class="ln">  6832&nbsp;&nbsp;</span>	<span class="comment">// Default options.</span>
<span id="L6833" class="ln">  6833&nbsp;&nbsp;</span>	if opts.Method == &#34;&#34; {
<span id="L6834" class="ln">  6834&nbsp;&nbsp;</span>		opts.Method = &#34;GET&#34;
<span id="L6835" class="ln">  6835&nbsp;&nbsp;</span>	}
<span id="L6836" class="ln">  6836&nbsp;&nbsp;</span>	if opts.Header == nil {
<span id="L6837" class="ln">  6837&nbsp;&nbsp;</span>		opts.Header = Header{}
<span id="L6838" class="ln">  6838&nbsp;&nbsp;</span>	}
<span id="L6839" class="ln">  6839&nbsp;&nbsp;</span>	wantScheme := &#34;http&#34;
<span id="L6840" class="ln">  6840&nbsp;&nbsp;</span>	if w.rws.req.TLS != nil {
<span id="L6841" class="ln">  6841&nbsp;&nbsp;</span>		wantScheme = &#34;https&#34;
<span id="L6842" class="ln">  6842&nbsp;&nbsp;</span>	}
<span id="L6843" class="ln">  6843&nbsp;&nbsp;</span>
<span id="L6844" class="ln">  6844&nbsp;&nbsp;</span>	<span class="comment">// Validate the request.</span>
<span id="L6845" class="ln">  6845&nbsp;&nbsp;</span>	u, err := url.Parse(target)
<span id="L6846" class="ln">  6846&nbsp;&nbsp;</span>	if err != nil {
<span id="L6847" class="ln">  6847&nbsp;&nbsp;</span>		return err
<span id="L6848" class="ln">  6848&nbsp;&nbsp;</span>	}
<span id="L6849" class="ln">  6849&nbsp;&nbsp;</span>	if u.Scheme == &#34;&#34; {
<span id="L6850" class="ln">  6850&nbsp;&nbsp;</span>		if !strings.HasPrefix(target, &#34;/&#34;) {
<span id="L6851" class="ln">  6851&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;target must be an absolute URL or an absolute path: %q&#34;, target)
<span id="L6852" class="ln">  6852&nbsp;&nbsp;</span>		}
<span id="L6853" class="ln">  6853&nbsp;&nbsp;</span>		u.Scheme = wantScheme
<span id="L6854" class="ln">  6854&nbsp;&nbsp;</span>		u.Host = w.rws.req.Host
<span id="L6855" class="ln">  6855&nbsp;&nbsp;</span>	} else {
<span id="L6856" class="ln">  6856&nbsp;&nbsp;</span>		if u.Scheme != wantScheme {
<span id="L6857" class="ln">  6857&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;cannot push URL with scheme %q from request with scheme %q&#34;, u.Scheme, wantScheme)
<span id="L6858" class="ln">  6858&nbsp;&nbsp;</span>		}
<span id="L6859" class="ln">  6859&nbsp;&nbsp;</span>		if u.Host == &#34;&#34; {
<span id="L6860" class="ln">  6860&nbsp;&nbsp;</span>			return errors.New(&#34;URL must have a host&#34;)
<span id="L6861" class="ln">  6861&nbsp;&nbsp;</span>		}
<span id="L6862" class="ln">  6862&nbsp;&nbsp;</span>	}
<span id="L6863" class="ln">  6863&nbsp;&nbsp;</span>	for k := range opts.Header {
<span id="L6864" class="ln">  6864&nbsp;&nbsp;</span>		if strings.HasPrefix(k, &#34;:&#34;) {
<span id="L6865" class="ln">  6865&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;promised request headers cannot include pseudo header %q&#34;, k)
<span id="L6866" class="ln">  6866&nbsp;&nbsp;</span>		}
<span id="L6867" class="ln">  6867&nbsp;&nbsp;</span>		<span class="comment">// These headers are meaningful only if the request has a body,</span>
<span id="L6868" class="ln">  6868&nbsp;&nbsp;</span>		<span class="comment">// but PUSH_PROMISE requests cannot have a body.</span>
<span id="L6869" class="ln">  6869&nbsp;&nbsp;</span>		<span class="comment">// http://tools.ietf.org/html/rfc7540#section-8.2</span>
<span id="L6870" class="ln">  6870&nbsp;&nbsp;</span>		<span class="comment">// Also disallow Host, since the promised URL must be absolute.</span>
<span id="L6871" class="ln">  6871&nbsp;&nbsp;</span>		if http2asciiEqualFold(k, &#34;content-length&#34;) ||
<span id="L6872" class="ln">  6872&nbsp;&nbsp;</span>			http2asciiEqualFold(k, &#34;content-encoding&#34;) ||
<span id="L6873" class="ln">  6873&nbsp;&nbsp;</span>			http2asciiEqualFold(k, &#34;trailer&#34;) ||
<span id="L6874" class="ln">  6874&nbsp;&nbsp;</span>			http2asciiEqualFold(k, &#34;te&#34;) ||
<span id="L6875" class="ln">  6875&nbsp;&nbsp;</span>			http2asciiEqualFold(k, &#34;expect&#34;) ||
<span id="L6876" class="ln">  6876&nbsp;&nbsp;</span>			http2asciiEqualFold(k, &#34;host&#34;) {
<span id="L6877" class="ln">  6877&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;promised request headers cannot include %q&#34;, k)
<span id="L6878" class="ln">  6878&nbsp;&nbsp;</span>		}
<span id="L6879" class="ln">  6879&nbsp;&nbsp;</span>	}
<span id="L6880" class="ln">  6880&nbsp;&nbsp;</span>	if err := http2checkValidHTTP2RequestHeaders(opts.Header); err != nil {
<span id="L6881" class="ln">  6881&nbsp;&nbsp;</span>		return err
<span id="L6882" class="ln">  6882&nbsp;&nbsp;</span>	}
<span id="L6883" class="ln">  6883&nbsp;&nbsp;</span>
<span id="L6884" class="ln">  6884&nbsp;&nbsp;</span>	<span class="comment">// The RFC effectively limits promised requests to GET and HEAD:</span>
<span id="L6885" class="ln">  6885&nbsp;&nbsp;</span>	<span class="comment">// &#34;Promised requests MUST be cacheable [GET, HEAD, or POST], and MUST be safe [GET or HEAD]&#34;</span>
<span id="L6886" class="ln">  6886&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-8.2</span>
<span id="L6887" class="ln">  6887&nbsp;&nbsp;</span>	if opts.Method != &#34;GET&#34; &amp;&amp; opts.Method != &#34;HEAD&#34; {
<span id="L6888" class="ln">  6888&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;method %q must be GET or HEAD&#34;, opts.Method)
<span id="L6889" class="ln">  6889&nbsp;&nbsp;</span>	}
<span id="L6890" class="ln">  6890&nbsp;&nbsp;</span>
<span id="L6891" class="ln">  6891&nbsp;&nbsp;</span>	msg := &amp;http2startPushRequest{
<span id="L6892" class="ln">  6892&nbsp;&nbsp;</span>		parent: st,
<span id="L6893" class="ln">  6893&nbsp;&nbsp;</span>		method: opts.Method,
<span id="L6894" class="ln">  6894&nbsp;&nbsp;</span>		url:    u,
<span id="L6895" class="ln">  6895&nbsp;&nbsp;</span>		header: http2cloneHeader(opts.Header),
<span id="L6896" class="ln">  6896&nbsp;&nbsp;</span>		done:   http2errChanPool.Get().(chan error),
<span id="L6897" class="ln">  6897&nbsp;&nbsp;</span>	}
<span id="L6898" class="ln">  6898&nbsp;&nbsp;</span>
<span id="L6899" class="ln">  6899&nbsp;&nbsp;</span>	select {
<span id="L6900" class="ln">  6900&nbsp;&nbsp;</span>	case &lt;-sc.doneServing:
<span id="L6901" class="ln">  6901&nbsp;&nbsp;</span>		return http2errClientDisconnected
<span id="L6902" class="ln">  6902&nbsp;&nbsp;</span>	case &lt;-st.cw:
<span id="L6903" class="ln">  6903&nbsp;&nbsp;</span>		return http2errStreamClosed
<span id="L6904" class="ln">  6904&nbsp;&nbsp;</span>	case sc.serveMsgCh &lt;- msg:
<span id="L6905" class="ln">  6905&nbsp;&nbsp;</span>	}
<span id="L6906" class="ln">  6906&nbsp;&nbsp;</span>
<span id="L6907" class="ln">  6907&nbsp;&nbsp;</span>	select {
<span id="L6908" class="ln">  6908&nbsp;&nbsp;</span>	case &lt;-sc.doneServing:
<span id="L6909" class="ln">  6909&nbsp;&nbsp;</span>		return http2errClientDisconnected
<span id="L6910" class="ln">  6910&nbsp;&nbsp;</span>	case &lt;-st.cw:
<span id="L6911" class="ln">  6911&nbsp;&nbsp;</span>		return http2errStreamClosed
<span id="L6912" class="ln">  6912&nbsp;&nbsp;</span>	case err := &lt;-msg.done:
<span id="L6913" class="ln">  6913&nbsp;&nbsp;</span>		http2errChanPool.Put(msg.done)
<span id="L6914" class="ln">  6914&nbsp;&nbsp;</span>		return err
<span id="L6915" class="ln">  6915&nbsp;&nbsp;</span>	}
<span id="L6916" class="ln">  6916&nbsp;&nbsp;</span>}
<span id="L6917" class="ln">  6917&nbsp;&nbsp;</span>
<span id="L6918" class="ln">  6918&nbsp;&nbsp;</span>type http2startPushRequest struct {
<span id="L6919" class="ln">  6919&nbsp;&nbsp;</span>	parent *http2stream
<span id="L6920" class="ln">  6920&nbsp;&nbsp;</span>	method string
<span id="L6921" class="ln">  6921&nbsp;&nbsp;</span>	url    *url.URL
<span id="L6922" class="ln">  6922&nbsp;&nbsp;</span>	header Header
<span id="L6923" class="ln">  6923&nbsp;&nbsp;</span>	done   chan error
<span id="L6924" class="ln">  6924&nbsp;&nbsp;</span>}
<span id="L6925" class="ln">  6925&nbsp;&nbsp;</span>
<span id="L6926" class="ln">  6926&nbsp;&nbsp;</span>func (sc *http2serverConn) startPush(msg *http2startPushRequest) {
<span id="L6927" class="ln">  6927&nbsp;&nbsp;</span>	sc.serveG.check()
<span id="L6928" class="ln">  6928&nbsp;&nbsp;</span>
<span id="L6929" class="ln">  6929&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-6.6.</span>
<span id="L6930" class="ln">  6930&nbsp;&nbsp;</span>	<span class="comment">// PUSH_PROMISE frames MUST only be sent on a peer-initiated stream that</span>
<span id="L6931" class="ln">  6931&nbsp;&nbsp;</span>	<span class="comment">// is in either the &#34;open&#34; or &#34;half-closed (remote)&#34; state.</span>
<span id="L6932" class="ln">  6932&nbsp;&nbsp;</span>	if msg.parent.state != http2stateOpen &amp;&amp; msg.parent.state != http2stateHalfClosedRemote {
<span id="L6933" class="ln">  6933&nbsp;&nbsp;</span>		<span class="comment">// responseWriter.Push checks that the stream is peer-initiated.</span>
<span id="L6934" class="ln">  6934&nbsp;&nbsp;</span>		msg.done &lt;- http2errStreamClosed
<span id="L6935" class="ln">  6935&nbsp;&nbsp;</span>		return
<span id="L6936" class="ln">  6936&nbsp;&nbsp;</span>	}
<span id="L6937" class="ln">  6937&nbsp;&nbsp;</span>
<span id="L6938" class="ln">  6938&nbsp;&nbsp;</span>	<span class="comment">// http://tools.ietf.org/html/rfc7540#section-6.6.</span>
<span id="L6939" class="ln">  6939&nbsp;&nbsp;</span>	if !sc.pushEnabled {
<span id="L6940" class="ln">  6940&nbsp;&nbsp;</span>		msg.done &lt;- ErrNotSupported
<span id="L6941" class="ln">  6941&nbsp;&nbsp;</span>		return
<span id="L6942" class="ln">  6942&nbsp;&nbsp;</span>	}
<span id="L6943" class="ln">  6943&nbsp;&nbsp;</span>
<span id="L6944" class="ln">  6944&nbsp;&nbsp;</span>	<span class="comment">// PUSH_PROMISE frames must be sent in increasing order by stream ID, so</span>
<span id="L6945" class="ln">  6945&nbsp;&nbsp;</span>	<span class="comment">// we allocate an ID for the promised stream lazily, when the PUSH_PROMISE</span>
<span id="L6946" class="ln">  6946&nbsp;&nbsp;</span>	<span class="comment">// is written. Once the ID is allocated, we start the request handler.</span>
<span id="L6947" class="ln">  6947&nbsp;&nbsp;</span>	allocatePromisedID := func() (uint32, error) {
<span id="L6948" class="ln">  6948&nbsp;&nbsp;</span>		sc.serveG.check()
<span id="L6949" class="ln">  6949&nbsp;&nbsp;</span>
<span id="L6950" class="ln">  6950&nbsp;&nbsp;</span>		<span class="comment">// Check this again, just in case. Technically, we might have received</span>
<span id="L6951" class="ln">  6951&nbsp;&nbsp;</span>		<span class="comment">// an updated SETTINGS by the time we got around to writing this frame.</span>
<span id="L6952" class="ln">  6952&nbsp;&nbsp;</span>		if !sc.pushEnabled {
<span id="L6953" class="ln">  6953&nbsp;&nbsp;</span>			return 0, ErrNotSupported
<span id="L6954" class="ln">  6954&nbsp;&nbsp;</span>		}
<span id="L6955" class="ln">  6955&nbsp;&nbsp;</span>		<span class="comment">// http://tools.ietf.org/html/rfc7540#section-6.5.2.</span>
<span id="L6956" class="ln">  6956&nbsp;&nbsp;</span>		if sc.curPushedStreams+1 &gt; sc.clientMaxStreams {
<span id="L6957" class="ln">  6957&nbsp;&nbsp;</span>			return 0, http2ErrPushLimitReached
<span id="L6958" class="ln">  6958&nbsp;&nbsp;</span>		}
<span id="L6959" class="ln">  6959&nbsp;&nbsp;</span>
<span id="L6960" class="ln">  6960&nbsp;&nbsp;</span>		<span class="comment">// http://tools.ietf.org/html/rfc7540#section-5.1.1.</span>
<span id="L6961" class="ln">  6961&nbsp;&nbsp;</span>		<span class="comment">// Streams initiated by the server MUST use even-numbered identifiers.</span>
<span id="L6962" class="ln">  6962&nbsp;&nbsp;</span>		<span class="comment">// A server that is unable to establish a new stream identifier can send a GOAWAY</span>
<span id="L6963" class="ln">  6963&nbsp;&nbsp;</span>		<span class="comment">// frame so that the client is forced to open a new connection for new streams.</span>
<span id="L6964" class="ln">  6964&nbsp;&nbsp;</span>		if sc.maxPushPromiseID+2 &gt;= 1&lt;&lt;31 {
<span id="L6965" class="ln">  6965&nbsp;&nbsp;</span>			sc.startGracefulShutdownInternal()
<span id="L6966" class="ln">  6966&nbsp;&nbsp;</span>			return 0, http2ErrPushLimitReached
<span id="L6967" class="ln">  6967&nbsp;&nbsp;</span>		}
<span id="L6968" class="ln">  6968&nbsp;&nbsp;</span>		sc.maxPushPromiseID += 2
<span id="L6969" class="ln">  6969&nbsp;&nbsp;</span>		promisedID := sc.maxPushPromiseID
<span id="L6970" class="ln">  6970&nbsp;&nbsp;</span>
<span id="L6971" class="ln">  6971&nbsp;&nbsp;</span>		<span class="comment">// http://tools.ietf.org/html/rfc7540#section-8.2.</span>
<span id="L6972" class="ln">  6972&nbsp;&nbsp;</span>		<span class="comment">// Strictly speaking, the new stream should start in &#34;reserved (local)&#34;, then</span>
<span id="L6973" class="ln">  6973&nbsp;&nbsp;</span>		<span class="comment">// transition to &#34;half closed (remote)&#34; after sending the initial HEADERS, but</span>
<span id="L6974" class="ln">  6974&nbsp;&nbsp;</span>		<span class="comment">// we start in &#34;half closed (remote)&#34; for simplicity.</span>
<span id="L6975" class="ln">  6975&nbsp;&nbsp;</span>		<span class="comment">// See further comments at the definition of stateHalfClosedRemote.</span>
<span id="L6976" class="ln">  6976&nbsp;&nbsp;</span>		promised := sc.newStream(promisedID, msg.parent.id, http2stateHalfClosedRemote)
<span id="L6977" class="ln">  6977&nbsp;&nbsp;</span>		rw, req, err := sc.newWriterAndRequestNoBody(promised, http2requestParam{
<span id="L6978" class="ln">  6978&nbsp;&nbsp;</span>			method:    msg.method,
<span id="L6979" class="ln">  6979&nbsp;&nbsp;</span>			scheme:    msg.url.Scheme,
<span id="L6980" class="ln">  6980&nbsp;&nbsp;</span>			authority: msg.url.Host,
<span id="L6981" class="ln">  6981&nbsp;&nbsp;</span>			path:      msg.url.RequestURI(),
<span id="L6982" class="ln">  6982&nbsp;&nbsp;</span>			header:    http2cloneHeader(msg.header), <span class="comment">// clone since handler runs concurrently with writing the PUSH_PROMISE</span>
<span id="L6983" class="ln">  6983&nbsp;&nbsp;</span>		})
<span id="L6984" class="ln">  6984&nbsp;&nbsp;</span>		if err != nil {
<span id="L6985" class="ln">  6985&nbsp;&nbsp;</span>			<span class="comment">// Should not happen, since we&#39;ve already validated msg.url.</span>
<span id="L6986" class="ln">  6986&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;newWriterAndRequestNoBody(%+v): %v&#34;, msg.url, err))
<span id="L6987" class="ln">  6987&nbsp;&nbsp;</span>		}
<span id="L6988" class="ln">  6988&nbsp;&nbsp;</span>
<span id="L6989" class="ln">  6989&nbsp;&nbsp;</span>		sc.curHandlers++
<span id="L6990" class="ln">  6990&nbsp;&nbsp;</span>		go sc.runHandler(rw, req, sc.handler.ServeHTTP)
<span id="L6991" class="ln">  6991&nbsp;&nbsp;</span>		return promisedID, nil
<span id="L6992" class="ln">  6992&nbsp;&nbsp;</span>	}
<span id="L6993" class="ln">  6993&nbsp;&nbsp;</span>
<span id="L6994" class="ln">  6994&nbsp;&nbsp;</span>	sc.writeFrame(http2FrameWriteRequest{
<span id="L6995" class="ln">  6995&nbsp;&nbsp;</span>		write: &amp;http2writePushPromise{
<span id="L6996" class="ln">  6996&nbsp;&nbsp;</span>			streamID:           msg.parent.id,
<span id="L6997" class="ln">  6997&nbsp;&nbsp;</span>			method:             msg.method,
<span id="L6998" class="ln">  6998&nbsp;&nbsp;</span>			url:                msg.url,
<span id="L6999" class="ln">  6999&nbsp;&nbsp;</span>			h:                  msg.header,
<span id="L7000" class="ln">  7000&nbsp;&nbsp;</span>			allocatePromisedID: allocatePromisedID,
<span id="L7001" class="ln">  7001&nbsp;&nbsp;</span>		},
<span id="L7002" class="ln">  7002&nbsp;&nbsp;</span>		stream: msg.parent,
<span id="L7003" class="ln">  7003&nbsp;&nbsp;</span>		done:   msg.done,
<span id="L7004" class="ln">  7004&nbsp;&nbsp;</span>	})
<span id="L7005" class="ln">  7005&nbsp;&nbsp;</span>}
<span id="L7006" class="ln">  7006&nbsp;&nbsp;</span>
<span id="L7007" class="ln">  7007&nbsp;&nbsp;</span><span class="comment">// foreachHeaderElement splits v according to the &#34;#rule&#34; construction</span>
<span id="L7008" class="ln">  7008&nbsp;&nbsp;</span><span class="comment">// in RFC 7230 section 7 and calls fn for each non-empty element.</span>
<span id="L7009" class="ln">  7009&nbsp;&nbsp;</span>func http2foreachHeaderElement(v string, fn func(string)) {
<span id="L7010" class="ln">  7010&nbsp;&nbsp;</span>	v = textproto.TrimString(v)
<span id="L7011" class="ln">  7011&nbsp;&nbsp;</span>	if v == &#34;&#34; {
<span id="L7012" class="ln">  7012&nbsp;&nbsp;</span>		return
<span id="L7013" class="ln">  7013&nbsp;&nbsp;</span>	}
<span id="L7014" class="ln">  7014&nbsp;&nbsp;</span>	if !strings.Contains(v, &#34;,&#34;) {
<span id="L7015" class="ln">  7015&nbsp;&nbsp;</span>		fn(v)
<span id="L7016" class="ln">  7016&nbsp;&nbsp;</span>		return
<span id="L7017" class="ln">  7017&nbsp;&nbsp;</span>	}
<span id="L7018" class="ln">  7018&nbsp;&nbsp;</span>	for _, f := range strings.Split(v, &#34;,&#34;) {
<span id="L7019" class="ln">  7019&nbsp;&nbsp;</span>		if f = textproto.TrimString(f); f != &#34;&#34; {
<span id="L7020" class="ln">  7020&nbsp;&nbsp;</span>			fn(f)
<span id="L7021" class="ln">  7021&nbsp;&nbsp;</span>		}
<span id="L7022" class="ln">  7022&nbsp;&nbsp;</span>	}
<span id="L7023" class="ln">  7023&nbsp;&nbsp;</span>}
<span id="L7024" class="ln">  7024&nbsp;&nbsp;</span>
<span id="L7025" class="ln">  7025&nbsp;&nbsp;</span><span class="comment">// From http://httpwg.org/specs/rfc7540.html#rfc.section.8.1.2.2</span>
<span id="L7026" class="ln">  7026&nbsp;&nbsp;</span>var http2connHeaders = []string{
<span id="L7027" class="ln">  7027&nbsp;&nbsp;</span>	&#34;Connection&#34;,
<span id="L7028" class="ln">  7028&nbsp;&nbsp;</span>	&#34;Keep-Alive&#34;,
<span id="L7029" class="ln">  7029&nbsp;&nbsp;</span>	&#34;Proxy-Connection&#34;,
<span id="L7030" class="ln">  7030&nbsp;&nbsp;</span>	&#34;Transfer-Encoding&#34;,
<span id="L7031" class="ln">  7031&nbsp;&nbsp;</span>	&#34;Upgrade&#34;,
<span id="L7032" class="ln">  7032&nbsp;&nbsp;</span>}
<span id="L7033" class="ln">  7033&nbsp;&nbsp;</span>
<span id="L7034" class="ln">  7034&nbsp;&nbsp;</span><span class="comment">// checkValidHTTP2RequestHeaders checks whether h is a valid HTTP/2 request,</span>
<span id="L7035" class="ln">  7035&nbsp;&nbsp;</span><span class="comment">// per RFC 7540 Section 8.1.2.2.</span>
<span id="L7036" class="ln">  7036&nbsp;&nbsp;</span><span class="comment">// The returned error is reported to users.</span>
<span id="L7037" class="ln">  7037&nbsp;&nbsp;</span>func http2checkValidHTTP2RequestHeaders(h Header) error {
<span id="L7038" class="ln">  7038&nbsp;&nbsp;</span>	for _, k := range http2connHeaders {
<span id="L7039" class="ln">  7039&nbsp;&nbsp;</span>		if _, ok := h[k]; ok {
<span id="L7040" class="ln">  7040&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;request header %q is not valid in HTTP/2&#34;, k)
<span id="L7041" class="ln">  7041&nbsp;&nbsp;</span>		}
<span id="L7042" class="ln">  7042&nbsp;&nbsp;</span>	}
<span id="L7043" class="ln">  7043&nbsp;&nbsp;</span>	te := h[&#34;Te&#34;]
<span id="L7044" class="ln">  7044&nbsp;&nbsp;</span>	if len(te) &gt; 0 &amp;&amp; (len(te) &gt; 1 || (te[0] != &#34;trailers&#34; &amp;&amp; te[0] != &#34;&#34;)) {
<span id="L7045" class="ln">  7045&nbsp;&nbsp;</span>		return errors.New(`request header &#34;TE&#34; may only be &#34;trailers&#34; in HTTP/2`)
<span id="L7046" class="ln">  7046&nbsp;&nbsp;</span>	}
<span id="L7047" class="ln">  7047&nbsp;&nbsp;</span>	return nil
<span id="L7048" class="ln">  7048&nbsp;&nbsp;</span>}
<span id="L7049" class="ln">  7049&nbsp;&nbsp;</span>
<span id="L7050" class="ln">  7050&nbsp;&nbsp;</span>func http2new400Handler(err error) HandlerFunc {
<span id="L7051" class="ln">  7051&nbsp;&nbsp;</span>	return func(w ResponseWriter, r *Request) {
<span id="L7052" class="ln">  7052&nbsp;&nbsp;</span>		Error(w, err.Error(), StatusBadRequest)
<span id="L7053" class="ln">  7053&nbsp;&nbsp;</span>	}
<span id="L7054" class="ln">  7054&nbsp;&nbsp;</span>}
<span id="L7055" class="ln">  7055&nbsp;&nbsp;</span>
<span id="L7056" class="ln">  7056&nbsp;&nbsp;</span><span class="comment">// h1ServerKeepAlivesDisabled reports whether hs has its keep-alives</span>
<span id="L7057" class="ln">  7057&nbsp;&nbsp;</span><span class="comment">// disabled. See comments on h1ServerShutdownChan above for why</span>
<span id="L7058" class="ln">  7058&nbsp;&nbsp;</span><span class="comment">// the code is written this way.</span>
<span id="L7059" class="ln">  7059&nbsp;&nbsp;</span>func http2h1ServerKeepAlivesDisabled(hs *Server) bool {
<span id="L7060" class="ln">  7060&nbsp;&nbsp;</span>	var x interface{} = hs
<span id="L7061" class="ln">  7061&nbsp;&nbsp;</span>	type I interface {
<span id="L7062" class="ln">  7062&nbsp;&nbsp;</span>		doKeepAlives() bool
<span id="L7063" class="ln">  7063&nbsp;&nbsp;</span>	}
<span id="L7064" class="ln">  7064&nbsp;&nbsp;</span>	if hs, ok := x.(I); ok {
<span id="L7065" class="ln">  7065&nbsp;&nbsp;</span>		return !hs.doKeepAlives()
<span id="L7066" class="ln">  7066&nbsp;&nbsp;</span>	}
<span id="L7067" class="ln">  7067&nbsp;&nbsp;</span>	return false
<span id="L7068" class="ln">  7068&nbsp;&nbsp;</span>}
<span id="L7069" class="ln">  7069&nbsp;&nbsp;</span>
<span id="L7070" class="ln">  7070&nbsp;&nbsp;</span>func (sc *http2serverConn) countError(name string, err error) error {
<span id="L7071" class="ln">  7071&nbsp;&nbsp;</span>	if sc == nil || sc.srv == nil {
<span id="L7072" class="ln">  7072&nbsp;&nbsp;</span>		return err
<span id="L7073" class="ln">  7073&nbsp;&nbsp;</span>	}
<span id="L7074" class="ln">  7074&nbsp;&nbsp;</span>	f := sc.srv.CountError
<span id="L7075" class="ln">  7075&nbsp;&nbsp;</span>	if f == nil {
<span id="L7076" class="ln">  7076&nbsp;&nbsp;</span>		return err
<span id="L7077" class="ln">  7077&nbsp;&nbsp;</span>	}
<span id="L7078" class="ln">  7078&nbsp;&nbsp;</span>	var typ string
<span id="L7079" class="ln">  7079&nbsp;&nbsp;</span>	var code http2ErrCode
<span id="L7080" class="ln">  7080&nbsp;&nbsp;</span>	switch e := err.(type) {
<span id="L7081" class="ln">  7081&nbsp;&nbsp;</span>	case http2ConnectionError:
<span id="L7082" class="ln">  7082&nbsp;&nbsp;</span>		typ = &#34;conn&#34;
<span id="L7083" class="ln">  7083&nbsp;&nbsp;</span>		code = http2ErrCode(e)
<span id="L7084" class="ln">  7084&nbsp;&nbsp;</span>	case http2StreamError:
<span id="L7085" class="ln">  7085&nbsp;&nbsp;</span>		typ = &#34;stream&#34;
<span id="L7086" class="ln">  7086&nbsp;&nbsp;</span>		code = http2ErrCode(e.Code)
<span id="L7087" class="ln">  7087&nbsp;&nbsp;</span>	default:
<span id="L7088" class="ln">  7088&nbsp;&nbsp;</span>		return err
<span id="L7089" class="ln">  7089&nbsp;&nbsp;</span>	}
<span id="L7090" class="ln">  7090&nbsp;&nbsp;</span>	codeStr := http2errCodeName[code]
<span id="L7091" class="ln">  7091&nbsp;&nbsp;</span>	if codeStr == &#34;&#34; {
<span id="L7092" class="ln">  7092&nbsp;&nbsp;</span>		codeStr = strconv.Itoa(int(code))
<span id="L7093" class="ln">  7093&nbsp;&nbsp;</span>	}
<span id="L7094" class="ln">  7094&nbsp;&nbsp;</span>	f(fmt.Sprintf(&#34;%s_%s_%s&#34;, typ, codeStr, name))
<span id="L7095" class="ln">  7095&nbsp;&nbsp;</span>	return err
<span id="L7096" class="ln">  7096&nbsp;&nbsp;</span>}
<span id="L7097" class="ln">  7097&nbsp;&nbsp;</span>
<span id="L7098" class="ln">  7098&nbsp;&nbsp;</span>const (
<span id="L7099" class="ln">  7099&nbsp;&nbsp;</span>	<span class="comment">// transportDefaultConnFlow is how many connection-level flow control</span>
<span id="L7100" class="ln">  7100&nbsp;&nbsp;</span>	<span class="comment">// tokens we give the server at start-up, past the default 64k.</span>
<span id="L7101" class="ln">  7101&nbsp;&nbsp;</span>	http2transportDefaultConnFlow = 1 &lt;&lt; 30
<span id="L7102" class="ln">  7102&nbsp;&nbsp;</span>
<span id="L7103" class="ln">  7103&nbsp;&nbsp;</span>	<span class="comment">// transportDefaultStreamFlow is how many stream-level flow</span>
<span id="L7104" class="ln">  7104&nbsp;&nbsp;</span>	<span class="comment">// control tokens we announce to the peer, and how many bytes</span>
<span id="L7105" class="ln">  7105&nbsp;&nbsp;</span>	<span class="comment">// we buffer per stream.</span>
<span id="L7106" class="ln">  7106&nbsp;&nbsp;</span>	http2transportDefaultStreamFlow = 4 &lt;&lt; 20
<span id="L7107" class="ln">  7107&nbsp;&nbsp;</span>
<span id="L7108" class="ln">  7108&nbsp;&nbsp;</span>	http2defaultUserAgent = &#34;Go-http-client/2.0&#34;
<span id="L7109" class="ln">  7109&nbsp;&nbsp;</span>
<span id="L7110" class="ln">  7110&nbsp;&nbsp;</span>	<span class="comment">// initialMaxConcurrentStreams is a connections maxConcurrentStreams until</span>
<span id="L7111" class="ln">  7111&nbsp;&nbsp;</span>	<span class="comment">// it&#39;s received servers initial SETTINGS frame, which corresponds with the</span>
<span id="L7112" class="ln">  7112&nbsp;&nbsp;</span>	<span class="comment">// spec&#39;s minimum recommended value.</span>
<span id="L7113" class="ln">  7113&nbsp;&nbsp;</span>	http2initialMaxConcurrentStreams = 100
<span id="L7114" class="ln">  7114&nbsp;&nbsp;</span>
<span id="L7115" class="ln">  7115&nbsp;&nbsp;</span>	<span class="comment">// defaultMaxConcurrentStreams is a connections default maxConcurrentStreams</span>
<span id="L7116" class="ln">  7116&nbsp;&nbsp;</span>	<span class="comment">// if the server doesn&#39;t include one in its initial SETTINGS frame.</span>
<span id="L7117" class="ln">  7117&nbsp;&nbsp;</span>	http2defaultMaxConcurrentStreams = 1000
<span id="L7118" class="ln">  7118&nbsp;&nbsp;</span>)
<span id="L7119" class="ln">  7119&nbsp;&nbsp;</span>
<span id="L7120" class="ln">  7120&nbsp;&nbsp;</span><span class="comment">// Transport is an HTTP/2 Transport.</span>
<span id="L7121" class="ln">  7121&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7122" class="ln">  7122&nbsp;&nbsp;</span><span class="comment">// A Transport internally caches connections to servers. It is safe</span>
<span id="L7123" class="ln">  7123&nbsp;&nbsp;</span><span class="comment">// for concurrent use by multiple goroutines.</span>
<span id="L7124" class="ln">  7124&nbsp;&nbsp;</span>type http2Transport struct {
<span id="L7125" class="ln">  7125&nbsp;&nbsp;</span>	<span class="comment">// DialTLSContext specifies an optional dial function with context for</span>
<span id="L7126" class="ln">  7126&nbsp;&nbsp;</span>	<span class="comment">// creating TLS connections for requests.</span>
<span id="L7127" class="ln">  7127&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L7128" class="ln">  7128&nbsp;&nbsp;</span>	<span class="comment">// If DialTLSContext and DialTLS is nil, tls.Dial is used.</span>
<span id="L7129" class="ln">  7129&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L7130" class="ln">  7130&nbsp;&nbsp;</span>	<span class="comment">// If the returned net.Conn has a ConnectionState method like tls.Conn,</span>
<span id="L7131" class="ln">  7131&nbsp;&nbsp;</span>	<span class="comment">// it will be used to set http.Response.TLS.</span>
<span id="L7132" class="ln">  7132&nbsp;&nbsp;</span>	DialTLSContext func(ctx context.Context, network, addr string, cfg *tls.Config) (net.Conn, error)
<span id="L7133" class="ln">  7133&nbsp;&nbsp;</span>
<span id="L7134" class="ln">  7134&nbsp;&nbsp;</span>	<span class="comment">// DialTLS specifies an optional dial function for creating</span>
<span id="L7135" class="ln">  7135&nbsp;&nbsp;</span>	<span class="comment">// TLS connections for requests.</span>
<span id="L7136" class="ln">  7136&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L7137" class="ln">  7137&nbsp;&nbsp;</span>	<span class="comment">// If DialTLSContext and DialTLS is nil, tls.Dial is used.</span>
<span id="L7138" class="ln">  7138&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L7139" class="ln">  7139&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Use DialTLSContext instead, which allows the transport</span>
<span id="L7140" class="ln">  7140&nbsp;&nbsp;</span>	<span class="comment">// to cancel dials as soon as they are no longer needed.</span>
<span id="L7141" class="ln">  7141&nbsp;&nbsp;</span>	<span class="comment">// If both are set, DialTLSContext takes priority.</span>
<span id="L7142" class="ln">  7142&nbsp;&nbsp;</span>	DialTLS func(network, addr string, cfg *tls.Config) (net.Conn, error)
<span id="L7143" class="ln">  7143&nbsp;&nbsp;</span>
<span id="L7144" class="ln">  7144&nbsp;&nbsp;</span>	<span class="comment">// TLSClientConfig specifies the TLS configuration to use with</span>
<span id="L7145" class="ln">  7145&nbsp;&nbsp;</span>	<span class="comment">// tls.Client. If nil, the default configuration is used.</span>
<span id="L7146" class="ln">  7146&nbsp;&nbsp;</span>	TLSClientConfig *tls.Config
<span id="L7147" class="ln">  7147&nbsp;&nbsp;</span>
<span id="L7148" class="ln">  7148&nbsp;&nbsp;</span>	<span class="comment">// ConnPool optionally specifies an alternate connection pool to use.</span>
<span id="L7149" class="ln">  7149&nbsp;&nbsp;</span>	<span class="comment">// If nil, the default is used.</span>
<span id="L7150" class="ln">  7150&nbsp;&nbsp;</span>	ConnPool http2ClientConnPool
<span id="L7151" class="ln">  7151&nbsp;&nbsp;</span>
<span id="L7152" class="ln">  7152&nbsp;&nbsp;</span>	<span class="comment">// DisableCompression, if true, prevents the Transport from</span>
<span id="L7153" class="ln">  7153&nbsp;&nbsp;</span>	<span class="comment">// requesting compression with an &#34;Accept-Encoding: gzip&#34;</span>
<span id="L7154" class="ln">  7154&nbsp;&nbsp;</span>	<span class="comment">// request header when the Request contains no existing</span>
<span id="L7155" class="ln">  7155&nbsp;&nbsp;</span>	<span class="comment">// Accept-Encoding value. If the Transport requests gzip on</span>
<span id="L7156" class="ln">  7156&nbsp;&nbsp;</span>	<span class="comment">// its own and gets a gzipped response, it&#39;s transparently</span>
<span id="L7157" class="ln">  7157&nbsp;&nbsp;</span>	<span class="comment">// decoded in the Response.Body. However, if the user</span>
<span id="L7158" class="ln">  7158&nbsp;&nbsp;</span>	<span class="comment">// explicitly requested gzip it is not automatically</span>
<span id="L7159" class="ln">  7159&nbsp;&nbsp;</span>	<span class="comment">// uncompressed.</span>
<span id="L7160" class="ln">  7160&nbsp;&nbsp;</span>	DisableCompression bool
<span id="L7161" class="ln">  7161&nbsp;&nbsp;</span>
<span id="L7162" class="ln">  7162&nbsp;&nbsp;</span>	<span class="comment">// AllowHTTP, if true, permits HTTP/2 requests using the insecure,</span>
<span id="L7163" class="ln">  7163&nbsp;&nbsp;</span>	<span class="comment">// plain-text &#34;http&#34; scheme. Note that this does not enable h2c support.</span>
<span id="L7164" class="ln">  7164&nbsp;&nbsp;</span>	AllowHTTP bool
<span id="L7165" class="ln">  7165&nbsp;&nbsp;</span>
<span id="L7166" class="ln">  7166&nbsp;&nbsp;</span>	<span class="comment">// MaxHeaderListSize is the http2 SETTINGS_MAX_HEADER_LIST_SIZE to</span>
<span id="L7167" class="ln">  7167&nbsp;&nbsp;</span>	<span class="comment">// send in the initial settings frame. It is how many bytes</span>
<span id="L7168" class="ln">  7168&nbsp;&nbsp;</span>	<span class="comment">// of response headers are allowed. Unlike the http2 spec, zero here</span>
<span id="L7169" class="ln">  7169&nbsp;&nbsp;</span>	<span class="comment">// means to use a default limit (currently 10MB). If you actually</span>
<span id="L7170" class="ln">  7170&nbsp;&nbsp;</span>	<span class="comment">// want to advertise an unlimited value to the peer, Transport</span>
<span id="L7171" class="ln">  7171&nbsp;&nbsp;</span>	<span class="comment">// interprets the highest possible value here (0xffffffff or 1&lt;&lt;32-1)</span>
<span id="L7172" class="ln">  7172&nbsp;&nbsp;</span>	<span class="comment">// to mean no limit.</span>
<span id="L7173" class="ln">  7173&nbsp;&nbsp;</span>	MaxHeaderListSize uint32
<span id="L7174" class="ln">  7174&nbsp;&nbsp;</span>
<span id="L7175" class="ln">  7175&nbsp;&nbsp;</span>	<span class="comment">// MaxReadFrameSize is the http2 SETTINGS_MAX_FRAME_SIZE to send in the</span>
<span id="L7176" class="ln">  7176&nbsp;&nbsp;</span>	<span class="comment">// initial settings frame. It is the size in bytes of the largest frame</span>
<span id="L7177" class="ln">  7177&nbsp;&nbsp;</span>	<span class="comment">// payload that the sender is willing to receive. If 0, no setting is</span>
<span id="L7178" class="ln">  7178&nbsp;&nbsp;</span>	<span class="comment">// sent, and the value is provided by the peer, which should be 16384</span>
<span id="L7179" class="ln">  7179&nbsp;&nbsp;</span>	<span class="comment">// according to the spec:</span>
<span id="L7180" class="ln">  7180&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc7540#section-6.5.2.</span>
<span id="L7181" class="ln">  7181&nbsp;&nbsp;</span>	<span class="comment">// Values are bounded in the range 16k to 16M.</span>
<span id="L7182" class="ln">  7182&nbsp;&nbsp;</span>	MaxReadFrameSize uint32
<span id="L7183" class="ln">  7183&nbsp;&nbsp;</span>
<span id="L7184" class="ln">  7184&nbsp;&nbsp;</span>	<span class="comment">// MaxDecoderHeaderTableSize optionally specifies the http2</span>
<span id="L7185" class="ln">  7185&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It</span>
<span id="L7186" class="ln">  7186&nbsp;&nbsp;</span>	<span class="comment">// informs the remote endpoint of the maximum size of the header compression</span>
<span id="L7187" class="ln">  7187&nbsp;&nbsp;</span>	<span class="comment">// table used to decode header blocks, in octets. If zero, the default value</span>
<span id="L7188" class="ln">  7188&nbsp;&nbsp;</span>	<span class="comment">// of 4096 is used.</span>
<span id="L7189" class="ln">  7189&nbsp;&nbsp;</span>	MaxDecoderHeaderTableSize uint32
<span id="L7190" class="ln">  7190&nbsp;&nbsp;</span>
<span id="L7191" class="ln">  7191&nbsp;&nbsp;</span>	<span class="comment">// MaxEncoderHeaderTableSize optionally specifies an upper limit for the</span>
<span id="L7192" class="ln">  7192&nbsp;&nbsp;</span>	<span class="comment">// header compression table used for encoding request headers. Received</span>
<span id="L7193" class="ln">  7193&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,</span>
<span id="L7194" class="ln">  7194&nbsp;&nbsp;</span>	<span class="comment">// the default value of 4096 is used.</span>
<span id="L7195" class="ln">  7195&nbsp;&nbsp;</span>	MaxEncoderHeaderTableSize uint32
<span id="L7196" class="ln">  7196&nbsp;&nbsp;</span>
<span id="L7197" class="ln">  7197&nbsp;&nbsp;</span>	<span class="comment">// StrictMaxConcurrentStreams controls whether the server&#39;s</span>
<span id="L7198" class="ln">  7198&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_MAX_CONCURRENT_STREAMS should be respected</span>
<span id="L7199" class="ln">  7199&nbsp;&nbsp;</span>	<span class="comment">// globally. If false, new TCP connections are created to the</span>
<span id="L7200" class="ln">  7200&nbsp;&nbsp;</span>	<span class="comment">// server as needed to keep each under the per-connection</span>
<span id="L7201" class="ln">  7201&nbsp;&nbsp;</span>	<span class="comment">// SETTINGS_MAX_CONCURRENT_STREAMS limit. If true, the</span>
<span id="L7202" class="ln">  7202&nbsp;&nbsp;</span>	<span class="comment">// server&#39;s SETTINGS_MAX_CONCURRENT_STREAMS is interpreted as</span>
<span id="L7203" class="ln">  7203&nbsp;&nbsp;</span>	<span class="comment">// a global limit and callers of RoundTrip block when needed,</span>
<span id="L7204" class="ln">  7204&nbsp;&nbsp;</span>	<span class="comment">// waiting for their turn.</span>
<span id="L7205" class="ln">  7205&nbsp;&nbsp;</span>	StrictMaxConcurrentStreams bool
<span id="L7206" class="ln">  7206&nbsp;&nbsp;</span>
<span id="L7207" class="ln">  7207&nbsp;&nbsp;</span>	<span class="comment">// ReadIdleTimeout is the timeout after which a health check using ping</span>
<span id="L7208" class="ln">  7208&nbsp;&nbsp;</span>	<span class="comment">// frame will be carried out if no frame is received on the connection.</span>
<span id="L7209" class="ln">  7209&nbsp;&nbsp;</span>	<span class="comment">// Note that a ping response will is considered a received frame, so if</span>
<span id="L7210" class="ln">  7210&nbsp;&nbsp;</span>	<span class="comment">// there is no other traffic on the connection, the health check will</span>
<span id="L7211" class="ln">  7211&nbsp;&nbsp;</span>	<span class="comment">// be performed every ReadIdleTimeout interval.</span>
<span id="L7212" class="ln">  7212&nbsp;&nbsp;</span>	<span class="comment">// If zero, no health check is performed.</span>
<span id="L7213" class="ln">  7213&nbsp;&nbsp;</span>	ReadIdleTimeout time.Duration
<span id="L7214" class="ln">  7214&nbsp;&nbsp;</span>
<span id="L7215" class="ln">  7215&nbsp;&nbsp;</span>	<span class="comment">// PingTimeout is the timeout after which the connection will be closed</span>
<span id="L7216" class="ln">  7216&nbsp;&nbsp;</span>	<span class="comment">// if a response to Ping is not received.</span>
<span id="L7217" class="ln">  7217&nbsp;&nbsp;</span>	<span class="comment">// Defaults to 15s.</span>
<span id="L7218" class="ln">  7218&nbsp;&nbsp;</span>	PingTimeout time.Duration
<span id="L7219" class="ln">  7219&nbsp;&nbsp;</span>
<span id="L7220" class="ln">  7220&nbsp;&nbsp;</span>	<span class="comment">// WriteByteTimeout is the timeout after which the connection will be</span>
<span id="L7221" class="ln">  7221&nbsp;&nbsp;</span>	<span class="comment">// closed no data can be written to it. The timeout begins when data is</span>
<span id="L7222" class="ln">  7222&nbsp;&nbsp;</span>	<span class="comment">// available to write, and is extended whenever any bytes are written.</span>
<span id="L7223" class="ln">  7223&nbsp;&nbsp;</span>	WriteByteTimeout time.Duration
<span id="L7224" class="ln">  7224&nbsp;&nbsp;</span>
<span id="L7225" class="ln">  7225&nbsp;&nbsp;</span>	<span class="comment">// CountError, if non-nil, is called on HTTP/2 transport errors.</span>
<span id="L7226" class="ln">  7226&nbsp;&nbsp;</span>	<span class="comment">// It&#39;s intended to increment a metric for monitoring, such</span>
<span id="L7227" class="ln">  7227&nbsp;&nbsp;</span>	<span class="comment">// as an expvar or Prometheus metric.</span>
<span id="L7228" class="ln">  7228&nbsp;&nbsp;</span>	<span class="comment">// The errType consists of only ASCII word characters.</span>
<span id="L7229" class="ln">  7229&nbsp;&nbsp;</span>	CountError func(errType string)
<span id="L7230" class="ln">  7230&nbsp;&nbsp;</span>
<span id="L7231" class="ln">  7231&nbsp;&nbsp;</span>	<span class="comment">// t1, if non-nil, is the standard library Transport using</span>
<span id="L7232" class="ln">  7232&nbsp;&nbsp;</span>	<span class="comment">// this transport. Its settings are used (but not its</span>
<span id="L7233" class="ln">  7233&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip method, etc).</span>
<span id="L7234" class="ln">  7234&nbsp;&nbsp;</span>	t1 *Transport
<span id="L7235" class="ln">  7235&nbsp;&nbsp;</span>
<span id="L7236" class="ln">  7236&nbsp;&nbsp;</span>	connPoolOnce  sync.Once
<span id="L7237" class="ln">  7237&nbsp;&nbsp;</span>	connPoolOrDef http2ClientConnPool <span class="comment">// non-nil version of ConnPool</span>
<span id="L7238" class="ln">  7238&nbsp;&nbsp;</span>}
<span id="L7239" class="ln">  7239&nbsp;&nbsp;</span>
<span id="L7240" class="ln">  7240&nbsp;&nbsp;</span>func (t *http2Transport) maxHeaderListSize() uint32 {
<span id="L7241" class="ln">  7241&nbsp;&nbsp;</span>	if t.MaxHeaderListSize == 0 {
<span id="L7242" class="ln">  7242&nbsp;&nbsp;</span>		return 10 &lt;&lt; 20
<span id="L7243" class="ln">  7243&nbsp;&nbsp;</span>	}
<span id="L7244" class="ln">  7244&nbsp;&nbsp;</span>	if t.MaxHeaderListSize == 0xffffffff {
<span id="L7245" class="ln">  7245&nbsp;&nbsp;</span>		return 0
<span id="L7246" class="ln">  7246&nbsp;&nbsp;</span>	}
<span id="L7247" class="ln">  7247&nbsp;&nbsp;</span>	return t.MaxHeaderListSize
<span id="L7248" class="ln">  7248&nbsp;&nbsp;</span>}
<span id="L7249" class="ln">  7249&nbsp;&nbsp;</span>
<span id="L7250" class="ln">  7250&nbsp;&nbsp;</span>func (t *http2Transport) maxFrameReadSize() uint32 {
<span id="L7251" class="ln">  7251&nbsp;&nbsp;</span>	if t.MaxReadFrameSize == 0 {
<span id="L7252" class="ln">  7252&nbsp;&nbsp;</span>		return 0 <span class="comment">// use the default provided by the peer</span>
<span id="L7253" class="ln">  7253&nbsp;&nbsp;</span>	}
<span id="L7254" class="ln">  7254&nbsp;&nbsp;</span>	if t.MaxReadFrameSize &lt; http2minMaxFrameSize {
<span id="L7255" class="ln">  7255&nbsp;&nbsp;</span>		return http2minMaxFrameSize
<span id="L7256" class="ln">  7256&nbsp;&nbsp;</span>	}
<span id="L7257" class="ln">  7257&nbsp;&nbsp;</span>	if t.MaxReadFrameSize &gt; http2maxFrameSize {
<span id="L7258" class="ln">  7258&nbsp;&nbsp;</span>		return http2maxFrameSize
<span id="L7259" class="ln">  7259&nbsp;&nbsp;</span>	}
<span id="L7260" class="ln">  7260&nbsp;&nbsp;</span>	return t.MaxReadFrameSize
<span id="L7261" class="ln">  7261&nbsp;&nbsp;</span>}
<span id="L7262" class="ln">  7262&nbsp;&nbsp;</span>
<span id="L7263" class="ln">  7263&nbsp;&nbsp;</span>func (t *http2Transport) disableCompression() bool {
<span id="L7264" class="ln">  7264&nbsp;&nbsp;</span>	return t.DisableCompression || (t.t1 != nil &amp;&amp; t.t1.DisableCompression)
<span id="L7265" class="ln">  7265&nbsp;&nbsp;</span>}
<span id="L7266" class="ln">  7266&nbsp;&nbsp;</span>
<span id="L7267" class="ln">  7267&nbsp;&nbsp;</span>func (t *http2Transport) pingTimeout() time.Duration {
<span id="L7268" class="ln">  7268&nbsp;&nbsp;</span>	if t.PingTimeout == 0 {
<span id="L7269" class="ln">  7269&nbsp;&nbsp;</span>		return 15 * time.Second
<span id="L7270" class="ln">  7270&nbsp;&nbsp;</span>	}
<span id="L7271" class="ln">  7271&nbsp;&nbsp;</span>	return t.PingTimeout
<span id="L7272" class="ln">  7272&nbsp;&nbsp;</span>
<span id="L7273" class="ln">  7273&nbsp;&nbsp;</span>}
<span id="L7274" class="ln">  7274&nbsp;&nbsp;</span>
<span id="L7275" class="ln">  7275&nbsp;&nbsp;</span><span class="comment">// ConfigureTransport configures a net/http HTTP/1 Transport to use HTTP/2.</span>
<span id="L7276" class="ln">  7276&nbsp;&nbsp;</span><span class="comment">// It returns an error if t1 has already been HTTP/2-enabled.</span>
<span id="L7277" class="ln">  7277&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7278" class="ln">  7278&nbsp;&nbsp;</span><span class="comment">// Use ConfigureTransports instead to configure the HTTP/2 Transport.</span>
<span id="L7279" class="ln">  7279&nbsp;&nbsp;</span>func http2ConfigureTransport(t1 *Transport) error {
<span id="L7280" class="ln">  7280&nbsp;&nbsp;</span>	_, err := http2ConfigureTransports(t1)
<span id="L7281" class="ln">  7281&nbsp;&nbsp;</span>	return err
<span id="L7282" class="ln">  7282&nbsp;&nbsp;</span>}
<span id="L7283" class="ln">  7283&nbsp;&nbsp;</span>
<span id="L7284" class="ln">  7284&nbsp;&nbsp;</span><span class="comment">// ConfigureTransports configures a net/http HTTP/1 Transport to use HTTP/2.</span>
<span id="L7285" class="ln">  7285&nbsp;&nbsp;</span><span class="comment">// It returns a new HTTP/2 Transport for further configuration.</span>
<span id="L7286" class="ln">  7286&nbsp;&nbsp;</span><span class="comment">// It returns an error if t1 has already been HTTP/2-enabled.</span>
<span id="L7287" class="ln">  7287&nbsp;&nbsp;</span>func http2ConfigureTransports(t1 *Transport) (*http2Transport, error) {
<span id="L7288" class="ln">  7288&nbsp;&nbsp;</span>	return http2configureTransports(t1)
<span id="L7289" class="ln">  7289&nbsp;&nbsp;</span>}
<span id="L7290" class="ln">  7290&nbsp;&nbsp;</span>
<span id="L7291" class="ln">  7291&nbsp;&nbsp;</span>func http2configureTransports(t1 *Transport) (*http2Transport, error) {
<span id="L7292" class="ln">  7292&nbsp;&nbsp;</span>	connPool := new(http2clientConnPool)
<span id="L7293" class="ln">  7293&nbsp;&nbsp;</span>	t2 := &amp;http2Transport{
<span id="L7294" class="ln">  7294&nbsp;&nbsp;</span>		ConnPool: http2noDialClientConnPool{connPool},
<span id="L7295" class="ln">  7295&nbsp;&nbsp;</span>		t1:       t1,
<span id="L7296" class="ln">  7296&nbsp;&nbsp;</span>	}
<span id="L7297" class="ln">  7297&nbsp;&nbsp;</span>	connPool.t = t2
<span id="L7298" class="ln">  7298&nbsp;&nbsp;</span>	if err := http2registerHTTPSProtocol(t1, http2noDialH2RoundTripper{t2}); err != nil {
<span id="L7299" class="ln">  7299&nbsp;&nbsp;</span>		return nil, err
<span id="L7300" class="ln">  7300&nbsp;&nbsp;</span>	}
<span id="L7301" class="ln">  7301&nbsp;&nbsp;</span>	if t1.TLSClientConfig == nil {
<span id="L7302" class="ln">  7302&nbsp;&nbsp;</span>		t1.TLSClientConfig = new(tls.Config)
<span id="L7303" class="ln">  7303&nbsp;&nbsp;</span>	}
<span id="L7304" class="ln">  7304&nbsp;&nbsp;</span>	if !http2strSliceContains(t1.TLSClientConfig.NextProtos, &#34;h2&#34;) {
<span id="L7305" class="ln">  7305&nbsp;&nbsp;</span>		t1.TLSClientConfig.NextProtos = append([]string{&#34;h2&#34;}, t1.TLSClientConfig.NextProtos...)
<span id="L7306" class="ln">  7306&nbsp;&nbsp;</span>	}
<span id="L7307" class="ln">  7307&nbsp;&nbsp;</span>	if !http2strSliceContains(t1.TLSClientConfig.NextProtos, &#34;http/1.1&#34;) {
<span id="L7308" class="ln">  7308&nbsp;&nbsp;</span>		t1.TLSClientConfig.NextProtos = append(t1.TLSClientConfig.NextProtos, &#34;http/1.1&#34;)
<span id="L7309" class="ln">  7309&nbsp;&nbsp;</span>	}
<span id="L7310" class="ln">  7310&nbsp;&nbsp;</span>	upgradeFn := func(authority string, c *tls.Conn) RoundTripper {
<span id="L7311" class="ln">  7311&nbsp;&nbsp;</span>		addr := http2authorityAddr(&#34;https&#34;, authority)
<span id="L7312" class="ln">  7312&nbsp;&nbsp;</span>		if used, err := connPool.addConnIfNeeded(addr, t2, c); err != nil {
<span id="L7313" class="ln">  7313&nbsp;&nbsp;</span>			go c.Close()
<span id="L7314" class="ln">  7314&nbsp;&nbsp;</span>			return http2erringRoundTripper{err}
<span id="L7315" class="ln">  7315&nbsp;&nbsp;</span>		} else if !used {
<span id="L7316" class="ln">  7316&nbsp;&nbsp;</span>			<span class="comment">// Turns out we don&#39;t need this c.</span>
<span id="L7317" class="ln">  7317&nbsp;&nbsp;</span>			<span class="comment">// For example, two goroutines made requests to the same host</span>
<span id="L7318" class="ln">  7318&nbsp;&nbsp;</span>			<span class="comment">// at the same time, both kicking off TCP dials. (since protocol</span>
<span id="L7319" class="ln">  7319&nbsp;&nbsp;</span>			<span class="comment">// was unknown)</span>
<span id="L7320" class="ln">  7320&nbsp;&nbsp;</span>			go c.Close()
<span id="L7321" class="ln">  7321&nbsp;&nbsp;</span>		}
<span id="L7322" class="ln">  7322&nbsp;&nbsp;</span>		return t2
<span id="L7323" class="ln">  7323&nbsp;&nbsp;</span>	}
<span id="L7324" class="ln">  7324&nbsp;&nbsp;</span>	if m := t1.TLSNextProto; len(m) == 0 {
<span id="L7325" class="ln">  7325&nbsp;&nbsp;</span>		t1.TLSNextProto = map[string]func(string, *tls.Conn) RoundTripper{
<span id="L7326" class="ln">  7326&nbsp;&nbsp;</span>			&#34;h2&#34;: upgradeFn,
<span id="L7327" class="ln">  7327&nbsp;&nbsp;</span>		}
<span id="L7328" class="ln">  7328&nbsp;&nbsp;</span>	} else {
<span id="L7329" class="ln">  7329&nbsp;&nbsp;</span>		m[&#34;h2&#34;] = upgradeFn
<span id="L7330" class="ln">  7330&nbsp;&nbsp;</span>	}
<span id="L7331" class="ln">  7331&nbsp;&nbsp;</span>	return t2, nil
<span id="L7332" class="ln">  7332&nbsp;&nbsp;</span>}
<span id="L7333" class="ln">  7333&nbsp;&nbsp;</span>
<span id="L7334" class="ln">  7334&nbsp;&nbsp;</span>func (t *http2Transport) connPool() http2ClientConnPool {
<span id="L7335" class="ln">  7335&nbsp;&nbsp;</span>	t.connPoolOnce.Do(t.initConnPool)
<span id="L7336" class="ln">  7336&nbsp;&nbsp;</span>	return t.connPoolOrDef
<span id="L7337" class="ln">  7337&nbsp;&nbsp;</span>}
<span id="L7338" class="ln">  7338&nbsp;&nbsp;</span>
<span id="L7339" class="ln">  7339&nbsp;&nbsp;</span>func (t *http2Transport) initConnPool() {
<span id="L7340" class="ln">  7340&nbsp;&nbsp;</span>	if t.ConnPool != nil {
<span id="L7341" class="ln">  7341&nbsp;&nbsp;</span>		t.connPoolOrDef = t.ConnPool
<span id="L7342" class="ln">  7342&nbsp;&nbsp;</span>	} else {
<span id="L7343" class="ln">  7343&nbsp;&nbsp;</span>		t.connPoolOrDef = &amp;http2clientConnPool{t: t}
<span id="L7344" class="ln">  7344&nbsp;&nbsp;</span>	}
<span id="L7345" class="ln">  7345&nbsp;&nbsp;</span>}
<span id="L7346" class="ln">  7346&nbsp;&nbsp;</span>
<span id="L7347" class="ln">  7347&nbsp;&nbsp;</span><span class="comment">// ClientConn is the state of a single HTTP/2 client connection to an</span>
<span id="L7348" class="ln">  7348&nbsp;&nbsp;</span><span class="comment">// HTTP/2 server.</span>
<span id="L7349" class="ln">  7349&nbsp;&nbsp;</span>type http2ClientConn struct {
<span id="L7350" class="ln">  7350&nbsp;&nbsp;</span>	t             *http2Transport
<span id="L7351" class="ln">  7351&nbsp;&nbsp;</span>	tconn         net.Conn             <span class="comment">// usually *tls.Conn, except specialized impls</span>
<span id="L7352" class="ln">  7352&nbsp;&nbsp;</span>	tlsState      *tls.ConnectionState <span class="comment">// nil only for specialized impls</span>
<span id="L7353" class="ln">  7353&nbsp;&nbsp;</span>	reused        uint32               <span class="comment">// whether conn is being reused; atomic</span>
<span id="L7354" class="ln">  7354&nbsp;&nbsp;</span>	singleUse     bool                 <span class="comment">// whether being used for a single http.Request</span>
<span id="L7355" class="ln">  7355&nbsp;&nbsp;</span>	getConnCalled bool                 <span class="comment">// used by clientConnPool</span>
<span id="L7356" class="ln">  7356&nbsp;&nbsp;</span>
<span id="L7357" class="ln">  7357&nbsp;&nbsp;</span>	<span class="comment">// readLoop goroutine fields:</span>
<span id="L7358" class="ln">  7358&nbsp;&nbsp;</span>	readerDone chan struct{} <span class="comment">// closed on error</span>
<span id="L7359" class="ln">  7359&nbsp;&nbsp;</span>	readerErr  error         <span class="comment">// set before readerDone is closed</span>
<span id="L7360" class="ln">  7360&nbsp;&nbsp;</span>
<span id="L7361" class="ln">  7361&nbsp;&nbsp;</span>	idleTimeout time.Duration <span class="comment">// or 0 for never</span>
<span id="L7362" class="ln">  7362&nbsp;&nbsp;</span>	idleTimer   *time.Timer
<span id="L7363" class="ln">  7363&nbsp;&nbsp;</span>
<span id="L7364" class="ln">  7364&nbsp;&nbsp;</span>	mu              sync.Mutex   <span class="comment">// guards following</span>
<span id="L7365" class="ln">  7365&nbsp;&nbsp;</span>	cond            *sync.Cond   <span class="comment">// hold mu; broadcast on flow/closed changes</span>
<span id="L7366" class="ln">  7366&nbsp;&nbsp;</span>	flow            http2outflow <span class="comment">// our conn-level flow control quota (cs.outflow is per stream)</span>
<span id="L7367" class="ln">  7367&nbsp;&nbsp;</span>	inflow          http2inflow  <span class="comment">// peer&#39;s conn-level flow control</span>
<span id="L7368" class="ln">  7368&nbsp;&nbsp;</span>	doNotReuse      bool         <span class="comment">// whether conn is marked to not be reused for any future requests</span>
<span id="L7369" class="ln">  7369&nbsp;&nbsp;</span>	closing         bool
<span id="L7370" class="ln">  7370&nbsp;&nbsp;</span>	closed          bool
<span id="L7371" class="ln">  7371&nbsp;&nbsp;</span>	seenSettings    bool                          <span class="comment">// true if we&#39;ve seen a settings frame, false otherwise</span>
<span id="L7372" class="ln">  7372&nbsp;&nbsp;</span>	wantSettingsAck bool                          <span class="comment">// we sent a SETTINGS frame and haven&#39;t heard back</span>
<span id="L7373" class="ln">  7373&nbsp;&nbsp;</span>	goAway          *http2GoAwayFrame             <span class="comment">// if non-nil, the GoAwayFrame we received</span>
<span id="L7374" class="ln">  7374&nbsp;&nbsp;</span>	goAwayDebug     string                        <span class="comment">// goAway frame&#39;s debug data, retained as a string</span>
<span id="L7375" class="ln">  7375&nbsp;&nbsp;</span>	streams         map[uint32]*http2clientStream <span class="comment">// client-initiated</span>
<span id="L7376" class="ln">  7376&nbsp;&nbsp;</span>	streamsReserved int                           <span class="comment">// incr by ReserveNewRequest; decr on RoundTrip</span>
<span id="L7377" class="ln">  7377&nbsp;&nbsp;</span>	nextStreamID    uint32
<span id="L7378" class="ln">  7378&nbsp;&nbsp;</span>	pendingRequests int                       <span class="comment">// requests blocked and waiting to be sent because len(streams) == maxConcurrentStreams</span>
<span id="L7379" class="ln">  7379&nbsp;&nbsp;</span>	pings           map[[8]byte]chan struct{} <span class="comment">// in flight ping data to notification channel</span>
<span id="L7380" class="ln">  7380&nbsp;&nbsp;</span>	br              *bufio.Reader
<span id="L7381" class="ln">  7381&nbsp;&nbsp;</span>	lastActive      time.Time
<span id="L7382" class="ln">  7382&nbsp;&nbsp;</span>	lastIdle        time.Time <span class="comment">// time last idle</span>
<span id="L7383" class="ln">  7383&nbsp;&nbsp;</span>	<span class="comment">// Settings from peer: (also guarded by wmu)</span>
<span id="L7384" class="ln">  7384&nbsp;&nbsp;</span>	maxFrameSize           uint32
<span id="L7385" class="ln">  7385&nbsp;&nbsp;</span>	maxConcurrentStreams   uint32
<span id="L7386" class="ln">  7386&nbsp;&nbsp;</span>	peerMaxHeaderListSize  uint64
<span id="L7387" class="ln">  7387&nbsp;&nbsp;</span>	peerMaxHeaderTableSize uint32
<span id="L7388" class="ln">  7388&nbsp;&nbsp;</span>	initialWindowSize      uint32
<span id="L7389" class="ln">  7389&nbsp;&nbsp;</span>
<span id="L7390" class="ln">  7390&nbsp;&nbsp;</span>	<span class="comment">// reqHeaderMu is a 1-element semaphore channel controlling access to sending new requests.</span>
<span id="L7391" class="ln">  7391&nbsp;&nbsp;</span>	<span class="comment">// Write to reqHeaderMu to lock it, read from it to unlock.</span>
<span id="L7392" class="ln">  7392&nbsp;&nbsp;</span>	<span class="comment">// Lock reqmu BEFORE mu or wmu.</span>
<span id="L7393" class="ln">  7393&nbsp;&nbsp;</span>	reqHeaderMu chan struct{}
<span id="L7394" class="ln">  7394&nbsp;&nbsp;</span>
<span id="L7395" class="ln">  7395&nbsp;&nbsp;</span>	<span class="comment">// wmu is held while writing.</span>
<span id="L7396" class="ln">  7396&nbsp;&nbsp;</span>	<span class="comment">// Acquire BEFORE mu when holding both, to avoid blocking mu on network writes.</span>
<span id="L7397" class="ln">  7397&nbsp;&nbsp;</span>	<span class="comment">// Only acquire both at the same time when changing peer settings.</span>
<span id="L7398" class="ln">  7398&nbsp;&nbsp;</span>	wmu  sync.Mutex
<span id="L7399" class="ln">  7399&nbsp;&nbsp;</span>	bw   *bufio.Writer
<span id="L7400" class="ln">  7400&nbsp;&nbsp;</span>	fr   *http2Framer
<span id="L7401" class="ln">  7401&nbsp;&nbsp;</span>	werr error        <span class="comment">// first write error that has occurred</span>
<span id="L7402" class="ln">  7402&nbsp;&nbsp;</span>	hbuf bytes.Buffer <span class="comment">// HPACK encoder writes into this</span>
<span id="L7403" class="ln">  7403&nbsp;&nbsp;</span>	henc *hpack.Encoder
<span id="L7404" class="ln">  7404&nbsp;&nbsp;</span>}
<span id="L7405" class="ln">  7405&nbsp;&nbsp;</span>
<span id="L7406" class="ln">  7406&nbsp;&nbsp;</span><span class="comment">// clientStream is the state for a single HTTP/2 stream. One of these</span>
<span id="L7407" class="ln">  7407&nbsp;&nbsp;</span><span class="comment">// is created for each Transport.RoundTrip call.</span>
<span id="L7408" class="ln">  7408&nbsp;&nbsp;</span>type http2clientStream struct {
<span id="L7409" class="ln">  7409&nbsp;&nbsp;</span>	cc *http2ClientConn
<span id="L7410" class="ln">  7410&nbsp;&nbsp;</span>
<span id="L7411" class="ln">  7411&nbsp;&nbsp;</span>	<span class="comment">// Fields of Request that we may access even after the response body is closed.</span>
<span id="L7412" class="ln">  7412&nbsp;&nbsp;</span>	ctx       context.Context
<span id="L7413" class="ln">  7413&nbsp;&nbsp;</span>	reqCancel &lt;-chan struct{}
<span id="L7414" class="ln">  7414&nbsp;&nbsp;</span>
<span id="L7415" class="ln">  7415&nbsp;&nbsp;</span>	trace         *httptrace.ClientTrace <span class="comment">// or nil</span>
<span id="L7416" class="ln">  7416&nbsp;&nbsp;</span>	ID            uint32
<span id="L7417" class="ln">  7417&nbsp;&nbsp;</span>	bufPipe       http2pipe <span class="comment">// buffered pipe with the flow-controlled response payload</span>
<span id="L7418" class="ln">  7418&nbsp;&nbsp;</span>	requestedGzip bool
<span id="L7419" class="ln">  7419&nbsp;&nbsp;</span>	isHead        bool
<span id="L7420" class="ln">  7420&nbsp;&nbsp;</span>
<span id="L7421" class="ln">  7421&nbsp;&nbsp;</span>	abortOnce sync.Once
<span id="L7422" class="ln">  7422&nbsp;&nbsp;</span>	abort     chan struct{} <span class="comment">// closed to signal stream should end immediately</span>
<span id="L7423" class="ln">  7423&nbsp;&nbsp;</span>	abortErr  error         <span class="comment">// set if abort is closed</span>
<span id="L7424" class="ln">  7424&nbsp;&nbsp;</span>
<span id="L7425" class="ln">  7425&nbsp;&nbsp;</span>	peerClosed chan struct{} <span class="comment">// closed when the peer sends an END_STREAM flag</span>
<span id="L7426" class="ln">  7426&nbsp;&nbsp;</span>	donec      chan struct{} <span class="comment">// closed after the stream is in the closed state</span>
<span id="L7427" class="ln">  7427&nbsp;&nbsp;</span>	on100      chan struct{} <span class="comment">// buffered; written to if a 100 is received</span>
<span id="L7428" class="ln">  7428&nbsp;&nbsp;</span>
<span id="L7429" class="ln">  7429&nbsp;&nbsp;</span>	respHeaderRecv chan struct{} <span class="comment">// closed when headers are received</span>
<span id="L7430" class="ln">  7430&nbsp;&nbsp;</span>	res            *Response     <span class="comment">// set if respHeaderRecv is closed</span>
<span id="L7431" class="ln">  7431&nbsp;&nbsp;</span>
<span id="L7432" class="ln">  7432&nbsp;&nbsp;</span>	flow        http2outflow <span class="comment">// guarded by cc.mu</span>
<span id="L7433" class="ln">  7433&nbsp;&nbsp;</span>	inflow      http2inflow  <span class="comment">// guarded by cc.mu</span>
<span id="L7434" class="ln">  7434&nbsp;&nbsp;</span>	bytesRemain int64        <span class="comment">// -1 means unknown; owned by transportResponseBody.Read</span>
<span id="L7435" class="ln">  7435&nbsp;&nbsp;</span>	readErr     error        <span class="comment">// sticky read error; owned by transportResponseBody.Read</span>
<span id="L7436" class="ln">  7436&nbsp;&nbsp;</span>
<span id="L7437" class="ln">  7437&nbsp;&nbsp;</span>	reqBody              io.ReadCloser
<span id="L7438" class="ln">  7438&nbsp;&nbsp;</span>	reqBodyContentLength int64         <span class="comment">// -1 means unknown</span>
<span id="L7439" class="ln">  7439&nbsp;&nbsp;</span>	reqBodyClosed        chan struct{} <span class="comment">// guarded by cc.mu; non-nil on Close, closed when done</span>
<span id="L7440" class="ln">  7440&nbsp;&nbsp;</span>
<span id="L7441" class="ln">  7441&nbsp;&nbsp;</span>	<span class="comment">// owned by writeRequest:</span>
<span id="L7442" class="ln">  7442&nbsp;&nbsp;</span>	sentEndStream bool <span class="comment">// sent an END_STREAM flag to the peer</span>
<span id="L7443" class="ln">  7443&nbsp;&nbsp;</span>	sentHeaders   bool
<span id="L7444" class="ln">  7444&nbsp;&nbsp;</span>
<span id="L7445" class="ln">  7445&nbsp;&nbsp;</span>	<span class="comment">// owned by clientConnReadLoop:</span>
<span id="L7446" class="ln">  7446&nbsp;&nbsp;</span>	firstByte    bool  <span class="comment">// got the first response byte</span>
<span id="L7447" class="ln">  7447&nbsp;&nbsp;</span>	pastHeaders  bool  <span class="comment">// got first MetaHeadersFrame (actual headers)</span>
<span id="L7448" class="ln">  7448&nbsp;&nbsp;</span>	pastTrailers bool  <span class="comment">// got optional second MetaHeadersFrame (trailers)</span>
<span id="L7449" class="ln">  7449&nbsp;&nbsp;</span>	num1xx       uint8 <span class="comment">// number of 1xx responses seen</span>
<span id="L7450" class="ln">  7450&nbsp;&nbsp;</span>	readClosed   bool  <span class="comment">// peer sent an END_STREAM flag</span>
<span id="L7451" class="ln">  7451&nbsp;&nbsp;</span>	readAborted  bool  <span class="comment">// read loop reset the stream</span>
<span id="L7452" class="ln">  7452&nbsp;&nbsp;</span>
<span id="L7453" class="ln">  7453&nbsp;&nbsp;</span>	trailer    Header  <span class="comment">// accumulated trailers</span>
<span id="L7454" class="ln">  7454&nbsp;&nbsp;</span>	resTrailer *Header <span class="comment">// client&#39;s Response.Trailer</span>
<span id="L7455" class="ln">  7455&nbsp;&nbsp;</span>}
<span id="L7456" class="ln">  7456&nbsp;&nbsp;</span>
<span id="L7457" class="ln">  7457&nbsp;&nbsp;</span>var http2got1xxFuncForTests func(int, textproto.MIMEHeader) error
<span id="L7458" class="ln">  7458&nbsp;&nbsp;</span>
<span id="L7459" class="ln">  7459&nbsp;&nbsp;</span><span class="comment">// get1xxTraceFunc returns the value of request&#39;s httptrace.ClientTrace.Got1xxResponse func,</span>
<span id="L7460" class="ln">  7460&nbsp;&nbsp;</span><span class="comment">// if any. It returns nil if not set or if the Go version is too old.</span>
<span id="L7461" class="ln">  7461&nbsp;&nbsp;</span>func (cs *http2clientStream) get1xxTraceFunc() func(int, textproto.MIMEHeader) error {
<span id="L7462" class="ln">  7462&nbsp;&nbsp;</span>	if fn := http2got1xxFuncForTests; fn != nil {
<span id="L7463" class="ln">  7463&nbsp;&nbsp;</span>		return fn
<span id="L7464" class="ln">  7464&nbsp;&nbsp;</span>	}
<span id="L7465" class="ln">  7465&nbsp;&nbsp;</span>	return http2traceGot1xxResponseFunc(cs.trace)
<span id="L7466" class="ln">  7466&nbsp;&nbsp;</span>}
<span id="L7467" class="ln">  7467&nbsp;&nbsp;</span>
<span id="L7468" class="ln">  7468&nbsp;&nbsp;</span>func (cs *http2clientStream) abortStream(err error) {
<span id="L7469" class="ln">  7469&nbsp;&nbsp;</span>	cs.cc.mu.Lock()
<span id="L7470" class="ln">  7470&nbsp;&nbsp;</span>	defer cs.cc.mu.Unlock()
<span id="L7471" class="ln">  7471&nbsp;&nbsp;</span>	cs.abortStreamLocked(err)
<span id="L7472" class="ln">  7472&nbsp;&nbsp;</span>}
<span id="L7473" class="ln">  7473&nbsp;&nbsp;</span>
<span id="L7474" class="ln">  7474&nbsp;&nbsp;</span>func (cs *http2clientStream) abortStreamLocked(err error) {
<span id="L7475" class="ln">  7475&nbsp;&nbsp;</span>	cs.abortOnce.Do(func() {
<span id="L7476" class="ln">  7476&nbsp;&nbsp;</span>		cs.abortErr = err
<span id="L7477" class="ln">  7477&nbsp;&nbsp;</span>		close(cs.abort)
<span id="L7478" class="ln">  7478&nbsp;&nbsp;</span>	})
<span id="L7479" class="ln">  7479&nbsp;&nbsp;</span>	if cs.reqBody != nil {
<span id="L7480" class="ln">  7480&nbsp;&nbsp;</span>		cs.closeReqBodyLocked()
<span id="L7481" class="ln">  7481&nbsp;&nbsp;</span>	}
<span id="L7482" class="ln">  7482&nbsp;&nbsp;</span>	<span class="comment">// TODO(dneil): Clean up tests where cs.cc.cond is nil.</span>
<span id="L7483" class="ln">  7483&nbsp;&nbsp;</span>	if cs.cc.cond != nil {
<span id="L7484" class="ln">  7484&nbsp;&nbsp;</span>		<span class="comment">// Wake up writeRequestBody if it is waiting on flow control.</span>
<span id="L7485" class="ln">  7485&nbsp;&nbsp;</span>		cs.cc.cond.Broadcast()
<span id="L7486" class="ln">  7486&nbsp;&nbsp;</span>	}
<span id="L7487" class="ln">  7487&nbsp;&nbsp;</span>}
<span id="L7488" class="ln">  7488&nbsp;&nbsp;</span>
<span id="L7489" class="ln">  7489&nbsp;&nbsp;</span>func (cs *http2clientStream) abortRequestBodyWrite() {
<span id="L7490" class="ln">  7490&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L7491" class="ln">  7491&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7492" class="ln">  7492&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7493" class="ln">  7493&nbsp;&nbsp;</span>	if cs.reqBody != nil &amp;&amp; cs.reqBodyClosed == nil {
<span id="L7494" class="ln">  7494&nbsp;&nbsp;</span>		cs.closeReqBodyLocked()
<span id="L7495" class="ln">  7495&nbsp;&nbsp;</span>		cc.cond.Broadcast()
<span id="L7496" class="ln">  7496&nbsp;&nbsp;</span>	}
<span id="L7497" class="ln">  7497&nbsp;&nbsp;</span>}
<span id="L7498" class="ln">  7498&nbsp;&nbsp;</span>
<span id="L7499" class="ln">  7499&nbsp;&nbsp;</span>func (cs *http2clientStream) closeReqBodyLocked() {
<span id="L7500" class="ln">  7500&nbsp;&nbsp;</span>	if cs.reqBodyClosed != nil {
<span id="L7501" class="ln">  7501&nbsp;&nbsp;</span>		return
<span id="L7502" class="ln">  7502&nbsp;&nbsp;</span>	}
<span id="L7503" class="ln">  7503&nbsp;&nbsp;</span>	cs.reqBodyClosed = make(chan struct{})
<span id="L7504" class="ln">  7504&nbsp;&nbsp;</span>	reqBodyClosed := cs.reqBodyClosed
<span id="L7505" class="ln">  7505&nbsp;&nbsp;</span>	go func() {
<span id="L7506" class="ln">  7506&nbsp;&nbsp;</span>		cs.reqBody.Close()
<span id="L7507" class="ln">  7507&nbsp;&nbsp;</span>		close(reqBodyClosed)
<span id="L7508" class="ln">  7508&nbsp;&nbsp;</span>	}()
<span id="L7509" class="ln">  7509&nbsp;&nbsp;</span>}
<span id="L7510" class="ln">  7510&nbsp;&nbsp;</span>
<span id="L7511" class="ln">  7511&nbsp;&nbsp;</span>type http2stickyErrWriter struct {
<span id="L7512" class="ln">  7512&nbsp;&nbsp;</span>	conn    net.Conn
<span id="L7513" class="ln">  7513&nbsp;&nbsp;</span>	timeout time.Duration
<span id="L7514" class="ln">  7514&nbsp;&nbsp;</span>	err     *error
<span id="L7515" class="ln">  7515&nbsp;&nbsp;</span>}
<span id="L7516" class="ln">  7516&nbsp;&nbsp;</span>
<span id="L7517" class="ln">  7517&nbsp;&nbsp;</span>func (sew http2stickyErrWriter) Write(p []byte) (n int, err error) {
<span id="L7518" class="ln">  7518&nbsp;&nbsp;</span>	if *sew.err != nil {
<span id="L7519" class="ln">  7519&nbsp;&nbsp;</span>		return 0, *sew.err
<span id="L7520" class="ln">  7520&nbsp;&nbsp;</span>	}
<span id="L7521" class="ln">  7521&nbsp;&nbsp;</span>	for {
<span id="L7522" class="ln">  7522&nbsp;&nbsp;</span>		if sew.timeout != 0 {
<span id="L7523" class="ln">  7523&nbsp;&nbsp;</span>			sew.conn.SetWriteDeadline(time.Now().Add(sew.timeout))
<span id="L7524" class="ln">  7524&nbsp;&nbsp;</span>		}
<span id="L7525" class="ln">  7525&nbsp;&nbsp;</span>		nn, err := sew.conn.Write(p[n:])
<span id="L7526" class="ln">  7526&nbsp;&nbsp;</span>		n += nn
<span id="L7527" class="ln">  7527&nbsp;&nbsp;</span>		if n &lt; len(p) &amp;&amp; nn &gt; 0 &amp;&amp; errors.Is(err, os.ErrDeadlineExceeded) {
<span id="L7528" class="ln">  7528&nbsp;&nbsp;</span>			<span class="comment">// Keep extending the deadline so long as we&#39;re making progress.</span>
<span id="L7529" class="ln">  7529&nbsp;&nbsp;</span>			continue
<span id="L7530" class="ln">  7530&nbsp;&nbsp;</span>		}
<span id="L7531" class="ln">  7531&nbsp;&nbsp;</span>		if sew.timeout != 0 {
<span id="L7532" class="ln">  7532&nbsp;&nbsp;</span>			sew.conn.SetWriteDeadline(time.Time{})
<span id="L7533" class="ln">  7533&nbsp;&nbsp;</span>		}
<span id="L7534" class="ln">  7534&nbsp;&nbsp;</span>		*sew.err = err
<span id="L7535" class="ln">  7535&nbsp;&nbsp;</span>		return n, err
<span id="L7536" class="ln">  7536&nbsp;&nbsp;</span>	}
<span id="L7537" class="ln">  7537&nbsp;&nbsp;</span>}
<span id="L7538" class="ln">  7538&nbsp;&nbsp;</span>
<span id="L7539" class="ln">  7539&nbsp;&nbsp;</span><span class="comment">// noCachedConnError is the concrete type of ErrNoCachedConn, which</span>
<span id="L7540" class="ln">  7540&nbsp;&nbsp;</span><span class="comment">// needs to be detected by net/http regardless of whether it&#39;s its</span>
<span id="L7541" class="ln">  7541&nbsp;&nbsp;</span><span class="comment">// bundled version (in h2_bundle.go with a rewritten type name) or</span>
<span id="L7542" class="ln">  7542&nbsp;&nbsp;</span><span class="comment">// from a user&#39;s x/net/http2. As such, as it has a unique method name</span>
<span id="L7543" class="ln">  7543&nbsp;&nbsp;</span><span class="comment">// (IsHTTP2NoCachedConnError) that net/http sniffs for via func</span>
<span id="L7544" class="ln">  7544&nbsp;&nbsp;</span><span class="comment">// isNoCachedConnError.</span>
<span id="L7545" class="ln">  7545&nbsp;&nbsp;</span>type http2noCachedConnError struct{}
<span id="L7546" class="ln">  7546&nbsp;&nbsp;</span>
<span id="L7547" class="ln">  7547&nbsp;&nbsp;</span>func (http2noCachedConnError) IsHTTP2NoCachedConnError() {}
<span id="L7548" class="ln">  7548&nbsp;&nbsp;</span>
<span id="L7549" class="ln">  7549&nbsp;&nbsp;</span>func (http2noCachedConnError) Error() string { return &#34;http2: no cached connection was available&#34; }
<span id="L7550" class="ln">  7550&nbsp;&nbsp;</span>
<span id="L7551" class="ln">  7551&nbsp;&nbsp;</span><span class="comment">// isNoCachedConnError reports whether err is of type noCachedConnError</span>
<span id="L7552" class="ln">  7552&nbsp;&nbsp;</span><span class="comment">// or its equivalent renamed type in net/http2&#39;s h2_bundle.go. Both types</span>
<span id="L7553" class="ln">  7553&nbsp;&nbsp;</span><span class="comment">// may coexist in the same running program.</span>
<span id="L7554" class="ln">  7554&nbsp;&nbsp;</span>func http2isNoCachedConnError(err error) bool {
<span id="L7555" class="ln">  7555&nbsp;&nbsp;</span>	_, ok := err.(interface{ IsHTTP2NoCachedConnError() })
<span id="L7556" class="ln">  7556&nbsp;&nbsp;</span>	return ok
<span id="L7557" class="ln">  7557&nbsp;&nbsp;</span>}
<span id="L7558" class="ln">  7558&nbsp;&nbsp;</span>
<span id="L7559" class="ln">  7559&nbsp;&nbsp;</span>var http2ErrNoCachedConn error = http2noCachedConnError{}
<span id="L7560" class="ln">  7560&nbsp;&nbsp;</span>
<span id="L7561" class="ln">  7561&nbsp;&nbsp;</span><span class="comment">// RoundTripOpt are options for the Transport.RoundTripOpt method.</span>
<span id="L7562" class="ln">  7562&nbsp;&nbsp;</span>type http2RoundTripOpt struct {
<span id="L7563" class="ln">  7563&nbsp;&nbsp;</span>	<span class="comment">// OnlyCachedConn controls whether RoundTripOpt may</span>
<span id="L7564" class="ln">  7564&nbsp;&nbsp;</span>	<span class="comment">// create a new TCP connection. If set true and</span>
<span id="L7565" class="ln">  7565&nbsp;&nbsp;</span>	<span class="comment">// no cached connection is available, RoundTripOpt</span>
<span id="L7566" class="ln">  7566&nbsp;&nbsp;</span>	<span class="comment">// will return ErrNoCachedConn.</span>
<span id="L7567" class="ln">  7567&nbsp;&nbsp;</span>	OnlyCachedConn bool
<span id="L7568" class="ln">  7568&nbsp;&nbsp;</span>}
<span id="L7569" class="ln">  7569&nbsp;&nbsp;</span>
<span id="L7570" class="ln">  7570&nbsp;&nbsp;</span>func (t *http2Transport) RoundTrip(req *Request) (*Response, error) {
<span id="L7571" class="ln">  7571&nbsp;&nbsp;</span>	return t.RoundTripOpt(req, http2RoundTripOpt{})
<span id="L7572" class="ln">  7572&nbsp;&nbsp;</span>}
<span id="L7573" class="ln">  7573&nbsp;&nbsp;</span>
<span id="L7574" class="ln">  7574&nbsp;&nbsp;</span><span class="comment">// authorityAddr returns a given authority (a host/IP, or host:port / ip:port)</span>
<span id="L7575" class="ln">  7575&nbsp;&nbsp;</span><span class="comment">// and returns a host:port. The port 443 is added if needed.</span>
<span id="L7576" class="ln">  7576&nbsp;&nbsp;</span>func http2authorityAddr(scheme string, authority string) (addr string) {
<span id="L7577" class="ln">  7577&nbsp;&nbsp;</span>	host, port, err := net.SplitHostPort(authority)
<span id="L7578" class="ln">  7578&nbsp;&nbsp;</span>	if err != nil { <span class="comment">// authority didn&#39;t have a port</span>
<span id="L7579" class="ln">  7579&nbsp;&nbsp;</span>		host = authority
<span id="L7580" class="ln">  7580&nbsp;&nbsp;</span>		port = &#34;&#34;
<span id="L7581" class="ln">  7581&nbsp;&nbsp;</span>	}
<span id="L7582" class="ln">  7582&nbsp;&nbsp;</span>	if port == &#34;&#34; { <span class="comment">// authority&#39;s port was empty</span>
<span id="L7583" class="ln">  7583&nbsp;&nbsp;</span>		port = &#34;443&#34;
<span id="L7584" class="ln">  7584&nbsp;&nbsp;</span>		if scheme == &#34;http&#34; {
<span id="L7585" class="ln">  7585&nbsp;&nbsp;</span>			port = &#34;80&#34;
<span id="L7586" class="ln">  7586&nbsp;&nbsp;</span>		}
<span id="L7587" class="ln">  7587&nbsp;&nbsp;</span>	}
<span id="L7588" class="ln">  7588&nbsp;&nbsp;</span>	if a, err := idna.ToASCII(host); err == nil {
<span id="L7589" class="ln">  7589&nbsp;&nbsp;</span>		host = a
<span id="L7590" class="ln">  7590&nbsp;&nbsp;</span>	}
<span id="L7591" class="ln">  7591&nbsp;&nbsp;</span>	<span class="comment">// IPv6 address literal, without a port:</span>
<span id="L7592" class="ln">  7592&nbsp;&nbsp;</span>	if strings.HasPrefix(host, &#34;[&#34;) &amp;&amp; strings.HasSuffix(host, &#34;]&#34;) {
<span id="L7593" class="ln">  7593&nbsp;&nbsp;</span>		return host + &#34;:&#34; + port
<span id="L7594" class="ln">  7594&nbsp;&nbsp;</span>	}
<span id="L7595" class="ln">  7595&nbsp;&nbsp;</span>	return net.JoinHostPort(host, port)
<span id="L7596" class="ln">  7596&nbsp;&nbsp;</span>}
<span id="L7597" class="ln">  7597&nbsp;&nbsp;</span>
<span id="L7598" class="ln">  7598&nbsp;&nbsp;</span>var http2retryBackoffHook func(time.Duration) *time.Timer
<span id="L7599" class="ln">  7599&nbsp;&nbsp;</span>
<span id="L7600" class="ln">  7600&nbsp;&nbsp;</span>func http2backoffNewTimer(d time.Duration) *time.Timer {
<span id="L7601" class="ln">  7601&nbsp;&nbsp;</span>	if http2retryBackoffHook != nil {
<span id="L7602" class="ln">  7602&nbsp;&nbsp;</span>		return http2retryBackoffHook(d)
<span id="L7603" class="ln">  7603&nbsp;&nbsp;</span>	}
<span id="L7604" class="ln">  7604&nbsp;&nbsp;</span>	return time.NewTimer(d)
<span id="L7605" class="ln">  7605&nbsp;&nbsp;</span>}
<span id="L7606" class="ln">  7606&nbsp;&nbsp;</span>
<span id="L7607" class="ln">  7607&nbsp;&nbsp;</span><span class="comment">// RoundTripOpt is like RoundTrip, but takes options.</span>
<span id="L7608" class="ln">  7608&nbsp;&nbsp;</span>func (t *http2Transport) RoundTripOpt(req *Request, opt http2RoundTripOpt) (*Response, error) {
<span id="L7609" class="ln">  7609&nbsp;&nbsp;</span>	if !(req.URL.Scheme == &#34;https&#34; || (req.URL.Scheme == &#34;http&#34; &amp;&amp; t.AllowHTTP)) {
<span id="L7610" class="ln">  7610&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http2: unsupported scheme&#34;)
<span id="L7611" class="ln">  7611&nbsp;&nbsp;</span>	}
<span id="L7612" class="ln">  7612&nbsp;&nbsp;</span>
<span id="L7613" class="ln">  7613&nbsp;&nbsp;</span>	addr := http2authorityAddr(req.URL.Scheme, req.URL.Host)
<span id="L7614" class="ln">  7614&nbsp;&nbsp;</span>	for retry := 0; ; retry++ {
<span id="L7615" class="ln">  7615&nbsp;&nbsp;</span>		cc, err := t.connPool().GetClientConn(req, addr)
<span id="L7616" class="ln">  7616&nbsp;&nbsp;</span>		if err != nil {
<span id="L7617" class="ln">  7617&nbsp;&nbsp;</span>			t.vlogf(&#34;http2: Transport failed to get client conn for %s: %v&#34;, addr, err)
<span id="L7618" class="ln">  7618&nbsp;&nbsp;</span>			return nil, err
<span id="L7619" class="ln">  7619&nbsp;&nbsp;</span>		}
<span id="L7620" class="ln">  7620&nbsp;&nbsp;</span>		reused := !atomic.CompareAndSwapUint32(&amp;cc.reused, 0, 1)
<span id="L7621" class="ln">  7621&nbsp;&nbsp;</span>		http2traceGotConn(req, cc, reused)
<span id="L7622" class="ln">  7622&nbsp;&nbsp;</span>		res, err := cc.RoundTrip(req)
<span id="L7623" class="ln">  7623&nbsp;&nbsp;</span>		if err != nil &amp;&amp; retry &lt;= 6 {
<span id="L7624" class="ln">  7624&nbsp;&nbsp;</span>			roundTripErr := err
<span id="L7625" class="ln">  7625&nbsp;&nbsp;</span>			if req, err = http2shouldRetryRequest(req, err); err == nil {
<span id="L7626" class="ln">  7626&nbsp;&nbsp;</span>				<span class="comment">// After the first retry, do exponential backoff with 10% jitter.</span>
<span id="L7627" class="ln">  7627&nbsp;&nbsp;</span>				if retry == 0 {
<span id="L7628" class="ln">  7628&nbsp;&nbsp;</span>					t.vlogf(&#34;RoundTrip retrying after failure: %v&#34;, roundTripErr)
<span id="L7629" class="ln">  7629&nbsp;&nbsp;</span>					continue
<span id="L7630" class="ln">  7630&nbsp;&nbsp;</span>				}
<span id="L7631" class="ln">  7631&nbsp;&nbsp;</span>				backoff := float64(uint(1) &lt;&lt; (uint(retry) - 1))
<span id="L7632" class="ln">  7632&nbsp;&nbsp;</span>				backoff += backoff * (0.1 * mathrand.Float64())
<span id="L7633" class="ln">  7633&nbsp;&nbsp;</span>				d := time.Second * time.Duration(backoff)
<span id="L7634" class="ln">  7634&nbsp;&nbsp;</span>				timer := http2backoffNewTimer(d)
<span id="L7635" class="ln">  7635&nbsp;&nbsp;</span>				select {
<span id="L7636" class="ln">  7636&nbsp;&nbsp;</span>				case &lt;-timer.C:
<span id="L7637" class="ln">  7637&nbsp;&nbsp;</span>					t.vlogf(&#34;RoundTrip retrying after failure: %v&#34;, roundTripErr)
<span id="L7638" class="ln">  7638&nbsp;&nbsp;</span>					continue
<span id="L7639" class="ln">  7639&nbsp;&nbsp;</span>				case &lt;-req.Context().Done():
<span id="L7640" class="ln">  7640&nbsp;&nbsp;</span>					timer.Stop()
<span id="L7641" class="ln">  7641&nbsp;&nbsp;</span>					err = req.Context().Err()
<span id="L7642" class="ln">  7642&nbsp;&nbsp;</span>				}
<span id="L7643" class="ln">  7643&nbsp;&nbsp;</span>			}
<span id="L7644" class="ln">  7644&nbsp;&nbsp;</span>		}
<span id="L7645" class="ln">  7645&nbsp;&nbsp;</span>		if err != nil {
<span id="L7646" class="ln">  7646&nbsp;&nbsp;</span>			t.vlogf(&#34;RoundTrip failure: %v&#34;, err)
<span id="L7647" class="ln">  7647&nbsp;&nbsp;</span>			return nil, err
<span id="L7648" class="ln">  7648&nbsp;&nbsp;</span>		}
<span id="L7649" class="ln">  7649&nbsp;&nbsp;</span>		return res, nil
<span id="L7650" class="ln">  7650&nbsp;&nbsp;</span>	}
<span id="L7651" class="ln">  7651&nbsp;&nbsp;</span>}
<span id="L7652" class="ln">  7652&nbsp;&nbsp;</span>
<span id="L7653" class="ln">  7653&nbsp;&nbsp;</span><span class="comment">// CloseIdleConnections closes any connections which were previously</span>
<span id="L7654" class="ln">  7654&nbsp;&nbsp;</span><span class="comment">// connected from previous requests but are now sitting idle.</span>
<span id="L7655" class="ln">  7655&nbsp;&nbsp;</span><span class="comment">// It does not interrupt any connections currently in use.</span>
<span id="L7656" class="ln">  7656&nbsp;&nbsp;</span>func (t *http2Transport) CloseIdleConnections() {
<span id="L7657" class="ln">  7657&nbsp;&nbsp;</span>	if cp, ok := t.connPool().(http2clientConnPoolIdleCloser); ok {
<span id="L7658" class="ln">  7658&nbsp;&nbsp;</span>		cp.closeIdleConnections()
<span id="L7659" class="ln">  7659&nbsp;&nbsp;</span>	}
<span id="L7660" class="ln">  7660&nbsp;&nbsp;</span>}
<span id="L7661" class="ln">  7661&nbsp;&nbsp;</span>
<span id="L7662" class="ln">  7662&nbsp;&nbsp;</span>var (
<span id="L7663" class="ln">  7663&nbsp;&nbsp;</span>	http2errClientConnClosed    = errors.New(&#34;http2: client conn is closed&#34;)
<span id="L7664" class="ln">  7664&nbsp;&nbsp;</span>	http2errClientConnUnusable  = errors.New(&#34;http2: client conn not usable&#34;)
<span id="L7665" class="ln">  7665&nbsp;&nbsp;</span>	http2errClientConnGotGoAway = errors.New(&#34;http2: Transport received Server&#39;s graceful shutdown GOAWAY&#34;)
<span id="L7666" class="ln">  7666&nbsp;&nbsp;</span>)
<span id="L7667" class="ln">  7667&nbsp;&nbsp;</span>
<span id="L7668" class="ln">  7668&nbsp;&nbsp;</span><span class="comment">// shouldRetryRequest is called by RoundTrip when a request fails to get</span>
<span id="L7669" class="ln">  7669&nbsp;&nbsp;</span><span class="comment">// response headers. It is always called with a non-nil error.</span>
<span id="L7670" class="ln">  7670&nbsp;&nbsp;</span><span class="comment">// It returns either a request to retry (either the same request, or a</span>
<span id="L7671" class="ln">  7671&nbsp;&nbsp;</span><span class="comment">// modified clone), or an error if the request can&#39;t be replayed.</span>
<span id="L7672" class="ln">  7672&nbsp;&nbsp;</span>func http2shouldRetryRequest(req *Request, err error) (*Request, error) {
<span id="L7673" class="ln">  7673&nbsp;&nbsp;</span>	if !http2canRetryError(err) {
<span id="L7674" class="ln">  7674&nbsp;&nbsp;</span>		return nil, err
<span id="L7675" class="ln">  7675&nbsp;&nbsp;</span>	}
<span id="L7676" class="ln">  7676&nbsp;&nbsp;</span>	<span class="comment">// If the Body is nil (or http.NoBody), it&#39;s safe to reuse</span>
<span id="L7677" class="ln">  7677&nbsp;&nbsp;</span>	<span class="comment">// this request and its Body.</span>
<span id="L7678" class="ln">  7678&nbsp;&nbsp;</span>	if req.Body == nil || req.Body == NoBody {
<span id="L7679" class="ln">  7679&nbsp;&nbsp;</span>		return req, nil
<span id="L7680" class="ln">  7680&nbsp;&nbsp;</span>	}
<span id="L7681" class="ln">  7681&nbsp;&nbsp;</span>
<span id="L7682" class="ln">  7682&nbsp;&nbsp;</span>	<span class="comment">// If the request body can be reset back to its original</span>
<span id="L7683" class="ln">  7683&nbsp;&nbsp;</span>	<span class="comment">// state via the optional req.GetBody, do that.</span>
<span id="L7684" class="ln">  7684&nbsp;&nbsp;</span>	if req.GetBody != nil {
<span id="L7685" class="ln">  7685&nbsp;&nbsp;</span>		body, err := req.GetBody()
<span id="L7686" class="ln">  7686&nbsp;&nbsp;</span>		if err != nil {
<span id="L7687" class="ln">  7687&nbsp;&nbsp;</span>			return nil, err
<span id="L7688" class="ln">  7688&nbsp;&nbsp;</span>		}
<span id="L7689" class="ln">  7689&nbsp;&nbsp;</span>		newReq := *req
<span id="L7690" class="ln">  7690&nbsp;&nbsp;</span>		newReq.Body = body
<span id="L7691" class="ln">  7691&nbsp;&nbsp;</span>		return &amp;newReq, nil
<span id="L7692" class="ln">  7692&nbsp;&nbsp;</span>	}
<span id="L7693" class="ln">  7693&nbsp;&nbsp;</span>
<span id="L7694" class="ln">  7694&nbsp;&nbsp;</span>	<span class="comment">// The Request.Body can&#39;t reset back to the beginning, but we</span>
<span id="L7695" class="ln">  7695&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t seem to have started to read from it yet, so reuse</span>
<span id="L7696" class="ln">  7696&nbsp;&nbsp;</span>	<span class="comment">// the request directly.</span>
<span id="L7697" class="ln">  7697&nbsp;&nbsp;</span>	if err == http2errClientConnUnusable {
<span id="L7698" class="ln">  7698&nbsp;&nbsp;</span>		return req, nil
<span id="L7699" class="ln">  7699&nbsp;&nbsp;</span>	}
<span id="L7700" class="ln">  7700&nbsp;&nbsp;</span>
<span id="L7701" class="ln">  7701&nbsp;&nbsp;</span>	return nil, fmt.Errorf(&#34;http2: Transport: cannot retry err [%v] after Request.Body was written; define Request.GetBody to avoid this error&#34;, err)
<span id="L7702" class="ln">  7702&nbsp;&nbsp;</span>}
<span id="L7703" class="ln">  7703&nbsp;&nbsp;</span>
<span id="L7704" class="ln">  7704&nbsp;&nbsp;</span>func http2canRetryError(err error) bool {
<span id="L7705" class="ln">  7705&nbsp;&nbsp;</span>	if err == http2errClientConnUnusable || err == http2errClientConnGotGoAway {
<span id="L7706" class="ln">  7706&nbsp;&nbsp;</span>		return true
<span id="L7707" class="ln">  7707&nbsp;&nbsp;</span>	}
<span id="L7708" class="ln">  7708&nbsp;&nbsp;</span>	if se, ok := err.(http2StreamError); ok {
<span id="L7709" class="ln">  7709&nbsp;&nbsp;</span>		if se.Code == http2ErrCodeProtocol &amp;&amp; se.Cause == http2errFromPeer {
<span id="L7710" class="ln">  7710&nbsp;&nbsp;</span>			<span class="comment">// See golang/go#47635, golang/go#42777</span>
<span id="L7711" class="ln">  7711&nbsp;&nbsp;</span>			return true
<span id="L7712" class="ln">  7712&nbsp;&nbsp;</span>		}
<span id="L7713" class="ln">  7713&nbsp;&nbsp;</span>		return se.Code == http2ErrCodeRefusedStream
<span id="L7714" class="ln">  7714&nbsp;&nbsp;</span>	}
<span id="L7715" class="ln">  7715&nbsp;&nbsp;</span>	return false
<span id="L7716" class="ln">  7716&nbsp;&nbsp;</span>}
<span id="L7717" class="ln">  7717&nbsp;&nbsp;</span>
<span id="L7718" class="ln">  7718&nbsp;&nbsp;</span>func (t *http2Transport) dialClientConn(ctx context.Context, addr string, singleUse bool) (*http2ClientConn, error) {
<span id="L7719" class="ln">  7719&nbsp;&nbsp;</span>	host, _, err := net.SplitHostPort(addr)
<span id="L7720" class="ln">  7720&nbsp;&nbsp;</span>	if err != nil {
<span id="L7721" class="ln">  7721&nbsp;&nbsp;</span>		return nil, err
<span id="L7722" class="ln">  7722&nbsp;&nbsp;</span>	}
<span id="L7723" class="ln">  7723&nbsp;&nbsp;</span>	tconn, err := t.dialTLS(ctx, &#34;tcp&#34;, addr, t.newTLSConfig(host))
<span id="L7724" class="ln">  7724&nbsp;&nbsp;</span>	if err != nil {
<span id="L7725" class="ln">  7725&nbsp;&nbsp;</span>		return nil, err
<span id="L7726" class="ln">  7726&nbsp;&nbsp;</span>	}
<span id="L7727" class="ln">  7727&nbsp;&nbsp;</span>	return t.newClientConn(tconn, singleUse)
<span id="L7728" class="ln">  7728&nbsp;&nbsp;</span>}
<span id="L7729" class="ln">  7729&nbsp;&nbsp;</span>
<span id="L7730" class="ln">  7730&nbsp;&nbsp;</span>func (t *http2Transport) newTLSConfig(host string) *tls.Config {
<span id="L7731" class="ln">  7731&nbsp;&nbsp;</span>	cfg := new(tls.Config)
<span id="L7732" class="ln">  7732&nbsp;&nbsp;</span>	if t.TLSClientConfig != nil {
<span id="L7733" class="ln">  7733&nbsp;&nbsp;</span>		*cfg = *t.TLSClientConfig.Clone()
<span id="L7734" class="ln">  7734&nbsp;&nbsp;</span>	}
<span id="L7735" class="ln">  7735&nbsp;&nbsp;</span>	if !http2strSliceContains(cfg.NextProtos, http2NextProtoTLS) {
<span id="L7736" class="ln">  7736&nbsp;&nbsp;</span>		cfg.NextProtos = append([]string{http2NextProtoTLS}, cfg.NextProtos...)
<span id="L7737" class="ln">  7737&nbsp;&nbsp;</span>	}
<span id="L7738" class="ln">  7738&nbsp;&nbsp;</span>	if cfg.ServerName == &#34;&#34; {
<span id="L7739" class="ln">  7739&nbsp;&nbsp;</span>		cfg.ServerName = host
<span id="L7740" class="ln">  7740&nbsp;&nbsp;</span>	}
<span id="L7741" class="ln">  7741&nbsp;&nbsp;</span>	return cfg
<span id="L7742" class="ln">  7742&nbsp;&nbsp;</span>}
<span id="L7743" class="ln">  7743&nbsp;&nbsp;</span>
<span id="L7744" class="ln">  7744&nbsp;&nbsp;</span>func (t *http2Transport) dialTLS(ctx context.Context, network, addr string, tlsCfg *tls.Config) (net.Conn, error) {
<span id="L7745" class="ln">  7745&nbsp;&nbsp;</span>	if t.DialTLSContext != nil {
<span id="L7746" class="ln">  7746&nbsp;&nbsp;</span>		return t.DialTLSContext(ctx, network, addr, tlsCfg)
<span id="L7747" class="ln">  7747&nbsp;&nbsp;</span>	} else if t.DialTLS != nil {
<span id="L7748" class="ln">  7748&nbsp;&nbsp;</span>		return t.DialTLS(network, addr, tlsCfg)
<span id="L7749" class="ln">  7749&nbsp;&nbsp;</span>	}
<span id="L7750" class="ln">  7750&nbsp;&nbsp;</span>
<span id="L7751" class="ln">  7751&nbsp;&nbsp;</span>	tlsCn, err := t.dialTLSWithContext(ctx, network, addr, tlsCfg)
<span id="L7752" class="ln">  7752&nbsp;&nbsp;</span>	if err != nil {
<span id="L7753" class="ln">  7753&nbsp;&nbsp;</span>		return nil, err
<span id="L7754" class="ln">  7754&nbsp;&nbsp;</span>	}
<span id="L7755" class="ln">  7755&nbsp;&nbsp;</span>	state := tlsCn.ConnectionState()
<span id="L7756" class="ln">  7756&nbsp;&nbsp;</span>	if p := state.NegotiatedProtocol; p != http2NextProtoTLS {
<span id="L7757" class="ln">  7757&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;http2: unexpected ALPN protocol %q; want %q&#34;, p, http2NextProtoTLS)
<span id="L7758" class="ln">  7758&nbsp;&nbsp;</span>	}
<span id="L7759" class="ln">  7759&nbsp;&nbsp;</span>	if !state.NegotiatedProtocolIsMutual {
<span id="L7760" class="ln">  7760&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http2: could not negotiate protocol mutually&#34;)
<span id="L7761" class="ln">  7761&nbsp;&nbsp;</span>	}
<span id="L7762" class="ln">  7762&nbsp;&nbsp;</span>	return tlsCn, nil
<span id="L7763" class="ln">  7763&nbsp;&nbsp;</span>}
<span id="L7764" class="ln">  7764&nbsp;&nbsp;</span>
<span id="L7765" class="ln">  7765&nbsp;&nbsp;</span><span class="comment">// disableKeepAlives reports whether connections should be closed as</span>
<span id="L7766" class="ln">  7766&nbsp;&nbsp;</span><span class="comment">// soon as possible after handling the first request.</span>
<span id="L7767" class="ln">  7767&nbsp;&nbsp;</span>func (t *http2Transport) disableKeepAlives() bool {
<span id="L7768" class="ln">  7768&nbsp;&nbsp;</span>	return t.t1 != nil &amp;&amp; t.t1.DisableKeepAlives
<span id="L7769" class="ln">  7769&nbsp;&nbsp;</span>}
<span id="L7770" class="ln">  7770&nbsp;&nbsp;</span>
<span id="L7771" class="ln">  7771&nbsp;&nbsp;</span>func (t *http2Transport) expectContinueTimeout() time.Duration {
<span id="L7772" class="ln">  7772&nbsp;&nbsp;</span>	if t.t1 == nil {
<span id="L7773" class="ln">  7773&nbsp;&nbsp;</span>		return 0
<span id="L7774" class="ln">  7774&nbsp;&nbsp;</span>	}
<span id="L7775" class="ln">  7775&nbsp;&nbsp;</span>	return t.t1.ExpectContinueTimeout
<span id="L7776" class="ln">  7776&nbsp;&nbsp;</span>}
<span id="L7777" class="ln">  7777&nbsp;&nbsp;</span>
<span id="L7778" class="ln">  7778&nbsp;&nbsp;</span>func (t *http2Transport) maxDecoderHeaderTableSize() uint32 {
<span id="L7779" class="ln">  7779&nbsp;&nbsp;</span>	if v := t.MaxDecoderHeaderTableSize; v &gt; 0 {
<span id="L7780" class="ln">  7780&nbsp;&nbsp;</span>		return v
<span id="L7781" class="ln">  7781&nbsp;&nbsp;</span>	}
<span id="L7782" class="ln">  7782&nbsp;&nbsp;</span>	return http2initialHeaderTableSize
<span id="L7783" class="ln">  7783&nbsp;&nbsp;</span>}
<span id="L7784" class="ln">  7784&nbsp;&nbsp;</span>
<span id="L7785" class="ln">  7785&nbsp;&nbsp;</span>func (t *http2Transport) maxEncoderHeaderTableSize() uint32 {
<span id="L7786" class="ln">  7786&nbsp;&nbsp;</span>	if v := t.MaxEncoderHeaderTableSize; v &gt; 0 {
<span id="L7787" class="ln">  7787&nbsp;&nbsp;</span>		return v
<span id="L7788" class="ln">  7788&nbsp;&nbsp;</span>	}
<span id="L7789" class="ln">  7789&nbsp;&nbsp;</span>	return http2initialHeaderTableSize
<span id="L7790" class="ln">  7790&nbsp;&nbsp;</span>}
<span id="L7791" class="ln">  7791&nbsp;&nbsp;</span>
<span id="L7792" class="ln">  7792&nbsp;&nbsp;</span>func (t *http2Transport) NewClientConn(c net.Conn) (*http2ClientConn, error) {
<span id="L7793" class="ln">  7793&nbsp;&nbsp;</span>	return t.newClientConn(c, t.disableKeepAlives())
<span id="L7794" class="ln">  7794&nbsp;&nbsp;</span>}
<span id="L7795" class="ln">  7795&nbsp;&nbsp;</span>
<span id="L7796" class="ln">  7796&nbsp;&nbsp;</span>func (t *http2Transport) newClientConn(c net.Conn, singleUse bool) (*http2ClientConn, error) {
<span id="L7797" class="ln">  7797&nbsp;&nbsp;</span>	cc := &amp;http2ClientConn{
<span id="L7798" class="ln">  7798&nbsp;&nbsp;</span>		t:                     t,
<span id="L7799" class="ln">  7799&nbsp;&nbsp;</span>		tconn:                 c,
<span id="L7800" class="ln">  7800&nbsp;&nbsp;</span>		readerDone:            make(chan struct{}),
<span id="L7801" class="ln">  7801&nbsp;&nbsp;</span>		nextStreamID:          1,
<span id="L7802" class="ln">  7802&nbsp;&nbsp;</span>		maxFrameSize:          16 &lt;&lt; 10,                         <span class="comment">// spec default</span>
<span id="L7803" class="ln">  7803&nbsp;&nbsp;</span>		initialWindowSize:     65535,                            <span class="comment">// spec default</span>
<span id="L7804" class="ln">  7804&nbsp;&nbsp;</span>		maxConcurrentStreams:  http2initialMaxConcurrentStreams, <span class="comment">// &#34;infinite&#34;, per spec. Use a smaller value until we have received server settings.</span>
<span id="L7805" class="ln">  7805&nbsp;&nbsp;</span>		peerMaxHeaderListSize: 0xffffffffffffffff,               <span class="comment">// &#34;infinite&#34;, per spec. Use 2^64-1 instead.</span>
<span id="L7806" class="ln">  7806&nbsp;&nbsp;</span>		streams:               make(map[uint32]*http2clientStream),
<span id="L7807" class="ln">  7807&nbsp;&nbsp;</span>		singleUse:             singleUse,
<span id="L7808" class="ln">  7808&nbsp;&nbsp;</span>		wantSettingsAck:       true,
<span id="L7809" class="ln">  7809&nbsp;&nbsp;</span>		pings:                 make(map[[8]byte]chan struct{}),
<span id="L7810" class="ln">  7810&nbsp;&nbsp;</span>		reqHeaderMu:           make(chan struct{}, 1),
<span id="L7811" class="ln">  7811&nbsp;&nbsp;</span>	}
<span id="L7812" class="ln">  7812&nbsp;&nbsp;</span>	if d := t.idleConnTimeout(); d != 0 {
<span id="L7813" class="ln">  7813&nbsp;&nbsp;</span>		cc.idleTimeout = d
<span id="L7814" class="ln">  7814&nbsp;&nbsp;</span>		cc.idleTimer = time.AfterFunc(d, cc.onIdleTimeout)
<span id="L7815" class="ln">  7815&nbsp;&nbsp;</span>	}
<span id="L7816" class="ln">  7816&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L7817" class="ln">  7817&nbsp;&nbsp;</span>		t.vlogf(&#34;http2: Transport creating client conn %p to %v&#34;, cc, c.RemoteAddr())
<span id="L7818" class="ln">  7818&nbsp;&nbsp;</span>	}
<span id="L7819" class="ln">  7819&nbsp;&nbsp;</span>
<span id="L7820" class="ln">  7820&nbsp;&nbsp;</span>	cc.cond = sync.NewCond(&amp;cc.mu)
<span id="L7821" class="ln">  7821&nbsp;&nbsp;</span>	cc.flow.add(int32(http2initialWindowSize))
<span id="L7822" class="ln">  7822&nbsp;&nbsp;</span>
<span id="L7823" class="ln">  7823&nbsp;&nbsp;</span>	<span class="comment">// TODO: adjust this writer size to account for frame size +</span>
<span id="L7824" class="ln">  7824&nbsp;&nbsp;</span>	<span class="comment">// MTU + crypto/tls record padding.</span>
<span id="L7825" class="ln">  7825&nbsp;&nbsp;</span>	cc.bw = bufio.NewWriter(http2stickyErrWriter{
<span id="L7826" class="ln">  7826&nbsp;&nbsp;</span>		conn:    c,
<span id="L7827" class="ln">  7827&nbsp;&nbsp;</span>		timeout: t.WriteByteTimeout,
<span id="L7828" class="ln">  7828&nbsp;&nbsp;</span>		err:     &amp;cc.werr,
<span id="L7829" class="ln">  7829&nbsp;&nbsp;</span>	})
<span id="L7830" class="ln">  7830&nbsp;&nbsp;</span>	cc.br = bufio.NewReader(c)
<span id="L7831" class="ln">  7831&nbsp;&nbsp;</span>	cc.fr = http2NewFramer(cc.bw, cc.br)
<span id="L7832" class="ln">  7832&nbsp;&nbsp;</span>	if t.maxFrameReadSize() != 0 {
<span id="L7833" class="ln">  7833&nbsp;&nbsp;</span>		cc.fr.SetMaxReadFrameSize(t.maxFrameReadSize())
<span id="L7834" class="ln">  7834&nbsp;&nbsp;</span>	}
<span id="L7835" class="ln">  7835&nbsp;&nbsp;</span>	if t.CountError != nil {
<span id="L7836" class="ln">  7836&nbsp;&nbsp;</span>		cc.fr.countError = t.CountError
<span id="L7837" class="ln">  7837&nbsp;&nbsp;</span>	}
<span id="L7838" class="ln">  7838&nbsp;&nbsp;</span>	maxHeaderTableSize := t.maxDecoderHeaderTableSize()
<span id="L7839" class="ln">  7839&nbsp;&nbsp;</span>	cc.fr.ReadMetaHeaders = hpack.NewDecoder(maxHeaderTableSize, nil)
<span id="L7840" class="ln">  7840&nbsp;&nbsp;</span>	cc.fr.MaxHeaderListSize = t.maxHeaderListSize()
<span id="L7841" class="ln">  7841&nbsp;&nbsp;</span>
<span id="L7842" class="ln">  7842&nbsp;&nbsp;</span>	cc.henc = hpack.NewEncoder(&amp;cc.hbuf)
<span id="L7843" class="ln">  7843&nbsp;&nbsp;</span>	cc.henc.SetMaxDynamicTableSizeLimit(t.maxEncoderHeaderTableSize())
<span id="L7844" class="ln">  7844&nbsp;&nbsp;</span>	cc.peerMaxHeaderTableSize = http2initialHeaderTableSize
<span id="L7845" class="ln">  7845&nbsp;&nbsp;</span>
<span id="L7846" class="ln">  7846&nbsp;&nbsp;</span>	if t.AllowHTTP {
<span id="L7847" class="ln">  7847&nbsp;&nbsp;</span>		cc.nextStreamID = 3
<span id="L7848" class="ln">  7848&nbsp;&nbsp;</span>	}
<span id="L7849" class="ln">  7849&nbsp;&nbsp;</span>
<span id="L7850" class="ln">  7850&nbsp;&nbsp;</span>	if cs, ok := c.(http2connectionStater); ok {
<span id="L7851" class="ln">  7851&nbsp;&nbsp;</span>		state := cs.ConnectionState()
<span id="L7852" class="ln">  7852&nbsp;&nbsp;</span>		cc.tlsState = &amp;state
<span id="L7853" class="ln">  7853&nbsp;&nbsp;</span>	}
<span id="L7854" class="ln">  7854&nbsp;&nbsp;</span>
<span id="L7855" class="ln">  7855&nbsp;&nbsp;</span>	initialSettings := []http2Setting{
<span id="L7856" class="ln">  7856&nbsp;&nbsp;</span>		{ID: http2SettingEnablePush, Val: 0},
<span id="L7857" class="ln">  7857&nbsp;&nbsp;</span>		{ID: http2SettingInitialWindowSize, Val: http2transportDefaultStreamFlow},
<span id="L7858" class="ln">  7858&nbsp;&nbsp;</span>	}
<span id="L7859" class="ln">  7859&nbsp;&nbsp;</span>	if max := t.maxFrameReadSize(); max != 0 {
<span id="L7860" class="ln">  7860&nbsp;&nbsp;</span>		initialSettings = append(initialSettings, http2Setting{ID: http2SettingMaxFrameSize, Val: max})
<span id="L7861" class="ln">  7861&nbsp;&nbsp;</span>	}
<span id="L7862" class="ln">  7862&nbsp;&nbsp;</span>	if max := t.maxHeaderListSize(); max != 0 {
<span id="L7863" class="ln">  7863&nbsp;&nbsp;</span>		initialSettings = append(initialSettings, http2Setting{ID: http2SettingMaxHeaderListSize, Val: max})
<span id="L7864" class="ln">  7864&nbsp;&nbsp;</span>	}
<span id="L7865" class="ln">  7865&nbsp;&nbsp;</span>	if maxHeaderTableSize != http2initialHeaderTableSize {
<span id="L7866" class="ln">  7866&nbsp;&nbsp;</span>		initialSettings = append(initialSettings, http2Setting{ID: http2SettingHeaderTableSize, Val: maxHeaderTableSize})
<span id="L7867" class="ln">  7867&nbsp;&nbsp;</span>	}
<span id="L7868" class="ln">  7868&nbsp;&nbsp;</span>
<span id="L7869" class="ln">  7869&nbsp;&nbsp;</span>	cc.bw.Write(http2clientPreface)
<span id="L7870" class="ln">  7870&nbsp;&nbsp;</span>	cc.fr.WriteSettings(initialSettings...)
<span id="L7871" class="ln">  7871&nbsp;&nbsp;</span>	cc.fr.WriteWindowUpdate(0, http2transportDefaultConnFlow)
<span id="L7872" class="ln">  7872&nbsp;&nbsp;</span>	cc.inflow.init(http2transportDefaultConnFlow + http2initialWindowSize)
<span id="L7873" class="ln">  7873&nbsp;&nbsp;</span>	cc.bw.Flush()
<span id="L7874" class="ln">  7874&nbsp;&nbsp;</span>	if cc.werr != nil {
<span id="L7875" class="ln">  7875&nbsp;&nbsp;</span>		cc.Close()
<span id="L7876" class="ln">  7876&nbsp;&nbsp;</span>		return nil, cc.werr
<span id="L7877" class="ln">  7877&nbsp;&nbsp;</span>	}
<span id="L7878" class="ln">  7878&nbsp;&nbsp;</span>
<span id="L7879" class="ln">  7879&nbsp;&nbsp;</span>	go cc.readLoop()
<span id="L7880" class="ln">  7880&nbsp;&nbsp;</span>	return cc, nil
<span id="L7881" class="ln">  7881&nbsp;&nbsp;</span>}
<span id="L7882" class="ln">  7882&nbsp;&nbsp;</span>
<span id="L7883" class="ln">  7883&nbsp;&nbsp;</span>func (cc *http2ClientConn) healthCheck() {
<span id="L7884" class="ln">  7884&nbsp;&nbsp;</span>	pingTimeout := cc.t.pingTimeout()
<span id="L7885" class="ln">  7885&nbsp;&nbsp;</span>	<span class="comment">// We don&#39;t need to periodically ping in the health check, because the readLoop of ClientConn will</span>
<span id="L7886" class="ln">  7886&nbsp;&nbsp;</span>	<span class="comment">// trigger the healthCheck again if there is no frame received.</span>
<span id="L7887" class="ln">  7887&nbsp;&nbsp;</span>	ctx, cancel := context.WithTimeout(context.Background(), pingTimeout)
<span id="L7888" class="ln">  7888&nbsp;&nbsp;</span>	defer cancel()
<span id="L7889" class="ln">  7889&nbsp;&nbsp;</span>	cc.vlogf(&#34;http2: Transport sending health check&#34;)
<span id="L7890" class="ln">  7890&nbsp;&nbsp;</span>	err := cc.Ping(ctx)
<span id="L7891" class="ln">  7891&nbsp;&nbsp;</span>	if err != nil {
<span id="L7892" class="ln">  7892&nbsp;&nbsp;</span>		cc.vlogf(&#34;http2: Transport health check failure: %v&#34;, err)
<span id="L7893" class="ln">  7893&nbsp;&nbsp;</span>		cc.closeForLostPing()
<span id="L7894" class="ln">  7894&nbsp;&nbsp;</span>	} else {
<span id="L7895" class="ln">  7895&nbsp;&nbsp;</span>		cc.vlogf(&#34;http2: Transport health check success&#34;)
<span id="L7896" class="ln">  7896&nbsp;&nbsp;</span>	}
<span id="L7897" class="ln">  7897&nbsp;&nbsp;</span>}
<span id="L7898" class="ln">  7898&nbsp;&nbsp;</span>
<span id="L7899" class="ln">  7899&nbsp;&nbsp;</span><span class="comment">// SetDoNotReuse marks cc as not reusable for future HTTP requests.</span>
<span id="L7900" class="ln">  7900&nbsp;&nbsp;</span>func (cc *http2ClientConn) SetDoNotReuse() {
<span id="L7901" class="ln">  7901&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7902" class="ln">  7902&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7903" class="ln">  7903&nbsp;&nbsp;</span>	cc.doNotReuse = true
<span id="L7904" class="ln">  7904&nbsp;&nbsp;</span>}
<span id="L7905" class="ln">  7905&nbsp;&nbsp;</span>
<span id="L7906" class="ln">  7906&nbsp;&nbsp;</span>func (cc *http2ClientConn) setGoAway(f *http2GoAwayFrame) {
<span id="L7907" class="ln">  7907&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7908" class="ln">  7908&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7909" class="ln">  7909&nbsp;&nbsp;</span>
<span id="L7910" class="ln">  7910&nbsp;&nbsp;</span>	old := cc.goAway
<span id="L7911" class="ln">  7911&nbsp;&nbsp;</span>	cc.goAway = f
<span id="L7912" class="ln">  7912&nbsp;&nbsp;</span>
<span id="L7913" class="ln">  7913&nbsp;&nbsp;</span>	<span class="comment">// Merge the previous and current GoAway error frames.</span>
<span id="L7914" class="ln">  7914&nbsp;&nbsp;</span>	if cc.goAwayDebug == &#34;&#34; {
<span id="L7915" class="ln">  7915&nbsp;&nbsp;</span>		cc.goAwayDebug = string(f.DebugData())
<span id="L7916" class="ln">  7916&nbsp;&nbsp;</span>	}
<span id="L7917" class="ln">  7917&nbsp;&nbsp;</span>	if old != nil &amp;&amp; old.ErrCode != http2ErrCodeNo {
<span id="L7918" class="ln">  7918&nbsp;&nbsp;</span>		cc.goAway.ErrCode = old.ErrCode
<span id="L7919" class="ln">  7919&nbsp;&nbsp;</span>	}
<span id="L7920" class="ln">  7920&nbsp;&nbsp;</span>	last := f.LastStreamID
<span id="L7921" class="ln">  7921&nbsp;&nbsp;</span>	for streamID, cs := range cc.streams {
<span id="L7922" class="ln">  7922&nbsp;&nbsp;</span>		if streamID &gt; last {
<span id="L7923" class="ln">  7923&nbsp;&nbsp;</span>			cs.abortStreamLocked(http2errClientConnGotGoAway)
<span id="L7924" class="ln">  7924&nbsp;&nbsp;</span>		}
<span id="L7925" class="ln">  7925&nbsp;&nbsp;</span>	}
<span id="L7926" class="ln">  7926&nbsp;&nbsp;</span>}
<span id="L7927" class="ln">  7927&nbsp;&nbsp;</span>
<span id="L7928" class="ln">  7928&nbsp;&nbsp;</span><span class="comment">// CanTakeNewRequest reports whether the connection can take a new request,</span>
<span id="L7929" class="ln">  7929&nbsp;&nbsp;</span><span class="comment">// meaning it has not been closed or received or sent a GOAWAY.</span>
<span id="L7930" class="ln">  7930&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7931" class="ln">  7931&nbsp;&nbsp;</span><span class="comment">// If the caller is going to immediately make a new request on this</span>
<span id="L7932" class="ln">  7932&nbsp;&nbsp;</span><span class="comment">// connection, use ReserveNewRequest instead.</span>
<span id="L7933" class="ln">  7933&nbsp;&nbsp;</span>func (cc *http2ClientConn) CanTakeNewRequest() bool {
<span id="L7934" class="ln">  7934&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7935" class="ln">  7935&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7936" class="ln">  7936&nbsp;&nbsp;</span>	return cc.canTakeNewRequestLocked()
<span id="L7937" class="ln">  7937&nbsp;&nbsp;</span>}
<span id="L7938" class="ln">  7938&nbsp;&nbsp;</span>
<span id="L7939" class="ln">  7939&nbsp;&nbsp;</span><span class="comment">// ReserveNewRequest is like CanTakeNewRequest but also reserves a</span>
<span id="L7940" class="ln">  7940&nbsp;&nbsp;</span><span class="comment">// concurrent stream in cc. The reservation is decremented on the</span>
<span id="L7941" class="ln">  7941&nbsp;&nbsp;</span><span class="comment">// next call to RoundTrip.</span>
<span id="L7942" class="ln">  7942&nbsp;&nbsp;</span>func (cc *http2ClientConn) ReserveNewRequest() bool {
<span id="L7943" class="ln">  7943&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7944" class="ln">  7944&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7945" class="ln">  7945&nbsp;&nbsp;</span>	if st := cc.idleStateLocked(); !st.canTakeNewRequest {
<span id="L7946" class="ln">  7946&nbsp;&nbsp;</span>		return false
<span id="L7947" class="ln">  7947&nbsp;&nbsp;</span>	}
<span id="L7948" class="ln">  7948&nbsp;&nbsp;</span>	cc.streamsReserved++
<span id="L7949" class="ln">  7949&nbsp;&nbsp;</span>	return true
<span id="L7950" class="ln">  7950&nbsp;&nbsp;</span>}
<span id="L7951" class="ln">  7951&nbsp;&nbsp;</span>
<span id="L7952" class="ln">  7952&nbsp;&nbsp;</span><span class="comment">// ClientConnState describes the state of a ClientConn.</span>
<span id="L7953" class="ln">  7953&nbsp;&nbsp;</span>type http2ClientConnState struct {
<span id="L7954" class="ln">  7954&nbsp;&nbsp;</span>	<span class="comment">// Closed is whether the connection is closed.</span>
<span id="L7955" class="ln">  7955&nbsp;&nbsp;</span>	Closed bool
<span id="L7956" class="ln">  7956&nbsp;&nbsp;</span>
<span id="L7957" class="ln">  7957&nbsp;&nbsp;</span>	<span class="comment">// Closing is whether the connection is in the process of</span>
<span id="L7958" class="ln">  7958&nbsp;&nbsp;</span>	<span class="comment">// closing. It may be closing due to shutdown, being a</span>
<span id="L7959" class="ln">  7959&nbsp;&nbsp;</span>	<span class="comment">// single-use connection, being marked as DoNotReuse, or</span>
<span id="L7960" class="ln">  7960&nbsp;&nbsp;</span>	<span class="comment">// having received a GOAWAY frame.</span>
<span id="L7961" class="ln">  7961&nbsp;&nbsp;</span>	Closing bool
<span id="L7962" class="ln">  7962&nbsp;&nbsp;</span>
<span id="L7963" class="ln">  7963&nbsp;&nbsp;</span>	<span class="comment">// StreamsActive is how many streams are active.</span>
<span id="L7964" class="ln">  7964&nbsp;&nbsp;</span>	StreamsActive int
<span id="L7965" class="ln">  7965&nbsp;&nbsp;</span>
<span id="L7966" class="ln">  7966&nbsp;&nbsp;</span>	<span class="comment">// StreamsReserved is how many streams have been reserved via</span>
<span id="L7967" class="ln">  7967&nbsp;&nbsp;</span>	<span class="comment">// ClientConn.ReserveNewRequest.</span>
<span id="L7968" class="ln">  7968&nbsp;&nbsp;</span>	StreamsReserved int
<span id="L7969" class="ln">  7969&nbsp;&nbsp;</span>
<span id="L7970" class="ln">  7970&nbsp;&nbsp;</span>	<span class="comment">// StreamsPending is how many requests have been sent in excess</span>
<span id="L7971" class="ln">  7971&nbsp;&nbsp;</span>	<span class="comment">// of the peer&#39;s advertised MaxConcurrentStreams setting and</span>
<span id="L7972" class="ln">  7972&nbsp;&nbsp;</span>	<span class="comment">// are waiting for other streams to complete.</span>
<span id="L7973" class="ln">  7973&nbsp;&nbsp;</span>	StreamsPending int
<span id="L7974" class="ln">  7974&nbsp;&nbsp;</span>
<span id="L7975" class="ln">  7975&nbsp;&nbsp;</span>	<span class="comment">// MaxConcurrentStreams is how many concurrent streams the</span>
<span id="L7976" class="ln">  7976&nbsp;&nbsp;</span>	<span class="comment">// peer advertised as acceptable. Zero means no SETTINGS</span>
<span id="L7977" class="ln">  7977&nbsp;&nbsp;</span>	<span class="comment">// frame has been received yet.</span>
<span id="L7978" class="ln">  7978&nbsp;&nbsp;</span>	MaxConcurrentStreams uint32
<span id="L7979" class="ln">  7979&nbsp;&nbsp;</span>
<span id="L7980" class="ln">  7980&nbsp;&nbsp;</span>	<span class="comment">// LastIdle, if non-zero, is when the connection last</span>
<span id="L7981" class="ln">  7981&nbsp;&nbsp;</span>	<span class="comment">// transitioned to idle state.</span>
<span id="L7982" class="ln">  7982&nbsp;&nbsp;</span>	LastIdle time.Time
<span id="L7983" class="ln">  7983&nbsp;&nbsp;</span>}
<span id="L7984" class="ln">  7984&nbsp;&nbsp;</span>
<span id="L7985" class="ln">  7985&nbsp;&nbsp;</span><span class="comment">// State returns a snapshot of cc&#39;s state.</span>
<span id="L7986" class="ln">  7986&nbsp;&nbsp;</span>func (cc *http2ClientConn) State() http2ClientConnState {
<span id="L7987" class="ln">  7987&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L7988" class="ln">  7988&nbsp;&nbsp;</span>	maxConcurrent := cc.maxConcurrentStreams
<span id="L7989" class="ln">  7989&nbsp;&nbsp;</span>	if !cc.seenSettings {
<span id="L7990" class="ln">  7990&nbsp;&nbsp;</span>		maxConcurrent = 0
<span id="L7991" class="ln">  7991&nbsp;&nbsp;</span>	}
<span id="L7992" class="ln">  7992&nbsp;&nbsp;</span>	cc.wmu.Unlock()
<span id="L7993" class="ln">  7993&nbsp;&nbsp;</span>
<span id="L7994" class="ln">  7994&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L7995" class="ln">  7995&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L7996" class="ln">  7996&nbsp;&nbsp;</span>	return http2ClientConnState{
<span id="L7997" class="ln">  7997&nbsp;&nbsp;</span>		Closed:               cc.closed,
<span id="L7998" class="ln">  7998&nbsp;&nbsp;</span>		Closing:              cc.closing || cc.singleUse || cc.doNotReuse || cc.goAway != nil,
<span id="L7999" class="ln">  7999&nbsp;&nbsp;</span>		StreamsActive:        len(cc.streams),
<span id="L8000" class="ln">  8000&nbsp;&nbsp;</span>		StreamsReserved:      cc.streamsReserved,
<span id="L8001" class="ln">  8001&nbsp;&nbsp;</span>		StreamsPending:       cc.pendingRequests,
<span id="L8002" class="ln">  8002&nbsp;&nbsp;</span>		LastIdle:             cc.lastIdle,
<span id="L8003" class="ln">  8003&nbsp;&nbsp;</span>		MaxConcurrentStreams: maxConcurrent,
<span id="L8004" class="ln">  8004&nbsp;&nbsp;</span>	}
<span id="L8005" class="ln">  8005&nbsp;&nbsp;</span>}
<span id="L8006" class="ln">  8006&nbsp;&nbsp;</span>
<span id="L8007" class="ln">  8007&nbsp;&nbsp;</span><span class="comment">// clientConnIdleState describes the suitability of a client</span>
<span id="L8008" class="ln">  8008&nbsp;&nbsp;</span><span class="comment">// connection to initiate a new RoundTrip request.</span>
<span id="L8009" class="ln">  8009&nbsp;&nbsp;</span>type http2clientConnIdleState struct {
<span id="L8010" class="ln">  8010&nbsp;&nbsp;</span>	canTakeNewRequest bool
<span id="L8011" class="ln">  8011&nbsp;&nbsp;</span>}
<span id="L8012" class="ln">  8012&nbsp;&nbsp;</span>
<span id="L8013" class="ln">  8013&nbsp;&nbsp;</span>func (cc *http2ClientConn) idleState() http2clientConnIdleState {
<span id="L8014" class="ln">  8014&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8015" class="ln">  8015&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L8016" class="ln">  8016&nbsp;&nbsp;</span>	return cc.idleStateLocked()
<span id="L8017" class="ln">  8017&nbsp;&nbsp;</span>}
<span id="L8018" class="ln">  8018&nbsp;&nbsp;</span>
<span id="L8019" class="ln">  8019&nbsp;&nbsp;</span>func (cc *http2ClientConn) idleStateLocked() (st http2clientConnIdleState) {
<span id="L8020" class="ln">  8020&nbsp;&nbsp;</span>	if cc.singleUse &amp;&amp; cc.nextStreamID &gt; 1 {
<span id="L8021" class="ln">  8021&nbsp;&nbsp;</span>		return
<span id="L8022" class="ln">  8022&nbsp;&nbsp;</span>	}
<span id="L8023" class="ln">  8023&nbsp;&nbsp;</span>	var maxConcurrentOkay bool
<span id="L8024" class="ln">  8024&nbsp;&nbsp;</span>	if cc.t.StrictMaxConcurrentStreams {
<span id="L8025" class="ln">  8025&nbsp;&nbsp;</span>		<span class="comment">// We&#39;ll tell the caller we can take a new request to</span>
<span id="L8026" class="ln">  8026&nbsp;&nbsp;</span>		<span class="comment">// prevent the caller from dialing a new TCP</span>
<span id="L8027" class="ln">  8027&nbsp;&nbsp;</span>		<span class="comment">// connection, but then we&#39;ll block later before</span>
<span id="L8028" class="ln">  8028&nbsp;&nbsp;</span>		<span class="comment">// writing it.</span>
<span id="L8029" class="ln">  8029&nbsp;&nbsp;</span>		maxConcurrentOkay = true
<span id="L8030" class="ln">  8030&nbsp;&nbsp;</span>	} else {
<span id="L8031" class="ln">  8031&nbsp;&nbsp;</span>		maxConcurrentOkay = int64(len(cc.streams)+cc.streamsReserved+1) &lt;= int64(cc.maxConcurrentStreams)
<span id="L8032" class="ln">  8032&nbsp;&nbsp;</span>	}
<span id="L8033" class="ln">  8033&nbsp;&nbsp;</span>
<span id="L8034" class="ln">  8034&nbsp;&nbsp;</span>	st.canTakeNewRequest = cc.goAway == nil &amp;&amp; !cc.closed &amp;&amp; !cc.closing &amp;&amp; maxConcurrentOkay &amp;&amp;
<span id="L8035" class="ln">  8035&nbsp;&nbsp;</span>		!cc.doNotReuse &amp;&amp;
<span id="L8036" class="ln">  8036&nbsp;&nbsp;</span>		int64(cc.nextStreamID)+2*int64(cc.pendingRequests) &lt; math.MaxInt32 &amp;&amp;
<span id="L8037" class="ln">  8037&nbsp;&nbsp;</span>		!cc.tooIdleLocked()
<span id="L8038" class="ln">  8038&nbsp;&nbsp;</span>	return
<span id="L8039" class="ln">  8039&nbsp;&nbsp;</span>}
<span id="L8040" class="ln">  8040&nbsp;&nbsp;</span>
<span id="L8041" class="ln">  8041&nbsp;&nbsp;</span>func (cc *http2ClientConn) canTakeNewRequestLocked() bool {
<span id="L8042" class="ln">  8042&nbsp;&nbsp;</span>	st := cc.idleStateLocked()
<span id="L8043" class="ln">  8043&nbsp;&nbsp;</span>	return st.canTakeNewRequest
<span id="L8044" class="ln">  8044&nbsp;&nbsp;</span>}
<span id="L8045" class="ln">  8045&nbsp;&nbsp;</span>
<span id="L8046" class="ln">  8046&nbsp;&nbsp;</span><span class="comment">// tooIdleLocked reports whether this connection has been been sitting idle</span>
<span id="L8047" class="ln">  8047&nbsp;&nbsp;</span><span class="comment">// for too much wall time.</span>
<span id="L8048" class="ln">  8048&nbsp;&nbsp;</span>func (cc *http2ClientConn) tooIdleLocked() bool {
<span id="L8049" class="ln">  8049&nbsp;&nbsp;</span>	<span class="comment">// The Round(0) strips the monontonic clock reading so the</span>
<span id="L8050" class="ln">  8050&nbsp;&nbsp;</span>	<span class="comment">// times are compared based on their wall time. We don&#39;t want</span>
<span id="L8051" class="ln">  8051&nbsp;&nbsp;</span>	<span class="comment">// to reuse a connection that&#39;s been sitting idle during</span>
<span id="L8052" class="ln">  8052&nbsp;&nbsp;</span>	<span class="comment">// VM/laptop suspend if monotonic time was also frozen.</span>
<span id="L8053" class="ln">  8053&nbsp;&nbsp;</span>	return cc.idleTimeout != 0 &amp;&amp; !cc.lastIdle.IsZero() &amp;&amp; time.Since(cc.lastIdle.Round(0)) &gt; cc.idleTimeout
<span id="L8054" class="ln">  8054&nbsp;&nbsp;</span>}
<span id="L8055" class="ln">  8055&nbsp;&nbsp;</span>
<span id="L8056" class="ln">  8056&nbsp;&nbsp;</span><span class="comment">// onIdleTimeout is called from a time.AfterFunc goroutine. It will</span>
<span id="L8057" class="ln">  8057&nbsp;&nbsp;</span><span class="comment">// only be called when we&#39;re idle, but because we&#39;re coming from a new</span>
<span id="L8058" class="ln">  8058&nbsp;&nbsp;</span><span class="comment">// goroutine, there could be a new request coming in at the same time,</span>
<span id="L8059" class="ln">  8059&nbsp;&nbsp;</span><span class="comment">// so this simply calls the synchronized closeIfIdle to shut down this</span>
<span id="L8060" class="ln">  8060&nbsp;&nbsp;</span><span class="comment">// connection. The timer could just call closeIfIdle, but this is more</span>
<span id="L8061" class="ln">  8061&nbsp;&nbsp;</span><span class="comment">// clear.</span>
<span id="L8062" class="ln">  8062&nbsp;&nbsp;</span>func (cc *http2ClientConn) onIdleTimeout() {
<span id="L8063" class="ln">  8063&nbsp;&nbsp;</span>	cc.closeIfIdle()
<span id="L8064" class="ln">  8064&nbsp;&nbsp;</span>}
<span id="L8065" class="ln">  8065&nbsp;&nbsp;</span>
<span id="L8066" class="ln">  8066&nbsp;&nbsp;</span>func (cc *http2ClientConn) closeConn() {
<span id="L8067" class="ln">  8067&nbsp;&nbsp;</span>	t := time.AfterFunc(250*time.Millisecond, cc.forceCloseConn)
<span id="L8068" class="ln">  8068&nbsp;&nbsp;</span>	defer t.Stop()
<span id="L8069" class="ln">  8069&nbsp;&nbsp;</span>	cc.tconn.Close()
<span id="L8070" class="ln">  8070&nbsp;&nbsp;</span>}
<span id="L8071" class="ln">  8071&nbsp;&nbsp;</span>
<span id="L8072" class="ln">  8072&nbsp;&nbsp;</span><span class="comment">// A tls.Conn.Close can hang for a long time if the peer is unresponsive.</span>
<span id="L8073" class="ln">  8073&nbsp;&nbsp;</span><span class="comment">// Try to shut it down more aggressively.</span>
<span id="L8074" class="ln">  8074&nbsp;&nbsp;</span>func (cc *http2ClientConn) forceCloseConn() {
<span id="L8075" class="ln">  8075&nbsp;&nbsp;</span>	tc, ok := cc.tconn.(*tls.Conn)
<span id="L8076" class="ln">  8076&nbsp;&nbsp;</span>	if !ok {
<span id="L8077" class="ln">  8077&nbsp;&nbsp;</span>		return
<span id="L8078" class="ln">  8078&nbsp;&nbsp;</span>	}
<span id="L8079" class="ln">  8079&nbsp;&nbsp;</span>	if nc := tc.NetConn(); nc != nil {
<span id="L8080" class="ln">  8080&nbsp;&nbsp;</span>		nc.Close()
<span id="L8081" class="ln">  8081&nbsp;&nbsp;</span>	}
<span id="L8082" class="ln">  8082&nbsp;&nbsp;</span>}
<span id="L8083" class="ln">  8083&nbsp;&nbsp;</span>
<span id="L8084" class="ln">  8084&nbsp;&nbsp;</span>func (cc *http2ClientConn) closeIfIdle() {
<span id="L8085" class="ln">  8085&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8086" class="ln">  8086&nbsp;&nbsp;</span>	if len(cc.streams) &gt; 0 || cc.streamsReserved &gt; 0 {
<span id="L8087" class="ln">  8087&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L8088" class="ln">  8088&nbsp;&nbsp;</span>		return
<span id="L8089" class="ln">  8089&nbsp;&nbsp;</span>	}
<span id="L8090" class="ln">  8090&nbsp;&nbsp;</span>	cc.closed = true
<span id="L8091" class="ln">  8091&nbsp;&nbsp;</span>	nextID := cc.nextStreamID
<span id="L8092" class="ln">  8092&nbsp;&nbsp;</span>	<span class="comment">// TODO: do clients send GOAWAY too? maybe? Just Close:</span>
<span id="L8093" class="ln">  8093&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8094" class="ln">  8094&nbsp;&nbsp;</span>
<span id="L8095" class="ln">  8095&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L8096" class="ln">  8096&nbsp;&nbsp;</span>		cc.vlogf(&#34;http2: Transport closing idle conn %p (forSingleUse=%v, maxStream=%v)&#34;, cc, cc.singleUse, nextID-2)
<span id="L8097" class="ln">  8097&nbsp;&nbsp;</span>	}
<span id="L8098" class="ln">  8098&nbsp;&nbsp;</span>	cc.closeConn()
<span id="L8099" class="ln">  8099&nbsp;&nbsp;</span>}
<span id="L8100" class="ln">  8100&nbsp;&nbsp;</span>
<span id="L8101" class="ln">  8101&nbsp;&nbsp;</span>func (cc *http2ClientConn) isDoNotReuseAndIdle() bool {
<span id="L8102" class="ln">  8102&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8103" class="ln">  8103&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L8104" class="ln">  8104&nbsp;&nbsp;</span>	return cc.doNotReuse &amp;&amp; len(cc.streams) == 0
<span id="L8105" class="ln">  8105&nbsp;&nbsp;</span>}
<span id="L8106" class="ln">  8106&nbsp;&nbsp;</span>
<span id="L8107" class="ln">  8107&nbsp;&nbsp;</span>var http2shutdownEnterWaitStateHook = func() {}
<span id="L8108" class="ln">  8108&nbsp;&nbsp;</span>
<span id="L8109" class="ln">  8109&nbsp;&nbsp;</span><span class="comment">// Shutdown gracefully closes the client connection, waiting for running streams to complete.</span>
<span id="L8110" class="ln">  8110&nbsp;&nbsp;</span>func (cc *http2ClientConn) Shutdown(ctx context.Context) error {
<span id="L8111" class="ln">  8111&nbsp;&nbsp;</span>	if err := cc.sendGoAway(); err != nil {
<span id="L8112" class="ln">  8112&nbsp;&nbsp;</span>		return err
<span id="L8113" class="ln">  8113&nbsp;&nbsp;</span>	}
<span id="L8114" class="ln">  8114&nbsp;&nbsp;</span>	<span class="comment">// Wait for all in-flight streams to complete or connection to close</span>
<span id="L8115" class="ln">  8115&nbsp;&nbsp;</span>	done := make(chan struct{})
<span id="L8116" class="ln">  8116&nbsp;&nbsp;</span>	cancelled := false <span class="comment">// guarded by cc.mu</span>
<span id="L8117" class="ln">  8117&nbsp;&nbsp;</span>	go func() {
<span id="L8118" class="ln">  8118&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L8119" class="ln">  8119&nbsp;&nbsp;</span>		defer cc.mu.Unlock()
<span id="L8120" class="ln">  8120&nbsp;&nbsp;</span>		for {
<span id="L8121" class="ln">  8121&nbsp;&nbsp;</span>			if len(cc.streams) == 0 || cc.closed {
<span id="L8122" class="ln">  8122&nbsp;&nbsp;</span>				cc.closed = true
<span id="L8123" class="ln">  8123&nbsp;&nbsp;</span>				close(done)
<span id="L8124" class="ln">  8124&nbsp;&nbsp;</span>				break
<span id="L8125" class="ln">  8125&nbsp;&nbsp;</span>			}
<span id="L8126" class="ln">  8126&nbsp;&nbsp;</span>			if cancelled {
<span id="L8127" class="ln">  8127&nbsp;&nbsp;</span>				break
<span id="L8128" class="ln">  8128&nbsp;&nbsp;</span>			}
<span id="L8129" class="ln">  8129&nbsp;&nbsp;</span>			cc.cond.Wait()
<span id="L8130" class="ln">  8130&nbsp;&nbsp;</span>		}
<span id="L8131" class="ln">  8131&nbsp;&nbsp;</span>	}()
<span id="L8132" class="ln">  8132&nbsp;&nbsp;</span>	http2shutdownEnterWaitStateHook()
<span id="L8133" class="ln">  8133&nbsp;&nbsp;</span>	select {
<span id="L8134" class="ln">  8134&nbsp;&nbsp;</span>	case &lt;-done:
<span id="L8135" class="ln">  8135&nbsp;&nbsp;</span>		cc.closeConn()
<span id="L8136" class="ln">  8136&nbsp;&nbsp;</span>		return nil
<span id="L8137" class="ln">  8137&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L8138" class="ln">  8138&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L8139" class="ln">  8139&nbsp;&nbsp;</span>		<span class="comment">// Free the goroutine above</span>
<span id="L8140" class="ln">  8140&nbsp;&nbsp;</span>		cancelled = true
<span id="L8141" class="ln">  8141&nbsp;&nbsp;</span>		cc.cond.Broadcast()
<span id="L8142" class="ln">  8142&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L8143" class="ln">  8143&nbsp;&nbsp;</span>		return ctx.Err()
<span id="L8144" class="ln">  8144&nbsp;&nbsp;</span>	}
<span id="L8145" class="ln">  8145&nbsp;&nbsp;</span>}
<span id="L8146" class="ln">  8146&nbsp;&nbsp;</span>
<span id="L8147" class="ln">  8147&nbsp;&nbsp;</span>func (cc *http2ClientConn) sendGoAway() error {
<span id="L8148" class="ln">  8148&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8149" class="ln">  8149&nbsp;&nbsp;</span>	closing := cc.closing
<span id="L8150" class="ln">  8150&nbsp;&nbsp;</span>	cc.closing = true
<span id="L8151" class="ln">  8151&nbsp;&nbsp;</span>	maxStreamID := cc.nextStreamID
<span id="L8152" class="ln">  8152&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8153" class="ln">  8153&nbsp;&nbsp;</span>	if closing {
<span id="L8154" class="ln">  8154&nbsp;&nbsp;</span>		<span class="comment">// GOAWAY sent already</span>
<span id="L8155" class="ln">  8155&nbsp;&nbsp;</span>		return nil
<span id="L8156" class="ln">  8156&nbsp;&nbsp;</span>	}
<span id="L8157" class="ln">  8157&nbsp;&nbsp;</span>
<span id="L8158" class="ln">  8158&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L8159" class="ln">  8159&nbsp;&nbsp;</span>	defer cc.wmu.Unlock()
<span id="L8160" class="ln">  8160&nbsp;&nbsp;</span>	<span class="comment">// Send a graceful shutdown frame to server</span>
<span id="L8161" class="ln">  8161&nbsp;&nbsp;</span>	if err := cc.fr.WriteGoAway(maxStreamID, http2ErrCodeNo, nil); err != nil {
<span id="L8162" class="ln">  8162&nbsp;&nbsp;</span>		return err
<span id="L8163" class="ln">  8163&nbsp;&nbsp;</span>	}
<span id="L8164" class="ln">  8164&nbsp;&nbsp;</span>	if err := cc.bw.Flush(); err != nil {
<span id="L8165" class="ln">  8165&nbsp;&nbsp;</span>		return err
<span id="L8166" class="ln">  8166&nbsp;&nbsp;</span>	}
<span id="L8167" class="ln">  8167&nbsp;&nbsp;</span>	<span class="comment">// Prevent new requests</span>
<span id="L8168" class="ln">  8168&nbsp;&nbsp;</span>	return nil
<span id="L8169" class="ln">  8169&nbsp;&nbsp;</span>}
<span id="L8170" class="ln">  8170&nbsp;&nbsp;</span>
<span id="L8171" class="ln">  8171&nbsp;&nbsp;</span><span class="comment">// closes the client connection immediately. In-flight requests are interrupted.</span>
<span id="L8172" class="ln">  8172&nbsp;&nbsp;</span><span class="comment">// err is sent to streams.</span>
<span id="L8173" class="ln">  8173&nbsp;&nbsp;</span>func (cc *http2ClientConn) closeForError(err error) {
<span id="L8174" class="ln">  8174&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8175" class="ln">  8175&nbsp;&nbsp;</span>	cc.closed = true
<span id="L8176" class="ln">  8176&nbsp;&nbsp;</span>	for _, cs := range cc.streams {
<span id="L8177" class="ln">  8177&nbsp;&nbsp;</span>		cs.abortStreamLocked(err)
<span id="L8178" class="ln">  8178&nbsp;&nbsp;</span>	}
<span id="L8179" class="ln">  8179&nbsp;&nbsp;</span>	cc.cond.Broadcast()
<span id="L8180" class="ln">  8180&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8181" class="ln">  8181&nbsp;&nbsp;</span>	cc.closeConn()
<span id="L8182" class="ln">  8182&nbsp;&nbsp;</span>}
<span id="L8183" class="ln">  8183&nbsp;&nbsp;</span>
<span id="L8184" class="ln">  8184&nbsp;&nbsp;</span><span class="comment">// Close closes the client connection immediately.</span>
<span id="L8185" class="ln">  8185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8186" class="ln">  8186&nbsp;&nbsp;</span><span class="comment">// In-flight requests are interrupted. For a graceful shutdown, use Shutdown instead.</span>
<span id="L8187" class="ln">  8187&nbsp;&nbsp;</span>func (cc *http2ClientConn) Close() error {
<span id="L8188" class="ln">  8188&nbsp;&nbsp;</span>	err := errors.New(&#34;http2: client connection force closed via ClientConn.Close&#34;)
<span id="L8189" class="ln">  8189&nbsp;&nbsp;</span>	cc.closeForError(err)
<span id="L8190" class="ln">  8190&nbsp;&nbsp;</span>	return nil
<span id="L8191" class="ln">  8191&nbsp;&nbsp;</span>}
<span id="L8192" class="ln">  8192&nbsp;&nbsp;</span>
<span id="L8193" class="ln">  8193&nbsp;&nbsp;</span><span class="comment">// closes the client connection immediately. In-flight requests are interrupted.</span>
<span id="L8194" class="ln">  8194&nbsp;&nbsp;</span>func (cc *http2ClientConn) closeForLostPing() {
<span id="L8195" class="ln">  8195&nbsp;&nbsp;</span>	err := errors.New(&#34;http2: client connection lost&#34;)
<span id="L8196" class="ln">  8196&nbsp;&nbsp;</span>	if f := cc.t.CountError; f != nil {
<span id="L8197" class="ln">  8197&nbsp;&nbsp;</span>		f(&#34;conn_close_lost_ping&#34;)
<span id="L8198" class="ln">  8198&nbsp;&nbsp;</span>	}
<span id="L8199" class="ln">  8199&nbsp;&nbsp;</span>	cc.closeForError(err)
<span id="L8200" class="ln">  8200&nbsp;&nbsp;</span>}
<span id="L8201" class="ln">  8201&nbsp;&nbsp;</span>
<span id="L8202" class="ln">  8202&nbsp;&nbsp;</span><span class="comment">// errRequestCanceled is a copy of net/http&#39;s errRequestCanceled because it&#39;s not</span>
<span id="L8203" class="ln">  8203&nbsp;&nbsp;</span><span class="comment">// exported. At least they&#39;ll be DeepEqual for h1-vs-h2 comparisons tests.</span>
<span id="L8204" class="ln">  8204&nbsp;&nbsp;</span>var http2errRequestCanceled = errors.New(&#34;net/http: request canceled&#34;)
<span id="L8205" class="ln">  8205&nbsp;&nbsp;</span>
<span id="L8206" class="ln">  8206&nbsp;&nbsp;</span>func http2commaSeparatedTrailers(req *Request) (string, error) {
<span id="L8207" class="ln">  8207&nbsp;&nbsp;</span>	keys := make([]string, 0, len(req.Trailer))
<span id="L8208" class="ln">  8208&nbsp;&nbsp;</span>	for k := range req.Trailer {
<span id="L8209" class="ln">  8209&nbsp;&nbsp;</span>		k = http2canonicalHeader(k)
<span id="L8210" class="ln">  8210&nbsp;&nbsp;</span>		switch k {
<span id="L8211" class="ln">  8211&nbsp;&nbsp;</span>		case &#34;Transfer-Encoding&#34;, &#34;Trailer&#34;, &#34;Content-Length&#34;:
<span id="L8212" class="ln">  8212&nbsp;&nbsp;</span>			return &#34;&#34;, fmt.Errorf(&#34;invalid Trailer key %q&#34;, k)
<span id="L8213" class="ln">  8213&nbsp;&nbsp;</span>		}
<span id="L8214" class="ln">  8214&nbsp;&nbsp;</span>		keys = append(keys, k)
<span id="L8215" class="ln">  8215&nbsp;&nbsp;</span>	}
<span id="L8216" class="ln">  8216&nbsp;&nbsp;</span>	if len(keys) &gt; 0 {
<span id="L8217" class="ln">  8217&nbsp;&nbsp;</span>		sort.Strings(keys)
<span id="L8218" class="ln">  8218&nbsp;&nbsp;</span>		return strings.Join(keys, &#34;,&#34;), nil
<span id="L8219" class="ln">  8219&nbsp;&nbsp;</span>	}
<span id="L8220" class="ln">  8220&nbsp;&nbsp;</span>	return &#34;&#34;, nil
<span id="L8221" class="ln">  8221&nbsp;&nbsp;</span>}
<span id="L8222" class="ln">  8222&nbsp;&nbsp;</span>
<span id="L8223" class="ln">  8223&nbsp;&nbsp;</span>func (cc *http2ClientConn) responseHeaderTimeout() time.Duration {
<span id="L8224" class="ln">  8224&nbsp;&nbsp;</span>	if cc.t.t1 != nil {
<span id="L8225" class="ln">  8225&nbsp;&nbsp;</span>		return cc.t.t1.ResponseHeaderTimeout
<span id="L8226" class="ln">  8226&nbsp;&nbsp;</span>	}
<span id="L8227" class="ln">  8227&nbsp;&nbsp;</span>	<span class="comment">// No way to do this (yet?) with just an http2.Transport. Probably</span>
<span id="L8228" class="ln">  8228&nbsp;&nbsp;</span>	<span class="comment">// no need. Request.Cancel this is the new way. We only need to support</span>
<span id="L8229" class="ln">  8229&nbsp;&nbsp;</span>	<span class="comment">// this for compatibility with the old http.Transport fields when</span>
<span id="L8230" class="ln">  8230&nbsp;&nbsp;</span>	<span class="comment">// we&#39;re doing transparent http2.</span>
<span id="L8231" class="ln">  8231&nbsp;&nbsp;</span>	return 0
<span id="L8232" class="ln">  8232&nbsp;&nbsp;</span>}
<span id="L8233" class="ln">  8233&nbsp;&nbsp;</span>
<span id="L8234" class="ln">  8234&nbsp;&nbsp;</span><span class="comment">// checkConnHeaders checks whether req has any invalid connection-level headers.</span>
<span id="L8235" class="ln">  8235&nbsp;&nbsp;</span><span class="comment">// per RFC 7540 section 8.1.2.2: Connection-Specific Header Fields.</span>
<span id="L8236" class="ln">  8236&nbsp;&nbsp;</span><span class="comment">// Certain headers are special-cased as okay but not transmitted later.</span>
<span id="L8237" class="ln">  8237&nbsp;&nbsp;</span>func http2checkConnHeaders(req *Request) error {
<span id="L8238" class="ln">  8238&nbsp;&nbsp;</span>	if v := req.Header.Get(&#34;Upgrade&#34;); v != &#34;&#34; {
<span id="L8239" class="ln">  8239&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;http2: invalid Upgrade request header: %q&#34;, req.Header[&#34;Upgrade&#34;])
<span id="L8240" class="ln">  8240&nbsp;&nbsp;</span>	}
<span id="L8241" class="ln">  8241&nbsp;&nbsp;</span>	if vv := req.Header[&#34;Transfer-Encoding&#34;]; len(vv) &gt; 0 &amp;&amp; (len(vv) &gt; 1 || vv[0] != &#34;&#34; &amp;&amp; vv[0] != &#34;chunked&#34;) {
<span id="L8242" class="ln">  8242&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;http2: invalid Transfer-Encoding request header: %q&#34;, vv)
<span id="L8243" class="ln">  8243&nbsp;&nbsp;</span>	}
<span id="L8244" class="ln">  8244&nbsp;&nbsp;</span>	if vv := req.Header[&#34;Connection&#34;]; len(vv) &gt; 0 &amp;&amp; (len(vv) &gt; 1 || vv[0] != &#34;&#34; &amp;&amp; !http2asciiEqualFold(vv[0], &#34;close&#34;) &amp;&amp; !http2asciiEqualFold(vv[0], &#34;keep-alive&#34;)) {
<span id="L8245" class="ln">  8245&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;http2: invalid Connection request header: %q&#34;, vv)
<span id="L8246" class="ln">  8246&nbsp;&nbsp;</span>	}
<span id="L8247" class="ln">  8247&nbsp;&nbsp;</span>	return nil
<span id="L8248" class="ln">  8248&nbsp;&nbsp;</span>}
<span id="L8249" class="ln">  8249&nbsp;&nbsp;</span>
<span id="L8250" class="ln">  8250&nbsp;&nbsp;</span><span class="comment">// actualContentLength returns a sanitized version of</span>
<span id="L8251" class="ln">  8251&nbsp;&nbsp;</span><span class="comment">// req.ContentLength, where 0 actually means zero (not unknown) and -1</span>
<span id="L8252" class="ln">  8252&nbsp;&nbsp;</span><span class="comment">// means unknown.</span>
<span id="L8253" class="ln">  8253&nbsp;&nbsp;</span>func http2actualContentLength(req *Request) int64 {
<span id="L8254" class="ln">  8254&nbsp;&nbsp;</span>	if req.Body == nil || req.Body == NoBody {
<span id="L8255" class="ln">  8255&nbsp;&nbsp;</span>		return 0
<span id="L8256" class="ln">  8256&nbsp;&nbsp;</span>	}
<span id="L8257" class="ln">  8257&nbsp;&nbsp;</span>	if req.ContentLength != 0 {
<span id="L8258" class="ln">  8258&nbsp;&nbsp;</span>		return req.ContentLength
<span id="L8259" class="ln">  8259&nbsp;&nbsp;</span>	}
<span id="L8260" class="ln">  8260&nbsp;&nbsp;</span>	return -1
<span id="L8261" class="ln">  8261&nbsp;&nbsp;</span>}
<span id="L8262" class="ln">  8262&nbsp;&nbsp;</span>
<span id="L8263" class="ln">  8263&nbsp;&nbsp;</span>func (cc *http2ClientConn) decrStreamReservations() {
<span id="L8264" class="ln">  8264&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8265" class="ln">  8265&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L8266" class="ln">  8266&nbsp;&nbsp;</span>	cc.decrStreamReservationsLocked()
<span id="L8267" class="ln">  8267&nbsp;&nbsp;</span>}
<span id="L8268" class="ln">  8268&nbsp;&nbsp;</span>
<span id="L8269" class="ln">  8269&nbsp;&nbsp;</span>func (cc *http2ClientConn) decrStreamReservationsLocked() {
<span id="L8270" class="ln">  8270&nbsp;&nbsp;</span>	if cc.streamsReserved &gt; 0 {
<span id="L8271" class="ln">  8271&nbsp;&nbsp;</span>		cc.streamsReserved--
<span id="L8272" class="ln">  8272&nbsp;&nbsp;</span>	}
<span id="L8273" class="ln">  8273&nbsp;&nbsp;</span>}
<span id="L8274" class="ln">  8274&nbsp;&nbsp;</span>
<span id="L8275" class="ln">  8275&nbsp;&nbsp;</span>func (cc *http2ClientConn) RoundTrip(req *Request) (*Response, error) {
<span id="L8276" class="ln">  8276&nbsp;&nbsp;</span>	ctx := req.Context()
<span id="L8277" class="ln">  8277&nbsp;&nbsp;</span>	cs := &amp;http2clientStream{
<span id="L8278" class="ln">  8278&nbsp;&nbsp;</span>		cc:                   cc,
<span id="L8279" class="ln">  8279&nbsp;&nbsp;</span>		ctx:                  ctx,
<span id="L8280" class="ln">  8280&nbsp;&nbsp;</span>		reqCancel:            req.Cancel,
<span id="L8281" class="ln">  8281&nbsp;&nbsp;</span>		isHead:               req.Method == &#34;HEAD&#34;,
<span id="L8282" class="ln">  8282&nbsp;&nbsp;</span>		reqBody:              req.Body,
<span id="L8283" class="ln">  8283&nbsp;&nbsp;</span>		reqBodyContentLength: http2actualContentLength(req),
<span id="L8284" class="ln">  8284&nbsp;&nbsp;</span>		trace:                httptrace.ContextClientTrace(ctx),
<span id="L8285" class="ln">  8285&nbsp;&nbsp;</span>		peerClosed:           make(chan struct{}),
<span id="L8286" class="ln">  8286&nbsp;&nbsp;</span>		abort:                make(chan struct{}),
<span id="L8287" class="ln">  8287&nbsp;&nbsp;</span>		respHeaderRecv:       make(chan struct{}),
<span id="L8288" class="ln">  8288&nbsp;&nbsp;</span>		donec:                make(chan struct{}),
<span id="L8289" class="ln">  8289&nbsp;&nbsp;</span>	}
<span id="L8290" class="ln">  8290&nbsp;&nbsp;</span>	go cs.doRequest(req)
<span id="L8291" class="ln">  8291&nbsp;&nbsp;</span>
<span id="L8292" class="ln">  8292&nbsp;&nbsp;</span>	waitDone := func() error {
<span id="L8293" class="ln">  8293&nbsp;&nbsp;</span>		select {
<span id="L8294" class="ln">  8294&nbsp;&nbsp;</span>		case &lt;-cs.donec:
<span id="L8295" class="ln">  8295&nbsp;&nbsp;</span>			return nil
<span id="L8296" class="ln">  8296&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L8297" class="ln">  8297&nbsp;&nbsp;</span>			return ctx.Err()
<span id="L8298" class="ln">  8298&nbsp;&nbsp;</span>		case &lt;-cs.reqCancel:
<span id="L8299" class="ln">  8299&nbsp;&nbsp;</span>			return http2errRequestCanceled
<span id="L8300" class="ln">  8300&nbsp;&nbsp;</span>		}
<span id="L8301" class="ln">  8301&nbsp;&nbsp;</span>	}
<span id="L8302" class="ln">  8302&nbsp;&nbsp;</span>
<span id="L8303" class="ln">  8303&nbsp;&nbsp;</span>	handleResponseHeaders := func() (*Response, error) {
<span id="L8304" class="ln">  8304&nbsp;&nbsp;</span>		res := cs.res
<span id="L8305" class="ln">  8305&nbsp;&nbsp;</span>		if res.StatusCode &gt; 299 {
<span id="L8306" class="ln">  8306&nbsp;&nbsp;</span>			<span class="comment">// On error or status code 3xx, 4xx, 5xx, etc abort any</span>
<span id="L8307" class="ln">  8307&nbsp;&nbsp;</span>			<span class="comment">// ongoing write, assuming that the server doesn&#39;t care</span>
<span id="L8308" class="ln">  8308&nbsp;&nbsp;</span>			<span class="comment">// about our request body. If the server replied with 1xx or</span>
<span id="L8309" class="ln">  8309&nbsp;&nbsp;</span>			<span class="comment">// 2xx, however, then assume the server DOES potentially</span>
<span id="L8310" class="ln">  8310&nbsp;&nbsp;</span>			<span class="comment">// want our body (e.g. full-duplex streaming:</span>
<span id="L8311" class="ln">  8311&nbsp;&nbsp;</span>			<span class="comment">// golang.org/issue/13444). If it turns out the server</span>
<span id="L8312" class="ln">  8312&nbsp;&nbsp;</span>			<span class="comment">// doesn&#39;t, they&#39;ll RST_STREAM us soon enough. This is a</span>
<span id="L8313" class="ln">  8313&nbsp;&nbsp;</span>			<span class="comment">// heuristic to avoid adding knobs to Transport. Hopefully</span>
<span id="L8314" class="ln">  8314&nbsp;&nbsp;</span>			<span class="comment">// we can keep it.</span>
<span id="L8315" class="ln">  8315&nbsp;&nbsp;</span>			cs.abortRequestBodyWrite()
<span id="L8316" class="ln">  8316&nbsp;&nbsp;</span>		}
<span id="L8317" class="ln">  8317&nbsp;&nbsp;</span>		res.Request = req
<span id="L8318" class="ln">  8318&nbsp;&nbsp;</span>		res.TLS = cc.tlsState
<span id="L8319" class="ln">  8319&nbsp;&nbsp;</span>		if res.Body == http2noBody &amp;&amp; http2actualContentLength(req) == 0 {
<span id="L8320" class="ln">  8320&nbsp;&nbsp;</span>			<span class="comment">// If there isn&#39;t a request or response body still being</span>
<span id="L8321" class="ln">  8321&nbsp;&nbsp;</span>			<span class="comment">// written, then wait for the stream to be closed before</span>
<span id="L8322" class="ln">  8322&nbsp;&nbsp;</span>			<span class="comment">// RoundTrip returns.</span>
<span id="L8323" class="ln">  8323&nbsp;&nbsp;</span>			if err := waitDone(); err != nil {
<span id="L8324" class="ln">  8324&nbsp;&nbsp;</span>				return nil, err
<span id="L8325" class="ln">  8325&nbsp;&nbsp;</span>			}
<span id="L8326" class="ln">  8326&nbsp;&nbsp;</span>		}
<span id="L8327" class="ln">  8327&nbsp;&nbsp;</span>		return res, nil
<span id="L8328" class="ln">  8328&nbsp;&nbsp;</span>	}
<span id="L8329" class="ln">  8329&nbsp;&nbsp;</span>
<span id="L8330" class="ln">  8330&nbsp;&nbsp;</span>	cancelRequest := func(cs *http2clientStream, err error) error {
<span id="L8331" class="ln">  8331&nbsp;&nbsp;</span>		cs.cc.mu.Lock()
<span id="L8332" class="ln">  8332&nbsp;&nbsp;</span>		bodyClosed := cs.reqBodyClosed
<span id="L8333" class="ln">  8333&nbsp;&nbsp;</span>		cs.cc.mu.Unlock()
<span id="L8334" class="ln">  8334&nbsp;&nbsp;</span>		<span class="comment">// Wait for the request body to be closed.</span>
<span id="L8335" class="ln">  8335&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L8336" class="ln">  8336&nbsp;&nbsp;</span>		<span class="comment">// If nothing closed the body before now, abortStreamLocked</span>
<span id="L8337" class="ln">  8337&nbsp;&nbsp;</span>		<span class="comment">// will have started a goroutine to close it.</span>
<span id="L8338" class="ln">  8338&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L8339" class="ln">  8339&nbsp;&nbsp;</span>		<span class="comment">// Closing the body before returning avoids a race condition</span>
<span id="L8340" class="ln">  8340&nbsp;&nbsp;</span>		<span class="comment">// with net/http checking its readTrackingBody to see if the</span>
<span id="L8341" class="ln">  8341&nbsp;&nbsp;</span>		<span class="comment">// body was read from or closed. See golang/go#60041.</span>
<span id="L8342" class="ln">  8342&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L8343" class="ln">  8343&nbsp;&nbsp;</span>		<span class="comment">// The body is closed in a separate goroutine without the</span>
<span id="L8344" class="ln">  8344&nbsp;&nbsp;</span>		<span class="comment">// connection mutex held, but dropping the mutex before waiting</span>
<span id="L8345" class="ln">  8345&nbsp;&nbsp;</span>		<span class="comment">// will keep us from holding it indefinitely if the body</span>
<span id="L8346" class="ln">  8346&nbsp;&nbsp;</span>		<span class="comment">// close is slow for some reason.</span>
<span id="L8347" class="ln">  8347&nbsp;&nbsp;</span>		if bodyClosed != nil {
<span id="L8348" class="ln">  8348&nbsp;&nbsp;</span>			&lt;-bodyClosed
<span id="L8349" class="ln">  8349&nbsp;&nbsp;</span>		}
<span id="L8350" class="ln">  8350&nbsp;&nbsp;</span>		return err
<span id="L8351" class="ln">  8351&nbsp;&nbsp;</span>	}
<span id="L8352" class="ln">  8352&nbsp;&nbsp;</span>
<span id="L8353" class="ln">  8353&nbsp;&nbsp;</span>	for {
<span id="L8354" class="ln">  8354&nbsp;&nbsp;</span>		select {
<span id="L8355" class="ln">  8355&nbsp;&nbsp;</span>		case &lt;-cs.respHeaderRecv:
<span id="L8356" class="ln">  8356&nbsp;&nbsp;</span>			return handleResponseHeaders()
<span id="L8357" class="ln">  8357&nbsp;&nbsp;</span>		case &lt;-cs.abort:
<span id="L8358" class="ln">  8358&nbsp;&nbsp;</span>			select {
<span id="L8359" class="ln">  8359&nbsp;&nbsp;</span>			case &lt;-cs.respHeaderRecv:
<span id="L8360" class="ln">  8360&nbsp;&nbsp;</span>				<span class="comment">// If both cs.respHeaderRecv and cs.abort are signaling,</span>
<span id="L8361" class="ln">  8361&nbsp;&nbsp;</span>				<span class="comment">// pick respHeaderRecv. The server probably wrote the</span>
<span id="L8362" class="ln">  8362&nbsp;&nbsp;</span>				<span class="comment">// response and immediately reset the stream.</span>
<span id="L8363" class="ln">  8363&nbsp;&nbsp;</span>				<span class="comment">// golang.org/issue/49645</span>
<span id="L8364" class="ln">  8364&nbsp;&nbsp;</span>				return handleResponseHeaders()
<span id="L8365" class="ln">  8365&nbsp;&nbsp;</span>			default:
<span id="L8366" class="ln">  8366&nbsp;&nbsp;</span>				waitDone()
<span id="L8367" class="ln">  8367&nbsp;&nbsp;</span>				return nil, cs.abortErr
<span id="L8368" class="ln">  8368&nbsp;&nbsp;</span>			}
<span id="L8369" class="ln">  8369&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L8370" class="ln">  8370&nbsp;&nbsp;</span>			err := ctx.Err()
<span id="L8371" class="ln">  8371&nbsp;&nbsp;</span>			cs.abortStream(err)
<span id="L8372" class="ln">  8372&nbsp;&nbsp;</span>			return nil, cancelRequest(cs, err)
<span id="L8373" class="ln">  8373&nbsp;&nbsp;</span>		case &lt;-cs.reqCancel:
<span id="L8374" class="ln">  8374&nbsp;&nbsp;</span>			cs.abortStream(http2errRequestCanceled)
<span id="L8375" class="ln">  8375&nbsp;&nbsp;</span>			return nil, cancelRequest(cs, http2errRequestCanceled)
<span id="L8376" class="ln">  8376&nbsp;&nbsp;</span>		}
<span id="L8377" class="ln">  8377&nbsp;&nbsp;</span>	}
<span id="L8378" class="ln">  8378&nbsp;&nbsp;</span>}
<span id="L8379" class="ln">  8379&nbsp;&nbsp;</span>
<span id="L8380" class="ln">  8380&nbsp;&nbsp;</span><span class="comment">// doRequest runs for the duration of the request lifetime.</span>
<span id="L8381" class="ln">  8381&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8382" class="ln">  8382&nbsp;&nbsp;</span><span class="comment">// It sends the request and performs post-request cleanup (closing Request.Body, etc.).</span>
<span id="L8383" class="ln">  8383&nbsp;&nbsp;</span>func (cs *http2clientStream) doRequest(req *Request) {
<span id="L8384" class="ln">  8384&nbsp;&nbsp;</span>	err := cs.writeRequest(req)
<span id="L8385" class="ln">  8385&nbsp;&nbsp;</span>	cs.cleanupWriteRequest(err)
<span id="L8386" class="ln">  8386&nbsp;&nbsp;</span>}
<span id="L8387" class="ln">  8387&nbsp;&nbsp;</span>
<span id="L8388" class="ln">  8388&nbsp;&nbsp;</span><span class="comment">// writeRequest sends a request.</span>
<span id="L8389" class="ln">  8389&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8390" class="ln">  8390&nbsp;&nbsp;</span><span class="comment">// It returns nil after the request is written, the response read,</span>
<span id="L8391" class="ln">  8391&nbsp;&nbsp;</span><span class="comment">// and the request stream is half-closed by the peer.</span>
<span id="L8392" class="ln">  8392&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8393" class="ln">  8393&nbsp;&nbsp;</span><span class="comment">// It returns non-nil if the request ends otherwise.</span>
<span id="L8394" class="ln">  8394&nbsp;&nbsp;</span><span class="comment">// If the returned error is StreamError, the error Code may be used in resetting the stream.</span>
<span id="L8395" class="ln">  8395&nbsp;&nbsp;</span>func (cs *http2clientStream) writeRequest(req *Request) (err error) {
<span id="L8396" class="ln">  8396&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L8397" class="ln">  8397&nbsp;&nbsp;</span>	ctx := cs.ctx
<span id="L8398" class="ln">  8398&nbsp;&nbsp;</span>
<span id="L8399" class="ln">  8399&nbsp;&nbsp;</span>	if err := http2checkConnHeaders(req); err != nil {
<span id="L8400" class="ln">  8400&nbsp;&nbsp;</span>		return err
<span id="L8401" class="ln">  8401&nbsp;&nbsp;</span>	}
<span id="L8402" class="ln">  8402&nbsp;&nbsp;</span>
<span id="L8403" class="ln">  8403&nbsp;&nbsp;</span>	<span class="comment">// Acquire the new-request lock by writing to reqHeaderMu.</span>
<span id="L8404" class="ln">  8404&nbsp;&nbsp;</span>	<span class="comment">// This lock guards the critical section covering allocating a new stream ID</span>
<span id="L8405" class="ln">  8405&nbsp;&nbsp;</span>	<span class="comment">// (requires mu) and creating the stream (requires wmu).</span>
<span id="L8406" class="ln">  8406&nbsp;&nbsp;</span>	if cc.reqHeaderMu == nil {
<span id="L8407" class="ln">  8407&nbsp;&nbsp;</span>		panic(&#34;RoundTrip on uninitialized ClientConn&#34;) <span class="comment">// for tests</span>
<span id="L8408" class="ln">  8408&nbsp;&nbsp;</span>	}
<span id="L8409" class="ln">  8409&nbsp;&nbsp;</span>	select {
<span id="L8410" class="ln">  8410&nbsp;&nbsp;</span>	case cc.reqHeaderMu &lt;- struct{}{}:
<span id="L8411" class="ln">  8411&nbsp;&nbsp;</span>	case &lt;-cs.reqCancel:
<span id="L8412" class="ln">  8412&nbsp;&nbsp;</span>		return http2errRequestCanceled
<span id="L8413" class="ln">  8413&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L8414" class="ln">  8414&nbsp;&nbsp;</span>		return ctx.Err()
<span id="L8415" class="ln">  8415&nbsp;&nbsp;</span>	}
<span id="L8416" class="ln">  8416&nbsp;&nbsp;</span>
<span id="L8417" class="ln">  8417&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8418" class="ln">  8418&nbsp;&nbsp;</span>	if cc.idleTimer != nil {
<span id="L8419" class="ln">  8419&nbsp;&nbsp;</span>		cc.idleTimer.Stop()
<span id="L8420" class="ln">  8420&nbsp;&nbsp;</span>	}
<span id="L8421" class="ln">  8421&nbsp;&nbsp;</span>	cc.decrStreamReservationsLocked()
<span id="L8422" class="ln">  8422&nbsp;&nbsp;</span>	if err := cc.awaitOpenSlotForStreamLocked(cs); err != nil {
<span id="L8423" class="ln">  8423&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L8424" class="ln">  8424&nbsp;&nbsp;</span>		&lt;-cc.reqHeaderMu
<span id="L8425" class="ln">  8425&nbsp;&nbsp;</span>		return err
<span id="L8426" class="ln">  8426&nbsp;&nbsp;</span>	}
<span id="L8427" class="ln">  8427&nbsp;&nbsp;</span>	cc.addStreamLocked(cs) <span class="comment">// assigns stream ID</span>
<span id="L8428" class="ln">  8428&nbsp;&nbsp;</span>	if http2isConnectionCloseRequest(req) {
<span id="L8429" class="ln">  8429&nbsp;&nbsp;</span>		cc.doNotReuse = true
<span id="L8430" class="ln">  8430&nbsp;&nbsp;</span>	}
<span id="L8431" class="ln">  8431&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8432" class="ln">  8432&nbsp;&nbsp;</span>
<span id="L8433" class="ln">  8433&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): this is a copy of the logic in net/http. Unify somewhere?</span>
<span id="L8434" class="ln">  8434&nbsp;&nbsp;</span>	if !cc.t.disableCompression() &amp;&amp;
<span id="L8435" class="ln">  8435&nbsp;&nbsp;</span>		req.Header.Get(&#34;Accept-Encoding&#34;) == &#34;&#34; &amp;&amp;
<span id="L8436" class="ln">  8436&nbsp;&nbsp;</span>		req.Header.Get(&#34;Range&#34;) == &#34;&#34; &amp;&amp;
<span id="L8437" class="ln">  8437&nbsp;&nbsp;</span>		!cs.isHead {
<span id="L8438" class="ln">  8438&nbsp;&nbsp;</span>		<span class="comment">// Request gzip only, not deflate. Deflate is ambiguous and</span>
<span id="L8439" class="ln">  8439&nbsp;&nbsp;</span>		<span class="comment">// not as universally supported anyway.</span>
<span id="L8440" class="ln">  8440&nbsp;&nbsp;</span>		<span class="comment">// See: https://zlib.net/zlib_faq.html#faq39</span>
<span id="L8441" class="ln">  8441&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L8442" class="ln">  8442&nbsp;&nbsp;</span>		<span class="comment">// Note that we don&#39;t request this for HEAD requests,</span>
<span id="L8443" class="ln">  8443&nbsp;&nbsp;</span>		<span class="comment">// due to a bug in nginx:</span>
<span id="L8444" class="ln">  8444&nbsp;&nbsp;</span>		<span class="comment">//   http://trac.nginx.org/nginx/ticket/358</span>
<span id="L8445" class="ln">  8445&nbsp;&nbsp;</span>		<span class="comment">//   https://golang.org/issue/5522</span>
<span id="L8446" class="ln">  8446&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L8447" class="ln">  8447&nbsp;&nbsp;</span>		<span class="comment">// We don&#39;t request gzip if the request is for a range, since</span>
<span id="L8448" class="ln">  8448&nbsp;&nbsp;</span>		<span class="comment">// auto-decoding a portion of a gzipped document will just fail</span>
<span id="L8449" class="ln">  8449&nbsp;&nbsp;</span>		<span class="comment">// anyway. See https://golang.org/issue/8923</span>
<span id="L8450" class="ln">  8450&nbsp;&nbsp;</span>		cs.requestedGzip = true
<span id="L8451" class="ln">  8451&nbsp;&nbsp;</span>	}
<span id="L8452" class="ln">  8452&nbsp;&nbsp;</span>
<span id="L8453" class="ln">  8453&nbsp;&nbsp;</span>	continueTimeout := cc.t.expectContinueTimeout()
<span id="L8454" class="ln">  8454&nbsp;&nbsp;</span>	if continueTimeout != 0 {
<span id="L8455" class="ln">  8455&nbsp;&nbsp;</span>		if !httpguts.HeaderValuesContainsToken(req.Header[&#34;Expect&#34;], &#34;100-continue&#34;) {
<span id="L8456" class="ln">  8456&nbsp;&nbsp;</span>			continueTimeout = 0
<span id="L8457" class="ln">  8457&nbsp;&nbsp;</span>		} else {
<span id="L8458" class="ln">  8458&nbsp;&nbsp;</span>			cs.on100 = make(chan struct{}, 1)
<span id="L8459" class="ln">  8459&nbsp;&nbsp;</span>		}
<span id="L8460" class="ln">  8460&nbsp;&nbsp;</span>	}
<span id="L8461" class="ln">  8461&nbsp;&nbsp;</span>
<span id="L8462" class="ln">  8462&nbsp;&nbsp;</span>	<span class="comment">// Past this point (where we send request headers), it is possible for</span>
<span id="L8463" class="ln">  8463&nbsp;&nbsp;</span>	<span class="comment">// RoundTrip to return successfully. Since the RoundTrip contract permits</span>
<span id="L8464" class="ln">  8464&nbsp;&nbsp;</span>	<span class="comment">// the caller to &#34;mutate or reuse&#34; the Request after closing the Response&#39;s Body,</span>
<span id="L8465" class="ln">  8465&nbsp;&nbsp;</span>	<span class="comment">// we must take care when referencing the Request from here on.</span>
<span id="L8466" class="ln">  8466&nbsp;&nbsp;</span>	err = cs.encodeAndWriteHeaders(req)
<span id="L8467" class="ln">  8467&nbsp;&nbsp;</span>	&lt;-cc.reqHeaderMu
<span id="L8468" class="ln">  8468&nbsp;&nbsp;</span>	if err != nil {
<span id="L8469" class="ln">  8469&nbsp;&nbsp;</span>		return err
<span id="L8470" class="ln">  8470&nbsp;&nbsp;</span>	}
<span id="L8471" class="ln">  8471&nbsp;&nbsp;</span>
<span id="L8472" class="ln">  8472&nbsp;&nbsp;</span>	hasBody := cs.reqBodyContentLength != 0
<span id="L8473" class="ln">  8473&nbsp;&nbsp;</span>	if !hasBody {
<span id="L8474" class="ln">  8474&nbsp;&nbsp;</span>		cs.sentEndStream = true
<span id="L8475" class="ln">  8475&nbsp;&nbsp;</span>	} else {
<span id="L8476" class="ln">  8476&nbsp;&nbsp;</span>		if continueTimeout != 0 {
<span id="L8477" class="ln">  8477&nbsp;&nbsp;</span>			http2traceWait100Continue(cs.trace)
<span id="L8478" class="ln">  8478&nbsp;&nbsp;</span>			timer := time.NewTimer(continueTimeout)
<span id="L8479" class="ln">  8479&nbsp;&nbsp;</span>			select {
<span id="L8480" class="ln">  8480&nbsp;&nbsp;</span>			case &lt;-timer.C:
<span id="L8481" class="ln">  8481&nbsp;&nbsp;</span>				err = nil
<span id="L8482" class="ln">  8482&nbsp;&nbsp;</span>			case &lt;-cs.on100:
<span id="L8483" class="ln">  8483&nbsp;&nbsp;</span>				err = nil
<span id="L8484" class="ln">  8484&nbsp;&nbsp;</span>			case &lt;-cs.abort:
<span id="L8485" class="ln">  8485&nbsp;&nbsp;</span>				err = cs.abortErr
<span id="L8486" class="ln">  8486&nbsp;&nbsp;</span>			case &lt;-ctx.Done():
<span id="L8487" class="ln">  8487&nbsp;&nbsp;</span>				err = ctx.Err()
<span id="L8488" class="ln">  8488&nbsp;&nbsp;</span>			case &lt;-cs.reqCancel:
<span id="L8489" class="ln">  8489&nbsp;&nbsp;</span>				err = http2errRequestCanceled
<span id="L8490" class="ln">  8490&nbsp;&nbsp;</span>			}
<span id="L8491" class="ln">  8491&nbsp;&nbsp;</span>			timer.Stop()
<span id="L8492" class="ln">  8492&nbsp;&nbsp;</span>			if err != nil {
<span id="L8493" class="ln">  8493&nbsp;&nbsp;</span>				http2traceWroteRequest(cs.trace, err)
<span id="L8494" class="ln">  8494&nbsp;&nbsp;</span>				return err
<span id="L8495" class="ln">  8495&nbsp;&nbsp;</span>			}
<span id="L8496" class="ln">  8496&nbsp;&nbsp;</span>		}
<span id="L8497" class="ln">  8497&nbsp;&nbsp;</span>
<span id="L8498" class="ln">  8498&nbsp;&nbsp;</span>		if err = cs.writeRequestBody(req); err != nil {
<span id="L8499" class="ln">  8499&nbsp;&nbsp;</span>			if err != http2errStopReqBodyWrite {
<span id="L8500" class="ln">  8500&nbsp;&nbsp;</span>				http2traceWroteRequest(cs.trace, err)
<span id="L8501" class="ln">  8501&nbsp;&nbsp;</span>				return err
<span id="L8502" class="ln">  8502&nbsp;&nbsp;</span>			}
<span id="L8503" class="ln">  8503&nbsp;&nbsp;</span>		} else {
<span id="L8504" class="ln">  8504&nbsp;&nbsp;</span>			cs.sentEndStream = true
<span id="L8505" class="ln">  8505&nbsp;&nbsp;</span>		}
<span id="L8506" class="ln">  8506&nbsp;&nbsp;</span>	}
<span id="L8507" class="ln">  8507&nbsp;&nbsp;</span>
<span id="L8508" class="ln">  8508&nbsp;&nbsp;</span>	http2traceWroteRequest(cs.trace, err)
<span id="L8509" class="ln">  8509&nbsp;&nbsp;</span>
<span id="L8510" class="ln">  8510&nbsp;&nbsp;</span>	var respHeaderTimer &lt;-chan time.Time
<span id="L8511" class="ln">  8511&nbsp;&nbsp;</span>	var respHeaderRecv chan struct{}
<span id="L8512" class="ln">  8512&nbsp;&nbsp;</span>	if d := cc.responseHeaderTimeout(); d != 0 {
<span id="L8513" class="ln">  8513&nbsp;&nbsp;</span>		timer := time.NewTimer(d)
<span id="L8514" class="ln">  8514&nbsp;&nbsp;</span>		defer timer.Stop()
<span id="L8515" class="ln">  8515&nbsp;&nbsp;</span>		respHeaderTimer = timer.C
<span id="L8516" class="ln">  8516&nbsp;&nbsp;</span>		respHeaderRecv = cs.respHeaderRecv
<span id="L8517" class="ln">  8517&nbsp;&nbsp;</span>	}
<span id="L8518" class="ln">  8518&nbsp;&nbsp;</span>	<span class="comment">// Wait until the peer half-closes its end of the stream,</span>
<span id="L8519" class="ln">  8519&nbsp;&nbsp;</span>	<span class="comment">// or until the request is aborted (via context, error, or otherwise),</span>
<span id="L8520" class="ln">  8520&nbsp;&nbsp;</span>	<span class="comment">// whichever comes first.</span>
<span id="L8521" class="ln">  8521&nbsp;&nbsp;</span>	for {
<span id="L8522" class="ln">  8522&nbsp;&nbsp;</span>		select {
<span id="L8523" class="ln">  8523&nbsp;&nbsp;</span>		case &lt;-cs.peerClosed:
<span id="L8524" class="ln">  8524&nbsp;&nbsp;</span>			return nil
<span id="L8525" class="ln">  8525&nbsp;&nbsp;</span>		case &lt;-respHeaderTimer:
<span id="L8526" class="ln">  8526&nbsp;&nbsp;</span>			return http2errTimeout
<span id="L8527" class="ln">  8527&nbsp;&nbsp;</span>		case &lt;-respHeaderRecv:
<span id="L8528" class="ln">  8528&nbsp;&nbsp;</span>			respHeaderRecv = nil
<span id="L8529" class="ln">  8529&nbsp;&nbsp;</span>			respHeaderTimer = nil <span class="comment">// keep waiting for END_STREAM</span>
<span id="L8530" class="ln">  8530&nbsp;&nbsp;</span>		case &lt;-cs.abort:
<span id="L8531" class="ln">  8531&nbsp;&nbsp;</span>			return cs.abortErr
<span id="L8532" class="ln">  8532&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L8533" class="ln">  8533&nbsp;&nbsp;</span>			return ctx.Err()
<span id="L8534" class="ln">  8534&nbsp;&nbsp;</span>		case &lt;-cs.reqCancel:
<span id="L8535" class="ln">  8535&nbsp;&nbsp;</span>			return http2errRequestCanceled
<span id="L8536" class="ln">  8536&nbsp;&nbsp;</span>		}
<span id="L8537" class="ln">  8537&nbsp;&nbsp;</span>	}
<span id="L8538" class="ln">  8538&nbsp;&nbsp;</span>}
<span id="L8539" class="ln">  8539&nbsp;&nbsp;</span>
<span id="L8540" class="ln">  8540&nbsp;&nbsp;</span>func (cs *http2clientStream) encodeAndWriteHeaders(req *Request) error {
<span id="L8541" class="ln">  8541&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L8542" class="ln">  8542&nbsp;&nbsp;</span>	ctx := cs.ctx
<span id="L8543" class="ln">  8543&nbsp;&nbsp;</span>
<span id="L8544" class="ln">  8544&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L8545" class="ln">  8545&nbsp;&nbsp;</span>	defer cc.wmu.Unlock()
<span id="L8546" class="ln">  8546&nbsp;&nbsp;</span>
<span id="L8547" class="ln">  8547&nbsp;&nbsp;</span>	<span class="comment">// If the request was canceled while waiting for cc.mu, just quit.</span>
<span id="L8548" class="ln">  8548&nbsp;&nbsp;</span>	select {
<span id="L8549" class="ln">  8549&nbsp;&nbsp;</span>	case &lt;-cs.abort:
<span id="L8550" class="ln">  8550&nbsp;&nbsp;</span>		return cs.abortErr
<span id="L8551" class="ln">  8551&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L8552" class="ln">  8552&nbsp;&nbsp;</span>		return ctx.Err()
<span id="L8553" class="ln">  8553&nbsp;&nbsp;</span>	case &lt;-cs.reqCancel:
<span id="L8554" class="ln">  8554&nbsp;&nbsp;</span>		return http2errRequestCanceled
<span id="L8555" class="ln">  8555&nbsp;&nbsp;</span>	default:
<span id="L8556" class="ln">  8556&nbsp;&nbsp;</span>	}
<span id="L8557" class="ln">  8557&nbsp;&nbsp;</span>
<span id="L8558" class="ln">  8558&nbsp;&nbsp;</span>	<span class="comment">// Encode headers.</span>
<span id="L8559" class="ln">  8559&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L8560" class="ln">  8560&nbsp;&nbsp;</span>	<span class="comment">// we send: HEADERS{1}, CONTINUATION{0,} + DATA{0,} (DATA is</span>
<span id="L8561" class="ln">  8561&nbsp;&nbsp;</span>	<span class="comment">// sent by writeRequestBody below, along with any Trailers,</span>
<span id="L8562" class="ln">  8562&nbsp;&nbsp;</span>	<span class="comment">// again in form HEADERS{1}, CONTINUATION{0,})</span>
<span id="L8563" class="ln">  8563&nbsp;&nbsp;</span>	trailers, err := http2commaSeparatedTrailers(req)
<span id="L8564" class="ln">  8564&nbsp;&nbsp;</span>	if err != nil {
<span id="L8565" class="ln">  8565&nbsp;&nbsp;</span>		return err
<span id="L8566" class="ln">  8566&nbsp;&nbsp;</span>	}
<span id="L8567" class="ln">  8567&nbsp;&nbsp;</span>	hasTrailers := trailers != &#34;&#34;
<span id="L8568" class="ln">  8568&nbsp;&nbsp;</span>	contentLen := http2actualContentLength(req)
<span id="L8569" class="ln">  8569&nbsp;&nbsp;</span>	hasBody := contentLen != 0
<span id="L8570" class="ln">  8570&nbsp;&nbsp;</span>	hdrs, err := cc.encodeHeaders(req, cs.requestedGzip, trailers, contentLen)
<span id="L8571" class="ln">  8571&nbsp;&nbsp;</span>	if err != nil {
<span id="L8572" class="ln">  8572&nbsp;&nbsp;</span>		return err
<span id="L8573" class="ln">  8573&nbsp;&nbsp;</span>	}
<span id="L8574" class="ln">  8574&nbsp;&nbsp;</span>
<span id="L8575" class="ln">  8575&nbsp;&nbsp;</span>	<span class="comment">// Write the request.</span>
<span id="L8576" class="ln">  8576&nbsp;&nbsp;</span>	endStream := !hasBody &amp;&amp; !hasTrailers
<span id="L8577" class="ln">  8577&nbsp;&nbsp;</span>	cs.sentHeaders = true
<span id="L8578" class="ln">  8578&nbsp;&nbsp;</span>	err = cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)
<span id="L8579" class="ln">  8579&nbsp;&nbsp;</span>	http2traceWroteHeaders(cs.trace)
<span id="L8580" class="ln">  8580&nbsp;&nbsp;</span>	return err
<span id="L8581" class="ln">  8581&nbsp;&nbsp;</span>}
<span id="L8582" class="ln">  8582&nbsp;&nbsp;</span>
<span id="L8583" class="ln">  8583&nbsp;&nbsp;</span><span class="comment">// cleanupWriteRequest performs post-request tasks.</span>
<span id="L8584" class="ln">  8584&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8585" class="ln">  8585&nbsp;&nbsp;</span><span class="comment">// If err (the result of writeRequest) is non-nil and the stream is not closed,</span>
<span id="L8586" class="ln">  8586&nbsp;&nbsp;</span><span class="comment">// cleanupWriteRequest will send a reset to the peer.</span>
<span id="L8587" class="ln">  8587&nbsp;&nbsp;</span>func (cs *http2clientStream) cleanupWriteRequest(err error) {
<span id="L8588" class="ln">  8588&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L8589" class="ln">  8589&nbsp;&nbsp;</span>
<span id="L8590" class="ln">  8590&nbsp;&nbsp;</span>	if cs.ID == 0 {
<span id="L8591" class="ln">  8591&nbsp;&nbsp;</span>		<span class="comment">// We were canceled before creating the stream, so return our reservation.</span>
<span id="L8592" class="ln">  8592&nbsp;&nbsp;</span>		cc.decrStreamReservations()
<span id="L8593" class="ln">  8593&nbsp;&nbsp;</span>	}
<span id="L8594" class="ln">  8594&nbsp;&nbsp;</span>
<span id="L8595" class="ln">  8595&nbsp;&nbsp;</span>	<span class="comment">// TODO: write h12Compare test showing whether</span>
<span id="L8596" class="ln">  8596&nbsp;&nbsp;</span>	<span class="comment">// Request.Body is closed by the Transport,</span>
<span id="L8597" class="ln">  8597&nbsp;&nbsp;</span>	<span class="comment">// and in multiple cases: server replies &lt;=299 and &gt;299</span>
<span id="L8598" class="ln">  8598&nbsp;&nbsp;</span>	<span class="comment">// while still writing request body</span>
<span id="L8599" class="ln">  8599&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8600" class="ln">  8600&nbsp;&nbsp;</span>	mustCloseBody := false
<span id="L8601" class="ln">  8601&nbsp;&nbsp;</span>	if cs.reqBody != nil &amp;&amp; cs.reqBodyClosed == nil {
<span id="L8602" class="ln">  8602&nbsp;&nbsp;</span>		mustCloseBody = true
<span id="L8603" class="ln">  8603&nbsp;&nbsp;</span>		cs.reqBodyClosed = make(chan struct{})
<span id="L8604" class="ln">  8604&nbsp;&nbsp;</span>	}
<span id="L8605" class="ln">  8605&nbsp;&nbsp;</span>	bodyClosed := cs.reqBodyClosed
<span id="L8606" class="ln">  8606&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8607" class="ln">  8607&nbsp;&nbsp;</span>	if mustCloseBody {
<span id="L8608" class="ln">  8608&nbsp;&nbsp;</span>		cs.reqBody.Close()
<span id="L8609" class="ln">  8609&nbsp;&nbsp;</span>		close(bodyClosed)
<span id="L8610" class="ln">  8610&nbsp;&nbsp;</span>	}
<span id="L8611" class="ln">  8611&nbsp;&nbsp;</span>	if bodyClosed != nil {
<span id="L8612" class="ln">  8612&nbsp;&nbsp;</span>		&lt;-bodyClosed
<span id="L8613" class="ln">  8613&nbsp;&nbsp;</span>	}
<span id="L8614" class="ln">  8614&nbsp;&nbsp;</span>
<span id="L8615" class="ln">  8615&nbsp;&nbsp;</span>	if err != nil &amp;&amp; cs.sentEndStream {
<span id="L8616" class="ln">  8616&nbsp;&nbsp;</span>		<span class="comment">// If the connection is closed immediately after the response is read,</span>
<span id="L8617" class="ln">  8617&nbsp;&nbsp;</span>		<span class="comment">// we may be aborted before finishing up here. If the stream was closed</span>
<span id="L8618" class="ln">  8618&nbsp;&nbsp;</span>		<span class="comment">// cleanly on both sides, there is no error.</span>
<span id="L8619" class="ln">  8619&nbsp;&nbsp;</span>		select {
<span id="L8620" class="ln">  8620&nbsp;&nbsp;</span>		case &lt;-cs.peerClosed:
<span id="L8621" class="ln">  8621&nbsp;&nbsp;</span>			err = nil
<span id="L8622" class="ln">  8622&nbsp;&nbsp;</span>		default:
<span id="L8623" class="ln">  8623&nbsp;&nbsp;</span>		}
<span id="L8624" class="ln">  8624&nbsp;&nbsp;</span>	}
<span id="L8625" class="ln">  8625&nbsp;&nbsp;</span>	if err != nil {
<span id="L8626" class="ln">  8626&nbsp;&nbsp;</span>		cs.abortStream(err) <span class="comment">// possibly redundant, but harmless</span>
<span id="L8627" class="ln">  8627&nbsp;&nbsp;</span>		if cs.sentHeaders {
<span id="L8628" class="ln">  8628&nbsp;&nbsp;</span>			if se, ok := err.(http2StreamError); ok {
<span id="L8629" class="ln">  8629&nbsp;&nbsp;</span>				if se.Cause != http2errFromPeer {
<span id="L8630" class="ln">  8630&nbsp;&nbsp;</span>					cc.writeStreamReset(cs.ID, se.Code, err)
<span id="L8631" class="ln">  8631&nbsp;&nbsp;</span>				}
<span id="L8632" class="ln">  8632&nbsp;&nbsp;</span>			} else {
<span id="L8633" class="ln">  8633&nbsp;&nbsp;</span>				cc.writeStreamReset(cs.ID, http2ErrCodeCancel, err)
<span id="L8634" class="ln">  8634&nbsp;&nbsp;</span>			}
<span id="L8635" class="ln">  8635&nbsp;&nbsp;</span>		}
<span id="L8636" class="ln">  8636&nbsp;&nbsp;</span>		cs.bufPipe.CloseWithError(err) <span class="comment">// no-op if already closed</span>
<span id="L8637" class="ln">  8637&nbsp;&nbsp;</span>	} else {
<span id="L8638" class="ln">  8638&nbsp;&nbsp;</span>		if cs.sentHeaders &amp;&amp; !cs.sentEndStream {
<span id="L8639" class="ln">  8639&nbsp;&nbsp;</span>			cc.writeStreamReset(cs.ID, http2ErrCodeNo, nil)
<span id="L8640" class="ln">  8640&nbsp;&nbsp;</span>		}
<span id="L8641" class="ln">  8641&nbsp;&nbsp;</span>		cs.bufPipe.CloseWithError(http2errRequestCanceled)
<span id="L8642" class="ln">  8642&nbsp;&nbsp;</span>	}
<span id="L8643" class="ln">  8643&nbsp;&nbsp;</span>	if cs.ID != 0 {
<span id="L8644" class="ln">  8644&nbsp;&nbsp;</span>		cc.forgetStreamID(cs.ID)
<span id="L8645" class="ln">  8645&nbsp;&nbsp;</span>	}
<span id="L8646" class="ln">  8646&nbsp;&nbsp;</span>
<span id="L8647" class="ln">  8647&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L8648" class="ln">  8648&nbsp;&nbsp;</span>	werr := cc.werr
<span id="L8649" class="ln">  8649&nbsp;&nbsp;</span>	cc.wmu.Unlock()
<span id="L8650" class="ln">  8650&nbsp;&nbsp;</span>	if werr != nil {
<span id="L8651" class="ln">  8651&nbsp;&nbsp;</span>		cc.Close()
<span id="L8652" class="ln">  8652&nbsp;&nbsp;</span>	}
<span id="L8653" class="ln">  8653&nbsp;&nbsp;</span>
<span id="L8654" class="ln">  8654&nbsp;&nbsp;</span>	close(cs.donec)
<span id="L8655" class="ln">  8655&nbsp;&nbsp;</span>}
<span id="L8656" class="ln">  8656&nbsp;&nbsp;</span>
<span id="L8657" class="ln">  8657&nbsp;&nbsp;</span><span class="comment">// awaitOpenSlotForStreamLocked waits until len(streams) &lt; maxConcurrentStreams.</span>
<span id="L8658" class="ln">  8658&nbsp;&nbsp;</span><span class="comment">// Must hold cc.mu.</span>
<span id="L8659" class="ln">  8659&nbsp;&nbsp;</span>func (cc *http2ClientConn) awaitOpenSlotForStreamLocked(cs *http2clientStream) error {
<span id="L8660" class="ln">  8660&nbsp;&nbsp;</span>	for {
<span id="L8661" class="ln">  8661&nbsp;&nbsp;</span>		cc.lastActive = time.Now()
<span id="L8662" class="ln">  8662&nbsp;&nbsp;</span>		if cc.closed || !cc.canTakeNewRequestLocked() {
<span id="L8663" class="ln">  8663&nbsp;&nbsp;</span>			return http2errClientConnUnusable
<span id="L8664" class="ln">  8664&nbsp;&nbsp;</span>		}
<span id="L8665" class="ln">  8665&nbsp;&nbsp;</span>		cc.lastIdle = time.Time{}
<span id="L8666" class="ln">  8666&nbsp;&nbsp;</span>		if int64(len(cc.streams)) &lt; int64(cc.maxConcurrentStreams) {
<span id="L8667" class="ln">  8667&nbsp;&nbsp;</span>			return nil
<span id="L8668" class="ln">  8668&nbsp;&nbsp;</span>		}
<span id="L8669" class="ln">  8669&nbsp;&nbsp;</span>		cc.pendingRequests++
<span id="L8670" class="ln">  8670&nbsp;&nbsp;</span>		cc.cond.Wait()
<span id="L8671" class="ln">  8671&nbsp;&nbsp;</span>		cc.pendingRequests--
<span id="L8672" class="ln">  8672&nbsp;&nbsp;</span>		select {
<span id="L8673" class="ln">  8673&nbsp;&nbsp;</span>		case &lt;-cs.abort:
<span id="L8674" class="ln">  8674&nbsp;&nbsp;</span>			return cs.abortErr
<span id="L8675" class="ln">  8675&nbsp;&nbsp;</span>		default:
<span id="L8676" class="ln">  8676&nbsp;&nbsp;</span>		}
<span id="L8677" class="ln">  8677&nbsp;&nbsp;</span>	}
<span id="L8678" class="ln">  8678&nbsp;&nbsp;</span>}
<span id="L8679" class="ln">  8679&nbsp;&nbsp;</span>
<span id="L8680" class="ln">  8680&nbsp;&nbsp;</span><span class="comment">// requires cc.wmu be held</span>
<span id="L8681" class="ln">  8681&nbsp;&nbsp;</span>func (cc *http2ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize int, hdrs []byte) error {
<span id="L8682" class="ln">  8682&nbsp;&nbsp;</span>	first := true <span class="comment">// first frame written (HEADERS is first, then CONTINUATION)</span>
<span id="L8683" class="ln">  8683&nbsp;&nbsp;</span>	for len(hdrs) &gt; 0 &amp;&amp; cc.werr == nil {
<span id="L8684" class="ln">  8684&nbsp;&nbsp;</span>		chunk := hdrs
<span id="L8685" class="ln">  8685&nbsp;&nbsp;</span>		if len(chunk) &gt; maxFrameSize {
<span id="L8686" class="ln">  8686&nbsp;&nbsp;</span>			chunk = chunk[:maxFrameSize]
<span id="L8687" class="ln">  8687&nbsp;&nbsp;</span>		}
<span id="L8688" class="ln">  8688&nbsp;&nbsp;</span>		hdrs = hdrs[len(chunk):]
<span id="L8689" class="ln">  8689&nbsp;&nbsp;</span>		endHeaders := len(hdrs) == 0
<span id="L8690" class="ln">  8690&nbsp;&nbsp;</span>		if first {
<span id="L8691" class="ln">  8691&nbsp;&nbsp;</span>			cc.fr.WriteHeaders(http2HeadersFrameParam{
<span id="L8692" class="ln">  8692&nbsp;&nbsp;</span>				StreamID:      streamID,
<span id="L8693" class="ln">  8693&nbsp;&nbsp;</span>				BlockFragment: chunk,
<span id="L8694" class="ln">  8694&nbsp;&nbsp;</span>				EndStream:     endStream,
<span id="L8695" class="ln">  8695&nbsp;&nbsp;</span>				EndHeaders:    endHeaders,
<span id="L8696" class="ln">  8696&nbsp;&nbsp;</span>			})
<span id="L8697" class="ln">  8697&nbsp;&nbsp;</span>			first = false
<span id="L8698" class="ln">  8698&nbsp;&nbsp;</span>		} else {
<span id="L8699" class="ln">  8699&nbsp;&nbsp;</span>			cc.fr.WriteContinuation(streamID, endHeaders, chunk)
<span id="L8700" class="ln">  8700&nbsp;&nbsp;</span>		}
<span id="L8701" class="ln">  8701&nbsp;&nbsp;</span>	}
<span id="L8702" class="ln">  8702&nbsp;&nbsp;</span>	cc.bw.Flush()
<span id="L8703" class="ln">  8703&nbsp;&nbsp;</span>	return cc.werr
<span id="L8704" class="ln">  8704&nbsp;&nbsp;</span>}
<span id="L8705" class="ln">  8705&nbsp;&nbsp;</span>
<span id="L8706" class="ln">  8706&nbsp;&nbsp;</span><span class="comment">// internal error values; they don&#39;t escape to callers</span>
<span id="L8707" class="ln">  8707&nbsp;&nbsp;</span>var (
<span id="L8708" class="ln">  8708&nbsp;&nbsp;</span>	<span class="comment">// abort request body write; don&#39;t send cancel</span>
<span id="L8709" class="ln">  8709&nbsp;&nbsp;</span>	http2errStopReqBodyWrite = errors.New(&#34;http2: aborting request body write&#34;)
<span id="L8710" class="ln">  8710&nbsp;&nbsp;</span>
<span id="L8711" class="ln">  8711&nbsp;&nbsp;</span>	<span class="comment">// abort request body write, but send stream reset of cancel.</span>
<span id="L8712" class="ln">  8712&nbsp;&nbsp;</span>	http2errStopReqBodyWriteAndCancel = errors.New(&#34;http2: canceling request&#34;)
<span id="L8713" class="ln">  8713&nbsp;&nbsp;</span>
<span id="L8714" class="ln">  8714&nbsp;&nbsp;</span>	http2errReqBodyTooLong = errors.New(&#34;http2: request body larger than specified content length&#34;)
<span id="L8715" class="ln">  8715&nbsp;&nbsp;</span>)
<span id="L8716" class="ln">  8716&nbsp;&nbsp;</span>
<span id="L8717" class="ln">  8717&nbsp;&nbsp;</span><span class="comment">// frameScratchBufferLen returns the length of a buffer to use for</span>
<span id="L8718" class="ln">  8718&nbsp;&nbsp;</span><span class="comment">// outgoing request bodies to read/write to/from.</span>
<span id="L8719" class="ln">  8719&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8720" class="ln">  8720&nbsp;&nbsp;</span><span class="comment">// It returns max(1, min(peer&#39;s advertised max frame size,</span>
<span id="L8721" class="ln">  8721&nbsp;&nbsp;</span><span class="comment">// Request.ContentLength+1, 512KB)).</span>
<span id="L8722" class="ln">  8722&nbsp;&nbsp;</span>func (cs *http2clientStream) frameScratchBufferLen(maxFrameSize int) int {
<span id="L8723" class="ln">  8723&nbsp;&nbsp;</span>	const max = 512 &lt;&lt; 10
<span id="L8724" class="ln">  8724&nbsp;&nbsp;</span>	n := int64(maxFrameSize)
<span id="L8725" class="ln">  8725&nbsp;&nbsp;</span>	if n &gt; max {
<span id="L8726" class="ln">  8726&nbsp;&nbsp;</span>		n = max
<span id="L8727" class="ln">  8727&nbsp;&nbsp;</span>	}
<span id="L8728" class="ln">  8728&nbsp;&nbsp;</span>	if cl := cs.reqBodyContentLength; cl != -1 &amp;&amp; cl+1 &lt; n {
<span id="L8729" class="ln">  8729&nbsp;&nbsp;</span>		<span class="comment">// Add an extra byte past the declared content-length to</span>
<span id="L8730" class="ln">  8730&nbsp;&nbsp;</span>		<span class="comment">// give the caller&#39;s Request.Body io.Reader a chance to</span>
<span id="L8731" class="ln">  8731&nbsp;&nbsp;</span>		<span class="comment">// give us more bytes than they declared, so we can catch it</span>
<span id="L8732" class="ln">  8732&nbsp;&nbsp;</span>		<span class="comment">// early.</span>
<span id="L8733" class="ln">  8733&nbsp;&nbsp;</span>		n = cl + 1
<span id="L8734" class="ln">  8734&nbsp;&nbsp;</span>	}
<span id="L8735" class="ln">  8735&nbsp;&nbsp;</span>	if n &lt; 1 {
<span id="L8736" class="ln">  8736&nbsp;&nbsp;</span>		return 1
<span id="L8737" class="ln">  8737&nbsp;&nbsp;</span>	}
<span id="L8738" class="ln">  8738&nbsp;&nbsp;</span>	return int(n) <span class="comment">// doesn&#39;t truncate; max is 512K</span>
<span id="L8739" class="ln">  8739&nbsp;&nbsp;</span>}
<span id="L8740" class="ln">  8740&nbsp;&nbsp;</span>
<span id="L8741" class="ln">  8741&nbsp;&nbsp;</span><span class="comment">// Seven bufPools manage different frame sizes. This helps to avoid scenarios where long-running</span>
<span id="L8742" class="ln">  8742&nbsp;&nbsp;</span><span class="comment">// streaming requests using small frame sizes occupy large buffers initially allocated for prior</span>
<span id="L8743" class="ln">  8743&nbsp;&nbsp;</span><span class="comment">// requests needing big buffers. The size ranges are as follows:</span>
<span id="L8744" class="ln">  8744&nbsp;&nbsp;</span><span class="comment">// {0 KB, 16 KB], {16 KB, 32 KB], {32 KB, 64 KB], {64 KB, 128 KB], {128 KB, 256 KB],</span>
<span id="L8745" class="ln">  8745&nbsp;&nbsp;</span><span class="comment">// {256 KB, 512 KB], {512 KB, infinity}</span>
<span id="L8746" class="ln">  8746&nbsp;&nbsp;</span><span class="comment">// In practice, the maximum scratch buffer size should not exceed 512 KB due to</span>
<span id="L8747" class="ln">  8747&nbsp;&nbsp;</span><span class="comment">// frameScratchBufferLen(maxFrameSize), thus the &#34;infinity pool&#34; should never be used.</span>
<span id="L8748" class="ln">  8748&nbsp;&nbsp;</span><span class="comment">// It exists mainly as a safety measure, for potential future increases in max buffer size.</span>
<span id="L8749" class="ln">  8749&nbsp;&nbsp;</span>var http2bufPools [7]sync.Pool <span class="comment">// of *[]byte</span>
<span id="L8750" class="ln">  8750&nbsp;&nbsp;</span>
<span id="L8751" class="ln">  8751&nbsp;&nbsp;</span>func http2bufPoolIndex(size int) int {
<span id="L8752" class="ln">  8752&nbsp;&nbsp;</span>	if size &lt;= 16384 {
<span id="L8753" class="ln">  8753&nbsp;&nbsp;</span>		return 0
<span id="L8754" class="ln">  8754&nbsp;&nbsp;</span>	}
<span id="L8755" class="ln">  8755&nbsp;&nbsp;</span>	size -= 1
<span id="L8756" class="ln">  8756&nbsp;&nbsp;</span>	bits := bits.Len(uint(size))
<span id="L8757" class="ln">  8757&nbsp;&nbsp;</span>	index := bits - 14
<span id="L8758" class="ln">  8758&nbsp;&nbsp;</span>	if index &gt;= len(http2bufPools) {
<span id="L8759" class="ln">  8759&nbsp;&nbsp;</span>		return len(http2bufPools) - 1
<span id="L8760" class="ln">  8760&nbsp;&nbsp;</span>	}
<span id="L8761" class="ln">  8761&nbsp;&nbsp;</span>	return index
<span id="L8762" class="ln">  8762&nbsp;&nbsp;</span>}
<span id="L8763" class="ln">  8763&nbsp;&nbsp;</span>
<span id="L8764" class="ln">  8764&nbsp;&nbsp;</span>func (cs *http2clientStream) writeRequestBody(req *Request) (err error) {
<span id="L8765" class="ln">  8765&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L8766" class="ln">  8766&nbsp;&nbsp;</span>	body := cs.reqBody
<span id="L8767" class="ln">  8767&nbsp;&nbsp;</span>	sentEnd := false <span class="comment">// whether we sent the final DATA frame w/ END_STREAM</span>
<span id="L8768" class="ln">  8768&nbsp;&nbsp;</span>
<span id="L8769" class="ln">  8769&nbsp;&nbsp;</span>	hasTrailers := req.Trailer != nil
<span id="L8770" class="ln">  8770&nbsp;&nbsp;</span>	remainLen := cs.reqBodyContentLength
<span id="L8771" class="ln">  8771&nbsp;&nbsp;</span>	hasContentLen := remainLen != -1
<span id="L8772" class="ln">  8772&nbsp;&nbsp;</span>
<span id="L8773" class="ln">  8773&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8774" class="ln">  8774&nbsp;&nbsp;</span>	maxFrameSize := int(cc.maxFrameSize)
<span id="L8775" class="ln">  8775&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8776" class="ln">  8776&nbsp;&nbsp;</span>
<span id="L8777" class="ln">  8777&nbsp;&nbsp;</span>	<span class="comment">// Scratch buffer for reading into &amp; writing from.</span>
<span id="L8778" class="ln">  8778&nbsp;&nbsp;</span>	scratchLen := cs.frameScratchBufferLen(maxFrameSize)
<span id="L8779" class="ln">  8779&nbsp;&nbsp;</span>	var buf []byte
<span id="L8780" class="ln">  8780&nbsp;&nbsp;</span>	index := http2bufPoolIndex(scratchLen)
<span id="L8781" class="ln">  8781&nbsp;&nbsp;</span>	if bp, ok := http2bufPools[index].Get().(*[]byte); ok &amp;&amp; len(*bp) &gt;= scratchLen {
<span id="L8782" class="ln">  8782&nbsp;&nbsp;</span>		defer http2bufPools[index].Put(bp)
<span id="L8783" class="ln">  8783&nbsp;&nbsp;</span>		buf = *bp
<span id="L8784" class="ln">  8784&nbsp;&nbsp;</span>	} else {
<span id="L8785" class="ln">  8785&nbsp;&nbsp;</span>		buf = make([]byte, scratchLen)
<span id="L8786" class="ln">  8786&nbsp;&nbsp;</span>		defer http2bufPools[index].Put(&amp;buf)
<span id="L8787" class="ln">  8787&nbsp;&nbsp;</span>	}
<span id="L8788" class="ln">  8788&nbsp;&nbsp;</span>
<span id="L8789" class="ln">  8789&nbsp;&nbsp;</span>	var sawEOF bool
<span id="L8790" class="ln">  8790&nbsp;&nbsp;</span>	for !sawEOF {
<span id="L8791" class="ln">  8791&nbsp;&nbsp;</span>		n, err := body.Read(buf)
<span id="L8792" class="ln">  8792&nbsp;&nbsp;</span>		if hasContentLen {
<span id="L8793" class="ln">  8793&nbsp;&nbsp;</span>			remainLen -= int64(n)
<span id="L8794" class="ln">  8794&nbsp;&nbsp;</span>			if remainLen == 0 &amp;&amp; err == nil {
<span id="L8795" class="ln">  8795&nbsp;&nbsp;</span>				<span class="comment">// The request body&#39;s Content-Length was predeclared and</span>
<span id="L8796" class="ln">  8796&nbsp;&nbsp;</span>				<span class="comment">// we just finished reading it all, but the underlying io.Reader</span>
<span id="L8797" class="ln">  8797&nbsp;&nbsp;</span>				<span class="comment">// returned the final chunk with a nil error (which is one of</span>
<span id="L8798" class="ln">  8798&nbsp;&nbsp;</span>				<span class="comment">// the two valid things a Reader can do at EOF). Because we&#39;d prefer</span>
<span id="L8799" class="ln">  8799&nbsp;&nbsp;</span>				<span class="comment">// to send the END_STREAM bit early, double-check that we&#39;re actually</span>
<span id="L8800" class="ln">  8800&nbsp;&nbsp;</span>				<span class="comment">// at EOF. Subsequent reads should return (0, EOF) at this point.</span>
<span id="L8801" class="ln">  8801&nbsp;&nbsp;</span>				<span class="comment">// If either value is different, we return an error in one of two ways below.</span>
<span id="L8802" class="ln">  8802&nbsp;&nbsp;</span>				var scratch [1]byte
<span id="L8803" class="ln">  8803&nbsp;&nbsp;</span>				var n1 int
<span id="L8804" class="ln">  8804&nbsp;&nbsp;</span>				n1, err = body.Read(scratch[:])
<span id="L8805" class="ln">  8805&nbsp;&nbsp;</span>				remainLen -= int64(n1)
<span id="L8806" class="ln">  8806&nbsp;&nbsp;</span>			}
<span id="L8807" class="ln">  8807&nbsp;&nbsp;</span>			if remainLen &lt; 0 {
<span id="L8808" class="ln">  8808&nbsp;&nbsp;</span>				err = http2errReqBodyTooLong
<span id="L8809" class="ln">  8809&nbsp;&nbsp;</span>				return err
<span id="L8810" class="ln">  8810&nbsp;&nbsp;</span>			}
<span id="L8811" class="ln">  8811&nbsp;&nbsp;</span>		}
<span id="L8812" class="ln">  8812&nbsp;&nbsp;</span>		if err != nil {
<span id="L8813" class="ln">  8813&nbsp;&nbsp;</span>			cc.mu.Lock()
<span id="L8814" class="ln">  8814&nbsp;&nbsp;</span>			bodyClosed := cs.reqBodyClosed != nil
<span id="L8815" class="ln">  8815&nbsp;&nbsp;</span>			cc.mu.Unlock()
<span id="L8816" class="ln">  8816&nbsp;&nbsp;</span>			switch {
<span id="L8817" class="ln">  8817&nbsp;&nbsp;</span>			case bodyClosed:
<span id="L8818" class="ln">  8818&nbsp;&nbsp;</span>				return http2errStopReqBodyWrite
<span id="L8819" class="ln">  8819&nbsp;&nbsp;</span>			case err == io.EOF:
<span id="L8820" class="ln">  8820&nbsp;&nbsp;</span>				sawEOF = true
<span id="L8821" class="ln">  8821&nbsp;&nbsp;</span>				err = nil
<span id="L8822" class="ln">  8822&nbsp;&nbsp;</span>			default:
<span id="L8823" class="ln">  8823&nbsp;&nbsp;</span>				return err
<span id="L8824" class="ln">  8824&nbsp;&nbsp;</span>			}
<span id="L8825" class="ln">  8825&nbsp;&nbsp;</span>		}
<span id="L8826" class="ln">  8826&nbsp;&nbsp;</span>
<span id="L8827" class="ln">  8827&nbsp;&nbsp;</span>		remain := buf[:n]
<span id="L8828" class="ln">  8828&nbsp;&nbsp;</span>		for len(remain) &gt; 0 &amp;&amp; err == nil {
<span id="L8829" class="ln">  8829&nbsp;&nbsp;</span>			var allowed int32
<span id="L8830" class="ln">  8830&nbsp;&nbsp;</span>			allowed, err = cs.awaitFlowControl(len(remain))
<span id="L8831" class="ln">  8831&nbsp;&nbsp;</span>			if err != nil {
<span id="L8832" class="ln">  8832&nbsp;&nbsp;</span>				return err
<span id="L8833" class="ln">  8833&nbsp;&nbsp;</span>			}
<span id="L8834" class="ln">  8834&nbsp;&nbsp;</span>			cc.wmu.Lock()
<span id="L8835" class="ln">  8835&nbsp;&nbsp;</span>			data := remain[:allowed]
<span id="L8836" class="ln">  8836&nbsp;&nbsp;</span>			remain = remain[allowed:]
<span id="L8837" class="ln">  8837&nbsp;&nbsp;</span>			sentEnd = sawEOF &amp;&amp; len(remain) == 0 &amp;&amp; !hasTrailers
<span id="L8838" class="ln">  8838&nbsp;&nbsp;</span>			err = cc.fr.WriteData(cs.ID, sentEnd, data)
<span id="L8839" class="ln">  8839&nbsp;&nbsp;</span>			if err == nil {
<span id="L8840" class="ln">  8840&nbsp;&nbsp;</span>				<span class="comment">// TODO(bradfitz): this flush is for latency, not bandwidth.</span>
<span id="L8841" class="ln">  8841&nbsp;&nbsp;</span>				<span class="comment">// Most requests won&#39;t need this. Make this opt-in or</span>
<span id="L8842" class="ln">  8842&nbsp;&nbsp;</span>				<span class="comment">// opt-out?  Use some heuristic on the body type? Nagel-like</span>
<span id="L8843" class="ln">  8843&nbsp;&nbsp;</span>				<span class="comment">// timers?  Based on &#39;n&#39;? Only last chunk of this for loop,</span>
<span id="L8844" class="ln">  8844&nbsp;&nbsp;</span>				<span class="comment">// unless flow control tokens are low? For now, always.</span>
<span id="L8845" class="ln">  8845&nbsp;&nbsp;</span>				<span class="comment">// If we change this, see comment below.</span>
<span id="L8846" class="ln">  8846&nbsp;&nbsp;</span>				err = cc.bw.Flush()
<span id="L8847" class="ln">  8847&nbsp;&nbsp;</span>			}
<span id="L8848" class="ln">  8848&nbsp;&nbsp;</span>			cc.wmu.Unlock()
<span id="L8849" class="ln">  8849&nbsp;&nbsp;</span>		}
<span id="L8850" class="ln">  8850&nbsp;&nbsp;</span>		if err != nil {
<span id="L8851" class="ln">  8851&nbsp;&nbsp;</span>			return err
<span id="L8852" class="ln">  8852&nbsp;&nbsp;</span>		}
<span id="L8853" class="ln">  8853&nbsp;&nbsp;</span>	}
<span id="L8854" class="ln">  8854&nbsp;&nbsp;</span>
<span id="L8855" class="ln">  8855&nbsp;&nbsp;</span>	if sentEnd {
<span id="L8856" class="ln">  8856&nbsp;&nbsp;</span>		<span class="comment">// Already sent END_STREAM (which implies we have no</span>
<span id="L8857" class="ln">  8857&nbsp;&nbsp;</span>		<span class="comment">// trailers) and flushed, because currently all</span>
<span id="L8858" class="ln">  8858&nbsp;&nbsp;</span>		<span class="comment">// WriteData frames above get a flush. So we&#39;re done.</span>
<span id="L8859" class="ln">  8859&nbsp;&nbsp;</span>		return nil
<span id="L8860" class="ln">  8860&nbsp;&nbsp;</span>	}
<span id="L8861" class="ln">  8861&nbsp;&nbsp;</span>
<span id="L8862" class="ln">  8862&nbsp;&nbsp;</span>	<span class="comment">// Since the RoundTrip contract permits the caller to &#34;mutate or reuse&#34;</span>
<span id="L8863" class="ln">  8863&nbsp;&nbsp;</span>	<span class="comment">// a request after the Response&#39;s Body is closed, verify that this hasn&#39;t</span>
<span id="L8864" class="ln">  8864&nbsp;&nbsp;</span>	<span class="comment">// happened before accessing the trailers.</span>
<span id="L8865" class="ln">  8865&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8866" class="ln">  8866&nbsp;&nbsp;</span>	trailer := req.Trailer
<span id="L8867" class="ln">  8867&nbsp;&nbsp;</span>	err = cs.abortErr
<span id="L8868" class="ln">  8868&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L8869" class="ln">  8869&nbsp;&nbsp;</span>	if err != nil {
<span id="L8870" class="ln">  8870&nbsp;&nbsp;</span>		return err
<span id="L8871" class="ln">  8871&nbsp;&nbsp;</span>	}
<span id="L8872" class="ln">  8872&nbsp;&nbsp;</span>
<span id="L8873" class="ln">  8873&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L8874" class="ln">  8874&nbsp;&nbsp;</span>	defer cc.wmu.Unlock()
<span id="L8875" class="ln">  8875&nbsp;&nbsp;</span>	var trls []byte
<span id="L8876" class="ln">  8876&nbsp;&nbsp;</span>	if len(trailer) &gt; 0 {
<span id="L8877" class="ln">  8877&nbsp;&nbsp;</span>		trls, err = cc.encodeTrailers(trailer)
<span id="L8878" class="ln">  8878&nbsp;&nbsp;</span>		if err != nil {
<span id="L8879" class="ln">  8879&nbsp;&nbsp;</span>			return err
<span id="L8880" class="ln">  8880&nbsp;&nbsp;</span>		}
<span id="L8881" class="ln">  8881&nbsp;&nbsp;</span>	}
<span id="L8882" class="ln">  8882&nbsp;&nbsp;</span>
<span id="L8883" class="ln">  8883&nbsp;&nbsp;</span>	<span class="comment">// Two ways to send END_STREAM: either with trailers, or</span>
<span id="L8884" class="ln">  8884&nbsp;&nbsp;</span>	<span class="comment">// with an empty DATA frame.</span>
<span id="L8885" class="ln">  8885&nbsp;&nbsp;</span>	if len(trls) &gt; 0 {
<span id="L8886" class="ln">  8886&nbsp;&nbsp;</span>		err = cc.writeHeaders(cs.ID, true, maxFrameSize, trls)
<span id="L8887" class="ln">  8887&nbsp;&nbsp;</span>	} else {
<span id="L8888" class="ln">  8888&nbsp;&nbsp;</span>		err = cc.fr.WriteData(cs.ID, true, nil)
<span id="L8889" class="ln">  8889&nbsp;&nbsp;</span>	}
<span id="L8890" class="ln">  8890&nbsp;&nbsp;</span>	if ferr := cc.bw.Flush(); ferr != nil &amp;&amp; err == nil {
<span id="L8891" class="ln">  8891&nbsp;&nbsp;</span>		err = ferr
<span id="L8892" class="ln">  8892&nbsp;&nbsp;</span>	}
<span id="L8893" class="ln">  8893&nbsp;&nbsp;</span>	return err
<span id="L8894" class="ln">  8894&nbsp;&nbsp;</span>}
<span id="L8895" class="ln">  8895&nbsp;&nbsp;</span>
<span id="L8896" class="ln">  8896&nbsp;&nbsp;</span><span class="comment">// awaitFlowControl waits for [1, min(maxBytes, cc.cs.maxFrameSize)] flow</span>
<span id="L8897" class="ln">  8897&nbsp;&nbsp;</span><span class="comment">// control tokens from the server.</span>
<span id="L8898" class="ln">  8898&nbsp;&nbsp;</span><span class="comment">// It returns either the non-zero number of tokens taken or an error</span>
<span id="L8899" class="ln">  8899&nbsp;&nbsp;</span><span class="comment">// if the stream is dead.</span>
<span id="L8900" class="ln">  8900&nbsp;&nbsp;</span>func (cs *http2clientStream) awaitFlowControl(maxBytes int) (taken int32, err error) {
<span id="L8901" class="ln">  8901&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L8902" class="ln">  8902&nbsp;&nbsp;</span>	ctx := cs.ctx
<span id="L8903" class="ln">  8903&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L8904" class="ln">  8904&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L8905" class="ln">  8905&nbsp;&nbsp;</span>	for {
<span id="L8906" class="ln">  8906&nbsp;&nbsp;</span>		if cc.closed {
<span id="L8907" class="ln">  8907&nbsp;&nbsp;</span>			return 0, http2errClientConnClosed
<span id="L8908" class="ln">  8908&nbsp;&nbsp;</span>		}
<span id="L8909" class="ln">  8909&nbsp;&nbsp;</span>		if cs.reqBodyClosed != nil {
<span id="L8910" class="ln">  8910&nbsp;&nbsp;</span>			return 0, http2errStopReqBodyWrite
<span id="L8911" class="ln">  8911&nbsp;&nbsp;</span>		}
<span id="L8912" class="ln">  8912&nbsp;&nbsp;</span>		select {
<span id="L8913" class="ln">  8913&nbsp;&nbsp;</span>		case &lt;-cs.abort:
<span id="L8914" class="ln">  8914&nbsp;&nbsp;</span>			return 0, cs.abortErr
<span id="L8915" class="ln">  8915&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L8916" class="ln">  8916&nbsp;&nbsp;</span>			return 0, ctx.Err()
<span id="L8917" class="ln">  8917&nbsp;&nbsp;</span>		case &lt;-cs.reqCancel:
<span id="L8918" class="ln">  8918&nbsp;&nbsp;</span>			return 0, http2errRequestCanceled
<span id="L8919" class="ln">  8919&nbsp;&nbsp;</span>		default:
<span id="L8920" class="ln">  8920&nbsp;&nbsp;</span>		}
<span id="L8921" class="ln">  8921&nbsp;&nbsp;</span>		if a := cs.flow.available(); a &gt; 0 {
<span id="L8922" class="ln">  8922&nbsp;&nbsp;</span>			take := a
<span id="L8923" class="ln">  8923&nbsp;&nbsp;</span>			if int(take) &gt; maxBytes {
<span id="L8924" class="ln">  8924&nbsp;&nbsp;</span>
<span id="L8925" class="ln">  8925&nbsp;&nbsp;</span>				take = int32(maxBytes) <span class="comment">// can&#39;t truncate int; take is int32</span>
<span id="L8926" class="ln">  8926&nbsp;&nbsp;</span>			}
<span id="L8927" class="ln">  8927&nbsp;&nbsp;</span>			if take &gt; int32(cc.maxFrameSize) {
<span id="L8928" class="ln">  8928&nbsp;&nbsp;</span>				take = int32(cc.maxFrameSize)
<span id="L8929" class="ln">  8929&nbsp;&nbsp;</span>			}
<span id="L8930" class="ln">  8930&nbsp;&nbsp;</span>			cs.flow.take(take)
<span id="L8931" class="ln">  8931&nbsp;&nbsp;</span>			return take, nil
<span id="L8932" class="ln">  8932&nbsp;&nbsp;</span>		}
<span id="L8933" class="ln">  8933&nbsp;&nbsp;</span>		cc.cond.Wait()
<span id="L8934" class="ln">  8934&nbsp;&nbsp;</span>	}
<span id="L8935" class="ln">  8935&nbsp;&nbsp;</span>}
<span id="L8936" class="ln">  8936&nbsp;&nbsp;</span>
<span id="L8937" class="ln">  8937&nbsp;&nbsp;</span>var http2errNilRequestURL = errors.New(&#34;http2: Request.URI is nil&#34;)
<span id="L8938" class="ln">  8938&nbsp;&nbsp;</span>
<span id="L8939" class="ln">  8939&nbsp;&nbsp;</span><span class="comment">// requires cc.wmu be held.</span>
<span id="L8940" class="ln">  8940&nbsp;&nbsp;</span>func (cc *http2ClientConn) encodeHeaders(req *Request, addGzipHeader bool, trailers string, contentLength int64) ([]byte, error) {
<span id="L8941" class="ln">  8941&nbsp;&nbsp;</span>	cc.hbuf.Reset()
<span id="L8942" class="ln">  8942&nbsp;&nbsp;</span>	if req.URL == nil {
<span id="L8943" class="ln">  8943&nbsp;&nbsp;</span>		return nil, http2errNilRequestURL
<span id="L8944" class="ln">  8944&nbsp;&nbsp;</span>	}
<span id="L8945" class="ln">  8945&nbsp;&nbsp;</span>
<span id="L8946" class="ln">  8946&nbsp;&nbsp;</span>	host := req.Host
<span id="L8947" class="ln">  8947&nbsp;&nbsp;</span>	if host == &#34;&#34; {
<span id="L8948" class="ln">  8948&nbsp;&nbsp;</span>		host = req.URL.Host
<span id="L8949" class="ln">  8949&nbsp;&nbsp;</span>	}
<span id="L8950" class="ln">  8950&nbsp;&nbsp;</span>	host, err := httpguts.PunycodeHostPort(host)
<span id="L8951" class="ln">  8951&nbsp;&nbsp;</span>	if err != nil {
<span id="L8952" class="ln">  8952&nbsp;&nbsp;</span>		return nil, err
<span id="L8953" class="ln">  8953&nbsp;&nbsp;</span>	}
<span id="L8954" class="ln">  8954&nbsp;&nbsp;</span>	if !httpguts.ValidHostHeader(host) {
<span id="L8955" class="ln">  8955&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http2: invalid Host header&#34;)
<span id="L8956" class="ln">  8956&nbsp;&nbsp;</span>	}
<span id="L8957" class="ln">  8957&nbsp;&nbsp;</span>
<span id="L8958" class="ln">  8958&nbsp;&nbsp;</span>	var path string
<span id="L8959" class="ln">  8959&nbsp;&nbsp;</span>	if req.Method != &#34;CONNECT&#34; {
<span id="L8960" class="ln">  8960&nbsp;&nbsp;</span>		path = req.URL.RequestURI()
<span id="L8961" class="ln">  8961&nbsp;&nbsp;</span>		if !http2validPseudoPath(path) {
<span id="L8962" class="ln">  8962&nbsp;&nbsp;</span>			orig := path
<span id="L8963" class="ln">  8963&nbsp;&nbsp;</span>			path = strings.TrimPrefix(path, req.URL.Scheme+&#34;://&#34;+host)
<span id="L8964" class="ln">  8964&nbsp;&nbsp;</span>			if !http2validPseudoPath(path) {
<span id="L8965" class="ln">  8965&nbsp;&nbsp;</span>				if req.URL.Opaque != &#34;&#34; {
<span id="L8966" class="ln">  8966&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;invalid request :path %q from URL.Opaque = %q&#34;, orig, req.URL.Opaque)
<span id="L8967" class="ln">  8967&nbsp;&nbsp;</span>				} else {
<span id="L8968" class="ln">  8968&nbsp;&nbsp;</span>					return nil, fmt.Errorf(&#34;invalid request :path %q&#34;, orig)
<span id="L8969" class="ln">  8969&nbsp;&nbsp;</span>				}
<span id="L8970" class="ln">  8970&nbsp;&nbsp;</span>			}
<span id="L8971" class="ln">  8971&nbsp;&nbsp;</span>		}
<span id="L8972" class="ln">  8972&nbsp;&nbsp;</span>	}
<span id="L8973" class="ln">  8973&nbsp;&nbsp;</span>
<span id="L8974" class="ln">  8974&nbsp;&nbsp;</span>	<span class="comment">// Check for any invalid headers and return an error before we</span>
<span id="L8975" class="ln">  8975&nbsp;&nbsp;</span>	<span class="comment">// potentially pollute our hpack state. (We want to be able to</span>
<span id="L8976" class="ln">  8976&nbsp;&nbsp;</span>	<span class="comment">// continue to reuse the hpack encoder for future requests)</span>
<span id="L8977" class="ln">  8977&nbsp;&nbsp;</span>	for k, vv := range req.Header {
<span id="L8978" class="ln">  8978&nbsp;&nbsp;</span>		if !httpguts.ValidHeaderFieldName(k) {
<span id="L8979" class="ln">  8979&nbsp;&nbsp;</span>			return nil, fmt.Errorf(&#34;invalid HTTP header name %q&#34;, k)
<span id="L8980" class="ln">  8980&nbsp;&nbsp;</span>		}
<span id="L8981" class="ln">  8981&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L8982" class="ln">  8982&nbsp;&nbsp;</span>			if !httpguts.ValidHeaderFieldValue(v) {
<span id="L8983" class="ln">  8983&nbsp;&nbsp;</span>				<span class="comment">// Don&#39;t include the value in the error, because it may be sensitive.</span>
<span id="L8984" class="ln">  8984&nbsp;&nbsp;</span>				return nil, fmt.Errorf(&#34;invalid HTTP header value for header %q&#34;, k)
<span id="L8985" class="ln">  8985&nbsp;&nbsp;</span>			}
<span id="L8986" class="ln">  8986&nbsp;&nbsp;</span>		}
<span id="L8987" class="ln">  8987&nbsp;&nbsp;</span>	}
<span id="L8988" class="ln">  8988&nbsp;&nbsp;</span>
<span id="L8989" class="ln">  8989&nbsp;&nbsp;</span>	enumerateHeaders := func(f func(name, value string)) {
<span id="L8990" class="ln">  8990&nbsp;&nbsp;</span>		<span class="comment">// 8.1.2.3 Request Pseudo-Header Fields</span>
<span id="L8991" class="ln">  8991&nbsp;&nbsp;</span>		<span class="comment">// The :path pseudo-header field includes the path and query parts of the</span>
<span id="L8992" class="ln">  8992&nbsp;&nbsp;</span>		<span class="comment">// target URI (the path-absolute production and optionally a &#39;?&#39; character</span>
<span id="L8993" class="ln">  8993&nbsp;&nbsp;</span>		<span class="comment">// followed by the query production, see Sections 3.3 and 3.4 of</span>
<span id="L8994" class="ln">  8994&nbsp;&nbsp;</span>		<span class="comment">// [RFC3986]).</span>
<span id="L8995" class="ln">  8995&nbsp;&nbsp;</span>		f(&#34;:authority&#34;, host)
<span id="L8996" class="ln">  8996&nbsp;&nbsp;</span>		m := req.Method
<span id="L8997" class="ln">  8997&nbsp;&nbsp;</span>		if m == &#34;&#34; {
<span id="L8998" class="ln">  8998&nbsp;&nbsp;</span>			m = MethodGet
<span id="L8999" class="ln">  8999&nbsp;&nbsp;</span>		}
<span id="L9000" class="ln">  9000&nbsp;&nbsp;</span>		f(&#34;:method&#34;, m)
<span id="L9001" class="ln">  9001&nbsp;&nbsp;</span>		if req.Method != &#34;CONNECT&#34; {
<span id="L9002" class="ln">  9002&nbsp;&nbsp;</span>			f(&#34;:path&#34;, path)
<span id="L9003" class="ln">  9003&nbsp;&nbsp;</span>			f(&#34;:scheme&#34;, req.URL.Scheme)
<span id="L9004" class="ln">  9004&nbsp;&nbsp;</span>		}
<span id="L9005" class="ln">  9005&nbsp;&nbsp;</span>		if trailers != &#34;&#34; {
<span id="L9006" class="ln">  9006&nbsp;&nbsp;</span>			f(&#34;trailer&#34;, trailers)
<span id="L9007" class="ln">  9007&nbsp;&nbsp;</span>		}
<span id="L9008" class="ln">  9008&nbsp;&nbsp;</span>
<span id="L9009" class="ln">  9009&nbsp;&nbsp;</span>		var didUA bool
<span id="L9010" class="ln">  9010&nbsp;&nbsp;</span>		for k, vv := range req.Header {
<span id="L9011" class="ln">  9011&nbsp;&nbsp;</span>			if http2asciiEqualFold(k, &#34;host&#34;) || http2asciiEqualFold(k, &#34;content-length&#34;) {
<span id="L9012" class="ln">  9012&nbsp;&nbsp;</span>				<span class="comment">// Host is :authority, already sent.</span>
<span id="L9013" class="ln">  9013&nbsp;&nbsp;</span>				<span class="comment">// Content-Length is automatic, set below.</span>
<span id="L9014" class="ln">  9014&nbsp;&nbsp;</span>				continue
<span id="L9015" class="ln">  9015&nbsp;&nbsp;</span>			} else if http2asciiEqualFold(k, &#34;connection&#34;) ||
<span id="L9016" class="ln">  9016&nbsp;&nbsp;</span>				http2asciiEqualFold(k, &#34;proxy-connection&#34;) ||
<span id="L9017" class="ln">  9017&nbsp;&nbsp;</span>				http2asciiEqualFold(k, &#34;transfer-encoding&#34;) ||
<span id="L9018" class="ln">  9018&nbsp;&nbsp;</span>				http2asciiEqualFold(k, &#34;upgrade&#34;) ||
<span id="L9019" class="ln">  9019&nbsp;&nbsp;</span>				http2asciiEqualFold(k, &#34;keep-alive&#34;) {
<span id="L9020" class="ln">  9020&nbsp;&nbsp;</span>				<span class="comment">// Per 8.1.2.2 Connection-Specific Header</span>
<span id="L9021" class="ln">  9021&nbsp;&nbsp;</span>				<span class="comment">// Fields, don&#39;t send connection-specific</span>
<span id="L9022" class="ln">  9022&nbsp;&nbsp;</span>				<span class="comment">// fields. We have already checked if any</span>
<span id="L9023" class="ln">  9023&nbsp;&nbsp;</span>				<span class="comment">// are error-worthy so just ignore the rest.</span>
<span id="L9024" class="ln">  9024&nbsp;&nbsp;</span>				continue
<span id="L9025" class="ln">  9025&nbsp;&nbsp;</span>			} else if http2asciiEqualFold(k, &#34;user-agent&#34;) {
<span id="L9026" class="ln">  9026&nbsp;&nbsp;</span>				<span class="comment">// Match Go&#39;s http1 behavior: at most one</span>
<span id="L9027" class="ln">  9027&nbsp;&nbsp;</span>				<span class="comment">// User-Agent. If set to nil or empty string,</span>
<span id="L9028" class="ln">  9028&nbsp;&nbsp;</span>				<span class="comment">// then omit it. Otherwise if not mentioned,</span>
<span id="L9029" class="ln">  9029&nbsp;&nbsp;</span>				<span class="comment">// include the default (below).</span>
<span id="L9030" class="ln">  9030&nbsp;&nbsp;</span>				didUA = true
<span id="L9031" class="ln">  9031&nbsp;&nbsp;</span>				if len(vv) &lt; 1 {
<span id="L9032" class="ln">  9032&nbsp;&nbsp;</span>					continue
<span id="L9033" class="ln">  9033&nbsp;&nbsp;</span>				}
<span id="L9034" class="ln">  9034&nbsp;&nbsp;</span>				vv = vv[:1]
<span id="L9035" class="ln">  9035&nbsp;&nbsp;</span>				if vv[0] == &#34;&#34; {
<span id="L9036" class="ln">  9036&nbsp;&nbsp;</span>					continue
<span id="L9037" class="ln">  9037&nbsp;&nbsp;</span>				}
<span id="L9038" class="ln">  9038&nbsp;&nbsp;</span>			} else if http2asciiEqualFold(k, &#34;cookie&#34;) {
<span id="L9039" class="ln">  9039&nbsp;&nbsp;</span>				<span class="comment">// Per 8.1.2.5 To allow for better compression efficiency, the</span>
<span id="L9040" class="ln">  9040&nbsp;&nbsp;</span>				<span class="comment">// Cookie header field MAY be split into separate header fields,</span>
<span id="L9041" class="ln">  9041&nbsp;&nbsp;</span>				<span class="comment">// each with one or more cookie-pairs.</span>
<span id="L9042" class="ln">  9042&nbsp;&nbsp;</span>				for _, v := range vv {
<span id="L9043" class="ln">  9043&nbsp;&nbsp;</span>					for {
<span id="L9044" class="ln">  9044&nbsp;&nbsp;</span>						p := strings.IndexByte(v, &#39;;&#39;)
<span id="L9045" class="ln">  9045&nbsp;&nbsp;</span>						if p &lt; 0 {
<span id="L9046" class="ln">  9046&nbsp;&nbsp;</span>							break
<span id="L9047" class="ln">  9047&nbsp;&nbsp;</span>						}
<span id="L9048" class="ln">  9048&nbsp;&nbsp;</span>						f(&#34;cookie&#34;, v[:p])
<span id="L9049" class="ln">  9049&nbsp;&nbsp;</span>						p++
<span id="L9050" class="ln">  9050&nbsp;&nbsp;</span>						<span class="comment">// strip space after semicolon if any.</span>
<span id="L9051" class="ln">  9051&nbsp;&nbsp;</span>						for p+1 &lt;= len(v) &amp;&amp; v[p] == &#39; &#39; {
<span id="L9052" class="ln">  9052&nbsp;&nbsp;</span>							p++
<span id="L9053" class="ln">  9053&nbsp;&nbsp;</span>						}
<span id="L9054" class="ln">  9054&nbsp;&nbsp;</span>						v = v[p:]
<span id="L9055" class="ln">  9055&nbsp;&nbsp;</span>					}
<span id="L9056" class="ln">  9056&nbsp;&nbsp;</span>					if len(v) &gt; 0 {
<span id="L9057" class="ln">  9057&nbsp;&nbsp;</span>						f(&#34;cookie&#34;, v)
<span id="L9058" class="ln">  9058&nbsp;&nbsp;</span>					}
<span id="L9059" class="ln">  9059&nbsp;&nbsp;</span>				}
<span id="L9060" class="ln">  9060&nbsp;&nbsp;</span>				continue
<span id="L9061" class="ln">  9061&nbsp;&nbsp;</span>			}
<span id="L9062" class="ln">  9062&nbsp;&nbsp;</span>
<span id="L9063" class="ln">  9063&nbsp;&nbsp;</span>			for _, v := range vv {
<span id="L9064" class="ln">  9064&nbsp;&nbsp;</span>				f(k, v)
<span id="L9065" class="ln">  9065&nbsp;&nbsp;</span>			}
<span id="L9066" class="ln">  9066&nbsp;&nbsp;</span>		}
<span id="L9067" class="ln">  9067&nbsp;&nbsp;</span>		if http2shouldSendReqContentLength(req.Method, contentLength) {
<span id="L9068" class="ln">  9068&nbsp;&nbsp;</span>			f(&#34;content-length&#34;, strconv.FormatInt(contentLength, 10))
<span id="L9069" class="ln">  9069&nbsp;&nbsp;</span>		}
<span id="L9070" class="ln">  9070&nbsp;&nbsp;</span>		if addGzipHeader {
<span id="L9071" class="ln">  9071&nbsp;&nbsp;</span>			f(&#34;accept-encoding&#34;, &#34;gzip&#34;)
<span id="L9072" class="ln">  9072&nbsp;&nbsp;</span>		}
<span id="L9073" class="ln">  9073&nbsp;&nbsp;</span>		if !didUA {
<span id="L9074" class="ln">  9074&nbsp;&nbsp;</span>			f(&#34;user-agent&#34;, http2defaultUserAgent)
<span id="L9075" class="ln">  9075&nbsp;&nbsp;</span>		}
<span id="L9076" class="ln">  9076&nbsp;&nbsp;</span>	}
<span id="L9077" class="ln">  9077&nbsp;&nbsp;</span>
<span id="L9078" class="ln">  9078&nbsp;&nbsp;</span>	<span class="comment">// Do a first pass over the headers counting bytes to ensure</span>
<span id="L9079" class="ln">  9079&nbsp;&nbsp;</span>	<span class="comment">// we don&#39;t exceed cc.peerMaxHeaderListSize. This is done as a</span>
<span id="L9080" class="ln">  9080&nbsp;&nbsp;</span>	<span class="comment">// separate pass before encoding the headers to prevent</span>
<span id="L9081" class="ln">  9081&nbsp;&nbsp;</span>	<span class="comment">// modifying the hpack state.</span>
<span id="L9082" class="ln">  9082&nbsp;&nbsp;</span>	hlSize := uint64(0)
<span id="L9083" class="ln">  9083&nbsp;&nbsp;</span>	enumerateHeaders(func(name, value string) {
<span id="L9084" class="ln">  9084&nbsp;&nbsp;</span>		hf := hpack.HeaderField{Name: name, Value: value}
<span id="L9085" class="ln">  9085&nbsp;&nbsp;</span>		hlSize += uint64(hf.Size())
<span id="L9086" class="ln">  9086&nbsp;&nbsp;</span>	})
<span id="L9087" class="ln">  9087&nbsp;&nbsp;</span>
<span id="L9088" class="ln">  9088&nbsp;&nbsp;</span>	if hlSize &gt; cc.peerMaxHeaderListSize {
<span id="L9089" class="ln">  9089&nbsp;&nbsp;</span>		return nil, http2errRequestHeaderListSize
<span id="L9090" class="ln">  9090&nbsp;&nbsp;</span>	}
<span id="L9091" class="ln">  9091&nbsp;&nbsp;</span>
<span id="L9092" class="ln">  9092&nbsp;&nbsp;</span>	trace := httptrace.ContextClientTrace(req.Context())
<span id="L9093" class="ln">  9093&nbsp;&nbsp;</span>	traceHeaders := http2traceHasWroteHeaderField(trace)
<span id="L9094" class="ln">  9094&nbsp;&nbsp;</span>
<span id="L9095" class="ln">  9095&nbsp;&nbsp;</span>	<span class="comment">// Header list size is ok. Write the headers.</span>
<span id="L9096" class="ln">  9096&nbsp;&nbsp;</span>	enumerateHeaders(func(name, value string) {
<span id="L9097" class="ln">  9097&nbsp;&nbsp;</span>		name, ascii := http2lowerHeader(name)
<span id="L9098" class="ln">  9098&nbsp;&nbsp;</span>		if !ascii {
<span id="L9099" class="ln">  9099&nbsp;&nbsp;</span>			<span class="comment">// Skip writing invalid headers. Per RFC 7540, Section 8.1.2, header</span>
<span id="L9100" class="ln">  9100&nbsp;&nbsp;</span>			<span class="comment">// field names have to be ASCII characters (just as in HTTP/1.x).</span>
<span id="L9101" class="ln">  9101&nbsp;&nbsp;</span>			return
<span id="L9102" class="ln">  9102&nbsp;&nbsp;</span>		}
<span id="L9103" class="ln">  9103&nbsp;&nbsp;</span>		cc.writeHeader(name, value)
<span id="L9104" class="ln">  9104&nbsp;&nbsp;</span>		if traceHeaders {
<span id="L9105" class="ln">  9105&nbsp;&nbsp;</span>			http2traceWroteHeaderField(trace, name, value)
<span id="L9106" class="ln">  9106&nbsp;&nbsp;</span>		}
<span id="L9107" class="ln">  9107&nbsp;&nbsp;</span>	})
<span id="L9108" class="ln">  9108&nbsp;&nbsp;</span>
<span id="L9109" class="ln">  9109&nbsp;&nbsp;</span>	return cc.hbuf.Bytes(), nil
<span id="L9110" class="ln">  9110&nbsp;&nbsp;</span>}
<span id="L9111" class="ln">  9111&nbsp;&nbsp;</span>
<span id="L9112" class="ln">  9112&nbsp;&nbsp;</span><span class="comment">// shouldSendReqContentLength reports whether the http2.Transport should send</span>
<span id="L9113" class="ln">  9113&nbsp;&nbsp;</span><span class="comment">// a &#34;content-length&#34; request header. This logic is basically a copy of the net/http</span>
<span id="L9114" class="ln">  9114&nbsp;&nbsp;</span><span class="comment">// transferWriter.shouldSendContentLength.</span>
<span id="L9115" class="ln">  9115&nbsp;&nbsp;</span><span class="comment">// The contentLength is the corrected contentLength (so 0 means actually 0, not unknown).</span>
<span id="L9116" class="ln">  9116&nbsp;&nbsp;</span><span class="comment">// -1 means unknown.</span>
<span id="L9117" class="ln">  9117&nbsp;&nbsp;</span>func http2shouldSendReqContentLength(method string, contentLength int64) bool {
<span id="L9118" class="ln">  9118&nbsp;&nbsp;</span>	if contentLength &gt; 0 {
<span id="L9119" class="ln">  9119&nbsp;&nbsp;</span>		return true
<span id="L9120" class="ln">  9120&nbsp;&nbsp;</span>	}
<span id="L9121" class="ln">  9121&nbsp;&nbsp;</span>	if contentLength &lt; 0 {
<span id="L9122" class="ln">  9122&nbsp;&nbsp;</span>		return false
<span id="L9123" class="ln">  9123&nbsp;&nbsp;</span>	}
<span id="L9124" class="ln">  9124&nbsp;&nbsp;</span>	<span class="comment">// For zero bodies, whether we send a content-length depends on the method.</span>
<span id="L9125" class="ln">  9125&nbsp;&nbsp;</span>	<span class="comment">// It also kinda doesn&#39;t matter for http2 either way, with END_STREAM.</span>
<span id="L9126" class="ln">  9126&nbsp;&nbsp;</span>	switch method {
<span id="L9127" class="ln">  9127&nbsp;&nbsp;</span>	case &#34;POST&#34;, &#34;PUT&#34;, &#34;PATCH&#34;:
<span id="L9128" class="ln">  9128&nbsp;&nbsp;</span>		return true
<span id="L9129" class="ln">  9129&nbsp;&nbsp;</span>	default:
<span id="L9130" class="ln">  9130&nbsp;&nbsp;</span>		return false
<span id="L9131" class="ln">  9131&nbsp;&nbsp;</span>	}
<span id="L9132" class="ln">  9132&nbsp;&nbsp;</span>}
<span id="L9133" class="ln">  9133&nbsp;&nbsp;</span>
<span id="L9134" class="ln">  9134&nbsp;&nbsp;</span><span class="comment">// requires cc.wmu be held.</span>
<span id="L9135" class="ln">  9135&nbsp;&nbsp;</span>func (cc *http2ClientConn) encodeTrailers(trailer Header) ([]byte, error) {
<span id="L9136" class="ln">  9136&nbsp;&nbsp;</span>	cc.hbuf.Reset()
<span id="L9137" class="ln">  9137&nbsp;&nbsp;</span>
<span id="L9138" class="ln">  9138&nbsp;&nbsp;</span>	hlSize := uint64(0)
<span id="L9139" class="ln">  9139&nbsp;&nbsp;</span>	for k, vv := range trailer {
<span id="L9140" class="ln">  9140&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L9141" class="ln">  9141&nbsp;&nbsp;</span>			hf := hpack.HeaderField{Name: k, Value: v}
<span id="L9142" class="ln">  9142&nbsp;&nbsp;</span>			hlSize += uint64(hf.Size())
<span id="L9143" class="ln">  9143&nbsp;&nbsp;</span>		}
<span id="L9144" class="ln">  9144&nbsp;&nbsp;</span>	}
<span id="L9145" class="ln">  9145&nbsp;&nbsp;</span>	if hlSize &gt; cc.peerMaxHeaderListSize {
<span id="L9146" class="ln">  9146&nbsp;&nbsp;</span>		return nil, http2errRequestHeaderListSize
<span id="L9147" class="ln">  9147&nbsp;&nbsp;</span>	}
<span id="L9148" class="ln">  9148&nbsp;&nbsp;</span>
<span id="L9149" class="ln">  9149&nbsp;&nbsp;</span>	for k, vv := range trailer {
<span id="L9150" class="ln">  9150&nbsp;&nbsp;</span>		lowKey, ascii := http2lowerHeader(k)
<span id="L9151" class="ln">  9151&nbsp;&nbsp;</span>		if !ascii {
<span id="L9152" class="ln">  9152&nbsp;&nbsp;</span>			<span class="comment">// Skip writing invalid headers. Per RFC 7540, Section 8.1.2, header</span>
<span id="L9153" class="ln">  9153&nbsp;&nbsp;</span>			<span class="comment">// field names have to be ASCII characters (just as in HTTP/1.x).</span>
<span id="L9154" class="ln">  9154&nbsp;&nbsp;</span>			continue
<span id="L9155" class="ln">  9155&nbsp;&nbsp;</span>		}
<span id="L9156" class="ln">  9156&nbsp;&nbsp;</span>		<span class="comment">// Transfer-Encoding, etc.. have already been filtered at the</span>
<span id="L9157" class="ln">  9157&nbsp;&nbsp;</span>		<span class="comment">// start of RoundTrip</span>
<span id="L9158" class="ln">  9158&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L9159" class="ln">  9159&nbsp;&nbsp;</span>			cc.writeHeader(lowKey, v)
<span id="L9160" class="ln">  9160&nbsp;&nbsp;</span>		}
<span id="L9161" class="ln">  9161&nbsp;&nbsp;</span>	}
<span id="L9162" class="ln">  9162&nbsp;&nbsp;</span>	return cc.hbuf.Bytes(), nil
<span id="L9163" class="ln">  9163&nbsp;&nbsp;</span>}
<span id="L9164" class="ln">  9164&nbsp;&nbsp;</span>
<span id="L9165" class="ln">  9165&nbsp;&nbsp;</span>func (cc *http2ClientConn) writeHeader(name, value string) {
<span id="L9166" class="ln">  9166&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L9167" class="ln">  9167&nbsp;&nbsp;</span>		log.Printf(&#34;http2: Transport encoding header %q = %q&#34;, name, value)
<span id="L9168" class="ln">  9168&nbsp;&nbsp;</span>	}
<span id="L9169" class="ln">  9169&nbsp;&nbsp;</span>	cc.henc.WriteField(hpack.HeaderField{Name: name, Value: value})
<span id="L9170" class="ln">  9170&nbsp;&nbsp;</span>}
<span id="L9171" class="ln">  9171&nbsp;&nbsp;</span>
<span id="L9172" class="ln">  9172&nbsp;&nbsp;</span>type http2resAndError struct {
<span id="L9173" class="ln">  9173&nbsp;&nbsp;</span>	_   http2incomparable
<span id="L9174" class="ln">  9174&nbsp;&nbsp;</span>	res *Response
<span id="L9175" class="ln">  9175&nbsp;&nbsp;</span>	err error
<span id="L9176" class="ln">  9176&nbsp;&nbsp;</span>}
<span id="L9177" class="ln">  9177&nbsp;&nbsp;</span>
<span id="L9178" class="ln">  9178&nbsp;&nbsp;</span><span class="comment">// requires cc.mu be held.</span>
<span id="L9179" class="ln">  9179&nbsp;&nbsp;</span>func (cc *http2ClientConn) addStreamLocked(cs *http2clientStream) {
<span id="L9180" class="ln">  9180&nbsp;&nbsp;</span>	cs.flow.add(int32(cc.initialWindowSize))
<span id="L9181" class="ln">  9181&nbsp;&nbsp;</span>	cs.flow.setConnFlow(&amp;cc.flow)
<span id="L9182" class="ln">  9182&nbsp;&nbsp;</span>	cs.inflow.init(http2transportDefaultStreamFlow)
<span id="L9183" class="ln">  9183&nbsp;&nbsp;</span>	cs.ID = cc.nextStreamID
<span id="L9184" class="ln">  9184&nbsp;&nbsp;</span>	cc.nextStreamID += 2
<span id="L9185" class="ln">  9185&nbsp;&nbsp;</span>	cc.streams[cs.ID] = cs
<span id="L9186" class="ln">  9186&nbsp;&nbsp;</span>	if cs.ID == 0 {
<span id="L9187" class="ln">  9187&nbsp;&nbsp;</span>		panic(&#34;assigned stream ID 0&#34;)
<span id="L9188" class="ln">  9188&nbsp;&nbsp;</span>	}
<span id="L9189" class="ln">  9189&nbsp;&nbsp;</span>}
<span id="L9190" class="ln">  9190&nbsp;&nbsp;</span>
<span id="L9191" class="ln">  9191&nbsp;&nbsp;</span>func (cc *http2ClientConn) forgetStreamID(id uint32) {
<span id="L9192" class="ln">  9192&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L9193" class="ln">  9193&nbsp;&nbsp;</span>	slen := len(cc.streams)
<span id="L9194" class="ln">  9194&nbsp;&nbsp;</span>	delete(cc.streams, id)
<span id="L9195" class="ln">  9195&nbsp;&nbsp;</span>	if len(cc.streams) != slen-1 {
<span id="L9196" class="ln">  9196&nbsp;&nbsp;</span>		panic(&#34;forgetting unknown stream id&#34;)
<span id="L9197" class="ln">  9197&nbsp;&nbsp;</span>	}
<span id="L9198" class="ln">  9198&nbsp;&nbsp;</span>	cc.lastActive = time.Now()
<span id="L9199" class="ln">  9199&nbsp;&nbsp;</span>	if len(cc.streams) == 0 &amp;&amp; cc.idleTimer != nil {
<span id="L9200" class="ln">  9200&nbsp;&nbsp;</span>		cc.idleTimer.Reset(cc.idleTimeout)
<span id="L9201" class="ln">  9201&nbsp;&nbsp;</span>		cc.lastIdle = time.Now()
<span id="L9202" class="ln">  9202&nbsp;&nbsp;</span>	}
<span id="L9203" class="ln">  9203&nbsp;&nbsp;</span>	<span class="comment">// Wake up writeRequestBody via clientStream.awaitFlowControl and</span>
<span id="L9204" class="ln">  9204&nbsp;&nbsp;</span>	<span class="comment">// wake up RoundTrip if there is a pending request.</span>
<span id="L9205" class="ln">  9205&nbsp;&nbsp;</span>	cc.cond.Broadcast()
<span id="L9206" class="ln">  9206&nbsp;&nbsp;</span>
<span id="L9207" class="ln">  9207&nbsp;&nbsp;</span>	closeOnIdle := cc.singleUse || cc.doNotReuse || cc.t.disableKeepAlives() || cc.goAway != nil
<span id="L9208" class="ln">  9208&nbsp;&nbsp;</span>	if closeOnIdle &amp;&amp; cc.streamsReserved == 0 &amp;&amp; len(cc.streams) == 0 {
<span id="L9209" class="ln">  9209&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L9210" class="ln">  9210&nbsp;&nbsp;</span>			cc.vlogf(&#34;http2: Transport closing idle conn %p (forSingleUse=%v, maxStream=%v)&#34;, cc, cc.singleUse, cc.nextStreamID-2)
<span id="L9211" class="ln">  9211&nbsp;&nbsp;</span>		}
<span id="L9212" class="ln">  9212&nbsp;&nbsp;</span>		cc.closed = true
<span id="L9213" class="ln">  9213&nbsp;&nbsp;</span>		defer cc.closeConn()
<span id="L9214" class="ln">  9214&nbsp;&nbsp;</span>	}
<span id="L9215" class="ln">  9215&nbsp;&nbsp;</span>
<span id="L9216" class="ln">  9216&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L9217" class="ln">  9217&nbsp;&nbsp;</span>}
<span id="L9218" class="ln">  9218&nbsp;&nbsp;</span>
<span id="L9219" class="ln">  9219&nbsp;&nbsp;</span><span class="comment">// clientConnReadLoop is the state owned by the clientConn&#39;s frame-reading readLoop.</span>
<span id="L9220" class="ln">  9220&nbsp;&nbsp;</span>type http2clientConnReadLoop struct {
<span id="L9221" class="ln">  9221&nbsp;&nbsp;</span>	_  http2incomparable
<span id="L9222" class="ln">  9222&nbsp;&nbsp;</span>	cc *http2ClientConn
<span id="L9223" class="ln">  9223&nbsp;&nbsp;</span>}
<span id="L9224" class="ln">  9224&nbsp;&nbsp;</span>
<span id="L9225" class="ln">  9225&nbsp;&nbsp;</span><span class="comment">// readLoop runs in its own goroutine and reads and dispatches frames.</span>
<span id="L9226" class="ln">  9226&nbsp;&nbsp;</span>func (cc *http2ClientConn) readLoop() {
<span id="L9227" class="ln">  9227&nbsp;&nbsp;</span>	rl := &amp;http2clientConnReadLoop{cc: cc}
<span id="L9228" class="ln">  9228&nbsp;&nbsp;</span>	defer rl.cleanup()
<span id="L9229" class="ln">  9229&nbsp;&nbsp;</span>	cc.readerErr = rl.run()
<span id="L9230" class="ln">  9230&nbsp;&nbsp;</span>	if ce, ok := cc.readerErr.(http2ConnectionError); ok {
<span id="L9231" class="ln">  9231&nbsp;&nbsp;</span>		cc.wmu.Lock()
<span id="L9232" class="ln">  9232&nbsp;&nbsp;</span>		cc.fr.WriteGoAway(0, http2ErrCode(ce), nil)
<span id="L9233" class="ln">  9233&nbsp;&nbsp;</span>		cc.wmu.Unlock()
<span id="L9234" class="ln">  9234&nbsp;&nbsp;</span>	}
<span id="L9235" class="ln">  9235&nbsp;&nbsp;</span>}
<span id="L9236" class="ln">  9236&nbsp;&nbsp;</span>
<span id="L9237" class="ln">  9237&nbsp;&nbsp;</span><span class="comment">// GoAwayError is returned by the Transport when the server closes the</span>
<span id="L9238" class="ln">  9238&nbsp;&nbsp;</span><span class="comment">// TCP connection after sending a GOAWAY frame.</span>
<span id="L9239" class="ln">  9239&nbsp;&nbsp;</span>type http2GoAwayError struct {
<span id="L9240" class="ln">  9240&nbsp;&nbsp;</span>	LastStreamID uint32
<span id="L9241" class="ln">  9241&nbsp;&nbsp;</span>	ErrCode      http2ErrCode
<span id="L9242" class="ln">  9242&nbsp;&nbsp;</span>	DebugData    string
<span id="L9243" class="ln">  9243&nbsp;&nbsp;</span>}
<span id="L9244" class="ln">  9244&nbsp;&nbsp;</span>
<span id="L9245" class="ln">  9245&nbsp;&nbsp;</span>func (e http2GoAwayError) Error() string {
<span id="L9246" class="ln">  9246&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;http2: server sent GOAWAY and closed the connection; LastStreamID=%v, ErrCode=%v, debug=%q&#34;,
<span id="L9247" class="ln">  9247&nbsp;&nbsp;</span>		e.LastStreamID, e.ErrCode, e.DebugData)
<span id="L9248" class="ln">  9248&nbsp;&nbsp;</span>}
<span id="L9249" class="ln">  9249&nbsp;&nbsp;</span>
<span id="L9250" class="ln">  9250&nbsp;&nbsp;</span>func http2isEOFOrNetReadError(err error) bool {
<span id="L9251" class="ln">  9251&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L9252" class="ln">  9252&nbsp;&nbsp;</span>		return true
<span id="L9253" class="ln">  9253&nbsp;&nbsp;</span>	}
<span id="L9254" class="ln">  9254&nbsp;&nbsp;</span>	ne, ok := err.(*net.OpError)
<span id="L9255" class="ln">  9255&nbsp;&nbsp;</span>	return ok &amp;&amp; ne.Op == &#34;read&#34;
<span id="L9256" class="ln">  9256&nbsp;&nbsp;</span>}
<span id="L9257" class="ln">  9257&nbsp;&nbsp;</span>
<span id="L9258" class="ln">  9258&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) cleanup() {
<span id="L9259" class="ln">  9259&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9260" class="ln">  9260&nbsp;&nbsp;</span>	cc.t.connPool().MarkDead(cc)
<span id="L9261" class="ln">  9261&nbsp;&nbsp;</span>	defer cc.closeConn()
<span id="L9262" class="ln">  9262&nbsp;&nbsp;</span>	defer close(cc.readerDone)
<span id="L9263" class="ln">  9263&nbsp;&nbsp;</span>
<span id="L9264" class="ln">  9264&nbsp;&nbsp;</span>	if cc.idleTimer != nil {
<span id="L9265" class="ln">  9265&nbsp;&nbsp;</span>		cc.idleTimer.Stop()
<span id="L9266" class="ln">  9266&nbsp;&nbsp;</span>	}
<span id="L9267" class="ln">  9267&nbsp;&nbsp;</span>
<span id="L9268" class="ln">  9268&nbsp;&nbsp;</span>	<span class="comment">// Close any response bodies if the server closes prematurely.</span>
<span id="L9269" class="ln">  9269&nbsp;&nbsp;</span>	<span class="comment">// TODO: also do this if we&#39;ve written the headers but not</span>
<span id="L9270" class="ln">  9270&nbsp;&nbsp;</span>	<span class="comment">// gotten a response yet.</span>
<span id="L9271" class="ln">  9271&nbsp;&nbsp;</span>	err := cc.readerErr
<span id="L9272" class="ln">  9272&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L9273" class="ln">  9273&nbsp;&nbsp;</span>	if cc.goAway != nil &amp;&amp; http2isEOFOrNetReadError(err) {
<span id="L9274" class="ln">  9274&nbsp;&nbsp;</span>		err = http2GoAwayError{
<span id="L9275" class="ln">  9275&nbsp;&nbsp;</span>			LastStreamID: cc.goAway.LastStreamID,
<span id="L9276" class="ln">  9276&nbsp;&nbsp;</span>			ErrCode:      cc.goAway.ErrCode,
<span id="L9277" class="ln">  9277&nbsp;&nbsp;</span>			DebugData:    cc.goAwayDebug,
<span id="L9278" class="ln">  9278&nbsp;&nbsp;</span>		}
<span id="L9279" class="ln">  9279&nbsp;&nbsp;</span>	} else if err == io.EOF {
<span id="L9280" class="ln">  9280&nbsp;&nbsp;</span>		err = io.ErrUnexpectedEOF
<span id="L9281" class="ln">  9281&nbsp;&nbsp;</span>	}
<span id="L9282" class="ln">  9282&nbsp;&nbsp;</span>	cc.closed = true
<span id="L9283" class="ln">  9283&nbsp;&nbsp;</span>
<span id="L9284" class="ln">  9284&nbsp;&nbsp;</span>	for _, cs := range cc.streams {
<span id="L9285" class="ln">  9285&nbsp;&nbsp;</span>		select {
<span id="L9286" class="ln">  9286&nbsp;&nbsp;</span>		case &lt;-cs.peerClosed:
<span id="L9287" class="ln">  9287&nbsp;&nbsp;</span>			<span class="comment">// The server closed the stream before closing the conn,</span>
<span id="L9288" class="ln">  9288&nbsp;&nbsp;</span>			<span class="comment">// so no need to interrupt it.</span>
<span id="L9289" class="ln">  9289&nbsp;&nbsp;</span>		default:
<span id="L9290" class="ln">  9290&nbsp;&nbsp;</span>			cs.abortStreamLocked(err)
<span id="L9291" class="ln">  9291&nbsp;&nbsp;</span>		}
<span id="L9292" class="ln">  9292&nbsp;&nbsp;</span>	}
<span id="L9293" class="ln">  9293&nbsp;&nbsp;</span>	cc.cond.Broadcast()
<span id="L9294" class="ln">  9294&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L9295" class="ln">  9295&nbsp;&nbsp;</span>}
<span id="L9296" class="ln">  9296&nbsp;&nbsp;</span>
<span id="L9297" class="ln">  9297&nbsp;&nbsp;</span><span class="comment">// countReadFrameError calls Transport.CountError with a string</span>
<span id="L9298" class="ln">  9298&nbsp;&nbsp;</span><span class="comment">// representing err.</span>
<span id="L9299" class="ln">  9299&nbsp;&nbsp;</span>func (cc *http2ClientConn) countReadFrameError(err error) {
<span id="L9300" class="ln">  9300&nbsp;&nbsp;</span>	f := cc.t.CountError
<span id="L9301" class="ln">  9301&nbsp;&nbsp;</span>	if f == nil || err == nil {
<span id="L9302" class="ln">  9302&nbsp;&nbsp;</span>		return
<span id="L9303" class="ln">  9303&nbsp;&nbsp;</span>	}
<span id="L9304" class="ln">  9304&nbsp;&nbsp;</span>	if ce, ok := err.(http2ConnectionError); ok {
<span id="L9305" class="ln">  9305&nbsp;&nbsp;</span>		errCode := http2ErrCode(ce)
<span id="L9306" class="ln">  9306&nbsp;&nbsp;</span>		f(fmt.Sprintf(&#34;read_frame_conn_error_%s&#34;, errCode.stringToken()))
<span id="L9307" class="ln">  9307&nbsp;&nbsp;</span>		return
<span id="L9308" class="ln">  9308&nbsp;&nbsp;</span>	}
<span id="L9309" class="ln">  9309&nbsp;&nbsp;</span>	if errors.Is(err, io.EOF) {
<span id="L9310" class="ln">  9310&nbsp;&nbsp;</span>		f(&#34;read_frame_eof&#34;)
<span id="L9311" class="ln">  9311&nbsp;&nbsp;</span>		return
<span id="L9312" class="ln">  9312&nbsp;&nbsp;</span>	}
<span id="L9313" class="ln">  9313&nbsp;&nbsp;</span>	if errors.Is(err, io.ErrUnexpectedEOF) {
<span id="L9314" class="ln">  9314&nbsp;&nbsp;</span>		f(&#34;read_frame_unexpected_eof&#34;)
<span id="L9315" class="ln">  9315&nbsp;&nbsp;</span>		return
<span id="L9316" class="ln">  9316&nbsp;&nbsp;</span>	}
<span id="L9317" class="ln">  9317&nbsp;&nbsp;</span>	if errors.Is(err, http2ErrFrameTooLarge) {
<span id="L9318" class="ln">  9318&nbsp;&nbsp;</span>		f(&#34;read_frame_too_large&#34;)
<span id="L9319" class="ln">  9319&nbsp;&nbsp;</span>		return
<span id="L9320" class="ln">  9320&nbsp;&nbsp;</span>	}
<span id="L9321" class="ln">  9321&nbsp;&nbsp;</span>	f(&#34;read_frame_other&#34;)
<span id="L9322" class="ln">  9322&nbsp;&nbsp;</span>}
<span id="L9323" class="ln">  9323&nbsp;&nbsp;</span>
<span id="L9324" class="ln">  9324&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) run() error {
<span id="L9325" class="ln">  9325&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9326" class="ln">  9326&nbsp;&nbsp;</span>	gotSettings := false
<span id="L9327" class="ln">  9327&nbsp;&nbsp;</span>	readIdleTimeout := cc.t.ReadIdleTimeout
<span id="L9328" class="ln">  9328&nbsp;&nbsp;</span>	var t *time.Timer
<span id="L9329" class="ln">  9329&nbsp;&nbsp;</span>	if readIdleTimeout != 0 {
<span id="L9330" class="ln">  9330&nbsp;&nbsp;</span>		t = time.AfterFunc(readIdleTimeout, cc.healthCheck)
<span id="L9331" class="ln">  9331&nbsp;&nbsp;</span>		defer t.Stop()
<span id="L9332" class="ln">  9332&nbsp;&nbsp;</span>	}
<span id="L9333" class="ln">  9333&nbsp;&nbsp;</span>	for {
<span id="L9334" class="ln">  9334&nbsp;&nbsp;</span>		f, err := cc.fr.ReadFrame()
<span id="L9335" class="ln">  9335&nbsp;&nbsp;</span>		if t != nil {
<span id="L9336" class="ln">  9336&nbsp;&nbsp;</span>			t.Reset(readIdleTimeout)
<span id="L9337" class="ln">  9337&nbsp;&nbsp;</span>		}
<span id="L9338" class="ln">  9338&nbsp;&nbsp;</span>		if err != nil {
<span id="L9339" class="ln">  9339&nbsp;&nbsp;</span>			cc.vlogf(&#34;http2: Transport readFrame error on conn %p: (%T) %v&#34;, cc, err, err)
<span id="L9340" class="ln">  9340&nbsp;&nbsp;</span>		}
<span id="L9341" class="ln">  9341&nbsp;&nbsp;</span>		if se, ok := err.(http2StreamError); ok {
<span id="L9342" class="ln">  9342&nbsp;&nbsp;</span>			if cs := rl.streamByID(se.StreamID); cs != nil {
<span id="L9343" class="ln">  9343&nbsp;&nbsp;</span>				if se.Cause == nil {
<span id="L9344" class="ln">  9344&nbsp;&nbsp;</span>					se.Cause = cc.fr.errDetail
<span id="L9345" class="ln">  9345&nbsp;&nbsp;</span>				}
<span id="L9346" class="ln">  9346&nbsp;&nbsp;</span>				rl.endStreamError(cs, se)
<span id="L9347" class="ln">  9347&nbsp;&nbsp;</span>			}
<span id="L9348" class="ln">  9348&nbsp;&nbsp;</span>			continue
<span id="L9349" class="ln">  9349&nbsp;&nbsp;</span>		} else if err != nil {
<span id="L9350" class="ln">  9350&nbsp;&nbsp;</span>			cc.countReadFrameError(err)
<span id="L9351" class="ln">  9351&nbsp;&nbsp;</span>			return err
<span id="L9352" class="ln">  9352&nbsp;&nbsp;</span>		}
<span id="L9353" class="ln">  9353&nbsp;&nbsp;</span>		if http2VerboseLogs {
<span id="L9354" class="ln">  9354&nbsp;&nbsp;</span>			cc.vlogf(&#34;http2: Transport received %s&#34;, http2summarizeFrame(f))
<span id="L9355" class="ln">  9355&nbsp;&nbsp;</span>		}
<span id="L9356" class="ln">  9356&nbsp;&nbsp;</span>		if !gotSettings {
<span id="L9357" class="ln">  9357&nbsp;&nbsp;</span>			if _, ok := f.(*http2SettingsFrame); !ok {
<span id="L9358" class="ln">  9358&nbsp;&nbsp;</span>				cc.logf(&#34;protocol error: received %T before a SETTINGS frame&#34;, f)
<span id="L9359" class="ln">  9359&nbsp;&nbsp;</span>				return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9360" class="ln">  9360&nbsp;&nbsp;</span>			}
<span id="L9361" class="ln">  9361&nbsp;&nbsp;</span>			gotSettings = true
<span id="L9362" class="ln">  9362&nbsp;&nbsp;</span>		}
<span id="L9363" class="ln">  9363&nbsp;&nbsp;</span>
<span id="L9364" class="ln">  9364&nbsp;&nbsp;</span>		switch f := f.(type) {
<span id="L9365" class="ln">  9365&nbsp;&nbsp;</span>		case *http2MetaHeadersFrame:
<span id="L9366" class="ln">  9366&nbsp;&nbsp;</span>			err = rl.processHeaders(f)
<span id="L9367" class="ln">  9367&nbsp;&nbsp;</span>		case *http2DataFrame:
<span id="L9368" class="ln">  9368&nbsp;&nbsp;</span>			err = rl.processData(f)
<span id="L9369" class="ln">  9369&nbsp;&nbsp;</span>		case *http2GoAwayFrame:
<span id="L9370" class="ln">  9370&nbsp;&nbsp;</span>			err = rl.processGoAway(f)
<span id="L9371" class="ln">  9371&nbsp;&nbsp;</span>		case *http2RSTStreamFrame:
<span id="L9372" class="ln">  9372&nbsp;&nbsp;</span>			err = rl.processResetStream(f)
<span id="L9373" class="ln">  9373&nbsp;&nbsp;</span>		case *http2SettingsFrame:
<span id="L9374" class="ln">  9374&nbsp;&nbsp;</span>			err = rl.processSettings(f)
<span id="L9375" class="ln">  9375&nbsp;&nbsp;</span>		case *http2PushPromiseFrame:
<span id="L9376" class="ln">  9376&nbsp;&nbsp;</span>			err = rl.processPushPromise(f)
<span id="L9377" class="ln">  9377&nbsp;&nbsp;</span>		case *http2WindowUpdateFrame:
<span id="L9378" class="ln">  9378&nbsp;&nbsp;</span>			err = rl.processWindowUpdate(f)
<span id="L9379" class="ln">  9379&nbsp;&nbsp;</span>		case *http2PingFrame:
<span id="L9380" class="ln">  9380&nbsp;&nbsp;</span>			err = rl.processPing(f)
<span id="L9381" class="ln">  9381&nbsp;&nbsp;</span>		default:
<span id="L9382" class="ln">  9382&nbsp;&nbsp;</span>			cc.logf(&#34;Transport: unhandled response frame type %T&#34;, f)
<span id="L9383" class="ln">  9383&nbsp;&nbsp;</span>		}
<span id="L9384" class="ln">  9384&nbsp;&nbsp;</span>		if err != nil {
<span id="L9385" class="ln">  9385&nbsp;&nbsp;</span>			if http2VerboseLogs {
<span id="L9386" class="ln">  9386&nbsp;&nbsp;</span>				cc.vlogf(&#34;http2: Transport conn %p received error from processing frame %v: %v&#34;, cc, http2summarizeFrame(f), err)
<span id="L9387" class="ln">  9387&nbsp;&nbsp;</span>			}
<span id="L9388" class="ln">  9388&nbsp;&nbsp;</span>			return err
<span id="L9389" class="ln">  9389&nbsp;&nbsp;</span>		}
<span id="L9390" class="ln">  9390&nbsp;&nbsp;</span>	}
<span id="L9391" class="ln">  9391&nbsp;&nbsp;</span>}
<span id="L9392" class="ln">  9392&nbsp;&nbsp;</span>
<span id="L9393" class="ln">  9393&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processHeaders(f *http2MetaHeadersFrame) error {
<span id="L9394" class="ln">  9394&nbsp;&nbsp;</span>	cs := rl.streamByID(f.StreamID)
<span id="L9395" class="ln">  9395&nbsp;&nbsp;</span>	if cs == nil {
<span id="L9396" class="ln">  9396&nbsp;&nbsp;</span>		<span class="comment">// We&#39;d get here if we canceled a request while the</span>
<span id="L9397" class="ln">  9397&nbsp;&nbsp;</span>		<span class="comment">// server had its response still in flight. So if this</span>
<span id="L9398" class="ln">  9398&nbsp;&nbsp;</span>		<span class="comment">// was just something we canceled, ignore it.</span>
<span id="L9399" class="ln">  9399&nbsp;&nbsp;</span>		return nil
<span id="L9400" class="ln">  9400&nbsp;&nbsp;</span>	}
<span id="L9401" class="ln">  9401&nbsp;&nbsp;</span>	if cs.readClosed {
<span id="L9402" class="ln">  9402&nbsp;&nbsp;</span>		rl.endStreamError(cs, http2StreamError{
<span id="L9403" class="ln">  9403&nbsp;&nbsp;</span>			StreamID: f.StreamID,
<span id="L9404" class="ln">  9404&nbsp;&nbsp;</span>			Code:     http2ErrCodeProtocol,
<span id="L9405" class="ln">  9405&nbsp;&nbsp;</span>			Cause:    errors.New(&#34;protocol error: headers after END_STREAM&#34;),
<span id="L9406" class="ln">  9406&nbsp;&nbsp;</span>		})
<span id="L9407" class="ln">  9407&nbsp;&nbsp;</span>		return nil
<span id="L9408" class="ln">  9408&nbsp;&nbsp;</span>	}
<span id="L9409" class="ln">  9409&nbsp;&nbsp;</span>	if !cs.firstByte {
<span id="L9410" class="ln">  9410&nbsp;&nbsp;</span>		if cs.trace != nil {
<span id="L9411" class="ln">  9411&nbsp;&nbsp;</span>			<span class="comment">// TODO(bradfitz): move first response byte earlier,</span>
<span id="L9412" class="ln">  9412&nbsp;&nbsp;</span>			<span class="comment">// when we first read the 9 byte header, not waiting</span>
<span id="L9413" class="ln">  9413&nbsp;&nbsp;</span>			<span class="comment">// until all the HEADERS+CONTINUATION frames have been</span>
<span id="L9414" class="ln">  9414&nbsp;&nbsp;</span>			<span class="comment">// merged. This works for now.</span>
<span id="L9415" class="ln">  9415&nbsp;&nbsp;</span>			http2traceFirstResponseByte(cs.trace)
<span id="L9416" class="ln">  9416&nbsp;&nbsp;</span>		}
<span id="L9417" class="ln">  9417&nbsp;&nbsp;</span>		cs.firstByte = true
<span id="L9418" class="ln">  9418&nbsp;&nbsp;</span>	}
<span id="L9419" class="ln">  9419&nbsp;&nbsp;</span>	if !cs.pastHeaders {
<span id="L9420" class="ln">  9420&nbsp;&nbsp;</span>		cs.pastHeaders = true
<span id="L9421" class="ln">  9421&nbsp;&nbsp;</span>	} else {
<span id="L9422" class="ln">  9422&nbsp;&nbsp;</span>		return rl.processTrailers(cs, f)
<span id="L9423" class="ln">  9423&nbsp;&nbsp;</span>	}
<span id="L9424" class="ln">  9424&nbsp;&nbsp;</span>
<span id="L9425" class="ln">  9425&nbsp;&nbsp;</span>	res, err := rl.handleResponse(cs, f)
<span id="L9426" class="ln">  9426&nbsp;&nbsp;</span>	if err != nil {
<span id="L9427" class="ln">  9427&nbsp;&nbsp;</span>		if _, ok := err.(http2ConnectionError); ok {
<span id="L9428" class="ln">  9428&nbsp;&nbsp;</span>			return err
<span id="L9429" class="ln">  9429&nbsp;&nbsp;</span>		}
<span id="L9430" class="ln">  9430&nbsp;&nbsp;</span>		<span class="comment">// Any other error type is a stream error.</span>
<span id="L9431" class="ln">  9431&nbsp;&nbsp;</span>		rl.endStreamError(cs, http2StreamError{
<span id="L9432" class="ln">  9432&nbsp;&nbsp;</span>			StreamID: f.StreamID,
<span id="L9433" class="ln">  9433&nbsp;&nbsp;</span>			Code:     http2ErrCodeProtocol,
<span id="L9434" class="ln">  9434&nbsp;&nbsp;</span>			Cause:    err,
<span id="L9435" class="ln">  9435&nbsp;&nbsp;</span>		})
<span id="L9436" class="ln">  9436&nbsp;&nbsp;</span>		return nil <span class="comment">// return nil from process* funcs to keep conn alive</span>
<span id="L9437" class="ln">  9437&nbsp;&nbsp;</span>	}
<span id="L9438" class="ln">  9438&nbsp;&nbsp;</span>	if res == nil {
<span id="L9439" class="ln">  9439&nbsp;&nbsp;</span>		<span class="comment">// (nil, nil) special case. See handleResponse docs.</span>
<span id="L9440" class="ln">  9440&nbsp;&nbsp;</span>		return nil
<span id="L9441" class="ln">  9441&nbsp;&nbsp;</span>	}
<span id="L9442" class="ln">  9442&nbsp;&nbsp;</span>	cs.resTrailer = &amp;res.Trailer
<span id="L9443" class="ln">  9443&nbsp;&nbsp;</span>	cs.res = res
<span id="L9444" class="ln">  9444&nbsp;&nbsp;</span>	close(cs.respHeaderRecv)
<span id="L9445" class="ln">  9445&nbsp;&nbsp;</span>	if f.StreamEnded() {
<span id="L9446" class="ln">  9446&nbsp;&nbsp;</span>		rl.endStream(cs)
<span id="L9447" class="ln">  9447&nbsp;&nbsp;</span>	}
<span id="L9448" class="ln">  9448&nbsp;&nbsp;</span>	return nil
<span id="L9449" class="ln">  9449&nbsp;&nbsp;</span>}
<span id="L9450" class="ln">  9450&nbsp;&nbsp;</span>
<span id="L9451" class="ln">  9451&nbsp;&nbsp;</span><span class="comment">// may return error types nil, or ConnectionError. Any other error value</span>
<span id="L9452" class="ln">  9452&nbsp;&nbsp;</span><span class="comment">// is a StreamError of type ErrCodeProtocol. The returned error in that case</span>
<span id="L9453" class="ln">  9453&nbsp;&nbsp;</span><span class="comment">// is the detail.</span>
<span id="L9454" class="ln">  9454&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9455" class="ln">  9455&nbsp;&nbsp;</span><span class="comment">// As a special case, handleResponse may return (nil, nil) to skip the</span>
<span id="L9456" class="ln">  9456&nbsp;&nbsp;</span><span class="comment">// frame (currently only used for 1xx responses).</span>
<span id="L9457" class="ln">  9457&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) handleResponse(cs *http2clientStream, f *http2MetaHeadersFrame) (*Response, error) {
<span id="L9458" class="ln">  9458&nbsp;&nbsp;</span>	if f.Truncated {
<span id="L9459" class="ln">  9459&nbsp;&nbsp;</span>		return nil, http2errResponseHeaderListSize
<span id="L9460" class="ln">  9460&nbsp;&nbsp;</span>	}
<span id="L9461" class="ln">  9461&nbsp;&nbsp;</span>
<span id="L9462" class="ln">  9462&nbsp;&nbsp;</span>	status := f.PseudoValue(&#34;status&#34;)
<span id="L9463" class="ln">  9463&nbsp;&nbsp;</span>	if status == &#34;&#34; {
<span id="L9464" class="ln">  9464&nbsp;&nbsp;</span>		return nil, errors.New(&#34;malformed response from server: missing status pseudo header&#34;)
<span id="L9465" class="ln">  9465&nbsp;&nbsp;</span>	}
<span id="L9466" class="ln">  9466&nbsp;&nbsp;</span>	statusCode, err := strconv.Atoi(status)
<span id="L9467" class="ln">  9467&nbsp;&nbsp;</span>	if err != nil {
<span id="L9468" class="ln">  9468&nbsp;&nbsp;</span>		return nil, errors.New(&#34;malformed response from server: malformed non-numeric status pseudo header&#34;)
<span id="L9469" class="ln">  9469&nbsp;&nbsp;</span>	}
<span id="L9470" class="ln">  9470&nbsp;&nbsp;</span>
<span id="L9471" class="ln">  9471&nbsp;&nbsp;</span>	regularFields := f.RegularFields()
<span id="L9472" class="ln">  9472&nbsp;&nbsp;</span>	strs := make([]string, len(regularFields))
<span id="L9473" class="ln">  9473&nbsp;&nbsp;</span>	header := make(Header, len(regularFields))
<span id="L9474" class="ln">  9474&nbsp;&nbsp;</span>	res := &amp;Response{
<span id="L9475" class="ln">  9475&nbsp;&nbsp;</span>		Proto:      &#34;HTTP/2.0&#34;,
<span id="L9476" class="ln">  9476&nbsp;&nbsp;</span>		ProtoMajor: 2,
<span id="L9477" class="ln">  9477&nbsp;&nbsp;</span>		Header:     header,
<span id="L9478" class="ln">  9478&nbsp;&nbsp;</span>		StatusCode: statusCode,
<span id="L9479" class="ln">  9479&nbsp;&nbsp;</span>		Status:     status + &#34; &#34; + StatusText(statusCode),
<span id="L9480" class="ln">  9480&nbsp;&nbsp;</span>	}
<span id="L9481" class="ln">  9481&nbsp;&nbsp;</span>	for _, hf := range regularFields {
<span id="L9482" class="ln">  9482&nbsp;&nbsp;</span>		key := http2canonicalHeader(hf.Name)
<span id="L9483" class="ln">  9483&nbsp;&nbsp;</span>		if key == &#34;Trailer&#34; {
<span id="L9484" class="ln">  9484&nbsp;&nbsp;</span>			t := res.Trailer
<span id="L9485" class="ln">  9485&nbsp;&nbsp;</span>			if t == nil {
<span id="L9486" class="ln">  9486&nbsp;&nbsp;</span>				t = make(Header)
<span id="L9487" class="ln">  9487&nbsp;&nbsp;</span>				res.Trailer = t
<span id="L9488" class="ln">  9488&nbsp;&nbsp;</span>			}
<span id="L9489" class="ln">  9489&nbsp;&nbsp;</span>			http2foreachHeaderElement(hf.Value, func(v string) {
<span id="L9490" class="ln">  9490&nbsp;&nbsp;</span>				t[http2canonicalHeader(v)] = nil
<span id="L9491" class="ln">  9491&nbsp;&nbsp;</span>			})
<span id="L9492" class="ln">  9492&nbsp;&nbsp;</span>		} else {
<span id="L9493" class="ln">  9493&nbsp;&nbsp;</span>			vv := header[key]
<span id="L9494" class="ln">  9494&nbsp;&nbsp;</span>			if vv == nil &amp;&amp; len(strs) &gt; 0 {
<span id="L9495" class="ln">  9495&nbsp;&nbsp;</span>				<span class="comment">// More than likely this will be a single-element key.</span>
<span id="L9496" class="ln">  9496&nbsp;&nbsp;</span>				<span class="comment">// Most headers aren&#39;t multi-valued.</span>
<span id="L9497" class="ln">  9497&nbsp;&nbsp;</span>				<span class="comment">// Set the capacity on strs[0] to 1, so any future append</span>
<span id="L9498" class="ln">  9498&nbsp;&nbsp;</span>				<span class="comment">// won&#39;t extend the slice into the other strings.</span>
<span id="L9499" class="ln">  9499&nbsp;&nbsp;</span>				vv, strs = strs[:1:1], strs[1:]
<span id="L9500" class="ln">  9500&nbsp;&nbsp;</span>				vv[0] = hf.Value
<span id="L9501" class="ln">  9501&nbsp;&nbsp;</span>				header[key] = vv
<span id="L9502" class="ln">  9502&nbsp;&nbsp;</span>			} else {
<span id="L9503" class="ln">  9503&nbsp;&nbsp;</span>				header[key] = append(vv, hf.Value)
<span id="L9504" class="ln">  9504&nbsp;&nbsp;</span>			}
<span id="L9505" class="ln">  9505&nbsp;&nbsp;</span>		}
<span id="L9506" class="ln">  9506&nbsp;&nbsp;</span>	}
<span id="L9507" class="ln">  9507&nbsp;&nbsp;</span>
<span id="L9508" class="ln">  9508&nbsp;&nbsp;</span>	if statusCode &gt;= 100 &amp;&amp; statusCode &lt;= 199 {
<span id="L9509" class="ln">  9509&nbsp;&nbsp;</span>		if f.StreamEnded() {
<span id="L9510" class="ln">  9510&nbsp;&nbsp;</span>			return nil, errors.New(&#34;1xx informational response with END_STREAM flag&#34;)
<span id="L9511" class="ln">  9511&nbsp;&nbsp;</span>		}
<span id="L9512" class="ln">  9512&nbsp;&nbsp;</span>		cs.num1xx++
<span id="L9513" class="ln">  9513&nbsp;&nbsp;</span>		const max1xxResponses = 5 <span class="comment">// arbitrary bound on number of informational responses, same as net/http</span>
<span id="L9514" class="ln">  9514&nbsp;&nbsp;</span>		if cs.num1xx &gt; max1xxResponses {
<span id="L9515" class="ln">  9515&nbsp;&nbsp;</span>			return nil, errors.New(&#34;http2: too many 1xx informational responses&#34;)
<span id="L9516" class="ln">  9516&nbsp;&nbsp;</span>		}
<span id="L9517" class="ln">  9517&nbsp;&nbsp;</span>		if fn := cs.get1xxTraceFunc(); fn != nil {
<span id="L9518" class="ln">  9518&nbsp;&nbsp;</span>			if err := fn(statusCode, textproto.MIMEHeader(header)); err != nil {
<span id="L9519" class="ln">  9519&nbsp;&nbsp;</span>				return nil, err
<span id="L9520" class="ln">  9520&nbsp;&nbsp;</span>			}
<span id="L9521" class="ln">  9521&nbsp;&nbsp;</span>		}
<span id="L9522" class="ln">  9522&nbsp;&nbsp;</span>		if statusCode == 100 {
<span id="L9523" class="ln">  9523&nbsp;&nbsp;</span>			http2traceGot100Continue(cs.trace)
<span id="L9524" class="ln">  9524&nbsp;&nbsp;</span>			select {
<span id="L9525" class="ln">  9525&nbsp;&nbsp;</span>			case cs.on100 &lt;- struct{}{}:
<span id="L9526" class="ln">  9526&nbsp;&nbsp;</span>			default:
<span id="L9527" class="ln">  9527&nbsp;&nbsp;</span>			}
<span id="L9528" class="ln">  9528&nbsp;&nbsp;</span>		}
<span id="L9529" class="ln">  9529&nbsp;&nbsp;</span>		cs.pastHeaders = false <span class="comment">// do it all again</span>
<span id="L9530" class="ln">  9530&nbsp;&nbsp;</span>		return nil, nil
<span id="L9531" class="ln">  9531&nbsp;&nbsp;</span>	}
<span id="L9532" class="ln">  9532&nbsp;&nbsp;</span>
<span id="L9533" class="ln">  9533&nbsp;&nbsp;</span>	res.ContentLength = -1
<span id="L9534" class="ln">  9534&nbsp;&nbsp;</span>	if clens := res.Header[&#34;Content-Length&#34;]; len(clens) == 1 {
<span id="L9535" class="ln">  9535&nbsp;&nbsp;</span>		if cl, err := strconv.ParseUint(clens[0], 10, 63); err == nil {
<span id="L9536" class="ln">  9536&nbsp;&nbsp;</span>			res.ContentLength = int64(cl)
<span id="L9537" class="ln">  9537&nbsp;&nbsp;</span>		} else {
<span id="L9538" class="ln">  9538&nbsp;&nbsp;</span>			<span class="comment">// TODO: care? unlike http/1, it won&#39;t mess up our framing, so it&#39;s</span>
<span id="L9539" class="ln">  9539&nbsp;&nbsp;</span>			<span class="comment">// more safe smuggling-wise to ignore.</span>
<span id="L9540" class="ln">  9540&nbsp;&nbsp;</span>		}
<span id="L9541" class="ln">  9541&nbsp;&nbsp;</span>	} else if len(clens) &gt; 1 {
<span id="L9542" class="ln">  9542&nbsp;&nbsp;</span>		<span class="comment">// TODO: care? unlike http/1, it won&#39;t mess up our framing, so it&#39;s</span>
<span id="L9543" class="ln">  9543&nbsp;&nbsp;</span>		<span class="comment">// more safe smuggling-wise to ignore.</span>
<span id="L9544" class="ln">  9544&nbsp;&nbsp;</span>	} else if f.StreamEnded() &amp;&amp; !cs.isHead {
<span id="L9545" class="ln">  9545&nbsp;&nbsp;</span>		res.ContentLength = 0
<span id="L9546" class="ln">  9546&nbsp;&nbsp;</span>	}
<span id="L9547" class="ln">  9547&nbsp;&nbsp;</span>
<span id="L9548" class="ln">  9548&nbsp;&nbsp;</span>	if cs.isHead {
<span id="L9549" class="ln">  9549&nbsp;&nbsp;</span>		res.Body = http2noBody
<span id="L9550" class="ln">  9550&nbsp;&nbsp;</span>		return res, nil
<span id="L9551" class="ln">  9551&nbsp;&nbsp;</span>	}
<span id="L9552" class="ln">  9552&nbsp;&nbsp;</span>
<span id="L9553" class="ln">  9553&nbsp;&nbsp;</span>	if f.StreamEnded() {
<span id="L9554" class="ln">  9554&nbsp;&nbsp;</span>		if res.ContentLength &gt; 0 {
<span id="L9555" class="ln">  9555&nbsp;&nbsp;</span>			res.Body = http2missingBody{}
<span id="L9556" class="ln">  9556&nbsp;&nbsp;</span>		} else {
<span id="L9557" class="ln">  9557&nbsp;&nbsp;</span>			res.Body = http2noBody
<span id="L9558" class="ln">  9558&nbsp;&nbsp;</span>		}
<span id="L9559" class="ln">  9559&nbsp;&nbsp;</span>		return res, nil
<span id="L9560" class="ln">  9560&nbsp;&nbsp;</span>	}
<span id="L9561" class="ln">  9561&nbsp;&nbsp;</span>
<span id="L9562" class="ln">  9562&nbsp;&nbsp;</span>	cs.bufPipe.setBuffer(&amp;http2dataBuffer{expected: res.ContentLength})
<span id="L9563" class="ln">  9563&nbsp;&nbsp;</span>	cs.bytesRemain = res.ContentLength
<span id="L9564" class="ln">  9564&nbsp;&nbsp;</span>	res.Body = http2transportResponseBody{cs}
<span id="L9565" class="ln">  9565&nbsp;&nbsp;</span>
<span id="L9566" class="ln">  9566&nbsp;&nbsp;</span>	if cs.requestedGzip &amp;&amp; http2asciiEqualFold(res.Header.Get(&#34;Content-Encoding&#34;), &#34;gzip&#34;) {
<span id="L9567" class="ln">  9567&nbsp;&nbsp;</span>		res.Header.Del(&#34;Content-Encoding&#34;)
<span id="L9568" class="ln">  9568&nbsp;&nbsp;</span>		res.Header.Del(&#34;Content-Length&#34;)
<span id="L9569" class="ln">  9569&nbsp;&nbsp;</span>		res.ContentLength = -1
<span id="L9570" class="ln">  9570&nbsp;&nbsp;</span>		res.Body = &amp;http2gzipReader{body: res.Body}
<span id="L9571" class="ln">  9571&nbsp;&nbsp;</span>		res.Uncompressed = true
<span id="L9572" class="ln">  9572&nbsp;&nbsp;</span>	}
<span id="L9573" class="ln">  9573&nbsp;&nbsp;</span>	return res, nil
<span id="L9574" class="ln">  9574&nbsp;&nbsp;</span>}
<span id="L9575" class="ln">  9575&nbsp;&nbsp;</span>
<span id="L9576" class="ln">  9576&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processTrailers(cs *http2clientStream, f *http2MetaHeadersFrame) error {
<span id="L9577" class="ln">  9577&nbsp;&nbsp;</span>	if cs.pastTrailers {
<span id="L9578" class="ln">  9578&nbsp;&nbsp;</span>		<span class="comment">// Too many HEADERS frames for this stream.</span>
<span id="L9579" class="ln">  9579&nbsp;&nbsp;</span>		return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9580" class="ln">  9580&nbsp;&nbsp;</span>	}
<span id="L9581" class="ln">  9581&nbsp;&nbsp;</span>	cs.pastTrailers = true
<span id="L9582" class="ln">  9582&nbsp;&nbsp;</span>	if !f.StreamEnded() {
<span id="L9583" class="ln">  9583&nbsp;&nbsp;</span>		<span class="comment">// We expect that any headers for trailers also</span>
<span id="L9584" class="ln">  9584&nbsp;&nbsp;</span>		<span class="comment">// has END_STREAM.</span>
<span id="L9585" class="ln">  9585&nbsp;&nbsp;</span>		return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9586" class="ln">  9586&nbsp;&nbsp;</span>	}
<span id="L9587" class="ln">  9587&nbsp;&nbsp;</span>	if len(f.PseudoFields()) &gt; 0 {
<span id="L9588" class="ln">  9588&nbsp;&nbsp;</span>		<span class="comment">// No pseudo header fields are defined for trailers.</span>
<span id="L9589" class="ln">  9589&nbsp;&nbsp;</span>		<span class="comment">// TODO: ConnectionError might be overly harsh? Check.</span>
<span id="L9590" class="ln">  9590&nbsp;&nbsp;</span>		return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9591" class="ln">  9591&nbsp;&nbsp;</span>	}
<span id="L9592" class="ln">  9592&nbsp;&nbsp;</span>
<span id="L9593" class="ln">  9593&nbsp;&nbsp;</span>	trailer := make(Header)
<span id="L9594" class="ln">  9594&nbsp;&nbsp;</span>	for _, hf := range f.RegularFields() {
<span id="L9595" class="ln">  9595&nbsp;&nbsp;</span>		key := http2canonicalHeader(hf.Name)
<span id="L9596" class="ln">  9596&nbsp;&nbsp;</span>		trailer[key] = append(trailer[key], hf.Value)
<span id="L9597" class="ln">  9597&nbsp;&nbsp;</span>	}
<span id="L9598" class="ln">  9598&nbsp;&nbsp;</span>	cs.trailer = trailer
<span id="L9599" class="ln">  9599&nbsp;&nbsp;</span>
<span id="L9600" class="ln">  9600&nbsp;&nbsp;</span>	rl.endStream(cs)
<span id="L9601" class="ln">  9601&nbsp;&nbsp;</span>	return nil
<span id="L9602" class="ln">  9602&nbsp;&nbsp;</span>}
<span id="L9603" class="ln">  9603&nbsp;&nbsp;</span>
<span id="L9604" class="ln">  9604&nbsp;&nbsp;</span><span class="comment">// transportResponseBody is the concrete type of Transport.RoundTrip&#39;s</span>
<span id="L9605" class="ln">  9605&nbsp;&nbsp;</span><span class="comment">// Response.Body. It is an io.ReadCloser.</span>
<span id="L9606" class="ln">  9606&nbsp;&nbsp;</span>type http2transportResponseBody struct {
<span id="L9607" class="ln">  9607&nbsp;&nbsp;</span>	cs *http2clientStream
<span id="L9608" class="ln">  9608&nbsp;&nbsp;</span>}
<span id="L9609" class="ln">  9609&nbsp;&nbsp;</span>
<span id="L9610" class="ln">  9610&nbsp;&nbsp;</span>func (b http2transportResponseBody) Read(p []byte) (n int, err error) {
<span id="L9611" class="ln">  9611&nbsp;&nbsp;</span>	cs := b.cs
<span id="L9612" class="ln">  9612&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L9613" class="ln">  9613&nbsp;&nbsp;</span>
<span id="L9614" class="ln">  9614&nbsp;&nbsp;</span>	if cs.readErr != nil {
<span id="L9615" class="ln">  9615&nbsp;&nbsp;</span>		return 0, cs.readErr
<span id="L9616" class="ln">  9616&nbsp;&nbsp;</span>	}
<span id="L9617" class="ln">  9617&nbsp;&nbsp;</span>	n, err = b.cs.bufPipe.Read(p)
<span id="L9618" class="ln">  9618&nbsp;&nbsp;</span>	if cs.bytesRemain != -1 {
<span id="L9619" class="ln">  9619&nbsp;&nbsp;</span>		if int64(n) &gt; cs.bytesRemain {
<span id="L9620" class="ln">  9620&nbsp;&nbsp;</span>			n = int(cs.bytesRemain)
<span id="L9621" class="ln">  9621&nbsp;&nbsp;</span>			if err == nil {
<span id="L9622" class="ln">  9622&nbsp;&nbsp;</span>				err = errors.New(&#34;net/http: server replied with more than declared Content-Length; truncated&#34;)
<span id="L9623" class="ln">  9623&nbsp;&nbsp;</span>				cs.abortStream(err)
<span id="L9624" class="ln">  9624&nbsp;&nbsp;</span>			}
<span id="L9625" class="ln">  9625&nbsp;&nbsp;</span>			cs.readErr = err
<span id="L9626" class="ln">  9626&nbsp;&nbsp;</span>			return int(cs.bytesRemain), err
<span id="L9627" class="ln">  9627&nbsp;&nbsp;</span>		}
<span id="L9628" class="ln">  9628&nbsp;&nbsp;</span>		cs.bytesRemain -= int64(n)
<span id="L9629" class="ln">  9629&nbsp;&nbsp;</span>		if err == io.EOF &amp;&amp; cs.bytesRemain &gt; 0 {
<span id="L9630" class="ln">  9630&nbsp;&nbsp;</span>			err = io.ErrUnexpectedEOF
<span id="L9631" class="ln">  9631&nbsp;&nbsp;</span>			cs.readErr = err
<span id="L9632" class="ln">  9632&nbsp;&nbsp;</span>			return n, err
<span id="L9633" class="ln">  9633&nbsp;&nbsp;</span>		}
<span id="L9634" class="ln">  9634&nbsp;&nbsp;</span>	}
<span id="L9635" class="ln">  9635&nbsp;&nbsp;</span>	if n == 0 {
<span id="L9636" class="ln">  9636&nbsp;&nbsp;</span>		<span class="comment">// No flow control tokens to send back.</span>
<span id="L9637" class="ln">  9637&nbsp;&nbsp;</span>		return
<span id="L9638" class="ln">  9638&nbsp;&nbsp;</span>	}
<span id="L9639" class="ln">  9639&nbsp;&nbsp;</span>
<span id="L9640" class="ln">  9640&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L9641" class="ln">  9641&nbsp;&nbsp;</span>	connAdd := cc.inflow.add(n)
<span id="L9642" class="ln">  9642&nbsp;&nbsp;</span>	var streamAdd int32
<span id="L9643" class="ln">  9643&nbsp;&nbsp;</span>	if err == nil { <span class="comment">// No need to refresh if the stream is over or failed.</span>
<span id="L9644" class="ln">  9644&nbsp;&nbsp;</span>		streamAdd = cs.inflow.add(n)
<span id="L9645" class="ln">  9645&nbsp;&nbsp;</span>	}
<span id="L9646" class="ln">  9646&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L9647" class="ln">  9647&nbsp;&nbsp;</span>
<span id="L9648" class="ln">  9648&nbsp;&nbsp;</span>	if connAdd != 0 || streamAdd != 0 {
<span id="L9649" class="ln">  9649&nbsp;&nbsp;</span>		cc.wmu.Lock()
<span id="L9650" class="ln">  9650&nbsp;&nbsp;</span>		defer cc.wmu.Unlock()
<span id="L9651" class="ln">  9651&nbsp;&nbsp;</span>		if connAdd != 0 {
<span id="L9652" class="ln">  9652&nbsp;&nbsp;</span>			cc.fr.WriteWindowUpdate(0, http2mustUint31(connAdd))
<span id="L9653" class="ln">  9653&nbsp;&nbsp;</span>		}
<span id="L9654" class="ln">  9654&nbsp;&nbsp;</span>		if streamAdd != 0 {
<span id="L9655" class="ln">  9655&nbsp;&nbsp;</span>			cc.fr.WriteWindowUpdate(cs.ID, http2mustUint31(streamAdd))
<span id="L9656" class="ln">  9656&nbsp;&nbsp;</span>		}
<span id="L9657" class="ln">  9657&nbsp;&nbsp;</span>		cc.bw.Flush()
<span id="L9658" class="ln">  9658&nbsp;&nbsp;</span>	}
<span id="L9659" class="ln">  9659&nbsp;&nbsp;</span>	return
<span id="L9660" class="ln">  9660&nbsp;&nbsp;</span>}
<span id="L9661" class="ln">  9661&nbsp;&nbsp;</span>
<span id="L9662" class="ln">  9662&nbsp;&nbsp;</span>var http2errClosedResponseBody = errors.New(&#34;http2: response body closed&#34;)
<span id="L9663" class="ln">  9663&nbsp;&nbsp;</span>
<span id="L9664" class="ln">  9664&nbsp;&nbsp;</span>func (b http2transportResponseBody) Close() error {
<span id="L9665" class="ln">  9665&nbsp;&nbsp;</span>	cs := b.cs
<span id="L9666" class="ln">  9666&nbsp;&nbsp;</span>	cc := cs.cc
<span id="L9667" class="ln">  9667&nbsp;&nbsp;</span>
<span id="L9668" class="ln">  9668&nbsp;&nbsp;</span>	cs.bufPipe.BreakWithError(http2errClosedResponseBody)
<span id="L9669" class="ln">  9669&nbsp;&nbsp;</span>	cs.abortStream(http2errClosedResponseBody)
<span id="L9670" class="ln">  9670&nbsp;&nbsp;</span>
<span id="L9671" class="ln">  9671&nbsp;&nbsp;</span>	unread := cs.bufPipe.Len()
<span id="L9672" class="ln">  9672&nbsp;&nbsp;</span>	if unread &gt; 0 {
<span id="L9673" class="ln">  9673&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L9674" class="ln">  9674&nbsp;&nbsp;</span>		<span class="comment">// Return connection-level flow control.</span>
<span id="L9675" class="ln">  9675&nbsp;&nbsp;</span>		connAdd := cc.inflow.add(unread)
<span id="L9676" class="ln">  9676&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L9677" class="ln">  9677&nbsp;&nbsp;</span>
<span id="L9678" class="ln">  9678&nbsp;&nbsp;</span>		<span class="comment">// TODO(dneil): Acquiring this mutex can block indefinitely.</span>
<span id="L9679" class="ln">  9679&nbsp;&nbsp;</span>		<span class="comment">// Move flow control return to a goroutine?</span>
<span id="L9680" class="ln">  9680&nbsp;&nbsp;</span>		cc.wmu.Lock()
<span id="L9681" class="ln">  9681&nbsp;&nbsp;</span>		<span class="comment">// Return connection-level flow control.</span>
<span id="L9682" class="ln">  9682&nbsp;&nbsp;</span>		if connAdd &gt; 0 {
<span id="L9683" class="ln">  9683&nbsp;&nbsp;</span>			cc.fr.WriteWindowUpdate(0, uint32(connAdd))
<span id="L9684" class="ln">  9684&nbsp;&nbsp;</span>		}
<span id="L9685" class="ln">  9685&nbsp;&nbsp;</span>		cc.bw.Flush()
<span id="L9686" class="ln">  9686&nbsp;&nbsp;</span>		cc.wmu.Unlock()
<span id="L9687" class="ln">  9687&nbsp;&nbsp;</span>	}
<span id="L9688" class="ln">  9688&nbsp;&nbsp;</span>
<span id="L9689" class="ln">  9689&nbsp;&nbsp;</span>	select {
<span id="L9690" class="ln">  9690&nbsp;&nbsp;</span>	case &lt;-cs.donec:
<span id="L9691" class="ln">  9691&nbsp;&nbsp;</span>	case &lt;-cs.ctx.Done():
<span id="L9692" class="ln">  9692&nbsp;&nbsp;</span>		<span class="comment">// See golang/go#49366: The net/http package can cancel the</span>
<span id="L9693" class="ln">  9693&nbsp;&nbsp;</span>		<span class="comment">// request context after the response body is fully read.</span>
<span id="L9694" class="ln">  9694&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t treat this as an error.</span>
<span id="L9695" class="ln">  9695&nbsp;&nbsp;</span>		return nil
<span id="L9696" class="ln">  9696&nbsp;&nbsp;</span>	case &lt;-cs.reqCancel:
<span id="L9697" class="ln">  9697&nbsp;&nbsp;</span>		return http2errRequestCanceled
<span id="L9698" class="ln">  9698&nbsp;&nbsp;</span>	}
<span id="L9699" class="ln">  9699&nbsp;&nbsp;</span>	return nil
<span id="L9700" class="ln">  9700&nbsp;&nbsp;</span>}
<span id="L9701" class="ln">  9701&nbsp;&nbsp;</span>
<span id="L9702" class="ln">  9702&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processData(f *http2DataFrame) error {
<span id="L9703" class="ln">  9703&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9704" class="ln">  9704&nbsp;&nbsp;</span>	cs := rl.streamByID(f.StreamID)
<span id="L9705" class="ln">  9705&nbsp;&nbsp;</span>	data := f.Data()
<span id="L9706" class="ln">  9706&nbsp;&nbsp;</span>	if cs == nil {
<span id="L9707" class="ln">  9707&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L9708" class="ln">  9708&nbsp;&nbsp;</span>		neverSent := cc.nextStreamID
<span id="L9709" class="ln">  9709&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L9710" class="ln">  9710&nbsp;&nbsp;</span>		if f.StreamID &gt;= neverSent {
<span id="L9711" class="ln">  9711&nbsp;&nbsp;</span>			<span class="comment">// We never asked for this.</span>
<span id="L9712" class="ln">  9712&nbsp;&nbsp;</span>			cc.logf(&#34;http2: Transport received unsolicited DATA frame; closing connection&#34;)
<span id="L9713" class="ln">  9713&nbsp;&nbsp;</span>			return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9714" class="ln">  9714&nbsp;&nbsp;</span>		}
<span id="L9715" class="ln">  9715&nbsp;&nbsp;</span>		<span class="comment">// We probably did ask for this, but canceled. Just ignore it.</span>
<span id="L9716" class="ln">  9716&nbsp;&nbsp;</span>		<span class="comment">// TODO: be stricter here? only silently ignore things which</span>
<span id="L9717" class="ln">  9717&nbsp;&nbsp;</span>		<span class="comment">// we canceled, but not things which were closed normally</span>
<span id="L9718" class="ln">  9718&nbsp;&nbsp;</span>		<span class="comment">// by the peer? Tough without accumulating too much state.</span>
<span id="L9719" class="ln">  9719&nbsp;&nbsp;</span>
<span id="L9720" class="ln">  9720&nbsp;&nbsp;</span>		<span class="comment">// But at least return their flow control:</span>
<span id="L9721" class="ln">  9721&nbsp;&nbsp;</span>		if f.Length &gt; 0 {
<span id="L9722" class="ln">  9722&nbsp;&nbsp;</span>			cc.mu.Lock()
<span id="L9723" class="ln">  9723&nbsp;&nbsp;</span>			ok := cc.inflow.take(f.Length)
<span id="L9724" class="ln">  9724&nbsp;&nbsp;</span>			connAdd := cc.inflow.add(int(f.Length))
<span id="L9725" class="ln">  9725&nbsp;&nbsp;</span>			cc.mu.Unlock()
<span id="L9726" class="ln">  9726&nbsp;&nbsp;</span>			if !ok {
<span id="L9727" class="ln">  9727&nbsp;&nbsp;</span>				return http2ConnectionError(http2ErrCodeFlowControl)
<span id="L9728" class="ln">  9728&nbsp;&nbsp;</span>			}
<span id="L9729" class="ln">  9729&nbsp;&nbsp;</span>			if connAdd &gt; 0 {
<span id="L9730" class="ln">  9730&nbsp;&nbsp;</span>				cc.wmu.Lock()
<span id="L9731" class="ln">  9731&nbsp;&nbsp;</span>				cc.fr.WriteWindowUpdate(0, uint32(connAdd))
<span id="L9732" class="ln">  9732&nbsp;&nbsp;</span>				cc.bw.Flush()
<span id="L9733" class="ln">  9733&nbsp;&nbsp;</span>				cc.wmu.Unlock()
<span id="L9734" class="ln">  9734&nbsp;&nbsp;</span>			}
<span id="L9735" class="ln">  9735&nbsp;&nbsp;</span>		}
<span id="L9736" class="ln">  9736&nbsp;&nbsp;</span>		return nil
<span id="L9737" class="ln">  9737&nbsp;&nbsp;</span>	}
<span id="L9738" class="ln">  9738&nbsp;&nbsp;</span>	if cs.readClosed {
<span id="L9739" class="ln">  9739&nbsp;&nbsp;</span>		cc.logf(&#34;protocol error: received DATA after END_STREAM&#34;)
<span id="L9740" class="ln">  9740&nbsp;&nbsp;</span>		rl.endStreamError(cs, http2StreamError{
<span id="L9741" class="ln">  9741&nbsp;&nbsp;</span>			StreamID: f.StreamID,
<span id="L9742" class="ln">  9742&nbsp;&nbsp;</span>			Code:     http2ErrCodeProtocol,
<span id="L9743" class="ln">  9743&nbsp;&nbsp;</span>		})
<span id="L9744" class="ln">  9744&nbsp;&nbsp;</span>		return nil
<span id="L9745" class="ln">  9745&nbsp;&nbsp;</span>	}
<span id="L9746" class="ln">  9746&nbsp;&nbsp;</span>	if !cs.pastHeaders {
<span id="L9747" class="ln">  9747&nbsp;&nbsp;</span>		cc.logf(&#34;protocol error: received DATA before a HEADERS frame&#34;)
<span id="L9748" class="ln">  9748&nbsp;&nbsp;</span>		rl.endStreamError(cs, http2StreamError{
<span id="L9749" class="ln">  9749&nbsp;&nbsp;</span>			StreamID: f.StreamID,
<span id="L9750" class="ln">  9750&nbsp;&nbsp;</span>			Code:     http2ErrCodeProtocol,
<span id="L9751" class="ln">  9751&nbsp;&nbsp;</span>		})
<span id="L9752" class="ln">  9752&nbsp;&nbsp;</span>		return nil
<span id="L9753" class="ln">  9753&nbsp;&nbsp;</span>	}
<span id="L9754" class="ln">  9754&nbsp;&nbsp;</span>	if f.Length &gt; 0 {
<span id="L9755" class="ln">  9755&nbsp;&nbsp;</span>		if cs.isHead &amp;&amp; len(data) &gt; 0 {
<span id="L9756" class="ln">  9756&nbsp;&nbsp;</span>			cc.logf(&#34;protocol error: received DATA on a HEAD request&#34;)
<span id="L9757" class="ln">  9757&nbsp;&nbsp;</span>			rl.endStreamError(cs, http2StreamError{
<span id="L9758" class="ln">  9758&nbsp;&nbsp;</span>				StreamID: f.StreamID,
<span id="L9759" class="ln">  9759&nbsp;&nbsp;</span>				Code:     http2ErrCodeProtocol,
<span id="L9760" class="ln">  9760&nbsp;&nbsp;</span>			})
<span id="L9761" class="ln">  9761&nbsp;&nbsp;</span>			return nil
<span id="L9762" class="ln">  9762&nbsp;&nbsp;</span>		}
<span id="L9763" class="ln">  9763&nbsp;&nbsp;</span>		<span class="comment">// Check connection-level flow control.</span>
<span id="L9764" class="ln">  9764&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L9765" class="ln">  9765&nbsp;&nbsp;</span>		if !http2takeInflows(&amp;cc.inflow, &amp;cs.inflow, f.Length) {
<span id="L9766" class="ln">  9766&nbsp;&nbsp;</span>			cc.mu.Unlock()
<span id="L9767" class="ln">  9767&nbsp;&nbsp;</span>			return http2ConnectionError(http2ErrCodeFlowControl)
<span id="L9768" class="ln">  9768&nbsp;&nbsp;</span>		}
<span id="L9769" class="ln">  9769&nbsp;&nbsp;</span>		<span class="comment">// Return any padded flow control now, since we won&#39;t</span>
<span id="L9770" class="ln">  9770&nbsp;&nbsp;</span>		<span class="comment">// refund it later on body reads.</span>
<span id="L9771" class="ln">  9771&nbsp;&nbsp;</span>		var refund int
<span id="L9772" class="ln">  9772&nbsp;&nbsp;</span>		if pad := int(f.Length) - len(data); pad &gt; 0 {
<span id="L9773" class="ln">  9773&nbsp;&nbsp;</span>			refund += pad
<span id="L9774" class="ln">  9774&nbsp;&nbsp;</span>		}
<span id="L9775" class="ln">  9775&nbsp;&nbsp;</span>
<span id="L9776" class="ln">  9776&nbsp;&nbsp;</span>		didReset := false
<span id="L9777" class="ln">  9777&nbsp;&nbsp;</span>		var err error
<span id="L9778" class="ln">  9778&nbsp;&nbsp;</span>		if len(data) &gt; 0 {
<span id="L9779" class="ln">  9779&nbsp;&nbsp;</span>			if _, err = cs.bufPipe.Write(data); err != nil {
<span id="L9780" class="ln">  9780&nbsp;&nbsp;</span>				<span class="comment">// Return len(data) now if the stream is already closed,</span>
<span id="L9781" class="ln">  9781&nbsp;&nbsp;</span>				<span class="comment">// since data will never be read.</span>
<span id="L9782" class="ln">  9782&nbsp;&nbsp;</span>				didReset = true
<span id="L9783" class="ln">  9783&nbsp;&nbsp;</span>				refund += len(data)
<span id="L9784" class="ln">  9784&nbsp;&nbsp;</span>			}
<span id="L9785" class="ln">  9785&nbsp;&nbsp;</span>		}
<span id="L9786" class="ln">  9786&nbsp;&nbsp;</span>
<span id="L9787" class="ln">  9787&nbsp;&nbsp;</span>		sendConn := cc.inflow.add(refund)
<span id="L9788" class="ln">  9788&nbsp;&nbsp;</span>		var sendStream int32
<span id="L9789" class="ln">  9789&nbsp;&nbsp;</span>		if !didReset {
<span id="L9790" class="ln">  9790&nbsp;&nbsp;</span>			sendStream = cs.inflow.add(refund)
<span id="L9791" class="ln">  9791&nbsp;&nbsp;</span>		}
<span id="L9792" class="ln">  9792&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L9793" class="ln">  9793&nbsp;&nbsp;</span>
<span id="L9794" class="ln">  9794&nbsp;&nbsp;</span>		if sendConn &gt; 0 || sendStream &gt; 0 {
<span id="L9795" class="ln">  9795&nbsp;&nbsp;</span>			cc.wmu.Lock()
<span id="L9796" class="ln">  9796&nbsp;&nbsp;</span>			if sendConn &gt; 0 {
<span id="L9797" class="ln">  9797&nbsp;&nbsp;</span>				cc.fr.WriteWindowUpdate(0, uint32(sendConn))
<span id="L9798" class="ln">  9798&nbsp;&nbsp;</span>			}
<span id="L9799" class="ln">  9799&nbsp;&nbsp;</span>			if sendStream &gt; 0 {
<span id="L9800" class="ln">  9800&nbsp;&nbsp;</span>				cc.fr.WriteWindowUpdate(cs.ID, uint32(sendStream))
<span id="L9801" class="ln">  9801&nbsp;&nbsp;</span>			}
<span id="L9802" class="ln">  9802&nbsp;&nbsp;</span>			cc.bw.Flush()
<span id="L9803" class="ln">  9803&nbsp;&nbsp;</span>			cc.wmu.Unlock()
<span id="L9804" class="ln">  9804&nbsp;&nbsp;</span>		}
<span id="L9805" class="ln">  9805&nbsp;&nbsp;</span>
<span id="L9806" class="ln">  9806&nbsp;&nbsp;</span>		if err != nil {
<span id="L9807" class="ln">  9807&nbsp;&nbsp;</span>			rl.endStreamError(cs, err)
<span id="L9808" class="ln">  9808&nbsp;&nbsp;</span>			return nil
<span id="L9809" class="ln">  9809&nbsp;&nbsp;</span>		}
<span id="L9810" class="ln">  9810&nbsp;&nbsp;</span>	}
<span id="L9811" class="ln">  9811&nbsp;&nbsp;</span>
<span id="L9812" class="ln">  9812&nbsp;&nbsp;</span>	if f.StreamEnded() {
<span id="L9813" class="ln">  9813&nbsp;&nbsp;</span>		rl.endStream(cs)
<span id="L9814" class="ln">  9814&nbsp;&nbsp;</span>	}
<span id="L9815" class="ln">  9815&nbsp;&nbsp;</span>	return nil
<span id="L9816" class="ln">  9816&nbsp;&nbsp;</span>}
<span id="L9817" class="ln">  9817&nbsp;&nbsp;</span>
<span id="L9818" class="ln">  9818&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) endStream(cs *http2clientStream) {
<span id="L9819" class="ln">  9819&nbsp;&nbsp;</span>	<span class="comment">// TODO: check that any declared content-length matches, like</span>
<span id="L9820" class="ln">  9820&nbsp;&nbsp;</span>	<span class="comment">// server.go&#39;s (*stream).endStream method.</span>
<span id="L9821" class="ln">  9821&nbsp;&nbsp;</span>	if !cs.readClosed {
<span id="L9822" class="ln">  9822&nbsp;&nbsp;</span>		cs.readClosed = true
<span id="L9823" class="ln">  9823&nbsp;&nbsp;</span>		<span class="comment">// Close cs.bufPipe and cs.peerClosed with cc.mu held to avoid a</span>
<span id="L9824" class="ln">  9824&nbsp;&nbsp;</span>		<span class="comment">// race condition: The caller can read io.EOF from Response.Body</span>
<span id="L9825" class="ln">  9825&nbsp;&nbsp;</span>		<span class="comment">// and close the body before we close cs.peerClosed, causing</span>
<span id="L9826" class="ln">  9826&nbsp;&nbsp;</span>		<span class="comment">// cleanupWriteRequest to send a RST_STREAM.</span>
<span id="L9827" class="ln">  9827&nbsp;&nbsp;</span>		rl.cc.mu.Lock()
<span id="L9828" class="ln">  9828&nbsp;&nbsp;</span>		defer rl.cc.mu.Unlock()
<span id="L9829" class="ln">  9829&nbsp;&nbsp;</span>		cs.bufPipe.closeWithErrorAndCode(io.EOF, cs.copyTrailers)
<span id="L9830" class="ln">  9830&nbsp;&nbsp;</span>		close(cs.peerClosed)
<span id="L9831" class="ln">  9831&nbsp;&nbsp;</span>	}
<span id="L9832" class="ln">  9832&nbsp;&nbsp;</span>}
<span id="L9833" class="ln">  9833&nbsp;&nbsp;</span>
<span id="L9834" class="ln">  9834&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) endStreamError(cs *http2clientStream, err error) {
<span id="L9835" class="ln">  9835&nbsp;&nbsp;</span>	cs.readAborted = true
<span id="L9836" class="ln">  9836&nbsp;&nbsp;</span>	cs.abortStream(err)
<span id="L9837" class="ln">  9837&nbsp;&nbsp;</span>}
<span id="L9838" class="ln">  9838&nbsp;&nbsp;</span>
<span id="L9839" class="ln">  9839&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) streamByID(id uint32) *http2clientStream {
<span id="L9840" class="ln">  9840&nbsp;&nbsp;</span>	rl.cc.mu.Lock()
<span id="L9841" class="ln">  9841&nbsp;&nbsp;</span>	defer rl.cc.mu.Unlock()
<span id="L9842" class="ln">  9842&nbsp;&nbsp;</span>	cs := rl.cc.streams[id]
<span id="L9843" class="ln">  9843&nbsp;&nbsp;</span>	if cs != nil &amp;&amp; !cs.readAborted {
<span id="L9844" class="ln">  9844&nbsp;&nbsp;</span>		return cs
<span id="L9845" class="ln">  9845&nbsp;&nbsp;</span>	}
<span id="L9846" class="ln">  9846&nbsp;&nbsp;</span>	return nil
<span id="L9847" class="ln">  9847&nbsp;&nbsp;</span>}
<span id="L9848" class="ln">  9848&nbsp;&nbsp;</span>
<span id="L9849" class="ln">  9849&nbsp;&nbsp;</span>func (cs *http2clientStream) copyTrailers() {
<span id="L9850" class="ln">  9850&nbsp;&nbsp;</span>	for k, vv := range cs.trailer {
<span id="L9851" class="ln">  9851&nbsp;&nbsp;</span>		t := cs.resTrailer
<span id="L9852" class="ln">  9852&nbsp;&nbsp;</span>		if *t == nil {
<span id="L9853" class="ln">  9853&nbsp;&nbsp;</span>			*t = make(Header)
<span id="L9854" class="ln">  9854&nbsp;&nbsp;</span>		}
<span id="L9855" class="ln">  9855&nbsp;&nbsp;</span>		(*t)[k] = vv
<span id="L9856" class="ln">  9856&nbsp;&nbsp;</span>	}
<span id="L9857" class="ln">  9857&nbsp;&nbsp;</span>}
<span id="L9858" class="ln">  9858&nbsp;&nbsp;</span>
<span id="L9859" class="ln">  9859&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processGoAway(f *http2GoAwayFrame) error {
<span id="L9860" class="ln">  9860&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9861" class="ln">  9861&nbsp;&nbsp;</span>	cc.t.connPool().MarkDead(cc)
<span id="L9862" class="ln">  9862&nbsp;&nbsp;</span>	if f.ErrCode != 0 {
<span id="L9863" class="ln">  9863&nbsp;&nbsp;</span>		<span class="comment">// TODO: deal with GOAWAY more. particularly the error code</span>
<span id="L9864" class="ln">  9864&nbsp;&nbsp;</span>		cc.vlogf(&#34;transport got GOAWAY with error code = %v&#34;, f.ErrCode)
<span id="L9865" class="ln">  9865&nbsp;&nbsp;</span>		if fn := cc.t.CountError; fn != nil {
<span id="L9866" class="ln">  9866&nbsp;&nbsp;</span>			fn(&#34;recv_goaway_&#34; + f.ErrCode.stringToken())
<span id="L9867" class="ln">  9867&nbsp;&nbsp;</span>		}
<span id="L9868" class="ln">  9868&nbsp;&nbsp;</span>	}
<span id="L9869" class="ln">  9869&nbsp;&nbsp;</span>	cc.setGoAway(f)
<span id="L9870" class="ln">  9870&nbsp;&nbsp;</span>	return nil
<span id="L9871" class="ln">  9871&nbsp;&nbsp;</span>}
<span id="L9872" class="ln">  9872&nbsp;&nbsp;</span>
<span id="L9873" class="ln">  9873&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processSettings(f *http2SettingsFrame) error {
<span id="L9874" class="ln">  9874&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9875" class="ln">  9875&nbsp;&nbsp;</span>	<span class="comment">// Locking both mu and wmu here allows frame encoding to read settings with only wmu held.</span>
<span id="L9876" class="ln">  9876&nbsp;&nbsp;</span>	<span class="comment">// Acquiring wmu when f.IsAck() is unnecessary, but convenient and mostly harmless.</span>
<span id="L9877" class="ln">  9877&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L9878" class="ln">  9878&nbsp;&nbsp;</span>	defer cc.wmu.Unlock()
<span id="L9879" class="ln">  9879&nbsp;&nbsp;</span>
<span id="L9880" class="ln">  9880&nbsp;&nbsp;</span>	if err := rl.processSettingsNoWrite(f); err != nil {
<span id="L9881" class="ln">  9881&nbsp;&nbsp;</span>		return err
<span id="L9882" class="ln">  9882&nbsp;&nbsp;</span>	}
<span id="L9883" class="ln">  9883&nbsp;&nbsp;</span>	if !f.IsAck() {
<span id="L9884" class="ln">  9884&nbsp;&nbsp;</span>		cc.fr.WriteSettingsAck()
<span id="L9885" class="ln">  9885&nbsp;&nbsp;</span>		cc.bw.Flush()
<span id="L9886" class="ln">  9886&nbsp;&nbsp;</span>	}
<span id="L9887" class="ln">  9887&nbsp;&nbsp;</span>	return nil
<span id="L9888" class="ln">  9888&nbsp;&nbsp;</span>}
<span id="L9889" class="ln">  9889&nbsp;&nbsp;</span>
<span id="L9890" class="ln">  9890&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processSettingsNoWrite(f *http2SettingsFrame) error {
<span id="L9891" class="ln">  9891&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9892" class="ln">  9892&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L9893" class="ln">  9893&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L9894" class="ln">  9894&nbsp;&nbsp;</span>
<span id="L9895" class="ln">  9895&nbsp;&nbsp;</span>	if f.IsAck() {
<span id="L9896" class="ln">  9896&nbsp;&nbsp;</span>		if cc.wantSettingsAck {
<span id="L9897" class="ln">  9897&nbsp;&nbsp;</span>			cc.wantSettingsAck = false
<span id="L9898" class="ln">  9898&nbsp;&nbsp;</span>			return nil
<span id="L9899" class="ln">  9899&nbsp;&nbsp;</span>		}
<span id="L9900" class="ln">  9900&nbsp;&nbsp;</span>		return http2ConnectionError(http2ErrCodeProtocol)
<span id="L9901" class="ln">  9901&nbsp;&nbsp;</span>	}
<span id="L9902" class="ln">  9902&nbsp;&nbsp;</span>
<span id="L9903" class="ln">  9903&nbsp;&nbsp;</span>	var seenMaxConcurrentStreams bool
<span id="L9904" class="ln">  9904&nbsp;&nbsp;</span>	err := f.ForeachSetting(func(s http2Setting) error {
<span id="L9905" class="ln">  9905&nbsp;&nbsp;</span>		switch s.ID {
<span id="L9906" class="ln">  9906&nbsp;&nbsp;</span>		case http2SettingMaxFrameSize:
<span id="L9907" class="ln">  9907&nbsp;&nbsp;</span>			cc.maxFrameSize = s.Val
<span id="L9908" class="ln">  9908&nbsp;&nbsp;</span>		case http2SettingMaxConcurrentStreams:
<span id="L9909" class="ln">  9909&nbsp;&nbsp;</span>			cc.maxConcurrentStreams = s.Val
<span id="L9910" class="ln">  9910&nbsp;&nbsp;</span>			seenMaxConcurrentStreams = true
<span id="L9911" class="ln">  9911&nbsp;&nbsp;</span>		case http2SettingMaxHeaderListSize:
<span id="L9912" class="ln">  9912&nbsp;&nbsp;</span>			cc.peerMaxHeaderListSize = uint64(s.Val)
<span id="L9913" class="ln">  9913&nbsp;&nbsp;</span>		case http2SettingInitialWindowSize:
<span id="L9914" class="ln">  9914&nbsp;&nbsp;</span>			<span class="comment">// Values above the maximum flow-control</span>
<span id="L9915" class="ln">  9915&nbsp;&nbsp;</span>			<span class="comment">// window size of 2^31-1 MUST be treated as a</span>
<span id="L9916" class="ln">  9916&nbsp;&nbsp;</span>			<span class="comment">// connection error (Section 5.4.1) of type</span>
<span id="L9917" class="ln">  9917&nbsp;&nbsp;</span>			<span class="comment">// FLOW_CONTROL_ERROR.</span>
<span id="L9918" class="ln">  9918&nbsp;&nbsp;</span>			if s.Val &gt; math.MaxInt32 {
<span id="L9919" class="ln">  9919&nbsp;&nbsp;</span>				return http2ConnectionError(http2ErrCodeFlowControl)
<span id="L9920" class="ln">  9920&nbsp;&nbsp;</span>			}
<span id="L9921" class="ln">  9921&nbsp;&nbsp;</span>
<span id="L9922" class="ln">  9922&nbsp;&nbsp;</span>			<span class="comment">// Adjust flow control of currently-open</span>
<span id="L9923" class="ln">  9923&nbsp;&nbsp;</span>			<span class="comment">// frames by the difference of the old initial</span>
<span id="L9924" class="ln">  9924&nbsp;&nbsp;</span>			<span class="comment">// window size and this one.</span>
<span id="L9925" class="ln">  9925&nbsp;&nbsp;</span>			delta := int32(s.Val) - int32(cc.initialWindowSize)
<span id="L9926" class="ln">  9926&nbsp;&nbsp;</span>			for _, cs := range cc.streams {
<span id="L9927" class="ln">  9927&nbsp;&nbsp;</span>				cs.flow.add(delta)
<span id="L9928" class="ln">  9928&nbsp;&nbsp;</span>			}
<span id="L9929" class="ln">  9929&nbsp;&nbsp;</span>			cc.cond.Broadcast()
<span id="L9930" class="ln">  9930&nbsp;&nbsp;</span>
<span id="L9931" class="ln">  9931&nbsp;&nbsp;</span>			cc.initialWindowSize = s.Val
<span id="L9932" class="ln">  9932&nbsp;&nbsp;</span>		case http2SettingHeaderTableSize:
<span id="L9933" class="ln">  9933&nbsp;&nbsp;</span>			cc.henc.SetMaxDynamicTableSize(s.Val)
<span id="L9934" class="ln">  9934&nbsp;&nbsp;</span>			cc.peerMaxHeaderTableSize = s.Val
<span id="L9935" class="ln">  9935&nbsp;&nbsp;</span>		default:
<span id="L9936" class="ln">  9936&nbsp;&nbsp;</span>			cc.vlogf(&#34;Unhandled Setting: %v&#34;, s)
<span id="L9937" class="ln">  9937&nbsp;&nbsp;</span>		}
<span id="L9938" class="ln">  9938&nbsp;&nbsp;</span>		return nil
<span id="L9939" class="ln">  9939&nbsp;&nbsp;</span>	})
<span id="L9940" class="ln">  9940&nbsp;&nbsp;</span>	if err != nil {
<span id="L9941" class="ln">  9941&nbsp;&nbsp;</span>		return err
<span id="L9942" class="ln">  9942&nbsp;&nbsp;</span>	}
<span id="L9943" class="ln">  9943&nbsp;&nbsp;</span>
<span id="L9944" class="ln">  9944&nbsp;&nbsp;</span>	if !cc.seenSettings {
<span id="L9945" class="ln">  9945&nbsp;&nbsp;</span>		if !seenMaxConcurrentStreams {
<span id="L9946" class="ln">  9946&nbsp;&nbsp;</span>			<span class="comment">// This was the servers initial SETTINGS frame and it</span>
<span id="L9947" class="ln">  9947&nbsp;&nbsp;</span>			<span class="comment">// didn&#39;t contain a MAX_CONCURRENT_STREAMS field so</span>
<span id="L9948" class="ln">  9948&nbsp;&nbsp;</span>			<span class="comment">// increase the number of concurrent streams this</span>
<span id="L9949" class="ln">  9949&nbsp;&nbsp;</span>			<span class="comment">// connection can establish to our default.</span>
<span id="L9950" class="ln">  9950&nbsp;&nbsp;</span>			cc.maxConcurrentStreams = http2defaultMaxConcurrentStreams
<span id="L9951" class="ln">  9951&nbsp;&nbsp;</span>		}
<span id="L9952" class="ln">  9952&nbsp;&nbsp;</span>		cc.seenSettings = true
<span id="L9953" class="ln">  9953&nbsp;&nbsp;</span>	}
<span id="L9954" class="ln">  9954&nbsp;&nbsp;</span>
<span id="L9955" class="ln">  9955&nbsp;&nbsp;</span>	return nil
<span id="L9956" class="ln">  9956&nbsp;&nbsp;</span>}
<span id="L9957" class="ln">  9957&nbsp;&nbsp;</span>
<span id="L9958" class="ln">  9958&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processWindowUpdate(f *http2WindowUpdateFrame) error {
<span id="L9959" class="ln">  9959&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L9960" class="ln">  9960&nbsp;&nbsp;</span>	cs := rl.streamByID(f.StreamID)
<span id="L9961" class="ln">  9961&nbsp;&nbsp;</span>	if f.StreamID != 0 &amp;&amp; cs == nil {
<span id="L9962" class="ln">  9962&nbsp;&nbsp;</span>		return nil
<span id="L9963" class="ln">  9963&nbsp;&nbsp;</span>	}
<span id="L9964" class="ln">  9964&nbsp;&nbsp;</span>
<span id="L9965" class="ln">  9965&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L9966" class="ln">  9966&nbsp;&nbsp;</span>	defer cc.mu.Unlock()
<span id="L9967" class="ln">  9967&nbsp;&nbsp;</span>
<span id="L9968" class="ln">  9968&nbsp;&nbsp;</span>	fl := &amp;cc.flow
<span id="L9969" class="ln">  9969&nbsp;&nbsp;</span>	if cs != nil {
<span id="L9970" class="ln">  9970&nbsp;&nbsp;</span>		fl = &amp;cs.flow
<span id="L9971" class="ln">  9971&nbsp;&nbsp;</span>	}
<span id="L9972" class="ln">  9972&nbsp;&nbsp;</span>	if !fl.add(int32(f.Increment)) {
<span id="L9973" class="ln">  9973&nbsp;&nbsp;</span>		return http2ConnectionError(http2ErrCodeFlowControl)
<span id="L9974" class="ln">  9974&nbsp;&nbsp;</span>	}
<span id="L9975" class="ln">  9975&nbsp;&nbsp;</span>	cc.cond.Broadcast()
<span id="L9976" class="ln">  9976&nbsp;&nbsp;</span>	return nil
<span id="L9977" class="ln">  9977&nbsp;&nbsp;</span>}
<span id="L9978" class="ln">  9978&nbsp;&nbsp;</span>
<span id="L9979" class="ln">  9979&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processResetStream(f *http2RSTStreamFrame) error {
<span id="L9980" class="ln">  9980&nbsp;&nbsp;</span>	cs := rl.streamByID(f.StreamID)
<span id="L9981" class="ln">  9981&nbsp;&nbsp;</span>	if cs == nil {
<span id="L9982" class="ln">  9982&nbsp;&nbsp;</span>		<span class="comment">// TODO: return error if server tries to RST_STREAM an idle stream</span>
<span id="L9983" class="ln">  9983&nbsp;&nbsp;</span>		return nil
<span id="L9984" class="ln">  9984&nbsp;&nbsp;</span>	}
<span id="L9985" class="ln">  9985&nbsp;&nbsp;</span>	serr := http2streamError(cs.ID, f.ErrCode)
<span id="L9986" class="ln">  9986&nbsp;&nbsp;</span>	serr.Cause = http2errFromPeer
<span id="L9987" class="ln">  9987&nbsp;&nbsp;</span>	if f.ErrCode == http2ErrCodeProtocol {
<span id="L9988" class="ln">  9988&nbsp;&nbsp;</span>		rl.cc.SetDoNotReuse()
<span id="L9989" class="ln">  9989&nbsp;&nbsp;</span>	}
<span id="L9990" class="ln">  9990&nbsp;&nbsp;</span>	if fn := cs.cc.t.CountError; fn != nil {
<span id="L9991" class="ln">  9991&nbsp;&nbsp;</span>		fn(&#34;recv_rststream_&#34; + f.ErrCode.stringToken())
<span id="L9992" class="ln">  9992&nbsp;&nbsp;</span>	}
<span id="L9993" class="ln">  9993&nbsp;&nbsp;</span>	cs.abortStream(serr)
<span id="L9994" class="ln">  9994&nbsp;&nbsp;</span>
<span id="L9995" class="ln">  9995&nbsp;&nbsp;</span>	cs.bufPipe.CloseWithError(serr)
<span id="L9996" class="ln">  9996&nbsp;&nbsp;</span>	return nil
<span id="L9997" class="ln">  9997&nbsp;&nbsp;</span>}
<span id="L9998" class="ln">  9998&nbsp;&nbsp;</span>
<span id="L9999" class="ln">  9999&nbsp;&nbsp;</span><span class="comment">// Ping sends a PING frame to the server and waits for the ack.</span>
<span id="L10000" class="ln"> 10000&nbsp;&nbsp;</span>func (cc *http2ClientConn) Ping(ctx context.Context) error {
<span id="L10001" class="ln"> 10001&nbsp;&nbsp;</span>	c := make(chan struct{})
<span id="L10002" class="ln"> 10002&nbsp;&nbsp;</span>	<span class="comment">// Generate a random payload</span>
<span id="L10003" class="ln"> 10003&nbsp;&nbsp;</span>	var p [8]byte
<span id="L10004" class="ln"> 10004&nbsp;&nbsp;</span>	for {
<span id="L10005" class="ln"> 10005&nbsp;&nbsp;</span>		if _, err := rand.Read(p[:]); err != nil {
<span id="L10006" class="ln"> 10006&nbsp;&nbsp;</span>			return err
<span id="L10007" class="ln"> 10007&nbsp;&nbsp;</span>		}
<span id="L10008" class="ln"> 10008&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L10009" class="ln"> 10009&nbsp;&nbsp;</span>		<span class="comment">// check for dup before insert</span>
<span id="L10010" class="ln"> 10010&nbsp;&nbsp;</span>		if _, found := cc.pings[p]; !found {
<span id="L10011" class="ln"> 10011&nbsp;&nbsp;</span>			cc.pings[p] = c
<span id="L10012" class="ln"> 10012&nbsp;&nbsp;</span>			cc.mu.Unlock()
<span id="L10013" class="ln"> 10013&nbsp;&nbsp;</span>			break
<span id="L10014" class="ln"> 10014&nbsp;&nbsp;</span>		}
<span id="L10015" class="ln"> 10015&nbsp;&nbsp;</span>		cc.mu.Unlock()
<span id="L10016" class="ln"> 10016&nbsp;&nbsp;</span>	}
<span id="L10017" class="ln"> 10017&nbsp;&nbsp;</span>	errc := make(chan error, 1)
<span id="L10018" class="ln"> 10018&nbsp;&nbsp;</span>	go func() {
<span id="L10019" class="ln"> 10019&nbsp;&nbsp;</span>		cc.wmu.Lock()
<span id="L10020" class="ln"> 10020&nbsp;&nbsp;</span>		defer cc.wmu.Unlock()
<span id="L10021" class="ln"> 10021&nbsp;&nbsp;</span>		if err := cc.fr.WritePing(false, p); err != nil {
<span id="L10022" class="ln"> 10022&nbsp;&nbsp;</span>			errc &lt;- err
<span id="L10023" class="ln"> 10023&nbsp;&nbsp;</span>			return
<span id="L10024" class="ln"> 10024&nbsp;&nbsp;</span>		}
<span id="L10025" class="ln"> 10025&nbsp;&nbsp;</span>		if err := cc.bw.Flush(); err != nil {
<span id="L10026" class="ln"> 10026&nbsp;&nbsp;</span>			errc &lt;- err
<span id="L10027" class="ln"> 10027&nbsp;&nbsp;</span>			return
<span id="L10028" class="ln"> 10028&nbsp;&nbsp;</span>		}
<span id="L10029" class="ln"> 10029&nbsp;&nbsp;</span>	}()
<span id="L10030" class="ln"> 10030&nbsp;&nbsp;</span>	select {
<span id="L10031" class="ln"> 10031&nbsp;&nbsp;</span>	case &lt;-c:
<span id="L10032" class="ln"> 10032&nbsp;&nbsp;</span>		return nil
<span id="L10033" class="ln"> 10033&nbsp;&nbsp;</span>	case err := &lt;-errc:
<span id="L10034" class="ln"> 10034&nbsp;&nbsp;</span>		return err
<span id="L10035" class="ln"> 10035&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L10036" class="ln"> 10036&nbsp;&nbsp;</span>		return ctx.Err()
<span id="L10037" class="ln"> 10037&nbsp;&nbsp;</span>	case &lt;-cc.readerDone:
<span id="L10038" class="ln"> 10038&nbsp;&nbsp;</span>		<span class="comment">// connection closed</span>
<span id="L10039" class="ln"> 10039&nbsp;&nbsp;</span>		return cc.readerErr
<span id="L10040" class="ln"> 10040&nbsp;&nbsp;</span>	}
<span id="L10041" class="ln"> 10041&nbsp;&nbsp;</span>}
<span id="L10042" class="ln"> 10042&nbsp;&nbsp;</span>
<span id="L10043" class="ln"> 10043&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processPing(f *http2PingFrame) error {
<span id="L10044" class="ln"> 10044&nbsp;&nbsp;</span>	if f.IsAck() {
<span id="L10045" class="ln"> 10045&nbsp;&nbsp;</span>		cc := rl.cc
<span id="L10046" class="ln"> 10046&nbsp;&nbsp;</span>		cc.mu.Lock()
<span id="L10047" class="ln"> 10047&nbsp;&nbsp;</span>		defer cc.mu.Unlock()
<span id="L10048" class="ln"> 10048&nbsp;&nbsp;</span>		<span class="comment">// If ack, notify listener if any</span>
<span id="L10049" class="ln"> 10049&nbsp;&nbsp;</span>		if c, ok := cc.pings[f.Data]; ok {
<span id="L10050" class="ln"> 10050&nbsp;&nbsp;</span>			close(c)
<span id="L10051" class="ln"> 10051&nbsp;&nbsp;</span>			delete(cc.pings, f.Data)
<span id="L10052" class="ln"> 10052&nbsp;&nbsp;</span>		}
<span id="L10053" class="ln"> 10053&nbsp;&nbsp;</span>		return nil
<span id="L10054" class="ln"> 10054&nbsp;&nbsp;</span>	}
<span id="L10055" class="ln"> 10055&nbsp;&nbsp;</span>	cc := rl.cc
<span id="L10056" class="ln"> 10056&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L10057" class="ln"> 10057&nbsp;&nbsp;</span>	defer cc.wmu.Unlock()
<span id="L10058" class="ln"> 10058&nbsp;&nbsp;</span>	if err := cc.fr.WritePing(true, f.Data); err != nil {
<span id="L10059" class="ln"> 10059&nbsp;&nbsp;</span>		return err
<span id="L10060" class="ln"> 10060&nbsp;&nbsp;</span>	}
<span id="L10061" class="ln"> 10061&nbsp;&nbsp;</span>	return cc.bw.Flush()
<span id="L10062" class="ln"> 10062&nbsp;&nbsp;</span>}
<span id="L10063" class="ln"> 10063&nbsp;&nbsp;</span>
<span id="L10064" class="ln"> 10064&nbsp;&nbsp;</span>func (rl *http2clientConnReadLoop) processPushPromise(f *http2PushPromiseFrame) error {
<span id="L10065" class="ln"> 10065&nbsp;&nbsp;</span>	<span class="comment">// We told the peer we don&#39;t want them.</span>
<span id="L10066" class="ln"> 10066&nbsp;&nbsp;</span>	<span class="comment">// Spec says:</span>
<span id="L10067" class="ln"> 10067&nbsp;&nbsp;</span>	<span class="comment">// &#34;PUSH_PROMISE MUST NOT be sent if the SETTINGS_ENABLE_PUSH</span>
<span id="L10068" class="ln"> 10068&nbsp;&nbsp;</span>	<span class="comment">// setting of the peer endpoint is set to 0. An endpoint that</span>
<span id="L10069" class="ln"> 10069&nbsp;&nbsp;</span>	<span class="comment">// has set this setting and has received acknowledgement MUST</span>
<span id="L10070" class="ln"> 10070&nbsp;&nbsp;</span>	<span class="comment">// treat the receipt of a PUSH_PROMISE frame as a connection</span>
<span id="L10071" class="ln"> 10071&nbsp;&nbsp;</span>	<span class="comment">// error (Section 5.4.1) of type PROTOCOL_ERROR.&#34;</span>
<span id="L10072" class="ln"> 10072&nbsp;&nbsp;</span>	return http2ConnectionError(http2ErrCodeProtocol)
<span id="L10073" class="ln"> 10073&nbsp;&nbsp;</span>}
<span id="L10074" class="ln"> 10074&nbsp;&nbsp;</span>
<span id="L10075" class="ln"> 10075&nbsp;&nbsp;</span>func (cc *http2ClientConn) writeStreamReset(streamID uint32, code http2ErrCode, err error) {
<span id="L10076" class="ln"> 10076&nbsp;&nbsp;</span>	<span class="comment">// TODO: map err to more interesting error codes, once the</span>
<span id="L10077" class="ln"> 10077&nbsp;&nbsp;</span>	<span class="comment">// HTTP community comes up with some. But currently for</span>
<span id="L10078" class="ln"> 10078&nbsp;&nbsp;</span>	<span class="comment">// RST_STREAM there&#39;s no equivalent to GOAWAY frame&#39;s debug</span>
<span id="L10079" class="ln"> 10079&nbsp;&nbsp;</span>	<span class="comment">// data, and the error codes are all pretty vague (&#34;cancel&#34;).</span>
<span id="L10080" class="ln"> 10080&nbsp;&nbsp;</span>	cc.wmu.Lock()
<span id="L10081" class="ln"> 10081&nbsp;&nbsp;</span>	cc.fr.WriteRSTStream(streamID, code)
<span id="L10082" class="ln"> 10082&nbsp;&nbsp;</span>	cc.bw.Flush()
<span id="L10083" class="ln"> 10083&nbsp;&nbsp;</span>	cc.wmu.Unlock()
<span id="L10084" class="ln"> 10084&nbsp;&nbsp;</span>}
<span id="L10085" class="ln"> 10085&nbsp;&nbsp;</span>
<span id="L10086" class="ln"> 10086&nbsp;&nbsp;</span>var (
<span id="L10087" class="ln"> 10087&nbsp;&nbsp;</span>	http2errResponseHeaderListSize = errors.New(&#34;http2: response header list larger than advertised limit&#34;)
<span id="L10088" class="ln"> 10088&nbsp;&nbsp;</span>	http2errRequestHeaderListSize  = errors.New(&#34;http2: request header list larger than peer&#39;s advertised limit&#34;)
<span id="L10089" class="ln"> 10089&nbsp;&nbsp;</span>)
<span id="L10090" class="ln"> 10090&nbsp;&nbsp;</span>
<span id="L10091" class="ln"> 10091&nbsp;&nbsp;</span>func (cc *http2ClientConn) logf(format string, args ...interface{}) {
<span id="L10092" class="ln"> 10092&nbsp;&nbsp;</span>	cc.t.logf(format, args...)
<span id="L10093" class="ln"> 10093&nbsp;&nbsp;</span>}
<span id="L10094" class="ln"> 10094&nbsp;&nbsp;</span>
<span id="L10095" class="ln"> 10095&nbsp;&nbsp;</span>func (cc *http2ClientConn) vlogf(format string, args ...interface{}) {
<span id="L10096" class="ln"> 10096&nbsp;&nbsp;</span>	cc.t.vlogf(format, args...)
<span id="L10097" class="ln"> 10097&nbsp;&nbsp;</span>}
<span id="L10098" class="ln"> 10098&nbsp;&nbsp;</span>
<span id="L10099" class="ln"> 10099&nbsp;&nbsp;</span>func (t *http2Transport) vlogf(format string, args ...interface{}) {
<span id="L10100" class="ln"> 10100&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L10101" class="ln"> 10101&nbsp;&nbsp;</span>		t.logf(format, args...)
<span id="L10102" class="ln"> 10102&nbsp;&nbsp;</span>	}
<span id="L10103" class="ln"> 10103&nbsp;&nbsp;</span>}
<span id="L10104" class="ln"> 10104&nbsp;&nbsp;</span>
<span id="L10105" class="ln"> 10105&nbsp;&nbsp;</span>func (t *http2Transport) logf(format string, args ...interface{}) {
<span id="L10106" class="ln"> 10106&nbsp;&nbsp;</span>	log.Printf(format, args...)
<span id="L10107" class="ln"> 10107&nbsp;&nbsp;</span>}
<span id="L10108" class="ln"> 10108&nbsp;&nbsp;</span>
<span id="L10109" class="ln"> 10109&nbsp;&nbsp;</span>var http2noBody io.ReadCloser = http2noBodyReader{}
<span id="L10110" class="ln"> 10110&nbsp;&nbsp;</span>
<span id="L10111" class="ln"> 10111&nbsp;&nbsp;</span>type http2noBodyReader struct{}
<span id="L10112" class="ln"> 10112&nbsp;&nbsp;</span>
<span id="L10113" class="ln"> 10113&nbsp;&nbsp;</span>func (http2noBodyReader) Close() error { return nil }
<span id="L10114" class="ln"> 10114&nbsp;&nbsp;</span>
<span id="L10115" class="ln"> 10115&nbsp;&nbsp;</span>func (http2noBodyReader) Read([]byte) (int, error) { return 0, io.EOF }
<span id="L10116" class="ln"> 10116&nbsp;&nbsp;</span>
<span id="L10117" class="ln"> 10117&nbsp;&nbsp;</span>type http2missingBody struct{}
<span id="L10118" class="ln"> 10118&nbsp;&nbsp;</span>
<span id="L10119" class="ln"> 10119&nbsp;&nbsp;</span>func (http2missingBody) Close() error { return nil }
<span id="L10120" class="ln"> 10120&nbsp;&nbsp;</span>
<span id="L10121" class="ln"> 10121&nbsp;&nbsp;</span>func (http2missingBody) Read([]byte) (int, error) { return 0, io.ErrUnexpectedEOF }
<span id="L10122" class="ln"> 10122&nbsp;&nbsp;</span>
<span id="L10123" class="ln"> 10123&nbsp;&nbsp;</span>func http2strSliceContains(ss []string, s string) bool {
<span id="L10124" class="ln"> 10124&nbsp;&nbsp;</span>	for _, v := range ss {
<span id="L10125" class="ln"> 10125&nbsp;&nbsp;</span>		if v == s {
<span id="L10126" class="ln"> 10126&nbsp;&nbsp;</span>			return true
<span id="L10127" class="ln"> 10127&nbsp;&nbsp;</span>		}
<span id="L10128" class="ln"> 10128&nbsp;&nbsp;</span>	}
<span id="L10129" class="ln"> 10129&nbsp;&nbsp;</span>	return false
<span id="L10130" class="ln"> 10130&nbsp;&nbsp;</span>}
<span id="L10131" class="ln"> 10131&nbsp;&nbsp;</span>
<span id="L10132" class="ln"> 10132&nbsp;&nbsp;</span>type http2erringRoundTripper struct{ err error }
<span id="L10133" class="ln"> 10133&nbsp;&nbsp;</span>
<span id="L10134" class="ln"> 10134&nbsp;&nbsp;</span>func (rt http2erringRoundTripper) RoundTripErr() error { return rt.err }
<span id="L10135" class="ln"> 10135&nbsp;&nbsp;</span>
<span id="L10136" class="ln"> 10136&nbsp;&nbsp;</span>func (rt http2erringRoundTripper) RoundTrip(*Request) (*Response, error) { return nil, rt.err }
<span id="L10137" class="ln"> 10137&nbsp;&nbsp;</span>
<span id="L10138" class="ln"> 10138&nbsp;&nbsp;</span><span class="comment">// gzipReader wraps a response body so it can lazily</span>
<span id="L10139" class="ln"> 10139&nbsp;&nbsp;</span><span class="comment">// call gzip.NewReader on the first call to Read</span>
<span id="L10140" class="ln"> 10140&nbsp;&nbsp;</span>type http2gzipReader struct {
<span id="L10141" class="ln"> 10141&nbsp;&nbsp;</span>	_    http2incomparable
<span id="L10142" class="ln"> 10142&nbsp;&nbsp;</span>	body io.ReadCloser <span class="comment">// underlying Response.Body</span>
<span id="L10143" class="ln"> 10143&nbsp;&nbsp;</span>	zr   *gzip.Reader  <span class="comment">// lazily-initialized gzip reader</span>
<span id="L10144" class="ln"> 10144&nbsp;&nbsp;</span>	zerr error         <span class="comment">// sticky error</span>
<span id="L10145" class="ln"> 10145&nbsp;&nbsp;</span>}
<span id="L10146" class="ln"> 10146&nbsp;&nbsp;</span>
<span id="L10147" class="ln"> 10147&nbsp;&nbsp;</span>func (gz *http2gzipReader) Read(p []byte) (n int, err error) {
<span id="L10148" class="ln"> 10148&nbsp;&nbsp;</span>	if gz.zerr != nil {
<span id="L10149" class="ln"> 10149&nbsp;&nbsp;</span>		return 0, gz.zerr
<span id="L10150" class="ln"> 10150&nbsp;&nbsp;</span>	}
<span id="L10151" class="ln"> 10151&nbsp;&nbsp;</span>	if gz.zr == nil {
<span id="L10152" class="ln"> 10152&nbsp;&nbsp;</span>		gz.zr, err = gzip.NewReader(gz.body)
<span id="L10153" class="ln"> 10153&nbsp;&nbsp;</span>		if err != nil {
<span id="L10154" class="ln"> 10154&nbsp;&nbsp;</span>			gz.zerr = err
<span id="L10155" class="ln"> 10155&nbsp;&nbsp;</span>			return 0, err
<span id="L10156" class="ln"> 10156&nbsp;&nbsp;</span>		}
<span id="L10157" class="ln"> 10157&nbsp;&nbsp;</span>	}
<span id="L10158" class="ln"> 10158&nbsp;&nbsp;</span>	return gz.zr.Read(p)
<span id="L10159" class="ln"> 10159&nbsp;&nbsp;</span>}
<span id="L10160" class="ln"> 10160&nbsp;&nbsp;</span>
<span id="L10161" class="ln"> 10161&nbsp;&nbsp;</span>func (gz *http2gzipReader) Close() error {
<span id="L10162" class="ln"> 10162&nbsp;&nbsp;</span>	if err := gz.body.Close(); err != nil {
<span id="L10163" class="ln"> 10163&nbsp;&nbsp;</span>		return err
<span id="L10164" class="ln"> 10164&nbsp;&nbsp;</span>	}
<span id="L10165" class="ln"> 10165&nbsp;&nbsp;</span>	gz.zerr = fs.ErrClosed
<span id="L10166" class="ln"> 10166&nbsp;&nbsp;</span>	return nil
<span id="L10167" class="ln"> 10167&nbsp;&nbsp;</span>}
<span id="L10168" class="ln"> 10168&nbsp;&nbsp;</span>
<span id="L10169" class="ln"> 10169&nbsp;&nbsp;</span>type http2errorReader struct{ err error }
<span id="L10170" class="ln"> 10170&nbsp;&nbsp;</span>
<span id="L10171" class="ln"> 10171&nbsp;&nbsp;</span>func (r http2errorReader) Read(p []byte) (int, error) { return 0, r.err }
<span id="L10172" class="ln"> 10172&nbsp;&nbsp;</span>
<span id="L10173" class="ln"> 10173&nbsp;&nbsp;</span><span class="comment">// isConnectionCloseRequest reports whether req should use its own</span>
<span id="L10174" class="ln"> 10174&nbsp;&nbsp;</span><span class="comment">// connection for a single request and then close the connection.</span>
<span id="L10175" class="ln"> 10175&nbsp;&nbsp;</span>func http2isConnectionCloseRequest(req *Request) bool {
<span id="L10176" class="ln"> 10176&nbsp;&nbsp;</span>	return req.Close || httpguts.HeaderValuesContainsToken(req.Header[&#34;Connection&#34;], &#34;close&#34;)
<span id="L10177" class="ln"> 10177&nbsp;&nbsp;</span>}
<span id="L10178" class="ln"> 10178&nbsp;&nbsp;</span>
<span id="L10179" class="ln"> 10179&nbsp;&nbsp;</span><span class="comment">// registerHTTPSProtocol calls Transport.RegisterProtocol but</span>
<span id="L10180" class="ln"> 10180&nbsp;&nbsp;</span><span class="comment">// converting panics into errors.</span>
<span id="L10181" class="ln"> 10181&nbsp;&nbsp;</span>func http2registerHTTPSProtocol(t *Transport, rt http2noDialH2RoundTripper) (err error) {
<span id="L10182" class="ln"> 10182&nbsp;&nbsp;</span>	defer func() {
<span id="L10183" class="ln"> 10183&nbsp;&nbsp;</span>		if e := recover(); e != nil {
<span id="L10184" class="ln"> 10184&nbsp;&nbsp;</span>			err = fmt.Errorf(&#34;%v&#34;, e)
<span id="L10185" class="ln"> 10185&nbsp;&nbsp;</span>		}
<span id="L10186" class="ln"> 10186&nbsp;&nbsp;</span>	}()
<span id="L10187" class="ln"> 10187&nbsp;&nbsp;</span>	t.RegisterProtocol(&#34;https&#34;, rt)
<span id="L10188" class="ln"> 10188&nbsp;&nbsp;</span>	return nil
<span id="L10189" class="ln"> 10189&nbsp;&nbsp;</span>}
<span id="L10190" class="ln"> 10190&nbsp;&nbsp;</span>
<span id="L10191" class="ln"> 10191&nbsp;&nbsp;</span><span class="comment">// noDialH2RoundTripper is a RoundTripper which only tries to complete the request</span>
<span id="L10192" class="ln"> 10192&nbsp;&nbsp;</span><span class="comment">// if there&#39;s already has a cached connection to the host.</span>
<span id="L10193" class="ln"> 10193&nbsp;&nbsp;</span><span class="comment">// (The field is exported so it can be accessed via reflect from net/http; tested</span>
<span id="L10194" class="ln"> 10194&nbsp;&nbsp;</span><span class="comment">// by TestNoDialH2RoundTripperType)</span>
<span id="L10195" class="ln"> 10195&nbsp;&nbsp;</span>type http2noDialH2RoundTripper struct{ *http2Transport }
<span id="L10196" class="ln"> 10196&nbsp;&nbsp;</span>
<span id="L10197" class="ln"> 10197&nbsp;&nbsp;</span>func (rt http2noDialH2RoundTripper) RoundTrip(req *Request) (*Response, error) {
<span id="L10198" class="ln"> 10198&nbsp;&nbsp;</span>	res, err := rt.http2Transport.RoundTrip(req)
<span id="L10199" class="ln"> 10199&nbsp;&nbsp;</span>	if http2isNoCachedConnError(err) {
<span id="L10200" class="ln"> 10200&nbsp;&nbsp;</span>		return nil, ErrSkipAltProtocol
<span id="L10201" class="ln"> 10201&nbsp;&nbsp;</span>	}
<span id="L10202" class="ln"> 10202&nbsp;&nbsp;</span>	return res, err
<span id="L10203" class="ln"> 10203&nbsp;&nbsp;</span>}
<span id="L10204" class="ln"> 10204&nbsp;&nbsp;</span>
<span id="L10205" class="ln"> 10205&nbsp;&nbsp;</span>func (t *http2Transport) idleConnTimeout() time.Duration {
<span id="L10206" class="ln"> 10206&nbsp;&nbsp;</span>	if t.t1 != nil {
<span id="L10207" class="ln"> 10207&nbsp;&nbsp;</span>		return t.t1.IdleConnTimeout
<span id="L10208" class="ln"> 10208&nbsp;&nbsp;</span>	}
<span id="L10209" class="ln"> 10209&nbsp;&nbsp;</span>	return 0
<span id="L10210" class="ln"> 10210&nbsp;&nbsp;</span>}
<span id="L10211" class="ln"> 10211&nbsp;&nbsp;</span>
<span id="L10212" class="ln"> 10212&nbsp;&nbsp;</span>func http2traceGetConn(req *Request, hostPort string) {
<span id="L10213" class="ln"> 10213&nbsp;&nbsp;</span>	trace := httptrace.ContextClientTrace(req.Context())
<span id="L10214" class="ln"> 10214&nbsp;&nbsp;</span>	if trace == nil || trace.GetConn == nil {
<span id="L10215" class="ln"> 10215&nbsp;&nbsp;</span>		return
<span id="L10216" class="ln"> 10216&nbsp;&nbsp;</span>	}
<span id="L10217" class="ln"> 10217&nbsp;&nbsp;</span>	trace.GetConn(hostPort)
<span id="L10218" class="ln"> 10218&nbsp;&nbsp;</span>}
<span id="L10219" class="ln"> 10219&nbsp;&nbsp;</span>
<span id="L10220" class="ln"> 10220&nbsp;&nbsp;</span>func http2traceGotConn(req *Request, cc *http2ClientConn, reused bool) {
<span id="L10221" class="ln"> 10221&nbsp;&nbsp;</span>	trace := httptrace.ContextClientTrace(req.Context())
<span id="L10222" class="ln"> 10222&nbsp;&nbsp;</span>	if trace == nil || trace.GotConn == nil {
<span id="L10223" class="ln"> 10223&nbsp;&nbsp;</span>		return
<span id="L10224" class="ln"> 10224&nbsp;&nbsp;</span>	}
<span id="L10225" class="ln"> 10225&nbsp;&nbsp;</span>	ci := httptrace.GotConnInfo{Conn: cc.tconn}
<span id="L10226" class="ln"> 10226&nbsp;&nbsp;</span>	ci.Reused = reused
<span id="L10227" class="ln"> 10227&nbsp;&nbsp;</span>	cc.mu.Lock()
<span id="L10228" class="ln"> 10228&nbsp;&nbsp;</span>	ci.WasIdle = len(cc.streams) == 0 &amp;&amp; reused
<span id="L10229" class="ln"> 10229&nbsp;&nbsp;</span>	if ci.WasIdle &amp;&amp; !cc.lastActive.IsZero() {
<span id="L10230" class="ln"> 10230&nbsp;&nbsp;</span>		ci.IdleTime = time.Since(cc.lastActive)
<span id="L10231" class="ln"> 10231&nbsp;&nbsp;</span>	}
<span id="L10232" class="ln"> 10232&nbsp;&nbsp;</span>	cc.mu.Unlock()
<span id="L10233" class="ln"> 10233&nbsp;&nbsp;</span>
<span id="L10234" class="ln"> 10234&nbsp;&nbsp;</span>	trace.GotConn(ci)
<span id="L10235" class="ln"> 10235&nbsp;&nbsp;</span>}
<span id="L10236" class="ln"> 10236&nbsp;&nbsp;</span>
<span id="L10237" class="ln"> 10237&nbsp;&nbsp;</span>func http2traceWroteHeaders(trace *httptrace.ClientTrace) {
<span id="L10238" class="ln"> 10238&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteHeaders != nil {
<span id="L10239" class="ln"> 10239&nbsp;&nbsp;</span>		trace.WroteHeaders()
<span id="L10240" class="ln"> 10240&nbsp;&nbsp;</span>	}
<span id="L10241" class="ln"> 10241&nbsp;&nbsp;</span>}
<span id="L10242" class="ln"> 10242&nbsp;&nbsp;</span>
<span id="L10243" class="ln"> 10243&nbsp;&nbsp;</span>func http2traceGot100Continue(trace *httptrace.ClientTrace) {
<span id="L10244" class="ln"> 10244&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.Got100Continue != nil {
<span id="L10245" class="ln"> 10245&nbsp;&nbsp;</span>		trace.Got100Continue()
<span id="L10246" class="ln"> 10246&nbsp;&nbsp;</span>	}
<span id="L10247" class="ln"> 10247&nbsp;&nbsp;</span>}
<span id="L10248" class="ln"> 10248&nbsp;&nbsp;</span>
<span id="L10249" class="ln"> 10249&nbsp;&nbsp;</span>func http2traceWait100Continue(trace *httptrace.ClientTrace) {
<span id="L10250" class="ln"> 10250&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.Wait100Continue != nil {
<span id="L10251" class="ln"> 10251&nbsp;&nbsp;</span>		trace.Wait100Continue()
<span id="L10252" class="ln"> 10252&nbsp;&nbsp;</span>	}
<span id="L10253" class="ln"> 10253&nbsp;&nbsp;</span>}
<span id="L10254" class="ln"> 10254&nbsp;&nbsp;</span>
<span id="L10255" class="ln"> 10255&nbsp;&nbsp;</span>func http2traceWroteRequest(trace *httptrace.ClientTrace, err error) {
<span id="L10256" class="ln"> 10256&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteRequest != nil {
<span id="L10257" class="ln"> 10257&nbsp;&nbsp;</span>		trace.WroteRequest(httptrace.WroteRequestInfo{Err: err})
<span id="L10258" class="ln"> 10258&nbsp;&nbsp;</span>	}
<span id="L10259" class="ln"> 10259&nbsp;&nbsp;</span>}
<span id="L10260" class="ln"> 10260&nbsp;&nbsp;</span>
<span id="L10261" class="ln"> 10261&nbsp;&nbsp;</span>func http2traceFirstResponseByte(trace *httptrace.ClientTrace) {
<span id="L10262" class="ln"> 10262&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.GotFirstResponseByte != nil {
<span id="L10263" class="ln"> 10263&nbsp;&nbsp;</span>		trace.GotFirstResponseByte()
<span id="L10264" class="ln"> 10264&nbsp;&nbsp;</span>	}
<span id="L10265" class="ln"> 10265&nbsp;&nbsp;</span>}
<span id="L10266" class="ln"> 10266&nbsp;&nbsp;</span>
<span id="L10267" class="ln"> 10267&nbsp;&nbsp;</span>func http2traceHasWroteHeaderField(trace *httptrace.ClientTrace) bool {
<span id="L10268" class="ln"> 10268&nbsp;&nbsp;</span>	return trace != nil &amp;&amp; trace.WroteHeaderField != nil
<span id="L10269" class="ln"> 10269&nbsp;&nbsp;</span>}
<span id="L10270" class="ln"> 10270&nbsp;&nbsp;</span>
<span id="L10271" class="ln"> 10271&nbsp;&nbsp;</span>func http2traceWroteHeaderField(trace *httptrace.ClientTrace, k, v string) {
<span id="L10272" class="ln"> 10272&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteHeaderField != nil {
<span id="L10273" class="ln"> 10273&nbsp;&nbsp;</span>		trace.WroteHeaderField(k, []string{v})
<span id="L10274" class="ln"> 10274&nbsp;&nbsp;</span>	}
<span id="L10275" class="ln"> 10275&nbsp;&nbsp;</span>}
<span id="L10276" class="ln"> 10276&nbsp;&nbsp;</span>
<span id="L10277" class="ln"> 10277&nbsp;&nbsp;</span>func http2traceGot1xxResponseFunc(trace *httptrace.ClientTrace) func(int, textproto.MIMEHeader) error {
<span id="L10278" class="ln"> 10278&nbsp;&nbsp;</span>	if trace != nil {
<span id="L10279" class="ln"> 10279&nbsp;&nbsp;</span>		return trace.Got1xxResponse
<span id="L10280" class="ln"> 10280&nbsp;&nbsp;</span>	}
<span id="L10281" class="ln"> 10281&nbsp;&nbsp;</span>	return nil
<span id="L10282" class="ln"> 10282&nbsp;&nbsp;</span>}
<span id="L10283" class="ln"> 10283&nbsp;&nbsp;</span>
<span id="L10284" class="ln"> 10284&nbsp;&nbsp;</span><span class="comment">// dialTLSWithContext uses tls.Dialer, added in Go 1.15, to open a TLS</span>
<span id="L10285" class="ln"> 10285&nbsp;&nbsp;</span><span class="comment">// connection.</span>
<span id="L10286" class="ln"> 10286&nbsp;&nbsp;</span>func (t *http2Transport) dialTLSWithContext(ctx context.Context, network, addr string, cfg *tls.Config) (*tls.Conn, error) {
<span id="L10287" class="ln"> 10287&nbsp;&nbsp;</span>	dialer := &amp;tls.Dialer{
<span id="L10288" class="ln"> 10288&nbsp;&nbsp;</span>		Config: cfg,
<span id="L10289" class="ln"> 10289&nbsp;&nbsp;</span>	}
<span id="L10290" class="ln"> 10290&nbsp;&nbsp;</span>	cn, err := dialer.DialContext(ctx, network, addr)
<span id="L10291" class="ln"> 10291&nbsp;&nbsp;</span>	if err != nil {
<span id="L10292" class="ln"> 10292&nbsp;&nbsp;</span>		return nil, err
<span id="L10293" class="ln"> 10293&nbsp;&nbsp;</span>	}
<span id="L10294" class="ln"> 10294&nbsp;&nbsp;</span>	tlsCn := cn.(*tls.Conn) <span class="comment">// DialContext comment promises this will always succeed</span>
<span id="L10295" class="ln"> 10295&nbsp;&nbsp;</span>	return tlsCn, nil
<span id="L10296" class="ln"> 10296&nbsp;&nbsp;</span>}
<span id="L10297" class="ln"> 10297&nbsp;&nbsp;</span>
<span id="L10298" class="ln"> 10298&nbsp;&nbsp;</span><span class="comment">// writeFramer is implemented by any type that is used to write frames.</span>
<span id="L10299" class="ln"> 10299&nbsp;&nbsp;</span>type http2writeFramer interface {
<span id="L10300" class="ln"> 10300&nbsp;&nbsp;</span>	writeFrame(http2writeContext) error
<span id="L10301" class="ln"> 10301&nbsp;&nbsp;</span>
<span id="L10302" class="ln"> 10302&nbsp;&nbsp;</span>	<span class="comment">// staysWithinBuffer reports whether this writer promises that</span>
<span id="L10303" class="ln"> 10303&nbsp;&nbsp;</span>	<span class="comment">// it will only write less than or equal to size bytes, and it</span>
<span id="L10304" class="ln"> 10304&nbsp;&nbsp;</span>	<span class="comment">// won&#39;t Flush the write context.</span>
<span id="L10305" class="ln"> 10305&nbsp;&nbsp;</span>	staysWithinBuffer(size int) bool
<span id="L10306" class="ln"> 10306&nbsp;&nbsp;</span>}
<span id="L10307" class="ln"> 10307&nbsp;&nbsp;</span>
<span id="L10308" class="ln"> 10308&nbsp;&nbsp;</span><span class="comment">// writeContext is the interface needed by the various frame writer</span>
<span id="L10309" class="ln"> 10309&nbsp;&nbsp;</span><span class="comment">// types below. All the writeFrame methods below are scheduled via the</span>
<span id="L10310" class="ln"> 10310&nbsp;&nbsp;</span><span class="comment">// frame writing scheduler (see writeScheduler in writesched.go).</span>
<span id="L10311" class="ln"> 10311&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10312" class="ln"> 10312&nbsp;&nbsp;</span><span class="comment">// This interface is implemented by *serverConn.</span>
<span id="L10313" class="ln"> 10313&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10314" class="ln"> 10314&nbsp;&nbsp;</span><span class="comment">// TODO: decide whether to a) use this in the client code (which didn&#39;t</span>
<span id="L10315" class="ln"> 10315&nbsp;&nbsp;</span><span class="comment">// end up using this yet, because it has a simpler design, not</span>
<span id="L10316" class="ln"> 10316&nbsp;&nbsp;</span><span class="comment">// currently implementing priorities), or b) delete this and</span>
<span id="L10317" class="ln"> 10317&nbsp;&nbsp;</span><span class="comment">// make the server code a bit more concrete.</span>
<span id="L10318" class="ln"> 10318&nbsp;&nbsp;</span>type http2writeContext interface {
<span id="L10319" class="ln"> 10319&nbsp;&nbsp;</span>	Framer() *http2Framer
<span id="L10320" class="ln"> 10320&nbsp;&nbsp;</span>	Flush() error
<span id="L10321" class="ln"> 10321&nbsp;&nbsp;</span>	CloseConn() error
<span id="L10322" class="ln"> 10322&nbsp;&nbsp;</span>	<span class="comment">// HeaderEncoder returns an HPACK encoder that writes to the</span>
<span id="L10323" class="ln"> 10323&nbsp;&nbsp;</span>	<span class="comment">// returned buffer.</span>
<span id="L10324" class="ln"> 10324&nbsp;&nbsp;</span>	HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)
<span id="L10325" class="ln"> 10325&nbsp;&nbsp;</span>}
<span id="L10326" class="ln"> 10326&nbsp;&nbsp;</span>
<span id="L10327" class="ln"> 10327&nbsp;&nbsp;</span><span class="comment">// writeEndsStream reports whether w writes a frame that will transition</span>
<span id="L10328" class="ln"> 10328&nbsp;&nbsp;</span><span class="comment">// the stream to a half-closed local state. This returns false for RST_STREAM,</span>
<span id="L10329" class="ln"> 10329&nbsp;&nbsp;</span><span class="comment">// which closes the entire stream (not just the local half).</span>
<span id="L10330" class="ln"> 10330&nbsp;&nbsp;</span>func http2writeEndsStream(w http2writeFramer) bool {
<span id="L10331" class="ln"> 10331&nbsp;&nbsp;</span>	switch v := w.(type) {
<span id="L10332" class="ln"> 10332&nbsp;&nbsp;</span>	case *http2writeData:
<span id="L10333" class="ln"> 10333&nbsp;&nbsp;</span>		return v.endStream
<span id="L10334" class="ln"> 10334&nbsp;&nbsp;</span>	case *http2writeResHeaders:
<span id="L10335" class="ln"> 10335&nbsp;&nbsp;</span>		return v.endStream
<span id="L10336" class="ln"> 10336&nbsp;&nbsp;</span>	case nil:
<span id="L10337" class="ln"> 10337&nbsp;&nbsp;</span>		<span class="comment">// This can only happen if the caller reuses w after it&#39;s</span>
<span id="L10338" class="ln"> 10338&nbsp;&nbsp;</span>		<span class="comment">// been intentionally nil&#39;ed out to prevent use. Keep this</span>
<span id="L10339" class="ln"> 10339&nbsp;&nbsp;</span>		<span class="comment">// here to catch future refactoring breaking it.</span>
<span id="L10340" class="ln"> 10340&nbsp;&nbsp;</span>		panic(&#34;writeEndsStream called on nil writeFramer&#34;)
<span id="L10341" class="ln"> 10341&nbsp;&nbsp;</span>	}
<span id="L10342" class="ln"> 10342&nbsp;&nbsp;</span>	return false
<span id="L10343" class="ln"> 10343&nbsp;&nbsp;</span>}
<span id="L10344" class="ln"> 10344&nbsp;&nbsp;</span>
<span id="L10345" class="ln"> 10345&nbsp;&nbsp;</span>type http2flushFrameWriter struct{}
<span id="L10346" class="ln"> 10346&nbsp;&nbsp;</span>
<span id="L10347" class="ln"> 10347&nbsp;&nbsp;</span>func (http2flushFrameWriter) writeFrame(ctx http2writeContext) error {
<span id="L10348" class="ln"> 10348&nbsp;&nbsp;</span>	return ctx.Flush()
<span id="L10349" class="ln"> 10349&nbsp;&nbsp;</span>}
<span id="L10350" class="ln"> 10350&nbsp;&nbsp;</span>
<span id="L10351" class="ln"> 10351&nbsp;&nbsp;</span>func (http2flushFrameWriter) staysWithinBuffer(max int) bool { return false }
<span id="L10352" class="ln"> 10352&nbsp;&nbsp;</span>
<span id="L10353" class="ln"> 10353&nbsp;&nbsp;</span>type http2writeSettings []http2Setting
<span id="L10354" class="ln"> 10354&nbsp;&nbsp;</span>
<span id="L10355" class="ln"> 10355&nbsp;&nbsp;</span>func (s http2writeSettings) staysWithinBuffer(max int) bool {
<span id="L10356" class="ln"> 10356&nbsp;&nbsp;</span>	const settingSize = 6 <span class="comment">// uint16 + uint32</span>
<span id="L10357" class="ln"> 10357&nbsp;&nbsp;</span>	return http2frameHeaderLen+settingSize*len(s) &lt;= max
<span id="L10358" class="ln"> 10358&nbsp;&nbsp;</span>
<span id="L10359" class="ln"> 10359&nbsp;&nbsp;</span>}
<span id="L10360" class="ln"> 10360&nbsp;&nbsp;</span>
<span id="L10361" class="ln"> 10361&nbsp;&nbsp;</span>func (s http2writeSettings) writeFrame(ctx http2writeContext) error {
<span id="L10362" class="ln"> 10362&nbsp;&nbsp;</span>	return ctx.Framer().WriteSettings([]http2Setting(s)...)
<span id="L10363" class="ln"> 10363&nbsp;&nbsp;</span>}
<span id="L10364" class="ln"> 10364&nbsp;&nbsp;</span>
<span id="L10365" class="ln"> 10365&nbsp;&nbsp;</span>type http2writeGoAway struct {
<span id="L10366" class="ln"> 10366&nbsp;&nbsp;</span>	maxStreamID uint32
<span id="L10367" class="ln"> 10367&nbsp;&nbsp;</span>	code        http2ErrCode
<span id="L10368" class="ln"> 10368&nbsp;&nbsp;</span>}
<span id="L10369" class="ln"> 10369&nbsp;&nbsp;</span>
<span id="L10370" class="ln"> 10370&nbsp;&nbsp;</span>func (p *http2writeGoAway) writeFrame(ctx http2writeContext) error {
<span id="L10371" class="ln"> 10371&nbsp;&nbsp;</span>	err := ctx.Framer().WriteGoAway(p.maxStreamID, p.code, nil)
<span id="L10372" class="ln"> 10372&nbsp;&nbsp;</span>	ctx.Flush() <span class="comment">// ignore error: we&#39;re hanging up on them anyway</span>
<span id="L10373" class="ln"> 10373&nbsp;&nbsp;</span>	return err
<span id="L10374" class="ln"> 10374&nbsp;&nbsp;</span>}
<span id="L10375" class="ln"> 10375&nbsp;&nbsp;</span>
<span id="L10376" class="ln"> 10376&nbsp;&nbsp;</span>func (*http2writeGoAway) staysWithinBuffer(max int) bool { return false } <span class="comment">// flushes</span>
<span id="L10377" class="ln"> 10377&nbsp;&nbsp;</span>
<span id="L10378" class="ln"> 10378&nbsp;&nbsp;</span>type http2writeData struct {
<span id="L10379" class="ln"> 10379&nbsp;&nbsp;</span>	streamID  uint32
<span id="L10380" class="ln"> 10380&nbsp;&nbsp;</span>	p         []byte
<span id="L10381" class="ln"> 10381&nbsp;&nbsp;</span>	endStream bool
<span id="L10382" class="ln"> 10382&nbsp;&nbsp;</span>}
<span id="L10383" class="ln"> 10383&nbsp;&nbsp;</span>
<span id="L10384" class="ln"> 10384&nbsp;&nbsp;</span>func (w *http2writeData) String() string {
<span id="L10385" class="ln"> 10385&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;writeData(stream=%d, p=%d, endStream=%v)&#34;, w.streamID, len(w.p), w.endStream)
<span id="L10386" class="ln"> 10386&nbsp;&nbsp;</span>}
<span id="L10387" class="ln"> 10387&nbsp;&nbsp;</span>
<span id="L10388" class="ln"> 10388&nbsp;&nbsp;</span>func (w *http2writeData) writeFrame(ctx http2writeContext) error {
<span id="L10389" class="ln"> 10389&nbsp;&nbsp;</span>	return ctx.Framer().WriteData(w.streamID, w.endStream, w.p)
<span id="L10390" class="ln"> 10390&nbsp;&nbsp;</span>}
<span id="L10391" class="ln"> 10391&nbsp;&nbsp;</span>
<span id="L10392" class="ln"> 10392&nbsp;&nbsp;</span>func (w *http2writeData) staysWithinBuffer(max int) bool {
<span id="L10393" class="ln"> 10393&nbsp;&nbsp;</span>	return http2frameHeaderLen+len(w.p) &lt;= max
<span id="L10394" class="ln"> 10394&nbsp;&nbsp;</span>}
<span id="L10395" class="ln"> 10395&nbsp;&nbsp;</span>
<span id="L10396" class="ln"> 10396&nbsp;&nbsp;</span><span class="comment">// handlerPanicRST is the message sent from handler goroutines when</span>
<span id="L10397" class="ln"> 10397&nbsp;&nbsp;</span><span class="comment">// the handler panics.</span>
<span id="L10398" class="ln"> 10398&nbsp;&nbsp;</span>type http2handlerPanicRST struct {
<span id="L10399" class="ln"> 10399&nbsp;&nbsp;</span>	StreamID uint32
<span id="L10400" class="ln"> 10400&nbsp;&nbsp;</span>}
<span id="L10401" class="ln"> 10401&nbsp;&nbsp;</span>
<span id="L10402" class="ln"> 10402&nbsp;&nbsp;</span>func (hp http2handlerPanicRST) writeFrame(ctx http2writeContext) error {
<span id="L10403" class="ln"> 10403&nbsp;&nbsp;</span>	return ctx.Framer().WriteRSTStream(hp.StreamID, http2ErrCodeInternal)
<span id="L10404" class="ln"> 10404&nbsp;&nbsp;</span>}
<span id="L10405" class="ln"> 10405&nbsp;&nbsp;</span>
<span id="L10406" class="ln"> 10406&nbsp;&nbsp;</span>func (hp http2handlerPanicRST) staysWithinBuffer(max int) bool { return http2frameHeaderLen+4 &lt;= max }
<span id="L10407" class="ln"> 10407&nbsp;&nbsp;</span>
<span id="L10408" class="ln"> 10408&nbsp;&nbsp;</span>func (se http2StreamError) writeFrame(ctx http2writeContext) error {
<span id="L10409" class="ln"> 10409&nbsp;&nbsp;</span>	return ctx.Framer().WriteRSTStream(se.StreamID, se.Code)
<span id="L10410" class="ln"> 10410&nbsp;&nbsp;</span>}
<span id="L10411" class="ln"> 10411&nbsp;&nbsp;</span>
<span id="L10412" class="ln"> 10412&nbsp;&nbsp;</span>func (se http2StreamError) staysWithinBuffer(max int) bool { return http2frameHeaderLen+4 &lt;= max }
<span id="L10413" class="ln"> 10413&nbsp;&nbsp;</span>
<span id="L10414" class="ln"> 10414&nbsp;&nbsp;</span>type http2writePingAck struct{ pf *http2PingFrame }
<span id="L10415" class="ln"> 10415&nbsp;&nbsp;</span>
<span id="L10416" class="ln"> 10416&nbsp;&nbsp;</span>func (w http2writePingAck) writeFrame(ctx http2writeContext) error {
<span id="L10417" class="ln"> 10417&nbsp;&nbsp;</span>	return ctx.Framer().WritePing(true, w.pf.Data)
<span id="L10418" class="ln"> 10418&nbsp;&nbsp;</span>}
<span id="L10419" class="ln"> 10419&nbsp;&nbsp;</span>
<span id="L10420" class="ln"> 10420&nbsp;&nbsp;</span>func (w http2writePingAck) staysWithinBuffer(max int) bool {
<span id="L10421" class="ln"> 10421&nbsp;&nbsp;</span>	return http2frameHeaderLen+len(w.pf.Data) &lt;= max
<span id="L10422" class="ln"> 10422&nbsp;&nbsp;</span>}
<span id="L10423" class="ln"> 10423&nbsp;&nbsp;</span>
<span id="L10424" class="ln"> 10424&nbsp;&nbsp;</span>type http2writeSettingsAck struct{}
<span id="L10425" class="ln"> 10425&nbsp;&nbsp;</span>
<span id="L10426" class="ln"> 10426&nbsp;&nbsp;</span>func (http2writeSettingsAck) writeFrame(ctx http2writeContext) error {
<span id="L10427" class="ln"> 10427&nbsp;&nbsp;</span>	return ctx.Framer().WriteSettingsAck()
<span id="L10428" class="ln"> 10428&nbsp;&nbsp;</span>}
<span id="L10429" class="ln"> 10429&nbsp;&nbsp;</span>
<span id="L10430" class="ln"> 10430&nbsp;&nbsp;</span>func (http2writeSettingsAck) staysWithinBuffer(max int) bool { return http2frameHeaderLen &lt;= max }
<span id="L10431" class="ln"> 10431&nbsp;&nbsp;</span>
<span id="L10432" class="ln"> 10432&nbsp;&nbsp;</span><span class="comment">// splitHeaderBlock splits headerBlock into fragments so that each fragment fits</span>
<span id="L10433" class="ln"> 10433&nbsp;&nbsp;</span><span class="comment">// in a single frame, then calls fn for each fragment. firstFrag/lastFrag are true</span>
<span id="L10434" class="ln"> 10434&nbsp;&nbsp;</span><span class="comment">// for the first/last fragment, respectively.</span>
<span id="L10435" class="ln"> 10435&nbsp;&nbsp;</span>func http2splitHeaderBlock(ctx http2writeContext, headerBlock []byte, fn func(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error) error {
<span id="L10436" class="ln"> 10436&nbsp;&nbsp;</span>	<span class="comment">// For now we&#39;re lazy and just pick the minimum MAX_FRAME_SIZE</span>
<span id="L10437" class="ln"> 10437&nbsp;&nbsp;</span>	<span class="comment">// that all peers must support (16KB). Later we could care</span>
<span id="L10438" class="ln"> 10438&nbsp;&nbsp;</span>	<span class="comment">// more and send larger frames if the peer advertised it, but</span>
<span id="L10439" class="ln"> 10439&nbsp;&nbsp;</span>	<span class="comment">// there&#39;s little point. Most headers are small anyway (so we</span>
<span id="L10440" class="ln"> 10440&nbsp;&nbsp;</span>	<span class="comment">// generally won&#39;t have CONTINUATION frames), and extra frames</span>
<span id="L10441" class="ln"> 10441&nbsp;&nbsp;</span>	<span class="comment">// only waste 9 bytes anyway.</span>
<span id="L10442" class="ln"> 10442&nbsp;&nbsp;</span>	const maxFrameSize = 16384
<span id="L10443" class="ln"> 10443&nbsp;&nbsp;</span>
<span id="L10444" class="ln"> 10444&nbsp;&nbsp;</span>	first := true
<span id="L10445" class="ln"> 10445&nbsp;&nbsp;</span>	for len(headerBlock) &gt; 0 {
<span id="L10446" class="ln"> 10446&nbsp;&nbsp;</span>		frag := headerBlock
<span id="L10447" class="ln"> 10447&nbsp;&nbsp;</span>		if len(frag) &gt; maxFrameSize {
<span id="L10448" class="ln"> 10448&nbsp;&nbsp;</span>			frag = frag[:maxFrameSize]
<span id="L10449" class="ln"> 10449&nbsp;&nbsp;</span>		}
<span id="L10450" class="ln"> 10450&nbsp;&nbsp;</span>		headerBlock = headerBlock[len(frag):]
<span id="L10451" class="ln"> 10451&nbsp;&nbsp;</span>		if err := fn(ctx, frag, first, len(headerBlock) == 0); err != nil {
<span id="L10452" class="ln"> 10452&nbsp;&nbsp;</span>			return err
<span id="L10453" class="ln"> 10453&nbsp;&nbsp;</span>		}
<span id="L10454" class="ln"> 10454&nbsp;&nbsp;</span>		first = false
<span id="L10455" class="ln"> 10455&nbsp;&nbsp;</span>	}
<span id="L10456" class="ln"> 10456&nbsp;&nbsp;</span>	return nil
<span id="L10457" class="ln"> 10457&nbsp;&nbsp;</span>}
<span id="L10458" class="ln"> 10458&nbsp;&nbsp;</span>
<span id="L10459" class="ln"> 10459&nbsp;&nbsp;</span><span class="comment">// writeResHeaders is a request to write a HEADERS and 0+ CONTINUATION frames</span>
<span id="L10460" class="ln"> 10460&nbsp;&nbsp;</span><span class="comment">// for HTTP response headers or trailers from a server handler.</span>
<span id="L10461" class="ln"> 10461&nbsp;&nbsp;</span>type http2writeResHeaders struct {
<span id="L10462" class="ln"> 10462&nbsp;&nbsp;</span>	streamID    uint32
<span id="L10463" class="ln"> 10463&nbsp;&nbsp;</span>	httpResCode int      <span class="comment">// 0 means no &#34;:status&#34; line</span>
<span id="L10464" class="ln"> 10464&nbsp;&nbsp;</span>	h           Header   <span class="comment">// may be nil</span>
<span id="L10465" class="ln"> 10465&nbsp;&nbsp;</span>	trailers    []string <span class="comment">// if non-nil, which keys of h to write. nil means all.</span>
<span id="L10466" class="ln"> 10466&nbsp;&nbsp;</span>	endStream   bool
<span id="L10467" class="ln"> 10467&nbsp;&nbsp;</span>
<span id="L10468" class="ln"> 10468&nbsp;&nbsp;</span>	date          string
<span id="L10469" class="ln"> 10469&nbsp;&nbsp;</span>	contentType   string
<span id="L10470" class="ln"> 10470&nbsp;&nbsp;</span>	contentLength string
<span id="L10471" class="ln"> 10471&nbsp;&nbsp;</span>}
<span id="L10472" class="ln"> 10472&nbsp;&nbsp;</span>
<span id="L10473" class="ln"> 10473&nbsp;&nbsp;</span>func http2encKV(enc *hpack.Encoder, k, v string) {
<span id="L10474" class="ln"> 10474&nbsp;&nbsp;</span>	if http2VerboseLogs {
<span id="L10475" class="ln"> 10475&nbsp;&nbsp;</span>		log.Printf(&#34;http2: server encoding header %q = %q&#34;, k, v)
<span id="L10476" class="ln"> 10476&nbsp;&nbsp;</span>	}
<span id="L10477" class="ln"> 10477&nbsp;&nbsp;</span>	enc.WriteField(hpack.HeaderField{Name: k, Value: v})
<span id="L10478" class="ln"> 10478&nbsp;&nbsp;</span>}
<span id="L10479" class="ln"> 10479&nbsp;&nbsp;</span>
<span id="L10480" class="ln"> 10480&nbsp;&nbsp;</span>func (w *http2writeResHeaders) staysWithinBuffer(max int) bool {
<span id="L10481" class="ln"> 10481&nbsp;&nbsp;</span>	<span class="comment">// TODO: this is a common one. It&#39;d be nice to return true</span>
<span id="L10482" class="ln"> 10482&nbsp;&nbsp;</span>	<span class="comment">// here and get into the fast path if we could be clever and</span>
<span id="L10483" class="ln"> 10483&nbsp;&nbsp;</span>	<span class="comment">// calculate the size fast enough, or at least a conservative</span>
<span id="L10484" class="ln"> 10484&nbsp;&nbsp;</span>	<span class="comment">// upper bound that usually fires. (Maybe if w.h and</span>
<span id="L10485" class="ln"> 10485&nbsp;&nbsp;</span>	<span class="comment">// w.trailers are nil, so we don&#39;t need to enumerate it.)</span>
<span id="L10486" class="ln"> 10486&nbsp;&nbsp;</span>	<span class="comment">// Otherwise I&#39;m afraid that just calculating the length to</span>
<span id="L10487" class="ln"> 10487&nbsp;&nbsp;</span>	<span class="comment">// answer this question would be slower than the ~2µs benefit.</span>
<span id="L10488" class="ln"> 10488&nbsp;&nbsp;</span>	return false
<span id="L10489" class="ln"> 10489&nbsp;&nbsp;</span>}
<span id="L10490" class="ln"> 10490&nbsp;&nbsp;</span>
<span id="L10491" class="ln"> 10491&nbsp;&nbsp;</span>func (w *http2writeResHeaders) writeFrame(ctx http2writeContext) error {
<span id="L10492" class="ln"> 10492&nbsp;&nbsp;</span>	enc, buf := ctx.HeaderEncoder()
<span id="L10493" class="ln"> 10493&nbsp;&nbsp;</span>	buf.Reset()
<span id="L10494" class="ln"> 10494&nbsp;&nbsp;</span>
<span id="L10495" class="ln"> 10495&nbsp;&nbsp;</span>	if w.httpResCode != 0 {
<span id="L10496" class="ln"> 10496&nbsp;&nbsp;</span>		http2encKV(enc, &#34;:status&#34;, http2httpCodeString(w.httpResCode))
<span id="L10497" class="ln"> 10497&nbsp;&nbsp;</span>	}
<span id="L10498" class="ln"> 10498&nbsp;&nbsp;</span>
<span id="L10499" class="ln"> 10499&nbsp;&nbsp;</span>	http2encodeHeaders(enc, w.h, w.trailers)
<span id="L10500" class="ln"> 10500&nbsp;&nbsp;</span>
<span id="L10501" class="ln"> 10501&nbsp;&nbsp;</span>	if w.contentType != &#34;&#34; {
<span id="L10502" class="ln"> 10502&nbsp;&nbsp;</span>		http2encKV(enc, &#34;content-type&#34;, w.contentType)
<span id="L10503" class="ln"> 10503&nbsp;&nbsp;</span>	}
<span id="L10504" class="ln"> 10504&nbsp;&nbsp;</span>	if w.contentLength != &#34;&#34; {
<span id="L10505" class="ln"> 10505&nbsp;&nbsp;</span>		http2encKV(enc, &#34;content-length&#34;, w.contentLength)
<span id="L10506" class="ln"> 10506&nbsp;&nbsp;</span>	}
<span id="L10507" class="ln"> 10507&nbsp;&nbsp;</span>	if w.date != &#34;&#34; {
<span id="L10508" class="ln"> 10508&nbsp;&nbsp;</span>		http2encKV(enc, &#34;date&#34;, w.date)
<span id="L10509" class="ln"> 10509&nbsp;&nbsp;</span>	}
<span id="L10510" class="ln"> 10510&nbsp;&nbsp;</span>
<span id="L10511" class="ln"> 10511&nbsp;&nbsp;</span>	headerBlock := buf.Bytes()
<span id="L10512" class="ln"> 10512&nbsp;&nbsp;</span>	if len(headerBlock) == 0 &amp;&amp; w.trailers == nil {
<span id="L10513" class="ln"> 10513&nbsp;&nbsp;</span>		panic(&#34;unexpected empty hpack&#34;)
<span id="L10514" class="ln"> 10514&nbsp;&nbsp;</span>	}
<span id="L10515" class="ln"> 10515&nbsp;&nbsp;</span>
<span id="L10516" class="ln"> 10516&nbsp;&nbsp;</span>	return http2splitHeaderBlock(ctx, headerBlock, w.writeHeaderBlock)
<span id="L10517" class="ln"> 10517&nbsp;&nbsp;</span>}
<span id="L10518" class="ln"> 10518&nbsp;&nbsp;</span>
<span id="L10519" class="ln"> 10519&nbsp;&nbsp;</span>func (w *http2writeResHeaders) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error {
<span id="L10520" class="ln"> 10520&nbsp;&nbsp;</span>	if firstFrag {
<span id="L10521" class="ln"> 10521&nbsp;&nbsp;</span>		return ctx.Framer().WriteHeaders(http2HeadersFrameParam{
<span id="L10522" class="ln"> 10522&nbsp;&nbsp;</span>			StreamID:      w.streamID,
<span id="L10523" class="ln"> 10523&nbsp;&nbsp;</span>			BlockFragment: frag,
<span id="L10524" class="ln"> 10524&nbsp;&nbsp;</span>			EndStream:     w.endStream,
<span id="L10525" class="ln"> 10525&nbsp;&nbsp;</span>			EndHeaders:    lastFrag,
<span id="L10526" class="ln"> 10526&nbsp;&nbsp;</span>		})
<span id="L10527" class="ln"> 10527&nbsp;&nbsp;</span>	} else {
<span id="L10528" class="ln"> 10528&nbsp;&nbsp;</span>		return ctx.Framer().WriteContinuation(w.streamID, lastFrag, frag)
<span id="L10529" class="ln"> 10529&nbsp;&nbsp;</span>	}
<span id="L10530" class="ln"> 10530&nbsp;&nbsp;</span>}
<span id="L10531" class="ln"> 10531&nbsp;&nbsp;</span>
<span id="L10532" class="ln"> 10532&nbsp;&nbsp;</span><span class="comment">// writePushPromise is a request to write a PUSH_PROMISE and 0+ CONTINUATION frames.</span>
<span id="L10533" class="ln"> 10533&nbsp;&nbsp;</span>type http2writePushPromise struct {
<span id="L10534" class="ln"> 10534&nbsp;&nbsp;</span>	streamID uint32   <span class="comment">// pusher stream</span>
<span id="L10535" class="ln"> 10535&nbsp;&nbsp;</span>	method   string   <span class="comment">// for :method</span>
<span id="L10536" class="ln"> 10536&nbsp;&nbsp;</span>	url      *url.URL <span class="comment">// for :scheme, :authority, :path</span>
<span id="L10537" class="ln"> 10537&nbsp;&nbsp;</span>	h        Header
<span id="L10538" class="ln"> 10538&nbsp;&nbsp;</span>
<span id="L10539" class="ln"> 10539&nbsp;&nbsp;</span>	<span class="comment">// Creates an ID for a pushed stream. This runs on serveG just before</span>
<span id="L10540" class="ln"> 10540&nbsp;&nbsp;</span>	<span class="comment">// the frame is written. The returned ID is copied to promisedID.</span>
<span id="L10541" class="ln"> 10541&nbsp;&nbsp;</span>	allocatePromisedID func() (uint32, error)
<span id="L10542" class="ln"> 10542&nbsp;&nbsp;</span>	promisedID         uint32
<span id="L10543" class="ln"> 10543&nbsp;&nbsp;</span>}
<span id="L10544" class="ln"> 10544&nbsp;&nbsp;</span>
<span id="L10545" class="ln"> 10545&nbsp;&nbsp;</span>func (w *http2writePushPromise) staysWithinBuffer(max int) bool {
<span id="L10546" class="ln"> 10546&nbsp;&nbsp;</span>	<span class="comment">// TODO: see writeResHeaders.staysWithinBuffer</span>
<span id="L10547" class="ln"> 10547&nbsp;&nbsp;</span>	return false
<span id="L10548" class="ln"> 10548&nbsp;&nbsp;</span>}
<span id="L10549" class="ln"> 10549&nbsp;&nbsp;</span>
<span id="L10550" class="ln"> 10550&nbsp;&nbsp;</span>func (w *http2writePushPromise) writeFrame(ctx http2writeContext) error {
<span id="L10551" class="ln"> 10551&nbsp;&nbsp;</span>	enc, buf := ctx.HeaderEncoder()
<span id="L10552" class="ln"> 10552&nbsp;&nbsp;</span>	buf.Reset()
<span id="L10553" class="ln"> 10553&nbsp;&nbsp;</span>
<span id="L10554" class="ln"> 10554&nbsp;&nbsp;</span>	http2encKV(enc, &#34;:method&#34;, w.method)
<span id="L10555" class="ln"> 10555&nbsp;&nbsp;</span>	http2encKV(enc, &#34;:scheme&#34;, w.url.Scheme)
<span id="L10556" class="ln"> 10556&nbsp;&nbsp;</span>	http2encKV(enc, &#34;:authority&#34;, w.url.Host)
<span id="L10557" class="ln"> 10557&nbsp;&nbsp;</span>	http2encKV(enc, &#34;:path&#34;, w.url.RequestURI())
<span id="L10558" class="ln"> 10558&nbsp;&nbsp;</span>	http2encodeHeaders(enc, w.h, nil)
<span id="L10559" class="ln"> 10559&nbsp;&nbsp;</span>
<span id="L10560" class="ln"> 10560&nbsp;&nbsp;</span>	headerBlock := buf.Bytes()
<span id="L10561" class="ln"> 10561&nbsp;&nbsp;</span>	if len(headerBlock) == 0 {
<span id="L10562" class="ln"> 10562&nbsp;&nbsp;</span>		panic(&#34;unexpected empty hpack&#34;)
<span id="L10563" class="ln"> 10563&nbsp;&nbsp;</span>	}
<span id="L10564" class="ln"> 10564&nbsp;&nbsp;</span>
<span id="L10565" class="ln"> 10565&nbsp;&nbsp;</span>	return http2splitHeaderBlock(ctx, headerBlock, w.writeHeaderBlock)
<span id="L10566" class="ln"> 10566&nbsp;&nbsp;</span>}
<span id="L10567" class="ln"> 10567&nbsp;&nbsp;</span>
<span id="L10568" class="ln"> 10568&nbsp;&nbsp;</span>func (w *http2writePushPromise) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error {
<span id="L10569" class="ln"> 10569&nbsp;&nbsp;</span>	if firstFrag {
<span id="L10570" class="ln"> 10570&nbsp;&nbsp;</span>		return ctx.Framer().WritePushPromise(http2PushPromiseParam{
<span id="L10571" class="ln"> 10571&nbsp;&nbsp;</span>			StreamID:      w.streamID,
<span id="L10572" class="ln"> 10572&nbsp;&nbsp;</span>			PromiseID:     w.promisedID,
<span id="L10573" class="ln"> 10573&nbsp;&nbsp;</span>			BlockFragment: frag,
<span id="L10574" class="ln"> 10574&nbsp;&nbsp;</span>			EndHeaders:    lastFrag,
<span id="L10575" class="ln"> 10575&nbsp;&nbsp;</span>		})
<span id="L10576" class="ln"> 10576&nbsp;&nbsp;</span>	} else {
<span id="L10577" class="ln"> 10577&nbsp;&nbsp;</span>		return ctx.Framer().WriteContinuation(w.streamID, lastFrag, frag)
<span id="L10578" class="ln"> 10578&nbsp;&nbsp;</span>	}
<span id="L10579" class="ln"> 10579&nbsp;&nbsp;</span>}
<span id="L10580" class="ln"> 10580&nbsp;&nbsp;</span>
<span id="L10581" class="ln"> 10581&nbsp;&nbsp;</span>type http2write100ContinueHeadersFrame struct {
<span id="L10582" class="ln"> 10582&nbsp;&nbsp;</span>	streamID uint32
<span id="L10583" class="ln"> 10583&nbsp;&nbsp;</span>}
<span id="L10584" class="ln"> 10584&nbsp;&nbsp;</span>
<span id="L10585" class="ln"> 10585&nbsp;&nbsp;</span>func (w http2write100ContinueHeadersFrame) writeFrame(ctx http2writeContext) error {
<span id="L10586" class="ln"> 10586&nbsp;&nbsp;</span>	enc, buf := ctx.HeaderEncoder()
<span id="L10587" class="ln"> 10587&nbsp;&nbsp;</span>	buf.Reset()
<span id="L10588" class="ln"> 10588&nbsp;&nbsp;</span>	http2encKV(enc, &#34;:status&#34;, &#34;100&#34;)
<span id="L10589" class="ln"> 10589&nbsp;&nbsp;</span>	return ctx.Framer().WriteHeaders(http2HeadersFrameParam{
<span id="L10590" class="ln"> 10590&nbsp;&nbsp;</span>		StreamID:      w.streamID,
<span id="L10591" class="ln"> 10591&nbsp;&nbsp;</span>		BlockFragment: buf.Bytes(),
<span id="L10592" class="ln"> 10592&nbsp;&nbsp;</span>		EndStream:     false,
<span id="L10593" class="ln"> 10593&nbsp;&nbsp;</span>		EndHeaders:    true,
<span id="L10594" class="ln"> 10594&nbsp;&nbsp;</span>	})
<span id="L10595" class="ln"> 10595&nbsp;&nbsp;</span>}
<span id="L10596" class="ln"> 10596&nbsp;&nbsp;</span>
<span id="L10597" class="ln"> 10597&nbsp;&nbsp;</span>func (w http2write100ContinueHeadersFrame) staysWithinBuffer(max int) bool {
<span id="L10598" class="ln"> 10598&nbsp;&nbsp;</span>	<span class="comment">// Sloppy but conservative:</span>
<span id="L10599" class="ln"> 10599&nbsp;&nbsp;</span>	return 9+2*(len(&#34;:status&#34;)+len(&#34;100&#34;)) &lt;= max
<span id="L10600" class="ln"> 10600&nbsp;&nbsp;</span>}
<span id="L10601" class="ln"> 10601&nbsp;&nbsp;</span>
<span id="L10602" class="ln"> 10602&nbsp;&nbsp;</span>type http2writeWindowUpdate struct {
<span id="L10603" class="ln"> 10603&nbsp;&nbsp;</span>	streamID uint32 <span class="comment">// or 0 for conn-level</span>
<span id="L10604" class="ln"> 10604&nbsp;&nbsp;</span>	n        uint32
<span id="L10605" class="ln"> 10605&nbsp;&nbsp;</span>}
<span id="L10606" class="ln"> 10606&nbsp;&nbsp;</span>
<span id="L10607" class="ln"> 10607&nbsp;&nbsp;</span>func (wu http2writeWindowUpdate) staysWithinBuffer(max int) bool { return http2frameHeaderLen+4 &lt;= max }
<span id="L10608" class="ln"> 10608&nbsp;&nbsp;</span>
<span id="L10609" class="ln"> 10609&nbsp;&nbsp;</span>func (wu http2writeWindowUpdate) writeFrame(ctx http2writeContext) error {
<span id="L10610" class="ln"> 10610&nbsp;&nbsp;</span>	return ctx.Framer().WriteWindowUpdate(wu.streamID, wu.n)
<span id="L10611" class="ln"> 10611&nbsp;&nbsp;</span>}
<span id="L10612" class="ln"> 10612&nbsp;&nbsp;</span>
<span id="L10613" class="ln"> 10613&nbsp;&nbsp;</span><span class="comment">// encodeHeaders encodes an http.Header. If keys is not nil, then (k, h[k])</span>
<span id="L10614" class="ln"> 10614&nbsp;&nbsp;</span><span class="comment">// is encoded only if k is in keys.</span>
<span id="L10615" class="ln"> 10615&nbsp;&nbsp;</span>func http2encodeHeaders(enc *hpack.Encoder, h Header, keys []string) {
<span id="L10616" class="ln"> 10616&nbsp;&nbsp;</span>	if keys == nil {
<span id="L10617" class="ln"> 10617&nbsp;&nbsp;</span>		sorter := http2sorterPool.Get().(*http2sorter)
<span id="L10618" class="ln"> 10618&nbsp;&nbsp;</span>		<span class="comment">// Using defer here, since the returned keys from the</span>
<span id="L10619" class="ln"> 10619&nbsp;&nbsp;</span>		<span class="comment">// sorter.Keys method is only valid until the sorter</span>
<span id="L10620" class="ln"> 10620&nbsp;&nbsp;</span>		<span class="comment">// is returned:</span>
<span id="L10621" class="ln"> 10621&nbsp;&nbsp;</span>		defer http2sorterPool.Put(sorter)
<span id="L10622" class="ln"> 10622&nbsp;&nbsp;</span>		keys = sorter.Keys(h)
<span id="L10623" class="ln"> 10623&nbsp;&nbsp;</span>	}
<span id="L10624" class="ln"> 10624&nbsp;&nbsp;</span>	for _, k := range keys {
<span id="L10625" class="ln"> 10625&nbsp;&nbsp;</span>		vv := h[k]
<span id="L10626" class="ln"> 10626&nbsp;&nbsp;</span>		k, ascii := http2lowerHeader(k)
<span id="L10627" class="ln"> 10627&nbsp;&nbsp;</span>		if !ascii {
<span id="L10628" class="ln"> 10628&nbsp;&nbsp;</span>			<span class="comment">// Skip writing invalid headers. Per RFC 7540, Section 8.1.2, header</span>
<span id="L10629" class="ln"> 10629&nbsp;&nbsp;</span>			<span class="comment">// field names have to be ASCII characters (just as in HTTP/1.x).</span>
<span id="L10630" class="ln"> 10630&nbsp;&nbsp;</span>			continue
<span id="L10631" class="ln"> 10631&nbsp;&nbsp;</span>		}
<span id="L10632" class="ln"> 10632&nbsp;&nbsp;</span>		if !http2validWireHeaderFieldName(k) {
<span id="L10633" class="ln"> 10633&nbsp;&nbsp;</span>			<span class="comment">// Skip it as backup paranoia. Per</span>
<span id="L10634" class="ln"> 10634&nbsp;&nbsp;</span>			<span class="comment">// golang.org/issue/14048, these should</span>
<span id="L10635" class="ln"> 10635&nbsp;&nbsp;</span>			<span class="comment">// already be rejected at a higher level.</span>
<span id="L10636" class="ln"> 10636&nbsp;&nbsp;</span>			continue
<span id="L10637" class="ln"> 10637&nbsp;&nbsp;</span>		}
<span id="L10638" class="ln"> 10638&nbsp;&nbsp;</span>		isTE := k == &#34;transfer-encoding&#34;
<span id="L10639" class="ln"> 10639&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L10640" class="ln"> 10640&nbsp;&nbsp;</span>			if !httpguts.ValidHeaderFieldValue(v) {
<span id="L10641" class="ln"> 10641&nbsp;&nbsp;</span>				<span class="comment">// TODO: return an error? golang.org/issue/14048</span>
<span id="L10642" class="ln"> 10642&nbsp;&nbsp;</span>				<span class="comment">// For now just omit it.</span>
<span id="L10643" class="ln"> 10643&nbsp;&nbsp;</span>				continue
<span id="L10644" class="ln"> 10644&nbsp;&nbsp;</span>			}
<span id="L10645" class="ln"> 10645&nbsp;&nbsp;</span>			<span class="comment">// TODO: more of &#34;8.1.2.2 Connection-Specific Header Fields&#34;</span>
<span id="L10646" class="ln"> 10646&nbsp;&nbsp;</span>			if isTE &amp;&amp; v != &#34;trailers&#34; {
<span id="L10647" class="ln"> 10647&nbsp;&nbsp;</span>				continue
<span id="L10648" class="ln"> 10648&nbsp;&nbsp;</span>			}
<span id="L10649" class="ln"> 10649&nbsp;&nbsp;</span>			http2encKV(enc, k, v)
<span id="L10650" class="ln"> 10650&nbsp;&nbsp;</span>		}
<span id="L10651" class="ln"> 10651&nbsp;&nbsp;</span>	}
<span id="L10652" class="ln"> 10652&nbsp;&nbsp;</span>}
<span id="L10653" class="ln"> 10653&nbsp;&nbsp;</span>
<span id="L10654" class="ln"> 10654&nbsp;&nbsp;</span><span class="comment">// WriteScheduler is the interface implemented by HTTP/2 write schedulers.</span>
<span id="L10655" class="ln"> 10655&nbsp;&nbsp;</span><span class="comment">// Methods are never called concurrently.</span>
<span id="L10656" class="ln"> 10656&nbsp;&nbsp;</span>type http2WriteScheduler interface {
<span id="L10657" class="ln"> 10657&nbsp;&nbsp;</span>	<span class="comment">// OpenStream opens a new stream in the write scheduler.</span>
<span id="L10658" class="ln"> 10658&nbsp;&nbsp;</span>	<span class="comment">// It is illegal to call this with streamID=0 or with a streamID that is</span>
<span id="L10659" class="ln"> 10659&nbsp;&nbsp;</span>	<span class="comment">// already open -- the call may panic.</span>
<span id="L10660" class="ln"> 10660&nbsp;&nbsp;</span>	OpenStream(streamID uint32, options http2OpenStreamOptions)
<span id="L10661" class="ln"> 10661&nbsp;&nbsp;</span>
<span id="L10662" class="ln"> 10662&nbsp;&nbsp;</span>	<span class="comment">// CloseStream closes a stream in the write scheduler. Any frames queued on</span>
<span id="L10663" class="ln"> 10663&nbsp;&nbsp;</span>	<span class="comment">// this stream should be discarded. It is illegal to call this on a stream</span>
<span id="L10664" class="ln"> 10664&nbsp;&nbsp;</span>	<span class="comment">// that is not open -- the call may panic.</span>
<span id="L10665" class="ln"> 10665&nbsp;&nbsp;</span>	CloseStream(streamID uint32)
<span id="L10666" class="ln"> 10666&nbsp;&nbsp;</span>
<span id="L10667" class="ln"> 10667&nbsp;&nbsp;</span>	<span class="comment">// AdjustStream adjusts the priority of the given stream. This may be called</span>
<span id="L10668" class="ln"> 10668&nbsp;&nbsp;</span>	<span class="comment">// on a stream that has not yet been opened or has been closed. Note that</span>
<span id="L10669" class="ln"> 10669&nbsp;&nbsp;</span>	<span class="comment">// RFC 7540 allows PRIORITY frames to be sent on streams in any state. See:</span>
<span id="L10670" class="ln"> 10670&nbsp;&nbsp;</span>	<span class="comment">// https://tools.ietf.org/html/rfc7540#section-5.1</span>
<span id="L10671" class="ln"> 10671&nbsp;&nbsp;</span>	AdjustStream(streamID uint32, priority http2PriorityParam)
<span id="L10672" class="ln"> 10672&nbsp;&nbsp;</span>
<span id="L10673" class="ln"> 10673&nbsp;&nbsp;</span>	<span class="comment">// Push queues a frame in the scheduler. In most cases, this will not be</span>
<span id="L10674" class="ln"> 10674&nbsp;&nbsp;</span>	<span class="comment">// called with wr.StreamID()!=0 unless that stream is currently open. The one</span>
<span id="L10675" class="ln"> 10675&nbsp;&nbsp;</span>	<span class="comment">// exception is RST_STREAM frames, which may be sent on idle or closed streams.</span>
<span id="L10676" class="ln"> 10676&nbsp;&nbsp;</span>	Push(wr http2FrameWriteRequest)
<span id="L10677" class="ln"> 10677&nbsp;&nbsp;</span>
<span id="L10678" class="ln"> 10678&nbsp;&nbsp;</span>	<span class="comment">// Pop dequeues the next frame to write. Returns false if no frames can</span>
<span id="L10679" class="ln"> 10679&nbsp;&nbsp;</span>	<span class="comment">// be written. Frames with a given wr.StreamID() are Pop&#39;d in the same</span>
<span id="L10680" class="ln"> 10680&nbsp;&nbsp;</span>	<span class="comment">// order they are Push&#39;d, except RST_STREAM frames. No frames should be</span>
<span id="L10681" class="ln"> 10681&nbsp;&nbsp;</span>	<span class="comment">// discarded except by CloseStream.</span>
<span id="L10682" class="ln"> 10682&nbsp;&nbsp;</span>	Pop() (wr http2FrameWriteRequest, ok bool)
<span id="L10683" class="ln"> 10683&nbsp;&nbsp;</span>}
<span id="L10684" class="ln"> 10684&nbsp;&nbsp;</span>
<span id="L10685" class="ln"> 10685&nbsp;&nbsp;</span><span class="comment">// OpenStreamOptions specifies extra options for WriteScheduler.OpenStream.</span>
<span id="L10686" class="ln"> 10686&nbsp;&nbsp;</span>type http2OpenStreamOptions struct {
<span id="L10687" class="ln"> 10687&nbsp;&nbsp;</span>	<span class="comment">// PusherID is zero if the stream was initiated by the client. Otherwise,</span>
<span id="L10688" class="ln"> 10688&nbsp;&nbsp;</span>	<span class="comment">// PusherID names the stream that pushed the newly opened stream.</span>
<span id="L10689" class="ln"> 10689&nbsp;&nbsp;</span>	PusherID uint32
<span id="L10690" class="ln"> 10690&nbsp;&nbsp;</span>}
<span id="L10691" class="ln"> 10691&nbsp;&nbsp;</span>
<span id="L10692" class="ln"> 10692&nbsp;&nbsp;</span><span class="comment">// FrameWriteRequest is a request to write a frame.</span>
<span id="L10693" class="ln"> 10693&nbsp;&nbsp;</span>type http2FrameWriteRequest struct {
<span id="L10694" class="ln"> 10694&nbsp;&nbsp;</span>	<span class="comment">// write is the interface value that does the writing, once the</span>
<span id="L10695" class="ln"> 10695&nbsp;&nbsp;</span>	<span class="comment">// WriteScheduler has selected this frame to write. The write</span>
<span id="L10696" class="ln"> 10696&nbsp;&nbsp;</span>	<span class="comment">// functions are all defined in write.go.</span>
<span id="L10697" class="ln"> 10697&nbsp;&nbsp;</span>	write http2writeFramer
<span id="L10698" class="ln"> 10698&nbsp;&nbsp;</span>
<span id="L10699" class="ln"> 10699&nbsp;&nbsp;</span>	<span class="comment">// stream is the stream on which this frame will be written.</span>
<span id="L10700" class="ln"> 10700&nbsp;&nbsp;</span>	<span class="comment">// nil for non-stream frames like PING and SETTINGS.</span>
<span id="L10701" class="ln"> 10701&nbsp;&nbsp;</span>	<span class="comment">// nil for RST_STREAM streams, which use the StreamError.StreamID field instead.</span>
<span id="L10702" class="ln"> 10702&nbsp;&nbsp;</span>	stream *http2stream
<span id="L10703" class="ln"> 10703&nbsp;&nbsp;</span>
<span id="L10704" class="ln"> 10704&nbsp;&nbsp;</span>	<span class="comment">// done, if non-nil, must be a buffered channel with space for</span>
<span id="L10705" class="ln"> 10705&nbsp;&nbsp;</span>	<span class="comment">// 1 message and is sent the return value from write (or an</span>
<span id="L10706" class="ln"> 10706&nbsp;&nbsp;</span>	<span class="comment">// earlier error) when the frame has been written.</span>
<span id="L10707" class="ln"> 10707&nbsp;&nbsp;</span>	done chan error
<span id="L10708" class="ln"> 10708&nbsp;&nbsp;</span>}
<span id="L10709" class="ln"> 10709&nbsp;&nbsp;</span>
<span id="L10710" class="ln"> 10710&nbsp;&nbsp;</span><span class="comment">// StreamID returns the id of the stream this frame will be written to.</span>
<span id="L10711" class="ln"> 10711&nbsp;&nbsp;</span><span class="comment">// 0 is used for non-stream frames such as PING and SETTINGS.</span>
<span id="L10712" class="ln"> 10712&nbsp;&nbsp;</span>func (wr http2FrameWriteRequest) StreamID() uint32 {
<span id="L10713" class="ln"> 10713&nbsp;&nbsp;</span>	if wr.stream == nil {
<span id="L10714" class="ln"> 10714&nbsp;&nbsp;</span>		if se, ok := wr.write.(http2StreamError); ok {
<span id="L10715" class="ln"> 10715&nbsp;&nbsp;</span>			<span class="comment">// (*serverConn).resetStream doesn&#39;t set</span>
<span id="L10716" class="ln"> 10716&nbsp;&nbsp;</span>			<span class="comment">// stream because it doesn&#39;t necessarily have</span>
<span id="L10717" class="ln"> 10717&nbsp;&nbsp;</span>			<span class="comment">// one. So special case this type of write</span>
<span id="L10718" class="ln"> 10718&nbsp;&nbsp;</span>			<span class="comment">// message.</span>
<span id="L10719" class="ln"> 10719&nbsp;&nbsp;</span>			return se.StreamID
<span id="L10720" class="ln"> 10720&nbsp;&nbsp;</span>		}
<span id="L10721" class="ln"> 10721&nbsp;&nbsp;</span>		return 0
<span id="L10722" class="ln"> 10722&nbsp;&nbsp;</span>	}
<span id="L10723" class="ln"> 10723&nbsp;&nbsp;</span>	return wr.stream.id
<span id="L10724" class="ln"> 10724&nbsp;&nbsp;</span>}
<span id="L10725" class="ln"> 10725&nbsp;&nbsp;</span>
<span id="L10726" class="ln"> 10726&nbsp;&nbsp;</span><span class="comment">// isControl reports whether wr is a control frame for MaxQueuedControlFrames</span>
<span id="L10727" class="ln"> 10727&nbsp;&nbsp;</span><span class="comment">// purposes. That includes non-stream frames and RST_STREAM frames.</span>
<span id="L10728" class="ln"> 10728&nbsp;&nbsp;</span>func (wr http2FrameWriteRequest) isControl() bool {
<span id="L10729" class="ln"> 10729&nbsp;&nbsp;</span>	return wr.stream == nil
<span id="L10730" class="ln"> 10730&nbsp;&nbsp;</span>}
<span id="L10731" class="ln"> 10731&nbsp;&nbsp;</span>
<span id="L10732" class="ln"> 10732&nbsp;&nbsp;</span><span class="comment">// DataSize returns the number of flow control bytes that must be consumed</span>
<span id="L10733" class="ln"> 10733&nbsp;&nbsp;</span><span class="comment">// to write this entire frame. This is 0 for non-DATA frames.</span>
<span id="L10734" class="ln"> 10734&nbsp;&nbsp;</span>func (wr http2FrameWriteRequest) DataSize() int {
<span id="L10735" class="ln"> 10735&nbsp;&nbsp;</span>	if wd, ok := wr.write.(*http2writeData); ok {
<span id="L10736" class="ln"> 10736&nbsp;&nbsp;</span>		return len(wd.p)
<span id="L10737" class="ln"> 10737&nbsp;&nbsp;</span>	}
<span id="L10738" class="ln"> 10738&nbsp;&nbsp;</span>	return 0
<span id="L10739" class="ln"> 10739&nbsp;&nbsp;</span>}
<span id="L10740" class="ln"> 10740&nbsp;&nbsp;</span>
<span id="L10741" class="ln"> 10741&nbsp;&nbsp;</span><span class="comment">// Consume consumes min(n, available) bytes from this frame, where available</span>
<span id="L10742" class="ln"> 10742&nbsp;&nbsp;</span><span class="comment">// is the number of flow control bytes available on the stream. Consume returns</span>
<span id="L10743" class="ln"> 10743&nbsp;&nbsp;</span><span class="comment">// 0, 1, or 2 frames, where the integer return value gives the number of frames</span>
<span id="L10744" class="ln"> 10744&nbsp;&nbsp;</span><span class="comment">// returned.</span>
<span id="L10745" class="ln"> 10745&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10746" class="ln"> 10746&nbsp;&nbsp;</span><span class="comment">// If flow control prevents consuming any bytes, this returns (_, _, 0). If</span>
<span id="L10747" class="ln"> 10747&nbsp;&nbsp;</span><span class="comment">// the entire frame was consumed, this returns (wr, _, 1). Otherwise, this</span>
<span id="L10748" class="ln"> 10748&nbsp;&nbsp;</span><span class="comment">// returns (consumed, rest, 2), where &#39;consumed&#39; contains the consumed bytes and</span>
<span id="L10749" class="ln"> 10749&nbsp;&nbsp;</span><span class="comment">// &#39;rest&#39; contains the remaining bytes. The consumed bytes are deducted from the</span>
<span id="L10750" class="ln"> 10750&nbsp;&nbsp;</span><span class="comment">// underlying stream&#39;s flow control budget.</span>
<span id="L10751" class="ln"> 10751&nbsp;&nbsp;</span>func (wr http2FrameWriteRequest) Consume(n int32) (http2FrameWriteRequest, http2FrameWriteRequest, int) {
<span id="L10752" class="ln"> 10752&nbsp;&nbsp;</span>	var empty http2FrameWriteRequest
<span id="L10753" class="ln"> 10753&nbsp;&nbsp;</span>
<span id="L10754" class="ln"> 10754&nbsp;&nbsp;</span>	<span class="comment">// Non-DATA frames are always consumed whole.</span>
<span id="L10755" class="ln"> 10755&nbsp;&nbsp;</span>	wd, ok := wr.write.(*http2writeData)
<span id="L10756" class="ln"> 10756&nbsp;&nbsp;</span>	if !ok || len(wd.p) == 0 {
<span id="L10757" class="ln"> 10757&nbsp;&nbsp;</span>		return wr, empty, 1
<span id="L10758" class="ln"> 10758&nbsp;&nbsp;</span>	}
<span id="L10759" class="ln"> 10759&nbsp;&nbsp;</span>
<span id="L10760" class="ln"> 10760&nbsp;&nbsp;</span>	<span class="comment">// Might need to split after applying limits.</span>
<span id="L10761" class="ln"> 10761&nbsp;&nbsp;</span>	allowed := wr.stream.flow.available()
<span id="L10762" class="ln"> 10762&nbsp;&nbsp;</span>	if n &lt; allowed {
<span id="L10763" class="ln"> 10763&nbsp;&nbsp;</span>		allowed = n
<span id="L10764" class="ln"> 10764&nbsp;&nbsp;</span>	}
<span id="L10765" class="ln"> 10765&nbsp;&nbsp;</span>	if wr.stream.sc.maxFrameSize &lt; allowed {
<span id="L10766" class="ln"> 10766&nbsp;&nbsp;</span>		allowed = wr.stream.sc.maxFrameSize
<span id="L10767" class="ln"> 10767&nbsp;&nbsp;</span>	}
<span id="L10768" class="ln"> 10768&nbsp;&nbsp;</span>	if allowed &lt;= 0 {
<span id="L10769" class="ln"> 10769&nbsp;&nbsp;</span>		return empty, empty, 0
<span id="L10770" class="ln"> 10770&nbsp;&nbsp;</span>	}
<span id="L10771" class="ln"> 10771&nbsp;&nbsp;</span>	if len(wd.p) &gt; int(allowed) {
<span id="L10772" class="ln"> 10772&nbsp;&nbsp;</span>		wr.stream.flow.take(allowed)
<span id="L10773" class="ln"> 10773&nbsp;&nbsp;</span>		consumed := http2FrameWriteRequest{
<span id="L10774" class="ln"> 10774&nbsp;&nbsp;</span>			stream: wr.stream,
<span id="L10775" class="ln"> 10775&nbsp;&nbsp;</span>			write: &amp;http2writeData{
<span id="L10776" class="ln"> 10776&nbsp;&nbsp;</span>				streamID: wd.streamID,
<span id="L10777" class="ln"> 10777&nbsp;&nbsp;</span>				p:        wd.p[:allowed],
<span id="L10778" class="ln"> 10778&nbsp;&nbsp;</span>				<span class="comment">// Even if the original had endStream set, there</span>
<span id="L10779" class="ln"> 10779&nbsp;&nbsp;</span>				<span class="comment">// are bytes remaining because len(wd.p) &gt; allowed,</span>
<span id="L10780" class="ln"> 10780&nbsp;&nbsp;</span>				<span class="comment">// so we know endStream is false.</span>
<span id="L10781" class="ln"> 10781&nbsp;&nbsp;</span>				endStream: false,
<span id="L10782" class="ln"> 10782&nbsp;&nbsp;</span>			},
<span id="L10783" class="ln"> 10783&nbsp;&nbsp;</span>			<span class="comment">// Our caller is blocking on the final DATA frame, not</span>
<span id="L10784" class="ln"> 10784&nbsp;&nbsp;</span>			<span class="comment">// this intermediate frame, so no need to wait.</span>
<span id="L10785" class="ln"> 10785&nbsp;&nbsp;</span>			done: nil,
<span id="L10786" class="ln"> 10786&nbsp;&nbsp;</span>		}
<span id="L10787" class="ln"> 10787&nbsp;&nbsp;</span>		rest := http2FrameWriteRequest{
<span id="L10788" class="ln"> 10788&nbsp;&nbsp;</span>			stream: wr.stream,
<span id="L10789" class="ln"> 10789&nbsp;&nbsp;</span>			write: &amp;http2writeData{
<span id="L10790" class="ln"> 10790&nbsp;&nbsp;</span>				streamID:  wd.streamID,
<span id="L10791" class="ln"> 10791&nbsp;&nbsp;</span>				p:         wd.p[allowed:],
<span id="L10792" class="ln"> 10792&nbsp;&nbsp;</span>				endStream: wd.endStream,
<span id="L10793" class="ln"> 10793&nbsp;&nbsp;</span>			},
<span id="L10794" class="ln"> 10794&nbsp;&nbsp;</span>			done: wr.done,
<span id="L10795" class="ln"> 10795&nbsp;&nbsp;</span>		}
<span id="L10796" class="ln"> 10796&nbsp;&nbsp;</span>		return consumed, rest, 2
<span id="L10797" class="ln"> 10797&nbsp;&nbsp;</span>	}
<span id="L10798" class="ln"> 10798&nbsp;&nbsp;</span>
<span id="L10799" class="ln"> 10799&nbsp;&nbsp;</span>	<span class="comment">// The frame is consumed whole.</span>
<span id="L10800" class="ln"> 10800&nbsp;&nbsp;</span>	<span class="comment">// NB: This cast cannot overflow because allowed is &lt;= math.MaxInt32.</span>
<span id="L10801" class="ln"> 10801&nbsp;&nbsp;</span>	wr.stream.flow.take(int32(len(wd.p)))
<span id="L10802" class="ln"> 10802&nbsp;&nbsp;</span>	return wr, empty, 1
<span id="L10803" class="ln"> 10803&nbsp;&nbsp;</span>}
<span id="L10804" class="ln"> 10804&nbsp;&nbsp;</span>
<span id="L10805" class="ln"> 10805&nbsp;&nbsp;</span><span class="comment">// String is for debugging only.</span>
<span id="L10806" class="ln"> 10806&nbsp;&nbsp;</span>func (wr http2FrameWriteRequest) String() string {
<span id="L10807" class="ln"> 10807&nbsp;&nbsp;</span>	var des string
<span id="L10808" class="ln"> 10808&nbsp;&nbsp;</span>	if s, ok := wr.write.(fmt.Stringer); ok {
<span id="L10809" class="ln"> 10809&nbsp;&nbsp;</span>		des = s.String()
<span id="L10810" class="ln"> 10810&nbsp;&nbsp;</span>	} else {
<span id="L10811" class="ln"> 10811&nbsp;&nbsp;</span>		des = fmt.Sprintf(&#34;%T&#34;, wr.write)
<span id="L10812" class="ln"> 10812&nbsp;&nbsp;</span>	}
<span id="L10813" class="ln"> 10813&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;[FrameWriteRequest stream=%d, ch=%v, writer=%v]&#34;, wr.StreamID(), wr.done != nil, des)
<span id="L10814" class="ln"> 10814&nbsp;&nbsp;</span>}
<span id="L10815" class="ln"> 10815&nbsp;&nbsp;</span>
<span id="L10816" class="ln"> 10816&nbsp;&nbsp;</span><span class="comment">// replyToWriter sends err to wr.done and panics if the send must block</span>
<span id="L10817" class="ln"> 10817&nbsp;&nbsp;</span><span class="comment">// This does nothing if wr.done is nil.</span>
<span id="L10818" class="ln"> 10818&nbsp;&nbsp;</span>func (wr *http2FrameWriteRequest) replyToWriter(err error) {
<span id="L10819" class="ln"> 10819&nbsp;&nbsp;</span>	if wr.done == nil {
<span id="L10820" class="ln"> 10820&nbsp;&nbsp;</span>		return
<span id="L10821" class="ln"> 10821&nbsp;&nbsp;</span>	}
<span id="L10822" class="ln"> 10822&nbsp;&nbsp;</span>	select {
<span id="L10823" class="ln"> 10823&nbsp;&nbsp;</span>	case wr.done &lt;- err:
<span id="L10824" class="ln"> 10824&nbsp;&nbsp;</span>	default:
<span id="L10825" class="ln"> 10825&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;unbuffered done channel passed in for type %T&#34;, wr.write))
<span id="L10826" class="ln"> 10826&nbsp;&nbsp;</span>	}
<span id="L10827" class="ln"> 10827&nbsp;&nbsp;</span>	wr.write = nil <span class="comment">// prevent use (assume it&#39;s tainted after wr.done send)</span>
<span id="L10828" class="ln"> 10828&nbsp;&nbsp;</span>}
<span id="L10829" class="ln"> 10829&nbsp;&nbsp;</span>
<span id="L10830" class="ln"> 10830&nbsp;&nbsp;</span><span class="comment">// writeQueue is used by implementations of WriteScheduler.</span>
<span id="L10831" class="ln"> 10831&nbsp;&nbsp;</span>type http2writeQueue struct {
<span id="L10832" class="ln"> 10832&nbsp;&nbsp;</span>	s          []http2FrameWriteRequest
<span id="L10833" class="ln"> 10833&nbsp;&nbsp;</span>	prev, next *http2writeQueue
<span id="L10834" class="ln"> 10834&nbsp;&nbsp;</span>}
<span id="L10835" class="ln"> 10835&nbsp;&nbsp;</span>
<span id="L10836" class="ln"> 10836&nbsp;&nbsp;</span>func (q *http2writeQueue) empty() bool { return len(q.s) == 0 }
<span id="L10837" class="ln"> 10837&nbsp;&nbsp;</span>
<span id="L10838" class="ln"> 10838&nbsp;&nbsp;</span>func (q *http2writeQueue) push(wr http2FrameWriteRequest) {
<span id="L10839" class="ln"> 10839&nbsp;&nbsp;</span>	q.s = append(q.s, wr)
<span id="L10840" class="ln"> 10840&nbsp;&nbsp;</span>}
<span id="L10841" class="ln"> 10841&nbsp;&nbsp;</span>
<span id="L10842" class="ln"> 10842&nbsp;&nbsp;</span>func (q *http2writeQueue) shift() http2FrameWriteRequest {
<span id="L10843" class="ln"> 10843&nbsp;&nbsp;</span>	if len(q.s) == 0 {
<span id="L10844" class="ln"> 10844&nbsp;&nbsp;</span>		panic(&#34;invalid use of queue&#34;)
<span id="L10845" class="ln"> 10845&nbsp;&nbsp;</span>	}
<span id="L10846" class="ln"> 10846&nbsp;&nbsp;</span>	wr := q.s[0]
<span id="L10847" class="ln"> 10847&nbsp;&nbsp;</span>	<span class="comment">// TODO: less copy-happy queue.</span>
<span id="L10848" class="ln"> 10848&nbsp;&nbsp;</span>	copy(q.s, q.s[1:])
<span id="L10849" class="ln"> 10849&nbsp;&nbsp;</span>	q.s[len(q.s)-1] = http2FrameWriteRequest{}
<span id="L10850" class="ln"> 10850&nbsp;&nbsp;</span>	q.s = q.s[:len(q.s)-1]
<span id="L10851" class="ln"> 10851&nbsp;&nbsp;</span>	return wr
<span id="L10852" class="ln"> 10852&nbsp;&nbsp;</span>}
<span id="L10853" class="ln"> 10853&nbsp;&nbsp;</span>
<span id="L10854" class="ln"> 10854&nbsp;&nbsp;</span><span class="comment">// consume consumes up to n bytes from q.s[0]. If the frame is</span>
<span id="L10855" class="ln"> 10855&nbsp;&nbsp;</span><span class="comment">// entirely consumed, it is removed from the queue. If the frame</span>
<span id="L10856" class="ln"> 10856&nbsp;&nbsp;</span><span class="comment">// is partially consumed, the frame is kept with the consumed</span>
<span id="L10857" class="ln"> 10857&nbsp;&nbsp;</span><span class="comment">// bytes removed. Returns true iff any bytes were consumed.</span>
<span id="L10858" class="ln"> 10858&nbsp;&nbsp;</span>func (q *http2writeQueue) consume(n int32) (http2FrameWriteRequest, bool) {
<span id="L10859" class="ln"> 10859&nbsp;&nbsp;</span>	if len(q.s) == 0 {
<span id="L10860" class="ln"> 10860&nbsp;&nbsp;</span>		return http2FrameWriteRequest{}, false
<span id="L10861" class="ln"> 10861&nbsp;&nbsp;</span>	}
<span id="L10862" class="ln"> 10862&nbsp;&nbsp;</span>	consumed, rest, numresult := q.s[0].Consume(n)
<span id="L10863" class="ln"> 10863&nbsp;&nbsp;</span>	switch numresult {
<span id="L10864" class="ln"> 10864&nbsp;&nbsp;</span>	case 0:
<span id="L10865" class="ln"> 10865&nbsp;&nbsp;</span>		return http2FrameWriteRequest{}, false
<span id="L10866" class="ln"> 10866&nbsp;&nbsp;</span>	case 1:
<span id="L10867" class="ln"> 10867&nbsp;&nbsp;</span>		q.shift()
<span id="L10868" class="ln"> 10868&nbsp;&nbsp;</span>	case 2:
<span id="L10869" class="ln"> 10869&nbsp;&nbsp;</span>		q.s[0] = rest
<span id="L10870" class="ln"> 10870&nbsp;&nbsp;</span>	}
<span id="L10871" class="ln"> 10871&nbsp;&nbsp;</span>	return consumed, true
<span id="L10872" class="ln"> 10872&nbsp;&nbsp;</span>}
<span id="L10873" class="ln"> 10873&nbsp;&nbsp;</span>
<span id="L10874" class="ln"> 10874&nbsp;&nbsp;</span>type http2writeQueuePool []*http2writeQueue
<span id="L10875" class="ln"> 10875&nbsp;&nbsp;</span>
<span id="L10876" class="ln"> 10876&nbsp;&nbsp;</span><span class="comment">// put inserts an unused writeQueue into the pool.</span>
<span id="L10877" class="ln"> 10877&nbsp;&nbsp;</span>
<span id="L10878" class="ln"> 10878&nbsp;&nbsp;</span><span class="comment">// put inserts an unused writeQueue into the pool.</span>
<span id="L10879" class="ln"> 10879&nbsp;&nbsp;</span>func (p *http2writeQueuePool) put(q *http2writeQueue) {
<span id="L10880" class="ln"> 10880&nbsp;&nbsp;</span>	for i := range q.s {
<span id="L10881" class="ln"> 10881&nbsp;&nbsp;</span>		q.s[i] = http2FrameWriteRequest{}
<span id="L10882" class="ln"> 10882&nbsp;&nbsp;</span>	}
<span id="L10883" class="ln"> 10883&nbsp;&nbsp;</span>	q.s = q.s[:0]
<span id="L10884" class="ln"> 10884&nbsp;&nbsp;</span>	*p = append(*p, q)
<span id="L10885" class="ln"> 10885&nbsp;&nbsp;</span>}
<span id="L10886" class="ln"> 10886&nbsp;&nbsp;</span>
<span id="L10887" class="ln"> 10887&nbsp;&nbsp;</span><span class="comment">// get returns an empty writeQueue.</span>
<span id="L10888" class="ln"> 10888&nbsp;&nbsp;</span>func (p *http2writeQueuePool) get() *http2writeQueue {
<span id="L10889" class="ln"> 10889&nbsp;&nbsp;</span>	ln := len(*p)
<span id="L10890" class="ln"> 10890&nbsp;&nbsp;</span>	if ln == 0 {
<span id="L10891" class="ln"> 10891&nbsp;&nbsp;</span>		return new(http2writeQueue)
<span id="L10892" class="ln"> 10892&nbsp;&nbsp;</span>	}
<span id="L10893" class="ln"> 10893&nbsp;&nbsp;</span>	x := ln - 1
<span id="L10894" class="ln"> 10894&nbsp;&nbsp;</span>	q := (*p)[x]
<span id="L10895" class="ln"> 10895&nbsp;&nbsp;</span>	(*p)[x] = nil
<span id="L10896" class="ln"> 10896&nbsp;&nbsp;</span>	*p = (*p)[:x]
<span id="L10897" class="ln"> 10897&nbsp;&nbsp;</span>	return q
<span id="L10898" class="ln"> 10898&nbsp;&nbsp;</span>}
<span id="L10899" class="ln"> 10899&nbsp;&nbsp;</span>
<span id="L10900" class="ln"> 10900&nbsp;&nbsp;</span><span class="comment">// RFC 7540, Section 5.3.5: the default weight is 16.</span>
<span id="L10901" class="ln"> 10901&nbsp;&nbsp;</span>const http2priorityDefaultWeight = 15 <span class="comment">// 16 = 15 + 1</span>
<span id="L10902" class="ln"> 10902&nbsp;&nbsp;</span>
<span id="L10903" class="ln"> 10903&nbsp;&nbsp;</span><span class="comment">// PriorityWriteSchedulerConfig configures a priorityWriteScheduler.</span>
<span id="L10904" class="ln"> 10904&nbsp;&nbsp;</span>type http2PriorityWriteSchedulerConfig struct {
<span id="L10905" class="ln"> 10905&nbsp;&nbsp;</span>	<span class="comment">// MaxClosedNodesInTree controls the maximum number of closed streams to</span>
<span id="L10906" class="ln"> 10906&nbsp;&nbsp;</span>	<span class="comment">// retain in the priority tree. Setting this to zero saves a small amount</span>
<span id="L10907" class="ln"> 10907&nbsp;&nbsp;</span>	<span class="comment">// of memory at the cost of performance.</span>
<span id="L10908" class="ln"> 10908&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L10909" class="ln"> 10909&nbsp;&nbsp;</span>	<span class="comment">// See RFC 7540, Section 5.3.4:</span>
<span id="L10910" class="ln"> 10910&nbsp;&nbsp;</span>	<span class="comment">//   &#34;It is possible for a stream to become closed while prioritization</span>
<span id="L10911" class="ln"> 10911&nbsp;&nbsp;</span>	<span class="comment">//   information ... is in transit. ... This potentially creates suboptimal</span>
<span id="L10912" class="ln"> 10912&nbsp;&nbsp;</span>	<span class="comment">//   prioritization, since the stream could be given a priority that is</span>
<span id="L10913" class="ln"> 10913&nbsp;&nbsp;</span>	<span class="comment">//   different from what is intended. To avoid these problems, an endpoint</span>
<span id="L10914" class="ln"> 10914&nbsp;&nbsp;</span>	<span class="comment">//   SHOULD retain stream prioritization state for a period after streams</span>
<span id="L10915" class="ln"> 10915&nbsp;&nbsp;</span>	<span class="comment">//   become closed. The longer state is retained, the lower the chance that</span>
<span id="L10916" class="ln"> 10916&nbsp;&nbsp;</span>	<span class="comment">//   streams are assigned incorrect or default priority values.&#34;</span>
<span id="L10917" class="ln"> 10917&nbsp;&nbsp;</span>	MaxClosedNodesInTree int
<span id="L10918" class="ln"> 10918&nbsp;&nbsp;</span>
<span id="L10919" class="ln"> 10919&nbsp;&nbsp;</span>	<span class="comment">// MaxIdleNodesInTree controls the maximum number of idle streams to</span>
<span id="L10920" class="ln"> 10920&nbsp;&nbsp;</span>	<span class="comment">// retain in the priority tree. Setting this to zero saves a small amount</span>
<span id="L10921" class="ln"> 10921&nbsp;&nbsp;</span>	<span class="comment">// of memory at the cost of performance.</span>
<span id="L10922" class="ln"> 10922&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L10923" class="ln"> 10923&nbsp;&nbsp;</span>	<span class="comment">// See RFC 7540, Section 5.3.4:</span>
<span id="L10924" class="ln"> 10924&nbsp;&nbsp;</span>	<span class="comment">//   Similarly, streams that are in the &#34;idle&#34; state can be assigned</span>
<span id="L10925" class="ln"> 10925&nbsp;&nbsp;</span>	<span class="comment">//   priority or become a parent of other streams. This allows for the</span>
<span id="L10926" class="ln"> 10926&nbsp;&nbsp;</span>	<span class="comment">//   creation of a grouping node in the dependency tree, which enables</span>
<span id="L10927" class="ln"> 10927&nbsp;&nbsp;</span>	<span class="comment">//   more flexible expressions of priority. Idle streams begin with a</span>
<span id="L10928" class="ln"> 10928&nbsp;&nbsp;</span>	<span class="comment">//   default priority (Section 5.3.5).</span>
<span id="L10929" class="ln"> 10929&nbsp;&nbsp;</span>	MaxIdleNodesInTree int
<span id="L10930" class="ln"> 10930&nbsp;&nbsp;</span>
<span id="L10931" class="ln"> 10931&nbsp;&nbsp;</span>	<span class="comment">// ThrottleOutOfOrderWrites enables write throttling to help ensure that</span>
<span id="L10932" class="ln"> 10932&nbsp;&nbsp;</span>	<span class="comment">// data is delivered in priority order. This works around a race where</span>
<span id="L10933" class="ln"> 10933&nbsp;&nbsp;</span>	<span class="comment">// stream B depends on stream A and both streams are about to call Write</span>
<span id="L10934" class="ln"> 10934&nbsp;&nbsp;</span>	<span class="comment">// to queue DATA frames. If B wins the race, a naive scheduler would eagerly</span>
<span id="L10935" class="ln"> 10935&nbsp;&nbsp;</span>	<span class="comment">// write as much data from B as possible, but this is suboptimal because A</span>
<span id="L10936" class="ln"> 10936&nbsp;&nbsp;</span>	<span class="comment">// is a higher-priority stream. With throttling enabled, we write a small</span>
<span id="L10937" class="ln"> 10937&nbsp;&nbsp;</span>	<span class="comment">// amount of data from B to minimize the amount of bandwidth that B can</span>
<span id="L10938" class="ln"> 10938&nbsp;&nbsp;</span>	<span class="comment">// steal from A.</span>
<span id="L10939" class="ln"> 10939&nbsp;&nbsp;</span>	ThrottleOutOfOrderWrites bool
<span id="L10940" class="ln"> 10940&nbsp;&nbsp;</span>}
<span id="L10941" class="ln"> 10941&nbsp;&nbsp;</span>
<span id="L10942" class="ln"> 10942&nbsp;&nbsp;</span><span class="comment">// NewPriorityWriteScheduler constructs a WriteScheduler that schedules</span>
<span id="L10943" class="ln"> 10943&nbsp;&nbsp;</span><span class="comment">// frames by following HTTP/2 priorities as described in RFC 7540 Section 5.3.</span>
<span id="L10944" class="ln"> 10944&nbsp;&nbsp;</span><span class="comment">// If cfg is nil, default options are used.</span>
<span id="L10945" class="ln"> 10945&nbsp;&nbsp;</span>func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler {
<span id="L10946" class="ln"> 10946&nbsp;&nbsp;</span>	if cfg == nil {
<span id="L10947" class="ln"> 10947&nbsp;&nbsp;</span>		<span class="comment">// For justification of these defaults, see:</span>
<span id="L10948" class="ln"> 10948&nbsp;&nbsp;</span>		<span class="comment">// https://docs.google.com/document/d/1oLhNg1skaWD4_DtaoCxdSRN5erEXrH-KnLrMwEpOtFY</span>
<span id="L10949" class="ln"> 10949&nbsp;&nbsp;</span>		cfg = &amp;http2PriorityWriteSchedulerConfig{
<span id="L10950" class="ln"> 10950&nbsp;&nbsp;</span>			MaxClosedNodesInTree:     10,
<span id="L10951" class="ln"> 10951&nbsp;&nbsp;</span>			MaxIdleNodesInTree:       10,
<span id="L10952" class="ln"> 10952&nbsp;&nbsp;</span>			ThrottleOutOfOrderWrites: false,
<span id="L10953" class="ln"> 10953&nbsp;&nbsp;</span>		}
<span id="L10954" class="ln"> 10954&nbsp;&nbsp;</span>	}
<span id="L10955" class="ln"> 10955&nbsp;&nbsp;</span>
<span id="L10956" class="ln"> 10956&nbsp;&nbsp;</span>	ws := &amp;http2priorityWriteScheduler{
<span id="L10957" class="ln"> 10957&nbsp;&nbsp;</span>		nodes:                make(map[uint32]*http2priorityNode),
<span id="L10958" class="ln"> 10958&nbsp;&nbsp;</span>		maxClosedNodesInTree: cfg.MaxClosedNodesInTree,
<span id="L10959" class="ln"> 10959&nbsp;&nbsp;</span>		maxIdleNodesInTree:   cfg.MaxIdleNodesInTree,
<span id="L10960" class="ln"> 10960&nbsp;&nbsp;</span>		enableWriteThrottle:  cfg.ThrottleOutOfOrderWrites,
<span id="L10961" class="ln"> 10961&nbsp;&nbsp;</span>	}
<span id="L10962" class="ln"> 10962&nbsp;&nbsp;</span>	ws.nodes[0] = &amp;ws.root
<span id="L10963" class="ln"> 10963&nbsp;&nbsp;</span>	if cfg.ThrottleOutOfOrderWrites {
<span id="L10964" class="ln"> 10964&nbsp;&nbsp;</span>		ws.writeThrottleLimit = 1024
<span id="L10965" class="ln"> 10965&nbsp;&nbsp;</span>	} else {
<span id="L10966" class="ln"> 10966&nbsp;&nbsp;</span>		ws.writeThrottleLimit = math.MaxInt32
<span id="L10967" class="ln"> 10967&nbsp;&nbsp;</span>	}
<span id="L10968" class="ln"> 10968&nbsp;&nbsp;</span>	return ws
<span id="L10969" class="ln"> 10969&nbsp;&nbsp;</span>}
<span id="L10970" class="ln"> 10970&nbsp;&nbsp;</span>
<span id="L10971" class="ln"> 10971&nbsp;&nbsp;</span>type http2priorityNodeState int
<span id="L10972" class="ln"> 10972&nbsp;&nbsp;</span>
<span id="L10973" class="ln"> 10973&nbsp;&nbsp;</span>const (
<span id="L10974" class="ln"> 10974&nbsp;&nbsp;</span>	http2priorityNodeOpen http2priorityNodeState = iota
<span id="L10975" class="ln"> 10975&nbsp;&nbsp;</span>	http2priorityNodeClosed
<span id="L10976" class="ln"> 10976&nbsp;&nbsp;</span>	http2priorityNodeIdle
<span id="L10977" class="ln"> 10977&nbsp;&nbsp;</span>)
<span id="L10978" class="ln"> 10978&nbsp;&nbsp;</span>
<span id="L10979" class="ln"> 10979&nbsp;&nbsp;</span><span class="comment">// priorityNode is a node in an HTTP/2 priority tree.</span>
<span id="L10980" class="ln"> 10980&nbsp;&nbsp;</span><span class="comment">// Each node is associated with a single stream ID.</span>
<span id="L10981" class="ln"> 10981&nbsp;&nbsp;</span><span class="comment">// See RFC 7540, Section 5.3.</span>
<span id="L10982" class="ln"> 10982&nbsp;&nbsp;</span>type http2priorityNode struct {
<span id="L10983" class="ln"> 10983&nbsp;&nbsp;</span>	q            http2writeQueue        <span class="comment">// queue of pending frames to write</span>
<span id="L10984" class="ln"> 10984&nbsp;&nbsp;</span>	id           uint32                 <span class="comment">// id of the stream, or 0 for the root of the tree</span>
<span id="L10985" class="ln"> 10985&nbsp;&nbsp;</span>	weight       uint8                  <span class="comment">// the actual weight is weight+1, so the value is in [1,256]</span>
<span id="L10986" class="ln"> 10986&nbsp;&nbsp;</span>	state        http2priorityNodeState <span class="comment">// open | closed | idle</span>
<span id="L10987" class="ln"> 10987&nbsp;&nbsp;</span>	bytes        int64                  <span class="comment">// number of bytes written by this node, or 0 if closed</span>
<span id="L10988" class="ln"> 10988&nbsp;&nbsp;</span>	subtreeBytes int64                  <span class="comment">// sum(node.bytes) of all nodes in this subtree</span>
<span id="L10989" class="ln"> 10989&nbsp;&nbsp;</span>
<span id="L10990" class="ln"> 10990&nbsp;&nbsp;</span>	<span class="comment">// These links form the priority tree.</span>
<span id="L10991" class="ln"> 10991&nbsp;&nbsp;</span>	parent     *http2priorityNode
<span id="L10992" class="ln"> 10992&nbsp;&nbsp;</span>	kids       *http2priorityNode <span class="comment">// start of the kids list</span>
<span id="L10993" class="ln"> 10993&nbsp;&nbsp;</span>	prev, next *http2priorityNode <span class="comment">// doubly-linked list of siblings</span>
<span id="L10994" class="ln"> 10994&nbsp;&nbsp;</span>}
<span id="L10995" class="ln"> 10995&nbsp;&nbsp;</span>
<span id="L10996" class="ln"> 10996&nbsp;&nbsp;</span>func (n *http2priorityNode) setParent(parent *http2priorityNode) {
<span id="L10997" class="ln"> 10997&nbsp;&nbsp;</span>	if n == parent {
<span id="L10998" class="ln"> 10998&nbsp;&nbsp;</span>		panic(&#34;setParent to self&#34;)
<span id="L10999" class="ln"> 10999&nbsp;&nbsp;</span>	}
<span id="L11000" class="ln"> 11000&nbsp;&nbsp;</span>	if n.parent == parent {
<span id="L11001" class="ln"> 11001&nbsp;&nbsp;</span>		return
<span id="L11002" class="ln"> 11002&nbsp;&nbsp;</span>	}
<span id="L11003" class="ln"> 11003&nbsp;&nbsp;</span>	<span class="comment">// Unlink from current parent.</span>
<span id="L11004" class="ln"> 11004&nbsp;&nbsp;</span>	if parent := n.parent; parent != nil {
<span id="L11005" class="ln"> 11005&nbsp;&nbsp;</span>		if n.prev == nil {
<span id="L11006" class="ln"> 11006&nbsp;&nbsp;</span>			parent.kids = n.next
<span id="L11007" class="ln"> 11007&nbsp;&nbsp;</span>		} else {
<span id="L11008" class="ln"> 11008&nbsp;&nbsp;</span>			n.prev.next = n.next
<span id="L11009" class="ln"> 11009&nbsp;&nbsp;</span>		}
<span id="L11010" class="ln"> 11010&nbsp;&nbsp;</span>		if n.next != nil {
<span id="L11011" class="ln"> 11011&nbsp;&nbsp;</span>			n.next.prev = n.prev
<span id="L11012" class="ln"> 11012&nbsp;&nbsp;</span>		}
<span id="L11013" class="ln"> 11013&nbsp;&nbsp;</span>	}
<span id="L11014" class="ln"> 11014&nbsp;&nbsp;</span>	<span class="comment">// Link to new parent.</span>
<span id="L11015" class="ln"> 11015&nbsp;&nbsp;</span>	<span class="comment">// If parent=nil, remove n from the tree.</span>
<span id="L11016" class="ln"> 11016&nbsp;&nbsp;</span>	<span class="comment">// Always insert at the head of parent.kids (this is assumed by walkReadyInOrder).</span>
<span id="L11017" class="ln"> 11017&nbsp;&nbsp;</span>	n.parent = parent
<span id="L11018" class="ln"> 11018&nbsp;&nbsp;</span>	if parent == nil {
<span id="L11019" class="ln"> 11019&nbsp;&nbsp;</span>		n.next = nil
<span id="L11020" class="ln"> 11020&nbsp;&nbsp;</span>		n.prev = nil
<span id="L11021" class="ln"> 11021&nbsp;&nbsp;</span>	} else {
<span id="L11022" class="ln"> 11022&nbsp;&nbsp;</span>		n.next = parent.kids
<span id="L11023" class="ln"> 11023&nbsp;&nbsp;</span>		n.prev = nil
<span id="L11024" class="ln"> 11024&nbsp;&nbsp;</span>		if n.next != nil {
<span id="L11025" class="ln"> 11025&nbsp;&nbsp;</span>			n.next.prev = n
<span id="L11026" class="ln"> 11026&nbsp;&nbsp;</span>		}
<span id="L11027" class="ln"> 11027&nbsp;&nbsp;</span>		parent.kids = n
<span id="L11028" class="ln"> 11028&nbsp;&nbsp;</span>	}
<span id="L11029" class="ln"> 11029&nbsp;&nbsp;</span>}
<span id="L11030" class="ln"> 11030&nbsp;&nbsp;</span>
<span id="L11031" class="ln"> 11031&nbsp;&nbsp;</span>func (n *http2priorityNode) addBytes(b int64) {
<span id="L11032" class="ln"> 11032&nbsp;&nbsp;</span>	n.bytes += b
<span id="L11033" class="ln"> 11033&nbsp;&nbsp;</span>	for ; n != nil; n = n.parent {
<span id="L11034" class="ln"> 11034&nbsp;&nbsp;</span>		n.subtreeBytes += b
<span id="L11035" class="ln"> 11035&nbsp;&nbsp;</span>	}
<span id="L11036" class="ln"> 11036&nbsp;&nbsp;</span>}
<span id="L11037" class="ln"> 11037&nbsp;&nbsp;</span>
<span id="L11038" class="ln"> 11038&nbsp;&nbsp;</span><span class="comment">// walkReadyInOrder iterates over the tree in priority order, calling f for each node</span>
<span id="L11039" class="ln"> 11039&nbsp;&nbsp;</span><span class="comment">// with a non-empty write queue. When f returns true, this function returns true and the</span>
<span id="L11040" class="ln"> 11040&nbsp;&nbsp;</span><span class="comment">// walk halts. tmp is used as scratch space for sorting.</span>
<span id="L11041" class="ln"> 11041&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L11042" class="ln"> 11042&nbsp;&nbsp;</span><span class="comment">// f(n, openParent) takes two arguments: the node to visit, n, and a bool that is true</span>
<span id="L11043" class="ln"> 11043&nbsp;&nbsp;</span><span class="comment">// if any ancestor p of n is still open (ignoring the root node).</span>
<span id="L11044" class="ln"> 11044&nbsp;&nbsp;</span>func (n *http2priorityNode) walkReadyInOrder(openParent bool, tmp *[]*http2priorityNode, f func(*http2priorityNode, bool) bool) bool {
<span id="L11045" class="ln"> 11045&nbsp;&nbsp;</span>	if !n.q.empty() &amp;&amp; f(n, openParent) {
<span id="L11046" class="ln"> 11046&nbsp;&nbsp;</span>		return true
<span id="L11047" class="ln"> 11047&nbsp;&nbsp;</span>	}
<span id="L11048" class="ln"> 11048&nbsp;&nbsp;</span>	if n.kids == nil {
<span id="L11049" class="ln"> 11049&nbsp;&nbsp;</span>		return false
<span id="L11050" class="ln"> 11050&nbsp;&nbsp;</span>	}
<span id="L11051" class="ln"> 11051&nbsp;&nbsp;</span>
<span id="L11052" class="ln"> 11052&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t consider the root &#34;open&#34; when updating openParent since</span>
<span id="L11053" class="ln"> 11053&nbsp;&nbsp;</span>	<span class="comment">// we can&#39;t send data frames on the root stream (only control frames).</span>
<span id="L11054" class="ln"> 11054&nbsp;&nbsp;</span>	if n.id != 0 {
<span id="L11055" class="ln"> 11055&nbsp;&nbsp;</span>		openParent = openParent || (n.state == http2priorityNodeOpen)
<span id="L11056" class="ln"> 11056&nbsp;&nbsp;</span>	}
<span id="L11057" class="ln"> 11057&nbsp;&nbsp;</span>
<span id="L11058" class="ln"> 11058&nbsp;&nbsp;</span>	<span class="comment">// Common case: only one kid or all kids have the same weight.</span>
<span id="L11059" class="ln"> 11059&nbsp;&nbsp;</span>	<span class="comment">// Some clients don&#39;t use weights; other clients (like web browsers)</span>
<span id="L11060" class="ln"> 11060&nbsp;&nbsp;</span>	<span class="comment">// use mostly-linear priority trees.</span>
<span id="L11061" class="ln"> 11061&nbsp;&nbsp;</span>	w := n.kids.weight
<span id="L11062" class="ln"> 11062&nbsp;&nbsp;</span>	needSort := false
<span id="L11063" class="ln"> 11063&nbsp;&nbsp;</span>	for k := n.kids.next; k != nil; k = k.next {
<span id="L11064" class="ln"> 11064&nbsp;&nbsp;</span>		if k.weight != w {
<span id="L11065" class="ln"> 11065&nbsp;&nbsp;</span>			needSort = true
<span id="L11066" class="ln"> 11066&nbsp;&nbsp;</span>			break
<span id="L11067" class="ln"> 11067&nbsp;&nbsp;</span>		}
<span id="L11068" class="ln"> 11068&nbsp;&nbsp;</span>	}
<span id="L11069" class="ln"> 11069&nbsp;&nbsp;</span>	if !needSort {
<span id="L11070" class="ln"> 11070&nbsp;&nbsp;</span>		for k := n.kids; k != nil; k = k.next {
<span id="L11071" class="ln"> 11071&nbsp;&nbsp;</span>			if k.walkReadyInOrder(openParent, tmp, f) {
<span id="L11072" class="ln"> 11072&nbsp;&nbsp;</span>				return true
<span id="L11073" class="ln"> 11073&nbsp;&nbsp;</span>			}
<span id="L11074" class="ln"> 11074&nbsp;&nbsp;</span>		}
<span id="L11075" class="ln"> 11075&nbsp;&nbsp;</span>		return false
<span id="L11076" class="ln"> 11076&nbsp;&nbsp;</span>	}
<span id="L11077" class="ln"> 11077&nbsp;&nbsp;</span>
<span id="L11078" class="ln"> 11078&nbsp;&nbsp;</span>	<span class="comment">// Uncommon case: sort the child nodes. We remove the kids from the parent,</span>
<span id="L11079" class="ln"> 11079&nbsp;&nbsp;</span>	<span class="comment">// then re-insert after sorting so we can reuse tmp for future sort calls.</span>
<span id="L11080" class="ln"> 11080&nbsp;&nbsp;</span>	*tmp = (*tmp)[:0]
<span id="L11081" class="ln"> 11081&nbsp;&nbsp;</span>	for n.kids != nil {
<span id="L11082" class="ln"> 11082&nbsp;&nbsp;</span>		*tmp = append(*tmp, n.kids)
<span id="L11083" class="ln"> 11083&nbsp;&nbsp;</span>		n.kids.setParent(nil)
<span id="L11084" class="ln"> 11084&nbsp;&nbsp;</span>	}
<span id="L11085" class="ln"> 11085&nbsp;&nbsp;</span>	sort.Sort(http2sortPriorityNodeSiblings(*tmp))
<span id="L11086" class="ln"> 11086&nbsp;&nbsp;</span>	for i := len(*tmp) - 1; i &gt;= 0; i-- {
<span id="L11087" class="ln"> 11087&nbsp;&nbsp;</span>		(*tmp)[i].setParent(n) <span class="comment">// setParent inserts at the head of n.kids</span>
<span id="L11088" class="ln"> 11088&nbsp;&nbsp;</span>	}
<span id="L11089" class="ln"> 11089&nbsp;&nbsp;</span>	for k := n.kids; k != nil; k = k.next {
<span id="L11090" class="ln"> 11090&nbsp;&nbsp;</span>		if k.walkReadyInOrder(openParent, tmp, f) {
<span id="L11091" class="ln"> 11091&nbsp;&nbsp;</span>			return true
<span id="L11092" class="ln"> 11092&nbsp;&nbsp;</span>		}
<span id="L11093" class="ln"> 11093&nbsp;&nbsp;</span>	}
<span id="L11094" class="ln"> 11094&nbsp;&nbsp;</span>	return false
<span id="L11095" class="ln"> 11095&nbsp;&nbsp;</span>}
<span id="L11096" class="ln"> 11096&nbsp;&nbsp;</span>
<span id="L11097" class="ln"> 11097&nbsp;&nbsp;</span>type http2sortPriorityNodeSiblings []*http2priorityNode
<span id="L11098" class="ln"> 11098&nbsp;&nbsp;</span>
<span id="L11099" class="ln"> 11099&nbsp;&nbsp;</span>func (z http2sortPriorityNodeSiblings) Len() int { return len(z) }
<span id="L11100" class="ln"> 11100&nbsp;&nbsp;</span>
<span id="L11101" class="ln"> 11101&nbsp;&nbsp;</span>func (z http2sortPriorityNodeSiblings) Swap(i, k int) { z[i], z[k] = z[k], z[i] }
<span id="L11102" class="ln"> 11102&nbsp;&nbsp;</span>
<span id="L11103" class="ln"> 11103&nbsp;&nbsp;</span>func (z http2sortPriorityNodeSiblings) Less(i, k int) bool {
<span id="L11104" class="ln"> 11104&nbsp;&nbsp;</span>	<span class="comment">// Prefer the subtree that has sent fewer bytes relative to its weight.</span>
<span id="L11105" class="ln"> 11105&nbsp;&nbsp;</span>	<span class="comment">// See sections 5.3.2 and 5.3.4.</span>
<span id="L11106" class="ln"> 11106&nbsp;&nbsp;</span>	wi, bi := float64(z[i].weight+1), float64(z[i].subtreeBytes)
<span id="L11107" class="ln"> 11107&nbsp;&nbsp;</span>	wk, bk := float64(z[k].weight+1), float64(z[k].subtreeBytes)
<span id="L11108" class="ln"> 11108&nbsp;&nbsp;</span>	if bi == 0 &amp;&amp; bk == 0 {
<span id="L11109" class="ln"> 11109&nbsp;&nbsp;</span>		return wi &gt;= wk
<span id="L11110" class="ln"> 11110&nbsp;&nbsp;</span>	}
<span id="L11111" class="ln"> 11111&nbsp;&nbsp;</span>	if bk == 0 {
<span id="L11112" class="ln"> 11112&nbsp;&nbsp;</span>		return false
<span id="L11113" class="ln"> 11113&nbsp;&nbsp;</span>	}
<span id="L11114" class="ln"> 11114&nbsp;&nbsp;</span>	return bi/bk &lt;= wi/wk
<span id="L11115" class="ln"> 11115&nbsp;&nbsp;</span>}
<span id="L11116" class="ln"> 11116&nbsp;&nbsp;</span>
<span id="L11117" class="ln"> 11117&nbsp;&nbsp;</span>type http2priorityWriteScheduler struct {
<span id="L11118" class="ln"> 11118&nbsp;&nbsp;</span>	<span class="comment">// root is the root of the priority tree, where root.id = 0.</span>
<span id="L11119" class="ln"> 11119&nbsp;&nbsp;</span>	<span class="comment">// The root queues control frames that are not associated with any stream.</span>
<span id="L11120" class="ln"> 11120&nbsp;&nbsp;</span>	root http2priorityNode
<span id="L11121" class="ln"> 11121&nbsp;&nbsp;</span>
<span id="L11122" class="ln"> 11122&nbsp;&nbsp;</span>	<span class="comment">// nodes maps stream ids to priority tree nodes.</span>
<span id="L11123" class="ln"> 11123&nbsp;&nbsp;</span>	nodes map[uint32]*http2priorityNode
<span id="L11124" class="ln"> 11124&nbsp;&nbsp;</span>
<span id="L11125" class="ln"> 11125&nbsp;&nbsp;</span>	<span class="comment">// maxID is the maximum stream id in nodes.</span>
<span id="L11126" class="ln"> 11126&nbsp;&nbsp;</span>	maxID uint32
<span id="L11127" class="ln"> 11127&nbsp;&nbsp;</span>
<span id="L11128" class="ln"> 11128&nbsp;&nbsp;</span>	<span class="comment">// lists of nodes that have been closed or are idle, but are kept in</span>
<span id="L11129" class="ln"> 11129&nbsp;&nbsp;</span>	<span class="comment">// the tree for improved prioritization. When the lengths exceed either</span>
<span id="L11130" class="ln"> 11130&nbsp;&nbsp;</span>	<span class="comment">// maxClosedNodesInTree or maxIdleNodesInTree, old nodes are discarded.</span>
<span id="L11131" class="ln"> 11131&nbsp;&nbsp;</span>	closedNodes, idleNodes []*http2priorityNode
<span id="L11132" class="ln"> 11132&nbsp;&nbsp;</span>
<span id="L11133" class="ln"> 11133&nbsp;&nbsp;</span>	<span class="comment">// From the config.</span>
<span id="L11134" class="ln"> 11134&nbsp;&nbsp;</span>	maxClosedNodesInTree int
<span id="L11135" class="ln"> 11135&nbsp;&nbsp;</span>	maxIdleNodesInTree   int
<span id="L11136" class="ln"> 11136&nbsp;&nbsp;</span>	writeThrottleLimit   int32
<span id="L11137" class="ln"> 11137&nbsp;&nbsp;</span>	enableWriteThrottle  bool
<span id="L11138" class="ln"> 11138&nbsp;&nbsp;</span>
<span id="L11139" class="ln"> 11139&nbsp;&nbsp;</span>	<span class="comment">// tmp is scratch space for priorityNode.walkReadyInOrder to reduce allocations.</span>
<span id="L11140" class="ln"> 11140&nbsp;&nbsp;</span>	tmp []*http2priorityNode
<span id="L11141" class="ln"> 11141&nbsp;&nbsp;</span>
<span id="L11142" class="ln"> 11142&nbsp;&nbsp;</span>	<span class="comment">// pool of empty queues for reuse.</span>
<span id="L11143" class="ln"> 11143&nbsp;&nbsp;</span>	queuePool http2writeQueuePool
<span id="L11144" class="ln"> 11144&nbsp;&nbsp;</span>}
<span id="L11145" class="ln"> 11145&nbsp;&nbsp;</span>
<span id="L11146" class="ln"> 11146&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions) {
<span id="L11147" class="ln"> 11147&nbsp;&nbsp;</span>	<span class="comment">// The stream may be currently idle but cannot be opened or closed.</span>
<span id="L11148" class="ln"> 11148&nbsp;&nbsp;</span>	if curr := ws.nodes[streamID]; curr != nil {
<span id="L11149" class="ln"> 11149&nbsp;&nbsp;</span>		if curr.state != http2priorityNodeIdle {
<span id="L11150" class="ln"> 11150&nbsp;&nbsp;</span>			panic(fmt.Sprintf(&#34;stream %d already opened&#34;, streamID))
<span id="L11151" class="ln"> 11151&nbsp;&nbsp;</span>		}
<span id="L11152" class="ln"> 11152&nbsp;&nbsp;</span>		curr.state = http2priorityNodeOpen
<span id="L11153" class="ln"> 11153&nbsp;&nbsp;</span>		return
<span id="L11154" class="ln"> 11154&nbsp;&nbsp;</span>	}
<span id="L11155" class="ln"> 11155&nbsp;&nbsp;</span>
<span id="L11156" class="ln"> 11156&nbsp;&nbsp;</span>	<span class="comment">// RFC 7540, Section 5.3.5:</span>
<span id="L11157" class="ln"> 11157&nbsp;&nbsp;</span>	<span class="comment">//  &#34;All streams are initially assigned a non-exclusive dependency on stream 0x0.</span>
<span id="L11158" class="ln"> 11158&nbsp;&nbsp;</span>	<span class="comment">//  Pushed streams initially depend on their associated stream. In both cases,</span>
<span id="L11159" class="ln"> 11159&nbsp;&nbsp;</span>	<span class="comment">//  streams are assigned a default weight of 16.&#34;</span>
<span id="L11160" class="ln"> 11160&nbsp;&nbsp;</span>	parent := ws.nodes[options.PusherID]
<span id="L11161" class="ln"> 11161&nbsp;&nbsp;</span>	if parent == nil {
<span id="L11162" class="ln"> 11162&nbsp;&nbsp;</span>		parent = &amp;ws.root
<span id="L11163" class="ln"> 11163&nbsp;&nbsp;</span>	}
<span id="L11164" class="ln"> 11164&nbsp;&nbsp;</span>	n := &amp;http2priorityNode{
<span id="L11165" class="ln"> 11165&nbsp;&nbsp;</span>		q:      *ws.queuePool.get(),
<span id="L11166" class="ln"> 11166&nbsp;&nbsp;</span>		id:     streamID,
<span id="L11167" class="ln"> 11167&nbsp;&nbsp;</span>		weight: http2priorityDefaultWeight,
<span id="L11168" class="ln"> 11168&nbsp;&nbsp;</span>		state:  http2priorityNodeOpen,
<span id="L11169" class="ln"> 11169&nbsp;&nbsp;</span>	}
<span id="L11170" class="ln"> 11170&nbsp;&nbsp;</span>	n.setParent(parent)
<span id="L11171" class="ln"> 11171&nbsp;&nbsp;</span>	ws.nodes[streamID] = n
<span id="L11172" class="ln"> 11172&nbsp;&nbsp;</span>	if streamID &gt; ws.maxID {
<span id="L11173" class="ln"> 11173&nbsp;&nbsp;</span>		ws.maxID = streamID
<span id="L11174" class="ln"> 11174&nbsp;&nbsp;</span>	}
<span id="L11175" class="ln"> 11175&nbsp;&nbsp;</span>}
<span id="L11176" class="ln"> 11176&nbsp;&nbsp;</span>
<span id="L11177" class="ln"> 11177&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) CloseStream(streamID uint32) {
<span id="L11178" class="ln"> 11178&nbsp;&nbsp;</span>	if streamID == 0 {
<span id="L11179" class="ln"> 11179&nbsp;&nbsp;</span>		panic(&#34;violation of WriteScheduler interface: cannot close stream 0&#34;)
<span id="L11180" class="ln"> 11180&nbsp;&nbsp;</span>	}
<span id="L11181" class="ln"> 11181&nbsp;&nbsp;</span>	if ws.nodes[streamID] == nil {
<span id="L11182" class="ln"> 11182&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;violation of WriteScheduler interface: unknown stream %d&#34;, streamID))
<span id="L11183" class="ln"> 11183&nbsp;&nbsp;</span>	}
<span id="L11184" class="ln"> 11184&nbsp;&nbsp;</span>	if ws.nodes[streamID].state != http2priorityNodeOpen {
<span id="L11185" class="ln"> 11185&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;violation of WriteScheduler interface: stream %d already closed&#34;, streamID))
<span id="L11186" class="ln"> 11186&nbsp;&nbsp;</span>	}
<span id="L11187" class="ln"> 11187&nbsp;&nbsp;</span>
<span id="L11188" class="ln"> 11188&nbsp;&nbsp;</span>	n := ws.nodes[streamID]
<span id="L11189" class="ln"> 11189&nbsp;&nbsp;</span>	n.state = http2priorityNodeClosed
<span id="L11190" class="ln"> 11190&nbsp;&nbsp;</span>	n.addBytes(-n.bytes)
<span id="L11191" class="ln"> 11191&nbsp;&nbsp;</span>
<span id="L11192" class="ln"> 11192&nbsp;&nbsp;</span>	q := n.q
<span id="L11193" class="ln"> 11193&nbsp;&nbsp;</span>	ws.queuePool.put(&amp;q)
<span id="L11194" class="ln"> 11194&nbsp;&nbsp;</span>	n.q.s = nil
<span id="L11195" class="ln"> 11195&nbsp;&nbsp;</span>	if ws.maxClosedNodesInTree &gt; 0 {
<span id="L11196" class="ln"> 11196&nbsp;&nbsp;</span>		ws.addClosedOrIdleNode(&amp;ws.closedNodes, ws.maxClosedNodesInTree, n)
<span id="L11197" class="ln"> 11197&nbsp;&nbsp;</span>	} else {
<span id="L11198" class="ln"> 11198&nbsp;&nbsp;</span>		ws.removeNode(n)
<span id="L11199" class="ln"> 11199&nbsp;&nbsp;</span>	}
<span id="L11200" class="ln"> 11200&nbsp;&nbsp;</span>}
<span id="L11201" class="ln"> 11201&nbsp;&nbsp;</span>
<span id="L11202" class="ln"> 11202&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam) {
<span id="L11203" class="ln"> 11203&nbsp;&nbsp;</span>	if streamID == 0 {
<span id="L11204" class="ln"> 11204&nbsp;&nbsp;</span>		panic(&#34;adjustPriority on root&#34;)
<span id="L11205" class="ln"> 11205&nbsp;&nbsp;</span>	}
<span id="L11206" class="ln"> 11206&nbsp;&nbsp;</span>
<span id="L11207" class="ln"> 11207&nbsp;&nbsp;</span>	<span class="comment">// If streamID does not exist, there are two cases:</span>
<span id="L11208" class="ln"> 11208&nbsp;&nbsp;</span>	<span class="comment">// - A closed stream that has been removed (this will have ID &lt;= maxID)</span>
<span id="L11209" class="ln"> 11209&nbsp;&nbsp;</span>	<span class="comment">// - An idle stream that is being used for &#34;grouping&#34; (this will have ID &gt; maxID)</span>
<span id="L11210" class="ln"> 11210&nbsp;&nbsp;</span>	n := ws.nodes[streamID]
<span id="L11211" class="ln"> 11211&nbsp;&nbsp;</span>	if n == nil {
<span id="L11212" class="ln"> 11212&nbsp;&nbsp;</span>		if streamID &lt;= ws.maxID || ws.maxIdleNodesInTree == 0 {
<span id="L11213" class="ln"> 11213&nbsp;&nbsp;</span>			return
<span id="L11214" class="ln"> 11214&nbsp;&nbsp;</span>		}
<span id="L11215" class="ln"> 11215&nbsp;&nbsp;</span>		ws.maxID = streamID
<span id="L11216" class="ln"> 11216&nbsp;&nbsp;</span>		n = &amp;http2priorityNode{
<span id="L11217" class="ln"> 11217&nbsp;&nbsp;</span>			q:      *ws.queuePool.get(),
<span id="L11218" class="ln"> 11218&nbsp;&nbsp;</span>			id:     streamID,
<span id="L11219" class="ln"> 11219&nbsp;&nbsp;</span>			weight: http2priorityDefaultWeight,
<span id="L11220" class="ln"> 11220&nbsp;&nbsp;</span>			state:  http2priorityNodeIdle,
<span id="L11221" class="ln"> 11221&nbsp;&nbsp;</span>		}
<span id="L11222" class="ln"> 11222&nbsp;&nbsp;</span>		n.setParent(&amp;ws.root)
<span id="L11223" class="ln"> 11223&nbsp;&nbsp;</span>		ws.nodes[streamID] = n
<span id="L11224" class="ln"> 11224&nbsp;&nbsp;</span>		ws.addClosedOrIdleNode(&amp;ws.idleNodes, ws.maxIdleNodesInTree, n)
<span id="L11225" class="ln"> 11225&nbsp;&nbsp;</span>	}
<span id="L11226" class="ln"> 11226&nbsp;&nbsp;</span>
<span id="L11227" class="ln"> 11227&nbsp;&nbsp;</span>	<span class="comment">// Section 5.3.1: A dependency on a stream that is not currently in the tree</span>
<span id="L11228" class="ln"> 11228&nbsp;&nbsp;</span>	<span class="comment">// results in that stream being given a default priority (Section 5.3.5).</span>
<span id="L11229" class="ln"> 11229&nbsp;&nbsp;</span>	parent := ws.nodes[priority.StreamDep]
<span id="L11230" class="ln"> 11230&nbsp;&nbsp;</span>	if parent == nil {
<span id="L11231" class="ln"> 11231&nbsp;&nbsp;</span>		n.setParent(&amp;ws.root)
<span id="L11232" class="ln"> 11232&nbsp;&nbsp;</span>		n.weight = http2priorityDefaultWeight
<span id="L11233" class="ln"> 11233&nbsp;&nbsp;</span>		return
<span id="L11234" class="ln"> 11234&nbsp;&nbsp;</span>	}
<span id="L11235" class="ln"> 11235&nbsp;&nbsp;</span>
<span id="L11236" class="ln"> 11236&nbsp;&nbsp;</span>	<span class="comment">// Ignore if the client tries to make a node its own parent.</span>
<span id="L11237" class="ln"> 11237&nbsp;&nbsp;</span>	if n == parent {
<span id="L11238" class="ln"> 11238&nbsp;&nbsp;</span>		return
<span id="L11239" class="ln"> 11239&nbsp;&nbsp;</span>	}
<span id="L11240" class="ln"> 11240&nbsp;&nbsp;</span>
<span id="L11241" class="ln"> 11241&nbsp;&nbsp;</span>	<span class="comment">// Section 5.3.3:</span>
<span id="L11242" class="ln"> 11242&nbsp;&nbsp;</span>	<span class="comment">//   &#34;If a stream is made dependent on one of its own dependencies, the</span>
<span id="L11243" class="ln"> 11243&nbsp;&nbsp;</span>	<span class="comment">//   formerly dependent stream is first moved to be dependent on the</span>
<span id="L11244" class="ln"> 11244&nbsp;&nbsp;</span>	<span class="comment">//   reprioritized stream&#39;s previous parent. The moved dependency retains</span>
<span id="L11245" class="ln"> 11245&nbsp;&nbsp;</span>	<span class="comment">//   its weight.&#34;</span>
<span id="L11246" class="ln"> 11246&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L11247" class="ln"> 11247&nbsp;&nbsp;</span>	<span class="comment">// That is: if parent depends on n, move parent to depend on n.parent.</span>
<span id="L11248" class="ln"> 11248&nbsp;&nbsp;</span>	for x := parent.parent; x != nil; x = x.parent {
<span id="L11249" class="ln"> 11249&nbsp;&nbsp;</span>		if x == n {
<span id="L11250" class="ln"> 11250&nbsp;&nbsp;</span>			parent.setParent(n.parent)
<span id="L11251" class="ln"> 11251&nbsp;&nbsp;</span>			break
<span id="L11252" class="ln"> 11252&nbsp;&nbsp;</span>		}
<span id="L11253" class="ln"> 11253&nbsp;&nbsp;</span>	}
<span id="L11254" class="ln"> 11254&nbsp;&nbsp;</span>
<span id="L11255" class="ln"> 11255&nbsp;&nbsp;</span>	<span class="comment">// Section 5.3.3: The exclusive flag causes the stream to become the sole</span>
<span id="L11256" class="ln"> 11256&nbsp;&nbsp;</span>	<span class="comment">// dependency of its parent stream, causing other dependencies to become</span>
<span id="L11257" class="ln"> 11257&nbsp;&nbsp;</span>	<span class="comment">// dependent on the exclusive stream.</span>
<span id="L11258" class="ln"> 11258&nbsp;&nbsp;</span>	if priority.Exclusive {
<span id="L11259" class="ln"> 11259&nbsp;&nbsp;</span>		k := parent.kids
<span id="L11260" class="ln"> 11260&nbsp;&nbsp;</span>		for k != nil {
<span id="L11261" class="ln"> 11261&nbsp;&nbsp;</span>			next := k.next
<span id="L11262" class="ln"> 11262&nbsp;&nbsp;</span>			if k != n {
<span id="L11263" class="ln"> 11263&nbsp;&nbsp;</span>				k.setParent(n)
<span id="L11264" class="ln"> 11264&nbsp;&nbsp;</span>			}
<span id="L11265" class="ln"> 11265&nbsp;&nbsp;</span>			k = next
<span id="L11266" class="ln"> 11266&nbsp;&nbsp;</span>		}
<span id="L11267" class="ln"> 11267&nbsp;&nbsp;</span>	}
<span id="L11268" class="ln"> 11268&nbsp;&nbsp;</span>
<span id="L11269" class="ln"> 11269&nbsp;&nbsp;</span>	n.setParent(parent)
<span id="L11270" class="ln"> 11270&nbsp;&nbsp;</span>	n.weight = priority.Weight
<span id="L11271" class="ln"> 11271&nbsp;&nbsp;</span>}
<span id="L11272" class="ln"> 11272&nbsp;&nbsp;</span>
<span id="L11273" class="ln"> 11273&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) Push(wr http2FrameWriteRequest) {
<span id="L11274" class="ln"> 11274&nbsp;&nbsp;</span>	var n *http2priorityNode
<span id="L11275" class="ln"> 11275&nbsp;&nbsp;</span>	if wr.isControl() {
<span id="L11276" class="ln"> 11276&nbsp;&nbsp;</span>		n = &amp;ws.root
<span id="L11277" class="ln"> 11277&nbsp;&nbsp;</span>	} else {
<span id="L11278" class="ln"> 11278&nbsp;&nbsp;</span>		id := wr.StreamID()
<span id="L11279" class="ln"> 11279&nbsp;&nbsp;</span>		n = ws.nodes[id]
<span id="L11280" class="ln"> 11280&nbsp;&nbsp;</span>		if n == nil {
<span id="L11281" class="ln"> 11281&nbsp;&nbsp;</span>			<span class="comment">// id is an idle or closed stream. wr should not be a HEADERS or</span>
<span id="L11282" class="ln"> 11282&nbsp;&nbsp;</span>			<span class="comment">// DATA frame. In other case, we push wr onto the root, rather</span>
<span id="L11283" class="ln"> 11283&nbsp;&nbsp;</span>			<span class="comment">// than creating a new priorityNode.</span>
<span id="L11284" class="ln"> 11284&nbsp;&nbsp;</span>			if wr.DataSize() &gt; 0 {
<span id="L11285" class="ln"> 11285&nbsp;&nbsp;</span>				panic(&#34;add DATA on non-open stream&#34;)
<span id="L11286" class="ln"> 11286&nbsp;&nbsp;</span>			}
<span id="L11287" class="ln"> 11287&nbsp;&nbsp;</span>			n = &amp;ws.root
<span id="L11288" class="ln"> 11288&nbsp;&nbsp;</span>		}
<span id="L11289" class="ln"> 11289&nbsp;&nbsp;</span>	}
<span id="L11290" class="ln"> 11290&nbsp;&nbsp;</span>	n.q.push(wr)
<span id="L11291" class="ln"> 11291&nbsp;&nbsp;</span>}
<span id="L11292" class="ln"> 11292&nbsp;&nbsp;</span>
<span id="L11293" class="ln"> 11293&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) Pop() (wr http2FrameWriteRequest, ok bool) {
<span id="L11294" class="ln"> 11294&nbsp;&nbsp;</span>	ws.root.walkReadyInOrder(false, &amp;ws.tmp, func(n *http2priorityNode, openParent bool) bool {
<span id="L11295" class="ln"> 11295&nbsp;&nbsp;</span>		limit := int32(math.MaxInt32)
<span id="L11296" class="ln"> 11296&nbsp;&nbsp;</span>		if openParent {
<span id="L11297" class="ln"> 11297&nbsp;&nbsp;</span>			limit = ws.writeThrottleLimit
<span id="L11298" class="ln"> 11298&nbsp;&nbsp;</span>		}
<span id="L11299" class="ln"> 11299&nbsp;&nbsp;</span>		wr, ok = n.q.consume(limit)
<span id="L11300" class="ln"> 11300&nbsp;&nbsp;</span>		if !ok {
<span id="L11301" class="ln"> 11301&nbsp;&nbsp;</span>			return false
<span id="L11302" class="ln"> 11302&nbsp;&nbsp;</span>		}
<span id="L11303" class="ln"> 11303&nbsp;&nbsp;</span>		n.addBytes(int64(wr.DataSize()))
<span id="L11304" class="ln"> 11304&nbsp;&nbsp;</span>		<span class="comment">// If B depends on A and B continuously has data available but A</span>
<span id="L11305" class="ln"> 11305&nbsp;&nbsp;</span>		<span class="comment">// does not, gradually increase the throttling limit to allow B to</span>
<span id="L11306" class="ln"> 11306&nbsp;&nbsp;</span>		<span class="comment">// steal more and more bandwidth from A.</span>
<span id="L11307" class="ln"> 11307&nbsp;&nbsp;</span>		if openParent {
<span id="L11308" class="ln"> 11308&nbsp;&nbsp;</span>			ws.writeThrottleLimit += 1024
<span id="L11309" class="ln"> 11309&nbsp;&nbsp;</span>			if ws.writeThrottleLimit &lt; 0 {
<span id="L11310" class="ln"> 11310&nbsp;&nbsp;</span>				ws.writeThrottleLimit = math.MaxInt32
<span id="L11311" class="ln"> 11311&nbsp;&nbsp;</span>			}
<span id="L11312" class="ln"> 11312&nbsp;&nbsp;</span>		} else if ws.enableWriteThrottle {
<span id="L11313" class="ln"> 11313&nbsp;&nbsp;</span>			ws.writeThrottleLimit = 1024
<span id="L11314" class="ln"> 11314&nbsp;&nbsp;</span>		}
<span id="L11315" class="ln"> 11315&nbsp;&nbsp;</span>		return true
<span id="L11316" class="ln"> 11316&nbsp;&nbsp;</span>	})
<span id="L11317" class="ln"> 11317&nbsp;&nbsp;</span>	return wr, ok
<span id="L11318" class="ln"> 11318&nbsp;&nbsp;</span>}
<span id="L11319" class="ln"> 11319&nbsp;&nbsp;</span>
<span id="L11320" class="ln"> 11320&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) addClosedOrIdleNode(list *[]*http2priorityNode, maxSize int, n *http2priorityNode) {
<span id="L11321" class="ln"> 11321&nbsp;&nbsp;</span>	if maxSize == 0 {
<span id="L11322" class="ln"> 11322&nbsp;&nbsp;</span>		return
<span id="L11323" class="ln"> 11323&nbsp;&nbsp;</span>	}
<span id="L11324" class="ln"> 11324&nbsp;&nbsp;</span>	if len(*list) == maxSize {
<span id="L11325" class="ln"> 11325&nbsp;&nbsp;</span>		<span class="comment">// Remove the oldest node, then shift left.</span>
<span id="L11326" class="ln"> 11326&nbsp;&nbsp;</span>		ws.removeNode((*list)[0])
<span id="L11327" class="ln"> 11327&nbsp;&nbsp;</span>		x := (*list)[1:]
<span id="L11328" class="ln"> 11328&nbsp;&nbsp;</span>		copy(*list, x)
<span id="L11329" class="ln"> 11329&nbsp;&nbsp;</span>		*list = (*list)[:len(x)]
<span id="L11330" class="ln"> 11330&nbsp;&nbsp;</span>	}
<span id="L11331" class="ln"> 11331&nbsp;&nbsp;</span>	*list = append(*list, n)
<span id="L11332" class="ln"> 11332&nbsp;&nbsp;</span>}
<span id="L11333" class="ln"> 11333&nbsp;&nbsp;</span>
<span id="L11334" class="ln"> 11334&nbsp;&nbsp;</span>func (ws *http2priorityWriteScheduler) removeNode(n *http2priorityNode) {
<span id="L11335" class="ln"> 11335&nbsp;&nbsp;</span>	for k := n.kids; k != nil; k = k.next {
<span id="L11336" class="ln"> 11336&nbsp;&nbsp;</span>		k.setParent(n.parent)
<span id="L11337" class="ln"> 11337&nbsp;&nbsp;</span>	}
<span id="L11338" class="ln"> 11338&nbsp;&nbsp;</span>	n.setParent(nil)
<span id="L11339" class="ln"> 11339&nbsp;&nbsp;</span>	delete(ws.nodes, n.id)
<span id="L11340" class="ln"> 11340&nbsp;&nbsp;</span>}
<span id="L11341" class="ln"> 11341&nbsp;&nbsp;</span>
<span id="L11342" class="ln"> 11342&nbsp;&nbsp;</span><span class="comment">// NewRandomWriteScheduler constructs a WriteScheduler that ignores HTTP/2</span>
<span id="L11343" class="ln"> 11343&nbsp;&nbsp;</span><span class="comment">// priorities. Control frames like SETTINGS and PING are written before DATA</span>
<span id="L11344" class="ln"> 11344&nbsp;&nbsp;</span><span class="comment">// frames, but if no control frames are queued and multiple streams have queued</span>
<span id="L11345" class="ln"> 11345&nbsp;&nbsp;</span><span class="comment">// HEADERS or DATA frames, Pop selects a ready stream arbitrarily.</span>
<span id="L11346" class="ln"> 11346&nbsp;&nbsp;</span>func http2NewRandomWriteScheduler() http2WriteScheduler {
<span id="L11347" class="ln"> 11347&nbsp;&nbsp;</span>	return &amp;http2randomWriteScheduler{sq: make(map[uint32]*http2writeQueue)}
<span id="L11348" class="ln"> 11348&nbsp;&nbsp;</span>}
<span id="L11349" class="ln"> 11349&nbsp;&nbsp;</span>
<span id="L11350" class="ln"> 11350&nbsp;&nbsp;</span>type http2randomWriteScheduler struct {
<span id="L11351" class="ln"> 11351&nbsp;&nbsp;</span>	<span class="comment">// zero are frames not associated with a specific stream.</span>
<span id="L11352" class="ln"> 11352&nbsp;&nbsp;</span>	zero http2writeQueue
<span id="L11353" class="ln"> 11353&nbsp;&nbsp;</span>
<span id="L11354" class="ln"> 11354&nbsp;&nbsp;</span>	<span class="comment">// sq contains the stream-specific queues, keyed by stream ID.</span>
<span id="L11355" class="ln"> 11355&nbsp;&nbsp;</span>	<span class="comment">// When a stream is idle, closed, or emptied, it&#39;s deleted</span>
<span id="L11356" class="ln"> 11356&nbsp;&nbsp;</span>	<span class="comment">// from the map.</span>
<span id="L11357" class="ln"> 11357&nbsp;&nbsp;</span>	sq map[uint32]*http2writeQueue
<span id="L11358" class="ln"> 11358&nbsp;&nbsp;</span>
<span id="L11359" class="ln"> 11359&nbsp;&nbsp;</span>	<span class="comment">// pool of empty queues for reuse.</span>
<span id="L11360" class="ln"> 11360&nbsp;&nbsp;</span>	queuePool http2writeQueuePool
<span id="L11361" class="ln"> 11361&nbsp;&nbsp;</span>}
<span id="L11362" class="ln"> 11362&nbsp;&nbsp;</span>
<span id="L11363" class="ln"> 11363&nbsp;&nbsp;</span>func (ws *http2randomWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions) {
<span id="L11364" class="ln"> 11364&nbsp;&nbsp;</span>	<span class="comment">// no-op: idle streams are not tracked</span>
<span id="L11365" class="ln"> 11365&nbsp;&nbsp;</span>}
<span id="L11366" class="ln"> 11366&nbsp;&nbsp;</span>
<span id="L11367" class="ln"> 11367&nbsp;&nbsp;</span>func (ws *http2randomWriteScheduler) CloseStream(streamID uint32) {
<span id="L11368" class="ln"> 11368&nbsp;&nbsp;</span>	q, ok := ws.sq[streamID]
<span id="L11369" class="ln"> 11369&nbsp;&nbsp;</span>	if !ok {
<span id="L11370" class="ln"> 11370&nbsp;&nbsp;</span>		return
<span id="L11371" class="ln"> 11371&nbsp;&nbsp;</span>	}
<span id="L11372" class="ln"> 11372&nbsp;&nbsp;</span>	delete(ws.sq, streamID)
<span id="L11373" class="ln"> 11373&nbsp;&nbsp;</span>	ws.queuePool.put(q)
<span id="L11374" class="ln"> 11374&nbsp;&nbsp;</span>}
<span id="L11375" class="ln"> 11375&nbsp;&nbsp;</span>
<span id="L11376" class="ln"> 11376&nbsp;&nbsp;</span>func (ws *http2randomWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam) {
<span id="L11377" class="ln"> 11377&nbsp;&nbsp;</span>	<span class="comment">// no-op: priorities are ignored</span>
<span id="L11378" class="ln"> 11378&nbsp;&nbsp;</span>}
<span id="L11379" class="ln"> 11379&nbsp;&nbsp;</span>
<span id="L11380" class="ln"> 11380&nbsp;&nbsp;</span>func (ws *http2randomWriteScheduler) Push(wr http2FrameWriteRequest) {
<span id="L11381" class="ln"> 11381&nbsp;&nbsp;</span>	if wr.isControl() {
<span id="L11382" class="ln"> 11382&nbsp;&nbsp;</span>		ws.zero.push(wr)
<span id="L11383" class="ln"> 11383&nbsp;&nbsp;</span>		return
<span id="L11384" class="ln"> 11384&nbsp;&nbsp;</span>	}
<span id="L11385" class="ln"> 11385&nbsp;&nbsp;</span>	id := wr.StreamID()
<span id="L11386" class="ln"> 11386&nbsp;&nbsp;</span>	q, ok := ws.sq[id]
<span id="L11387" class="ln"> 11387&nbsp;&nbsp;</span>	if !ok {
<span id="L11388" class="ln"> 11388&nbsp;&nbsp;</span>		q = ws.queuePool.get()
<span id="L11389" class="ln"> 11389&nbsp;&nbsp;</span>		ws.sq[id] = q
<span id="L11390" class="ln"> 11390&nbsp;&nbsp;</span>	}
<span id="L11391" class="ln"> 11391&nbsp;&nbsp;</span>	q.push(wr)
<span id="L11392" class="ln"> 11392&nbsp;&nbsp;</span>}
<span id="L11393" class="ln"> 11393&nbsp;&nbsp;</span>
<span id="L11394" class="ln"> 11394&nbsp;&nbsp;</span>func (ws *http2randomWriteScheduler) Pop() (http2FrameWriteRequest, bool) {
<span id="L11395" class="ln"> 11395&nbsp;&nbsp;</span>	<span class="comment">// Control and RST_STREAM frames first.</span>
<span id="L11396" class="ln"> 11396&nbsp;&nbsp;</span>	if !ws.zero.empty() {
<span id="L11397" class="ln"> 11397&nbsp;&nbsp;</span>		return ws.zero.shift(), true
<span id="L11398" class="ln"> 11398&nbsp;&nbsp;</span>	}
<span id="L11399" class="ln"> 11399&nbsp;&nbsp;</span>	<span class="comment">// Iterate over all non-idle streams until finding one that can be consumed.</span>
<span id="L11400" class="ln"> 11400&nbsp;&nbsp;</span>	for streamID, q := range ws.sq {
<span id="L11401" class="ln"> 11401&nbsp;&nbsp;</span>		if wr, ok := q.consume(math.MaxInt32); ok {
<span id="L11402" class="ln"> 11402&nbsp;&nbsp;</span>			if q.empty() {
<span id="L11403" class="ln"> 11403&nbsp;&nbsp;</span>				delete(ws.sq, streamID)
<span id="L11404" class="ln"> 11404&nbsp;&nbsp;</span>				ws.queuePool.put(q)
<span id="L11405" class="ln"> 11405&nbsp;&nbsp;</span>			}
<span id="L11406" class="ln"> 11406&nbsp;&nbsp;</span>			return wr, true
<span id="L11407" class="ln"> 11407&nbsp;&nbsp;</span>		}
<span id="L11408" class="ln"> 11408&nbsp;&nbsp;</span>	}
<span id="L11409" class="ln"> 11409&nbsp;&nbsp;</span>	return http2FrameWriteRequest{}, false
<span id="L11410" class="ln"> 11410&nbsp;&nbsp;</span>}
<span id="L11411" class="ln"> 11411&nbsp;&nbsp;</span>
<span id="L11412" class="ln"> 11412&nbsp;&nbsp;</span>type http2roundRobinWriteScheduler struct {
<span id="L11413" class="ln"> 11413&nbsp;&nbsp;</span>	<span class="comment">// control contains control frames (SETTINGS, PING, etc.).</span>
<span id="L11414" class="ln"> 11414&nbsp;&nbsp;</span>	control http2writeQueue
<span id="L11415" class="ln"> 11415&nbsp;&nbsp;</span>
<span id="L11416" class="ln"> 11416&nbsp;&nbsp;</span>	<span class="comment">// streams maps stream ID to a queue.</span>
<span id="L11417" class="ln"> 11417&nbsp;&nbsp;</span>	streams map[uint32]*http2writeQueue
<span id="L11418" class="ln"> 11418&nbsp;&nbsp;</span>
<span id="L11419" class="ln"> 11419&nbsp;&nbsp;</span>	<span class="comment">// stream queues are stored in a circular linked list.</span>
<span id="L11420" class="ln"> 11420&nbsp;&nbsp;</span>	<span class="comment">// head is the next stream to write, or nil if there are no streams open.</span>
<span id="L11421" class="ln"> 11421&nbsp;&nbsp;</span>	head *http2writeQueue
<span id="L11422" class="ln"> 11422&nbsp;&nbsp;</span>
<span id="L11423" class="ln"> 11423&nbsp;&nbsp;</span>	<span class="comment">// pool of empty queues for reuse.</span>
<span id="L11424" class="ln"> 11424&nbsp;&nbsp;</span>	queuePool http2writeQueuePool
<span id="L11425" class="ln"> 11425&nbsp;&nbsp;</span>}
<span id="L11426" class="ln"> 11426&nbsp;&nbsp;</span>
<span id="L11427" class="ln"> 11427&nbsp;&nbsp;</span><span class="comment">// newRoundRobinWriteScheduler constructs a new write scheduler.</span>
<span id="L11428" class="ln"> 11428&nbsp;&nbsp;</span><span class="comment">// The round robin scheduler priorizes control frames</span>
<span id="L11429" class="ln"> 11429&nbsp;&nbsp;</span><span class="comment">// like SETTINGS and PING over DATA frames.</span>
<span id="L11430" class="ln"> 11430&nbsp;&nbsp;</span><span class="comment">// When there are no control frames to send, it performs a round-robin</span>
<span id="L11431" class="ln"> 11431&nbsp;&nbsp;</span><span class="comment">// selection from the ready streams.</span>
<span id="L11432" class="ln"> 11432&nbsp;&nbsp;</span>func http2newRoundRobinWriteScheduler() http2WriteScheduler {
<span id="L11433" class="ln"> 11433&nbsp;&nbsp;</span>	ws := &amp;http2roundRobinWriteScheduler{
<span id="L11434" class="ln"> 11434&nbsp;&nbsp;</span>		streams: make(map[uint32]*http2writeQueue),
<span id="L11435" class="ln"> 11435&nbsp;&nbsp;</span>	}
<span id="L11436" class="ln"> 11436&nbsp;&nbsp;</span>	return ws
<span id="L11437" class="ln"> 11437&nbsp;&nbsp;</span>}
<span id="L11438" class="ln"> 11438&nbsp;&nbsp;</span>
<span id="L11439" class="ln"> 11439&nbsp;&nbsp;</span>func (ws *http2roundRobinWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions) {
<span id="L11440" class="ln"> 11440&nbsp;&nbsp;</span>	if ws.streams[streamID] != nil {
<span id="L11441" class="ln"> 11441&nbsp;&nbsp;</span>		panic(fmt.Errorf(&#34;stream %d already opened&#34;, streamID))
<span id="L11442" class="ln"> 11442&nbsp;&nbsp;</span>	}
<span id="L11443" class="ln"> 11443&nbsp;&nbsp;</span>	q := ws.queuePool.get()
<span id="L11444" class="ln"> 11444&nbsp;&nbsp;</span>	ws.streams[streamID] = q
<span id="L11445" class="ln"> 11445&nbsp;&nbsp;</span>	if ws.head == nil {
<span id="L11446" class="ln"> 11446&nbsp;&nbsp;</span>		ws.head = q
<span id="L11447" class="ln"> 11447&nbsp;&nbsp;</span>		q.next = q
<span id="L11448" class="ln"> 11448&nbsp;&nbsp;</span>		q.prev = q
<span id="L11449" class="ln"> 11449&nbsp;&nbsp;</span>	} else {
<span id="L11450" class="ln"> 11450&nbsp;&nbsp;</span>		<span class="comment">// Queues are stored in a ring.</span>
<span id="L11451" class="ln"> 11451&nbsp;&nbsp;</span>		<span class="comment">// Insert the new stream before ws.head, putting it at the end of the list.</span>
<span id="L11452" class="ln"> 11452&nbsp;&nbsp;</span>		q.prev = ws.head.prev
<span id="L11453" class="ln"> 11453&nbsp;&nbsp;</span>		q.next = ws.head
<span id="L11454" class="ln"> 11454&nbsp;&nbsp;</span>		q.prev.next = q
<span id="L11455" class="ln"> 11455&nbsp;&nbsp;</span>		q.next.prev = q
<span id="L11456" class="ln"> 11456&nbsp;&nbsp;</span>	}
<span id="L11457" class="ln"> 11457&nbsp;&nbsp;</span>}
<span id="L11458" class="ln"> 11458&nbsp;&nbsp;</span>
<span id="L11459" class="ln"> 11459&nbsp;&nbsp;</span>func (ws *http2roundRobinWriteScheduler) CloseStream(streamID uint32) {
<span id="L11460" class="ln"> 11460&nbsp;&nbsp;</span>	q := ws.streams[streamID]
<span id="L11461" class="ln"> 11461&nbsp;&nbsp;</span>	if q == nil {
<span id="L11462" class="ln"> 11462&nbsp;&nbsp;</span>		return
<span id="L11463" class="ln"> 11463&nbsp;&nbsp;</span>	}
<span id="L11464" class="ln"> 11464&nbsp;&nbsp;</span>	if q.next == q {
<span id="L11465" class="ln"> 11465&nbsp;&nbsp;</span>		<span class="comment">// This was the only open stream.</span>
<span id="L11466" class="ln"> 11466&nbsp;&nbsp;</span>		ws.head = nil
<span id="L11467" class="ln"> 11467&nbsp;&nbsp;</span>	} else {
<span id="L11468" class="ln"> 11468&nbsp;&nbsp;</span>		q.prev.next = q.next
<span id="L11469" class="ln"> 11469&nbsp;&nbsp;</span>		q.next.prev = q.prev
<span id="L11470" class="ln"> 11470&nbsp;&nbsp;</span>		if ws.head == q {
<span id="L11471" class="ln"> 11471&nbsp;&nbsp;</span>			ws.head = q.next
<span id="L11472" class="ln"> 11472&nbsp;&nbsp;</span>		}
<span id="L11473" class="ln"> 11473&nbsp;&nbsp;</span>	}
<span id="L11474" class="ln"> 11474&nbsp;&nbsp;</span>	delete(ws.streams, streamID)
<span id="L11475" class="ln"> 11475&nbsp;&nbsp;</span>	ws.queuePool.put(q)
<span id="L11476" class="ln"> 11476&nbsp;&nbsp;</span>}
<span id="L11477" class="ln"> 11477&nbsp;&nbsp;</span>
<span id="L11478" class="ln"> 11478&nbsp;&nbsp;</span>func (ws *http2roundRobinWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam) {}
<span id="L11479" class="ln"> 11479&nbsp;&nbsp;</span>
<span id="L11480" class="ln"> 11480&nbsp;&nbsp;</span>func (ws *http2roundRobinWriteScheduler) Push(wr http2FrameWriteRequest) {
<span id="L11481" class="ln"> 11481&nbsp;&nbsp;</span>	if wr.isControl() {
<span id="L11482" class="ln"> 11482&nbsp;&nbsp;</span>		ws.control.push(wr)
<span id="L11483" class="ln"> 11483&nbsp;&nbsp;</span>		return
<span id="L11484" class="ln"> 11484&nbsp;&nbsp;</span>	}
<span id="L11485" class="ln"> 11485&nbsp;&nbsp;</span>	q := ws.streams[wr.StreamID()]
<span id="L11486" class="ln"> 11486&nbsp;&nbsp;</span>	if q == nil {
<span id="L11487" class="ln"> 11487&nbsp;&nbsp;</span>		<span class="comment">// This is a closed stream.</span>
<span id="L11488" class="ln"> 11488&nbsp;&nbsp;</span>		<span class="comment">// wr should not be a HEADERS or DATA frame.</span>
<span id="L11489" class="ln"> 11489&nbsp;&nbsp;</span>		<span class="comment">// We push the request onto the control queue.</span>
<span id="L11490" class="ln"> 11490&nbsp;&nbsp;</span>		if wr.DataSize() &gt; 0 {
<span id="L11491" class="ln"> 11491&nbsp;&nbsp;</span>			panic(&#34;add DATA on non-open stream&#34;)
<span id="L11492" class="ln"> 11492&nbsp;&nbsp;</span>		}
<span id="L11493" class="ln"> 11493&nbsp;&nbsp;</span>		ws.control.push(wr)
<span id="L11494" class="ln"> 11494&nbsp;&nbsp;</span>		return
<span id="L11495" class="ln"> 11495&nbsp;&nbsp;</span>	}
<span id="L11496" class="ln"> 11496&nbsp;&nbsp;</span>	q.push(wr)
<span id="L11497" class="ln"> 11497&nbsp;&nbsp;</span>}
<span id="L11498" class="ln"> 11498&nbsp;&nbsp;</span>
<span id="L11499" class="ln"> 11499&nbsp;&nbsp;</span>func (ws *http2roundRobinWriteScheduler) Pop() (http2FrameWriteRequest, bool) {
<span id="L11500" class="ln"> 11500&nbsp;&nbsp;</span>	<span class="comment">// Control and RST_STREAM frames first.</span>
<span id="L11501" class="ln"> 11501&nbsp;&nbsp;</span>	if !ws.control.empty() {
<span id="L11502" class="ln"> 11502&nbsp;&nbsp;</span>		return ws.control.shift(), true
<span id="L11503" class="ln"> 11503&nbsp;&nbsp;</span>	}
<span id="L11504" class="ln"> 11504&nbsp;&nbsp;</span>	if ws.head == nil {
<span id="L11505" class="ln"> 11505&nbsp;&nbsp;</span>		return http2FrameWriteRequest{}, false
<span id="L11506" class="ln"> 11506&nbsp;&nbsp;</span>	}
<span id="L11507" class="ln"> 11507&nbsp;&nbsp;</span>	q := ws.head
<span id="L11508" class="ln"> 11508&nbsp;&nbsp;</span>	for {
<span id="L11509" class="ln"> 11509&nbsp;&nbsp;</span>		if wr, ok := q.consume(math.MaxInt32); ok {
<span id="L11510" class="ln"> 11510&nbsp;&nbsp;</span>			ws.head = q.next
<span id="L11511" class="ln"> 11511&nbsp;&nbsp;</span>			return wr, true
<span id="L11512" class="ln"> 11512&nbsp;&nbsp;</span>		}
<span id="L11513" class="ln"> 11513&nbsp;&nbsp;</span>		q = q.next
<span id="L11514" class="ln"> 11514&nbsp;&nbsp;</span>		if q == ws.head {
<span id="L11515" class="ln"> 11515&nbsp;&nbsp;</span>			break
<span id="L11516" class="ln"> 11516&nbsp;&nbsp;</span>		}
<span id="L11517" class="ln"> 11517&nbsp;&nbsp;</span>	}
<span id="L11518" class="ln"> 11518&nbsp;&nbsp;</span>	return http2FrameWriteRequest{}, false
<span id="L11519" class="ln"> 11519&nbsp;&nbsp;</span>}
<span id="L11520" class="ln"> 11520&nbsp;&nbsp;</span>
</pre><p><a href="h2_bundle.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
