<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/httptest/recorder.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./recorder.go?s=3219:3283#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/httptest">httptest</a>/<span class="text-muted">recorder.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/httptest">net/http/httptest</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package httptest
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http/httpguts&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// ResponseRecorder is an implementation of [http.ResponseWriter] that</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// records its mutations for later inspection in tests.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>type ResponseRecorder struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// Code is the HTTP response code set by WriteHeader.</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	<span class="comment">// Note that if a Handler never calls WriteHeader or Write,</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	<span class="comment">// this might end up being 0, rather than the implicit</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	<span class="comment">// http.StatusOK. To get the implicit value, use the Result</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	<span class="comment">// method.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	Code int
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	<span class="comment">// HeaderMap contains the headers explicitly set by the Handler.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// It is an internal detail.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: HeaderMap exists for historical compatibility</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// and should not be used. To access the headers returned by a handler,</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// use the Response.Header map as returned by the Result method.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	HeaderMap http.Header
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// Body is the buffer to which the Handler&#39;s Write calls are sent.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// If nil, the Writes are silently discarded.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	Body *bytes.Buffer
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// Flushed is whether the Handler called Flush.</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	Flushed bool
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	result      *http.Response <span class="comment">// cache of Result&#39;s return value</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	snapHeader  http.Header    <span class="comment">// snapshot of HeaderMap at first Write</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	wroteHeader bool
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// NewRecorder returns an initialized [ResponseRecorder].</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func NewRecorder() *ResponseRecorder {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	return &amp;ResponseRecorder{
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		HeaderMap: make(http.Header),
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>		Body:      new(bytes.Buffer),
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>		Code:      200,
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	}
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// DefaultRemoteAddr is the default remote address to return in RemoteAddr if</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// an explicit DefaultRemoteAddr isn&#39;t set on [ResponseRecorder].</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>const DefaultRemoteAddr = &#34;1.2.3.4&#34;
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// Header implements [http.ResponseWriter]. It returns the response</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// headers to mutate within a handler. To test the headers that were</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// written after a handler completes, use the [ResponseRecorder.Result] method and see</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// the returned Response value&#39;s Header.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>func (rw *ResponseRecorder) Header() http.Header {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	m := rw.HeaderMap
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	if m == nil {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		m = make(http.Header)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		rw.HeaderMap = m
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return m
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// writeHeader writes a header if it was not written yet and</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// detects Content-Type if needed.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// bytes or str are the beginning of the response body.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// We pass both to avoid unnecessarily generate garbage</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// in rw.WriteString which was created for performance reasons.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Non-nil bytes win.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func (rw *ResponseRecorder) writeHeader(b []byte, str string) {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	if rw.wroteHeader {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		return
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	if len(str) &gt; 512 {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		str = str[:512]
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	m := rw.Header()
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	_, hasType := m[&#34;Content-Type&#34;]
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	hasTE := m.Get(&#34;Transfer-Encoding&#34;) != &#34;&#34;
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	if !hasType &amp;&amp; !hasTE {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		if b == nil {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			b = []byte(str)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		m.Set(&#34;Content-Type&#34;, http.DetectContentType(b))
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	rw.WriteHeader(200)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Write implements http.ResponseWriter. The data in buf is written to</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// rw.Body, if not nil.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func (rw *ResponseRecorder) Write(buf []byte) (int, error) {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	rw.writeHeader(buf, &#34;&#34;)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if rw.Body != nil {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		rw.Body.Write(buf)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	return len(buf), nil
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// WriteString implements [io.StringWriter]. The data in str is written</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// to rw.Body, if not nil.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="selection">func (rw *ResponseRecorder) WriteString(str string) (int, error)</span> {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	rw.writeHeader(nil, str)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	if rw.Body != nil {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		rw.Body.WriteString(str)
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	}
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	return len(str), nil
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func checkWriteHeaderCode(code int) {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// Issue 22880: require valid WriteHeader status codes.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// For now we only enforce that it&#39;s three digits.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// In the future we might block things over 599 (600 and above aren&#39;t defined</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// at https://httpwg.org/specs/rfc7231.html#status.codes)</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// and we might block under 200 (once we have more mature 1xx support).</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// But for now any three digits.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// We used to send &#34;HTTP/1.1 000 0&#34; on the wire in responses but there&#39;s</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// no equivalent bogus thing we can realistically send in HTTP/2,</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// so we&#39;ll consistently panic instead and help people find their bugs</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// early. (We can&#39;t return an error from WriteHeader even if we wanted to.)</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	if code &lt; 100 || code &gt; 999 {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid WriteHeader code %v&#34;, code))
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span><span class="comment">// WriteHeader implements [http.ResponseWriter].</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>func (rw *ResponseRecorder) WriteHeader(code int) {
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	if rw.wroteHeader {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		return
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	checkWriteHeaderCode(code)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	rw.Code = code
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	rw.wroteHeader = true
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	if rw.HeaderMap == nil {
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		rw.HeaderMap = make(http.Header)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	rw.snapHeader = rw.HeaderMap.Clone()
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span><span class="comment">// Flush implements [http.Flusher]. To test whether Flush was</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span><span class="comment">// called, see rw.Flushed.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>func (rw *ResponseRecorder) Flush() {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	if !rw.wroteHeader {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		rw.WriteHeader(200)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	rw.Flushed = true
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// Result returns the response generated by the handler.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// The returned Response will have at least its StatusCode,</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// Header, Body, and optionally Trailer populated.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// More fields may be populated in the future, so callers should</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// not DeepEqual the result in tests.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// The Response.Header is a snapshot of the headers at the time of the</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// first write call, or at the time of this call, if the handler never</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// did a write.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// The Response.Body is guaranteed to be non-nil and Body.Read call is</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// guaranteed to not return any error other than [io.EOF].</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// Result must only be called after the handler has finished running.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>func (rw *ResponseRecorder) Result() *http.Response {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	if rw.result != nil {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		return rw.result
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	if rw.snapHeader == nil {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		rw.snapHeader = rw.HeaderMap.Clone()
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	res := &amp;http.Response{
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		Proto:      &#34;HTTP/1.1&#34;,
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		ProtoMajor: 1,
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		ProtoMinor: 1,
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		StatusCode: rw.Code,
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		Header:     rw.snapHeader,
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	rw.result = res
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	if res.StatusCode == 0 {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		res.StatusCode = 200
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	res.Status = fmt.Sprintf(&#34;%03d %s&#34;, res.StatusCode, http.StatusText(res.StatusCode))
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if rw.Body != nil {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		res.Body = io.NopCloser(bytes.NewReader(rw.Body.Bytes()))
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	} else {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		res.Body = http.NoBody
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	res.ContentLength = parseContentLength(res.Header.Get(&#34;Content-Length&#34;))
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	if trailers, ok := rw.snapHeader[&#34;Trailer&#34;]; ok {
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		res.Trailer = make(http.Header, len(trailers))
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		for _, k := range trailers {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			for _, k := range strings.Split(k, &#34;,&#34;) {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>				k = http.CanonicalHeaderKey(textproto.TrimString(k))
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>				if !httpguts.ValidTrailerHeader(k) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>					<span class="comment">// Ignore since forbidden by RFC 7230, section 4.1.2.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>					continue
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>				}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>				vv, ok := rw.HeaderMap[k]
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>				if !ok {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>					continue
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>				}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>				vv2 := make([]string, len(vv))
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>				copy(vv2, vv)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>				res.Trailer[k] = vv2
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	for k, vv := range rw.HeaderMap {
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		if !strings.HasPrefix(k, http.TrailerPrefix) {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			continue
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		if res.Trailer == nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			res.Trailer = make(http.Header)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>			res.Trailer.Add(strings.TrimPrefix(k, http.TrailerPrefix), v)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return res
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// parseContentLength trims whitespace from s and returns -1 if no value</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// is set, or the value if it&#39;s &gt;= 0.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// This a modified version of same function found in net/http/transfer.go. This</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// one just ignores an invalid header.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func parseContentLength(cl string) int64 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	cl = textproto.TrimString(cl)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if cl == &#34;&#34; {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		return -1
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	n, err := strconv.ParseUint(cl, 10, 63)
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	if err != nil {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		return -1
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	return int64(n)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
</pre><p><a href="recorder.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
