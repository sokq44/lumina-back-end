<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/httptrace/trace.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./trace.go?s=562:619#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/httptrace">httptrace</a>/<span class="text-muted">trace.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/httptrace">net/http/httptrace</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package httptrace provides mechanisms to trace the events within</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// HTTP client requests.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package httptrace
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;internal/nettrace&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// unique type to prevent assignment.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>type clientEventContextKey struct{}
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// ContextClientTrace returns the [ClientTrace] associated with the</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// provided context. If none, it returns nil.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="selection">func ContextClientTrace(ctx context.Context) *ClientTrace</span> {
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	trace, _ := ctx.Value(clientEventContextKey{}).(*ClientTrace)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	return trace
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>}
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// WithClientTrace returns a new context based on the provided parent</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// ctx. HTTP client requests made with the returned context will use</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// the provided trace hooks, in addition to any previous hooks</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// registered with ctx. Any hooks defined in the provided trace will</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// be called first.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func WithClientTrace(ctx context.Context, trace *ClientTrace) context.Context {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	if trace == nil {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		panic(&#34;nil trace&#34;)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	old := ContextClientTrace(ctx)
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	trace.compose(old)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	ctx = context.WithValue(ctx, clientEventContextKey{}, trace)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	if trace.hasNetHooks() {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>		nt := &amp;nettrace.Trace{
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>			ConnectStart: trace.ConnectStart,
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			ConnectDone:  trace.ConnectDone,
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>		}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		if trace.DNSStart != nil {
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>			nt.DNSStart = func(name string) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>				trace.DNSStart(DNSStartInfo{Host: name})
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		}
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>		if trace.DNSDone != nil {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>			nt.DNSDone = func(netIPs []any, coalesced bool, err error) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>				addrs := make([]net.IPAddr, len(netIPs))
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>				for i, ip := range netIPs {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>					addrs[i] = ip.(net.IPAddr)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>				}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>				trace.DNSDone(DNSDoneInfo{
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>					Addrs:     addrs,
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>					Coalesced: coalesced,
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>					Err:       err,
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>				})
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		ctx = context.WithValue(ctx, nettrace.TraceKey{}, nt)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	return ctx
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// ClientTrace is a set of hooks to run at various stages of an outgoing</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// HTTP request. Any particular hook may be nil. Functions may be</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// called concurrently from different goroutines and some may be called</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// after the request has completed or failed.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// ClientTrace currently traces a single HTTP request &amp; response</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// during a single round trip and has no hooks that span a series</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// of redirected requests.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// See https://blog.golang.org/http-tracing for more.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>type ClientTrace struct {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// GetConn is called before a connection is created or</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	<span class="comment">// retrieved from an idle pool. The hostPort is the</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// &#34;host:port&#34; of the target or proxy. GetConn is called even</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// if there&#39;s already an idle cached connection available.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	GetConn func(hostPort string)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// GotConn is called after a successful connection is</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// obtained. There is no hook for failure to obtain a</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// connection; instead, use the error from</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// Transport.RoundTrip.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	GotConn func(GotConnInfo)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	<span class="comment">// PutIdleConn is called when the connection is returned to</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// the idle pool. If err is nil, the connection was</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// successfully returned to the idle pool. If err is non-nil,</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// it describes why not. PutIdleConn is not called if</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// connection reuse is disabled via Transport.DisableKeepAlives.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// PutIdleConn is called before the caller&#39;s Response.Body.Close</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// call returns.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// For HTTP/2, this hook is not currently used.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	PutIdleConn func(err error)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// GotFirstResponseByte is called when the first byte of the response</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// headers is available.</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	GotFirstResponseByte func()
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// Got100Continue is called if the server replies with a &#34;100</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// Continue&#34; response.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	Got100Continue func()
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// Got1xxResponse is called for each 1xx informational response header</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// returned before the final non-1xx response. Got1xxResponse is called</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// for &#34;100 Continue&#34; responses, even if Got100Continue is also defined.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// If it returns an error, the client request is aborted with that error value.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	Got1xxResponse func(code int, header textproto.MIMEHeader) error
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// DNSStart is called when a DNS lookup begins.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	DNSStart func(DNSStartInfo)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// DNSDone is called when a DNS lookup ends.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	DNSDone func(DNSDoneInfo)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// ConnectStart is called when a new connection&#39;s Dial begins.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// If net.Dialer.DualStack (IPv6 &#34;Happy Eyeballs&#34;) support is</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// enabled, this may be called multiple times.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	ConnectStart func(network, addr string)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// ConnectDone is called when a new connection&#39;s Dial</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// completes. The provided err indicates whether the</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// connection completed successfully.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// If net.Dialer.DualStack (&#34;Happy Eyeballs&#34;) support is</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// enabled, this may be called multiple times.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	ConnectDone func(network, addr string, err error)
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// TLSHandshakeStart is called when the TLS handshake is started. When</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// connecting to an HTTPS site via an HTTP proxy, the handshake happens</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// after the CONNECT request is processed by the proxy.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	TLSHandshakeStart func()
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// TLSHandshakeDone is called after the TLS handshake with either the</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// successful handshake&#39;s connection state, or a non-nil error on handshake</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// failure.</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	TLSHandshakeDone func(tls.ConnectionState, error)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// WroteHeaderField is called after the Transport has written</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// each request header. At the time of this call the values</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// might be buffered and not yet written to the network.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	WroteHeaderField func(key string, value []string)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// WroteHeaders is called after the Transport has written</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// all request headers.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	WroteHeaders func()
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// Wait100Continue is called if the Request specified</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// &#34;Expect: 100-continue&#34; and the Transport has written the</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// request headers but is waiting for &#34;100 Continue&#34; from the</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// server before writing the request body.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	Wait100Continue func()
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// WroteRequest is called with the result of writing the</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// request and any body. It may be called multiple times</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// in the case of retried requests.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	WroteRequest func(WroteRequestInfo)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// WroteRequestInfo contains information provided to the WroteRequest</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// hook.</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>type WroteRequestInfo struct {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// Err is any error encountered while writing the Request.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	Err error
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// compose modifies t such that it respects the previously-registered hooks in old,</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// subject to the composition policy requested in t.Compose.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func (t *ClientTrace) compose(old *ClientTrace) {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	if old == nil {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		return
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	tv := reflect.ValueOf(t).Elem()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	ov := reflect.ValueOf(old).Elem()
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	structType := tv.Type()
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	for i := 0; i &lt; structType.NumField(); i++ {
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		tf := tv.Field(i)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		hookType := tf.Type()
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		if hookType.Kind() != reflect.Func {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			continue
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		of := ov.Field(i)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if of.IsNil() {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			continue
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		if tf.IsNil() {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			tf.Set(of)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			continue
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		<span class="comment">// Make a copy of tf for tf to call. (Otherwise it</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		<span class="comment">// creates a recursive call cycle and stack overflows)</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		tfCopy := reflect.ValueOf(tf.Interface())
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		<span class="comment">// We need to call both tf and of in some order.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>		newFunc := reflect.MakeFunc(hookType, func(args []reflect.Value) []reflect.Value {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>			tfCopy.Call(args)
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return of.Call(args)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		})
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		tv.Field(i).Set(newFunc)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// DNSStartInfo contains information about a DNS request.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>type DNSStartInfo struct {
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	Host string
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// DNSDoneInfo contains information about the results of a DNS lookup.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>type DNSDoneInfo struct {
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// Addrs are the IPv4 and/or IPv6 addresses found in the DNS</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// lookup. The contents of the slice should not be mutated.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	Addrs []net.IPAddr
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// Err is any error that occurred during the DNS lookup.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	Err error
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// Coalesced is whether the Addrs were shared with another</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// caller who was doing the same DNS lookup concurrently.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	Coalesced bool
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>func (t *ClientTrace) hasNetHooks() bool {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	if t == nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		return false
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	return t.DNSStart != nil || t.DNSDone != nil || t.ConnectStart != nil || t.ConnectDone != nil
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// GotConnInfo is the argument to the [ClientTrace.GotConn] function and</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// contains information about the obtained connection.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>type GotConnInfo struct {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Conn is the connection that was obtained. It is owned by</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// the http.Transport and should not be read, written or</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// closed by users of ClientTrace.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	Conn net.Conn
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// Reused is whether this connection has been previously</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// used for another HTTP request.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	Reused bool
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// WasIdle is whether this connection was obtained from an</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// idle pool.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	WasIdle bool
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// IdleTime reports how long the connection was previously</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// idle, if WasIdle is true.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	IdleTime time.Duration
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
</pre><p><a href="trace.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
