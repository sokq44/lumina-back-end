<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/httputil/dump.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./dump.go?s=8823:8888#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/httputil">httputil</a>/<span class="text-muted">dump.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/httputil">net/http/httputil</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package httputil
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// drainBody reads all of b to memory and then returns two equivalent</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// ReadClosers yielding the same bytes.</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// It returns an error if the initial slurp of all bytes fails. It does not attempt</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// to make the returned ReadClosers have identical error-matching behavior.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error) {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	if b == nil || b == http.NoBody {
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>		<span class="comment">// No copying needed. Preserve the magic sentinel meaning of NoBody.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>		return http.NoBody, http.NoBody, nil
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	if _, err = buf.ReadFrom(b); err != nil {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		return nil, b, err
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	if err = b.Close(); err != nil {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		return nil, b, err
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	return io.NopCloser(&amp;buf), io.NopCloser(bytes.NewReader(buf.Bytes())), nil
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// dumpConn is a net.Conn which writes to Writer and reads from Reader</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>type dumpConn struct {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	io.Writer
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	io.Reader
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>func (c *dumpConn) Close() error                       { return nil }
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>func (c *dumpConn) LocalAddr() net.Addr                { return nil }
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (c *dumpConn) RemoteAddr() net.Addr               { return nil }
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func (c *dumpConn) SetDeadline(t time.Time) error      { return nil }
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>func (c *dumpConn) SetReadDeadline(t time.Time) error  { return nil }
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func (c *dumpConn) SetWriteDeadline(t time.Time) error { return nil }
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>type neverEnding byte
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func (b neverEnding) Read(p []byte) (n int, err error) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	for i := range p {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		p[i] = byte(b)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	return len(p), nil
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// outgoingLength is a copy of the unexported</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// (*http.Request).outgoingLength method.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func outgoingLength(req *http.Request) int64 {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	if req.Body == nil || req.Body == http.NoBody {
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		return 0
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	if req.ContentLength != 0 {
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		return req.ContentLength
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	return -1
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// DumpRequestOut is like [DumpRequest] but for outgoing client requests. It</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// includes any headers that the standard [http.Transport] adds, such as</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// User-Agent.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func DumpRequestOut(req *http.Request, body bool) ([]byte, error) {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	save := req.Body
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	dummyBody := false
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	if !body {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		contentLength := outgoingLength(req)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		if contentLength != 0 {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			req.Body = io.NopCloser(io.LimitReader(neverEnding(&#39;x&#39;), contentLength))
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>			dummyBody = true
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	} else {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		var err error
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		save, req.Body, err = drainBody(req.Body)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		if err != nil {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			return nil, err
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	<span class="comment">// Since we&#39;re using the actual Transport code to write the request,</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// switch to http so the Transport doesn&#39;t try to do an SSL</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// negotiation with our dumpConn and its bytes.Buffer &amp; pipe.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// The wire format for https and http are the same, anyway.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	reqSend := req
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if req.URL.Scheme == &#34;https&#34; {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		reqSend = new(http.Request)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		*reqSend = *req
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>		reqSend.URL = new(url.URL)
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		*reqSend.URL = *req.URL
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		reqSend.URL.Scheme = &#34;http&#34;
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// Use the actual Transport code to record what we would send</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// on the wire, but not using TCP.  Use a Transport with a</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// custom dialer that returns a fake net.Conn that waits</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// for the full input (and recording it), and then responds</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// with a dummy response.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	var buf bytes.Buffer <span class="comment">// records the output</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	pr, pw := io.Pipe()
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	defer pr.Close()
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	defer pw.Close()
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	dr := &amp;delegateReader{c: make(chan io.Reader)}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	t := &amp;http.Transport{
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		Dial: func(net, addr string) (net.Conn, error) {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			return &amp;dumpConn{io.MultiWriter(&amp;buf, pw), dr}, nil
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		},
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	defer t.CloseIdleConnections()
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// We need this channel to ensure that the reader</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// goroutine exits if t.RoundTrip returns an error.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// See golang.org/issue/32571.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	quitReadCh := make(chan struct{})
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// Wait for the request before replying with a dummy response:</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	go func() {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		req, err := http.ReadRequest(bufio.NewReader(pr))
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		if err == nil {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			<span class="comment">// Ensure all the body is read; otherwise</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			<span class="comment">// we&#39;ll get a partial dump.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			io.Copy(io.Discard, req.Body)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			req.Body.Close()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		select {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		case dr.c &lt;- strings.NewReader(&#34;HTTP/1.1 204 No Content\r\nConnection: close\r\n\r\n&#34;):
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		case &lt;-quitReadCh:
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			<span class="comment">// Ensure delegateReader.Read doesn&#39;t block forever if we get an error.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			close(dr.c)
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}()
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	_, err := t.RoundTrip(reqSend)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	req.Body = save
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if err != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		pw.Close()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>		dr.err = err
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		close(quitReadCh)
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		return nil, err
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	dump := buf.Bytes()
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// If we used a dummy body above, remove it now.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// TODO: if the req.ContentLength is large, we allocate memory</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// unnecessarily just to slice it off here. But this is just</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// a debug function, so this is acceptable for now. We could</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// discard the body earlier if this matters.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	if dummyBody {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		if i := bytes.Index(dump, []byte(&#34;\r\n\r\n&#34;)); i &gt;= 0 {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			dump = dump[:i+4]
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	return dump, nil
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// delegateReader is a reader that delegates to another reader,</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// once it arrives on a channel.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>type delegateReader struct {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	c   chan io.Reader
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	err error     <span class="comment">// only used if r is nil and c is closed.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	r   io.Reader <span class="comment">// nil until received from c</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (r *delegateReader) Read(p []byte) (int, error) {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	if r.r == nil {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		var ok bool
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		if r.r, ok = &lt;-r.c; !ok {
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			return 0, r.err
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return r.r.Read(p)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// Return value if nonempty, def otherwise.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func valueOrDefault(value, def string) string {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	if value != &#34;&#34; {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		return value
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return def
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>var reqWriteExcludeHeaderDump = map[string]bool{
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	&#34;Host&#34;:              true, <span class="comment">// not in Header map anyway</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	&#34;Transfer-Encoding&#34;: true,
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	&#34;Trailer&#34;:           true,
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// DumpRequest returns the given request in its HTTP/1.x wire</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// representation. It should only be used by servers to debug client</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// requests. The returned representation is an approximation only;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// some details of the initial request are lost while parsing it into</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">// an [http.Request]. In particular, the order and case of header field</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// names are lost. The order of values in multi-valued headers is kept</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// original binary representations.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// If body is true, DumpRequest also returns the body. To do so, it</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// consumes req.Body and then replaces it with a new [io.ReadCloser]</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// that yields the same bytes. If DumpRequest returns an error,</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// the state of req is undefined.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// The documentation for [http.Request.Write] details which fields</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// of req are included in the dump.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>func DumpRequest(req *http.Request, body bool) ([]byte, error) {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	var err error
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	save := req.Body
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if !body || req.Body == nil {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		req.Body = nil
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	} else {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		save, req.Body, err = drainBody(req.Body)
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		if err != nil {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			return nil, err
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// By default, print out the unmodified req.RequestURI, which</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// is always set for incoming server requests. But because we</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// previously used req.URL.RequestURI and the docs weren&#39;t</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// always so clear about when to use DumpRequest vs</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// DumpRequestOut, fall back to the old way if the caller</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// provides a non-server Request.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	reqURI := req.RequestURI
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	if reqURI == &#34;&#34; {
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		reqURI = req.URL.RequestURI()
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	fmt.Fprintf(&amp;b, &#34;%s %s HTTP/%d.%d\r\n&#34;, valueOrDefault(req.Method, &#34;GET&#34;),
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		reqURI, req.ProtoMajor, req.ProtoMinor)
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	absRequestURI := strings.HasPrefix(req.RequestURI, &#34;http://&#34;) || strings.HasPrefix(req.RequestURI, &#34;https://&#34;)
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	if !absRequestURI {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		host := req.Host
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		if host == &#34;&#34; &amp;&amp; req.URL != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>			host = req.URL.Host
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		if host != &#34;&#34; {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>			fmt.Fprintf(&amp;b, &#34;Host: %s\r\n&#34;, host)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	chunked := len(req.TransferEncoding) &gt; 0 &amp;&amp; req.TransferEncoding[0] == &#34;chunked&#34;
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	if len(req.TransferEncoding) &gt; 0 {
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		fmt.Fprintf(&amp;b, &#34;Transfer-Encoding: %s\r\n&#34;, strings.Join(req.TransferEncoding, &#34;,&#34;))
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	err = req.Header.WriteSubset(&amp;b, reqWriteExcludeHeaderDump)
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	if err != nil {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		return nil, err
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	io.WriteString(&amp;b, &#34;\r\n&#34;)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if req.Body != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		var dest io.Writer = &amp;b
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		if chunked {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			dest = NewChunkedWriter(dest)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		_, err = io.Copy(dest, req.Body)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		if chunked {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			dest.(io.Closer).Close()
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			io.WriteString(&amp;b, &#34;\r\n&#34;)
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>		}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	req.Body = save
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	if err != nil {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		return nil, err
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	}
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	return b.Bytes(), nil
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// errNoBody is a sentinel error value used by failureToReadBody so we</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// can detect that the lack of body was intentional.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>var errNoBody = errors.New(&#34;sentinel error value&#34;)
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// failureToReadBody is an io.ReadCloser that just returns errNoBody on</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// Read. It&#39;s swapped in when we don&#39;t actually want to consume</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// the body, but need a non-nil one, and want to distinguish the</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// error from reading the dummy body.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>type failureToReadBody struct{}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func (failureToReadBody) Read([]byte) (int, error) { return 0, errNoBody }
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>func (failureToReadBody) Close() error             { return nil }
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// emptyBody is an instance of empty reader.</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>var emptyBody = io.NopCloser(strings.NewReader(&#34;&#34;))
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// DumpResponse is like DumpRequest but dumps a response.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="selection">func DumpResponse(resp *http.Response, body bool) ([]byte, error)</span> {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	var err error
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	save := resp.Body
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	savecl := resp.ContentLength
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	if !body {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// For content length of zero. Make sure the body is an empty</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		<span class="comment">// reader, instead of returning error through failureToReadBody{}.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		if resp.ContentLength == 0 {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			resp.Body = emptyBody
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		} else {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>			resp.Body = failureToReadBody{}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>		}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	} else if resp.Body == nil {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		resp.Body = emptyBody
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	} else {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		save, resp.Body, err = drainBody(resp.Body)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		if err != nil {
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>			return nil, err
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	err = resp.Write(&amp;b)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	if err == errNoBody {
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		err = nil
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	resp.Body = save
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	resp.ContentLength = savecl
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	if err != nil {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>		return nil, err
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	return b.Bytes(), nil
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
</pre><p><a href="dump.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
