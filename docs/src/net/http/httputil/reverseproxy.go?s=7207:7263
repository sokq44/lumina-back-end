<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/httputil/reverseproxy.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./reverseproxy.go?s=7207:7263#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/httputil">httputil</a>/<span class="text-muted">reverseproxy.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/httputil">net/http/httputil</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// HTTP reverse proxy handler</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package httputil
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;mime&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;net/http/httptrace&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;net/http/internal/ascii&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http/httpguts&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// A ProxyRequest contains a request to be rewritten by a [ReverseProxy].</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>type ProxyRequest struct {
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	<span class="comment">// In is the request received by the proxy.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	<span class="comment">// The Rewrite function must not modify In.</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	In *http.Request
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	<span class="comment">// Out is the request which will be sent by the proxy.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// The Rewrite function may modify or replace this request.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// Hop-by-hop headers are removed from this request</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// before Rewrite is called.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	Out *http.Request
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// SetURL routes the outbound request to the scheme, host, and base path</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// provided in target. If the target&#39;s path is &#34;/base&#34; and the incoming</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// request was for &#34;/dir&#34;, the target request will be for &#34;/base/dir&#34;.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">// SetURL rewrites the outbound Host header to match the target&#39;s host.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// To preserve the inbound request&#39;s Host header (the default behavior</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// of [NewSingleHostReverseProxy]):</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	rewriteFunc := func(r *httputil.ProxyRequest) {</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//		r.SetURL(url)</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//		r.Out.Host = r.In.Host</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func (r *ProxyRequest) SetURL(target *url.URL) {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	rewriteRequestURL(r.Out, target)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	r.Out.Host = &#34;&#34;
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// SetXForwarded sets the X-Forwarded-For, X-Forwarded-Host, and</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// X-Forwarded-Proto headers of the outbound request.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">//   - The X-Forwarded-For header is set to the client IP address.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//   - The X-Forwarded-Host header is set to the host name requested</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//     by the client.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//   - The X-Forwarded-Proto header is set to &#34;http&#34; or &#34;https&#34;, depending</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//     on whether the inbound request was made on a TLS-enabled connection.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// If the outbound request contains an existing X-Forwarded-For header,</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// SetXForwarded appends the client IP address to it. To append to the</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// inbound request&#39;s X-Forwarded-For header (the default behavior of</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// [ReverseProxy] when using a Director function), copy the header</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// from the inbound request before calling SetXForwarded:</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//	rewriteFunc := func(r *httputil.ProxyRequest) {</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//		r.Out.Header[&#34;X-Forwarded-For&#34;] = r.In.Header[&#34;X-Forwarded-For&#34;]</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//		r.SetXForwarded()</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func (r *ProxyRequest) SetXForwarded() {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	clientIP, _, err := net.SplitHostPort(r.In.RemoteAddr)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	if err == nil {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		prior := r.Out.Header[&#34;X-Forwarded-For&#34;]
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		if len(prior) &gt; 0 {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>			clientIP = strings.Join(prior, &#34;, &#34;) + &#34;, &#34; + clientIP
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		r.Out.Header.Set(&#34;X-Forwarded-For&#34;, clientIP)
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	} else {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		r.Out.Header.Del(&#34;X-Forwarded-For&#34;)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	r.Out.Header.Set(&#34;X-Forwarded-Host&#34;, r.In.Host)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if r.In.TLS == nil {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		r.Out.Header.Set(&#34;X-Forwarded-Proto&#34;, &#34;http&#34;)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	} else {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		r.Out.Header.Set(&#34;X-Forwarded-Proto&#34;, &#34;https&#34;)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// ReverseProxy is an HTTP Handler that takes an incoming request and</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// sends it to another server, proxying the response back to the</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// client.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// 1xx responses are forwarded to the client if the underlying</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// transport supports ClientTrace.Got1xxResponse.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>type ReverseProxy struct {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// Rewrite must be a function which modifies</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// the request into a new request to be sent</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// using Transport. Its response is then copied</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// back to the original client unmodified.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// Rewrite must not access the provided ProxyRequest</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// or its contents after returning.</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// The Forwarded, X-Forwarded, X-Forwarded-Host,</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// and X-Forwarded-Proto headers are removed from the</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// outbound request before Rewrite is called. See also</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// the ProxyRequest.SetXForwarded method.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// Unparsable query parameters are removed from the</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// outbound request before Rewrite is called.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// The Rewrite function may copy the inbound URL&#39;s</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// RawQuery to the outbound URL to preserve the original</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// parameter string. Note that this can lead to security</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// issues if the proxy&#39;s interpretation of query parameters</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// does not match that of the downstream server.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// At most one of Rewrite or Director may be set.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	Rewrite func(*ProxyRequest)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Director is a function which modifies</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// the request into a new request to be sent</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// using Transport. Its response is then copied</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// back to the original client unmodified.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// Director must not access the provided Request</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// after returning.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// By default, the X-Forwarded-For header is set to the</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// value of the client IP address. If an X-Forwarded-For</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// header already exists, the client IP is appended to the</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// existing values. As a special case, if the header</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// exists in the Request.Header map but has a nil value</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// (such as when set by the Director func), the X-Forwarded-For</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// header is not modified.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// To prevent IP spoofing, be sure to delete any pre-existing</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// X-Forwarded-For header coming from the client or</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// an untrusted proxy.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// Hop-by-hop headers are removed from the request after</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// Director returns, which can remove headers added by</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// Director. Use a Rewrite function instead to ensure</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// modifications to the request are preserved.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// Unparsable query parameters are removed from the outbound</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// request if Request.Form is set after Director returns.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// At most one of Rewrite or Director may be set.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	Director func(*http.Request)
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// The transport used to perform proxy requests.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// If nil, http.DefaultTransport is used.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	Transport http.RoundTripper
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// FlushInterval specifies the flush interval</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// to flush to the client while copying the</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// response body.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// If zero, no periodic flushing is done.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// A negative value means to flush immediately</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// after each write to the client.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// The FlushInterval is ignored when ReverseProxy</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// recognizes a response as a streaming response, or</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// if its ContentLength is -1; for such responses, writes</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// are flushed to the client immediately.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	FlushInterval time.Duration
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// ErrorLog specifies an optional logger for errors</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// that occur when attempting to proxy the request.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// If nil, logging is done via the log package&#39;s standard logger.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	ErrorLog *log.Logger
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// BufferPool optionally specifies a buffer pool to</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// get byte slices for use by io.CopyBuffer when</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// copying HTTP response bodies.</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	BufferPool BufferPool
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// ModifyResponse is an optional function that modifies the</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// Response from the backend. It is called if the backend</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// returns a response at all, with any HTTP status code.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// If the backend is unreachable, the optional ErrorHandler is</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// called without any call to ModifyResponse.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// If ModifyResponse returns an error, ErrorHandler is called</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// with its error value. If ErrorHandler is nil, its default</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// implementation is used.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	ModifyResponse func(*http.Response) error
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// ErrorHandler is an optional function that handles errors</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// reaching the backend or errors from ModifyResponse.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// If nil, the default is to log the provided error and return</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// a 502 Status Bad Gateway response.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	ErrorHandler func(http.ResponseWriter, *http.Request, error)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// A BufferPool is an interface for getting and returning temporary</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// byte slices for use by [io.CopyBuffer].</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="selection">type BufferPool interface {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	Get() []byte
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	Put([]byte)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>func singleJoiningSlash(a, b string) string {
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	aslash := strings.HasSuffix(a, &#34;/&#34;)
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	bslash := strings.HasPrefix(b, &#34;/&#34;)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	switch {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	case aslash &amp;&amp; bslash:
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		return a + b[1:]
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	case !aslash &amp;&amp; !bslash:
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		return a + &#34;/&#34; + b
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	}
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	return a + b
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func joinURLPath(a, b *url.URL) (path, rawpath string) {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	if a.RawPath == &#34;&#34; &amp;&amp; b.RawPath == &#34;&#34; {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return singleJoiningSlash(a.Path, b.Path), &#34;&#34;
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// Same as singleJoiningSlash, but uses EscapedPath to determine</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// whether a slash should be added</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	apath := a.EscapedPath()
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	bpath := b.EscapedPath()
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	aslash := strings.HasSuffix(apath, &#34;/&#34;)
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	bslash := strings.HasPrefix(bpath, &#34;/&#34;)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	switch {
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	case aslash &amp;&amp; bslash:
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return a.Path + b.Path[1:], apath + bpath[1:]
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	case !aslash &amp;&amp; !bslash:
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>		return a.Path + &#34;/&#34; + b.Path, apath + &#34;/&#34; + bpath
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return a.Path + b.Path, apath + bpath
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// NewSingleHostReverseProxy returns a new [ReverseProxy] that routes</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// URLs to the scheme, host, and base path provided in target. If the</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// target&#39;s path is &#34;/base&#34; and the incoming request was for &#34;/dir&#34;,</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// the target request will be for /base/dir.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// NewSingleHostReverseProxy does not rewrite the Host header.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">// To customize the ReverseProxy behavior beyond what</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// NewSingleHostReverseProxy provides, use ReverseProxy directly</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// with a Rewrite function. The ProxyRequest SetURL method</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// may be used to route the outbound request. (Note that SetURL,</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// unlike NewSingleHostReverseProxy, rewrites the Host header</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// of the outbound request by default.)</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">//	proxy := &amp;ReverseProxy{</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">//		Rewrite: func(r *ProxyRequest) {</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">//			r.SetURL(target)</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">//			r.Out.Host = r.In.Host // if desired</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//		},</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	director := func(req *http.Request) {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		rewriteRequestURL(req, target)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	return &amp;ReverseProxy{Director: director}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>}
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func rewriteRequestURL(req *http.Request, target *url.URL) {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	targetQuery := target.RawQuery
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	req.URL.Scheme = target.Scheme
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	req.URL.Host = target.Host
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	req.URL.Path, req.URL.RawPath = joinURLPath(target, req.URL)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	if targetQuery == &#34;&#34; || req.URL.RawQuery == &#34;&#34; {
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		req.URL.RawQuery = targetQuery + req.URL.RawQuery
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	} else {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		req.URL.RawQuery = targetQuery + &#34;&amp;&#34; + req.URL.RawQuery
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func copyHeader(dst, src http.Header) {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	for k, vv := range src {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			dst.Add(k, v)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	}
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// Hop-by-hop headers. These are removed when sent to the backend.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// As of RFC 7230, hop-by-hop headers are required to appear in the</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// Connection header field. These are the headers defined by the</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// obsoleted RFC 2616 (section 13.5.1) and are used for backward</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// compatibility.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>var hopHeaders = []string{
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	&#34;Connection&#34;,
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	&#34;Proxy-Connection&#34;, <span class="comment">// non-standard but still sent by libcurl and rejected by e.g. google</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	&#34;Keep-Alive&#34;,
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	&#34;Proxy-Authenticate&#34;,
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	&#34;Proxy-Authorization&#34;,
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	&#34;Te&#34;,      <span class="comment">// canonicalized version of &#34;TE&#34;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	&#34;Trailer&#34;, <span class="comment">// not Trailers per URL above; https://www.rfc-editor.org/errata_search.php?eid=4522</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	&#34;Transfer-Encoding&#34;,
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	&#34;Upgrade&#34;,
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>func (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error) {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	p.logf(&#34;http: proxy error: %v&#34;, err)
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	rw.WriteHeader(http.StatusBadGateway)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>func (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error) {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if p.ErrorHandler != nil {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		return p.ErrorHandler
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	return p.defaultErrorHandler
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// modifyResponse conditionally runs the optional ModifyResponse hook</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// and reports whether the request should proceed.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if p.ModifyResponse == nil {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		return true
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if err := p.ModifyResponse(res); err != nil {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		res.Body.Close()
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, err)
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		return false
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	return true
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	transport := p.Transport
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	if transport == nil {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		transport = http.DefaultTransport
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	ctx := req.Context()
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	if ctx.Done() != nil {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		<span class="comment">// CloseNotifier predates context.Context, and has been</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// entirely superseded by it. If the request contains</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		<span class="comment">// a Context that carries a cancellation signal, don&#39;t</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		<span class="comment">// bother spinning up a goroutine to watch the CloseNotify</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		<span class="comment">// channel (if any).</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		<span class="comment">// If the request Context has a nil Done channel (which</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		<span class="comment">// means it is either context.Background, or a custom</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		<span class="comment">// Context implementation with no cancellation signal),</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		<span class="comment">// then consult the CloseNotifier if available.</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	} else if cn, ok := rw.(http.CloseNotifier); ok {
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		var cancel context.CancelFunc
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		ctx, cancel = context.WithCancel(ctx)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		defer cancel()
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		notifyChan := cn.CloseNotify()
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		go func() {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			select {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>			case &lt;-notifyChan:
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>				cancel()
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			case &lt;-ctx.Done():
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		}()
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	outreq := req.Clone(ctx)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	if req.ContentLength == 0 {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		outreq.Body = nil <span class="comment">// Issue 16036: nil Body for http.Transport retries</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	if outreq.Body != nil {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		<span class="comment">// Reading from the request body after returning from a handler is not</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		<span class="comment">// allowed, and the RoundTrip goroutine that reads the Body can outlive</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>		<span class="comment">// this handler. This can lead to a crash if the handler panics (see</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		<span class="comment">// Issue 46866). Although calling Close doesn&#39;t guarantee there isn&#39;t</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		<span class="comment">// any Read in flight after the handle returns, in practice it&#39;s safe to</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		<span class="comment">// read after closing it.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		defer outreq.Body.Close()
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	if outreq.Header == nil {
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		outreq.Header = make(http.Header) <span class="comment">// Issue 33142: historical behavior was to always allocate</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if (p.Director != nil) == (p.Rewrite != nil) {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, errors.New(&#34;ReverseProxy must have exactly one of Director or Rewrite set&#34;))
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		return
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if p.Director != nil {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		p.Director(outreq)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		if outreq.Form != nil {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			outreq.URL.RawQuery = cleanQueryParams(outreq.URL.RawQuery)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	outreq.Close = false
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	reqUpType := upgradeType(outreq.Header)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	if !ascii.IsPrint(reqUpType) {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;client tried to switch to invalid protocol %q&#34;, reqUpType))
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>		return
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	removeHopByHopHeaders(outreq.Header)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// Issue 21096: tell backend applications that care about trailer support</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	<span class="comment">// that we support trailers. (We do, but we don&#39;t go out of our way to</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// advertise that unless the incoming client request thought it was worth</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// mentioning.) Note that we look at req.Header, not outreq.Header, since</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// the latter has passed through removeHopByHopHeaders.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	if httpguts.HeaderValuesContainsToken(req.Header[&#34;Te&#34;], &#34;trailers&#34;) {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>		outreq.Header.Set(&#34;Te&#34;, &#34;trailers&#34;)
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	<span class="comment">// After stripping all the hop-by-hop connection headers above, add back any</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	<span class="comment">// necessary for protocol upgrades, such as for websockets.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	if reqUpType != &#34;&#34; {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		outreq.Header.Set(&#34;Connection&#34;, &#34;Upgrade&#34;)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		outreq.Header.Set(&#34;Upgrade&#34;, reqUpType)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if p.Rewrite != nil {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		<span class="comment">// Strip client-provided forwarding headers.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		<span class="comment">// The Rewrite func may use SetXForwarded to set new values</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		<span class="comment">// for these or copy the previous values from the inbound request.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		outreq.Header.Del(&#34;Forwarded&#34;)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		outreq.Header.Del(&#34;X-Forwarded-For&#34;)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>		outreq.Header.Del(&#34;X-Forwarded-Host&#34;)
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		outreq.Header.Del(&#34;X-Forwarded-Proto&#34;)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		<span class="comment">// Remove unparsable query parameters from the outbound request.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		outreq.URL.RawQuery = cleanQueryParams(outreq.URL.RawQuery)
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		pr := &amp;ProxyRequest{
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>			In:  req,
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>			Out: outreq,
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		p.Rewrite(pr)
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		outreq = pr.Out
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	} else {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		if clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>			<span class="comment">// If we aren&#39;t the first proxy retain prior</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>			<span class="comment">// X-Forwarded-For information as a comma+space</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			<span class="comment">// separated list and fold multiple headers into one.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			prior, ok := outreq.Header[&#34;X-Forwarded-For&#34;]
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			omit := ok &amp;&amp; prior == nil <span class="comment">// Issue 38079: nil now means don&#39;t populate the header</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>			if len(prior) &gt; 0 {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>				clientIP = strings.Join(prior, &#34;, &#34;) + &#34;, &#34; + clientIP
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			if !omit {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>				outreq.Header.Set(&#34;X-Forwarded-For&#34;, clientIP)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	if _, ok := outreq.Header[&#34;User-Agent&#34;]; !ok {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		<span class="comment">// If the outbound request doesn&#39;t have a User-Agent header set,</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		<span class="comment">// don&#39;t send the default Go HTTP client User-Agent.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		outreq.Header.Set(&#34;User-Agent&#34;, &#34;&#34;)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	trace := &amp;httptrace.ClientTrace{
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		Got1xxResponse: func(code int, header textproto.MIMEHeader) error {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			h := rw.Header()
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>			copyHeader(h, http.Header(header))
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			rw.WriteHeader(code)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			<span class="comment">// Clear headers, it&#39;s not automatically done by ResponseWriter.WriteHeader() for 1xx responses</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			clear(h)
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			return nil
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		},
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	outreq = outreq.WithContext(httptrace.WithClientTrace(outreq.Context(), trace))
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	res, err := transport.RoundTrip(outreq)
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	if err != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, outreq, err)
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		return
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">// Deal with 101 Switching Protocols responses: (WebSocket, h2c, etc)</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if res.StatusCode == http.StatusSwitchingProtocols {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		if !p.modifyResponse(rw, res, outreq) {
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>			return
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		}
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		p.handleUpgradeResponse(rw, outreq, res)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		return
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	removeHopByHopHeaders(res.Header)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	if !p.modifyResponse(rw, res, outreq) {
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	copyHeader(rw.Header(), res.Header)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	<span class="comment">// The &#34;Trailer&#34; header isn&#39;t included in the Transport&#39;s response,</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	<span class="comment">// at least for *http.Transport. Build it up from Trailer.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	announcedTrailers := len(res.Trailer)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	if announcedTrailers &gt; 0 {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		trailerKeys := make([]string, 0, len(res.Trailer))
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		for k := range res.Trailer {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>			trailerKeys = append(trailerKeys, k)
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		rw.Header().Add(&#34;Trailer&#34;, strings.Join(trailerKeys, &#34;, &#34;))
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	rw.WriteHeader(res.StatusCode)
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	err = p.copyResponse(rw, res.Body, p.flushInterval(res))
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	if err != nil {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		defer res.Body.Close()
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		<span class="comment">// Since we&#39;re streaming the response, if we run into an error all we can do</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		<span class="comment">// is abort the request. Issue 23643: ReverseProxy should use ErrAbortHandler</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		<span class="comment">// on read error while copying body.</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		if !shouldPanicOnCopyError(req) {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>			p.logf(&#34;suppressing panic for copyResponse error in test; copy error: %v&#34;, err)
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			return
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		panic(http.ErrAbortHandler)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	res.Body.Close() <span class="comment">// close now, instead of defer, to populate res.Trailer</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	if len(res.Trailer) &gt; 0 {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		<span class="comment">// Force chunking if we saw a response trailer.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		<span class="comment">// This prevents net/http from calculating the length for short</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		<span class="comment">// bodies and adding a Content-Length.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		http.NewResponseController(rw).Flush()
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if len(res.Trailer) == announcedTrailers {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		copyHeader(rw.Header(), res.Trailer)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		return
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	for k, vv := range res.Trailer {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		k = http.TrailerPrefix + k
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			rw.Header().Add(k, v)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>var inOurTests bool <span class="comment">// whether we&#39;re in our own tests</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// shouldPanicOnCopyError reports whether the reverse proxy should</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span><span class="comment">// panic with http.ErrAbortHandler. This is the right thing to do by</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span><span class="comment">// default, but Go 1.10 and earlier did not, so existing unit tests</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">// weren&#39;t expecting panics. Only panic in our own tests, or when</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">// running under the HTTP server.</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>func shouldPanicOnCopyError(req *http.Request) bool {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	if inOurTests {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		<span class="comment">// Our tests know to handle this panic.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		return true
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	if req.Context().Value(http.ServerContextKey) != nil {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		<span class="comment">// We seem to be running under an HTTP server, so</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		<span class="comment">// it&#39;ll recover the panic.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return true
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	<span class="comment">// Otherwise act like Go 1.10 and earlier to not break</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	<span class="comment">// existing tests.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	return false
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// removeHopByHopHeaders removes hop-by-hop headers.</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>func removeHopByHopHeaders(h http.Header) {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	<span class="comment">// RFC 7230, section 6.1: Remove headers listed in the &#34;Connection&#34; header.</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	for _, f := range h[&#34;Connection&#34;] {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		for _, sf := range strings.Split(f, &#34;,&#34;) {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			if sf = textproto.TrimString(sf); sf != &#34;&#34; {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>				h.Del(sf)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>			}
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		}
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	<span class="comment">// RFC 2616, section 13.5.1: Remove a set of known hop-by-hop headers.</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	<span class="comment">// This behavior is superseded by the RFC 7230 Connection header, but</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	<span class="comment">// preserve it for backwards compatibility.</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	for _, f := range hopHeaders {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>		h.Del(f)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span><span class="comment">// flushInterval returns the p.FlushInterval value, conditionally</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// overriding its value for a specific request/response.</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>func (p *ReverseProxy) flushInterval(res *http.Response) time.Duration {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	resCT := res.Header.Get(&#34;Content-Type&#34;)
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	<span class="comment">// For Server-Sent Events responses, flush immediately.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	<span class="comment">// The MIME type is defined in https://www.w3.org/TR/eventsource/#text-event-stream</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	if baseCT, _, _ := mime.ParseMediaType(resCT); baseCT == &#34;text/event-stream&#34; {
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		return -1 <span class="comment">// negative means immediately</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	<span class="comment">// We might have the case of streaming for which Content-Length might be unset.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	if res.ContentLength == -1 {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		return -1
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	return p.FlushInterval
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>func (p *ReverseProxy) copyResponse(dst http.ResponseWriter, src io.Reader, flushInterval time.Duration) error {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	var w io.Writer = dst
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	if flushInterval != 0 {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		mlw := &amp;maxLatencyWriter{
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			dst:     dst,
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>			flush:   http.NewResponseController(dst).Flush,
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>			latency: flushInterval,
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		defer mlw.stop()
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>		<span class="comment">// set up initial timer so headers get flushed even if body writes are delayed</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>		mlw.flushPending = true
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		mlw.t = time.AfterFunc(flushInterval, mlw.delayedFlush)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>		w = mlw
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	var buf []byte
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	if p.BufferPool != nil {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		buf = p.BufferPool.Get()
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		defer p.BufferPool.Put(buf)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	_, err := p.copyBuffer(w, src, buf)
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	return err
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span><span class="comment">// copyBuffer returns any write errors or non-EOF read errors, and the amount</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span><span class="comment">// of bytes written.</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error) {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	if len(buf) == 0 {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		buf = make([]byte, 32*1024)
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	var written int64
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	for {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		nr, rerr := src.Read(buf)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		if rerr != nil &amp;&amp; rerr != io.EOF &amp;&amp; rerr != context.Canceled {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			p.logf(&#34;httputil: ReverseProxy read error during body copy: %v&#34;, rerr)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		if nr &gt; 0 {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			nw, werr := dst.Write(buf[:nr])
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>			if nw &gt; 0 {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>				written += int64(nw)
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			if werr != nil {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>				return written, werr
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			if nr != nw {
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>				return written, io.ErrShortWrite
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>			}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		if rerr != nil {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			if rerr == io.EOF {
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>				rerr = nil
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>			}
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			return written, rerr
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	}
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>func (p *ReverseProxy) logf(format string, args ...any) {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	if p.ErrorLog != nil {
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		p.ErrorLog.Printf(format, args...)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	} else {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		log.Printf(format, args...)
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>type maxLatencyWriter struct {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	dst     io.Writer
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	flush   func() error
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	latency time.Duration <span class="comment">// non-zero; negative means to flush immediately</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	mu           sync.Mutex <span class="comment">// protects t, flushPending, and dst.Flush</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	t            *time.Timer
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	flushPending bool
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>func (m *maxLatencyWriter) Write(p []byte) (n int, err error) {
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	defer m.mu.Unlock()
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	n, err = m.dst.Write(p)
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	if m.latency &lt; 0 {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>		m.flush()
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		return
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	if m.flushPending {
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		return
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	if m.t == nil {
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		m.t = time.AfterFunc(m.latency, m.delayedFlush)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>	} else {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		m.t.Reset(m.latency)
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	m.flushPending = true
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>	return
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>func (m *maxLatencyWriter) delayedFlush() {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	defer m.mu.Unlock()
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	if !m.flushPending { <span class="comment">// if stop was called but AfterFunc already started this goroutine</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		return
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	m.flush()
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	m.flushPending = false
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>func (m *maxLatencyWriter) stop() {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	m.mu.Lock()
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	defer m.mu.Unlock()
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	m.flushPending = false
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	if m.t != nil {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		m.t.Stop()
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>func upgradeType(h http.Header) string {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	if !httpguts.HeaderValuesContainsToken(h[&#34;Connection&#34;], &#34;Upgrade&#34;) {
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	return h.Get(&#34;Upgrade&#34;)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>func (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response) {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	reqUpType := upgradeType(req.Header)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	resUpType := upgradeType(res.Header)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	if !ascii.IsPrint(resUpType) { <span class="comment">// We know reqUpType is ASCII, it&#39;s checked by the caller.</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;backend tried to switch to invalid protocol %q&#34;, resUpType))
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	if !ascii.EqualFold(reqUpType, resUpType) {
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;backend tried to switch protocol %q when %q was requested&#34;, resUpType, reqUpType))
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		return
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	backConn, ok := res.Body.(io.ReadWriteCloser)
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	if !ok {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;internal error: 101 switching protocols response with non-writable body&#34;))
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		return
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	rc := http.NewResponseController(rw)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	conn, brw, hijackErr := rc.Hijack()
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	if errors.Is(hijackErr, http.ErrNotSupported) {
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;can&#39;t switch protocols using non-Hijacker ResponseWriter type %T&#34;, rw))
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		return
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	backConnCloseCh := make(chan bool)
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	go func() {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		<span class="comment">// Ensure that the cancellation of a request closes the backend.</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		<span class="comment">// See issue https://golang.org/issue/35559.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		select {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		case &lt;-req.Context().Done():
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		case &lt;-backConnCloseCh:
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>		}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		backConn.Close()
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	}()
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	defer close(backConnCloseCh)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	if hijackErr != nil {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;Hijack failed on protocol switch: %v&#34;, hijackErr))
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		return
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	defer conn.Close()
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	copyHeader(rw.Header(), res.Header)
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	res.Header = rw.Header()
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	res.Body = nil <span class="comment">// so res.Write only writes the headers; we have res.Body in backConn above</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	if err := res.Write(brw); err != nil {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;response write: %v&#34;, err))
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		return
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	}
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	if err := brw.Flush(); err != nil {
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		p.getErrorHandler()(rw, req, fmt.Errorf(&#34;response flush: %v&#34;, err))
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		return
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	errc := make(chan error, 1)
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	spc := switchProtocolCopier{user: conn, backend: backConn}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	go spc.copyToBackend(errc)
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	go spc.copyFromBackend(errc)
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	&lt;-errc
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>}
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// switchProtocolCopier exists so goroutines proxying data back and</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span><span class="comment">// forth have nice names in stacks.</span>
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>type switchProtocolCopier struct {
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	user, backend io.ReadWriter
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>func (c switchProtocolCopier) copyFromBackend(errc chan&lt;- error) {
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	_, err := io.Copy(c.user, c.backend)
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	errc &lt;- err
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>}
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func (c switchProtocolCopier) copyToBackend(errc chan&lt;- error) {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	_, err := io.Copy(c.backend, c.user)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	errc &lt;- err
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>func cleanQueryParams(s string) string {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	reencode := func(s string) string {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		v, _ := url.ParseQuery(s)
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>		return v.Encode()
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); {
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		switch s[i] {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		case &#39;;&#39;:
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>			return reencode(s)
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		case &#39;%&#39;:
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>			if i+2 &gt;= len(s) || !ishex(s[i+1]) || !ishex(s[i+2]) {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>				return reencode(s)
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			}
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>			i += 3
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		default:
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>			i++
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	}
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	return s
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>func ishex(c byte) bool {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	switch {
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		return true
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39;:
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		return true
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	case &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39;:
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return true
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	return false
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>
</pre><p><a href="reverseproxy.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
