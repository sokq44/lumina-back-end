<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/internal/chunked.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../../index.html">GoDoc</a></div>
<a href="./chunked.go?s=859:903#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<a href="http://localhost:8080/src/net/http/internal">internal</a>/<span class="text-muted">chunked.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http/internal">net/http/internal</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// The wire protocol for HTTP&#39;s &#34;chunked&#34; Transfer-Encoding.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// Package internal contains HTTP internals shared by net/http and</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// net/http/httputil.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>package internal
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>import (
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>const maxLineLength = 4096 <span class="comment">// assumed &lt;= bufio.defaultBufSize</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>var ErrLineTooLong = errors.New(&#34;header line too long&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// NewChunkedReader returns a new chunkedReader that translates the data read from r</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// out of HTTP &#34;chunked&#34; format before returning it.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// The chunkedReader returns [io.EOF] when the final 0-length chunk is read.</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// NewChunkedReader is not needed by normal applications. The http package</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// automatically decodes chunking when reading response bodies.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="selection">func NewChunkedReader(r io.Reader) io.Reader</span> {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	br, ok := r.(*bufio.Reader)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	if !ok {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		br = bufio.NewReader(r)
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	return &amp;chunkedReader{r: br}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type chunkedReader struct {
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	r        *bufio.Reader
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	n        uint64 <span class="comment">// unread bytes in chunk</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	err      error
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	buf      [2]byte
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	checkEnd bool  <span class="comment">// whether need to check for \r\n chunk footer</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	excess   int64 <span class="comment">// &#34;excessive&#34; chunk overhead, for malicious sender detection</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>}
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>func (cr *chunkedReader) beginChunk() {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// chunk-size CRLF</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	var line []byte
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	line, cr.err = readChunkLine(cr.r)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if cr.err != nil {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		return
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	cr.excess += int64(len(line)) + 2 <span class="comment">// header, plus \r\n after the chunk data</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	line = trimTrailingWhitespace(line)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	line, cr.err = removeChunkExtension(line)
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	if cr.err != nil {
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>		return
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	cr.n, cr.err = parseHexUint(line)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	if cr.err != nil {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		return
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// A sender who sends one byte per chunk will send 5 bytes of overhead</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// for every byte of data. (&#34;1\r\nX\r\n&#34; to send &#34;X&#34;.)</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// We want to allow this, since streaming a byte at a time can be legitimate.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// A sender can use chunk extensions to add arbitrary amounts of additional</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">// data per byte read. (&#34;1;very long extension\r\nX\r\n&#34; to send &#34;X&#34;.)</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// We don&#39;t want to disallow extensions (although we discard them),</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// but we also don&#39;t want to allow a sender to reduce the signal/noise ratio</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// arbitrarily.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// We track the amount of excess overhead read,</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// and produce an error if it grows too large.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">// Currently, we say that we&#39;re willing to accept 16 bytes of overhead per chunk,</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// plus twice the amount of real data in the chunk.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	cr.excess -= 16 + (2 * int64(cr.n))
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	cr.excess = max(cr.excess, 0)
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	if cr.excess &gt; 16*1024 {
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		cr.err = errors.New(&#34;chunked encoding contains too much non-data&#34;)
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if cr.n == 0 {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		cr.err = io.EOF
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>func (cr *chunkedReader) chunkHeaderAvailable() bool {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	n := cr.r.Buffered()
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if n &gt; 0 {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		peek, _ := cr.r.Peek(n)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>		return bytes.IndexByte(peek, &#39;\n&#39;) &gt;= 0
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	return false
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>}
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>func (cr *chunkedReader) Read(b []uint8) (n int, err error) {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	for cr.err == nil {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		if cr.checkEnd {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			if n &gt; 0 &amp;&amp; cr.r.Buffered() &lt; 2 {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>				<span class="comment">// We have some data. Return early (per the io.Reader</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>				<span class="comment">// contract) instead of potentially blocking while</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>				<span class="comment">// reading more.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>				break
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			if _, cr.err = io.ReadFull(cr.r, cr.buf[:2]); cr.err == nil {
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>				if string(cr.buf[:]) != &#34;\r\n&#34; {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>					cr.err = errors.New(&#34;malformed chunked encoding&#34;)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>					break
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>				}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			} else {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>				if cr.err == io.EOF {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>					cr.err = io.ErrUnexpectedEOF
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>				}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>				break
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>			}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>			cr.checkEnd = false
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		if cr.n == 0 {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>			if n &gt; 0 &amp;&amp; !cr.chunkHeaderAvailable() {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>				<span class="comment">// We&#39;ve read enough. Don&#39;t potentially block</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>				<span class="comment">// reading a new chunk header.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>				break
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			cr.beginChunk()
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			continue
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>		if len(b) == 0 {
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			break
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		rbuf := b
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		if uint64(len(rbuf)) &gt; cr.n {
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			rbuf = rbuf[:cr.n]
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		}
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		var n0 int
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		n0, cr.err = cr.r.Read(rbuf)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		n += n0
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		b = b[n0:]
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		cr.n -= uint64(n0)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		<span class="comment">// If we&#39;re at the end of a chunk, read the next two</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">// bytes to verify they are &#34;\r\n&#34;.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		if cr.n == 0 &amp;&amp; cr.err == nil {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			cr.checkEnd = true
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>		} else if cr.err == io.EOF {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			cr.err = io.ErrUnexpectedEOF
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return n, cr.err
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// Read a line of bytes (up to \n) from b.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// Give up if the line exceeds maxLineLength.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// The returned bytes are owned by the bufio.Reader</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// so they are only valid until the next bufio read.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>func readChunkLine(b *bufio.Reader) ([]byte, error) {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	p, err := b.ReadSlice(&#39;\n&#39;)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	if err != nil {
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		<span class="comment">// We always know when EOF is coming.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>		<span class="comment">// If the caller asked for a line, there should be a line.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		if err == io.EOF {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			err = io.ErrUnexpectedEOF
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		} else if err == bufio.ErrBufferFull {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>			err = ErrLineTooLong
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		return nil, err
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if len(p) &gt;= maxLineLength {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return nil, ErrLineTooLong
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return p, nil
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func trimTrailingWhitespace(b []byte) []byte {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for len(b) &gt; 0 &amp;&amp; isASCIISpace(b[len(b)-1]) {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		b = b[:len(b)-1]
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	return b
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>func isASCIISpace(b byte) bool {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	return b == &#39; &#39; || b == &#39;\t&#39; || b == &#39;\n&#39; || b == &#39;\r&#39;
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>var semi = []byte(&#34;;&#34;)
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// removeChunkExtension removes any chunk-extension from p.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// For example,</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">//	&#34;0&#34; =&gt; &#34;0&#34;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">//	&#34;0;token&#34; =&gt; &#34;0&#34;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">//	&#34;0;token=val&#34; =&gt; &#34;0&#34;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">//	`0;token=&#34;quoted string&#34;` =&gt; &#34;0&#34;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func removeChunkExtension(p []byte) ([]byte, error) {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	p, _, _ = bytes.Cut(p, semi)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// TODO: care about exact syntax of chunk extensions? We&#39;re</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// ignoring and stripping them anyway. For now just never</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// return an error.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	return p, nil
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>}
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// &#34;chunked&#34; format before writing them to w. Closing the returned chunkedWriter</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// sends the final 0-length chunk that marks the end of the stream but does</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// not send the final CRLF that appears after trailers; trailers and the last</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span><span class="comment">// CRLF must be written separately.</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// NewChunkedWriter is not needed by normal applications. The http</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// package adds chunking automatically if handlers don&#39;t set a</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">// Content-Length header. Using newChunkedWriter inside a handler</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// would result in double chunking or chunking with a Content-Length</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// length, both of which are wrong.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func NewChunkedWriter(w io.Writer) io.WriteCloser {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	return &amp;chunkedWriter{w}
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>}
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// Writing to chunkedWriter translates to writing in HTTP chunked Transfer</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">// Encoding wire format to the underlying Wire chunkedWriter.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>type chunkedWriter struct {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	Wire io.Writer
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// Write the contents of data as one chunk to Wire.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// a bug since it does not check for success of [io.WriteString]</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>func (cw *chunkedWriter) Write(data []byte) (n int, err error) {
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t send 0-length data. It looks like EOF for chunked encoding.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if len(data) == 0 {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		return 0, nil
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if _, err = fmt.Fprintf(cw.Wire, &#34;%x\r\n&#34;, len(data)); err != nil {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		return 0, err
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if n, err = cw.Wire.Write(data); err != nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	if n != len(data) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>		err = io.ErrShortWrite
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>		return
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	}
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	if _, err = io.WriteString(cw.Wire, &#34;\r\n&#34;); err != nil {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>		return
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	if bw, ok := cw.Wire.(*FlushAfterChunkWriter); ok {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>		err = bw.Flush()
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	return
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>func (cw *chunkedWriter) Close() error {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	_, err := io.WriteString(cw.Wire, &#34;0\r\n&#34;)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	return err
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// FlushAfterChunkWriter signals from the caller of [NewChunkedWriter]</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// that each chunk should be followed by a flush. It is used by the</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// [net/http.Transport] code to keep the buffering behavior for headers and</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// trailers, but flush out chunks aggressively in the middle for</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// request bodies which may be generated slowly. See Issue 6574.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>type FlushAfterChunkWriter struct {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	*bufio.Writer
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func parseHexUint(v []byte) (n uint64, err error) {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	if len(v) == 0 {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		return 0, errors.New(&#34;empty hex number for chunk length&#34;)
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	for i, b := range v {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		switch {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		case &#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39;:
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			b = b - &#39;0&#39;
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		case &#39;a&#39; &lt;= b &amp;&amp; b &lt;= &#39;f&#39;:
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			b = b - &#39;a&#39; + 10
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		case &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;F&#39;:
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			b = b - &#39;A&#39; + 10
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		default:
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			return 0, errors.New(&#34;invalid byte in chunk length&#34;)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		if i == 16 {
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>			return 0, errors.New(&#34;http chunk length too large&#34;)
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		n &lt;&lt;= 4
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		n |= uint64(b)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
</pre><p><a href="chunked.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
