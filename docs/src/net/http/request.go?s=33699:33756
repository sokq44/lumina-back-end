<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/request.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./request.go?s=33699:33756#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">request.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// HTTP Request reading and parsing.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package http
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;mime&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;mime/multipart&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net/http/httptrace&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;net/http/internal/ascii&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	urlpkg &#34;net/url&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http/httpguts&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;golang.org/x/net/idna&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>)
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>const (
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	defaultMaxMemory = 32 &lt;&lt; 20 <span class="comment">// 32 MB</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// ErrMissingFile is returned by FormFile when the provided file field name</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// is either not present in the request or not a file field.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>var ErrMissingFile = errors.New(&#34;http: no such file&#34;)
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// ProtocolError represents an HTTP protocol error.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// Deprecated: Not all errors in the http package related to protocol errors</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// are of type ProtocolError.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>type ProtocolError struct {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	ErrorString string
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>func (pe *ProtocolError) Error() string { return pe.ErrorString }
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Is lets http.ErrNotSupported match errors.ErrUnsupported.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>func (pe *ProtocolError) Is(err error) bool {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return pe == ErrNotSupported &amp;&amp; err == errors.ErrUnsupported
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>var (
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// ErrNotSupported indicates that a feature is not supported.</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// It is returned by ResponseController methods to indicate that</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// the handler does not support the method, and by the Push method</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">// of Pusher implementations to indicate that HTTP/2 Push support</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// is not available.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	ErrNotSupported = &amp;ProtocolError{&#34;feature not supported&#34;}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrUnexpectedTrailer is no longer returned by</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// anything in the net/http package. Callers should not</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// compare errors against this variable.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	ErrUnexpectedTrailer = &amp;ProtocolError{&#34;trailer header without chunked transfer encoding&#34;}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// ErrMissingBoundary is returned by Request.MultipartReader when the</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	<span class="comment">// request&#39;s Content-Type does not include a &#34;boundary&#34; parameter.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	ErrMissingBoundary = &amp;ProtocolError{&#34;no multipart boundary param in Content-Type&#34;}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">// ErrNotMultipart is returned by Request.MultipartReader when the</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// request&#39;s Content-Type is not multipart/form-data.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	ErrNotMultipart = &amp;ProtocolError{&#34;request Content-Type isn&#39;t multipart/form-data&#34;}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrHeaderTooLong is no longer returned by</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	<span class="comment">// anything in the net/http package. Callers should not</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// compare errors against this variable.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	ErrHeaderTooLong = &amp;ProtocolError{&#34;header too long&#34;}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrShortBody is no longer returned by</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// anything in the net/http package. Callers should not</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// compare errors against this variable.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	ErrShortBody = &amp;ProtocolError{&#34;entity body too short&#34;}
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrMissingContentLength is no longer returned by</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	<span class="comment">// anything in the net/http package. Callers should not</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	<span class="comment">// compare errors against this variable.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	ErrMissingContentLength = &amp;ProtocolError{&#34;missing ContentLength in HEAD response&#34;}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>func badStringError(what, val string) error { return fmt.Errorf(&#34;%s %q&#34;, what, val) }
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Headers that Request.Write handles itself and should be skipped.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>var reqWriteExcludeHeader = map[string]bool{
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	&#34;Host&#34;:              true, <span class="comment">// not in Header map anyway</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	&#34;User-Agent&#34;:        true,
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	&#34;Content-Length&#34;:    true,
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	&#34;Transfer-Encoding&#34;: true,
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	&#34;Trailer&#34;:           true,
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// A Request represents an HTTP request received by a server</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// or to be sent by a client.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// The field semantics differ slightly between client and server</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// usage. In addition to the notes on the fields below, see the</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// documentation for [Request.Write] and [RoundTripper].</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>type Request struct {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Method specifies the HTTP method (GET, POST, PUT, etc.).</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// For client requests, an empty string means GET.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	Method string
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// URL specifies either the URI being requested (for server</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// requests) or the URL to access (for client requests).</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// For server requests, the URL is parsed from the URI</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// supplied on the Request-Line as stored in RequestURI.  For</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// most requests, fields other than Path and RawQuery will be</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// empty. (See RFC 7230, Section 5.3)</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// For client requests, the URL&#39;s Host specifies the server to</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// connect to, while the Request&#39;s Host field optionally</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">// specifies the Host header value to send in the HTTP</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// request.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	URL *url.URL
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// The protocol version for incoming server requests.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// For client requests, these fields are ignored. The HTTP</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// client code always uses either HTTP/1.1 or HTTP/2.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// See the docs on Transport for details.</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	Proto      string <span class="comment">// &#34;HTTP/1.0&#34;</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	ProtoMajor int    <span class="comment">// 1</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	ProtoMinor int    <span class="comment">// 0</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// Header contains the request header fields either received</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// by the server or to be sent by the client.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// If a server received a request with header lines,</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">//	Host: example.com</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">//	accept-encoding: gzip, deflate</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">//	Accept-Language: en-us</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//	fOO: Bar</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">//	foo: two</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// then</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">//	Header = map[string][]string{</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">//		&#34;Accept-Encoding&#34;: {&#34;gzip, deflate&#34;},</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">//		&#34;Accept-Language&#34;: {&#34;en-us&#34;},</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">//		&#34;Foo&#34;: {&#34;Bar&#34;, &#34;two&#34;},</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">//	}</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// For incoming requests, the Host header is promoted to the</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// Request.Host field and removed from the Header map.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// HTTP defines that header names are case-insensitive. The</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// request parser implements this by using CanonicalHeaderKey,</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// making the first character and any characters following a</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// hyphen uppercase and the rest lowercase.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// For client requests, certain headers such as Content-Length</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// and Connection are automatically written when needed and</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// values in Header may be ignored. See the documentation</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// for the Request.Write method.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	Header Header
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// Body is the request&#39;s body.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// For client requests, a nil body means the request has no</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// body, such as a GET request. The HTTP Client&#39;s Transport</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// is responsible for calling the Close method.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// For server requests, the Request Body is always non-nil</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">// but will return EOF immediately when no body is present.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// The Server will close the request body. The ServeHTTP</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// Handler does not need to.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// Body must allow Read to be called concurrently with Close.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// In particular, calling Close should unblock a Read waiting</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// for input.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	Body io.ReadCloser
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// GetBody defines an optional func to return a new copy of</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// Body. It is used for client requests when a redirect requires</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// reading the body more than once. Use of GetBody still</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// requires setting Body.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// For server requests, it is unused.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	GetBody func() (io.ReadCloser, error)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// ContentLength records the length of the associated content.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// The value -1 indicates that the length is unknown.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// Values &gt;= 0 indicate that the given number of bytes may</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// be read from Body.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// For client requests, a value of 0 with a non-nil Body is</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// also treated as unknown.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	ContentLength int64
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// TransferEncoding lists the transfer encodings from outermost to</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// innermost. An empty list denotes the &#34;identity&#34; encoding.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// TransferEncoding can usually be ignored; chunked encoding is</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// automatically added and removed as necessary when sending and</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// receiving requests.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	TransferEncoding []string
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// Close indicates whether to close the connection after</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">// replying to this request (for servers) or after sending this</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// request and reading its response (for clients).</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// For server requests, the HTTP server handles this automatically</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// and this field is not needed by Handlers.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// For client requests, setting this field prevents re-use of</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// TCP connections between requests to the same hosts, as if</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// Transport.DisableKeepAlives were set.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	Close bool
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// For server requests, Host specifies the host on which the</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// is either the value of the &#34;Host&#34; header or the host name</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// given in the URL itself. For HTTP/2, it is the value of the</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">// &#34;:authority&#34; pseudo-header field.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// It may be of the form &#34;host:port&#34;. For international domain</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// names, Host may be in Punycode or Unicode form. Use</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// golang.org/x/net/idna to convert it to either format if</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// needed.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// To prevent DNS rebinding attacks, server Handlers should</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// validate that the Host header has a value for which the</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// Handler considers itself authoritative. The included</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// ServeMux supports patterns registered to particular host</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// names and thus protects its registered Handlers.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// For client requests, Host optionally overrides the Host</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// header to send. If empty, the Request.Write method uses</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// the value of URL.Host. Host may contain an international</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">// domain name.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	Host string
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// Form contains the parsed form data, including both the URL</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// field&#39;s query parameters and the PATCH, POST, or PUT form data.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// This field is only available after ParseForm is called.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// The HTTP client ignores Form and uses Body instead.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	Form url.Values
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// PostForm contains the parsed form data from PATCH, POST</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">// or PUT body parameters.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// This field is only available after ParseForm is called.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// The HTTP client ignores PostForm and uses Body instead.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	PostForm url.Values
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// MultipartForm is the parsed multipart form, including file uploads.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	<span class="comment">// This field is only available after ParseMultipartForm is called.</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// The HTTP client ignores MultipartForm and uses Body instead.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	MultipartForm *multipart.Form
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// Trailer specifies additional headers that are sent after the request</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// body.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	<span class="comment">// For server requests, the Trailer map initially contains only the</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// trailer keys, with nil values. (The client declares which trailers it</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// will later send.)  While the handler is reading from Body, it must</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// not reference Trailer. After reading from Body returns EOF, Trailer</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">// can be read again and will contain non-nil values, if they were sent</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	<span class="comment">// by the client.</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// For client requests, Trailer must be initialized to a map containing</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">// the trailer keys to later send. The values may be nil or their final</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// values. The ContentLength must be 0 or -1, to send a chunked request.</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// After the HTTP request is sent the map values can be updated while</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// the request body is read. Once the body returns EOF, the caller must</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">// not mutate Trailer.</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// Few HTTP clients, servers, or proxies support HTTP trailers.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	Trailer Header
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// RemoteAddr allows HTTP servers and other software to record</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">// the network address that sent the request, usually for</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// logging. This field is not filled in by ReadRequest and</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// has no defined format. The HTTP server in this package</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// sets RemoteAddr to an &#34;IP:port&#34; address before invoking a</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// handler.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// This field is ignored by the HTTP client.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	RemoteAddr string
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// RequestURI is the unmodified request-target of the</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	<span class="comment">// Request-Line (RFC 7230, Section 3.1.1) as sent by the client</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// to a server. Usually the URL field should be used instead.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// It is an error to set this field in an HTTP client request.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	RequestURI string
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// TLS allows HTTP servers and other software to record</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// information about the TLS connection on which the request</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	<span class="comment">// was received. This field is not filled in by ReadRequest.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// The HTTP server in this package sets the field for</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// TLS-enabled connections before invoking a handler;</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// otherwise it leaves the field nil.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// This field is ignored by the HTTP client.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	TLS *tls.ConnectionState
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// Cancel is an optional channel whose closure indicates that the client</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// request should be regarded as canceled. Not all implementations of</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// RoundTripper may support Cancel.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// For server requests, this field is not applicable.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Set the Request&#39;s context with NewRequestWithContext</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// instead. If a Request&#39;s Cancel field and context are both</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	<span class="comment">// set, it is undefined whether Cancel is respected.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	Cancel &lt;-chan struct{}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// Response is the redirect response which caused this request</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// to be created. This field is only populated during client</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// redirects.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	Response *Response
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// ctx is either the client or server context. It should only</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// be modified via copying the whole Request using Clone or WithContext.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// It is unexported to prevent people from using Context wrong</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// and mutating the contexts held by callers of the same request.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	ctx context.Context
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	<span class="comment">// The following fields are for requests matched by ServeMux.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	pat         *pattern          <span class="comment">// the pattern that matched</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	matches     []string          <span class="comment">// values for the matching wildcards in pat</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	otherValues map[string]string <span class="comment">// for calls to SetPathValue that don&#39;t match a wildcard</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// Context returns the request&#39;s context. To change the context, use</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// [Request.Clone] or [Request.WithContext].</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// The returned context is always non-nil; it defaults to the</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// background context.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// For outgoing client requests, the context controls cancellation.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// For incoming server requests, the context is canceled when the</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// client&#39;s connection closes, the request is canceled (with HTTP/2),</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// or when the ServeHTTP method returns.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>func (r *Request) Context() context.Context {
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	if r.ctx != nil {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		return r.ctx
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return context.Background()
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span><span class="comment">// WithContext returns a shallow copy of r with its context changed</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// to ctx. The provided ctx must be non-nil.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// For outgoing client request, the context controls the entire</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// lifetime of a request and its response: obtaining a connection,</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// sending the request, and reading the response headers and body.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// To create a new request with a context, use [NewRequestWithContext].</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// To make a deep copy of a request with a new context, use [Request.Clone].</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>func (r *Request) WithContext(ctx context.Context) *Request {
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		panic(&#34;nil context&#34;)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	r2 := new(Request)
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	*r2 = *r
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	r2.ctx = ctx
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	return r2
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// Clone returns a deep copy of r with its context changed to ctx.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// The provided ctx must be non-nil.</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// For an outgoing client request, the context controls the entire</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// lifetime of a request and its response: obtaining a connection,</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// sending the request, and reading the response headers and body.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>func (r *Request) Clone(ctx context.Context) *Request {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		panic(&#34;nil context&#34;)
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	r2 := new(Request)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	*r2 = *r
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	r2.ctx = ctx
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	r2.URL = cloneURL(r.URL)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if r.Header != nil {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		r2.Header = r.Header.Clone()
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	if r.Trailer != nil {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		r2.Trailer = r.Trailer.Clone()
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	if s := r.TransferEncoding; s != nil {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		s2 := make([]string, len(s))
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		copy(s2, s)
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		r2.TransferEncoding = s2
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	}
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	r2.Form = cloneURLValues(r.Form)
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	r2.PostForm = cloneURLValues(r.PostForm)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	r2.MultipartForm = cloneMultipartForm(r.MultipartForm)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// Copy matches and otherValues. See issue 61410.</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	if s := r.matches; s != nil {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>		s2 := make([]string, len(s))
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>		copy(s2, s)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		r2.matches = s2
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if s := r.otherValues; s != nil {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		s2 := make(map[string]string, len(s))
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		for k, v := range s {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			s2[k] = v
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		}
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		r2.otherValues = s2
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>	return r2
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// ProtoAtLeast reports whether the HTTP protocol used</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// in the request is at least major.minor.</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>func (r *Request) ProtoAtLeast(major, minor int) bool {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	return r.ProtoMajor &gt; major ||
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		r.ProtoMajor == major &amp;&amp; r.ProtoMinor &gt;= minor
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// UserAgent returns the client&#39;s User-Agent, if sent in the request.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func (r *Request) UserAgent() string {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	return r.Header.Get(&#34;User-Agent&#34;)
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">// Cookies parses and returns the HTTP cookies sent with the request.</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>func (r *Request) Cookies() []*Cookie {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	return readCookies(r.Header, &#34;&#34;)
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// ErrNoCookie is returned by Request&#39;s Cookie method when a cookie is not found.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>var ErrNoCookie = errors.New(&#34;http: named cookie not present&#34;)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// Cookie returns the named cookie provided in the request or</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// [ErrNoCookie] if not found.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// If multiple cookies match the given name, only one cookie will</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// be returned.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>func (r *Request) Cookie(name string) (*Cookie, error) {
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	if name == &#34;&#34; {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		return nil, ErrNoCookie
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	}
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	for _, c := range readCookies(r.Header, name) {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		return c, nil
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	return nil, ErrNoCookie
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">// AddCookie adds a cookie to the request. Per RFC 6265 section 5.4,</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// AddCookie does not attach more than one [Cookie] header field. That</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// means all cookies, if any, are written into the same line,</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// separated by semicolon.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">// AddCookie only sanitizes c&#39;s name and value, and does not sanitize</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// a Cookie header already present in the request.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>func (r *Request) AddCookie(c *Cookie) {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	s := fmt.Sprintf(&#34;%s=%s&#34;, sanitizeCookieName(c.Name), sanitizeCookieValue(c.Value))
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	if c := r.Header.Get(&#34;Cookie&#34;); c != &#34;&#34; {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		r.Header.Set(&#34;Cookie&#34;, c+&#34;; &#34;+s)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	} else {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		r.Header.Set(&#34;Cookie&#34;, s)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>}
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span><span class="comment">// Referer returns the referring URL, if sent in the request.</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// Referer is misspelled as in the request itself, a mistake from the</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// earliest days of HTTP.  This value can also be fetched from the</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// [Header] map as Header[&#34;Referer&#34;]; the benefit of making it available</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// as a method is that the compiler can diagnose programs that use the</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// alternate (correct English) spelling req.Referrer() but cannot</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// diagnose programs that use Header[&#34;Referrer&#34;].</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>func (r *Request) Referer() string {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	return r.Header.Get(&#34;Referer&#34;)
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span><span class="comment">// multipartByReader is a sentinel value.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// Its presence in Request.MultipartForm indicates that parsing of the request</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// body has been handed off to a MultipartReader instead of ParseMultipartForm.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>var multipartByReader = &amp;multipart.Form{
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	Value: make(map[string][]string),
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	File:  make(map[string][]*multipart.FileHeader),
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// MultipartReader returns a MIME multipart reader if this is a</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// multipart/form-data or a multipart/mixed POST request, else returns nil and an error.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">// Use this function instead of [Request.ParseMultipartForm] to</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// process the request body as a stream.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>func (r *Request) MultipartReader() (*multipart.Reader, error) {
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if r.MultipartForm == multipartByReader {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http: MultipartReader called twice&#34;)
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	if r.MultipartForm != nil {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		return nil, errors.New(&#34;http: multipart handled by ParseMultipartForm&#34;)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	}
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	r.MultipartForm = multipartByReader
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	return r.multipartReader(true)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func (r *Request) multipartReader(allowMixed bool) (*multipart.Reader, error) {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	v := r.Header.Get(&#34;Content-Type&#34;)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if v == &#34;&#34; {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		return nil, ErrNotMultipart
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	if r.Body == nil {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>		return nil, errors.New(&#34;missing form body&#34;)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	d, params, err := mime.ParseMediaType(v)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	if err != nil || !(d == &#34;multipart/form-data&#34; || allowMixed &amp;&amp; d == &#34;multipart/mixed&#34;) {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		return nil, ErrNotMultipart
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	}
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	boundary, ok := params[&#34;boundary&#34;]
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	if !ok {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		return nil, ErrMissingBoundary
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	}
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	return multipart.NewReader(r.Body, boundary), nil
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// isH2Upgrade reports whether r represents the http2 &#34;client preface&#34;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">// magic string.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>func (r *Request) isH2Upgrade() bool {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	return r.Method == &#34;PRI&#34; &amp;&amp; len(r.Header) == 0 &amp;&amp; r.URL.Path == &#34;*&#34; &amp;&amp; r.Proto == &#34;HTTP/2.0&#34;
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// Return value if nonempty, def otherwise.</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>func valueOrDefault(value, def string) string {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	if value != &#34;&#34; {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		return value
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	return def
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span><span class="comment">// NOTE: This is not intended to reflect the actual Go version being used.</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">// It was changed at the time of Go 1.1 release because the former User-Agent</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="comment">// had ended up blocked by some intrusion detection systems.</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span><span class="comment">// See https://codereview.appspot.com/7532043.</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>const defaultUserAgent = &#34;Go-http-client/1.1&#34;
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span><span class="comment">// Write writes an HTTP/1.1 request, which is the header and body, in wire format.</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// This method consults the following fields of the request:</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span><span class="comment">//	Host</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span><span class="comment">//	URL</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">//	Method (defaults to &#34;GET&#34;)</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">//	Header</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">//	ContentLength</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">//	TransferEncoding</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">//	Body</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span><span class="comment">// If Body is present, Content-Length is &lt;= 0 and [Request.TransferEncoding]</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span><span class="comment">// hasn&#39;t been set to &#34;identity&#34;, Write adds &#34;Transfer-Encoding:</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span><span class="comment">// chunked&#34; to the header. Body is closed after it is sent.</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>func (r *Request) Write(w io.Writer) error {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	return r.write(w, false, nil, nil)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// WriteProxy is like [Request.Write] but writes the request in the form</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// expected by an HTTP proxy. In particular, [Request.WriteProxy] writes the</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span><span class="comment">// initial Request-URI line of the request with an absolute URI, per</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span><span class="comment">// section 5.3 of RFC 7230, including the scheme and host.</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span><span class="comment">// In either case, WriteProxy also writes a Host header, using</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span><span class="comment">// either r.Host or r.URL.Host.</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>func (r *Request) WriteProxy(w io.Writer) error {
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	return r.write(w, true, nil, nil)
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// errMissingHost is returned by Write when there is no Host or URL present in</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// the Request.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>var errMissingHost = errors.New(&#34;http: Request.Write on Request with no Host or URL set&#34;)
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>
<span id="L572" class="ln">   572&nbsp;&nbsp;</span><span class="comment">// extraHeaders may be nil</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span><span class="comment">// waitForContinue may be nil</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// always closes body</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func (r *Request) write(w io.Writer, usingProxy bool, extraHeaders Header, waitForContinue func() bool) (err error) {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	trace := httptrace.ContextClientTrace(r.Context())
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteRequest != nil {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		defer func() {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>			trace.WroteRequest(httptrace.WroteRequestInfo{
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>				Err: err,
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>			})
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		}()
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	}
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	closed := false
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	defer func() {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		if closed {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			return
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>		}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		if closeErr := r.closeBody(); closeErr != nil &amp;&amp; err == nil {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			err = closeErr
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	}()
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>	<span class="comment">// Find the target host. Prefer the Host: header, but if that</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	<span class="comment">// is not given, use the host from the request URL.</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// Clean the host, in case it arrives with unexpected stuff in it.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	host := r.Host
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	if host == &#34;&#34; {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>		if r.URL == nil {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>			return errMissingHost
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		host = r.URL.Host
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	}
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	host, err = httpguts.PunycodeHostPort(host)
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if err != nil {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		return err
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	<span class="comment">// Validate that the Host header is a valid header in general,</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	<span class="comment">// but don&#39;t validate the host itself. This is sufficient to avoid</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	<span class="comment">// header or request smuggling via the Host field.</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	<span class="comment">// The server can (and will, if it&#39;s a net/http server) reject</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	<span class="comment">// the request if it doesn&#39;t consider the host valid.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	if !httpguts.ValidHostHeader(host) {
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>		<span class="comment">// Historically, we would truncate the Host header after &#39;/&#39; or &#39; &#39;.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>		<span class="comment">// Some users have relied on this truncation to convert a network</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>		<span class="comment">// address such as Unix domain socket path into a valid, ignored</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		<span class="comment">// Host header (see https://go.dev/issue/61431).</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		<span class="comment">// We don&#39;t preserve the truncation, because sending an altered</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>		<span class="comment">// header field opens a smuggling vector. Instead, zero out the</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		<span class="comment">// Host header entirely if it isn&#39;t valid. (An empty Host is valid;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		<span class="comment">// see RFC 9112 Section 3.2.)</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		<span class="comment">// Return an error if we&#39;re sending to a proxy, since the proxy</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		<span class="comment">// probably can&#39;t do anything useful with an empty Host header.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		if !usingProxy {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>			host = &#34;&#34;
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		} else {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			return errors.New(&#34;http: invalid Host header&#34;)
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	<span class="comment">// According to RFC 6874, an HTTP client, proxy, or other</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	<span class="comment">// intermediary must remove any IPv6 zone identifier attached</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	<span class="comment">// to an outgoing URI.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	host = removeZone(host)
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	ruri := r.URL.RequestURI()
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	if usingProxy &amp;&amp; r.URL.Scheme != &#34;&#34; &amp;&amp; r.URL.Opaque == &#34;&#34; {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		ruri = r.URL.Scheme + &#34;://&#34; + host + ruri
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	} else if r.Method == &#34;CONNECT&#34; &amp;&amp; r.URL.Path == &#34;&#34; {
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		<span class="comment">// CONNECT requests normally give just the host and port, not a full URL.</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>		ruri = host
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		if r.URL.Opaque != &#34;&#34; {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			ruri = r.URL.Opaque
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	if stringContainsCTLByte(ruri) {
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		return errors.New(&#34;net/http: can&#39;t write control character in Request.URL&#34;)
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	}
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	<span class="comment">// TODO: validate r.Method too? At least it&#39;s less likely to</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	<span class="comment">// come from an attacker (more likely to be a constant in</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	<span class="comment">// code).</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	<span class="comment">// Wrap the writer in a bufio Writer if it&#39;s not already buffered.</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t always call NewWriter, as that forces a bytes.Buffer</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	<span class="comment">// and other small bufio Writers to have a minimum 4k buffer</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	<span class="comment">// size.</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	var bw *bufio.Writer
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	if _, ok := w.(io.ByteWriter); !ok {
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		bw = bufio.NewWriter(w)
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		w = bw
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	_, err = fmt.Fprintf(w, &#34;%s %s HTTP/1.1\r\n&#34;, valueOrDefault(r.Method, &#34;GET&#34;), ruri)
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	if err != nil {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>		return err
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	<span class="comment">// Header lines</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	_, err = fmt.Fprintf(w, &#34;Host: %s\r\n&#34;, host)
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if err != nil {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		return err
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteHeaderField != nil {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>		trace.WroteHeaderField(&#34;Host&#34;, []string{host})
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	<span class="comment">// Use the defaultUserAgent unless the Header contains one, which</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	<span class="comment">// may be blank to not send the header.</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	userAgent := defaultUserAgent
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	if r.Header.has(&#34;User-Agent&#34;) {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		userAgent = r.Header.Get(&#34;User-Agent&#34;)
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	if userAgent != &#34;&#34; {
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		userAgent = headerNewlineToSpace.Replace(userAgent)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		userAgent = textproto.TrimString(userAgent)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		_, err = fmt.Fprintf(w, &#34;User-Agent: %s\r\n&#34;, userAgent)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		if err != nil {
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>			return err
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		}
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		if trace != nil &amp;&amp; trace.WroteHeaderField != nil {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>			trace.WroteHeaderField(&#34;User-Agent&#34;, []string{userAgent})
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	}
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	<span class="comment">// Process Body,ContentLength,Close,Trailer</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	tw, err := newTransferWriter(r)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	if err != nil {
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		return err
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	}
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	err = tw.writeHeader(w, trace)
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	if err != nil {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		return err
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	err = r.Header.writeSubset(w, reqWriteExcludeHeader, trace)
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	if err != nil {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		return err
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	if extraHeaders != nil {
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		err = extraHeaders.write(w, trace)
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>		if err != nil {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>			return err
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	_, err = io.WriteString(w, &#34;\r\n&#34;)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	if err != nil {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		return err
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	}
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	if trace != nil &amp;&amp; trace.WroteHeaders != nil {
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		trace.WroteHeaders()
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	}
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	<span class="comment">// Flush and wait for 100-continue if expected.</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	if waitForContinue != nil {
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>		if bw, ok := w.(*bufio.Writer); ok {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>			err = bw.Flush()
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>			if err != nil {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>				return err
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>			}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		}
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		if trace != nil &amp;&amp; trace.Wait100Continue != nil {
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			trace.Wait100Continue()
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>		if !waitForContinue() {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>			closed = true
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			r.closeBody()
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			return nil
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	if bw, ok := w.(*bufio.Writer); ok &amp;&amp; tw.FlushHeaders {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		if err := bw.Flush(); err != nil {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>			return err
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	<span class="comment">// Write body and trailer</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	closed = true
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	err = tw.writeBody(w)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	if err != nil {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		if tw.bodyReadError == err {
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>			err = requestBodyReadError{err}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		return err
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	if bw != nil {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		return bw.Flush()
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	return nil
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span><span class="comment">// requestBodyReadError wraps an error from (*Request).write to indicate</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span><span class="comment">// that the error came from a Read call on the Request.Body.</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span><span class="comment">// This error type should not escape the net/http package to users.</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>type requestBodyReadError struct{ error }
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>func idnaASCII(v string) (string, error) {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	<span class="comment">// TODO: Consider removing this check after verifying performance is okay.</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	<span class="comment">// Right now punycode verification, length checks, context checks, and the</span>
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	<span class="comment">// permissible character tests are all omitted. It also prevents the ToASCII</span>
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	<span class="comment">// call from salvaging an invalid IDN, when possible. As a result it may be</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	<span class="comment">// possible to have two IDNs that appear identical to the user where the</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	<span class="comment">// ASCII-only version causes an error downstream whereas the non-ASCII</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	<span class="comment">// version does not.</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	<span class="comment">// Note that for correct ASCII IDNs ToASCII will only do considerably more</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	<span class="comment">// work, but it will not cause an allocation.</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	if ascii.Is(v) {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		return v, nil
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	return idna.Lookup.ToASCII(v)
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span><span class="comment">// removeZone removes IPv6 zone identifier from host.</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span><span class="comment">// E.g., &#34;[fe80::1%en0]:8080&#34; to &#34;[fe80::1]:8080&#34;</span>
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>func removeZone(host string) string {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	if !strings.HasPrefix(host, &#34;[&#34;) {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		return host
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	i := strings.LastIndex(host, &#34;]&#34;)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		return host
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	}
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	j := strings.LastIndex(host[:i], &#34;%&#34;)
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>	if j &lt; 0 {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		return host
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	return host[:j] + host[i:]
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span><span class="comment">// ParseHTTPVersion parses an HTTP version string according to RFC 7230, section 2.6.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span><span class="comment">// &#34;HTTP/1.0&#34; returns (1, 0, true). Note that strings without</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span><span class="comment">// a minor version, such as &#34;HTTP/2&#34;, are not valid.</span>
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>func ParseHTTPVersion(vers string) (major, minor int, ok bool) {
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	switch vers {
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	case &#34;HTTP/1.1&#34;:
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		return 1, 1, true
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	case &#34;HTTP/1.0&#34;:
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		return 1, 0, true
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	}
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if !strings.HasPrefix(vers, &#34;HTTP/&#34;) {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		return 0, 0, false
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	if len(vers) != len(&#34;HTTP/X.Y&#34;) {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		return 0, 0, false
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	}
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	if vers[6] != &#39;.&#39; {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		return 0, 0, false
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	}
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>	maj, err := strconv.ParseUint(vers[5:6], 10, 0)
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	if err != nil {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return 0, 0, false
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	min, err := strconv.ParseUint(vers[7:8], 10, 0)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	if err != nil {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		return 0, 0, false
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	return int(maj), int(min), true
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>}
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>func validMethod(method string) bool {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	<span class="comment">/*
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	     Method         = &#34;OPTIONS&#34;                ; Section 9.2
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	                    | &#34;GET&#34;                    ; Section 9.3
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	                    | &#34;HEAD&#34;                   ; Section 9.4
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	                    | &#34;POST&#34;                   ; Section 9.5
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	                    | &#34;PUT&#34;                    ; Section 9.6
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	                    | &#34;DELETE&#34;                 ; Section 9.7
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	                    | &#34;TRACE&#34;                  ; Section 9.8
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	                    | &#34;CONNECT&#34;                ; Section 9.9
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	                    | extension-method
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	   extension-method = token
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	     token          = 1*&lt;any CHAR except CTLs or separators&gt;
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	*/</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	return len(method) &gt; 0 &amp;&amp; strings.IndexFunc(method, isNotToken) == -1
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span><span class="comment">// NewRequest wraps [NewRequestWithContext] using [context.Background].</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>func NewRequest(method, url string, body io.Reader) (*Request, error) {
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	return NewRequestWithContext(context.Background(), method, url, body)
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span><span class="comment">// NewRequestWithContext returns a new [Request] given a method, URL, and</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span><span class="comment">// optional body.</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span><span class="comment">// If the provided body is also an [io.Closer], the returned</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span><span class="comment">// [Request.Body] is set to body and will be closed (possibly</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span><span class="comment">// asynchronously) by the Client methods Do, Post, and PostForm,</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span><span class="comment">// and [Transport.RoundTrip].</span>
<span id="L866" class="ln">   866&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span><span class="comment">// NewRequestWithContext returns a Request suitable for use with</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span><span class="comment">// [Client.Do] or [Transport.RoundTrip]. To create a request for use with</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span><span class="comment">// testing a Server Handler, either use the [NewRequest] function in the</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span><span class="comment">// net/http/httptest package, use [ReadRequest], or manually update the</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span><span class="comment">// Request fields. For an outgoing client request, the context</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span><span class="comment">// controls the entire lifetime of a request and its response:</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">// obtaining a connection, sending the request, and reading the</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// response headers and body. See the Request type&#39;s documentation for</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// the difference between inbound and outbound request fields.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// If body is of type [*bytes.Buffer], [*bytes.Reader], or</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">// [*strings.Reader], the returned request&#39;s ContentLength is set to its</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span><span class="comment">// exact value (instead of -1), GetBody is populated (so 307 and 308</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">// redirects can replay the body), and Body is set to [NoBody] if the</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// ContentLength is 0.</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>func NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*Request, error) {
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	if method == &#34;&#34; {
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>		<span class="comment">// We document that &#34;&#34; means &#34;GET&#34; for Request.Method, and people have</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>		<span class="comment">// relied on that from NewRequest, so keep that working.</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>		<span class="comment">// We still enforce validMethod for non-empty methods.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>		method = &#34;GET&#34;
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	}
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	if !validMethod(method) {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;net/http: invalid method %q&#34;, method)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		return nil, errors.New(&#34;net/http: nil Context&#34;)
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	u, err := urlpkg.Parse(url)
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	if err != nil {
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		return nil, err
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>	}
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>	rc, ok := body.(io.ReadCloser)
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	if !ok &amp;&amp; body != nil {
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		rc = io.NopCloser(body)
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	<span class="comment">// The host&#39;s colon:port should be normalized. See Issue 14836.</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	u.Host = removeEmptyPort(u.Host)
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	req := &amp;Request{
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		ctx:        ctx,
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		Method:     method,
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		URL:        u,
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		Proto:      &#34;HTTP/1.1&#34;,
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		ProtoMajor: 1,
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>		ProtoMinor: 1,
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		Header:     make(Header),
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>		Body:       rc,
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		Host:       u.Host,
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	if body != nil {
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		switch v := body.(type) {
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		case *bytes.Buffer:
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>			req.ContentLength = int64(v.Len())
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>			buf := v.Bytes()
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>			req.GetBody = func() (io.ReadCloser, error) {
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>				r := bytes.NewReader(buf)
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>				return io.NopCloser(r), nil
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>			}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>		case *bytes.Reader:
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>			req.ContentLength = int64(v.Len())
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>			snapshot := *v
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>			req.GetBody = func() (io.ReadCloser, error) {
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>				r := snapshot
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>				return io.NopCloser(&amp;r), nil
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>			}
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		case *strings.Reader:
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>			req.ContentLength = int64(v.Len())
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>			snapshot := *v
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			req.GetBody = func() (io.ReadCloser, error) {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>				r := snapshot
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>				return io.NopCloser(&amp;r), nil
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>			}
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		default:
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>			<span class="comment">// This is where we&#39;d set it to -1 (at least</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>			<span class="comment">// if body != NoBody) to mean unknown, but</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>			<span class="comment">// that broke people during the Go 1.8 testing</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>			<span class="comment">// period. People depend on it being 0 I</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>			<span class="comment">// guess. Maybe retry later. See Issue 18117.</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		<span class="comment">// For client requests, Request.ContentLength of 0</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		<span class="comment">// means either actually 0, or unknown. The only way</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		<span class="comment">// to explicitly say that the ContentLength is zero is</span>
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		<span class="comment">// to set the Body to nil. But turns out too much code</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		<span class="comment">// depends on NewRequest returning a non-nil Body,</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>		<span class="comment">// so we use a well-known ReadCloser variable instead</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		<span class="comment">// and have the http package also treat that sentinel</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>		<span class="comment">// variable to mean explicitly zero.</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>		if req.GetBody != nil &amp;&amp; req.ContentLength == 0 {
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>			req.Body = NoBody
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>			req.GetBody = func() (io.ReadCloser, error) { return NoBody, nil }
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>		}
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	}
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>	return req, nil
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span><span class="comment">// BasicAuth returns the username and password provided in the request&#39;s</span>
<span id="L964" class="ln">   964&nbsp;&nbsp;</span><span class="comment">// Authorization header, if the request uses HTTP Basic Authentication.</span>
<span id="L965" class="ln">   965&nbsp;&nbsp;</span><span class="comment">// See RFC 2617, Section 2.</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>func (r *Request) BasicAuth() (username, password string, ok bool) {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>	auth := r.Header.Get(&#34;Authorization&#34;)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>	if auth == &#34;&#34; {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>	}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	return parseBasicAuth(auth)
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>}
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span><span class="comment">// parseBasicAuth parses an HTTP Basic Authentication string.</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span><span class="comment">// &#34;Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&#34; returns (&#34;Aladdin&#34;, &#34;open sesame&#34;, true).</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>func parseBasicAuth(auth string) (username, password string, ok bool) {
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>	const prefix = &#34;Basic &#34;
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	<span class="comment">// Case insensitive prefix match. See Issue 22736.</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	if len(auth) &lt; len(prefix) || !ascii.EqualFold(auth[:len(prefix)], prefix) {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	c, err := base64.StdEncoding.DecodeString(auth[len(prefix):])
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	if err != nil {
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	}
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	cs := string(c)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	username, password, ok = strings.Cut(cs, &#34;:&#34;)
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	if !ok {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	return username, password, true
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>}
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span><span class="comment">// SetBasicAuth sets the request&#39;s Authorization header to use HTTP</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span><span class="comment">// Basic Authentication with the provided username and password.</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span><span class="comment">// With HTTP Basic Authentication the provided username and password</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span><span class="comment">// are not encrypted. It should generally only be used in an HTTPS</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span><span class="comment">// request.</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span><span class="comment">// The username may not contain a colon. Some protocols may impose</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span><span class="comment">// additional requirements on pre-escaping the username and</span>
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span><span class="comment">// password. For instance, when used with OAuth2, both arguments must</span>
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span><span class="comment">// be URL encoded first with [url.QueryEscape].</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span><span class="selection">func (r *Request) SetBasicAuth(username, password string)</span> {
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	r.Header.Set(&#34;Authorization&#34;, &#34;Basic &#34;+basicAuth(username, password))
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>}
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span><span class="comment">// parseRequestLine parses &#34;GET /foo HTTP/1.1&#34; into its three parts.</span>
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>func parseRequestLine(line string) (method, requestURI, proto string, ok bool) {
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	method, rest, ok1 := strings.Cut(line, &#34; &#34;)
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	requestURI, proto, ok2 := strings.Cut(rest, &#34; &#34;)
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	if !ok1 || !ok2 {
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, &#34;&#34;, false
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>	}
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	return method, requestURI, proto, true
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>}
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>var textprotoReaderPool sync.Pool
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>func newTextprotoReader(br *bufio.Reader) *textproto.Reader {
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>	if v := textprotoReaderPool.Get(); v != nil {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>		tr := v.(*textproto.Reader)
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		tr.R = br
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		return tr
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	return textproto.NewReader(br)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>func putTextprotoReader(r *textproto.Reader) {
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	r.R = nil
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	textprotoReaderPool.Put(r)
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>}
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span><span class="comment">// ReadRequest reads and parses an incoming request from b.</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span><span class="comment">// ReadRequest is a low-level function and should only be used for</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span><span class="comment">// specialized applications; most code should use the [Server] to read</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span><span class="comment">// requests and handle them via the [Handler] interface. ReadRequest</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span><span class="comment">// only supports HTTP/1.x requests. For HTTP/2, use golang.org/x/net/http2.</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>func ReadRequest(b *bufio.Reader) (*Request, error) {
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	req, err := readRequest(b)
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	if err != nil {
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		return nil, err
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	}
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	delete(req.Header, &#34;Host&#34;)
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	return req, err
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>}
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>func readRequest(b *bufio.Reader) (req *Request, err error) {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	tp := newTextprotoReader(b)
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	defer putTextprotoReader(tp)
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	req = new(Request)
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	<span class="comment">// First line: GET /index.html HTTP/1.0</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	var s string
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	if s, err = tp.ReadLine(); err != nil {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		return nil, err
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	}
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>	defer func() {
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		if err == io.EOF {
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>			err = io.ErrUnexpectedEOF
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		}
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	}()
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>	var ok bool
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	req.Method, req.RequestURI, req.Proto, ok = parseRequestLine(s)
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	if !ok {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>		return nil, badStringError(&#34;malformed HTTP request&#34;, s)
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	}
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	if !validMethod(req.Method) {
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		return nil, badStringError(&#34;invalid method&#34;, req.Method)
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	rawurl := req.RequestURI
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	if req.ProtoMajor, req.ProtoMinor, ok = ParseHTTPVersion(req.Proto); !ok {
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>		return nil, badStringError(&#34;malformed HTTP version&#34;, req.Proto)
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	}
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	<span class="comment">// CONNECT requests are used two different ways, and neither uses a full URL:</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	<span class="comment">// The standard use is to tunnel HTTPS through an HTTP proxy.</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	<span class="comment">// It looks like &#34;CONNECT www.google.com:443 HTTP/1.1&#34;, and the parameter is</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	<span class="comment">// just the authority section of a URL. This information should go in req.URL.Host.</span>
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	<span class="comment">// The net/rpc package also uses CONNECT, but there the parameter is a path</span>
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	<span class="comment">// that starts with a slash. It can be parsed with the regular URL parser,</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	<span class="comment">// and the path will end up in req.URL.Path, where it needs to be in order for</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	<span class="comment">// RPC to work.</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>	justAuthority := req.Method == &#34;CONNECT&#34; &amp;&amp; !strings.HasPrefix(rawurl, &#34;/&#34;)
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>	if justAuthority {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>		rawurl = &#34;http://&#34; + rawurl
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	}
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	if req.URL, err = url.ParseRequestURI(rawurl); err != nil {
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		return nil, err
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	}
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	if justAuthority {
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>		<span class="comment">// Strip the bogus &#34;http://&#34; back off.</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		req.URL.Scheme = &#34;&#34;
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	}
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	<span class="comment">// Subsequent lines: Key: value.</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	mimeHeader, err := tp.ReadMIMEHeader()
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>	if err != nil {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>		return nil, err
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	}
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>	req.Header = Header(mimeHeader)
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	if len(req.Header[&#34;Host&#34;]) &gt; 1 {
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;too many Host headers&#34;)
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	}
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	<span class="comment">// RFC 7230, section 5.3: Must treat</span>
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	<span class="comment">//	GET /index.html HTTP/1.1</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	<span class="comment">//	Host: www.google.com</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	<span class="comment">// and</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	<span class="comment">//	GET http://www.google.com/index.html HTTP/1.1</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	<span class="comment">//	Host: doesntmatter</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	<span class="comment">// the same. In the second case, any Host line is ignored.</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	req.Host = req.URL.Host
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	if req.Host == &#34;&#34; {
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		req.Host = req.Header.get(&#34;Host&#34;)
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	fixPragmaCacheControl(req.Header)
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>	req.Close = shouldClose(req.ProtoMajor, req.ProtoMinor, req.Header, false)
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>	err = readTransfer(req, b)
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>	if err != nil {
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>		return nil, err
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	}
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	if req.isH2Upgrade() {
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		<span class="comment">// Because it&#39;s neither chunked, nor declared:</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>		req.ContentLength = -1
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>		<span class="comment">// We want to give handlers a chance to hijack the</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>		<span class="comment">// connection, but we need to prevent the Server from</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		<span class="comment">// dealing with the connection further if it&#39;s not</span>
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		<span class="comment">// hijacked. Set Close to ensure that:</span>
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		req.Close = true
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	return req, nil
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>}
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span><span class="comment">// MaxBytesReader is similar to [io.LimitReader] but is intended for</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span><span class="comment">// limiting the size of incoming request bodies. In contrast to</span>
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span><span class="comment">// io.LimitReader, MaxBytesReader&#39;s result is a ReadCloser, returns a</span>
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span><span class="comment">// non-nil error of type [*MaxBytesError] for a Read beyond the limit,</span>
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span><span class="comment">// and closes the underlying reader when its Close method is called.</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span><span class="comment">// MaxBytesReader prevents clients from accidentally or maliciously</span>
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span><span class="comment">// sending a large request and wasting server resources. If possible,</span>
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span><span class="comment">// it tells the [ResponseWriter] to close the connection after the limit</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span><span class="comment">// has been reached.</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser {
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	if n &lt; 0 { <span class="comment">// Treat negative limits as equivalent to 0.</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>		n = 0
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	}
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	return &amp;maxBytesReader{w: w, r: r, i: n, n: n}
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>}
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span><span class="comment">// MaxBytesError is returned by [MaxBytesReader] when its read limit is exceeded.</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>type MaxBytesError struct {
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>	Limit int64
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>}
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>func (e *MaxBytesError) Error() string {
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>	<span class="comment">// Due to Hyrum&#39;s law, this text cannot be changed.</span>
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>	return &#34;http: request body too large&#34;
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>type maxBytesReader struct {
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>	w   ResponseWriter
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>	r   io.ReadCloser <span class="comment">// underlying reader</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>	i   int64         <span class="comment">// max bytes initially, for MaxBytesError</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	n   int64         <span class="comment">// max bytes remaining</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	err error         <span class="comment">// sticky error</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>}
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>func (l *maxBytesReader) Read(p []byte) (n int, err error) {
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	if l.err != nil {
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>		return 0, l.err
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>	}
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>	if len(p) == 0 {
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		return 0, nil
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	}
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	<span class="comment">// If they asked for a 32KB byte read but only 5 bytes are</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	<span class="comment">// remaining, no need to read 32KB. 6 bytes will answer the</span>
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	<span class="comment">// question of the whether we hit the limit or go past it.</span>
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	<span class="comment">// 0 &lt; len(p) &lt; 2^63</span>
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	if int64(len(p))-1 &gt; l.n {
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		p = p[:l.n+1]
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	n, err = l.r.Read(p)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	if int64(n) &lt;= l.n {
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>		l.n -= int64(n)
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>		l.err = err
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>		return n, err
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	}
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>	n = int(l.n)
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	l.n = 0
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	<span class="comment">// The server code and client code both use</span>
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>	<span class="comment">// maxBytesReader. This &#34;requestTooLarge&#34; check is</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	<span class="comment">// only used by the server code. To prevent binaries</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	<span class="comment">// which only using the HTTP Client code (such as</span>
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>	<span class="comment">// cmd/go) from also linking in the HTTP server, don&#39;t</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>	<span class="comment">// use a static type assertion to the server</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>	<span class="comment">// &#34;*response&#34; type. Check this interface instead:</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>	type requestTooLarger interface {
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>		requestTooLarge()
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	}
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>	if res, ok := l.w.(requestTooLarger); ok {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>		res.requestTooLarge()
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	}
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>	l.err = &amp;MaxBytesError{l.i}
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	return n, l.err
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>}
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>func (l *maxBytesReader) Close() error {
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	return l.r.Close()
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>}
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>func copyValues(dst, src url.Values) {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>	for k, vs := range src {
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>		dst[k] = append(dst[k], vs...)
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	}
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>}
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>func parsePostForm(r *Request) (vs url.Values, err error) {
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	if r.Body == nil {
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>		err = errors.New(&#34;missing form body&#34;)
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		return
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>	}
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>	ct := r.Header.Get(&#34;Content-Type&#34;)
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	<span class="comment">// RFC 7231, section 3.1.1.5 - empty type</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>	<span class="comment">//   MAY be treated as application/octet-stream</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>	if ct == &#34;&#34; {
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>		ct = &#34;application/octet-stream&#34;
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>	}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>	ct, _, err = mime.ParseMediaType(ct)
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>	switch {
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	case ct == &#34;application/x-www-form-urlencoded&#34;:
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		var reader io.Reader = r.Body
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>		maxFormSize := int64(1&lt;&lt;63 - 1)
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>		if _, ok := r.Body.(*maxBytesReader); !ok {
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>			maxFormSize = int64(10 &lt;&lt; 20) <span class="comment">// 10 MB is a lot of text.</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			reader = io.LimitReader(r.Body, maxFormSize+1)
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>		}
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>		b, e := io.ReadAll(reader)
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>		if e != nil {
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>			if err == nil {
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>				err = e
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>			}
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>			break
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>		}
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>		if int64(len(b)) &gt; maxFormSize {
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>			err = errors.New(&#34;http: POST too large&#34;)
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>			return
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>		}
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		vs, e = url.ParseQuery(string(b))
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		if err == nil {
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>			err = e
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		}
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	case ct == &#34;multipart/form-data&#34;:
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>		<span class="comment">// handled by ParseMultipartForm (which is calling us, or should be)</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>		<span class="comment">// TODO(bradfitz): there are too many possible</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>		<span class="comment">// orders to call too many functions here.</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>		<span class="comment">// Clean this up and write more tests.</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>		<span class="comment">// request_test.go contains the start of this,</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>		<span class="comment">// in TestParseMultipartFormOrder and others.</span>
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>	}
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	return
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>}
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span><span class="comment">// ParseForm populates r.Form and r.PostForm.</span>
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span><span class="comment">// For all requests, ParseForm parses the raw query from the URL and updates</span>
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span><span class="comment">// r.Form.</span>
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span><span class="comment">// For POST, PUT, and PATCH requests, it also reads the request body, parses it</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span><span class="comment">// as a form and puts the results into both r.PostForm and r.Form. Request body</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span><span class="comment">// parameters take precedence over URL query string values in r.Form.</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span><span class="comment">// If the request Body&#39;s size has not already been limited by [MaxBytesReader],</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span><span class="comment">// the size is capped at 10MB.</span>
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span><span class="comment">// For other HTTP methods, or when the Content-Type is not</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span><span class="comment">// application/x-www-form-urlencoded, the request Body is not read, and</span>
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span><span class="comment">// r.PostForm is initialized to a non-nil, empty value.</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span><span class="comment">// [Request.ParseMultipartForm] calls ParseForm automatically.</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span><span class="comment">// ParseForm is idempotent.</span>
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>func (r *Request) ParseForm() error {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	var err error
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>	if r.PostForm == nil {
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>		if r.Method == &#34;POST&#34; || r.Method == &#34;PUT&#34; || r.Method == &#34;PATCH&#34; {
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>			r.PostForm, err = parsePostForm(r)
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>		}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>		if r.PostForm == nil {
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>			r.PostForm = make(url.Values)
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>		}
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>	}
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	if r.Form == nil {
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>		if len(r.PostForm) &gt; 0 {
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>			r.Form = make(url.Values)
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>			copyValues(r.Form, r.PostForm)
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>		}
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>		var newValues url.Values
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>		if r.URL != nil {
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>			var e error
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>			newValues, e = url.ParseQuery(r.URL.RawQuery)
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>			if err == nil {
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>				err = e
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>			}
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>		}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>		if newValues == nil {
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>			newValues = make(url.Values)
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>		}
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>		if r.Form == nil {
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>			r.Form = newValues
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>		} else {
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>			copyValues(r.Form, newValues)
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>		}
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>	}
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	return err
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>}
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span><span class="comment">// ParseMultipartForm parses a request body as multipart/form-data.</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span><span class="comment">// The whole request body is parsed and up to a total of maxMemory bytes of</span>
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span><span class="comment">// its file parts are stored in memory, with the remainder stored on</span>
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span><span class="comment">// disk in temporary files.</span>
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span><span class="comment">// ParseMultipartForm calls [Request.ParseForm] if necessary.</span>
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span><span class="comment">// If ParseForm returns an error, ParseMultipartForm returns it but also</span>
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span><span class="comment">// continues parsing the request body.</span>
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span><span class="comment">// After one call to ParseMultipartForm, subsequent calls have no effect.</span>
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>func (r *Request) ParseMultipartForm(maxMemory int64) error {
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	if r.MultipartForm == multipartByReader {
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>		return errors.New(&#34;http: multipart handled by MultipartReader&#34;)
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	}
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>	var parseFormErr error
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>	if r.Form == nil {
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>		<span class="comment">// Let errors in ParseForm fall through, and just</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>		<span class="comment">// return it at the end.</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>		parseFormErr = r.ParseForm()
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	}
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	if r.MultipartForm != nil {
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		return nil
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	}
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>	mr, err := r.multipartReader(false)
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>	if err != nil {
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>		return err
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>	}
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	f, err := mr.ReadForm(maxMemory)
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	if err != nil {
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>		return err
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	}
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	if r.PostForm == nil {
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>		r.PostForm = make(url.Values)
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>	}
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	for k, v := range f.Value {
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>		r.Form[k] = append(r.Form[k], v...)
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>		<span class="comment">// r.PostForm should also be populated. See Issue 9305.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>		r.PostForm[k] = append(r.PostForm[k], v...)
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	}
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	r.MultipartForm = f
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	return parseFormErr
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>}
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span><span class="comment">// FormValue returns the first value for the named component of the query.</span>
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span><span class="comment">// The precedence order:</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span><span class="comment">//  1. application/x-www-form-urlencoded form body (POST, PUT, PATCH only)</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span><span class="comment">//  2. query parameters (always)</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span><span class="comment">//  3. multipart/form-data form body (always)</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span><span class="comment">// FormValue calls [Request.ParseMultipartForm] and [Request.ParseForm]</span>
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span><span class="comment">// if necessary and ignores any errors returned by these functions.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span><span class="comment">// If key is not present, FormValue returns the empty string.</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span><span class="comment">// To access multiple values of the same key, call ParseForm and</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span><span class="comment">// then inspect [Request.Form] directly.</span>
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>func (r *Request) FormValue(key string) string {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>	if r.Form == nil {
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>		r.ParseMultipartForm(defaultMaxMemory)
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>	}
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>	if vs := r.Form[key]; len(vs) &gt; 0 {
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>		return vs[0]
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>	}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>}
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span><span class="comment">// PostFormValue returns the first value for the named component of the POST,</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span><span class="comment">// PUT, or PATCH request body. URL query parameters are ignored.</span>
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span><span class="comment">// PostFormValue calls [Request.ParseMultipartForm] and [Request.ParseForm] if necessary and ignores</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span><span class="comment">// any errors returned by these functions.</span>
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span><span class="comment">// If key is not present, PostFormValue returns the empty string.</span>
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>func (r *Request) PostFormValue(key string) string {
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	if r.PostForm == nil {
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>		r.ParseMultipartForm(defaultMaxMemory)
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>	}
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>	if vs := r.PostForm[key]; len(vs) &gt; 0 {
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>		return vs[0]
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>	}
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>}
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span><span class="comment">// FormFile returns the first file for the provided form key.</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span><span class="comment">// FormFile calls [Request.ParseMultipartForm] and [Request.ParseForm] if necessary.</span>
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error) {
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>	if r.MultipartForm == multipartByReader {
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>		return nil, nil, errors.New(&#34;http: multipart handled by MultipartReader&#34;)
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>	}
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	if r.MultipartForm == nil {
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>		err := r.ParseMultipartForm(defaultMaxMemory)
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>		if err != nil {
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>			return nil, nil, err
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>		}
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	}
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	if r.MultipartForm != nil &amp;&amp; r.MultipartForm.File != nil {
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>		if fhs := r.MultipartForm.File[key]; len(fhs) &gt; 0 {
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>			f, err := fhs[0].Open()
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>			return f, fhs[0], err
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		}
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	}
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	return nil, nil, ErrMissingFile
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>}
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span><span class="comment">// PathValue returns the value for the named path wildcard in the [ServeMux] pattern</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span><span class="comment">// that matched the request.</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// It returns the empty string if the request was not matched against a pattern</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span><span class="comment">// or there is no such wildcard in the pattern.</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>func (r *Request) PathValue(name string) string {
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>	if i := r.patIndex(name); i &gt;= 0 {
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>		return r.matches[i]
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>	}
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>	return r.otherValues[name]
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>}
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span><span class="comment">// SetPathValue sets name to value, so that subsequent calls to r.PathValue(name)</span>
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span><span class="comment">// return value.</span>
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>func (r *Request) SetPathValue(name, value string) {
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>	if i := r.patIndex(name); i &gt;= 0 {
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		r.matches[i] = value
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>	} else {
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		if r.otherValues == nil {
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>			r.otherValues = map[string]string{}
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>		}
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>		r.otherValues[name] = value
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>	}
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>}
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span><span class="comment">// patIndex returns the index of name in the list of named wildcards of the</span>
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span><span class="comment">// request&#39;s pattern, or -1 if there is no such name.</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>func (r *Request) patIndex(name string) int {
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>	<span class="comment">// The linear search seems expensive compared to a map, but just creating the map</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>	<span class="comment">// takes a lot of time, and most patterns will just have a couple of wildcards.</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>	if r.pat == nil {
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>		return -1
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>	}
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	i := 0
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	for _, seg := range r.pat.segments {
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>		if seg.wild &amp;&amp; seg.s != &#34;&#34; {
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>			if name == seg.s {
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>				return i
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>			}
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>			i++
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>		}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	}
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	return -1
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>}
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>func (r *Request) expectsContinue() bool {
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>	return hasToken(r.Header.get(&#34;Expect&#34;), &#34;100-continue&#34;)
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>}
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>func (r *Request) wantsHttp10KeepAlive() bool {
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	if r.ProtoMajor != 1 || r.ProtoMinor != 0 {
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>		return false
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>	}
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>	return hasToken(r.Header.get(&#34;Connection&#34;), &#34;keep-alive&#34;)
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>}
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>func (r *Request) wantsClose() bool {
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>	if r.Close {
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>		return true
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>	}
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>	return hasToken(r.Header.get(&#34;Connection&#34;), &#34;close&#34;)
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>func (r *Request) closeBody() error {
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>	if r.Body == nil {
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>		return nil
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>	}
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>	return r.Body.Close()
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>}
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>func (r *Request) isReplayable() bool {
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	if r.Body == nil || r.Body == NoBody || r.GetBody != nil {
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>		switch valueOrDefault(r.Method, &#34;GET&#34;) {
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>		case &#34;GET&#34;, &#34;HEAD&#34;, &#34;OPTIONS&#34;, &#34;TRACE&#34;:
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>			return true
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>		}
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>		<span class="comment">// The Idempotency-Key, while non-standard, is widely used to</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>		<span class="comment">// mean a POST or other request is idempotent. See</span>
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>		<span class="comment">// https://golang.org/issue/19943#issuecomment-421092421</span>
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>		if r.Header.has(&#34;Idempotency-Key&#34;) || r.Header.has(&#34;X-Idempotency-Key&#34;) {
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>			return true
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>		}
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>	}
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>	return false
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>}
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span><span class="comment">// outgoingLength reports the Content-Length of this outgoing (Client) request.</span>
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span><span class="comment">// It maps 0 into -1 (unknown) when the Body is non-nil.</span>
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>func (r *Request) outgoingLength() int64 {
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>	if r.Body == nil || r.Body == NoBody {
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>		return 0
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>	}
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>	if r.ContentLength != 0 {
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>		return r.ContentLength
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>	}
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>	return -1
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>}
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span><span class="comment">// requestMethodUsuallyLacksBody reports whether the given request</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span><span class="comment">// method is one that typically does not involve a request body.</span>
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span><span class="comment">// This is used by the Transport (via</span>
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span><span class="comment">// transferWriter.shouldSendChunkedRequestBody) to determine whether</span>
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span><span class="comment">// we try to test-read a byte from a non-nil Request.Body when</span>
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span><span class="comment">// Request.outgoingLength() returns -1. See the comments in</span>
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span><span class="comment">// shouldSendChunkedRequestBody.</span>
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>func requestMethodUsuallyLacksBody(method string) bool {
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>	switch method {
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	case &#34;GET&#34;, &#34;HEAD&#34;, &#34;DELETE&#34;, &#34;OPTIONS&#34;, &#34;PROPFIND&#34;, &#34;SEARCH&#34;:
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>		return true
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>	}
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>	return false
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>}
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span><span class="comment">// requiresHTTP1 reports whether this request requires being sent on</span>
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span><span class="comment">// an HTTP/1 connection.</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>func (r *Request) requiresHTTP1() bool {
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>	return hasToken(r.Header.Get(&#34;Connection&#34;), &#34;upgrade&#34;) &amp;&amp;
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>		ascii.EqualFold(r.Header.Get(&#34;Upgrade&#34;), &#34;websocket&#34;)
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>}
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>
</pre><p><a href="request.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
