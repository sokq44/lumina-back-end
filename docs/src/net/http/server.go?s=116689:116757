<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/server.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./server.go?s=116689:116757#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">server.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// HTTP server. See RFC 7230 through 7235.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>package http
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>import (
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;math/rand&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;net/url&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	urlpkg &#34;net/url&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;path&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	&#34;golang.org/x/net/http/httpguts&#34;
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Errors used by the HTTP server.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>var (
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	<span class="comment">// ErrBodyNotAllowed is returned by ResponseWriter.Write calls</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// when the HTTP method or response code does not permit a</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// body.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	ErrBodyNotAllowed = errors.New(&#34;http: request method or response status code does not allow body&#34;)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// ErrHijacked is returned by ResponseWriter.Write calls when</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// the underlying connection has been hijacked using the</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// Hijacker interface. A zero-byte write on a hijacked</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// connection will return ErrHijacked without any other side</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// effects.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	ErrHijacked = errors.New(&#34;http: connection has been hijacked&#34;)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// ErrContentLength is returned by ResponseWriter.Write calls</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// when a Handler set a Content-Length response header with a</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// declared size and then attempted to write more bytes than</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// declared.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	ErrContentLength = errors.New(&#34;http: wrote more than the declared Content-Length&#34;)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: ErrWriteAfterFlush is no longer returned by</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// anything in the net/http package. Callers should not</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// compare errors against this variable.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	ErrWriteAfterFlush = errors.New(&#34;unused&#34;)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>)
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// A Handler responds to an HTTP request.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// [Handler.ServeHTTP] should write reply headers and data to the [ResponseWriter]</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// and then return. Returning signals that the request is finished; it</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// is not valid to use the [ResponseWriter] or read from the</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// [Request.Body] after or concurrently with the completion of the</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// ServeHTTP call.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// Depending on the HTTP client software, HTTP protocol version, and</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// any intermediaries between the client and the Go server, it may not</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// be possible to read from the [Request.Body] after writing to the</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// [ResponseWriter]. Cautious handlers should read the [Request.Body]</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// first, and then reply.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Except for reading the body, handlers should not modify the</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// provided Request.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// that the effect of the panic was isolated to the active request.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// It recovers the panic, logs a stack trace to the server error log,</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// and either closes the network connection or sends an HTTP/2</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// the client sees an interrupted response but the server doesn&#39;t log</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// an error, panic with the value [ErrAbortHandler].</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>type Handler interface {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	ServeHTTP(ResponseWriter, *Request)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// A ResponseWriter interface is used by an HTTP handler to</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// construct an HTTP response.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// A ResponseWriter may not be used after [Handler.ServeHTTP] has returned.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>type ResponseWriter interface {
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// Header returns the header map that will be sent by</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// [ResponseWriter.WriteHeader]. The [Header] map also is the mechanism with which</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// [Handler] implementations can set HTTP trailers.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// Changing the header map after a call to [ResponseWriter.WriteHeader] (or</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// [ResponseWriter.Write]) has no effect unless the HTTP status code was of the</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	<span class="comment">// 1xx class or the modified headers are trailers.</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	<span class="comment">// There are two ways to set Trailers. The preferred way is to</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	<span class="comment">// predeclare in the headers which trailers you will later</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// send by setting the &#34;Trailer&#34; header to the names of the</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	<span class="comment">// trailer keys which will come later. In this case, those</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	<span class="comment">// keys of the Header map are treated as if they were</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// trailers. See the example. The second way, for trailer</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	<span class="comment">// keys not known to the [Handler] until after the first [ResponseWriter.Write],</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// is to prefix the [Header] map keys with the [TrailerPrefix]</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// constant value.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// To suppress automatic response headers (such as &#34;Date&#34;), set</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// their value to nil.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	Header() Header
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Write writes the data to the connection as part of an HTTP reply.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// If [ResponseWriter.WriteHeader] has not yet been called, Write calls</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// WriteHeader(http.StatusOK) before writing the data. If the Header</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// does not contain a Content-Type line, Write adds a Content-Type set</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	<span class="comment">// to the result of passing the initial 512 bytes of written data to</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// [DetectContentType]. Additionally, if the total size of all written</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// data is under a few KB and there are no Flush calls, the</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">// Content-Length header is added automatically.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// Depending on the HTTP protocol version and the client, calling</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">// Write or WriteHeader may prevent future reads on the</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">// Request.Body. For HTTP/1.x requests, handlers should read any</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// needed request body data before writing the response. Once the</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// headers have been flushed (due to either an explicit Flusher.Flush</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// call or writing enough data to trigger a flush), the request body</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">// may be unavailable. For HTTP/2 requests, the Go HTTP server permits</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// handlers to continue to read the request body while concurrently</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// writing the response. However, such behavior may not be supported</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// by all HTTP/2 clients. Handlers should read before writing if</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// possible to maximize compatibility.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	Write([]byte) (int, error)
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// WriteHeader sends an HTTP response header with the provided</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// status code.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// If WriteHeader is not called explicitly, the first call to Write</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// will trigger an implicit WriteHeader(http.StatusOK).</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// Thus explicit calls to WriteHeader are mainly used to</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// send error codes or 1xx informational responses.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// The provided code must be a valid HTTP 1xx-5xx status code.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">// Any number of 1xx headers may be written, followed by at most</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// one 2xx-5xx header. 1xx headers are sent immediately, but 2xx-5xx</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// headers may be buffered. Use the Flusher interface to send</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// buffered data. The header map is cleared when 2xx-5xx headers are</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// sent, but not with 1xx headers.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// The server will automatically send a 100 (Continue) header</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// on the first read from the request body if the request has</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">// an &#34;Expect: 100-continue&#34; header.</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	WriteHeader(statusCode int)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// The Flusher interface is implemented by ResponseWriters that allow</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span><span class="comment">// an HTTP handler to flush buffered data to the client.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span><span class="comment">// The default HTTP/1.x and HTTP/2 [ResponseWriter] implementations</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// support [Flusher], but ResponseWriter wrappers may not. Handlers</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// should always test for this ability at runtime.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// Note that even for ResponseWriters that support Flush,</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// if the client is connected through an HTTP proxy,</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// the buffered data may not reach the client until the response</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// completes.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>type Flusher interface {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// Flush sends any buffered data to the client.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	Flush()
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// The Hijacker interface is implemented by ResponseWriters that allow</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// an HTTP handler to take over the connection.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// The default [ResponseWriter] for HTTP/1.x connections supports</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// Hijacker, but HTTP/2 connections intentionally do not.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// ResponseWriter wrappers may also not support Hijacker. Handlers</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// should always test for this ability at runtime.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>type Hijacker interface {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// Hijack lets the caller take over the connection.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// After a call to Hijack the HTTP server library</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// will not do anything else with the connection.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// It becomes the caller&#39;s responsibility to manage</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// and close the connection.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">// The returned net.Conn may have read or write deadlines</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// already set, depending on the configuration of the</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// Server. It is the caller&#39;s responsibility to set</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// or clear those deadlines as needed.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// The returned bufio.Reader may contain unprocessed buffered</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// data from the client.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// After a call to Hijack, the original Request.Body must not</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// be used. The original Request&#39;s Context remains valid and</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// is not canceled until the Request&#39;s ServeHTTP method</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// returns.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	Hijack() (net.Conn, *bufio.ReadWriter, error)
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span><span class="comment">// The CloseNotifier interface is implemented by ResponseWriters which</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span><span class="comment">// allow detecting when the underlying connection has gone away.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// This mechanism can be used to cancel long operations on the server</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// if the client has disconnected before the response is ready.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// Deprecated: the CloseNotifier interface predates Go&#39;s context package.</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// New code should use [Request.Context] instead.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>type CloseNotifier interface {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// CloseNotify returns a channel that receives at most a</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// single value (true) when the client connection has gone</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// away.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// CloseNotify may wait to notify until Request.Body has been</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// fully read.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// After the Handler has returned, there is no guarantee</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// that the channel receives a value.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// If the protocol is HTTP/1.1 and CloseNotify is called while</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// processing an idempotent request (such a GET) while</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	<span class="comment">// HTTP/1.1 pipelining is in use, the arrival of a subsequent</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// pipelined request may cause a value to be sent on the</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	<span class="comment">// returned channel. In practice HTTP/1.1 pipelining is not</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	<span class="comment">// enabled in browsers and not seen often in the wild. If this</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	<span class="comment">// is a problem, use HTTP/2 or only use CloseNotify on methods</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	<span class="comment">// such as POST.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	CloseNotify() &lt;-chan bool
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>var (
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">// ServerContextKey is a context key. It can be used in HTTP</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// handlers with Context.Value to access the server that</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// started the handler. The associated value will be of</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// type *Server.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	ServerContextKey = &amp;contextKey{&#34;http-server&#34;}
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// LocalAddrContextKey is a context key. It can be used in</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// HTTP handlers with Context.Value to access the local</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// address the connection arrived on.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// The associated value will be of type net.Addr.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	LocalAddrContextKey = &amp;contextKey{&#34;local-addr&#34;}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span><span class="comment">// A conn represents the server side of an HTTP connection.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>type conn struct {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// server is the server on which the connection arrived.</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Immutable; never nil.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	server *Server
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">// cancelCtx cancels the connection-level context.</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	cancelCtx context.CancelFunc
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	<span class="comment">// rwc is the underlying network connection.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	<span class="comment">// This is never wrapped by other types and is the value given out</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// to CloseNotifier callers. It is usually of type *net.TCPConn or</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// *tls.Conn.</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	rwc net.Conn
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	<span class="comment">// remoteAddr is rwc.RemoteAddr().String(). It is not populated synchronously</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// inside the Listener&#39;s Accept goroutine, as some implementations block.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// It is populated immediately inside the (*conn).serve goroutine.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// This is the value of a Handler&#39;s (*Request).RemoteAddr.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	remoteAddr string
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// tlsState is the TLS connection state when using TLS.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// nil means not TLS.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	tlsState *tls.ConnectionState
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// werr is set to the first write error to rwc.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// It is set via checkConnErrorWriter{w}, where bufw writes.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	werr error
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// r is bufr&#39;s read source. It&#39;s a wrapper around rwc that provides</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">// io.LimitedReader-style limiting (while reading request headers)</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">// and functionality to support CloseNotifier. See *connReader docs.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	r *connReader
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// bufr reads from r.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	bufr *bufio.Reader
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// bufw writes to checkConnErrorWriter{c}, which populates werr on error.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	bufw *bufio.Writer
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// lastMethod is the method of the most recent request</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// on this connection, if any.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	lastMethod string
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	curReq atomic.Pointer[response] <span class="comment">// (which has a Request in it)</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	curState atomic.Uint64 <span class="comment">// packed (unixtime&lt;&lt;8|uint8(ConnState))</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	<span class="comment">// mu guards hijackedv</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	mu sync.Mutex
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// hijackedv is whether this connection has been hijacked</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// by a Handler with the Hijacker interface.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	<span class="comment">// It is guarded by mu.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	hijackedv bool
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>func (c *conn) hijacked() bool {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	return c.hijackedv
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// c.mu must be held.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>func (c *conn) hijackLocked() (rwc net.Conn, buf *bufio.ReadWriter, err error) {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	if c.hijackedv {
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		return nil, nil, ErrHijacked
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	}
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	c.r.abortPendingRead()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	c.hijackedv = true
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	rwc = c.rwc
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	rwc.SetDeadline(time.Time{})
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	buf = bufio.NewReadWriter(c.bufr, bufio.NewWriter(rwc))
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	if c.r.hasByte {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		if _, err := c.bufr.Peek(c.bufr.Buffered() + 1); err != nil {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			return nil, nil, fmt.Errorf(&#34;unexpected Peek failure reading buffered byte: %v&#34;, err)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	}
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	c.setState(rwc, StateHijacked, runHooks)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	return
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">// This should be &gt;= 512 bytes for DetectContentType,</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">// but otherwise it&#39;s somewhat arbitrary.</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>const bufferBeforeChunkingSize = 2048
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// chunkWriter writes to a response&#39;s conn buffer, and is the writer</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// wrapped by the response.w buffered writer.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// chunkWriter also is responsible for finalizing the Header, including</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// conditionally setting the Content-Type and setting a Content-Length</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// in cases where the handler&#39;s final output is smaller than the buffer</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span><span class="comment">// size. It also conditionally adds chunk headers, when in chunking mode.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span><span class="comment">// See the comment above (*response).Write for the entire write flow.</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>type chunkWriter struct {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	res *response
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	<span class="comment">// header is either nil or a deep clone of res.handlerHeader</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	<span class="comment">// at the time of res.writeHeader, if res.writeHeader is</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">// called and extra buffering is being done to calculate</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	<span class="comment">// Content-Type and/or Content-Length.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	header Header
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	<span class="comment">// wroteHeader tells whether the header&#39;s been written to &#34;the</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// wire&#34; (or rather: w.conn.buf). this is unlike</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// (*response).wroteHeader, which tells only whether it was</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// logically written.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	wroteHeader bool
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	<span class="comment">// set by the writeHeader method:</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	chunking bool <span class="comment">// using chunked transfer encoding for reply body</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>var (
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	crlf       = []byte(&#34;\r\n&#34;)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	colonSpace = []byte(&#34;: &#34;)
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>)
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func (cw *chunkWriter) Write(p []byte) (n int, err error) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	if !cw.wroteHeader {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		cw.writeHeader(p)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	if cw.res.req.Method == &#34;HEAD&#34; {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>		<span class="comment">// Eat writes.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		return len(p), nil
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	if cw.chunking {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		_, err = fmt.Fprintf(cw.res.conn.bufw, &#34;%x\r\n&#34;, len(p))
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		if err != nil {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			cw.res.conn.rwc.Close()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			return
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	n, err = cw.res.conn.bufw.Write(p)
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	if cw.chunking &amp;&amp; err == nil {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>		_, err = cw.res.conn.bufw.Write(crlf)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	if err != nil {
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		cw.res.conn.rwc.Close()
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	}
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	return
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>func (cw *chunkWriter) flush() error {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	if !cw.wroteHeader {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		cw.writeHeader(nil)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return cw.res.conn.bufw.Flush()
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>func (cw *chunkWriter) close() {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	if !cw.wroteHeader {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		cw.writeHeader(nil)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	}
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	if cw.chunking {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		bw := cw.res.conn.bufw <span class="comment">// conn&#39;s bufio writer</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		<span class="comment">// zero chunk to mark EOF</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		bw.WriteString(&#34;0\r\n&#34;)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		if trailers := cw.res.finalTrailers(); trailers != nil {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			trailers.Write(bw) <span class="comment">// the writer handles noting errors</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		<span class="comment">// final blank line after the trailers (whether</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		<span class="comment">// present or not)</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		bw.WriteString(&#34;\r\n&#34;)
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// A response represents the server side of an HTTP response.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>type response struct {
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	conn             *conn
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	req              *Request <span class="comment">// request for this response</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	reqBody          io.ReadCloser
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	cancelCtx        context.CancelFunc <span class="comment">// when ServeHTTP exits</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	wroteHeader      bool               <span class="comment">// a non-1xx header has been (logically) written</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	wroteContinue    bool               <span class="comment">// 100 Continue response was written</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	wants10KeepAlive bool               <span class="comment">// HTTP/1.0 w/ Connection &#34;keep-alive&#34;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	wantsClose       bool               <span class="comment">// HTTP request has Connection &#34;close&#34;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	<span class="comment">// canWriteContinue is an atomic boolean that says whether or</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	<span class="comment">// not a 100 Continue header can be written to the</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	<span class="comment">// connection.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	<span class="comment">// writeContinueMu must be held while writing the header.</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	<span class="comment">// These two fields together synchronize the body reader (the</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	<span class="comment">// expectContinueReader, which wants to write 100 Continue)</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	<span class="comment">// against the main writer.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>	canWriteContinue atomic.Bool
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>	writeContinueMu  sync.Mutex
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	w  *bufio.Writer <span class="comment">// buffers output in chunks to chunkWriter</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	cw chunkWriter
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// handlerHeader is the Header that Handlers get access to,</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	<span class="comment">// which may be retained and mutated even after WriteHeader.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	<span class="comment">// handlerHeader is copied into cw.header at WriteHeader</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>	<span class="comment">// time, and privately mutated thereafter.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	handlerHeader Header
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	calledHeader  bool <span class="comment">// handler accessed handlerHeader via Header</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	written       int64 <span class="comment">// number of bytes written in body</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	contentLength int64 <span class="comment">// explicitly-declared Content-Length; or -1</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	status        int   <span class="comment">// status code passed to WriteHeader</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// close connection after this reply.  set on request and</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// updated after response from handler if there&#39;s a</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// &#34;Connection: keep-alive&#34; response header and a</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// Content-Length.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	closeAfterReply bool
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">// When fullDuplex is false (the default), we consume any remaining</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	<span class="comment">// request body before starting to write a response.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	fullDuplex bool
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	<span class="comment">// requestBodyLimitHit is set by requestTooLarge when</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	<span class="comment">// maxBytesReader hits its max size. It is checked in</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	<span class="comment">// WriteHeader, to make sure we don&#39;t consume the</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	<span class="comment">// remaining request body to try to advance to the next HTTP</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	<span class="comment">// request. Instead, when this is set, we stop reading</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	<span class="comment">// subsequent requests on this connection and stop reading</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	<span class="comment">// input from it.</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	requestBodyLimitHit bool
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	<span class="comment">// trailers are the headers to be sent after the handler</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	<span class="comment">// finishes writing the body. This field is initialized from</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	<span class="comment">// the Trailer response header when the response header is</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	<span class="comment">// written.</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	trailers []string
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	handlerDone atomic.Bool <span class="comment">// set true when the handler exits</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	<span class="comment">// Buffers for Date, Content-Length, and status code</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	dateBuf   [len(TimeFormat)]byte
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	clenBuf   [10]byte
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	statusBuf [3]byte
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	<span class="comment">// closeNotifyCh is the channel returned by CloseNotify.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): this is currently (for Go 1.8) always</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	<span class="comment">// non-nil. Make this lazily-created again as it used to be?</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	closeNotifyCh  chan bool
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	didCloseNotify atomic.Bool <span class="comment">// atomic (only false-&gt;true winner should send)</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>}
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>func (c *response) SetReadDeadline(deadline time.Time) error {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return c.conn.rwc.SetReadDeadline(deadline)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (c *response) SetWriteDeadline(deadline time.Time) error {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	return c.conn.rwc.SetWriteDeadline(deadline)
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>func (c *response) EnableFullDuplex() error {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	c.fullDuplex = true
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	return nil
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// TrailerPrefix is a magic prefix for [ResponseWriter.Header] map keys</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// that, if present, signals that the map entry is actually for</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// the response trailers, and not the response headers. The prefix</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// is stripped after the ServeHTTP call finishes and the values are</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">// sent in the trailers.</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// This mechanism is intended only for trailers that are not known</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">// prior to the headers being written. If the set of trailers is fixed</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// or known before the header is written, the normal Go trailers mechanism</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">// is preferred:</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">//	https://pkg.go.dev/net/http#ResponseWriter</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">//	https://pkg.go.dev/net/http#example-ResponseWriter-Trailers</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>const TrailerPrefix = &#34;Trailer:&#34;
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">// finalTrailers is called after the Handler exits and returns a non-nil</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">// value if the Handler set any trailers.</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>func (w *response) finalTrailers() Header {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	var t Header
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	for k, vv := range w.handlerHeader {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		if kk, found := strings.CutPrefix(k, TrailerPrefix); found {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>			if t == nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>				t = make(Header)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>			}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			t[kk] = vv
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	for _, k := range w.trailers {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		if t == nil {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>			t = make(Header)
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		for _, v := range w.handlerHeader[k] {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			t.Add(k, v)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	return t
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">// declareTrailer is called for each Trailer header when the</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// response header is written. It notes that a header will need to be</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// written in the trailers at the end of the response.</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>func (w *response) declareTrailer(k string) {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	k = CanonicalHeaderKey(k)
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	if !httpguts.ValidTrailerHeader(k) {
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		<span class="comment">// Forbidden by RFC 7230, section 4.1.2</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		return
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	w.trailers = append(w.trailers, k)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span><span class="comment">// requestTooLarge is called by maxBytesReader when too much input has</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span><span class="comment">// been read from the client.</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>func (w *response) requestTooLarge() {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	w.closeAfterReply = true
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	w.requestBodyLimitHit = true
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	if !w.wroteHeader {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		w.Header().Set(&#34;Connection&#34;, &#34;close&#34;)
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// writerOnly hides an io.Writer value&#39;s optional ReadFrom method</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// from io.Copy.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>type writerOnly struct {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	io.Writer
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span><span class="comment">// ReadFrom is here to optimize copying from an [*os.File] regular file</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span><span class="comment">// to a [*net.TCPConn] with sendfile, or from a supported src type such</span>
<span id="L576" class="ln">   576&nbsp;&nbsp;</span><span class="comment">// as a *net.TCPConn on Linux with splice.</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>func (w *response) ReadFrom(src io.Reader) (n int64, err error) {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	buf := getCopyBuf()
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	defer putCopyBuf(buf)
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	<span class="comment">// Our underlying w.conn.rwc is usually a *TCPConn (with its</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>	<span class="comment">// own ReadFrom method). If not, just fall back to the normal</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// copy method.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	rf, ok := w.conn.rwc.(io.ReaderFrom)
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	if !ok {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		return io.CopyBuffer(writerOnly{w}, src, buf)
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	<span class="comment">// Copy the first sniffLen bytes before switching to ReadFrom.</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	<span class="comment">// This ensures we don&#39;t start writing the response before the</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	<span class="comment">// source is available (see golang.org/issue/5660) and provides</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	<span class="comment">// enough bytes to perform Content-Type sniffing when required.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	if !w.cw.wroteHeader {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		n0, err := io.CopyBuffer(writerOnly{w}, io.LimitReader(src, sniffLen), buf)
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>		n += n0
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		if err != nil || n0 &lt; sniffLen {
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>			return n, err
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	w.w.Flush()  <span class="comment">// get rid of any previous writes</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	w.cw.flush() <span class="comment">// make sure Header is written; flush data to rwc</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	<span class="comment">// Now that cw has been flushed, its chunking field is guaranteed initialized.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	if !w.cw.chunking &amp;&amp; w.bodyAllowed() {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>		n0, err := rf.ReadFrom(src)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		n += n0
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		w.written += n0
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		return n, err
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	n0, err := io.CopyBuffer(writerOnly{w}, src, buf)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	n += n0
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	return n, err
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>}
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// debugServerConnections controls whether all server connections are wrapped</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span><span class="comment">// with a verbose logging wrapper.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>const debugServerConnections = false
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span><span class="comment">// Create new connection from rwc.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>func (srv *Server) newConn(rwc net.Conn) *conn {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	c := &amp;conn{
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		server: srv,
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		rwc:    rwc,
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	}
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>	if debugServerConnections {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		c.rwc = newLoggingConn(&#34;server&#34;, c.rwc)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	return c
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>type readResult struct {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	_   incomparable
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	n   int
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	err error
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	b   byte <span class="comment">// byte read, if n == 1</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span><span class="comment">// connReader is the io.Reader wrapper used by *conn. It combines a</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span><span class="comment">// selectively-activated io.LimitedReader (to bound request header</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// read sizes) with support for selectively keeping an io.Reader.Read</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// call blocked in a background goroutine to wait for activity and</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// trigger a CloseNotifier channel.</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>type connReader struct {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>	conn *conn
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	mu      sync.Mutex <span class="comment">// guards following</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	hasByte bool
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	byteBuf [1]byte
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	cond    *sync.Cond
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	inRead  bool
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	aborted bool  <span class="comment">// set true before conn.rwc deadline is set to past</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	remain  int64 <span class="comment">// bytes remaining</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>func (cr *connReader) lock() {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	cr.mu.Lock()
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	if cr.cond == nil {
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		cr.cond = sync.NewCond(&amp;cr.mu)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>func (cr *connReader) unlock() { cr.mu.Unlock() }
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>func (cr *connReader) startBackgroundRead() {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	cr.lock()
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	defer cr.unlock()
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if cr.inRead {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		panic(&#34;invalid concurrent Body.Read call&#34;)
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	}
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	if cr.hasByte {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		return
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	cr.inRead = true
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	cr.conn.rwc.SetReadDeadline(time.Time{})
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	go cr.backgroundRead()
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>func (cr *connReader) backgroundRead() {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	n, err := cr.conn.rwc.Read(cr.byteBuf[:])
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	cr.lock()
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	if n == 1 {
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		cr.hasByte = true
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		<span class="comment">// We were past the end of the previous request&#39;s body already</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		<span class="comment">// (since we wouldn&#39;t be in a background read otherwise), so</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		<span class="comment">// this is a pipelined HTTP request. Prior to Go 1.11 we used to</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		<span class="comment">// send on the CloseNotify channel and cancel the context here,</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		<span class="comment">// but the behavior was documented as only &#34;may&#34;, and we only</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		<span class="comment">// did that because that&#39;s how CloseNotify accidentally behaved</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		<span class="comment">// in very early Go releases prior to context support. Once we</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		<span class="comment">// added context support, people used a Handler&#39;s</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		<span class="comment">// Request.Context() and passed it along. Having that context</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		<span class="comment">// cancel on pipelined HTTP requests caused problems.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		<span class="comment">// Fortunately, almost nothing uses HTTP/1.x pipelining.</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		<span class="comment">// Unfortunately, apt-get does, or sometimes does.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		<span class="comment">// New Go 1.11 behavior: don&#39;t fire CloseNotify or cancel</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		<span class="comment">// contexts on pipelined requests. Shouldn&#39;t affect people, but</span>
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		<span class="comment">// fixes cases like Issue 23921. This does mean that a client</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		<span class="comment">// closing their TCP connection after sending a pipelined</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		<span class="comment">// request won&#39;t cancel the context, but we&#39;ll catch that on any</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		<span class="comment">// write failure (in checkConnErrorWriter.Write).</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		<span class="comment">// If the server never writes, yes, there are still contrived</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		<span class="comment">// server &amp; client behaviors where this fails to ever cancel the</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		<span class="comment">// context, but that&#39;s kinda why HTTP/1.x pipelining died</span>
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		<span class="comment">// anyway.</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	if ne, ok := err.(net.Error); ok &amp;&amp; cr.aborted &amp;&amp; ne.Timeout() {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		<span class="comment">// Ignore this error. It&#39;s the expected error from</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		<span class="comment">// another goroutine calling abortPendingRead.</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	} else if err != nil {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>		cr.handleReadError(err)
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	cr.aborted = false
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	cr.inRead = false
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	cr.unlock()
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	cr.cond.Broadcast()
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>func (cr *connReader) abortPendingRead() {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	cr.lock()
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	defer cr.unlock()
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	if !cr.inRead {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		return
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	cr.aborted = true
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	cr.conn.rwc.SetReadDeadline(aLongTimeAgo)
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	for cr.inRead {
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		cr.cond.Wait()
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	cr.conn.rwc.SetReadDeadline(time.Time{})
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>}
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>func (cr *connReader) setReadLimit(remain int64) { cr.remain = remain }
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>func (cr *connReader) setInfiniteReadLimit()     { cr.remain = maxInt64 }
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>func (cr *connReader) hitReadLimit() bool        { return cr.remain &lt;= 0 }
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// handleReadError is called whenever a Read from the client returns a</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span><span class="comment">// non-nil error.</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">// The provided non-nil err is almost always io.EOF or a &#34;use of</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// closed network connection&#34;. In any case, the error is not</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">// particularly interesting, except perhaps for debugging during</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">// development. Any error means the connection is dead and we should</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">// down its context.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// It may be called from multiple goroutines.</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>func (cr *connReader) handleReadError(_ error) {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	cr.conn.cancelCtx()
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>	cr.closeNotify()
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span><span class="comment">// may be called from multiple goroutines.</span>
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>func (cr *connReader) closeNotify() {
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	res := cr.conn.curReq.Load()
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	if res != nil &amp;&amp; !res.didCloseNotify.Swap(true) {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		res.closeNotifyCh &lt;- true
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>func (cr *connReader) Read(p []byte) (n int, err error) {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	cr.lock()
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	if cr.inRead {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>		cr.unlock()
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		if cr.conn.hijacked() {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			panic(&#34;invalid Body.Read call. After hijacked, the original Request must not be used&#34;)
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		panic(&#34;invalid concurrent Body.Read call&#34;)
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>	}
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	if cr.hitReadLimit() {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		cr.unlock()
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		return 0, io.EOF
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>	}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	if len(p) == 0 {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>		cr.unlock()
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		return 0, nil
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	if int64(len(p)) &gt; cr.remain {
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>		p = p[:cr.remain]
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	}
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	if cr.hasByte {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		p[0] = cr.byteBuf[0]
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>		cr.hasByte = false
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>		cr.unlock()
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		return 1, nil
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	cr.inRead = true
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	cr.unlock()
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>	n, err = cr.conn.rwc.Read(p)
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	cr.lock()
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	cr.inRead = false
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	if err != nil {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>		cr.handleReadError(err)
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	cr.remain -= int64(n)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	cr.unlock()
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	cr.cond.Broadcast()
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	return n, err
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>}
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>var (
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	bufioReaderPool   sync.Pool
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>	bufioWriter2kPool sync.Pool
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	bufioWriter4kPool sync.Pool
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>)
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>const copyBufPoolSize = 32 * 1024
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>var copyBufPool = sync.Pool{New: func() any { return new([copyBufPoolSize]byte) }}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>func getCopyBuf() []byte {
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	return copyBufPool.Get().(*[copyBufPoolSize]byte)[:]
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>}
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>func putCopyBuf(b []byte) {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	if len(b) != copyBufPoolSize {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		panic(&#34;trying to put back buffer of the wrong size in the copyBufPool&#34;)
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	}
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>	copyBufPool.Put((*[copyBufPoolSize]byte)(b))
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>}
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>func bufioWriterPool(size int) *sync.Pool {
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>	switch size {
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	case 2 &lt;&lt; 10:
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		return &amp;bufioWriter2kPool
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	case 4 &lt;&lt; 10:
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return &amp;bufioWriter4kPool
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	return nil
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>}
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>func newBufioReader(r io.Reader) *bufio.Reader {
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	if v := bufioReaderPool.Get(); v != nil {
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		br := v.(*bufio.Reader)
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		br.Reset(r)
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>		return br
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	}
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	<span class="comment">// Note: if this reader size is ever changed, update</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	<span class="comment">// TestHandlerBodyClose&#39;s assumptions.</span>
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	return bufio.NewReader(r)
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>func putBufioReader(br *bufio.Reader) {
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	br.Reset(nil)
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	bufioReaderPool.Put(br)
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>func newBufioWriterSize(w io.Writer, size int) *bufio.Writer {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>	pool := bufioWriterPool(size)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	if pool != nil {
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>		if v := pool.Get(); v != nil {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>			bw := v.(*bufio.Writer)
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>			bw.Reset(w)
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>			return bw
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>		}
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	}
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	return bufio.NewWriterSize(w, size)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>}
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>func putBufioWriter(bw *bufio.Writer) {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	bw.Reset(nil)
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	if pool := bufioWriterPool(bw.Available()); pool != nil {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>		pool.Put(bw)
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	}
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>}
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span><span class="comment">// DefaultMaxHeaderBytes is the maximum permitted size of the headers</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span><span class="comment">// in an HTTP request.</span>
<span id="L870" class="ln">   870&nbsp;&nbsp;</span><span class="comment">// This can be overridden by setting [Server.MaxHeaderBytes].</span>
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>const DefaultMaxHeaderBytes = 1 &lt;&lt; 20 <span class="comment">// 1 MB</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>func (srv *Server) maxHeaderBytes() int {
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>	if srv.MaxHeaderBytes &gt; 0 {
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>		return srv.MaxHeaderBytes
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	}
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	return DefaultMaxHeaderBytes
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>}
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>func (srv *Server) initialReadLimitSize() int64 {
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	return int64(srv.maxHeaderBytes()) + 4096 <span class="comment">// bufio slop</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>}
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">// tlsHandshakeTimeout returns the time limit permitted for the TLS</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// handshake, or zero for unlimited.</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">// It returns the minimum of any positive ReadHeaderTimeout,</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">// ReadTimeout, or WriteTimeout.</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>func (srv *Server) tlsHandshakeTimeout() time.Duration {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	var ret time.Duration
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>	for _, v := range [...]time.Duration{
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>		srv.ReadHeaderTimeout,
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		srv.ReadTimeout,
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		srv.WriteTimeout,
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	} {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>		if v &lt;= 0 {
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>			continue
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>		}
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		if ret == 0 || v &lt; ret {
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>			ret = v
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>		}
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	return ret
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>}
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">// wrapper around io.ReadCloser which on first read, sends an</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">// HTTP/1.1 100 Continue header</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>type expectContinueReader struct {
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>	resp       *response
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>	readCloser io.ReadCloser
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>	closed     atomic.Bool
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>	sawEOF     atomic.Bool
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>func (ecr *expectContinueReader) Read(p []byte) (n int, err error) {
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>	if ecr.closed.Load() {
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		return 0, ErrBodyReadAfterClose
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>	}
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	w := ecr.resp
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	if !w.wroteContinue &amp;&amp; w.canWriteContinue.Load() &amp;&amp; !w.conn.hijacked() {
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		w.wroteContinue = true
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>		w.writeContinueMu.Lock()
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>		if w.canWriteContinue.Load() {
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>			w.conn.bufw.WriteString(&#34;HTTP/1.1 100 Continue\r\n\r\n&#34;)
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>			w.conn.bufw.Flush()
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>			w.canWriteContinue.Store(false)
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>		}
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		w.writeContinueMu.Unlock()
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>	}
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	n, err = ecr.readCloser.Read(p)
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		ecr.sawEOF.Store(true)
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	}
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>	return
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>}
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>func (ecr *expectContinueReader) Close() error {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>	ecr.closed.Store(true)
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>	return ecr.readCloser.Close()
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span><span class="comment">// TimeFormat is the time format to use when generating times in HTTP</span>
<span id="L943" class="ln">   943&nbsp;&nbsp;</span><span class="comment">// headers. It is like [time.RFC1123] but hard-codes GMT as the time</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span><span class="comment">// zone. The time being formatted must be in UTC for Format to</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span><span class="comment">// generate the correct format.</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span><span class="comment">// For parsing this time format, see [ParseTime].</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>const TimeFormat = &#34;Mon, 02 Jan 2006 15:04:05 GMT&#34;
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>
<span id="L950" class="ln">   950&nbsp;&nbsp;</span><span class="comment">// appendTime is a non-allocating version of []byte(t.UTC().Format(TimeFormat))</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>func appendTime(b []byte, t time.Time) []byte {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>	const days = &#34;SunMonTueWedThuFriSat&#34;
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>	const months = &#34;JanFebMarAprMayJunJulAugSepOctNovDec&#34;
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>	t = t.UTC()
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>	yy, mm, dd := t.Date()
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>	hh, mn, ss := t.Clock()
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	day := days[3*t.Weekday():]
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	mon := months[3*(mm-1):]
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	return append(b,
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		day[0], day[1], day[2], &#39;,&#39;, &#39; &#39;,
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		byte(&#39;0&#39;+dd/10), byte(&#39;0&#39;+dd%10), &#39; &#39;,
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		mon[0], mon[1], mon[2], &#39; &#39;,
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		byte(&#39;0&#39;+yy/1000), byte(&#39;0&#39;+(yy/100)%10), byte(&#39;0&#39;+(yy/10)%10), byte(&#39;0&#39;+yy%10), &#39; &#39;,
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		byte(&#39;0&#39;+hh/10), byte(&#39;0&#39;+hh%10), &#39;:&#39;,
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		byte(&#39;0&#39;+mn/10), byte(&#39;0&#39;+mn%10), &#39;:&#39;,
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		byte(&#39;0&#39;+ss/10), byte(&#39;0&#39;+ss%10), &#39; &#39;,
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		&#39;G&#39;, &#39;M&#39;, &#39;T&#39;)
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>var errTooLarge = errors.New(&#34;http: request too large&#34;)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>
<span id="L974" class="ln">   974&nbsp;&nbsp;</span><span class="comment">// Read next request from connection.</span>
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>func (c *conn) readRequest(ctx context.Context) (w *response, err error) {
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>	if c.hijacked() {
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		return nil, ErrHijacked
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	}
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	var (
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		wholeReqDeadline time.Time <span class="comment">// or zero if none</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>		hdrDeadline      time.Time <span class="comment">// or zero if none</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	t0 := time.Now()
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	if d := c.server.readHeaderTimeout(); d &gt; 0 {
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>		hdrDeadline = t0.Add(d)
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	}
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	if d := c.server.ReadTimeout; d &gt; 0 {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		wholeReqDeadline = t0.Add(d)
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>	}
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	c.rwc.SetReadDeadline(hdrDeadline)
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	if d := c.server.WriteTimeout; d &gt; 0 {
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		defer func() {
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>			c.rwc.SetWriteDeadline(time.Now().Add(d))
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		}()
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	}
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	c.r.setReadLimit(c.server.initialReadLimitSize())
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	if c.lastMethod == &#34;POST&#34; {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>		<span class="comment">// RFC 7230 section 3 tolerance for old buggy clients.</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		peek, _ := c.bufr.Peek(4) <span class="comment">// ReadRequest will get err below</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>		c.bufr.Discard(numLeadingCRorLF(peek))
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>	req, err := readRequest(c.bufr)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	if err != nil {
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		if c.r.hitReadLimit() {
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>			return nil, errTooLarge
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		}
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		return nil, err
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	}
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	if !http1ServerSupportsRequest(req) {
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>		return nil, statusError{StatusHTTPVersionNotSupported, &#34;unsupported protocol version&#34;}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>	}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>	c.lastMethod = req.Method
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>	c.r.setInfiniteReadLimit()
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>	hosts, haveHost := req.Header[&#34;Host&#34;]
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	isH2Upgrade := req.isH2Upgrade()
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	if req.ProtoAtLeast(1, 1) &amp;&amp; (!haveHost || len(hosts) == 0) &amp;&amp; !isH2Upgrade &amp;&amp; req.Method != &#34;CONNECT&#34; {
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>		return nil, badRequestError(&#34;missing required Host header&#34;)
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	}
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>	if len(hosts) == 1 &amp;&amp; !httpguts.ValidHostHeader(hosts[0]) {
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>		return nil, badRequestError(&#34;malformed Host header&#34;)
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	}
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	for k, vv := range req.Header {
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>		if !httpguts.ValidHeaderFieldName(k) {
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>			return nil, badRequestError(&#34;invalid header name&#34;)
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		}
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		for _, v := range vv {
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>			if !httpguts.ValidHeaderFieldValue(v) {
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>				return nil, badRequestError(&#34;invalid header value&#34;)
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>			}
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		}
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	}
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	delete(req.Header, &#34;Host&#34;)
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	ctx, cancelCtx := context.WithCancel(ctx)
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	req.ctx = ctx
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	req.RemoteAddr = c.remoteAddr
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	req.TLS = c.tlsState
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>	if body, ok := req.Body.(*body); ok {
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>		body.doEarlyClose = true
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	}
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	<span class="comment">// Adjust the read deadline if necessary.</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	if !hdrDeadline.Equal(wholeReqDeadline) {
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>		c.rwc.SetReadDeadline(wholeReqDeadline)
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	w = &amp;response{
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>		conn:          c,
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>		cancelCtx:     cancelCtx,
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>		req:           req,
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		reqBody:       req.Body,
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>		handlerHeader: make(Header),
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>		contentLength: -1,
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>		closeNotifyCh: make(chan bool, 1),
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		<span class="comment">// We populate these ahead of time so we&#39;re not</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>		<span class="comment">// reading from req.Header after their Handler starts</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>		<span class="comment">// and maybe mutates it (Issue 14940)</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		wants10KeepAlive: req.wantsHttp10KeepAlive(),
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		wantsClose:       req.wantsClose(),
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	}
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	if isH2Upgrade {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		w.closeAfterReply = true
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>	w.cw.res = w
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	w.w = newBufioWriterSize(&amp;w.cw, bufferBeforeChunkingSize)
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	return w, nil
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>}
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span><span class="comment">// http1ServerSupportsRequest reports whether Go&#39;s HTTP/1.x server</span>
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span><span class="comment">// supports the given request.</span>
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>func http1ServerSupportsRequest(req *Request) bool {
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	if req.ProtoMajor == 1 {
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		return true
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>	}
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>	<span class="comment">// Accept &#34;PRI * HTTP/2.0&#34; upgrade requests, so Handlers can</span>
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	<span class="comment">// wire up their own HTTP/2 upgrades.</span>
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	if req.ProtoMajor == 2 &amp;&amp; req.ProtoMinor == 0 &amp;&amp;
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>		req.Method == &#34;PRI&#34; &amp;&amp; req.RequestURI == &#34;*&#34; {
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>		return true
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	}
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>	<span class="comment">// Reject HTTP/0.x, and all other HTTP/2+ requests (which</span>
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>	<span class="comment">// aren&#39;t encoded in ASCII anyway).</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>	return false
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>}
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>func (w *response) Header() Header {
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	if w.cw.header == nil &amp;&amp; w.wroteHeader &amp;&amp; !w.cw.wroteHeader {
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>		<span class="comment">// Accessing the header between logically writing it</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>		<span class="comment">// and physically writing it means we need to allocate</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>		<span class="comment">// a clone to snapshot the logically written state.</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		w.cw.header = w.handlerHeader.Clone()
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	}
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	w.calledHeader = true
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	return w.handlerHeader
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>}
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span><span class="comment">// maxPostHandlerReadBytes is the max number of Request.Body bytes not</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span><span class="comment">// consumed by a handler that the server will read from the client</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span><span class="comment">// in order to keep a connection alive. If there are more bytes than</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span><span class="comment">// this then the server to be paranoid instead sends a &#34;Connection:</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span><span class="comment">// close&#34; response.</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span><span class="comment">// This number is approximately what a typical machine&#39;s TCP buffer</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span><span class="comment">// size is anyway.  (if we have the bytes on the machine, we might as</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span><span class="comment">// well read them)</span>
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>const maxPostHandlerReadBytes = 256 &lt;&lt; 10
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>func checkWriteHeaderCode(code int) {
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	<span class="comment">// Issue 22880: require valid WriteHeader status codes.</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>	<span class="comment">// For now we only enforce that it&#39;s three digits.</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	<span class="comment">// In the future we might block things over 599 (600 and above aren&#39;t defined</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	<span class="comment">// at https://httpwg.org/specs/rfc7231.html#status.codes).</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	<span class="comment">// But for now any three digits.</span>
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>	<span class="comment">// We used to send &#34;HTTP/1.1 000 0&#34; on the wire in responses but there&#39;s</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	<span class="comment">// no equivalent bogus thing we can realistically send in HTTP/2,</span>
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	<span class="comment">// so we&#39;ll consistently panic instead and help people find their bugs</span>
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>	<span class="comment">// early. (We can&#39;t return an error from WriteHeader even if we wanted to.)</span>
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>	if code &lt; 100 || code &gt; 999 {
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>		panic(fmt.Sprintf(&#34;invalid WriteHeader code %v&#34;, code))
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span><span class="comment">// relevantCaller searches the call stack for the first function outside of net/http.</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span><span class="comment">// The purpose of this function is to provide more helpful error messages.</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>func relevantCaller() runtime.Frame {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	pc := make([]uintptr, 16)
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	n := runtime.Callers(1, pc)
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>	frames := runtime.CallersFrames(pc[:n])
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	var frame runtime.Frame
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	for {
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>		frame, more := frames.Next()
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>		if !strings.HasPrefix(frame.Function, &#34;net/http.&#34;) {
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>			return frame
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>		}
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		if !more {
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>			break
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>		}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	}
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>	return frame
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>}
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>func (w *response) WriteHeader(code int) {
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	if w.conn.hijacked() {
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>		caller := relevantCaller()
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		w.conn.server.logf(&#34;http: response.WriteHeader on hijacked connection from %s (%s:%d)&#34;, caller.Function, path.Base(caller.File), caller.Line)
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		return
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	if w.wroteHeader {
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>		caller := relevantCaller()
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>		w.conn.server.logf(&#34;http: superfluous response.WriteHeader call from %s (%s:%d)&#34;, caller.Function, path.Base(caller.File), caller.Line)
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>		return
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span>	}
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>	checkWriteHeaderCode(code)
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	<span class="comment">// Handle informational headers.</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>	<span class="comment">// We shouldn&#39;t send any further headers after 101 Switching Protocols,</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>	<span class="comment">// so it takes the non-informational path.</span>
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	if code &gt;= 100 &amp;&amp; code &lt;= 199 &amp;&amp; code != StatusSwitchingProtocols {
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		<span class="comment">// Prevent a potential race with an automatically-sent 100 Continue triggered by Request.Body.Read()</span>
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		if code == 100 &amp;&amp; w.canWriteContinue.Load() {
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			w.writeContinueMu.Lock()
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			w.canWriteContinue.Store(false)
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>			w.writeContinueMu.Unlock()
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>		}
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		writeStatusLine(w.conn.bufw, w.req.ProtoAtLeast(1, 1), code, w.statusBuf[:])
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>		<span class="comment">// Per RFC 8297 we must not clear the current header map</span>
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		w.handlerHeader.WriteSubset(w.conn.bufw, excludedHeadersNoBody)
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>		w.conn.bufw.Write(crlf)
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>		w.conn.bufw.Flush()
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>		return
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	}
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>	w.wroteHeader = true
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>	w.status = code
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>	if w.calledHeader &amp;&amp; w.cw.header == nil {
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>		w.cw.header = w.handlerHeader.Clone()
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	}
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	if cl := w.handlerHeader.get(&#34;Content-Length&#34;); cl != &#34;&#34; {
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>		v, err := strconv.ParseInt(cl, 10, 64)
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		if err == nil &amp;&amp; v &gt;= 0 {
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>			w.contentLength = v
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		} else {
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>			w.conn.server.logf(&#34;http: invalid Content-Length of %q&#34;, cl)
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>			w.handlerHeader.Del(&#34;Content-Length&#34;)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		}
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	}
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>}
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span><span class="comment">// extraHeader is the set of headers sometimes added by chunkWriter.writeHeader.</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span><span class="comment">// This type is used to avoid extra allocations from cloning and/or populating</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span><span class="comment">// the response Header map and all its 1-element slices.</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>type extraHeader struct {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	contentType      string
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	connection       string
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	transferEncoding string
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>	date             []byte <span class="comment">// written if not nil</span>
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	contentLength    []byte <span class="comment">// written if not nil</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>}
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span><span class="comment">// Sorted the same as extraHeader.Write&#39;s loop.</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>var extraHeaderKeys = [][]byte{
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>	[]byte(&#34;Content-Type&#34;),
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>	[]byte(&#34;Connection&#34;),
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	[]byte(&#34;Transfer-Encoding&#34;),
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>var (
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>	headerContentLength = []byte(&#34;Content-Length: &#34;)
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	headerDate          = []byte(&#34;Date: &#34;)
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>)
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span><span class="comment">// Write writes the headers described in h to w.</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span><span class="comment">// This method has a value receiver, despite the somewhat large size</span>
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span><span class="comment">// of h, because it prevents an allocation. The escape analysis isn&#39;t</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span><span class="comment">// smart enough to realize this function doesn&#39;t mutate h.</span>
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>func (h extraHeader) Write(w *bufio.Writer) {
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	if h.date != nil {
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>		w.Write(headerDate)
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>		w.Write(h.date)
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		w.Write(crlf)
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	}
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	if h.contentLength != nil {
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>		w.Write(headerContentLength)
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>		w.Write(h.contentLength)
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>		w.Write(crlf)
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>	}
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	for i, v := range []string{h.contentType, h.connection, h.transferEncoding} {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>		if v != &#34;&#34; {
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>			w.Write(extraHeaderKeys[i])
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>			w.Write(colonSpace)
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>			w.WriteString(v)
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>			w.Write(crlf)
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>		}
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	}
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>}
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span><span class="comment">// writeHeader finalizes the header sent to the client and writes it</span>
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span><span class="comment">// to cw.res.conn.bufw.</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span><span class="comment">// p is not written by writeHeader, but is the first chunk of the body</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span><span class="comment">// that will be written. It is sniffed for a Content-Type if none is</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span><span class="comment">// set explicitly. It&#39;s also used to set the Content-Length, if the</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span><span class="comment">// total body size was small and the handler has already finished</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// running.</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>func (cw *chunkWriter) writeHeader(p []byte) {
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	if cw.wroteHeader {
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>		return
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>	}
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>	cw.wroteHeader = true
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>	w := cw.res
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>	keepAlivesEnabled := w.conn.server.doKeepAlives()
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	isHEAD := w.req.Method == &#34;HEAD&#34;
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	<span class="comment">// header is written out to w.conn.buf below. Depending on the</span>
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>	<span class="comment">// state of the handler, we either own the map or not. If we</span>
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t own it, the exclude map is created lazily for</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>	<span class="comment">// WriteSubset to remove headers. The setHeader struct holds</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	<span class="comment">// headers we need to add.</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>	header := cw.header
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>	owned := header != nil
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>	if !owned {
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>		header = w.handlerHeader
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	}
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>	var excludeHeader map[string]bool
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>	delHeader := func(key string) {
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>		if owned {
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>			header.Del(key)
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>			return
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>		}
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>		if _, ok := header[key]; !ok {
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>			return
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>		}
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>		if excludeHeader == nil {
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>			excludeHeader = make(map[string]bool)
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>		}
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>		excludeHeader[key] = true
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	}
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	var setHeader extraHeader
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t write out the fake &#34;Trailer:foo&#34; keys. See TrailerPrefix.</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	trailers := false
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	for k := range cw.header {
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>		if strings.HasPrefix(k, TrailerPrefix) {
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>			if excludeHeader == nil {
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>				excludeHeader = make(map[string]bool)
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>			}
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>			excludeHeader[k] = true
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>			trailers = true
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>		}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>	}
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>	for _, v := range cw.header[&#34;Trailer&#34;] {
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>		trailers = true
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>		foreachHeaderElement(v, cw.res.declareTrailer)
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>	}
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>	te := header.get(&#34;Transfer-Encoding&#34;)
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>	hasTE := te != &#34;&#34;
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	<span class="comment">// If the handler is done but never sent a Content-Length</span>
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>	<span class="comment">// response header and this is our first (and last) write, set</span>
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>	<span class="comment">// it, even to zero. This helps HTTP/1.0 clients keep their</span>
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	<span class="comment">// &#34;keep-alive&#34; connections alive.</span>
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	<span class="comment">// Exceptions: 304/204/1xx responses never get Content-Length, and if</span>
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	<span class="comment">// it was a HEAD request, we don&#39;t know the difference between</span>
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>	<span class="comment">// 0 actual bytes and 0 bytes because the handler noticed it</span>
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	<span class="comment">// was a HEAD request and chose not to write anything. So for</span>
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	<span class="comment">// HEAD, the handler should either write the Content-Length or</span>
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	<span class="comment">// write non-zero bytes. If it&#39;s actually 0 bytes and the</span>
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>	<span class="comment">// handler never looked at the Request.Method, we just don&#39;t</span>
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	<span class="comment">// send a Content-Length header.</span>
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>	<span class="comment">// Further, we don&#39;t send an automatic Content-Length if they</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>	<span class="comment">// set a Transfer-Encoding, because they&#39;re generally incompatible.</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>	if w.handlerDone.Load() &amp;&amp; !trailers &amp;&amp; !hasTE &amp;&amp; bodyAllowedForStatus(w.status) &amp;&amp; !header.has(&#34;Content-Length&#34;) &amp;&amp; (!isHEAD || len(p) &gt; 0) {
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>		w.contentLength = int64(len(p))
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>		setHeader.contentLength = strconv.AppendInt(cw.res.clenBuf[:0], int64(len(p)), 10)
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>	<span class="comment">// If this was an HTTP/1.0 request with keep-alive and we sent a</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	<span class="comment">// Content-Length back, we can make this a keep-alive response ...</span>
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>	if w.wants10KeepAlive &amp;&amp; keepAlivesEnabled {
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>		sentLength := header.get(&#34;Content-Length&#34;) != &#34;&#34;
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>		if sentLength &amp;&amp; header.get(&#34;Connection&#34;) == &#34;keep-alive&#34; {
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>			w.closeAfterReply = false
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>		}
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>	}
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	<span class="comment">// Check for an explicit (and valid) Content-Length header.</span>
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>	hasCL := w.contentLength != -1
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	if w.wants10KeepAlive &amp;&amp; (isHEAD || hasCL || !bodyAllowedForStatus(w.status)) {
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>		_, connectionHeaderSet := header[&#34;Connection&#34;]
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>		if !connectionHeaderSet {
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>			setHeader.connection = &#34;keep-alive&#34;
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>		}
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>	} else if !w.req.ProtoAtLeast(1, 1) || w.wantsClose {
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>		w.closeAfterReply = true
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	}
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	if header.get(&#34;Connection&#34;) == &#34;close&#34; || !keepAlivesEnabled {
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>		w.closeAfterReply = true
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>	}
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>	<span class="comment">// If the client wanted a 100-continue but we never sent it to</span>
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>	<span class="comment">// them (or, more strictly: we never finished reading their</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>	<span class="comment">// request body), don&#39;t reuse this connection.</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>	<span class="comment">// This behavior was first added on the theory that we don&#39;t know</span>
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>	<span class="comment">// if the next bytes on the wire are going to be the remainder of</span>
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	<span class="comment">// the request body or the subsequent request (see issue 11549),</span>
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>	<span class="comment">// but that&#39;s not correct: If we keep using the connection,</span>
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	<span class="comment">// the client is required to send the request body whether we</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>	<span class="comment">// asked for it or not.</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	<span class="comment">// We probably do want to skip reusing the connection in most cases,</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>	<span class="comment">// however. If the client is offering a large request body that we</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>	<span class="comment">// don&#39;t intend to use, then it&#39;s better to close the connection</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>	<span class="comment">// than to read the body. For now, assume that if we&#39;re sending</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span>	<span class="comment">// headers, the handler is done reading the body and we should</span>
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>	<span class="comment">// drop the connection if we haven&#39;t seen EOF.</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	if ecr, ok := w.req.Body.(*expectContinueReader); ok &amp;&amp; !ecr.sawEOF.Load() {
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>		w.closeAfterReply = true
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	}
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	<span class="comment">// We do this by default because there are a number of clients that</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>	<span class="comment">// send a full request before starting to read the response, and they</span>
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	<span class="comment">// can deadlock if we start writing the response with unconsumed body</span>
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	<span class="comment">// remaining. See Issue 15527 for some history.</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	<span class="comment">// If full duplex mode has been enabled with ResponseController.EnableFullDuplex,</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>	<span class="comment">// then leave the request body alone.</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	if w.req.ContentLength != 0 &amp;&amp; !w.closeAfterReply &amp;&amp; !w.fullDuplex {
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>		var discard, tooBig bool
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>		switch bdy := w.req.Body.(type) {
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>		case *expectContinueReader:
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>			if bdy.resp.wroteContinue {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>				discard = true
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>			}
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		case *body:
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>			bdy.mu.Lock()
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>			switch {
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>			case bdy.closed:
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>				if !bdy.sawEOF {
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>					<span class="comment">// Body was closed in handler with non-EOF error.</span>
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>					w.closeAfterReply = true
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>				}
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>			case bdy.unreadDataSizeLocked() &gt;= maxPostHandlerReadBytes:
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>				tooBig = true
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>			default:
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>				discard = true
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>			}
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>			bdy.mu.Unlock()
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>		default:
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>			discard = true
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>		}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>		if discard {
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>			_, err := io.CopyN(io.Discard, w.reqBody, maxPostHandlerReadBytes+1)
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>			switch err {
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>			case nil:
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>				<span class="comment">// There must be even more data left over.</span>
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>				tooBig = true
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>			case ErrBodyReadAfterClose:
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>				<span class="comment">// Body was already consumed and closed.</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>			case io.EOF:
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>				<span class="comment">// The remaining body was just consumed, close it.</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>				err = w.reqBody.Close()
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>				if err != nil {
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>					w.closeAfterReply = true
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>				}
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>			default:
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>				<span class="comment">// Some other kind of error occurred, like a read timeout, or</span>
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>				<span class="comment">// corrupt chunked encoding. In any case, whatever remains</span>
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>				<span class="comment">// on the wire must not be parsed as another HTTP request.</span>
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>				w.closeAfterReply = true
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>			}
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		}
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>		if tooBig {
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>			w.requestTooLarge()
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>			delHeader(&#34;Connection&#34;)
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>			setHeader.connection = &#34;close&#34;
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>		}
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span>	}
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>	code := w.status
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>	if bodyAllowedForStatus(code) {
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>		<span class="comment">// If no content type, apply sniffing algorithm to body.</span>
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>		_, haveType := header[&#34;Content-Type&#34;]
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>		<span class="comment">// If the Content-Encoding was set and is non-blank,</span>
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>		<span class="comment">// we shouldn&#39;t sniff the body. See Issue 31753.</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>		ce := header.Get(&#34;Content-Encoding&#34;)
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>		hasCE := len(ce) &gt; 0
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>		if !hasCE &amp;&amp; !haveType &amp;&amp; !hasTE &amp;&amp; len(p) &gt; 0 {
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>			setHeader.contentType = DetectContentType(p)
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		}
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>	} else {
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		for _, k := range suppressedHeaders(code) {
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>			delHeader(k)
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>		}
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>	}
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>	if !header.has(&#34;Date&#34;) {
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>		setHeader.date = appendTime(cw.res.dateBuf[:0], time.Now())
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>	}
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>	if hasCL &amp;&amp; hasTE &amp;&amp; te != &#34;identity&#34; {
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>		<span class="comment">// TODO: return an error if WriteHeader gets a return parameter</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>		<span class="comment">// For now just ignore the Content-Length.</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>		w.conn.server.logf(&#34;http: WriteHeader called with both Transfer-Encoding of %q and a Content-Length of %d&#34;,
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>			te, w.contentLength)
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>		delHeader(&#34;Content-Length&#34;)
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>		hasCL = false
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	}
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	if w.req.Method == &#34;HEAD&#34; || !bodyAllowedForStatus(code) || code == StatusNoContent {
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		<span class="comment">// Response has no body.</span>
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		delHeader(&#34;Transfer-Encoding&#34;)
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>	} else if hasCL {
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>		<span class="comment">// Content-Length has been provided, so no chunking is to be done.</span>
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>		delHeader(&#34;Transfer-Encoding&#34;)
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	} else if w.req.ProtoAtLeast(1, 1) {
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>		<span class="comment">// HTTP/1.1 or greater: Transfer-Encoding has been set to identity, and no</span>
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>		<span class="comment">// content-length has been provided. The connection must be closed after the</span>
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>		<span class="comment">// reply is written, and no chunking is to be done. This is the setup</span>
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>		<span class="comment">// recommended in the Server-Sent Events candidate recommendation 11,</span>
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>		<span class="comment">// section 8.</span>
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>		if hasTE &amp;&amp; te == &#34;identity&#34; {
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>			cw.chunking = false
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>			w.closeAfterReply = true
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>			delHeader(&#34;Transfer-Encoding&#34;)
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>		} else {
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>			<span class="comment">// HTTP/1.1 or greater: use chunked transfer encoding</span>
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>			<span class="comment">// to avoid closing the connection at EOF.</span>
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>			cw.chunking = true
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>			setHeader.transferEncoding = &#34;chunked&#34;
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>			if hasTE &amp;&amp; te == &#34;chunked&#34; {
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>				<span class="comment">// We will send the chunked Transfer-Encoding header later.</span>
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>				delHeader(&#34;Transfer-Encoding&#34;)
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>			}
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>		}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>	} else {
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>		<span class="comment">// HTTP version &lt; 1.1: cannot do chunked transfer</span>
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>		<span class="comment">// encoding and we don&#39;t know the Content-Length so</span>
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>		<span class="comment">// signal EOF by closing connection.</span>
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>		w.closeAfterReply = true
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>		delHeader(&#34;Transfer-Encoding&#34;) <span class="comment">// in case already set</span>
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span>	}
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>	<span class="comment">// Cannot use Content-Length with non-identity Transfer-Encoding.</span>
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	if cw.chunking {
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>		delHeader(&#34;Content-Length&#34;)
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	}
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>	if !w.req.ProtoAtLeast(1, 0) {
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>		return
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>	}
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	<span class="comment">// Only override the Connection header if it is not a successful</span>
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>	<span class="comment">// protocol switch response and if KeepAlives are not enabled.</span>
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/issue/36381.</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>	delConnectionHeader := w.closeAfterReply &amp;&amp;
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>		(!keepAlivesEnabled || !hasToken(cw.header.get(&#34;Connection&#34;), &#34;close&#34;)) &amp;&amp;
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span>		!isProtocolSwitchResponse(w.status, header)
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>	if delConnectionHeader {
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>		delHeader(&#34;Connection&#34;)
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>		if w.req.ProtoAtLeast(1, 1) {
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>			setHeader.connection = &#34;close&#34;
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>		}
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>	}
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span>	writeStatusLine(w.conn.bufw, w.req.ProtoAtLeast(1, 1), code, w.statusBuf[:])
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span>	cw.header.WriteSubset(w.conn.bufw, excludeHeader)
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span>	setHeader.Write(w.conn.bufw)
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span>	w.conn.bufw.Write(crlf)
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>}
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span><span class="comment">// foreachHeaderElement splits v according to the &#34;#rule&#34; construction</span>
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span><span class="comment">// in RFC 7230 section 7 and calls fn for each non-empty element.</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>func foreachHeaderElement(v string, fn func(string)) {
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>	v = textproto.TrimString(v)
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>	if v == &#34;&#34; {
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>		return
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>	}
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>	if !strings.Contains(v, &#34;,&#34;) {
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>		fn(v)
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>		return
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>	}
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>	for _, f := range strings.Split(v, &#34;,&#34;) {
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>		if f = textproto.TrimString(f); f != &#34;&#34; {
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>			fn(f)
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>		}
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>	}
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>}
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span><span class="comment">// writeStatusLine writes an HTTP/1.x Status-Line (RFC 7230 Section 3.1.2)</span>
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span><span class="comment">// to bw. is11 is whether the HTTP request is HTTP/1.1. false means HTTP/1.0.</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span><span class="comment">// code is the response status code.</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span><span class="comment">// scratch is an optional scratch buffer. If it has at least capacity 3, it&#39;s used.</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>func writeStatusLine(bw *bufio.Writer, is11 bool, code int, scratch []byte) {
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>	if is11 {
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>		bw.WriteString(&#34;HTTP/1.1 &#34;)
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>	} else {
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>		bw.WriteString(&#34;HTTP/1.0 &#34;)
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>	}
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>	if text := StatusText(code); text != &#34;&#34; {
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>		bw.Write(strconv.AppendInt(scratch[:0], int64(code), 10))
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>		bw.WriteByte(&#39; &#39;)
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>		bw.WriteString(text)
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>		bw.WriteString(&#34;\r\n&#34;)
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span>	} else {
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>		<span class="comment">// don&#39;t worry about performance</span>
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>		fmt.Fprintf(bw, &#34;%03d status code %d\r\n&#34;, code, code)
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span>	}
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span>}
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span>
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span><span class="comment">// bodyAllowed reports whether a Write is allowed for this response type.</span>
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span><span class="comment">// It&#39;s illegal to call this before the header has been flushed.</span>
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>func (w *response) bodyAllowed() bool {
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>	if !w.wroteHeader {
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>		panic(&#34;&#34;)
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>	}
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>	return bodyAllowedForStatus(w.status)
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span>}
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span>
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span><span class="comment">// The Life Of A Write is like this:</span>
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span><span class="comment">// Handler starts. No header has been sent. The handler can either</span>
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span><span class="comment">// write a header, or just start writing. Writing before sending a header</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span><span class="comment">// sends an implicitly empty 200 OK header.</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span><span class="comment">// If the handler didn&#39;t declare a Content-Length up front, we either</span>
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span><span class="comment">// go into chunking mode or, if the handler finishes running before</span>
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span><span class="comment">// the chunking buffer size, we compute a Content-Length and send that</span>
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span><span class="comment">// in the header instead.</span>
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span><span class="comment">// Likewise, if the handler didn&#39;t set a Content-Type, we sniff that</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span><span class="comment">// from the initial chunk of output.</span>
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span><span class="comment">// The Writers are wired together like:</span>
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span><span class="comment">//  1. *response (the ResponseWriter) -&gt;</span>
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span><span class="comment">//  2. (*response).w, a [*bufio.Writer] of bufferBeforeChunkingSize bytes -&gt;</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span><span class="comment">//  3. chunkWriter.Writer (whose writeHeader finalizes Content-Length/Type)</span>
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span><span class="comment">//     and which writes the chunk headers, if needed -&gt;</span>
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span><span class="comment">//  4. conn.bufw, a *bufio.Writer of default (4kB) bytes, writing to -&gt;</span>
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span><span class="comment">//  5. checkConnErrorWriter{c}, which notes any non-nil error on Write</span>
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span><span class="comment">//     and populates c.werr with it if so, but otherwise writes to -&gt;</span>
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span><span class="comment">//  6. the rwc, the [net.Conn].</span>
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span><span class="comment">// TODO(bradfitz): short-circuit some of the buffering when the</span>
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span><span class="comment">// initial header contains both a Content-Type and Content-Length.</span>
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span><span class="comment">// Also short-circuit in (1) when the header&#39;s been sent and not in</span>
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span><span class="comment">// chunking mode, writing directly to (4) instead, if (2) has no</span>
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span><span class="comment">// buffered data. More generally, we could short-circuit from (1) to</span>
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span><span class="comment">// (3) even in chunking mode if the write size from (1) is over some</span>
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span><span class="comment">// threshold and nothing is in (2).  The answer might be mostly making</span>
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span><span class="comment">// bufferBeforeChunkingSize smaller and having bufio&#39;s fast-paths deal</span>
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span><span class="comment">// with this instead.</span>
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>func (w *response) Write(data []byte) (n int, err error) {
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	return w.write(len(data), data, &#34;&#34;)
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>}
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>func (w *response) WriteString(data string) (n int, err error) {
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>	return w.write(len(data), nil, data)
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>}
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span><span class="comment">// either dataB or dataS is non-zero.</span>
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>func (w *response) write(lenData int, dataB []byte, dataS string) (n int, err error) {
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>	if w.conn.hijacked() {
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>		if lenData &gt; 0 {
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>			caller := relevantCaller()
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>			w.conn.server.logf(&#34;http: response.Write on hijacked connection from %s (%s:%d)&#34;, caller.Function, path.Base(caller.File), caller.Line)
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>		}
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>		return 0, ErrHijacked
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>	}
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>	if w.canWriteContinue.Load() {
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>		<span class="comment">// Body reader wants to write 100 Continue but hasn&#39;t yet.</span>
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>		<span class="comment">// Tell it not to. The store must be done while holding the lock</span>
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>		<span class="comment">// because the lock makes sure that there is not an active write</span>
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>		<span class="comment">// this very moment.</span>
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>		w.writeContinueMu.Lock()
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>		w.canWriteContinue.Store(false)
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>		w.writeContinueMu.Unlock()
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>	}
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>	if !w.wroteHeader {
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>		w.WriteHeader(StatusOK)
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>	}
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>	if lenData == 0 {
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>		return 0, nil
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>	}
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>	if !w.bodyAllowed() {
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>		return 0, ErrBodyNotAllowed
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>	}
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span>	w.written += int64(lenData) <span class="comment">// ignoring errors, for errorKludge</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span>	if w.contentLength != -1 &amp;&amp; w.written &gt; w.contentLength {
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span>		return 0, ErrContentLength
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span>	}
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span>	if dataB != nil {
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>		return w.w.Write(dataB)
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	} else {
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>		return w.w.WriteString(dataS)
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>	}
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>}
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>func (w *response) finishRequest() {
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>	w.handlerDone.Store(true)
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>	if !w.wroteHeader {
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>		w.WriteHeader(StatusOK)
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>	}
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>	w.w.Flush()
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>	putBufioWriter(w.w)
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>	w.cw.close()
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	w.conn.bufw.Flush()
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>	w.conn.r.abortPendingRead()
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>	<span class="comment">// Close the body (regardless of w.closeAfterReply) so we can</span>
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>	<span class="comment">// re-use its bufio.Reader later safely.</span>
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	w.reqBody.Close()
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>	if w.req.MultipartForm != nil {
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>		w.req.MultipartForm.RemoveAll()
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>	}
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>}
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span><span class="comment">// shouldReuseConnection reports whether the underlying TCP connection can be reused.</span>
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span><span class="comment">// It must only be called after the handler is done executing.</span>
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>func (w *response) shouldReuseConnection() bool {
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>	if w.closeAfterReply {
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>		<span class="comment">// The request or something set while executing the</span>
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>		<span class="comment">// handler indicated we shouldn&#39;t reuse this</span>
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>		<span class="comment">// connection.</span>
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>		return false
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	}
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>	if w.req.Method != &#34;HEAD&#34; &amp;&amp; w.contentLength != -1 &amp;&amp; w.bodyAllowed() &amp;&amp; w.contentLength != w.written {
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>		<span class="comment">// Did not write enough. Avoid getting out of sync.</span>
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>		return false
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>	}
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>	<span class="comment">// There was some error writing to the underlying connection</span>
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>	<span class="comment">// during the request, so don&#39;t re-use this conn.</span>
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>	if w.conn.werr != nil {
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>		return false
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>	}
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>	if w.closedRequestBodyEarly() {
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>		return false
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	}
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	return true
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>}
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>func (w *response) closedRequestBodyEarly() bool {
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	body, ok := w.req.Body.(*body)
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>	return ok &amp;&amp; body.didEarlyClose()
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>}
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>func (w *response) Flush() {
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>	w.FlushError()
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>}
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>func (w *response) FlushError() error {
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>	if !w.wroteHeader {
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>		w.WriteHeader(StatusOK)
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>	}
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>	err := w.w.Flush()
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>	e2 := w.cw.flush()
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	if err == nil {
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>		err = e2
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>	}
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>	return err
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>}
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>func (c *conn) finalFlush() {
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>	if c.bufr != nil {
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>		<span class="comment">// Steal the bufio.Reader (~4KB worth of memory) and its associated</span>
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>		<span class="comment">// reader for a future connection.</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>		putBufioReader(c.bufr)
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>		c.bufr = nil
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>	}
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>	if c.bufw != nil {
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>		c.bufw.Flush()
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>		<span class="comment">// Steal the bufio.Writer (~4KB worth of memory) and its associated</span>
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>		<span class="comment">// writer for a future connection.</span>
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>		putBufioWriter(c.bufw)
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>		c.bufw = nil
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>	}
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>}
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span><span class="comment">// Close the connection.</span>
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span>func (c *conn) close() {
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span>	c.finalFlush()
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span>	c.rwc.Close()
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span>}
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span><span class="comment">// rstAvoidanceDelay is the amount of time we sleep after closing the</span>
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span><span class="comment">// write side of a TCP connection before closing the entire socket.</span>
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span><span class="comment">// By sleeping, we increase the chances that the client sees our FIN</span>
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span><span class="comment">// and processes its final data before they process the subsequent RST</span>
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span><span class="comment">// from closing a connection with known unread data.</span>
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span><span class="comment">// This RST seems to occur mostly on BSD systems. (And Windows?)</span>
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span><span class="comment">// This timeout is somewhat arbitrary (~latency around the planet),</span>
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span><span class="comment">// and may be modified by tests.</span>
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span><span class="comment">// TODO(bcmills): This should arguably be a server configuration parameter,</span>
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span><span class="comment">// not a hard-coded value.</span>
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>var rstAvoidanceDelay = 500 * time.Millisecond
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>type closeWriter interface {
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>	CloseWrite() error
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>}
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>var _ closeWriter = (*net.TCPConn)(nil)
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span><span class="comment">// closeWriteAndWait flushes any outstanding data and sends a FIN packet (if</span>
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span><span class="comment">// client is connected via TCP), signaling that we&#39;re done. We then</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span><span class="comment">// pause for a bit, hoping the client processes it before any</span>
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span><span class="comment">// subsequent RST.</span>
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span><span class="comment">// See https://golang.org/issue/3595</span>
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>func (c *conn) closeWriteAndWait() {
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>	c.finalFlush()
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>	if tcp, ok := c.rwc.(closeWriter); ok {
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		tcp.CloseWrite()
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>	}
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>	<span class="comment">// When we return from closeWriteAndWait, the caller will fully close the</span>
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>	<span class="comment">// connection. If client is still writing to the connection, this will cause</span>
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>	<span class="comment">// the write to fail with ECONNRESET or similar. Unfortunately, many TCP</span>
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>	<span class="comment">// implementations will also drop unread packets from the client&#39;s read buffer</span>
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>	<span class="comment">// when a write fails, causing our final response to be truncated away too.</span>
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>	<span class="comment">// As a result, https://www.rfc-editor.org/rfc/rfc7230#section-6.6 recommends</span>
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>	<span class="comment">// that “[t]he server … continues to read from the connection until it</span>
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>	<span class="comment">// receives a corresponding close by the client, or until the server is</span>
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>	<span class="comment">// reasonably certain that its own TCP stack has received the client&#39;s</span>
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>	<span class="comment">// acknowledgement of the packet(s) containing the server&#39;s last response.”</span>
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>	<span class="comment">// Unfortunately, we have no straightforward way to be “reasonably certain”</span>
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>	<span class="comment">// that we have received the client&#39;s ACK, and at any rate we don&#39;t want to</span>
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>	<span class="comment">// allow a misbehaving client to soak up server connections indefinitely by</span>
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	<span class="comment">// withholding an ACK, nor do we want to go through the complexity or overhead</span>
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>	<span class="comment">// of using low-level APIs to figure out when a TCP round-trip has completed.</span>
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>	<span class="comment">// Instead, we declare that we are “reasonably certain” that we received the</span>
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>	<span class="comment">// ACK if maxRSTAvoidanceDelay has elapsed.</span>
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>	time.Sleep(rstAvoidanceDelay)
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>}
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span><span class="comment">// validNextProto reports whether the proto is a valid ALPN protocol name.</span>
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span><span class="comment">// Everything is valid except the empty string and built-in protocol types,</span>
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span><span class="comment">// so that those can&#39;t be overridden with alternate implementations.</span>
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>func validNextProto(proto string) bool {
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>	switch proto {
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>	case &#34;&#34;, &#34;http/1.1&#34;, &#34;http/1.0&#34;:
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>		return false
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>	}
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>	return true
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>}
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>const (
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>	runHooks  = true
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>	skipHooks = false
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>)
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>func (c *conn) setState(nc net.Conn, state ConnState, runHook bool) {
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>	srv := c.server
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>	switch state {
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>	case StateNew:
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>		srv.trackConn(c, true)
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>	case StateHijacked, StateClosed:
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>		srv.trackConn(c, false)
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>	}
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>	if state &gt; 0xff || state &lt; 0 {
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>		panic(&#34;internal error&#34;)
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>	}
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>	packedState := uint64(time.Now().Unix()&lt;&lt;8) | uint64(state)
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>	c.curState.Store(packedState)
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>	if !runHook {
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>		return
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	}
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>	if hook := srv.ConnState; hook != nil {
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>		hook(nc, state)
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>	}
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>}
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span>func (c *conn) getState() (state ConnState, unixSec int64) {
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>	packedState := c.curState.Load()
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>	return ConnState(packedState &amp; 0xff), int64(packedState &gt;&gt; 8)
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>}
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span><span class="comment">// badRequestError is a literal string (used by in the server in HTML,</span>
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span><span class="comment">// unescaped) to tell the user why their request was bad. It should</span>
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span><span class="comment">// be plain text without user info or other embedded errors.</span>
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>func badRequestError(e string) error { return statusError{StatusBadRequest, e} }
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span><span class="comment">// statusError is an error used to respond to a request with an HTTP status.</span>
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span><span class="comment">// The text should be plain text without user info or other embedded errors.</span>
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>type statusError struct {
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>	code int
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>	text string
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>}
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>func (e statusError) Error() string { return StatusText(e.code) + &#34;: &#34; + e.text }
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span><span class="comment">// ErrAbortHandler is a sentinel panic value to abort a handler.</span>
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span><span class="comment">// While any panic from ServeHTTP aborts the response to the client,</span>
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span><span class="comment">// panicking with ErrAbortHandler also suppresses logging of a stack</span>
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span><span class="comment">// trace to the server&#39;s error log.</span>
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>var ErrAbortHandler = errors.New(&#34;net/http: abort Handler&#34;)
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span><span class="comment">// isCommonNetReadError reports whether err is a common error</span>
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span><span class="comment">// encountered during reading a request off the network when the</span>
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span><span class="comment">// client has gone away or had its read fail somehow. This is used to</span>
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span><span class="comment">// determine which logs are interesting enough to log about.</span>
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>func isCommonNetReadError(err error) bool {
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>		return true
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>	}
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>	if neterr, ok := err.(net.Error); ok &amp;&amp; neterr.Timeout() {
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span>		return true
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span>	}
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>	if oe, ok := err.(*net.OpError); ok &amp;&amp; oe.Op == &#34;read&#34; {
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>		return true
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span>	}
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>	return false
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>}
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span><span class="comment">// Serve a new connection.</span>
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>func (c *conn) serve(ctx context.Context) {
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>	if ra := c.rwc.RemoteAddr(); ra != nil {
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>		c.remoteAddr = ra.String()
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>	}
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>	ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>	var inFlightResponse *response
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>	defer func() {
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>		if err := recover(); err != nil &amp;&amp; err != ErrAbortHandler {
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>			const size = 64 &lt;&lt; 10
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>			buf := make([]byte, size)
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>			buf = buf[:runtime.Stack(buf, false)]
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>			c.server.logf(&#34;http: panic serving %v: %v\n%s&#34;, c.remoteAddr, err, buf)
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>		}
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>		if inFlightResponse != nil {
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>			inFlightResponse.cancelCtx()
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>		}
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span>		if !c.hijacked() {
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>			if inFlightResponse != nil {
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>				inFlightResponse.conn.r.abortPendingRead()
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>				inFlightResponse.reqBody.Close()
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>			}
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>			c.close()
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>			c.setState(c.rwc, StateClosed, runHooks)
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>		}
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>	}()
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>	if tlsConn, ok := c.rwc.(*tls.Conn); ok {
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>		tlsTO := c.server.tlsHandshakeTimeout()
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>		if tlsTO &gt; 0 {
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>			dl := time.Now().Add(tlsTO)
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>			c.rwc.SetReadDeadline(dl)
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>			c.rwc.SetWriteDeadline(dl)
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>		}
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>		if err := tlsConn.HandshakeContext(ctx); err != nil {
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>			<span class="comment">// If the handshake failed due to the client not speaking</span>
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>			<span class="comment">// TLS, assume they&#39;re speaking plaintext HTTP and write a</span>
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>			<span class="comment">// 400 response on the TLS conn&#39;s underlying net.Conn.</span>
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>			if re, ok := err.(tls.RecordHeaderError); ok &amp;&amp; re.Conn != nil &amp;&amp; tlsRecordHeaderLooksLikeHTTP(re.RecordHeader) {
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>				io.WriteString(re.Conn, &#34;HTTP/1.0 400 Bad Request\r\n\r\nClient sent an HTTP request to an HTTPS server.\n&#34;)
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>				re.Conn.Close()
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>				return
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>			}
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>			c.server.logf(&#34;http: TLS handshake error from %s: %v&#34;, c.rwc.RemoteAddr(), err)
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span>			return
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>		}
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>		<span class="comment">// Restore Conn-level deadlines.</span>
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>		if tlsTO &gt; 0 {
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>			c.rwc.SetReadDeadline(time.Time{})
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>			c.rwc.SetWriteDeadline(time.Time{})
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>		}
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>		c.tlsState = new(tls.ConnectionState)
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>		*c.tlsState = tlsConn.ConnectionState()
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>		if proto := c.tlsState.NegotiatedProtocol; validNextProto(proto) {
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>			if fn := c.server.TLSNextProto[proto]; fn != nil {
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>				h := initALPNRequest{ctx, tlsConn, serverHandler{c.server}}
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>				<span class="comment">// Mark freshly created HTTP/2 as active and prevent any server state hooks</span>
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>				<span class="comment">// from being run on these connections. This prevents closeIdleConns from</span>
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>				<span class="comment">// closing such connections. See issue https://golang.org/issue/39776.</span>
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>				c.setState(c.rwc, StateActive, skipHooks)
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>				fn(c.server, tlsConn, h)
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>			}
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>			return
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>		}
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>	}
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span>	<span class="comment">// HTTP/1.x from here on.</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span>	ctx, cancelCtx := context.WithCancel(ctx)
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>	c.cancelCtx = cancelCtx
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>	defer cancelCtx()
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span>	c.r = &amp;connReader{conn: c}
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>	c.bufr = newBufioReader(c.r)
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>	c.bufw = newBufioWriterSize(checkConnErrorWriter{c}, 4&lt;&lt;10)
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>	for {
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>		w, err := c.readRequest(ctx)
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>		if c.r.remain != c.server.initialReadLimitSize() {
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>			<span class="comment">// If we read any bytes off the wire, we&#39;re active.</span>
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>			c.setState(c.rwc, StateActive, runHooks)
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>		}
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>		if err != nil {
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>			const errorHeaders = &#34;\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n&#34;
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>			switch {
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>			case err == errTooLarge:
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>				<span class="comment">// Their HTTP client may or may not be</span>
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>				<span class="comment">// able to read this if we&#39;re</span>
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>				<span class="comment">// responding to them and hanging up</span>
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>				<span class="comment">// while they&#39;re still writing their</span>
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>				<span class="comment">// request. Undefined behavior.</span>
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>				const publicErr = &#34;431 Request Header Fields Too Large&#34;
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>				fmt.Fprintf(c.rwc, &#34;HTTP/1.1 &#34;+publicErr+errorHeaders+publicErr)
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>				c.closeWriteAndWait()
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>				return
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>			case isUnsupportedTEError(err):
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>				<span class="comment">// Respond as per RFC 7230 Section 3.3.1 which says,</span>
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>				<span class="comment">//      A server that receives a request message with a</span>
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>				<span class="comment">//      transfer coding it does not understand SHOULD</span>
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>				<span class="comment">//      respond with 501 (Unimplemented).</span>
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>				code := StatusNotImplemented
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>				<span class="comment">// We purposefully aren&#39;t echoing back the transfer-encoding&#39;s value,</span>
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>				<span class="comment">// so as to mitigate the risk of cross side scripting by an attacker.</span>
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>				fmt.Fprintf(c.rwc, &#34;HTTP/1.1 %d %s%sUnsupported transfer encoding&#34;, code, StatusText(code), errorHeaders)
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>				return
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>			case isCommonNetReadError(err):
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>				return <span class="comment">// don&#39;t reply</span>
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>			default:
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>				if v, ok := err.(statusError); ok {
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>					fmt.Fprintf(c.rwc, &#34;HTTP/1.1 %d %s: %s%s%d %s: %s&#34;, v.code, StatusText(v.code), v.text, errorHeaders, v.code, StatusText(v.code), v.text)
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>					return
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>				}
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>				const publicErr = &#34;400 Bad Request&#34;
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>				fmt.Fprintf(c.rwc, &#34;HTTP/1.1 &#34;+publicErr+errorHeaders+publicErr)
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>				return
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>			}
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>		}
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>		<span class="comment">// Expect 100 Continue support</span>
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>		req := w.req
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>		if req.expectsContinue() {
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>			if req.ProtoAtLeast(1, 1) &amp;&amp; req.ContentLength != 0 {
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>				<span class="comment">// Wrap the Body reader with one that replies on the connection</span>
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>				req.Body = &amp;expectContinueReader{readCloser: req.Body, resp: w}
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>				w.canWriteContinue.Store(true)
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>			}
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>		} else if req.Header.get(&#34;Expect&#34;) != &#34;&#34; {
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>			w.sendExpectationFailed()
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>			return
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>		}
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>		c.curReq.Store(w)
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>		if requestBodyRemains(req.Body) {
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>			registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead)
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>		} else {
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>			w.conn.r.startBackgroundRead()
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span>		}
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span>
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>		<span class="comment">// HTTP cannot have multiple simultaneous active requests.[*]</span>
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>		<span class="comment">// Until the server replies to this request, it can&#39;t read another,</span>
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>		<span class="comment">// so we might as well run the handler in this goroutine.</span>
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>		<span class="comment">// [*] Not strictly true: HTTP pipelining. We could let them all process</span>
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>		<span class="comment">// in parallel even if their responses need to be serialized.</span>
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>		<span class="comment">// But we&#39;re not going to implement HTTP pipelining because it</span>
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>		<span class="comment">// was never deployed in the wild and the answer is HTTP/2.</span>
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>		inFlightResponse = w
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>		serverHandler{c.server}.ServeHTTP(w, w.req)
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>		inFlightResponse = nil
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>		w.cancelCtx()
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>		if c.hijacked() {
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>			return
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>		}
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>		w.finishRequest()
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>		c.rwc.SetWriteDeadline(time.Time{})
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>		if !w.shouldReuseConnection() {
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span>			if w.requestBodyLimitHit || w.closedRequestBodyEarly() {
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span>				c.closeWriteAndWait()
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>			}
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>			return
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>		}
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>		c.setState(c.rwc, StateIdle, runHooks)
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>		c.curReq.Store(nil)
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>		if !w.conn.server.doKeepAlives() {
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>			<span class="comment">// We&#39;re in shutdown mode. We might&#39;ve replied</span>
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>			<span class="comment">// to the user without &#34;Connection: close&#34; and</span>
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>			<span class="comment">// they might think they can send another</span>
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>			<span class="comment">// request, but such is life with HTTP/1.1.</span>
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>			return
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>		}
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>		if d := c.server.idleTimeout(); d != 0 {
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>			c.rwc.SetReadDeadline(time.Now().Add(d))
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>		} else {
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>			c.rwc.SetReadDeadline(time.Time{})
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>		}
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>		<span class="comment">// Wait for the connection to become readable again before trying to</span>
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>		<span class="comment">// read the next request. This prevents a ReadHeaderTimeout or</span>
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>		<span class="comment">// ReadTimeout from starting until the first bytes of the next request</span>
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>		<span class="comment">// have been received.</span>
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span>		if _, err := c.bufr.Peek(4); err != nil {
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span>			return
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>		}
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>		c.rwc.SetReadDeadline(time.Time{})
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>	}
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>}
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>func (w *response) sendExpectationFailed() {
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): let ServeHTTP handlers handle</span>
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>	<span class="comment">// requests with non-standard expectation[s]? Seems</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>	<span class="comment">// theoretical at best, and doesn&#39;t fit into the</span>
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>	<span class="comment">// current ServeHTTP model anyway. We&#39;d need to</span>
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>	<span class="comment">// make the ResponseWriter an optional</span>
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>	<span class="comment">// &#34;ExpectReplier&#34; interface or something.</span>
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>	<span class="comment">// For now we&#39;ll just obey RFC 7231 5.1.1 which says</span>
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>	<span class="comment">// &#34;A server that receives an Expect field-value other</span>
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>	<span class="comment">// than 100-continue MAY respond with a 417 (Expectation</span>
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>	<span class="comment">// Failed) status code to indicate that the unexpected</span>
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>	<span class="comment">// expectation cannot be met.&#34;</span>
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>	w.Header().Set(&#34;Connection&#34;, &#34;close&#34;)
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	w.WriteHeader(StatusExpectationFailed)
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	w.finishRequest()
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>}
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span><span class="comment">// Hijack implements the [Hijacker.Hijack] method. Our response is both a [ResponseWriter]</span>
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span><span class="comment">// and a [Hijacker].</span>
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>func (w *response) Hijack() (rwc net.Conn, buf *bufio.ReadWriter, err error) {
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>	if w.handlerDone.Load() {
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>		panic(&#34;net/http: Hijack called after ServeHTTP finished&#34;)
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>	}
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	if w.wroteHeader {
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>		w.cw.flush()
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>	}
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span>
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span>	c := w.conn
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span>	c.mu.Lock()
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>	defer c.mu.Unlock()
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>	<span class="comment">// Release the bufioWriter that writes to the chunk writer, it is not</span>
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>	<span class="comment">// used after a connection has been hijacked.</span>
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	rwc, buf, err = c.hijackLocked()
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>	if err == nil {
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>		putBufioWriter(w.w)
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>		w.w = nil
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>	}
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>	return rwc, buf, err
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>}
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>func (w *response) CloseNotify() &lt;-chan bool {
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span>	if w.handlerDone.Load() {
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>		panic(&#34;net/http: CloseNotify called after ServeHTTP finished&#34;)
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>	}
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>	return w.closeNotifyCh
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>}
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span>
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span>func registerOnHitEOF(rc io.ReadCloser, fn func()) {
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span>	switch v := rc.(type) {
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span>	case *expectContinueReader:
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span>		registerOnHitEOF(v.readCloser, fn)
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span>	case *body:
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>		v.registerOnHitEOF(fn)
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>	default:
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>		panic(&#34;unexpected type &#34; + fmt.Sprintf(&#34;%T&#34;, rc))
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>	}
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>}
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span>
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span><span class="comment">// requestBodyRemains reports whether future calls to Read</span>
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span><span class="comment">// on rc might yield more data.</span>
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>func requestBodyRemains(rc io.ReadCloser) bool {
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>	if rc == NoBody {
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>		return false
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>	}
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>	switch v := rc.(type) {
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>	case *expectContinueReader:
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span>		return requestBodyRemains(v.readCloser)
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span>	case *body:
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span>		return v.bodyRemains()
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span>	default:
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span>		panic(&#34;unexpected type &#34; + fmt.Sprintf(&#34;%T&#34;, rc))
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span>	}
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>}
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span><span class="comment">// The HandlerFunc type is an adapter to allow the use of</span>
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span><span class="comment">// ordinary functions as HTTP handlers. If f is a function</span>
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span><span class="comment">// with the appropriate signature, HandlerFunc(f) is a</span>
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span><span class="comment">// [Handler] that calls f.</span>
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>type HandlerFunc func(ResponseWriter, *Request)
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span><span class="comment">// ServeHTTP calls f(w, r).</span>
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>	f(w, r)
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>}
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span><span class="comment">// Helper handlers</span>
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span><span class="comment">// Error replies to the request with the specified error message and HTTP code.</span>
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span><span class="comment">// It does not otherwise end the request; the caller should ensure no further</span>
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span><span class="comment">// writes are done to w.</span>
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span><span class="comment">// The error message should be plain text.</span>
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>func Error(w ResponseWriter, error string, code int) {
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>	w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>	w.Header().Set(&#34;X-Content-Type-Options&#34;, &#34;nosniff&#34;)
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>	w.WriteHeader(code)
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>	fmt.Fprintln(w, error)
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>}
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span><span class="comment">// NotFound replies to the request with an HTTP 404 not found error.</span>
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>func NotFound(w ResponseWriter, r *Request) { Error(w, &#34;404 page not found&#34;, StatusNotFound) }
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span><span class="comment">// NotFoundHandler returns a simple request handler</span>
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span><span class="comment">// that replies to each request with a “404 page not found” reply.</span>
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>func NotFoundHandler() Handler { return HandlerFunc(NotFound) }
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span><span class="comment">// StripPrefix returns a handler that serves HTTP requests by removing the</span>
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span><span class="comment">// given prefix from the request URL&#39;s Path (and RawPath if set) and invoking</span>
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span><span class="comment">// the handler h. StripPrefix handles a request for a path that doesn&#39;t begin</span>
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span><span class="comment">// with prefix by replying with an HTTP 404 not found error. The prefix must</span>
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span><span class="comment">// match exactly: if the prefix in the request contains escaped characters</span>
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span><span class="comment">// the reply is also an HTTP 404 not found error.</span>
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>func StripPrefix(prefix string, h Handler) Handler {
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>	if prefix == &#34;&#34; {
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>		return h
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>	}
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>	return HandlerFunc(func(w ResponseWriter, r *Request) {
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>		p := strings.TrimPrefix(r.URL.Path, prefix)
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>		rp := strings.TrimPrefix(r.URL.RawPath, prefix)
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>		if len(p) &lt; len(r.URL.Path) &amp;&amp; (r.URL.RawPath == &#34;&#34; || len(rp) &lt; len(r.URL.RawPath)) {
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>			r2 := new(Request)
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>			*r2 = *r
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>			r2.URL = new(url.URL)
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>			*r2.URL = *r.URL
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>			r2.URL.Path = p
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>			r2.URL.RawPath = rp
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>			h.ServeHTTP(w, r2)
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>		} else {
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>			NotFound(w, r)
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>		}
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>	})
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>}
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span><span class="comment">// Redirect replies to the request with a redirect to url,</span>
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span><span class="comment">// which may be a path relative to the request path.</span>
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span><span class="comment">// The provided code should be in the 3xx range and is usually</span>
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span><span class="comment">// [StatusMovedPermanently], [StatusFound] or [StatusSeeOther].</span>
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span><span class="comment">// If the Content-Type header has not been set, [Redirect] sets it</span>
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span><span class="comment">// to &#34;text/html; charset=utf-8&#34; and writes a small HTML body.</span>
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span><span class="comment">// Setting the Content-Type header to any value, including nil,</span>
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span><span class="comment">// disables that behavior.</span>
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>func Redirect(w ResponseWriter, r *Request, url string, code int) {
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>	if u, err := urlpkg.Parse(url); err == nil {
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>		<span class="comment">// If url was relative, make its path absolute by</span>
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>		<span class="comment">// combining with request path.</span>
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>		<span class="comment">// The client would probably do this for us,</span>
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>		<span class="comment">// but doing it ourselves is more reliable.</span>
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>		<span class="comment">// See RFC 7231, section 7.1.2</span>
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>		if u.Scheme == &#34;&#34; &amp;&amp; u.Host == &#34;&#34; {
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>			oldpath := r.URL.Path
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>			if oldpath == &#34;&#34; { <span class="comment">// should not happen, but avoid a crash if it does</span>
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>				oldpath = &#34;/&#34;
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>			}
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>			<span class="comment">// no leading http://server</span>
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>			if url == &#34;&#34; || url[0] != &#39;/&#39; {
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>				<span class="comment">// make relative path absolute</span>
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>				olddir, _ := path.Split(oldpath)
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>				url = olddir + url
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>			}
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>			var query string
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span>			if i := strings.Index(url, &#34;?&#34;); i != -1 {
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span>				url, query = url[:i], url[i:]
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>			}
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>			<span class="comment">// clean up but preserve trailing slash</span>
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>			trailing := strings.HasSuffix(url, &#34;/&#34;)
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>			url = path.Clean(url)
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>			if trailing &amp;&amp; !strings.HasSuffix(url, &#34;/&#34;) {
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>				url += &#34;/&#34;
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>			}
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>			url += query
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>		}
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>	}
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>	h := w.Header()
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>	<span class="comment">// RFC 7231 notes that a short HTML body is usually included in</span>
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>	<span class="comment">// the response because older user agents may not understand 301/307.</span>
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>	<span class="comment">// Do it only if the request didn&#39;t already have a Content-Type header.</span>
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>	_, hadCT := h[&#34;Content-Type&#34;]
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>	h.Set(&#34;Location&#34;, hexEscapeNonASCII(url))
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>	if !hadCT &amp;&amp; (r.Method == &#34;GET&#34; || r.Method == &#34;HEAD&#34;) {
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>		h.Set(&#34;Content-Type&#34;, &#34;text/html; charset=utf-8&#34;)
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>	}
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>	w.WriteHeader(code)
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>	<span class="comment">// Shouldn&#39;t send the body for POST or HEAD; that leaves GET.</span>
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>	if !hadCT &amp;&amp; r.Method == &#34;GET&#34; {
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>		body := &#34;&lt;a href=\&#34;&#34; + htmlEscape(url) + &#34;\&#34;&gt;&#34; + StatusText(code) + &#34;&lt;/a&gt;.\n&#34;
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>		fmt.Fprintln(w, body)
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>	}
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>}
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>var htmlReplacer = strings.NewReplacer(
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>	&#34;&amp;&#34;, &#34;&amp;amp;&#34;,
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>	&#34;&lt;&#34;, &#34;&amp;lt;&#34;,
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>	&#34;&gt;&#34;, &#34;&amp;gt;&#34;,
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>	<span class="comment">// &#34;&amp;#34;&#34; is shorter than &#34;&amp;quot;&#34;.</span>
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>	`&#34;`, &#34;&amp;#34;&#34;,
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>	<span class="comment">// &#34;&amp;#39;&#34; is shorter than &#34;&amp;apos;&#34; and apos was not in HTML until HTML5.</span>
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>	&#34;&#39;&#34;, &#34;&amp;#39;&#34;,
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>)
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>func htmlEscape(s string) string {
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>	return htmlReplacer.Replace(s)
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>}
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span><span class="comment">// Redirect to a fixed URL</span>
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>type redirectHandler struct {
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>	url  string
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>	code int
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>}
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>func (rh *redirectHandler) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>	Redirect(w, r, rh.url, rh.code)
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>}
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span><span class="comment">// RedirectHandler returns a request handler that redirects</span>
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span><span class="comment">// each request it receives to the given url using the given</span>
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span><span class="comment">// status code.</span>
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span><span class="comment">// The provided code should be in the 3xx range and is usually</span>
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span><span class="comment">// [StatusMovedPermanently], [StatusFound] or [StatusSeeOther].</span>
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>func RedirectHandler(url string, code int) Handler {
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>	return &amp;redirectHandler{url, code}
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>}
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span><span class="comment">// ServeMux is an HTTP request multiplexer.</span>
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span><span class="comment">// It matches the URL of each incoming request against a list of registered</span>
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span><span class="comment">// patterns and calls the handler for the pattern that</span>
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span><span class="comment">// most closely matches the URL.</span>
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span><span class="comment">// # Patterns</span>
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span><span class="comment">// Patterns can match the method, host and path of a request.</span>
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span><span class="comment">// Some examples:</span>
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span><span class="comment">//   - &#34;/index.html&#34; matches the path &#34;/index.html&#34; for any host and method.</span>
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span><span class="comment">//   - &#34;GET /static/&#34; matches a GET request whose path begins with &#34;/static/&#34;.</span>
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span><span class="comment">//   - &#34;example.com/&#34; matches any request to the host &#34;example.com&#34;.</span>
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span><span class="comment">//   - &#34;example.com/{$}&#34; matches requests with host &#34;example.com&#34; and path &#34;/&#34;.</span>
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span><span class="comment">//   - &#34;/b/{bucket}/o/{objectname...}&#34; matches paths whose first segment is &#34;b&#34;</span>
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span><span class="comment">//     and whose third segment is &#34;o&#34;. The name &#34;bucket&#34; denotes the second</span>
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span><span class="comment">//     segment and &#34;objectname&#34; denotes the remainder of the path.</span>
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span><span class="comment">// In general, a pattern looks like</span>
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span><span class="comment">//	[METHOD ][HOST]/[PATH]</span>
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span><span class="comment">// All three parts are optional; &#34;/&#34; is a valid pattern.</span>
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span><span class="comment">// If METHOD is present, it must be followed by a single space.</span>
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span><span class="comment">// Literal (that is, non-wildcard) parts of a pattern match</span>
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span><span class="comment">// the corresponding parts of a request case-sensitively.</span>
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span><span class="comment">// A pattern with no method matches every method. A pattern</span>
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span><span class="comment">// with the method GET matches both GET and HEAD requests.</span>
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span><span class="comment">// Otherwise, the method must match exactly.</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span><span class="comment">// A pattern with no host matches every host.</span>
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span><span class="comment">// A pattern with a host matches URLs on that host only.</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span><span class="comment">// A path can include wildcard segments of the form {NAME} or {NAME...}.</span>
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span><span class="comment">// For example, &#34;/b/{bucket}/o/{objectname...}&#34;.</span>
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span><span class="comment">// The wildcard name must be a valid Go identifier.</span>
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span><span class="comment">// Wildcards must be full path segments: they must be preceded by a slash and followed by</span>
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span><span class="comment">// either a slash or the end of the string.</span>
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span><span class="comment">// For example, &#34;/b_{bucket}&#34; is not a valid pattern.</span>
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span><span class="comment">// Normally a wildcard matches only a single path segment,</span>
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span><span class="comment">// ending at the next literal slash (not %2F) in the request URL.</span>
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span><span class="comment">// But if the &#34;...&#34; is present, then the wildcard matches the remainder of the URL path, including slashes.</span>
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span><span class="comment">// (Therefore it is invalid for a &#34;...&#34; wildcard to appear anywhere but at the end of a pattern.)</span>
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span><span class="comment">// The match for a wildcard can be obtained by calling [Request.PathValue] with the wildcard&#39;s name.</span>
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span><span class="comment">// A trailing slash in a path acts as an anonymous &#34;...&#34; wildcard.</span>
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span><span class="comment">// The special wildcard {$} matches only the end of the URL.</span>
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span><span class="comment">// For example, the pattern &#34;/{$}&#34; matches only the path &#34;/&#34;,</span>
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span><span class="comment">// whereas the pattern &#34;/&#34; matches every path.</span>
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span><span class="comment">// For matching, both pattern paths and incoming request paths are unescaped segment by segment.</span>
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span><span class="comment">// So, for example, the path &#34;/a%2Fb/100%25&#34; is treated as having two segments, &#34;a/b&#34; and &#34;100%&#34;.</span>
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span><span class="comment">// The pattern &#34;/a%2fb/&#34; matches it, but the pattern &#34;/a/b/&#34; does not.</span>
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span><span class="comment">// # Precedence</span>
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span><span class="comment">// If two or more patterns match a request, then the most specific pattern takes precedence.</span>
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span><span class="comment">// A pattern P1 is more specific than P2 if P1 matches a strict subset of P2’s requests;</span>
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span><span class="comment">// that is, if P2 matches all the requests of P1 and more.</span>
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span><span class="comment">// If neither is more specific, then the patterns conflict.</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span><span class="comment">// There is one exception to this rule, for backwards compatibility:</span>
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span><span class="comment">// if two patterns would otherwise conflict and one has a host while the other does not,</span>
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span><span class="comment">// then the pattern with the host takes precedence.</span>
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span><span class="comment">// If a pattern passed [ServeMux.Handle] or [ServeMux.HandleFunc] conflicts with</span>
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span><span class="comment">// another pattern that is already registered, those functions panic.</span>
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span><span class="comment">// As an example of the general rule, &#34;/images/thumbnails/&#34; is more specific than &#34;/images/&#34;,</span>
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span><span class="comment">// so both can be registered.</span>
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span><span class="comment">// The former matches paths beginning with &#34;/images/thumbnails/&#34;</span>
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span><span class="comment">// and the latter will match any other path in the &#34;/images/&#34; subtree.</span>
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span><span class="comment">// As another example, consider the patterns &#34;GET /&#34; and &#34;/index.html&#34;:</span>
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span><span class="comment">// both match a GET request for &#34;/index.html&#34;, but the former pattern</span>
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span><span class="comment">// matches all other GET and HEAD requests, while the latter matches any</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span><span class="comment">// request for &#34;/index.html&#34; that uses a different method.</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span><span class="comment">// The patterns conflict.</span>
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span><span class="comment">// # Trailing-slash redirection</span>
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span><span class="comment">// Consider a [ServeMux] with a handler for a subtree, registered using a trailing slash or &#34;...&#34; wildcard.</span>
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span><span class="comment">// If the ServeMux receives a request for the subtree root without a trailing slash,</span>
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span><span class="comment">// it redirects the request by adding the trailing slash.</span>
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span><span class="comment">// This behavior can be overridden with a separate registration for the path without</span>
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span><span class="comment">// the trailing slash or &#34;...&#34; wildcard. For example, registering &#34;/images/&#34; causes ServeMux</span>
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span><span class="comment">// to redirect a request for &#34;/images&#34; to &#34;/images/&#34;, unless &#34;/images&#34; has</span>
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span><span class="comment">// been registered separately.</span>
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span><span class="comment">// # Request sanitizing</span>
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span><span class="comment">// ServeMux also takes care of sanitizing the URL request path and the Host</span>
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span><span class="comment">// header, stripping the port number and redirecting any request containing . or</span>
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span><span class="comment">// .. segments or repeated slashes to an equivalent, cleaner URL.</span>
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span><span class="comment">// # Compatibility</span>
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span><span class="comment">// The pattern syntax and matching behavior of ServeMux changed significantly</span>
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span><span class="comment">// in Go 1.22. To restore the old behavior, set the GODEBUG environment variable</span>
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span><span class="comment">// to &#34;httpmuxgo121=1&#34;. This setting is read once, at program startup; changes</span>
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span><span class="comment">// during execution will be ignored.</span>
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span><span class="comment">// The backwards-incompatible changes include:</span>
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span><span class="comment">//   - Wildcards are just ordinary literal path segments in 1.21.</span>
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span><span class="comment">//     For example, the pattern &#34;/{x}&#34; will match only that path in 1.21,</span>
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span><span class="comment">//     but will match any one-segment path in 1.22.</span>
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span><span class="comment">//   - In 1.21, no pattern was rejected, unless it was empty or conflicted with an existing pattern.</span>
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span><span class="comment">//     In 1.22, syntactically invalid patterns will cause [ServeMux.Handle] and [ServeMux.HandleFunc] to panic.</span>
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span><span class="comment">//     For example, in 1.21, the patterns &#34;/{&#34;  and &#34;/a{x}&#34; match themselves,</span>
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span><span class="comment">//     but in 1.22 they are invalid and will cause a panic when registered.</span>
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span><span class="comment">//   - In 1.22, each segment of a pattern is unescaped; this was not done in 1.21.</span>
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span><span class="comment">//     For example, in 1.22 the pattern &#34;/%61&#34; matches the path &#34;/a&#34; (&#34;%61&#34; being the URL escape sequence for &#34;a&#34;),</span>
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span><span class="comment">//     but in 1.21 it would match only the path &#34;/%2561&#34; (where &#34;%25&#34; is the escape for the percent sign).</span>
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span><span class="comment">//   - When matching patterns to paths, in 1.22 each segment of the path is unescaped; in 1.21, the entire path is unescaped.</span>
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span><span class="comment">//     This change mostly affects how paths with %2F escapes adjacent to slashes are treated.</span>
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span><span class="comment">//     See https://go.dev/issue/21955 for details.</span>
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>type ServeMux struct {
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>	mu       sync.RWMutex
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>	tree     routingNode
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>	index    routingIndex
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>	patterns []*pattern  <span class="comment">// TODO(jba): remove if possible</span>
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>	mux121   serveMux121 <span class="comment">// used only when GODEBUG=httpmuxgo121=1</span>
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>}
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span><span class="comment">// NewServeMux allocates and returns a new [ServeMux].</span>
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>func NewServeMux() *ServeMux {
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>	return &amp;ServeMux{}
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>}
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span><span class="comment">// DefaultServeMux is the default [ServeMux] used by [Serve].</span>
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>var DefaultServeMux = &amp;defaultServeMux
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>var defaultServeMux ServeMux
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span><span class="comment">// cleanPath returns the canonical path for p, eliminating . and .. elements.</span>
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>func cleanPath(p string) string {
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>	if p == &#34;&#34; {
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>		return &#34;/&#34;
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>	}
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>	if p[0] != &#39;/&#39; {
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>		p = &#34;/&#34; + p
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>	}
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>	np := path.Clean(p)
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>	<span class="comment">// path.Clean removes trailing slash except for root;</span>
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>	<span class="comment">// put the trailing slash back if necessary.</span>
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span>	if p[len(p)-1] == &#39;/&#39; &amp;&amp; np != &#34;/&#34; {
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>		<span class="comment">// Fast path for common case of p being the string we want:</span>
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>		if len(p) == len(np)+1 &amp;&amp; strings.HasPrefix(p, np) {
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>			np = p
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>		} else {
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>			np += &#34;/&#34;
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>		}
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>	}
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>	return np
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>}
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span><span class="comment">// stripHostPort returns h without any trailing &#34;:&lt;port&gt;&#34;.</span>
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>func stripHostPort(h string) string {
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>	<span class="comment">// If no port on host, return unchanged</span>
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>	if !strings.Contains(h, &#34;:&#34;) {
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>		return h
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>	}
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>	host, _, err := net.SplitHostPort(h)
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>	if err != nil {
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>		return h <span class="comment">// on error, return unchanged</span>
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>	}
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>	return host
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span>}
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span><span class="comment">// Handler returns the handler to use for the given request,</span>
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span><span class="comment">// consulting r.Method, r.Host, and r.URL.Path. It always returns</span>
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span><span class="comment">// a non-nil handler. If the path is not in its canonical form, the</span>
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span><span class="comment">// handler will be an internally-generated handler that redirects</span>
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span><span class="comment">// to the canonical path. If the host contains a port, it is ignored</span>
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span><span class="comment">// when matching handlers.</span>
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span><span class="comment">// The path and host are used unchanged for CONNECT requests.</span>
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span><span class="comment">// Handler also returns the registered pattern that matches the</span>
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span><span class="comment">// request or, in the case of internally-generated redirects,</span>
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span><span class="comment">// the path that will match after following the redirect.</span>
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span><span class="comment">// If there is no registered handler that applies to the request,</span>
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span><span class="comment">// Handler returns a “page not found” handler and an empty pattern.</span>
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string) {
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>	if use121 {
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>		return mux.mux121.findHandler(r)
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>	}
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>	h, p, _, _ := mux.findHandler(r)
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span>	return h, p
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span>}
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span>
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span><span class="comment">// findHandler finds a handler for a request.</span>
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span><span class="comment">// If there is a matching handler, it returns it and the pattern that matched.</span>
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span><span class="comment">// Otherwise it returns a Redirect or NotFound handler with the path that would match</span>
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span><span class="comment">// after the redirect.</span>
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>func (mux *ServeMux) findHandler(r *Request) (h Handler, patStr string, _ *pattern, matches []string) {
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span>	var n *routingNode
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>	host := r.URL.Host
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>	escapedPath := r.URL.EscapedPath()
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>	path := escapedPath
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>	<span class="comment">// CONNECT requests are not canonicalized.</span>
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span>	if r.Method == &#34;CONNECT&#34; {
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span>		<span class="comment">// If r.URL.Path is /tree and its handler is not registered,</span>
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>		<span class="comment">// the /tree -&gt; /tree/ redirect applies to CONNECT requests</span>
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>		<span class="comment">// but the path canonicalization does not.</span>
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>		_, _, u := mux.matchOrRedirect(host, r.Method, path, r.URL)
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span>		if u != nil {
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span>			return RedirectHandler(u.String(), StatusMovedPermanently), u.Path, nil, nil
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span>		}
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span>		<span class="comment">// Redo the match, this time with r.Host instead of r.URL.Host.</span>
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span>		<span class="comment">// Pass a nil URL to skip the trailing-slash redirect logic.</span>
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span>		n, matches, _ = mux.matchOrRedirect(r.Host, r.Method, path, nil)
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span>	} else {
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span>		<span class="comment">// All other requests have any port stripped and path cleaned</span>
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span>		<span class="comment">// before passing to mux.handler.</span>
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span>		host = stripHostPort(r.Host)
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span>		path = cleanPath(path)
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span>
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span>		<span class="comment">// If the given path is /tree and its handler is not registered,</span>
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span>		<span class="comment">// redirect for /tree/.</span>
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>		var u *url.URL
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>		n, matches, u = mux.matchOrRedirect(host, r.Method, path, r.URL)
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>		if u != nil {
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span>			return RedirectHandler(u.String(), StatusMovedPermanently), u.Path, nil, nil
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span>		}
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span>		if path != escapedPath {
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span>			<span class="comment">// Redirect to cleaned path.</span>
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span>			patStr := &#34;&#34;
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span>			if n != nil {
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span>				patStr = n.pattern.String()
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span>			}
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span>			u := &amp;url.URL{Path: path, RawQuery: r.URL.RawQuery}
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span>			return RedirectHandler(u.String(), StatusMovedPermanently), patStr, nil, nil
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span>		}
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span>	}
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span>	if n == nil {
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span>		<span class="comment">// We didn&#39;t find a match with the request method. To distinguish between</span>
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span>		<span class="comment">// Not Found and Method Not Allowed, see if there is another pattern that</span>
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span>		<span class="comment">// matches except for the method.</span>
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span>		allowedMethods := mux.matchingMethods(host, path)
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>		if len(allowedMethods) &gt; 0 {
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>			return HandlerFunc(func(w ResponseWriter, r *Request) {
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>				w.Header().Set(&#34;Allow&#34;, strings.Join(allowedMethods, &#34;, &#34;))
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>				Error(w, StatusText(StatusMethodNotAllowed), StatusMethodNotAllowed)
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span>			}), &#34;&#34;, nil, nil
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span>		}
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span>		return NotFoundHandler(), &#34;&#34;, nil, nil
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span>	}
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>	return n.handler, n.pattern.String(), n.pattern, matches
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>}
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span><span class="comment">// matchOrRedirect looks up a node in the tree that matches the host, method and path.</span>
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span><span class="comment">// If the url argument is non-nil, handler also deals with trailing-slash</span>
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span><span class="comment">// redirection: when a path doesn&#39;t match exactly, the match is tried again</span>
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span><span class="comment">// after appending &#34;/&#34; to the path. If that second match succeeds, the last</span>
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span><span class="comment">// return value is the URL to redirect to.</span>
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>func (mux *ServeMux) matchOrRedirect(host, method, path string, u *url.URL) (_ *routingNode, matches []string, redirectTo *url.URL) {
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>	mux.mu.RLock()
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>	defer mux.mu.RUnlock()
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>	n, matches := mux.tree.match(host, method, path)
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span>	<span class="comment">// If we have an exact match, or we were asked not to try trailing-slash redirection,</span>
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span>	<span class="comment">// then we&#39;re done.</span>
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span>	if !exactMatch(n, path) &amp;&amp; u != nil {
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span>		<span class="comment">// If there is an exact match with a trailing slash, then redirect.</span>
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span>		path += &#34;/&#34;
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span>		n2, _ := mux.tree.match(host, method, path)
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span>		if exactMatch(n2, path) {
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span>			return nil, nil, &amp;url.URL{Path: cleanPath(u.Path) + &#34;/&#34;, RawQuery: u.RawQuery}
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span>		}
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span>	}
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span>	return n, matches, nil
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span>}
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span>
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span><span class="comment">// exactMatch reports whether the node&#39;s pattern exactly matches the path.</span>
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span><span class="comment">// As a special case, if the node is nil, exactMatch return false.</span>
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span><span class="comment">// Before wildcards were introduced, it was clear that an exact match meant</span>
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span><span class="comment">// that the pattern and path were the same string. The only other possibility</span>
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span><span class="comment">// was that a trailing-slash pattern, like &#34;/&#34;, matched a path longer than</span>
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span><span class="comment">// it, like &#34;/a&#34;.</span>
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span><span class="comment">// With wildcards, we define an inexact match as any one where a multi wildcard</span>
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span><span class="comment">// matches a non-empty string. All other matches are exact.</span>
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span><span class="comment">// For example, these are all exact matches:</span>
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span><span class="comment">//	pattern   path</span>
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span><span class="comment">//	/a        /a</span>
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span><span class="comment">//	/{x}      /a</span>
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span><span class="comment">//	/a/{$}    /a/</span>
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span><span class="comment">//	/a/       /a/</span>
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span><span class="comment">// The last case has a multi wildcard (implicitly), but the match is exact because</span>
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span><span class="comment">// the wildcard matches the empty string.</span>
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span><span class="comment">// Examples of matches that are not exact:</span>
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span><span class="comment">//	pattern   path</span>
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span><span class="comment">//	/         /a</span>
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span><span class="comment">//	/a/{x...} /a/b</span>
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>func exactMatch(n *routingNode, path string) bool {
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span>	if n == nil {
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span>		return false
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span>	}
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span>	<span class="comment">// We can&#39;t directly implement the definition (empty match for multi</span>
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span>	<span class="comment">// wildcard) because we don&#39;t record a match for anonymous multis.</span>
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span>
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span>	<span class="comment">// If there is no multi, the match is exact.</span>
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span>	if !n.pattern.lastSegment().multi {
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span>		return true
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>	}
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>	<span class="comment">// If the path doesn&#39;t end in a trailing slash, then the multi match</span>
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>	<span class="comment">// is non-empty.</span>
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>	if len(path) &gt; 0 &amp;&amp; path[len(path)-1] != &#39;/&#39; {
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>		return false
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>	}
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span>	<span class="comment">// Only patterns ending in {$} or a multi wildcard can</span>
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span>	<span class="comment">// match a path with a trailing slash.</span>
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>	<span class="comment">// For the match to be exact, the number of pattern</span>
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>	<span class="comment">// segments should be the same as the number of slashes in the path.</span>
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>	<span class="comment">// E.g. &#34;/a/b/{$}&#34; and &#34;/a/b/{...}&#34; exactly match &#34;/a/b/&#34;, but &#34;/a/&#34; does not.</span>
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span>	return len(n.pattern.segments) == strings.Count(path, &#34;/&#34;)
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span>}
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span>
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span><span class="comment">// matchingMethods return a sorted list of all methods that would match with the given host and path.</span>
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span>func (mux *ServeMux) matchingMethods(host, path string) []string {
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span>	<span class="comment">// Hold the read lock for the entire method so that the two matches are done</span>
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>	<span class="comment">// on the same set of registered patterns.</span>
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span>	mux.mu.RLock()
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span>	defer mux.mu.RUnlock()
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span>	ms := map[string]bool{}
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span>	mux.tree.matchingMethods(host, path, ms)
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span>	<span class="comment">// matchOrRedirect will try appending a trailing slash if there is no match.</span>
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>	mux.tree.matchingMethods(host, path+&#34;/&#34;, ms)
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>	methods := mapKeys(ms)
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>	sort.Strings(methods)
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>	return methods
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>}
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span><span class="comment">// TODO(jba): replace with maps.Keys when it is defined.</span>
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span>func mapKeys[K comparable, V any](m map[K]V) []K {
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span>	var ks []K
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span>	for k := range m {
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span>		ks = append(ks, k)
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span>	}
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span>	return ks
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span>}
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span>
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span><span class="comment">// ServeHTTP dispatches the request to the handler whose</span>
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span><span class="comment">// pattern most closely matches the request URL.</span>
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>	if r.RequestURI == &#34;*&#34; {
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>		if r.ProtoAtLeast(1, 1) {
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span>			w.Header().Set(&#34;Connection&#34;, &#34;close&#34;)
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span>		}
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span>		w.WriteHeader(StatusBadRequest)
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span>		return
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span>	}
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span>	var h Handler
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>	if use121 {
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>		h, _ = mux.mux121.findHandler(r)
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>	} else {
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>		h, _, r.pat, r.matches = mux.findHandler(r)
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>	}
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>	h.ServeHTTP(w, r)
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span>}
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span><span class="comment">// The four functions below all call ServeMux.register so that callerLocation</span>
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span><span class="comment">// always refers to user code.</span>
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span><span class="comment">// Handle registers the handler for the given pattern.</span>
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span><span class="comment">// If the given pattern conflicts, with one that is already registered, Handle</span>
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span><span class="comment">// panics.</span>
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>func (mux *ServeMux) Handle(pattern string, handler Handler) {
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>	if use121 {
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>		mux.mux121.handle(pattern, handler)
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>	} else {
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>		mux.register(pattern, handler)
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>	}
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span>}
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span>
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span><span class="comment">// HandleFunc registers the handler function for the given pattern.</span>
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span><span class="comment">// If the given pattern conflicts, with one that is already registered, HandleFunc</span>
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span><span class="comment">// panics.</span>
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span>func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>	if use121 {
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>		mux.mux121.handleFunc(pattern, handler)
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>	} else {
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>		mux.register(pattern, HandlerFunc(handler))
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>	}
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>}
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span><span class="comment">// Handle registers the handler for the given pattern in [DefaultServeMux].</span>
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span><span class="comment">// The documentation for [ServeMux] explains how patterns are matched.</span>
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>func Handle(pattern string, handler Handler) {
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>	if use121 {
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>		DefaultServeMux.mux121.handle(pattern, handler)
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>	} else {
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>		DefaultServeMux.register(pattern, handler)
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>	}
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>}
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span>
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span><span class="comment">// HandleFunc registers the handler function for the given pattern in [DefaultServeMux].</span>
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span><span class="comment">// The documentation for [ServeMux] explains how patterns are matched.</span>
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span>func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span>	if use121 {
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span>		DefaultServeMux.mux121.handleFunc(pattern, handler)
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span>	} else {
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span>		DefaultServeMux.register(pattern, HandlerFunc(handler))
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span>	}
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span>}
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span>
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span>func (mux *ServeMux) register(pattern string, handler Handler) {
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span>	if err := mux.registerErr(pattern, handler); err != nil {
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span>		panic(err)
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span>	}
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span>}
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>func (mux *ServeMux) registerErr(patstr string, handler Handler) error {
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>	if patstr == &#34;&#34; {
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>		return errors.New(&#34;http: invalid pattern&#34;)
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>	}
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>	if handler == nil {
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>		return errors.New(&#34;http: nil handler&#34;)
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>	}
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>	if f, ok := handler.(HandlerFunc); ok &amp;&amp; f == nil {
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>		return errors.New(&#34;http: nil handler&#34;)
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>	}
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>	pat, err := parsePattern(patstr)
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>	if err != nil {
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>		return fmt.Errorf(&#34;parsing %q: %w&#34;, patstr, err)
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>	}
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span>
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span>	<span class="comment">// Get the caller&#39;s location, for better conflict error messages.</span>
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>	<span class="comment">// Skip register and whatever calls it.</span>
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span>	_, file, line, ok := runtime.Caller(3)
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span>	if !ok {
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span>		pat.loc = &#34;unknown location&#34;
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span>	} else {
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span>		pat.loc = fmt.Sprintf(&#34;%s:%d&#34;, file, line)
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span>	}
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span>
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span>	mux.mu.Lock()
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span>	defer mux.mu.Unlock()
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>	<span class="comment">// Check for conflict.</span>
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>	if err := mux.index.possiblyConflictingPatterns(pat, func(pat2 *pattern) error {
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span>		if pat.conflictsWith(pat2) {
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span>			d := describeConflict(pat, pat2)
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>			return fmt.Errorf(&#34;pattern %q (registered at %s) conflicts with pattern %q (registered at %s):\n%s&#34;,
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>				pat, pat.loc, pat2, pat2.loc, d)
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>		}
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>		return nil
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>	}); err != nil {
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>		return err
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>	}
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>	mux.tree.addPattern(pat, handler)
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span>	mux.index.addPattern(pat)
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span>	mux.patterns = append(mux.patterns, pat)
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span>	return nil
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span>}
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span>
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span><span class="comment">// Serve accepts incoming HTTP connections on the listener l,</span>
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span><span class="comment">// creating a new service goroutine for each. The service goroutines</span>
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span><span class="comment">// read requests and then call handler to reply to them.</span>
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span><span class="comment">// The handler is typically nil, in which case [DefaultServeMux] is used.</span>
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span><span class="comment">// HTTP/2 support is only enabled if the Listener returns [*tls.Conn]</span>
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span><span class="comment">// connections and they were configured with &#34;h2&#34; in the TLS</span>
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span><span class="comment">// Config.NextProtos.</span>
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span><span class="comment">// Serve always returns a non-nil error.</span>
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span>func Serve(l net.Listener, handler Handler) error {
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span>	srv := &amp;Server{Handler: handler}
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span>	return srv.Serve(l)
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span>}
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span>
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span><span class="comment">// ServeTLS accepts incoming HTTPS connections on the listener l,</span>
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span><span class="comment">// creating a new service goroutine for each. The service goroutines</span>
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span><span class="comment">// read requests and then call handler to reply to them.</span>
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span><span class="comment">// The handler is typically nil, in which case [DefaultServeMux] is used.</span>
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span><span class="comment">// Additionally, files containing a certificate and matching private key</span>
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span><span class="comment">// for the server must be provided. If the certificate is signed by a</span>
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span><span class="comment">// certificate authority, the certFile should be the concatenation</span>
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span><span class="comment">// of the server&#39;s certificate, any intermediates, and the CA&#39;s certificate.</span>
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span><span class="comment">// ServeTLS always returns a non-nil error.</span>
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>func ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error {
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>	srv := &amp;Server{Handler: handler}
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>	return srv.ServeTLS(l, certFile, keyFile)
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>}
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span><span class="comment">// A Server defines parameters for running an HTTP server.</span>
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span><span class="comment">// The zero value for Server is a valid configuration.</span>
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span>type Server struct {
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span>	<span class="comment">// Addr optionally specifies the TCP address for the server to listen on,</span>
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span>	<span class="comment">// in the form &#34;host:port&#34;. If empty, &#34;:http&#34; (port 80) is used.</span>
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span>	<span class="comment">// The service names are defined in RFC 6335 and assigned by IANA.</span>
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>	<span class="comment">// See net.Dial for details of the address format.</span>
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span>	Addr string
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span>
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span>	Handler Handler <span class="comment">// handler to invoke, http.DefaultServeMux if nil</span>
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span>
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span>	<span class="comment">// DisableGeneralOptionsHandler, if true, passes &#34;OPTIONS *&#34; requests to the Handler,</span>
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span>	<span class="comment">// otherwise responds with 200 OK and Content-Length: 0.</span>
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span>	DisableGeneralOptionsHandler bool
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span>
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span>	<span class="comment">// TLSConfig optionally provides a TLS configuration for use</span>
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span>	<span class="comment">// by ServeTLS and ListenAndServeTLS. Note that this value is</span>
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span>	<span class="comment">// cloned by ServeTLS and ListenAndServeTLS, so it&#39;s not</span>
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span>	<span class="comment">// possible to modify the configuration with methods like</span>
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span>	<span class="comment">// tls.Config.SetSessionTicketKeys. To use</span>
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span>	<span class="comment">// SetSessionTicketKeys, use Server.Serve with a TLS Listener</span>
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span>	<span class="comment">// instead.</span>
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span>	TLSConfig *tls.Config
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span>
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span>	<span class="comment">// ReadTimeout is the maximum duration for reading the entire</span>
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span>	<span class="comment">// request, including the body. A zero or negative value means</span>
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span>	<span class="comment">// there will be no timeout.</span>
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span>	<span class="comment">// Because ReadTimeout does not let Handlers make per-request</span>
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span>	<span class="comment">// decisions on each request body&#39;s acceptable deadline or</span>
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span>	<span class="comment">// upload rate, most users will prefer to use</span>
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span>	<span class="comment">// ReadHeaderTimeout. It is valid to use them both.</span>
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span>	ReadTimeout time.Duration
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span>
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span>	<span class="comment">// ReadHeaderTimeout is the amount of time allowed to read</span>
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span>	<span class="comment">// request headers. The connection&#39;s read deadline is reset</span>
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span>	<span class="comment">// after reading the headers and the Handler can decide what</span>
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span>	<span class="comment">// is considered too slow for the body. If ReadHeaderTimeout</span>
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span>	<span class="comment">// is zero, the value of ReadTimeout is used. If both are</span>
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span>	<span class="comment">// zero, there is no timeout.</span>
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span>	ReadHeaderTimeout time.Duration
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span>
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span>	<span class="comment">// WriteTimeout is the maximum duration before timing out</span>
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span>	<span class="comment">// writes of the response. It is reset whenever a new</span>
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span>	<span class="comment">// request&#39;s header is read. Like ReadTimeout, it does not</span>
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span>	<span class="comment">// let Handlers make decisions on a per-request basis.</span>
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span>	<span class="comment">// A zero or negative value means there will be no timeout.</span>
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span>	WriteTimeout time.Duration
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span>
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span>	<span class="comment">// IdleTimeout is the maximum amount of time to wait for the</span>
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span>	<span class="comment">// next request when keep-alives are enabled. If IdleTimeout</span>
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span>	<span class="comment">// is zero, the value of ReadTimeout is used. If both are</span>
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span>	<span class="comment">// zero, there is no timeout.</span>
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>	IdleTimeout time.Duration
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>	<span class="comment">// MaxHeaderBytes controls the maximum number of bytes the</span>
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>	<span class="comment">// server will read parsing the request header&#39;s keys and</span>
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span>	<span class="comment">// values, including the request line. It does not limit the</span>
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span>	<span class="comment">// size of the request body.</span>
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span>	<span class="comment">// If zero, DefaultMaxHeaderBytes is used.</span>
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span>	MaxHeaderBytes int
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span>
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span>	<span class="comment">// TLSNextProto optionally specifies a function to take over</span>
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span>	<span class="comment">// ownership of the provided TLS connection when an ALPN</span>
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>	<span class="comment">// protocol upgrade has occurred. The map key is the protocol</span>
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>	<span class="comment">// name negotiated. The Handler argument should be used to</span>
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>	<span class="comment">// handle HTTP requests and will initialize the Request&#39;s TLS</span>
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>	<span class="comment">// and RemoteAddr if not already set. The connection is</span>
<span id="L2887" class="ln">  2887&nbsp;&nbsp;</span>	<span class="comment">// automatically closed when the function returns.</span>
<span id="L2888" class="ln">  2888&nbsp;&nbsp;</span>	<span class="comment">// If TLSNextProto is not nil, HTTP/2 support is not enabled</span>
<span id="L2889" class="ln">  2889&nbsp;&nbsp;</span>	<span class="comment">// automatically.</span>
<span id="L2890" class="ln">  2890&nbsp;&nbsp;</span>	TLSNextProto map[string]func(*Server, *tls.Conn, Handler)
<span id="L2891" class="ln">  2891&nbsp;&nbsp;</span>
<span id="L2892" class="ln">  2892&nbsp;&nbsp;</span>	<span class="comment">// ConnState specifies an optional callback function that is</span>
<span id="L2893" class="ln">  2893&nbsp;&nbsp;</span>	<span class="comment">// called when a client connection changes state. See the</span>
<span id="L2894" class="ln">  2894&nbsp;&nbsp;</span>	<span class="comment">// ConnState type and associated constants for details.</span>
<span id="L2895" class="ln">  2895&nbsp;&nbsp;</span>	ConnState func(net.Conn, ConnState)
<span id="L2896" class="ln">  2896&nbsp;&nbsp;</span>
<span id="L2897" class="ln">  2897&nbsp;&nbsp;</span>	<span class="comment">// ErrorLog specifies an optional logger for errors accepting</span>
<span id="L2898" class="ln">  2898&nbsp;&nbsp;</span>	<span class="comment">// connections, unexpected behavior from handlers, and</span>
<span id="L2899" class="ln">  2899&nbsp;&nbsp;</span>	<span class="comment">// underlying FileSystem errors.</span>
<span id="L2900" class="ln">  2900&nbsp;&nbsp;</span>	<span class="comment">// If nil, logging is done via the log package&#39;s standard logger.</span>
<span id="L2901" class="ln">  2901&nbsp;&nbsp;</span>	ErrorLog *log.Logger
<span id="L2902" class="ln">  2902&nbsp;&nbsp;</span>
<span id="L2903" class="ln">  2903&nbsp;&nbsp;</span>	<span class="comment">// BaseContext optionally specifies a function that returns</span>
<span id="L2904" class="ln">  2904&nbsp;&nbsp;</span>	<span class="comment">// the base context for incoming requests on this server.</span>
<span id="L2905" class="ln">  2905&nbsp;&nbsp;</span>	<span class="comment">// The provided Listener is the specific Listener that&#39;s</span>
<span id="L2906" class="ln">  2906&nbsp;&nbsp;</span>	<span class="comment">// about to start accepting requests.</span>
<span id="L2907" class="ln">  2907&nbsp;&nbsp;</span>	<span class="comment">// If BaseContext is nil, the default is context.Background().</span>
<span id="L2908" class="ln">  2908&nbsp;&nbsp;</span>	<span class="comment">// If non-nil, it must return a non-nil context.</span>
<span id="L2909" class="ln">  2909&nbsp;&nbsp;</span>	BaseContext func(net.Listener) context.Context
<span id="L2910" class="ln">  2910&nbsp;&nbsp;</span>
<span id="L2911" class="ln">  2911&nbsp;&nbsp;</span>	<span class="comment">// ConnContext optionally specifies a function that modifies</span>
<span id="L2912" class="ln">  2912&nbsp;&nbsp;</span>	<span class="comment">// the context used for a new connection c. The provided ctx</span>
<span id="L2913" class="ln">  2913&nbsp;&nbsp;</span>	<span class="comment">// is derived from the base context and has a ServerContextKey</span>
<span id="L2914" class="ln">  2914&nbsp;&nbsp;</span>	<span class="comment">// value.</span>
<span id="L2915" class="ln">  2915&nbsp;&nbsp;</span>	ConnContext func(ctx context.Context, c net.Conn) context.Context
<span id="L2916" class="ln">  2916&nbsp;&nbsp;</span>
<span id="L2917" class="ln">  2917&nbsp;&nbsp;</span>	inShutdown atomic.Bool <span class="comment">// true when server is in shutdown</span>
<span id="L2918" class="ln">  2918&nbsp;&nbsp;</span>
<span id="L2919" class="ln">  2919&nbsp;&nbsp;</span>	disableKeepAlives atomic.Bool
<span id="L2920" class="ln">  2920&nbsp;&nbsp;</span>	nextProtoOnce     sync.Once <span class="comment">// guards setupHTTP2_* init</span>
<span id="L2921" class="ln">  2921&nbsp;&nbsp;</span>	nextProtoErr      error     <span class="comment">// result of http2.ConfigureServer if used</span>
<span id="L2922" class="ln">  2922&nbsp;&nbsp;</span>
<span id="L2923" class="ln">  2923&nbsp;&nbsp;</span>	mu         sync.Mutex
<span id="L2924" class="ln">  2924&nbsp;&nbsp;</span>	listeners  map[*net.Listener]struct{}
<span id="L2925" class="ln">  2925&nbsp;&nbsp;</span>	activeConn map[*conn]struct{}
<span id="L2926" class="ln">  2926&nbsp;&nbsp;</span>	onShutdown []func()
<span id="L2927" class="ln">  2927&nbsp;&nbsp;</span>
<span id="L2928" class="ln">  2928&nbsp;&nbsp;</span>	listenerGroup sync.WaitGroup
<span id="L2929" class="ln">  2929&nbsp;&nbsp;</span>}
<span id="L2930" class="ln">  2930&nbsp;&nbsp;</span>
<span id="L2931" class="ln">  2931&nbsp;&nbsp;</span><span class="comment">// Close immediately closes all active net.Listeners and any</span>
<span id="L2932" class="ln">  2932&nbsp;&nbsp;</span><span class="comment">// connections in state [StateNew], [StateActive], or [StateIdle]. For a</span>
<span id="L2933" class="ln">  2933&nbsp;&nbsp;</span><span class="comment">// graceful shutdown, use [Server.Shutdown].</span>
<span id="L2934" class="ln">  2934&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2935" class="ln">  2935&nbsp;&nbsp;</span><span class="comment">// Close does not attempt to close (and does not even know about)</span>
<span id="L2936" class="ln">  2936&nbsp;&nbsp;</span><span class="comment">// any hijacked connections, such as WebSockets.</span>
<span id="L2937" class="ln">  2937&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2938" class="ln">  2938&nbsp;&nbsp;</span><span class="comment">// Close returns any error returned from closing the [Server]&#39;s</span>
<span id="L2939" class="ln">  2939&nbsp;&nbsp;</span><span class="comment">// underlying Listener(s).</span>
<span id="L2940" class="ln">  2940&nbsp;&nbsp;</span>func (srv *Server) Close() error {
<span id="L2941" class="ln">  2941&nbsp;&nbsp;</span>	srv.inShutdown.Store(true)
<span id="L2942" class="ln">  2942&nbsp;&nbsp;</span>	srv.mu.Lock()
<span id="L2943" class="ln">  2943&nbsp;&nbsp;</span>	defer srv.mu.Unlock()
<span id="L2944" class="ln">  2944&nbsp;&nbsp;</span>	err := srv.closeListenersLocked()
<span id="L2945" class="ln">  2945&nbsp;&nbsp;</span>
<span id="L2946" class="ln">  2946&nbsp;&nbsp;</span>	<span class="comment">// Unlock srv.mu while waiting for listenerGroup.</span>
<span id="L2947" class="ln">  2947&nbsp;&nbsp;</span>	<span class="comment">// The group Add and Done calls are made with srv.mu held,</span>
<span id="L2948" class="ln">  2948&nbsp;&nbsp;</span>	<span class="comment">// to avoid adding a new listener in the window between</span>
<span id="L2949" class="ln">  2949&nbsp;&nbsp;</span>	<span class="comment">// us setting inShutdown above and waiting here.</span>
<span id="L2950" class="ln">  2950&nbsp;&nbsp;</span>	srv.mu.Unlock()
<span id="L2951" class="ln">  2951&nbsp;&nbsp;</span>	srv.listenerGroup.Wait()
<span id="L2952" class="ln">  2952&nbsp;&nbsp;</span>	srv.mu.Lock()
<span id="L2953" class="ln">  2953&nbsp;&nbsp;</span>
<span id="L2954" class="ln">  2954&nbsp;&nbsp;</span>	for c := range srv.activeConn {
<span id="L2955" class="ln">  2955&nbsp;&nbsp;</span>		c.rwc.Close()
<span id="L2956" class="ln">  2956&nbsp;&nbsp;</span>		delete(srv.activeConn, c)
<span id="L2957" class="ln">  2957&nbsp;&nbsp;</span>	}
<span id="L2958" class="ln">  2958&nbsp;&nbsp;</span>	return err
<span id="L2959" class="ln">  2959&nbsp;&nbsp;</span>}
<span id="L2960" class="ln">  2960&nbsp;&nbsp;</span>
<span id="L2961" class="ln">  2961&nbsp;&nbsp;</span><span class="comment">// shutdownPollIntervalMax is the max polling interval when checking</span>
<span id="L2962" class="ln">  2962&nbsp;&nbsp;</span><span class="comment">// quiescence during Server.Shutdown. Polling starts with a small</span>
<span id="L2963" class="ln">  2963&nbsp;&nbsp;</span><span class="comment">// interval and backs off to the max.</span>
<span id="L2964" class="ln">  2964&nbsp;&nbsp;</span><span class="comment">// Ideally we could find a solution that doesn&#39;t involve polling,</span>
<span id="L2965" class="ln">  2965&nbsp;&nbsp;</span><span class="comment">// but which also doesn&#39;t have a high runtime cost (and doesn&#39;t</span>
<span id="L2966" class="ln">  2966&nbsp;&nbsp;</span><span class="comment">// involve any contentious mutexes), but that is left as an</span>
<span id="L2967" class="ln">  2967&nbsp;&nbsp;</span><span class="comment">// exercise for the reader.</span>
<span id="L2968" class="ln">  2968&nbsp;&nbsp;</span>const shutdownPollIntervalMax = 500 * time.Millisecond
<span id="L2969" class="ln">  2969&nbsp;&nbsp;</span>
<span id="L2970" class="ln">  2970&nbsp;&nbsp;</span><span class="comment">// Shutdown gracefully shuts down the server without interrupting any</span>
<span id="L2971" class="ln">  2971&nbsp;&nbsp;</span><span class="comment">// active connections. Shutdown works by first closing all open</span>
<span id="L2972" class="ln">  2972&nbsp;&nbsp;</span><span class="comment">// listeners, then closing all idle connections, and then waiting</span>
<span id="L2973" class="ln">  2973&nbsp;&nbsp;</span><span class="comment">// indefinitely for connections to return to idle and then shut down.</span>
<span id="L2974" class="ln">  2974&nbsp;&nbsp;</span><span class="comment">// If the provided context expires before the shutdown is complete,</span>
<span id="L2975" class="ln">  2975&nbsp;&nbsp;</span><span class="comment">// Shutdown returns the context&#39;s error, otherwise it returns any</span>
<span id="L2976" class="ln">  2976&nbsp;&nbsp;</span><span class="comment">// error returned from closing the [Server]&#39;s underlying Listener(s).</span>
<span id="L2977" class="ln">  2977&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2978" class="ln">  2978&nbsp;&nbsp;</span><span class="comment">// When Shutdown is called, [Serve], [ListenAndServe], and</span>
<span id="L2979" class="ln">  2979&nbsp;&nbsp;</span><span class="comment">// [ListenAndServeTLS] immediately return [ErrServerClosed]. Make sure the</span>
<span id="L2980" class="ln">  2980&nbsp;&nbsp;</span><span class="comment">// program doesn&#39;t exit and waits instead for Shutdown to return.</span>
<span id="L2981" class="ln">  2981&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2982" class="ln">  2982&nbsp;&nbsp;</span><span class="comment">// Shutdown does not attempt to close nor wait for hijacked</span>
<span id="L2983" class="ln">  2983&nbsp;&nbsp;</span><span class="comment">// connections such as WebSockets. The caller of Shutdown should</span>
<span id="L2984" class="ln">  2984&nbsp;&nbsp;</span><span class="comment">// separately notify such long-lived connections of shutdown and wait</span>
<span id="L2985" class="ln">  2985&nbsp;&nbsp;</span><span class="comment">// for them to close, if desired. See [Server.RegisterOnShutdown] for a way to</span>
<span id="L2986" class="ln">  2986&nbsp;&nbsp;</span><span class="comment">// register shutdown notification functions.</span>
<span id="L2987" class="ln">  2987&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2988" class="ln">  2988&nbsp;&nbsp;</span><span class="comment">// Once Shutdown has been called on a server, it may not be reused;</span>
<span id="L2989" class="ln">  2989&nbsp;&nbsp;</span><span class="comment">// future calls to methods such as Serve will return ErrServerClosed.</span>
<span id="L2990" class="ln">  2990&nbsp;&nbsp;</span>func (srv *Server) Shutdown(ctx context.Context) error {
<span id="L2991" class="ln">  2991&nbsp;&nbsp;</span>	srv.inShutdown.Store(true)
<span id="L2992" class="ln">  2992&nbsp;&nbsp;</span>
<span id="L2993" class="ln">  2993&nbsp;&nbsp;</span>	srv.mu.Lock()
<span id="L2994" class="ln">  2994&nbsp;&nbsp;</span>	lnerr := srv.closeListenersLocked()
<span id="L2995" class="ln">  2995&nbsp;&nbsp;</span>	for _, f := range srv.onShutdown {
<span id="L2996" class="ln">  2996&nbsp;&nbsp;</span>		go f()
<span id="L2997" class="ln">  2997&nbsp;&nbsp;</span>	}
<span id="L2998" class="ln">  2998&nbsp;&nbsp;</span>	srv.mu.Unlock()
<span id="L2999" class="ln">  2999&nbsp;&nbsp;</span>	srv.listenerGroup.Wait()
<span id="L3000" class="ln">  3000&nbsp;&nbsp;</span>
<span id="L3001" class="ln">  3001&nbsp;&nbsp;</span>	pollIntervalBase := time.Millisecond
<span id="L3002" class="ln">  3002&nbsp;&nbsp;</span>	nextPollInterval := func() time.Duration {
<span id="L3003" class="ln">  3003&nbsp;&nbsp;</span>		<span class="comment">// Add 10% jitter.</span>
<span id="L3004" class="ln">  3004&nbsp;&nbsp;</span>		interval := pollIntervalBase + time.Duration(rand.Intn(int(pollIntervalBase/10)))
<span id="L3005" class="ln">  3005&nbsp;&nbsp;</span>		<span class="comment">// Double and clamp for next time.</span>
<span id="L3006" class="ln">  3006&nbsp;&nbsp;</span>		pollIntervalBase *= 2
<span id="L3007" class="ln">  3007&nbsp;&nbsp;</span>		if pollIntervalBase &gt; shutdownPollIntervalMax {
<span id="L3008" class="ln">  3008&nbsp;&nbsp;</span>			pollIntervalBase = shutdownPollIntervalMax
<span id="L3009" class="ln">  3009&nbsp;&nbsp;</span>		}
<span id="L3010" class="ln">  3010&nbsp;&nbsp;</span>		return interval
<span id="L3011" class="ln">  3011&nbsp;&nbsp;</span>	}
<span id="L3012" class="ln">  3012&nbsp;&nbsp;</span>
<span id="L3013" class="ln">  3013&nbsp;&nbsp;</span>	timer := time.NewTimer(nextPollInterval())
<span id="L3014" class="ln">  3014&nbsp;&nbsp;</span>	defer timer.Stop()
<span id="L3015" class="ln">  3015&nbsp;&nbsp;</span>	for {
<span id="L3016" class="ln">  3016&nbsp;&nbsp;</span>		if srv.closeIdleConns() {
<span id="L3017" class="ln">  3017&nbsp;&nbsp;</span>			return lnerr
<span id="L3018" class="ln">  3018&nbsp;&nbsp;</span>		}
<span id="L3019" class="ln">  3019&nbsp;&nbsp;</span>		select {
<span id="L3020" class="ln">  3020&nbsp;&nbsp;</span>		case &lt;-ctx.Done():
<span id="L3021" class="ln">  3021&nbsp;&nbsp;</span>			return ctx.Err()
<span id="L3022" class="ln">  3022&nbsp;&nbsp;</span>		case &lt;-timer.C:
<span id="L3023" class="ln">  3023&nbsp;&nbsp;</span>			timer.Reset(nextPollInterval())
<span id="L3024" class="ln">  3024&nbsp;&nbsp;</span>		}
<span id="L3025" class="ln">  3025&nbsp;&nbsp;</span>	}
<span id="L3026" class="ln">  3026&nbsp;&nbsp;</span>}
<span id="L3027" class="ln">  3027&nbsp;&nbsp;</span>
<span id="L3028" class="ln">  3028&nbsp;&nbsp;</span><span class="comment">// RegisterOnShutdown registers a function to call on [Server.Shutdown].</span>
<span id="L3029" class="ln">  3029&nbsp;&nbsp;</span><span class="comment">// This can be used to gracefully shutdown connections that have</span>
<span id="L3030" class="ln">  3030&nbsp;&nbsp;</span><span class="comment">// undergone ALPN protocol upgrade or that have been hijacked.</span>
<span id="L3031" class="ln">  3031&nbsp;&nbsp;</span><span class="comment">// This function should start protocol-specific graceful shutdown,</span>
<span id="L3032" class="ln">  3032&nbsp;&nbsp;</span><span class="comment">// but should not wait for shutdown to complete.</span>
<span id="L3033" class="ln">  3033&nbsp;&nbsp;</span>func (srv *Server) RegisterOnShutdown(f func()) {
<span id="L3034" class="ln">  3034&nbsp;&nbsp;</span>	srv.mu.Lock()
<span id="L3035" class="ln">  3035&nbsp;&nbsp;</span>	srv.onShutdown = append(srv.onShutdown, f)
<span id="L3036" class="ln">  3036&nbsp;&nbsp;</span>	srv.mu.Unlock()
<span id="L3037" class="ln">  3037&nbsp;&nbsp;</span>}
<span id="L3038" class="ln">  3038&nbsp;&nbsp;</span>
<span id="L3039" class="ln">  3039&nbsp;&nbsp;</span><span class="comment">// closeIdleConns closes all idle connections and reports whether the</span>
<span id="L3040" class="ln">  3040&nbsp;&nbsp;</span><span class="comment">// server is quiescent.</span>
<span id="L3041" class="ln">  3041&nbsp;&nbsp;</span>func (s *Server) closeIdleConns() bool {
<span id="L3042" class="ln">  3042&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L3043" class="ln">  3043&nbsp;&nbsp;</span>	defer s.mu.Unlock()
<span id="L3044" class="ln">  3044&nbsp;&nbsp;</span>	quiescent := true
<span id="L3045" class="ln">  3045&nbsp;&nbsp;</span>	for c := range s.activeConn {
<span id="L3046" class="ln">  3046&nbsp;&nbsp;</span>		st, unixSec := c.getState()
<span id="L3047" class="ln">  3047&nbsp;&nbsp;</span>		<span class="comment">// Issue 22682: treat StateNew connections as if</span>
<span id="L3048" class="ln">  3048&nbsp;&nbsp;</span>		<span class="comment">// they&#39;re idle if we haven&#39;t read the first request&#39;s</span>
<span id="L3049" class="ln">  3049&nbsp;&nbsp;</span>		<span class="comment">// header in over 5 seconds.</span>
<span id="L3050" class="ln">  3050&nbsp;&nbsp;</span>		if st == StateNew &amp;&amp; unixSec &lt; time.Now().Unix()-5 {
<span id="L3051" class="ln">  3051&nbsp;&nbsp;</span>			st = StateIdle
<span id="L3052" class="ln">  3052&nbsp;&nbsp;</span>		}
<span id="L3053" class="ln">  3053&nbsp;&nbsp;</span>		if st != StateIdle || unixSec == 0 {
<span id="L3054" class="ln">  3054&nbsp;&nbsp;</span>			<span class="comment">// Assume unixSec == 0 means it&#39;s a very new</span>
<span id="L3055" class="ln">  3055&nbsp;&nbsp;</span>			<span class="comment">// connection, without state set yet.</span>
<span id="L3056" class="ln">  3056&nbsp;&nbsp;</span>			quiescent = false
<span id="L3057" class="ln">  3057&nbsp;&nbsp;</span>			continue
<span id="L3058" class="ln">  3058&nbsp;&nbsp;</span>		}
<span id="L3059" class="ln">  3059&nbsp;&nbsp;</span>		c.rwc.Close()
<span id="L3060" class="ln">  3060&nbsp;&nbsp;</span>		delete(s.activeConn, c)
<span id="L3061" class="ln">  3061&nbsp;&nbsp;</span>	}
<span id="L3062" class="ln">  3062&nbsp;&nbsp;</span>	return quiescent
<span id="L3063" class="ln">  3063&nbsp;&nbsp;</span>}
<span id="L3064" class="ln">  3064&nbsp;&nbsp;</span>
<span id="L3065" class="ln">  3065&nbsp;&nbsp;</span>func (s *Server) closeListenersLocked() error {
<span id="L3066" class="ln">  3066&nbsp;&nbsp;</span>	var err error
<span id="L3067" class="ln">  3067&nbsp;&nbsp;</span>	for ln := range s.listeners {
<span id="L3068" class="ln">  3068&nbsp;&nbsp;</span>		if cerr := (*ln).Close(); cerr != nil &amp;&amp; err == nil {
<span id="L3069" class="ln">  3069&nbsp;&nbsp;</span>			err = cerr
<span id="L3070" class="ln">  3070&nbsp;&nbsp;</span>		}
<span id="L3071" class="ln">  3071&nbsp;&nbsp;</span>	}
<span id="L3072" class="ln">  3072&nbsp;&nbsp;</span>	return err
<span id="L3073" class="ln">  3073&nbsp;&nbsp;</span>}
<span id="L3074" class="ln">  3074&nbsp;&nbsp;</span>
<span id="L3075" class="ln">  3075&nbsp;&nbsp;</span><span class="comment">// A ConnState represents the state of a client connection to a server.</span>
<span id="L3076" class="ln">  3076&nbsp;&nbsp;</span><span class="comment">// It&#39;s used by the optional [Server.ConnState] hook.</span>
<span id="L3077" class="ln">  3077&nbsp;&nbsp;</span>type ConnState int
<span id="L3078" class="ln">  3078&nbsp;&nbsp;</span>
<span id="L3079" class="ln">  3079&nbsp;&nbsp;</span>const (
<span id="L3080" class="ln">  3080&nbsp;&nbsp;</span>	<span class="comment">// StateNew represents a new connection that is expected to</span>
<span id="L3081" class="ln">  3081&nbsp;&nbsp;</span>	<span class="comment">// send a request immediately. Connections begin at this</span>
<span id="L3082" class="ln">  3082&nbsp;&nbsp;</span>	<span class="comment">// state and then transition to either StateActive or</span>
<span id="L3083" class="ln">  3083&nbsp;&nbsp;</span>	<span class="comment">// StateClosed.</span>
<span id="L3084" class="ln">  3084&nbsp;&nbsp;</span>	StateNew ConnState = iota
<span id="L3085" class="ln">  3085&nbsp;&nbsp;</span>
<span id="L3086" class="ln">  3086&nbsp;&nbsp;</span>	<span class="comment">// StateActive represents a connection that has read 1 or more</span>
<span id="L3087" class="ln">  3087&nbsp;&nbsp;</span>	<span class="comment">// bytes of a request. The Server.ConnState hook for</span>
<span id="L3088" class="ln">  3088&nbsp;&nbsp;</span>	<span class="comment">// StateActive fires before the request has entered a handler</span>
<span id="L3089" class="ln">  3089&nbsp;&nbsp;</span>	<span class="comment">// and doesn&#39;t fire again until the request has been</span>
<span id="L3090" class="ln">  3090&nbsp;&nbsp;</span>	<span class="comment">// handled. After the request is handled, the state</span>
<span id="L3091" class="ln">  3091&nbsp;&nbsp;</span>	<span class="comment">// transitions to StateClosed, StateHijacked, or StateIdle.</span>
<span id="L3092" class="ln">  3092&nbsp;&nbsp;</span>	<span class="comment">// For HTTP/2, StateActive fires on the transition from zero</span>
<span id="L3093" class="ln">  3093&nbsp;&nbsp;</span>	<span class="comment">// to one active request, and only transitions away once all</span>
<span id="L3094" class="ln">  3094&nbsp;&nbsp;</span>	<span class="comment">// active requests are complete. That means that ConnState</span>
<span id="L3095" class="ln">  3095&nbsp;&nbsp;</span>	<span class="comment">// cannot be used to do per-request work; ConnState only notes</span>
<span id="L3096" class="ln">  3096&nbsp;&nbsp;</span>	<span class="comment">// the overall state of the connection.</span>
<span id="L3097" class="ln">  3097&nbsp;&nbsp;</span>	StateActive
<span id="L3098" class="ln">  3098&nbsp;&nbsp;</span>
<span id="L3099" class="ln">  3099&nbsp;&nbsp;</span>	<span class="comment">// StateIdle represents a connection that has finished</span>
<span id="L3100" class="ln">  3100&nbsp;&nbsp;</span>	<span class="comment">// handling a request and is in the keep-alive state, waiting</span>
<span id="L3101" class="ln">  3101&nbsp;&nbsp;</span>	<span class="comment">// for a new request. Connections transition from StateIdle</span>
<span id="L3102" class="ln">  3102&nbsp;&nbsp;</span>	<span class="comment">// to either StateActive or StateClosed.</span>
<span id="L3103" class="ln">  3103&nbsp;&nbsp;</span>	StateIdle
<span id="L3104" class="ln">  3104&nbsp;&nbsp;</span>
<span id="L3105" class="ln">  3105&nbsp;&nbsp;</span>	<span class="comment">// StateHijacked represents a hijacked connection.</span>
<span id="L3106" class="ln">  3106&nbsp;&nbsp;</span>	<span class="comment">// This is a terminal state. It does not transition to StateClosed.</span>
<span id="L3107" class="ln">  3107&nbsp;&nbsp;</span>	StateHijacked
<span id="L3108" class="ln">  3108&nbsp;&nbsp;</span>
<span id="L3109" class="ln">  3109&nbsp;&nbsp;</span>	<span class="comment">// StateClosed represents a closed connection.</span>
<span id="L3110" class="ln">  3110&nbsp;&nbsp;</span>	<span class="comment">// This is a terminal state. Hijacked connections do not</span>
<span id="L3111" class="ln">  3111&nbsp;&nbsp;</span>	<span class="comment">// transition to StateClosed.</span>
<span id="L3112" class="ln">  3112&nbsp;&nbsp;</span>	StateClosed
<span id="L3113" class="ln">  3113&nbsp;&nbsp;</span>)
<span id="L3114" class="ln">  3114&nbsp;&nbsp;</span>
<span id="L3115" class="ln">  3115&nbsp;&nbsp;</span>var stateName = map[ConnState]string{
<span id="L3116" class="ln">  3116&nbsp;&nbsp;</span>	StateNew:      &#34;new&#34;,
<span id="L3117" class="ln">  3117&nbsp;&nbsp;</span>	StateActive:   &#34;active&#34;,
<span id="L3118" class="ln">  3118&nbsp;&nbsp;</span>	StateIdle:     &#34;idle&#34;,
<span id="L3119" class="ln">  3119&nbsp;&nbsp;</span>	StateHijacked: &#34;hijacked&#34;,
<span id="L3120" class="ln">  3120&nbsp;&nbsp;</span>	StateClosed:   &#34;closed&#34;,
<span id="L3121" class="ln">  3121&nbsp;&nbsp;</span>}
<span id="L3122" class="ln">  3122&nbsp;&nbsp;</span>
<span id="L3123" class="ln">  3123&nbsp;&nbsp;</span>func (c ConnState) String() string {
<span id="L3124" class="ln">  3124&nbsp;&nbsp;</span>	return stateName[c]
<span id="L3125" class="ln">  3125&nbsp;&nbsp;</span>}
<span id="L3126" class="ln">  3126&nbsp;&nbsp;</span>
<span id="L3127" class="ln">  3127&nbsp;&nbsp;</span><span class="comment">// serverHandler delegates to either the server&#39;s Handler or</span>
<span id="L3128" class="ln">  3128&nbsp;&nbsp;</span><span class="comment">// DefaultServeMux and also handles &#34;OPTIONS *&#34; requests.</span>
<span id="L3129" class="ln">  3129&nbsp;&nbsp;</span>type serverHandler struct {
<span id="L3130" class="ln">  3130&nbsp;&nbsp;</span>	srv *Server
<span id="L3131" class="ln">  3131&nbsp;&nbsp;</span>}
<span id="L3132" class="ln">  3132&nbsp;&nbsp;</span>
<span id="L3133" class="ln">  3133&nbsp;&nbsp;</span>func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {
<span id="L3134" class="ln">  3134&nbsp;&nbsp;</span>	handler := sh.srv.Handler
<span id="L3135" class="ln">  3135&nbsp;&nbsp;</span>	if handler == nil {
<span id="L3136" class="ln">  3136&nbsp;&nbsp;</span>		handler = DefaultServeMux
<span id="L3137" class="ln">  3137&nbsp;&nbsp;</span>	}
<span id="L3138" class="ln">  3138&nbsp;&nbsp;</span>	if !sh.srv.DisableGeneralOptionsHandler &amp;&amp; req.RequestURI == &#34;*&#34; &amp;&amp; req.Method == &#34;OPTIONS&#34; {
<span id="L3139" class="ln">  3139&nbsp;&nbsp;</span>		handler = globalOptionsHandler{}
<span id="L3140" class="ln">  3140&nbsp;&nbsp;</span>	}
<span id="L3141" class="ln">  3141&nbsp;&nbsp;</span>
<span id="L3142" class="ln">  3142&nbsp;&nbsp;</span>	handler.ServeHTTP(rw, req)
<span id="L3143" class="ln">  3143&nbsp;&nbsp;</span>}
<span id="L3144" class="ln">  3144&nbsp;&nbsp;</span>
<span id="L3145" class="ln">  3145&nbsp;&nbsp;</span><span class="comment">// AllowQuerySemicolons returns a handler that serves requests by converting any</span>
<span id="L3146" class="ln">  3146&nbsp;&nbsp;</span><span class="comment">// unescaped semicolons in the URL query to ampersands, and invoking the handler h.</span>
<span id="L3147" class="ln">  3147&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3148" class="ln">  3148&nbsp;&nbsp;</span><span class="comment">// This restores the pre-Go 1.17 behavior of splitting query parameters on both</span>
<span id="L3149" class="ln">  3149&nbsp;&nbsp;</span><span class="comment">// semicolons and ampersands. (See golang.org/issue/25192). Note that this</span>
<span id="L3150" class="ln">  3150&nbsp;&nbsp;</span><span class="comment">// behavior doesn&#39;t match that of many proxies, and the mismatch can lead to</span>
<span id="L3151" class="ln">  3151&nbsp;&nbsp;</span><span class="comment">// security issues.</span>
<span id="L3152" class="ln">  3152&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3153" class="ln">  3153&nbsp;&nbsp;</span><span class="comment">// AllowQuerySemicolons should be invoked before [Request.ParseForm] is called.</span>
<span id="L3154" class="ln">  3154&nbsp;&nbsp;</span>func AllowQuerySemicolons(h Handler) Handler {
<span id="L3155" class="ln">  3155&nbsp;&nbsp;</span>	return HandlerFunc(func(w ResponseWriter, r *Request) {
<span id="L3156" class="ln">  3156&nbsp;&nbsp;</span>		if strings.Contains(r.URL.RawQuery, &#34;;&#34;) {
<span id="L3157" class="ln">  3157&nbsp;&nbsp;</span>			r2 := new(Request)
<span id="L3158" class="ln">  3158&nbsp;&nbsp;</span>			*r2 = *r
<span id="L3159" class="ln">  3159&nbsp;&nbsp;</span>			r2.URL = new(url.URL)
<span id="L3160" class="ln">  3160&nbsp;&nbsp;</span>			*r2.URL = *r.URL
<span id="L3161" class="ln">  3161&nbsp;&nbsp;</span>			r2.URL.RawQuery = strings.ReplaceAll(r.URL.RawQuery, &#34;;&#34;, &#34;&amp;&#34;)
<span id="L3162" class="ln">  3162&nbsp;&nbsp;</span>			h.ServeHTTP(w, r2)
<span id="L3163" class="ln">  3163&nbsp;&nbsp;</span>		} else {
<span id="L3164" class="ln">  3164&nbsp;&nbsp;</span>			h.ServeHTTP(w, r)
<span id="L3165" class="ln">  3165&nbsp;&nbsp;</span>		}
<span id="L3166" class="ln">  3166&nbsp;&nbsp;</span>	})
<span id="L3167" class="ln">  3167&nbsp;&nbsp;</span>}
<span id="L3168" class="ln">  3168&nbsp;&nbsp;</span>
<span id="L3169" class="ln">  3169&nbsp;&nbsp;</span><span class="comment">// ListenAndServe listens on the TCP network address srv.Addr and then</span>
<span id="L3170" class="ln">  3170&nbsp;&nbsp;</span><span class="comment">// calls [Serve] to handle requests on incoming connections.</span>
<span id="L3171" class="ln">  3171&nbsp;&nbsp;</span><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span>
<span id="L3172" class="ln">  3172&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3173" class="ln">  3173&nbsp;&nbsp;</span><span class="comment">// If srv.Addr is blank, &#34;:http&#34; is used.</span>
<span id="L3174" class="ln">  3174&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3175" class="ln">  3175&nbsp;&nbsp;</span><span class="comment">// ListenAndServe always returns a non-nil error. After [Server.Shutdown] or [Server.Close],</span>
<span id="L3176" class="ln">  3176&nbsp;&nbsp;</span><span class="comment">// the returned error is [ErrServerClosed].</span>
<span id="L3177" class="ln">  3177&nbsp;&nbsp;</span>func (srv *Server) ListenAndServe() error {
<span id="L3178" class="ln">  3178&nbsp;&nbsp;</span>	if srv.shuttingDown() {
<span id="L3179" class="ln">  3179&nbsp;&nbsp;</span>		return ErrServerClosed
<span id="L3180" class="ln">  3180&nbsp;&nbsp;</span>	}
<span id="L3181" class="ln">  3181&nbsp;&nbsp;</span>	addr := srv.Addr
<span id="L3182" class="ln">  3182&nbsp;&nbsp;</span>	if addr == &#34;&#34; {
<span id="L3183" class="ln">  3183&nbsp;&nbsp;</span>		addr = &#34;:http&#34;
<span id="L3184" class="ln">  3184&nbsp;&nbsp;</span>	}
<span id="L3185" class="ln">  3185&nbsp;&nbsp;</span>	ln, err := net.Listen(&#34;tcp&#34;, addr)
<span id="L3186" class="ln">  3186&nbsp;&nbsp;</span>	if err != nil {
<span id="L3187" class="ln">  3187&nbsp;&nbsp;</span>		return err
<span id="L3188" class="ln">  3188&nbsp;&nbsp;</span>	}
<span id="L3189" class="ln">  3189&nbsp;&nbsp;</span>	return srv.Serve(ln)
<span id="L3190" class="ln">  3190&nbsp;&nbsp;</span>}
<span id="L3191" class="ln">  3191&nbsp;&nbsp;</span>
<span id="L3192" class="ln">  3192&nbsp;&nbsp;</span>var testHookServerServe func(*Server, net.Listener) <span class="comment">// used if non-nil</span>
<span id="L3193" class="ln">  3193&nbsp;&nbsp;</span>
<span id="L3194" class="ln">  3194&nbsp;&nbsp;</span><span class="comment">// shouldConfigureHTTP2ForServe reports whether Server.Serve should configure</span>
<span id="L3195" class="ln">  3195&nbsp;&nbsp;</span><span class="comment">// automatic HTTP/2. (which sets up the srv.TLSNextProto map)</span>
<span id="L3196" class="ln">  3196&nbsp;&nbsp;</span>func (srv *Server) shouldConfigureHTTP2ForServe() bool {
<span id="L3197" class="ln">  3197&nbsp;&nbsp;</span>	if srv.TLSConfig == nil {
<span id="L3198" class="ln">  3198&nbsp;&nbsp;</span>		<span class="comment">// Compatibility with Go 1.6:</span>
<span id="L3199" class="ln">  3199&nbsp;&nbsp;</span>		<span class="comment">// If there&#39;s no TLSConfig, it&#39;s possible that the user just</span>
<span id="L3200" class="ln">  3200&nbsp;&nbsp;</span>		<span class="comment">// didn&#39;t set it on the http.Server, but did pass it to</span>
<span id="L3201" class="ln">  3201&nbsp;&nbsp;</span>		<span class="comment">// tls.NewListener and passed that listener to Serve.</span>
<span id="L3202" class="ln">  3202&nbsp;&nbsp;</span>		<span class="comment">// So we should configure HTTP/2 (to set up srv.TLSNextProto)</span>
<span id="L3203" class="ln">  3203&nbsp;&nbsp;</span>		<span class="comment">// in case the listener returns an &#34;h2&#34; *tls.Conn.</span>
<span id="L3204" class="ln">  3204&nbsp;&nbsp;</span>		return true
<span id="L3205" class="ln">  3205&nbsp;&nbsp;</span>	}
<span id="L3206" class="ln">  3206&nbsp;&nbsp;</span>	<span class="comment">// The user specified a TLSConfig on their http.Server.</span>
<span id="L3207" class="ln">  3207&nbsp;&nbsp;</span>	<span class="comment">// In this, case, only configure HTTP/2 if their tls.Config</span>
<span id="L3208" class="ln">  3208&nbsp;&nbsp;</span>	<span class="comment">// explicitly mentions &#34;h2&#34;. Otherwise http2.ConfigureServer</span>
<span id="L3209" class="ln">  3209&nbsp;&nbsp;</span>	<span class="comment">// would modify the tls.Config to add it, but they probably already</span>
<span id="L3210" class="ln">  3210&nbsp;&nbsp;</span>	<span class="comment">// passed this tls.Config to tls.NewListener. And if they did,</span>
<span id="L3211" class="ln">  3211&nbsp;&nbsp;</span>	<span class="comment">// it&#39;s too late anyway to fix it. It would only be potentially racy.</span>
<span id="L3212" class="ln">  3212&nbsp;&nbsp;</span>	<span class="comment">// See Issue 15908.</span>
<span id="L3213" class="ln">  3213&nbsp;&nbsp;</span>	return strSliceContains(srv.TLSConfig.NextProtos, http2NextProtoTLS)
<span id="L3214" class="ln">  3214&nbsp;&nbsp;</span>}
<span id="L3215" class="ln">  3215&nbsp;&nbsp;</span>
<span id="L3216" class="ln">  3216&nbsp;&nbsp;</span><span class="comment">// ErrServerClosed is returned by the [Server.Serve], [ServeTLS], [ListenAndServe],</span>
<span id="L3217" class="ln">  3217&nbsp;&nbsp;</span><span class="comment">// and [ListenAndServeTLS] methods after a call to [Server.Shutdown] or [Server.Close].</span>
<span id="L3218" class="ln">  3218&nbsp;&nbsp;</span>var ErrServerClosed = errors.New(&#34;http: Server closed&#34;)
<span id="L3219" class="ln">  3219&nbsp;&nbsp;</span>
<span id="L3220" class="ln">  3220&nbsp;&nbsp;</span><span class="comment">// Serve accepts incoming connections on the Listener l, creating a</span>
<span id="L3221" class="ln">  3221&nbsp;&nbsp;</span><span class="comment">// new service goroutine for each. The service goroutines read requests and</span>
<span id="L3222" class="ln">  3222&nbsp;&nbsp;</span><span class="comment">// then call srv.Handler to reply to them.</span>
<span id="L3223" class="ln">  3223&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3224" class="ln">  3224&nbsp;&nbsp;</span><span class="comment">// HTTP/2 support is only enabled if the Listener returns [*tls.Conn]</span>
<span id="L3225" class="ln">  3225&nbsp;&nbsp;</span><span class="comment">// connections and they were configured with &#34;h2&#34; in the TLS</span>
<span id="L3226" class="ln">  3226&nbsp;&nbsp;</span><span class="comment">// Config.NextProtos.</span>
<span id="L3227" class="ln">  3227&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3228" class="ln">  3228&nbsp;&nbsp;</span><span class="comment">// Serve always returns a non-nil error and closes l.</span>
<span id="L3229" class="ln">  3229&nbsp;&nbsp;</span><span class="comment">// After [Server.Shutdown] or [Server.Close], the returned error is [ErrServerClosed].</span>
<span id="L3230" class="ln">  3230&nbsp;&nbsp;</span>func (srv *Server) Serve(l net.Listener) error {
<span id="L3231" class="ln">  3231&nbsp;&nbsp;</span>	if fn := testHookServerServe; fn != nil {
<span id="L3232" class="ln">  3232&nbsp;&nbsp;</span>		fn(srv, l) <span class="comment">// call hook with unwrapped listener</span>
<span id="L3233" class="ln">  3233&nbsp;&nbsp;</span>	}
<span id="L3234" class="ln">  3234&nbsp;&nbsp;</span>
<span id="L3235" class="ln">  3235&nbsp;&nbsp;</span>	origListener := l
<span id="L3236" class="ln">  3236&nbsp;&nbsp;</span>	l = &amp;onceCloseListener{Listener: l}
<span id="L3237" class="ln">  3237&nbsp;&nbsp;</span>	defer l.Close()
<span id="L3238" class="ln">  3238&nbsp;&nbsp;</span>
<span id="L3239" class="ln">  3239&nbsp;&nbsp;</span>	if err := srv.setupHTTP2_Serve(); err != nil {
<span id="L3240" class="ln">  3240&nbsp;&nbsp;</span>		return err
<span id="L3241" class="ln">  3241&nbsp;&nbsp;</span>	}
<span id="L3242" class="ln">  3242&nbsp;&nbsp;</span>
<span id="L3243" class="ln">  3243&nbsp;&nbsp;</span>	if !srv.trackListener(&amp;l, true) {
<span id="L3244" class="ln">  3244&nbsp;&nbsp;</span>		return ErrServerClosed
<span id="L3245" class="ln">  3245&nbsp;&nbsp;</span>	}
<span id="L3246" class="ln">  3246&nbsp;&nbsp;</span>	defer srv.trackListener(&amp;l, false)
<span id="L3247" class="ln">  3247&nbsp;&nbsp;</span>
<span id="L3248" class="ln">  3248&nbsp;&nbsp;</span>	baseCtx := context.Background()
<span id="L3249" class="ln">  3249&nbsp;&nbsp;</span>	if srv.BaseContext != nil {
<span id="L3250" class="ln">  3250&nbsp;&nbsp;</span>		baseCtx = srv.BaseContext(origListener)
<span id="L3251" class="ln">  3251&nbsp;&nbsp;</span>		if baseCtx == nil {
<span id="L3252" class="ln">  3252&nbsp;&nbsp;</span>			panic(&#34;BaseContext returned a nil context&#34;)
<span id="L3253" class="ln">  3253&nbsp;&nbsp;</span>		}
<span id="L3254" class="ln">  3254&nbsp;&nbsp;</span>	}
<span id="L3255" class="ln">  3255&nbsp;&nbsp;</span>
<span id="L3256" class="ln">  3256&nbsp;&nbsp;</span>	var tempDelay time.Duration <span class="comment">// how long to sleep on accept failure</span>
<span id="L3257" class="ln">  3257&nbsp;&nbsp;</span>
<span id="L3258" class="ln">  3258&nbsp;&nbsp;</span>	ctx := context.WithValue(baseCtx, ServerContextKey, srv)
<span id="L3259" class="ln">  3259&nbsp;&nbsp;</span>	for {
<span id="L3260" class="ln">  3260&nbsp;&nbsp;</span>		rw, err := l.Accept()
<span id="L3261" class="ln">  3261&nbsp;&nbsp;</span>		if err != nil {
<span id="L3262" class="ln">  3262&nbsp;&nbsp;</span>			if srv.shuttingDown() {
<span id="L3263" class="ln">  3263&nbsp;&nbsp;</span>				return ErrServerClosed
<span id="L3264" class="ln">  3264&nbsp;&nbsp;</span>			}
<span id="L3265" class="ln">  3265&nbsp;&nbsp;</span>			if ne, ok := err.(net.Error); ok &amp;&amp; ne.Temporary() {
<span id="L3266" class="ln">  3266&nbsp;&nbsp;</span>				if tempDelay == 0 {
<span id="L3267" class="ln">  3267&nbsp;&nbsp;</span>					tempDelay = 5 * time.Millisecond
<span id="L3268" class="ln">  3268&nbsp;&nbsp;</span>				} else {
<span id="L3269" class="ln">  3269&nbsp;&nbsp;</span>					tempDelay *= 2
<span id="L3270" class="ln">  3270&nbsp;&nbsp;</span>				}
<span id="L3271" class="ln">  3271&nbsp;&nbsp;</span>				if max := 1 * time.Second; tempDelay &gt; max {
<span id="L3272" class="ln">  3272&nbsp;&nbsp;</span>					tempDelay = max
<span id="L3273" class="ln">  3273&nbsp;&nbsp;</span>				}
<span id="L3274" class="ln">  3274&nbsp;&nbsp;</span>				srv.logf(&#34;http: Accept error: %v; retrying in %v&#34;, err, tempDelay)
<span id="L3275" class="ln">  3275&nbsp;&nbsp;</span>				time.Sleep(tempDelay)
<span id="L3276" class="ln">  3276&nbsp;&nbsp;</span>				continue
<span id="L3277" class="ln">  3277&nbsp;&nbsp;</span>			}
<span id="L3278" class="ln">  3278&nbsp;&nbsp;</span>			return err
<span id="L3279" class="ln">  3279&nbsp;&nbsp;</span>		}
<span id="L3280" class="ln">  3280&nbsp;&nbsp;</span>		connCtx := ctx
<span id="L3281" class="ln">  3281&nbsp;&nbsp;</span>		if cc := srv.ConnContext; cc != nil {
<span id="L3282" class="ln">  3282&nbsp;&nbsp;</span>			connCtx = cc(connCtx, rw)
<span id="L3283" class="ln">  3283&nbsp;&nbsp;</span>			if connCtx == nil {
<span id="L3284" class="ln">  3284&nbsp;&nbsp;</span>				panic(&#34;ConnContext returned nil&#34;)
<span id="L3285" class="ln">  3285&nbsp;&nbsp;</span>			}
<span id="L3286" class="ln">  3286&nbsp;&nbsp;</span>		}
<span id="L3287" class="ln">  3287&nbsp;&nbsp;</span>		tempDelay = 0
<span id="L3288" class="ln">  3288&nbsp;&nbsp;</span>		c := srv.newConn(rw)
<span id="L3289" class="ln">  3289&nbsp;&nbsp;</span>		c.setState(c.rwc, StateNew, runHooks) <span class="comment">// before Serve can return</span>
<span id="L3290" class="ln">  3290&nbsp;&nbsp;</span>		go c.serve(connCtx)
<span id="L3291" class="ln">  3291&nbsp;&nbsp;</span>	}
<span id="L3292" class="ln">  3292&nbsp;&nbsp;</span>}
<span id="L3293" class="ln">  3293&nbsp;&nbsp;</span>
<span id="L3294" class="ln">  3294&nbsp;&nbsp;</span><span class="comment">// ServeTLS accepts incoming connections on the Listener l, creating a</span>
<span id="L3295" class="ln">  3295&nbsp;&nbsp;</span><span class="comment">// new service goroutine for each. The service goroutines perform TLS</span>
<span id="L3296" class="ln">  3296&nbsp;&nbsp;</span><span class="comment">// setup and then read requests, calling srv.Handler to reply to them.</span>
<span id="L3297" class="ln">  3297&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3298" class="ln">  3298&nbsp;&nbsp;</span><span class="comment">// Files containing a certificate and matching private key for the</span>
<span id="L3299" class="ln">  3299&nbsp;&nbsp;</span><span class="comment">// server must be provided if neither the [Server]&#39;s</span>
<span id="L3300" class="ln">  3300&nbsp;&nbsp;</span><span class="comment">// TLSConfig.Certificates nor TLSConfig.GetCertificate are populated.</span>
<span id="L3301" class="ln">  3301&nbsp;&nbsp;</span><span class="comment">// If the certificate is signed by a certificate authority, the</span>
<span id="L3302" class="ln">  3302&nbsp;&nbsp;</span><span class="comment">// certFile should be the concatenation of the server&#39;s certificate,</span>
<span id="L3303" class="ln">  3303&nbsp;&nbsp;</span><span class="comment">// any intermediates, and the CA&#39;s certificate.</span>
<span id="L3304" class="ln">  3304&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3305" class="ln">  3305&nbsp;&nbsp;</span><span class="comment">// ServeTLS always returns a non-nil error. After [Server.Shutdown] or [Server.Close], the</span>
<span id="L3306" class="ln">  3306&nbsp;&nbsp;</span><span class="comment">// returned error is [ErrServerClosed].</span>
<span id="L3307" class="ln">  3307&nbsp;&nbsp;</span>func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error {
<span id="L3308" class="ln">  3308&nbsp;&nbsp;</span>	<span class="comment">// Setup HTTP/2 before srv.Serve, to initialize srv.TLSConfig</span>
<span id="L3309" class="ln">  3309&nbsp;&nbsp;</span>	<span class="comment">// before we clone it and create the TLS Listener.</span>
<span id="L3310" class="ln">  3310&nbsp;&nbsp;</span>	if err := srv.setupHTTP2_ServeTLS(); err != nil {
<span id="L3311" class="ln">  3311&nbsp;&nbsp;</span>		return err
<span id="L3312" class="ln">  3312&nbsp;&nbsp;</span>	}
<span id="L3313" class="ln">  3313&nbsp;&nbsp;</span>
<span id="L3314" class="ln">  3314&nbsp;&nbsp;</span>	config := cloneTLSConfig(srv.TLSConfig)
<span id="L3315" class="ln">  3315&nbsp;&nbsp;</span>	if !strSliceContains(config.NextProtos, &#34;http/1.1&#34;) {
<span id="L3316" class="ln">  3316&nbsp;&nbsp;</span>		config.NextProtos = append(config.NextProtos, &#34;http/1.1&#34;)
<span id="L3317" class="ln">  3317&nbsp;&nbsp;</span>	}
<span id="L3318" class="ln">  3318&nbsp;&nbsp;</span>
<span id="L3319" class="ln">  3319&nbsp;&nbsp;</span>	configHasCert := len(config.Certificates) &gt; 0 || config.GetCertificate != nil
<span id="L3320" class="ln">  3320&nbsp;&nbsp;</span>	if !configHasCert || certFile != &#34;&#34; || keyFile != &#34;&#34; {
<span id="L3321" class="ln">  3321&nbsp;&nbsp;</span>		var err error
<span id="L3322" class="ln">  3322&nbsp;&nbsp;</span>		config.Certificates = make([]tls.Certificate, 1)
<span id="L3323" class="ln">  3323&nbsp;&nbsp;</span>		config.Certificates[0], err = tls.LoadX509KeyPair(certFile, keyFile)
<span id="L3324" class="ln">  3324&nbsp;&nbsp;</span>		if err != nil {
<span id="L3325" class="ln">  3325&nbsp;&nbsp;</span>			return err
<span id="L3326" class="ln">  3326&nbsp;&nbsp;</span>		}
<span id="L3327" class="ln">  3327&nbsp;&nbsp;</span>	}
<span id="L3328" class="ln">  3328&nbsp;&nbsp;</span>
<span id="L3329" class="ln">  3329&nbsp;&nbsp;</span>	tlsListener := tls.NewListener(l, config)
<span id="L3330" class="ln">  3330&nbsp;&nbsp;</span>	return srv.Serve(tlsListener)
<span id="L3331" class="ln">  3331&nbsp;&nbsp;</span>}
<span id="L3332" class="ln">  3332&nbsp;&nbsp;</span>
<span id="L3333" class="ln">  3333&nbsp;&nbsp;</span><span class="comment">// trackListener adds or removes a net.Listener to the set of tracked</span>
<span id="L3334" class="ln">  3334&nbsp;&nbsp;</span><span class="comment">// listeners.</span>
<span id="L3335" class="ln">  3335&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3336" class="ln">  3336&nbsp;&nbsp;</span><span class="comment">// We store a pointer to interface in the map set, in case the</span>
<span id="L3337" class="ln">  3337&nbsp;&nbsp;</span><span class="comment">// net.Listener is not comparable. This is safe because we only call</span>
<span id="L3338" class="ln">  3338&nbsp;&nbsp;</span><span class="comment">// trackListener via Serve and can track+defer untrack the same</span>
<span id="L3339" class="ln">  3339&nbsp;&nbsp;</span><span class="comment">// pointer to local variable there. We never need to compare a</span>
<span id="L3340" class="ln">  3340&nbsp;&nbsp;</span><span class="comment">// Listener from another caller.</span>
<span id="L3341" class="ln">  3341&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3342" class="ln">  3342&nbsp;&nbsp;</span><span class="comment">// It reports whether the server is still up (not Shutdown or Closed).</span>
<span id="L3343" class="ln">  3343&nbsp;&nbsp;</span>func (s *Server) trackListener(ln *net.Listener, add bool) bool {
<span id="L3344" class="ln">  3344&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L3345" class="ln">  3345&nbsp;&nbsp;</span>	defer s.mu.Unlock()
<span id="L3346" class="ln">  3346&nbsp;&nbsp;</span>	if s.listeners == nil {
<span id="L3347" class="ln">  3347&nbsp;&nbsp;</span>		s.listeners = make(map[*net.Listener]struct{})
<span id="L3348" class="ln">  3348&nbsp;&nbsp;</span>	}
<span id="L3349" class="ln">  3349&nbsp;&nbsp;</span>	if add {
<span id="L3350" class="ln">  3350&nbsp;&nbsp;</span>		if s.shuttingDown() {
<span id="L3351" class="ln">  3351&nbsp;&nbsp;</span>			return false
<span id="L3352" class="ln">  3352&nbsp;&nbsp;</span>		}
<span id="L3353" class="ln">  3353&nbsp;&nbsp;</span>		s.listeners[ln] = struct{}{}
<span id="L3354" class="ln">  3354&nbsp;&nbsp;</span>		s.listenerGroup.Add(1)
<span id="L3355" class="ln">  3355&nbsp;&nbsp;</span>	} else {
<span id="L3356" class="ln">  3356&nbsp;&nbsp;</span>		delete(s.listeners, ln)
<span id="L3357" class="ln">  3357&nbsp;&nbsp;</span>		s.listenerGroup.Done()
<span id="L3358" class="ln">  3358&nbsp;&nbsp;</span>	}
<span id="L3359" class="ln">  3359&nbsp;&nbsp;</span>	return true
<span id="L3360" class="ln">  3360&nbsp;&nbsp;</span>}
<span id="L3361" class="ln">  3361&nbsp;&nbsp;</span>
<span id="L3362" class="ln">  3362&nbsp;&nbsp;</span>func (s *Server) trackConn(c *conn, add bool) {
<span id="L3363" class="ln">  3363&nbsp;&nbsp;</span>	s.mu.Lock()
<span id="L3364" class="ln">  3364&nbsp;&nbsp;</span>	defer s.mu.Unlock()
<span id="L3365" class="ln">  3365&nbsp;&nbsp;</span>	if s.activeConn == nil {
<span id="L3366" class="ln">  3366&nbsp;&nbsp;</span>		s.activeConn = make(map[*conn]struct{})
<span id="L3367" class="ln">  3367&nbsp;&nbsp;</span>	}
<span id="L3368" class="ln">  3368&nbsp;&nbsp;</span>	if add {
<span id="L3369" class="ln">  3369&nbsp;&nbsp;</span>		s.activeConn[c] = struct{}{}
<span id="L3370" class="ln">  3370&nbsp;&nbsp;</span>	} else {
<span id="L3371" class="ln">  3371&nbsp;&nbsp;</span>		delete(s.activeConn, c)
<span id="L3372" class="ln">  3372&nbsp;&nbsp;</span>	}
<span id="L3373" class="ln">  3373&nbsp;&nbsp;</span>}
<span id="L3374" class="ln">  3374&nbsp;&nbsp;</span>
<span id="L3375" class="ln">  3375&nbsp;&nbsp;</span>func (s *Server) idleTimeout() time.Duration {
<span id="L3376" class="ln">  3376&nbsp;&nbsp;</span>	if s.IdleTimeout != 0 {
<span id="L3377" class="ln">  3377&nbsp;&nbsp;</span>		return s.IdleTimeout
<span id="L3378" class="ln">  3378&nbsp;&nbsp;</span>	}
<span id="L3379" class="ln">  3379&nbsp;&nbsp;</span>	return s.ReadTimeout
<span id="L3380" class="ln">  3380&nbsp;&nbsp;</span>}
<span id="L3381" class="ln">  3381&nbsp;&nbsp;</span>
<span id="L3382" class="ln">  3382&nbsp;&nbsp;</span>func (s *Server) readHeaderTimeout() time.Duration {
<span id="L3383" class="ln">  3383&nbsp;&nbsp;</span>	if s.ReadHeaderTimeout != 0 {
<span id="L3384" class="ln">  3384&nbsp;&nbsp;</span>		return s.ReadHeaderTimeout
<span id="L3385" class="ln">  3385&nbsp;&nbsp;</span>	}
<span id="L3386" class="ln">  3386&nbsp;&nbsp;</span>	return s.ReadTimeout
<span id="L3387" class="ln">  3387&nbsp;&nbsp;</span>}
<span id="L3388" class="ln">  3388&nbsp;&nbsp;</span>
<span id="L3389" class="ln">  3389&nbsp;&nbsp;</span>func (s *Server) doKeepAlives() bool {
<span id="L3390" class="ln">  3390&nbsp;&nbsp;</span>	return !s.disableKeepAlives.Load() &amp;&amp; !s.shuttingDown()
<span id="L3391" class="ln">  3391&nbsp;&nbsp;</span>}
<span id="L3392" class="ln">  3392&nbsp;&nbsp;</span>
<span id="L3393" class="ln">  3393&nbsp;&nbsp;</span>func (s *Server) shuttingDown() bool {
<span id="L3394" class="ln">  3394&nbsp;&nbsp;</span>	return s.inShutdown.Load()
<span id="L3395" class="ln">  3395&nbsp;&nbsp;</span>}
<span id="L3396" class="ln">  3396&nbsp;&nbsp;</span>
<span id="L3397" class="ln">  3397&nbsp;&nbsp;</span><span class="comment">// SetKeepAlivesEnabled controls whether HTTP keep-alives are enabled.</span>
<span id="L3398" class="ln">  3398&nbsp;&nbsp;</span><span class="comment">// By default, keep-alives are always enabled. Only very</span>
<span id="L3399" class="ln">  3399&nbsp;&nbsp;</span><span class="comment">// resource-constrained environments or servers in the process of</span>
<span id="L3400" class="ln">  3400&nbsp;&nbsp;</span><span class="comment">// shutting down should disable them.</span>
<span id="L3401" class="ln">  3401&nbsp;&nbsp;</span>func (srv *Server) SetKeepAlivesEnabled(v bool) {
<span id="L3402" class="ln">  3402&nbsp;&nbsp;</span>	if v {
<span id="L3403" class="ln">  3403&nbsp;&nbsp;</span>		srv.disableKeepAlives.Store(false)
<span id="L3404" class="ln">  3404&nbsp;&nbsp;</span>		return
<span id="L3405" class="ln">  3405&nbsp;&nbsp;</span>	}
<span id="L3406" class="ln">  3406&nbsp;&nbsp;</span>	srv.disableKeepAlives.Store(true)
<span id="L3407" class="ln">  3407&nbsp;&nbsp;</span>
<span id="L3408" class="ln">  3408&nbsp;&nbsp;</span>	<span class="comment">// Close idle HTTP/1 conns:</span>
<span id="L3409" class="ln">  3409&nbsp;&nbsp;</span>	srv.closeIdleConns()
<span id="L3410" class="ln">  3410&nbsp;&nbsp;</span>
<span id="L3411" class="ln">  3411&nbsp;&nbsp;</span>	<span class="comment">// TODO: Issue 26303: close HTTP/2 conns as soon as they become idle.</span>
<span id="L3412" class="ln">  3412&nbsp;&nbsp;</span>}
<span id="L3413" class="ln">  3413&nbsp;&nbsp;</span>
<span id="L3414" class="ln">  3414&nbsp;&nbsp;</span>func (s *Server) logf(format string, args ...any) {
<span id="L3415" class="ln">  3415&nbsp;&nbsp;</span>	if s.ErrorLog != nil {
<span id="L3416" class="ln">  3416&nbsp;&nbsp;</span>		s.ErrorLog.Printf(format, args...)
<span id="L3417" class="ln">  3417&nbsp;&nbsp;</span>	} else {
<span id="L3418" class="ln">  3418&nbsp;&nbsp;</span>		log.Printf(format, args...)
<span id="L3419" class="ln">  3419&nbsp;&nbsp;</span>	}
<span id="L3420" class="ln">  3420&nbsp;&nbsp;</span>}
<span id="L3421" class="ln">  3421&nbsp;&nbsp;</span>
<span id="L3422" class="ln">  3422&nbsp;&nbsp;</span><span class="comment">// logf prints to the ErrorLog of the *Server associated with request r</span>
<span id="L3423" class="ln">  3423&nbsp;&nbsp;</span><span class="comment">// via ServerContextKey. If there&#39;s no associated server, or if ErrorLog</span>
<span id="L3424" class="ln">  3424&nbsp;&nbsp;</span><span class="comment">// is nil, logging is done via the log package&#39;s standard logger.</span>
<span id="L3425" class="ln">  3425&nbsp;&nbsp;</span>func logf(r *Request, format string, args ...any) {
<span id="L3426" class="ln">  3426&nbsp;&nbsp;</span>	s, _ := r.Context().Value(ServerContextKey).(*Server)
<span id="L3427" class="ln">  3427&nbsp;&nbsp;</span>	if s != nil &amp;&amp; s.ErrorLog != nil {
<span id="L3428" class="ln">  3428&nbsp;&nbsp;</span>		s.ErrorLog.Printf(format, args...)
<span id="L3429" class="ln">  3429&nbsp;&nbsp;</span>	} else {
<span id="L3430" class="ln">  3430&nbsp;&nbsp;</span>		log.Printf(format, args...)
<span id="L3431" class="ln">  3431&nbsp;&nbsp;</span>	}
<span id="L3432" class="ln">  3432&nbsp;&nbsp;</span>}
<span id="L3433" class="ln">  3433&nbsp;&nbsp;</span>
<span id="L3434" class="ln">  3434&nbsp;&nbsp;</span><span class="comment">// ListenAndServe listens on the TCP network address addr and then calls</span>
<span id="L3435" class="ln">  3435&nbsp;&nbsp;</span><span class="comment">// [Serve] with handler to handle requests on incoming connections.</span>
<span id="L3436" class="ln">  3436&nbsp;&nbsp;</span><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span>
<span id="L3437" class="ln">  3437&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3438" class="ln">  3438&nbsp;&nbsp;</span><span class="comment">// The handler is typically nil, in which case [DefaultServeMux] is used.</span>
<span id="L3439" class="ln">  3439&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3440" class="ln">  3440&nbsp;&nbsp;</span><span class="comment">// ListenAndServe always returns a non-nil error.</span>
<span id="L3441" class="ln">  3441&nbsp;&nbsp;</span>func ListenAndServe(addr string, handler Handler) error {
<span id="L3442" class="ln">  3442&nbsp;&nbsp;</span>	server := &amp;Server{Addr: addr, Handler: handler}
<span id="L3443" class="ln">  3443&nbsp;&nbsp;</span>	return server.ListenAndServe()
<span id="L3444" class="ln">  3444&nbsp;&nbsp;</span>}
<span id="L3445" class="ln">  3445&nbsp;&nbsp;</span>
<span id="L3446" class="ln">  3446&nbsp;&nbsp;</span><span class="comment">// ListenAndServeTLS acts identically to [ListenAndServe], except that it</span>
<span id="L3447" class="ln">  3447&nbsp;&nbsp;</span><span class="comment">// expects HTTPS connections. Additionally, files containing a certificate and</span>
<span id="L3448" class="ln">  3448&nbsp;&nbsp;</span><span class="comment">// matching private key for the server must be provided. If the certificate</span>
<span id="L3449" class="ln">  3449&nbsp;&nbsp;</span><span class="comment">// is signed by a certificate authority, the certFile should be the concatenation</span>
<span id="L3450" class="ln">  3450&nbsp;&nbsp;</span><span class="comment">// of the server&#39;s certificate, any intermediates, and the CA&#39;s certificate.</span>
<span id="L3451" class="ln">  3451&nbsp;&nbsp;</span>func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error {
<span id="L3452" class="ln">  3452&nbsp;&nbsp;</span>	server := &amp;Server{Addr: addr, Handler: handler}
<span id="L3453" class="ln">  3453&nbsp;&nbsp;</span>	return server.ListenAndServeTLS(certFile, keyFile)
<span id="L3454" class="ln">  3454&nbsp;&nbsp;</span>}
<span id="L3455" class="ln">  3455&nbsp;&nbsp;</span>
<span id="L3456" class="ln">  3456&nbsp;&nbsp;</span><span class="comment">// ListenAndServeTLS listens on the TCP network address srv.Addr and</span>
<span id="L3457" class="ln">  3457&nbsp;&nbsp;</span><span class="comment">// then calls [ServeTLS] to handle requests on incoming TLS connections.</span>
<span id="L3458" class="ln">  3458&nbsp;&nbsp;</span><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span>
<span id="L3459" class="ln">  3459&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3460" class="ln">  3460&nbsp;&nbsp;</span><span class="comment">// Filenames containing a certificate and matching private key for the</span>
<span id="L3461" class="ln">  3461&nbsp;&nbsp;</span><span class="comment">// server must be provided if neither the [Server]&#39;s TLSConfig.Certificates</span>
<span id="L3462" class="ln">  3462&nbsp;&nbsp;</span><span class="comment">// nor TLSConfig.GetCertificate are populated. If the certificate is</span>
<span id="L3463" class="ln">  3463&nbsp;&nbsp;</span><span class="comment">// signed by a certificate authority, the certFile should be the</span>
<span id="L3464" class="ln">  3464&nbsp;&nbsp;</span><span class="comment">// concatenation of the server&#39;s certificate, any intermediates, and</span>
<span id="L3465" class="ln">  3465&nbsp;&nbsp;</span><span class="comment">// the CA&#39;s certificate.</span>
<span id="L3466" class="ln">  3466&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3467" class="ln">  3467&nbsp;&nbsp;</span><span class="comment">// If srv.Addr is blank, &#34;:https&#34; is used.</span>
<span id="L3468" class="ln">  3468&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3469" class="ln">  3469&nbsp;&nbsp;</span><span class="comment">// ListenAndServeTLS always returns a non-nil error. After [Server.Shutdown] or</span>
<span id="L3470" class="ln">  3470&nbsp;&nbsp;</span><span class="comment">// [Server.Close], the returned error is [ErrServerClosed].</span>
<span id="L3471" class="ln">  3471&nbsp;&nbsp;</span>func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error {
<span id="L3472" class="ln">  3472&nbsp;&nbsp;</span>	if srv.shuttingDown() {
<span id="L3473" class="ln">  3473&nbsp;&nbsp;</span>		return ErrServerClosed
<span id="L3474" class="ln">  3474&nbsp;&nbsp;</span>	}
<span id="L3475" class="ln">  3475&nbsp;&nbsp;</span>	addr := srv.Addr
<span id="L3476" class="ln">  3476&nbsp;&nbsp;</span>	if addr == &#34;&#34; {
<span id="L3477" class="ln">  3477&nbsp;&nbsp;</span>		addr = &#34;:https&#34;
<span id="L3478" class="ln">  3478&nbsp;&nbsp;</span>	}
<span id="L3479" class="ln">  3479&nbsp;&nbsp;</span>
<span id="L3480" class="ln">  3480&nbsp;&nbsp;</span>	ln, err := net.Listen(&#34;tcp&#34;, addr)
<span id="L3481" class="ln">  3481&nbsp;&nbsp;</span>	if err != nil {
<span id="L3482" class="ln">  3482&nbsp;&nbsp;</span>		return err
<span id="L3483" class="ln">  3483&nbsp;&nbsp;</span>	}
<span id="L3484" class="ln">  3484&nbsp;&nbsp;</span>
<span id="L3485" class="ln">  3485&nbsp;&nbsp;</span>	defer ln.Close()
<span id="L3486" class="ln">  3486&nbsp;&nbsp;</span>
<span id="L3487" class="ln">  3487&nbsp;&nbsp;</span>	return srv.ServeTLS(ln, certFile, keyFile)
<span id="L3488" class="ln">  3488&nbsp;&nbsp;</span>}
<span id="L3489" class="ln">  3489&nbsp;&nbsp;</span>
<span id="L3490" class="ln">  3490&nbsp;&nbsp;</span><span class="comment">// setupHTTP2_ServeTLS conditionally configures HTTP/2 on</span>
<span id="L3491" class="ln">  3491&nbsp;&nbsp;</span><span class="comment">// srv and reports whether there was an error setting it up. If it is</span>
<span id="L3492" class="ln">  3492&nbsp;&nbsp;</span><span class="comment">// not configured for policy reasons, nil is returned.</span>
<span id="L3493" class="ln">  3493&nbsp;&nbsp;</span>func (srv *Server) setupHTTP2_ServeTLS() error {
<span id="L3494" class="ln">  3494&nbsp;&nbsp;</span>	srv.nextProtoOnce.Do(srv.onceSetNextProtoDefaults)
<span id="L3495" class="ln">  3495&nbsp;&nbsp;</span>	return srv.nextProtoErr
<span id="L3496" class="ln">  3496&nbsp;&nbsp;</span>}
<span id="L3497" class="ln">  3497&nbsp;&nbsp;</span>
<span id="L3498" class="ln">  3498&nbsp;&nbsp;</span><span class="comment">// setupHTTP2_Serve is called from (*Server).Serve and conditionally</span>
<span id="L3499" class="ln">  3499&nbsp;&nbsp;</span><span class="comment">// configures HTTP/2 on srv using a more conservative policy than</span>
<span id="L3500" class="ln">  3500&nbsp;&nbsp;</span><span class="comment">// setupHTTP2_ServeTLS because Serve is called after tls.Listen,</span>
<span id="L3501" class="ln">  3501&nbsp;&nbsp;</span><span class="comment">// and may be called concurrently. See shouldConfigureHTTP2ForServe.</span>
<span id="L3502" class="ln">  3502&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3503" class="ln">  3503&nbsp;&nbsp;</span><span class="comment">// The tests named TestTransportAutomaticHTTP2* and</span>
<span id="L3504" class="ln">  3504&nbsp;&nbsp;</span><span class="comment">// TestConcurrentServerServe in server_test.go demonstrate some</span>
<span id="L3505" class="ln">  3505&nbsp;&nbsp;</span><span class="comment">// of the supported use cases and motivations.</span>
<span id="L3506" class="ln">  3506&nbsp;&nbsp;</span>func (srv *Server) setupHTTP2_Serve() error {
<span id="L3507" class="ln">  3507&nbsp;&nbsp;</span>	srv.nextProtoOnce.Do(srv.onceSetNextProtoDefaults_Serve)
<span id="L3508" class="ln">  3508&nbsp;&nbsp;</span>	return srv.nextProtoErr
<span id="L3509" class="ln">  3509&nbsp;&nbsp;</span>}
<span id="L3510" class="ln">  3510&nbsp;&nbsp;</span>
<span id="L3511" class="ln">  3511&nbsp;&nbsp;</span>func (srv *Server) onceSetNextProtoDefaults_Serve() {
<span id="L3512" class="ln">  3512&nbsp;&nbsp;</span>	if srv.shouldConfigureHTTP2ForServe() {
<span id="L3513" class="ln">  3513&nbsp;&nbsp;</span>		srv.onceSetNextProtoDefaults()
<span id="L3514" class="ln">  3514&nbsp;&nbsp;</span>	}
<span id="L3515" class="ln">  3515&nbsp;&nbsp;</span>}
<span id="L3516" class="ln">  3516&nbsp;&nbsp;</span>
<span id="L3517" class="ln">  3517&nbsp;&nbsp;</span>var http2server = godebug.New(&#34;http2server&#34;)
<span id="L3518" class="ln">  3518&nbsp;&nbsp;</span>
<span id="L3519" class="ln">  3519&nbsp;&nbsp;</span><span class="comment">// onceSetNextProtoDefaults configures HTTP/2, if the user hasn&#39;t</span>
<span id="L3520" class="ln">  3520&nbsp;&nbsp;</span><span class="comment">// configured otherwise. (by setting srv.TLSNextProto non-nil)</span>
<span id="L3521" class="ln">  3521&nbsp;&nbsp;</span><span class="comment">// It must only be called via srv.nextProtoOnce (use srv.setupHTTP2_*).</span>
<span id="L3522" class="ln">  3522&nbsp;&nbsp;</span>func (srv *Server) onceSetNextProtoDefaults() {
<span id="L3523" class="ln">  3523&nbsp;&nbsp;</span>	if omitBundledHTTP2 {
<span id="L3524" class="ln">  3524&nbsp;&nbsp;</span>		return
<span id="L3525" class="ln">  3525&nbsp;&nbsp;</span>	}
<span id="L3526" class="ln">  3526&nbsp;&nbsp;</span>	if http2server.Value() == &#34;0&#34; {
<span id="L3527" class="ln">  3527&nbsp;&nbsp;</span>		http2server.IncNonDefault()
<span id="L3528" class="ln">  3528&nbsp;&nbsp;</span>		return
<span id="L3529" class="ln">  3529&nbsp;&nbsp;</span>	}
<span id="L3530" class="ln">  3530&nbsp;&nbsp;</span>	<span class="comment">// Enable HTTP/2 by default if the user hasn&#39;t otherwise</span>
<span id="L3531" class="ln">  3531&nbsp;&nbsp;</span>	<span class="comment">// configured their TLSNextProto map.</span>
<span id="L3532" class="ln">  3532&nbsp;&nbsp;</span>	if srv.TLSNextProto == nil {
<span id="L3533" class="ln">  3533&nbsp;&nbsp;</span>		conf := &amp;http2Server{
<span id="L3534" class="ln">  3534&nbsp;&nbsp;</span>			NewWriteScheduler: func() http2WriteScheduler { return http2NewPriorityWriteScheduler(nil) },
<span id="L3535" class="ln">  3535&nbsp;&nbsp;</span>		}
<span id="L3536" class="ln">  3536&nbsp;&nbsp;</span>		srv.nextProtoErr = http2ConfigureServer(srv, conf)
<span id="L3537" class="ln">  3537&nbsp;&nbsp;</span>	}
<span id="L3538" class="ln">  3538&nbsp;&nbsp;</span>}
<span id="L3539" class="ln">  3539&nbsp;&nbsp;</span>
<span id="L3540" class="ln">  3540&nbsp;&nbsp;</span><span class="comment">// TimeoutHandler returns a [Handler] that runs h with the given time limit.</span>
<span id="L3541" class="ln">  3541&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3542" class="ln">  3542&nbsp;&nbsp;</span><span class="comment">// The new Handler calls h.ServeHTTP to handle each request, but if a</span>
<span id="L3543" class="ln">  3543&nbsp;&nbsp;</span><span class="comment">// call runs for longer than its time limit, the handler responds with</span>
<span id="L3544" class="ln">  3544&nbsp;&nbsp;</span><span class="comment">// a 503 Service Unavailable error and the given message in its body.</span>
<span id="L3545" class="ln">  3545&nbsp;&nbsp;</span><span class="comment">// (If msg is empty, a suitable default message will be sent.)</span>
<span id="L3546" class="ln">  3546&nbsp;&nbsp;</span><span class="comment">// After such a timeout, writes by h to its [ResponseWriter] will return</span>
<span id="L3547" class="ln">  3547&nbsp;&nbsp;</span><span class="comment">// [ErrHandlerTimeout].</span>
<span id="L3548" class="ln">  3548&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L3549" class="ln">  3549&nbsp;&nbsp;</span><span class="comment">// TimeoutHandler supports the [Pusher] interface but does not support</span>
<span id="L3550" class="ln">  3550&nbsp;&nbsp;</span><span class="comment">// the [Hijacker] or [Flusher] interfaces.</span>
<span id="L3551" class="ln">  3551&nbsp;&nbsp;</span><span class="selection">func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler</span> {
<span id="L3552" class="ln">  3552&nbsp;&nbsp;</span>	return &amp;timeoutHandler{
<span id="L3553" class="ln">  3553&nbsp;&nbsp;</span>		handler: h,
<span id="L3554" class="ln">  3554&nbsp;&nbsp;</span>		body:    msg,
<span id="L3555" class="ln">  3555&nbsp;&nbsp;</span>		dt:      dt,
<span id="L3556" class="ln">  3556&nbsp;&nbsp;</span>	}
<span id="L3557" class="ln">  3557&nbsp;&nbsp;</span>}
<span id="L3558" class="ln">  3558&nbsp;&nbsp;</span>
<span id="L3559" class="ln">  3559&nbsp;&nbsp;</span><span class="comment">// ErrHandlerTimeout is returned on [ResponseWriter] Write calls</span>
<span id="L3560" class="ln">  3560&nbsp;&nbsp;</span><span class="comment">// in handlers which have timed out.</span>
<span id="L3561" class="ln">  3561&nbsp;&nbsp;</span>var ErrHandlerTimeout = errors.New(&#34;http: Handler timeout&#34;)
<span id="L3562" class="ln">  3562&nbsp;&nbsp;</span>
<span id="L3563" class="ln">  3563&nbsp;&nbsp;</span>type timeoutHandler struct {
<span id="L3564" class="ln">  3564&nbsp;&nbsp;</span>	handler Handler
<span id="L3565" class="ln">  3565&nbsp;&nbsp;</span>	body    string
<span id="L3566" class="ln">  3566&nbsp;&nbsp;</span>	dt      time.Duration
<span id="L3567" class="ln">  3567&nbsp;&nbsp;</span>
<span id="L3568" class="ln">  3568&nbsp;&nbsp;</span>	<span class="comment">// When set, no context will be created and this context will</span>
<span id="L3569" class="ln">  3569&nbsp;&nbsp;</span>	<span class="comment">// be used instead.</span>
<span id="L3570" class="ln">  3570&nbsp;&nbsp;</span>	testContext context.Context
<span id="L3571" class="ln">  3571&nbsp;&nbsp;</span>}
<span id="L3572" class="ln">  3572&nbsp;&nbsp;</span>
<span id="L3573" class="ln">  3573&nbsp;&nbsp;</span>func (h *timeoutHandler) errorBody() string {
<span id="L3574" class="ln">  3574&nbsp;&nbsp;</span>	if h.body != &#34;&#34; {
<span id="L3575" class="ln">  3575&nbsp;&nbsp;</span>		return h.body
<span id="L3576" class="ln">  3576&nbsp;&nbsp;</span>	}
<span id="L3577" class="ln">  3577&nbsp;&nbsp;</span>	return &#34;&lt;html&gt;&lt;head&gt;&lt;title&gt;Timeout&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Timeout&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;
<span id="L3578" class="ln">  3578&nbsp;&nbsp;</span>}
<span id="L3579" class="ln">  3579&nbsp;&nbsp;</span>
<span id="L3580" class="ln">  3580&nbsp;&nbsp;</span>func (h *timeoutHandler) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L3581" class="ln">  3581&nbsp;&nbsp;</span>	ctx := h.testContext
<span id="L3582" class="ln">  3582&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L3583" class="ln">  3583&nbsp;&nbsp;</span>		var cancelCtx context.CancelFunc
<span id="L3584" class="ln">  3584&nbsp;&nbsp;</span>		ctx, cancelCtx = context.WithTimeout(r.Context(), h.dt)
<span id="L3585" class="ln">  3585&nbsp;&nbsp;</span>		defer cancelCtx()
<span id="L3586" class="ln">  3586&nbsp;&nbsp;</span>	}
<span id="L3587" class="ln">  3587&nbsp;&nbsp;</span>	r = r.WithContext(ctx)
<span id="L3588" class="ln">  3588&nbsp;&nbsp;</span>	done := make(chan struct{})
<span id="L3589" class="ln">  3589&nbsp;&nbsp;</span>	tw := &amp;timeoutWriter{
<span id="L3590" class="ln">  3590&nbsp;&nbsp;</span>		w:   w,
<span id="L3591" class="ln">  3591&nbsp;&nbsp;</span>		h:   make(Header),
<span id="L3592" class="ln">  3592&nbsp;&nbsp;</span>		req: r,
<span id="L3593" class="ln">  3593&nbsp;&nbsp;</span>	}
<span id="L3594" class="ln">  3594&nbsp;&nbsp;</span>	panicChan := make(chan any, 1)
<span id="L3595" class="ln">  3595&nbsp;&nbsp;</span>	go func() {
<span id="L3596" class="ln">  3596&nbsp;&nbsp;</span>		defer func() {
<span id="L3597" class="ln">  3597&nbsp;&nbsp;</span>			if p := recover(); p != nil {
<span id="L3598" class="ln">  3598&nbsp;&nbsp;</span>				panicChan &lt;- p
<span id="L3599" class="ln">  3599&nbsp;&nbsp;</span>			}
<span id="L3600" class="ln">  3600&nbsp;&nbsp;</span>		}()
<span id="L3601" class="ln">  3601&nbsp;&nbsp;</span>		h.handler.ServeHTTP(tw, r)
<span id="L3602" class="ln">  3602&nbsp;&nbsp;</span>		close(done)
<span id="L3603" class="ln">  3603&nbsp;&nbsp;</span>	}()
<span id="L3604" class="ln">  3604&nbsp;&nbsp;</span>	select {
<span id="L3605" class="ln">  3605&nbsp;&nbsp;</span>	case p := &lt;-panicChan:
<span id="L3606" class="ln">  3606&nbsp;&nbsp;</span>		panic(p)
<span id="L3607" class="ln">  3607&nbsp;&nbsp;</span>	case &lt;-done:
<span id="L3608" class="ln">  3608&nbsp;&nbsp;</span>		tw.mu.Lock()
<span id="L3609" class="ln">  3609&nbsp;&nbsp;</span>		defer tw.mu.Unlock()
<span id="L3610" class="ln">  3610&nbsp;&nbsp;</span>		dst := w.Header()
<span id="L3611" class="ln">  3611&nbsp;&nbsp;</span>		for k, vv := range tw.h {
<span id="L3612" class="ln">  3612&nbsp;&nbsp;</span>			dst[k] = vv
<span id="L3613" class="ln">  3613&nbsp;&nbsp;</span>		}
<span id="L3614" class="ln">  3614&nbsp;&nbsp;</span>		if !tw.wroteHeader {
<span id="L3615" class="ln">  3615&nbsp;&nbsp;</span>			tw.code = StatusOK
<span id="L3616" class="ln">  3616&nbsp;&nbsp;</span>		}
<span id="L3617" class="ln">  3617&nbsp;&nbsp;</span>		w.WriteHeader(tw.code)
<span id="L3618" class="ln">  3618&nbsp;&nbsp;</span>		w.Write(tw.wbuf.Bytes())
<span id="L3619" class="ln">  3619&nbsp;&nbsp;</span>	case &lt;-ctx.Done():
<span id="L3620" class="ln">  3620&nbsp;&nbsp;</span>		tw.mu.Lock()
<span id="L3621" class="ln">  3621&nbsp;&nbsp;</span>		defer tw.mu.Unlock()
<span id="L3622" class="ln">  3622&nbsp;&nbsp;</span>		switch err := ctx.Err(); err {
<span id="L3623" class="ln">  3623&nbsp;&nbsp;</span>		case context.DeadlineExceeded:
<span id="L3624" class="ln">  3624&nbsp;&nbsp;</span>			w.WriteHeader(StatusServiceUnavailable)
<span id="L3625" class="ln">  3625&nbsp;&nbsp;</span>			io.WriteString(w, h.errorBody())
<span id="L3626" class="ln">  3626&nbsp;&nbsp;</span>			tw.err = ErrHandlerTimeout
<span id="L3627" class="ln">  3627&nbsp;&nbsp;</span>		default:
<span id="L3628" class="ln">  3628&nbsp;&nbsp;</span>			w.WriteHeader(StatusServiceUnavailable)
<span id="L3629" class="ln">  3629&nbsp;&nbsp;</span>			tw.err = err
<span id="L3630" class="ln">  3630&nbsp;&nbsp;</span>		}
<span id="L3631" class="ln">  3631&nbsp;&nbsp;</span>	}
<span id="L3632" class="ln">  3632&nbsp;&nbsp;</span>}
<span id="L3633" class="ln">  3633&nbsp;&nbsp;</span>
<span id="L3634" class="ln">  3634&nbsp;&nbsp;</span>type timeoutWriter struct {
<span id="L3635" class="ln">  3635&nbsp;&nbsp;</span>	w    ResponseWriter
<span id="L3636" class="ln">  3636&nbsp;&nbsp;</span>	h    Header
<span id="L3637" class="ln">  3637&nbsp;&nbsp;</span>	wbuf bytes.Buffer
<span id="L3638" class="ln">  3638&nbsp;&nbsp;</span>	req  *Request
<span id="L3639" class="ln">  3639&nbsp;&nbsp;</span>
<span id="L3640" class="ln">  3640&nbsp;&nbsp;</span>	mu          sync.Mutex
<span id="L3641" class="ln">  3641&nbsp;&nbsp;</span>	err         error
<span id="L3642" class="ln">  3642&nbsp;&nbsp;</span>	wroteHeader bool
<span id="L3643" class="ln">  3643&nbsp;&nbsp;</span>	code        int
<span id="L3644" class="ln">  3644&nbsp;&nbsp;</span>}
<span id="L3645" class="ln">  3645&nbsp;&nbsp;</span>
<span id="L3646" class="ln">  3646&nbsp;&nbsp;</span>var _ Pusher = (*timeoutWriter)(nil)
<span id="L3647" class="ln">  3647&nbsp;&nbsp;</span>
<span id="L3648" class="ln">  3648&nbsp;&nbsp;</span><span class="comment">// Push implements the [Pusher] interface.</span>
<span id="L3649" class="ln">  3649&nbsp;&nbsp;</span>func (tw *timeoutWriter) Push(target string, opts *PushOptions) error {
<span id="L3650" class="ln">  3650&nbsp;&nbsp;</span>	if pusher, ok := tw.w.(Pusher); ok {
<span id="L3651" class="ln">  3651&nbsp;&nbsp;</span>		return pusher.Push(target, opts)
<span id="L3652" class="ln">  3652&nbsp;&nbsp;</span>	}
<span id="L3653" class="ln">  3653&nbsp;&nbsp;</span>	return ErrNotSupported
<span id="L3654" class="ln">  3654&nbsp;&nbsp;</span>}
<span id="L3655" class="ln">  3655&nbsp;&nbsp;</span>
<span id="L3656" class="ln">  3656&nbsp;&nbsp;</span>func (tw *timeoutWriter) Header() Header { return tw.h }
<span id="L3657" class="ln">  3657&nbsp;&nbsp;</span>
<span id="L3658" class="ln">  3658&nbsp;&nbsp;</span>func (tw *timeoutWriter) Write(p []byte) (int, error) {
<span id="L3659" class="ln">  3659&nbsp;&nbsp;</span>	tw.mu.Lock()
<span id="L3660" class="ln">  3660&nbsp;&nbsp;</span>	defer tw.mu.Unlock()
<span id="L3661" class="ln">  3661&nbsp;&nbsp;</span>	if tw.err != nil {
<span id="L3662" class="ln">  3662&nbsp;&nbsp;</span>		return 0, tw.err
<span id="L3663" class="ln">  3663&nbsp;&nbsp;</span>	}
<span id="L3664" class="ln">  3664&nbsp;&nbsp;</span>	if !tw.wroteHeader {
<span id="L3665" class="ln">  3665&nbsp;&nbsp;</span>		tw.writeHeaderLocked(StatusOK)
<span id="L3666" class="ln">  3666&nbsp;&nbsp;</span>	}
<span id="L3667" class="ln">  3667&nbsp;&nbsp;</span>	return tw.wbuf.Write(p)
<span id="L3668" class="ln">  3668&nbsp;&nbsp;</span>}
<span id="L3669" class="ln">  3669&nbsp;&nbsp;</span>
<span id="L3670" class="ln">  3670&nbsp;&nbsp;</span>func (tw *timeoutWriter) writeHeaderLocked(code int) {
<span id="L3671" class="ln">  3671&nbsp;&nbsp;</span>	checkWriteHeaderCode(code)
<span id="L3672" class="ln">  3672&nbsp;&nbsp;</span>
<span id="L3673" class="ln">  3673&nbsp;&nbsp;</span>	switch {
<span id="L3674" class="ln">  3674&nbsp;&nbsp;</span>	case tw.err != nil:
<span id="L3675" class="ln">  3675&nbsp;&nbsp;</span>		return
<span id="L3676" class="ln">  3676&nbsp;&nbsp;</span>	case tw.wroteHeader:
<span id="L3677" class="ln">  3677&nbsp;&nbsp;</span>		if tw.req != nil {
<span id="L3678" class="ln">  3678&nbsp;&nbsp;</span>			caller := relevantCaller()
<span id="L3679" class="ln">  3679&nbsp;&nbsp;</span>			logf(tw.req, &#34;http: superfluous response.WriteHeader call from %s (%s:%d)&#34;, caller.Function, path.Base(caller.File), caller.Line)
<span id="L3680" class="ln">  3680&nbsp;&nbsp;</span>		}
<span id="L3681" class="ln">  3681&nbsp;&nbsp;</span>	default:
<span id="L3682" class="ln">  3682&nbsp;&nbsp;</span>		tw.wroteHeader = true
<span id="L3683" class="ln">  3683&nbsp;&nbsp;</span>		tw.code = code
<span id="L3684" class="ln">  3684&nbsp;&nbsp;</span>	}
<span id="L3685" class="ln">  3685&nbsp;&nbsp;</span>}
<span id="L3686" class="ln">  3686&nbsp;&nbsp;</span>
<span id="L3687" class="ln">  3687&nbsp;&nbsp;</span>func (tw *timeoutWriter) WriteHeader(code int) {
<span id="L3688" class="ln">  3688&nbsp;&nbsp;</span>	tw.mu.Lock()
<span id="L3689" class="ln">  3689&nbsp;&nbsp;</span>	defer tw.mu.Unlock()
<span id="L3690" class="ln">  3690&nbsp;&nbsp;</span>	tw.writeHeaderLocked(code)
<span id="L3691" class="ln">  3691&nbsp;&nbsp;</span>}
<span id="L3692" class="ln">  3692&nbsp;&nbsp;</span>
<span id="L3693" class="ln">  3693&nbsp;&nbsp;</span><span class="comment">// onceCloseListener wraps a net.Listener, protecting it from</span>
<span id="L3694" class="ln">  3694&nbsp;&nbsp;</span><span class="comment">// multiple Close calls.</span>
<span id="L3695" class="ln">  3695&nbsp;&nbsp;</span>type onceCloseListener struct {
<span id="L3696" class="ln">  3696&nbsp;&nbsp;</span>	net.Listener
<span id="L3697" class="ln">  3697&nbsp;&nbsp;</span>	once     sync.Once
<span id="L3698" class="ln">  3698&nbsp;&nbsp;</span>	closeErr error
<span id="L3699" class="ln">  3699&nbsp;&nbsp;</span>}
<span id="L3700" class="ln">  3700&nbsp;&nbsp;</span>
<span id="L3701" class="ln">  3701&nbsp;&nbsp;</span>func (oc *onceCloseListener) Close() error {
<span id="L3702" class="ln">  3702&nbsp;&nbsp;</span>	oc.once.Do(oc.close)
<span id="L3703" class="ln">  3703&nbsp;&nbsp;</span>	return oc.closeErr
<span id="L3704" class="ln">  3704&nbsp;&nbsp;</span>}
<span id="L3705" class="ln">  3705&nbsp;&nbsp;</span>
<span id="L3706" class="ln">  3706&nbsp;&nbsp;</span>func (oc *onceCloseListener) close() { oc.closeErr = oc.Listener.Close() }
<span id="L3707" class="ln">  3707&nbsp;&nbsp;</span>
<span id="L3708" class="ln">  3708&nbsp;&nbsp;</span><span class="comment">// globalOptionsHandler responds to &#34;OPTIONS *&#34; requests.</span>
<span id="L3709" class="ln">  3709&nbsp;&nbsp;</span>type globalOptionsHandler struct{}
<span id="L3710" class="ln">  3710&nbsp;&nbsp;</span>
<span id="L3711" class="ln">  3711&nbsp;&nbsp;</span>func (globalOptionsHandler) ServeHTTP(w ResponseWriter, r *Request) {
<span id="L3712" class="ln">  3712&nbsp;&nbsp;</span>	w.Header().Set(&#34;Content-Length&#34;, &#34;0&#34;)
<span id="L3713" class="ln">  3713&nbsp;&nbsp;</span>	if r.ContentLength != 0 {
<span id="L3714" class="ln">  3714&nbsp;&nbsp;</span>		<span class="comment">// Read up to 4KB of OPTIONS body (as mentioned in the</span>
<span id="L3715" class="ln">  3715&nbsp;&nbsp;</span>		<span class="comment">// spec as being reserved for future use), but anything</span>
<span id="L3716" class="ln">  3716&nbsp;&nbsp;</span>		<span class="comment">// over that is considered a waste of server resources</span>
<span id="L3717" class="ln">  3717&nbsp;&nbsp;</span>		<span class="comment">// (or an attack) and we abort and close the connection,</span>
<span id="L3718" class="ln">  3718&nbsp;&nbsp;</span>		<span class="comment">// courtesy of MaxBytesReader&#39;s EOF behavior.</span>
<span id="L3719" class="ln">  3719&nbsp;&nbsp;</span>		mb := MaxBytesReader(w, r.Body, 4&lt;&lt;10)
<span id="L3720" class="ln">  3720&nbsp;&nbsp;</span>		io.Copy(io.Discard, mb)
<span id="L3721" class="ln">  3721&nbsp;&nbsp;</span>	}
<span id="L3722" class="ln">  3722&nbsp;&nbsp;</span>}
<span id="L3723" class="ln">  3723&nbsp;&nbsp;</span>
<span id="L3724" class="ln">  3724&nbsp;&nbsp;</span><span class="comment">// initALPNRequest is an HTTP handler that initializes certain</span>
<span id="L3725" class="ln">  3725&nbsp;&nbsp;</span><span class="comment">// uninitialized fields in its *Request. Such partially-initialized</span>
<span id="L3726" class="ln">  3726&nbsp;&nbsp;</span><span class="comment">// Requests come from ALPN protocol handlers.</span>
<span id="L3727" class="ln">  3727&nbsp;&nbsp;</span>type initALPNRequest struct {
<span id="L3728" class="ln">  3728&nbsp;&nbsp;</span>	ctx context.Context
<span id="L3729" class="ln">  3729&nbsp;&nbsp;</span>	c   *tls.Conn
<span id="L3730" class="ln">  3730&nbsp;&nbsp;</span>	h   serverHandler
<span id="L3731" class="ln">  3731&nbsp;&nbsp;</span>}
<span id="L3732" class="ln">  3732&nbsp;&nbsp;</span>
<span id="L3733" class="ln">  3733&nbsp;&nbsp;</span><span class="comment">// BaseContext is an exported but unadvertised [http.Handler] method</span>
<span id="L3734" class="ln">  3734&nbsp;&nbsp;</span><span class="comment">// recognized by x/net/http2 to pass down a context; the TLSNextProto</span>
<span id="L3735" class="ln">  3735&nbsp;&nbsp;</span><span class="comment">// API predates context support so we shoehorn through the only</span>
<span id="L3736" class="ln">  3736&nbsp;&nbsp;</span><span class="comment">// interface we have available.</span>
<span id="L3737" class="ln">  3737&nbsp;&nbsp;</span>func (h initALPNRequest) BaseContext() context.Context { return h.ctx }
<span id="L3738" class="ln">  3738&nbsp;&nbsp;</span>
<span id="L3739" class="ln">  3739&nbsp;&nbsp;</span>func (h initALPNRequest) ServeHTTP(rw ResponseWriter, req *Request) {
<span id="L3740" class="ln">  3740&nbsp;&nbsp;</span>	if req.TLS == nil {
<span id="L3741" class="ln">  3741&nbsp;&nbsp;</span>		req.TLS = &amp;tls.ConnectionState{}
<span id="L3742" class="ln">  3742&nbsp;&nbsp;</span>		*req.TLS = h.c.ConnectionState()
<span id="L3743" class="ln">  3743&nbsp;&nbsp;</span>	}
<span id="L3744" class="ln">  3744&nbsp;&nbsp;</span>	if req.Body == nil {
<span id="L3745" class="ln">  3745&nbsp;&nbsp;</span>		req.Body = NoBody
<span id="L3746" class="ln">  3746&nbsp;&nbsp;</span>	}
<span id="L3747" class="ln">  3747&nbsp;&nbsp;</span>	if req.RemoteAddr == &#34;&#34; {
<span id="L3748" class="ln">  3748&nbsp;&nbsp;</span>		req.RemoteAddr = h.c.RemoteAddr().String()
<span id="L3749" class="ln">  3749&nbsp;&nbsp;</span>	}
<span id="L3750" class="ln">  3750&nbsp;&nbsp;</span>	h.h.ServeHTTP(rw, req)
<span id="L3751" class="ln">  3751&nbsp;&nbsp;</span>}
<span id="L3752" class="ln">  3752&nbsp;&nbsp;</span>
<span id="L3753" class="ln">  3753&nbsp;&nbsp;</span><span class="comment">// loggingConn is used for debugging.</span>
<span id="L3754" class="ln">  3754&nbsp;&nbsp;</span>type loggingConn struct {
<span id="L3755" class="ln">  3755&nbsp;&nbsp;</span>	name string
<span id="L3756" class="ln">  3756&nbsp;&nbsp;</span>	net.Conn
<span id="L3757" class="ln">  3757&nbsp;&nbsp;</span>}
<span id="L3758" class="ln">  3758&nbsp;&nbsp;</span>
<span id="L3759" class="ln">  3759&nbsp;&nbsp;</span>var (
<span id="L3760" class="ln">  3760&nbsp;&nbsp;</span>	uniqNameMu   sync.Mutex
<span id="L3761" class="ln">  3761&nbsp;&nbsp;</span>	uniqNameNext = make(map[string]int)
<span id="L3762" class="ln">  3762&nbsp;&nbsp;</span>)
<span id="L3763" class="ln">  3763&nbsp;&nbsp;</span>
<span id="L3764" class="ln">  3764&nbsp;&nbsp;</span>func newLoggingConn(baseName string, c net.Conn) net.Conn {
<span id="L3765" class="ln">  3765&nbsp;&nbsp;</span>	uniqNameMu.Lock()
<span id="L3766" class="ln">  3766&nbsp;&nbsp;</span>	defer uniqNameMu.Unlock()
<span id="L3767" class="ln">  3767&nbsp;&nbsp;</span>	uniqNameNext[baseName]++
<span id="L3768" class="ln">  3768&nbsp;&nbsp;</span>	return &amp;loggingConn{
<span id="L3769" class="ln">  3769&nbsp;&nbsp;</span>		name: fmt.Sprintf(&#34;%s-%d&#34;, baseName, uniqNameNext[baseName]),
<span id="L3770" class="ln">  3770&nbsp;&nbsp;</span>		Conn: c,
<span id="L3771" class="ln">  3771&nbsp;&nbsp;</span>	}
<span id="L3772" class="ln">  3772&nbsp;&nbsp;</span>}
<span id="L3773" class="ln">  3773&nbsp;&nbsp;</span>
<span id="L3774" class="ln">  3774&nbsp;&nbsp;</span>func (c *loggingConn) Write(p []byte) (n int, err error) {
<span id="L3775" class="ln">  3775&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Write(%d) = ....&#34;, c.name, len(p))
<span id="L3776" class="ln">  3776&nbsp;&nbsp;</span>	n, err = c.Conn.Write(p)
<span id="L3777" class="ln">  3777&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Write(%d) = %d, %v&#34;, c.name, len(p), n, err)
<span id="L3778" class="ln">  3778&nbsp;&nbsp;</span>	return
<span id="L3779" class="ln">  3779&nbsp;&nbsp;</span>}
<span id="L3780" class="ln">  3780&nbsp;&nbsp;</span>
<span id="L3781" class="ln">  3781&nbsp;&nbsp;</span>func (c *loggingConn) Read(p []byte) (n int, err error) {
<span id="L3782" class="ln">  3782&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Read(%d) = ....&#34;, c.name, len(p))
<span id="L3783" class="ln">  3783&nbsp;&nbsp;</span>	n, err = c.Conn.Read(p)
<span id="L3784" class="ln">  3784&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Read(%d) = %d, %v&#34;, c.name, len(p), n, err)
<span id="L3785" class="ln">  3785&nbsp;&nbsp;</span>	return
<span id="L3786" class="ln">  3786&nbsp;&nbsp;</span>}
<span id="L3787" class="ln">  3787&nbsp;&nbsp;</span>
<span id="L3788" class="ln">  3788&nbsp;&nbsp;</span>func (c *loggingConn) Close() (err error) {
<span id="L3789" class="ln">  3789&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Close() = ...&#34;, c.name)
<span id="L3790" class="ln">  3790&nbsp;&nbsp;</span>	err = c.Conn.Close()
<span id="L3791" class="ln">  3791&nbsp;&nbsp;</span>	log.Printf(&#34;%s.Close() = %v&#34;, c.name, err)
<span id="L3792" class="ln">  3792&nbsp;&nbsp;</span>	return
<span id="L3793" class="ln">  3793&nbsp;&nbsp;</span>}
<span id="L3794" class="ln">  3794&nbsp;&nbsp;</span>
<span id="L3795" class="ln">  3795&nbsp;&nbsp;</span><span class="comment">// checkConnErrorWriter writes to c.rwc and records any write errors to c.werr.</span>
<span id="L3796" class="ln">  3796&nbsp;&nbsp;</span><span class="comment">// It only contains one field (and a pointer field at that), so it</span>
<span id="L3797" class="ln">  3797&nbsp;&nbsp;</span><span class="comment">// fits in an interface value without an extra allocation.</span>
<span id="L3798" class="ln">  3798&nbsp;&nbsp;</span>type checkConnErrorWriter struct {
<span id="L3799" class="ln">  3799&nbsp;&nbsp;</span>	c *conn
<span id="L3800" class="ln">  3800&nbsp;&nbsp;</span>}
<span id="L3801" class="ln">  3801&nbsp;&nbsp;</span>
<span id="L3802" class="ln">  3802&nbsp;&nbsp;</span>func (w checkConnErrorWriter) Write(p []byte) (n int, err error) {
<span id="L3803" class="ln">  3803&nbsp;&nbsp;</span>	n, err = w.c.rwc.Write(p)
<span id="L3804" class="ln">  3804&nbsp;&nbsp;</span>	if err != nil &amp;&amp; w.c.werr == nil {
<span id="L3805" class="ln">  3805&nbsp;&nbsp;</span>		w.c.werr = err
<span id="L3806" class="ln">  3806&nbsp;&nbsp;</span>		w.c.cancelCtx()
<span id="L3807" class="ln">  3807&nbsp;&nbsp;</span>	}
<span id="L3808" class="ln">  3808&nbsp;&nbsp;</span>	return
<span id="L3809" class="ln">  3809&nbsp;&nbsp;</span>}
<span id="L3810" class="ln">  3810&nbsp;&nbsp;</span>
<span id="L3811" class="ln">  3811&nbsp;&nbsp;</span>func numLeadingCRorLF(v []byte) (n int) {
<span id="L3812" class="ln">  3812&nbsp;&nbsp;</span>	for _, b := range v {
<span id="L3813" class="ln">  3813&nbsp;&nbsp;</span>		if b == &#39;\r&#39; || b == &#39;\n&#39; {
<span id="L3814" class="ln">  3814&nbsp;&nbsp;</span>			n++
<span id="L3815" class="ln">  3815&nbsp;&nbsp;</span>			continue
<span id="L3816" class="ln">  3816&nbsp;&nbsp;</span>		}
<span id="L3817" class="ln">  3817&nbsp;&nbsp;</span>		break
<span id="L3818" class="ln">  3818&nbsp;&nbsp;</span>	}
<span id="L3819" class="ln">  3819&nbsp;&nbsp;</span>	return
<span id="L3820" class="ln">  3820&nbsp;&nbsp;</span>}
<span id="L3821" class="ln">  3821&nbsp;&nbsp;</span>
<span id="L3822" class="ln">  3822&nbsp;&nbsp;</span>func strSliceContains(ss []string, s string) bool {
<span id="L3823" class="ln">  3823&nbsp;&nbsp;</span>	for _, v := range ss {
<span id="L3824" class="ln">  3824&nbsp;&nbsp;</span>		if v == s {
<span id="L3825" class="ln">  3825&nbsp;&nbsp;</span>			return true
<span id="L3826" class="ln">  3826&nbsp;&nbsp;</span>		}
<span id="L3827" class="ln">  3827&nbsp;&nbsp;</span>	}
<span id="L3828" class="ln">  3828&nbsp;&nbsp;</span>	return false
<span id="L3829" class="ln">  3829&nbsp;&nbsp;</span>}
<span id="L3830" class="ln">  3830&nbsp;&nbsp;</span>
<span id="L3831" class="ln">  3831&nbsp;&nbsp;</span><span class="comment">// tlsRecordHeaderLooksLikeHTTP reports whether a TLS record header</span>
<span id="L3832" class="ln">  3832&nbsp;&nbsp;</span><span class="comment">// looks like it might&#39;ve been a misdirected plaintext HTTP request.</span>
<span id="L3833" class="ln">  3833&nbsp;&nbsp;</span>func tlsRecordHeaderLooksLikeHTTP(hdr [5]byte) bool {
<span id="L3834" class="ln">  3834&nbsp;&nbsp;</span>	switch string(hdr[:]) {
<span id="L3835" class="ln">  3835&nbsp;&nbsp;</span>	case &#34;GET /&#34;, &#34;HEAD &#34;, &#34;POST &#34;, &#34;PUT /&#34;, &#34;OPTIO&#34;:
<span id="L3836" class="ln">  3836&nbsp;&nbsp;</span>		return true
<span id="L3837" class="ln">  3837&nbsp;&nbsp;</span>	}
<span id="L3838" class="ln">  3838&nbsp;&nbsp;</span>	return false
<span id="L3839" class="ln">  3839&nbsp;&nbsp;</span>}
<span id="L3840" class="ln">  3840&nbsp;&nbsp;</span>
<span id="L3841" class="ln">  3841&nbsp;&nbsp;</span><span class="comment">// MaxBytesHandler returns a [Handler] that runs h with its [ResponseWriter] and [Request.Body] wrapped by a MaxBytesReader.</span>
<span id="L3842" class="ln">  3842&nbsp;&nbsp;</span>func MaxBytesHandler(h Handler, n int64) Handler {
<span id="L3843" class="ln">  3843&nbsp;&nbsp;</span>	return HandlerFunc(func(w ResponseWriter, r *Request) {
<span id="L3844" class="ln">  3844&nbsp;&nbsp;</span>		r2 := *r
<span id="L3845" class="ln">  3845&nbsp;&nbsp;</span>		r2.Body = MaxBytesReader(w, r.Body, n)
<span id="L3846" class="ln">  3846&nbsp;&nbsp;</span>		h.ServeHTTP(w, &amp;r2)
<span id="L3847" class="ln">  3847&nbsp;&nbsp;</span>	})
<span id="L3848" class="ln">  3848&nbsp;&nbsp;</span>}
<span id="L3849" class="ln">  3849&nbsp;&nbsp;</span>
</pre><p><a href="server.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
