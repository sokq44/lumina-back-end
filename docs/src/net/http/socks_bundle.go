<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/http/socks_bundle.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="socks_bundle.go#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/http">http</a>/<span class="text-muted">socks_bundle.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/http">net/http</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">//go:generate bundle -o socks_bundle.go -prefix socks golang.org/x/net/internal/socks</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span><span class="comment">// Package socks provides a SOCKS version 5 client implementation.</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// SOCKS protocol version 5 is defined in RFC 1928.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// Username/Password authentication for SOCKS version 5 is defined in</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// RFC 1929.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>package http
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>import (
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>)
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>var (
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	socksnoDeadline   = time.Time{}
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	socksaLongTimeAgo = time.Unix(1, 0)
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>func (d *socksDialer) connect(ctx context.Context, c net.Conn, address string) (_ net.Addr, ctxErr error) {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	host, port, err := sockssplitHostPort(address)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	if err != nil {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>		return nil, err
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	}
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	if deadline, ok := ctx.Deadline(); ok &amp;&amp; !deadline.IsZero() {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		c.SetDeadline(deadline)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>		defer c.SetDeadline(socksnoDeadline)
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	if ctx != context.Background() {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		errCh := make(chan error, 1)
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>		done := make(chan struct{})
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>		defer func() {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>			close(done)
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>			if ctxErr == nil {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>				ctxErr = &lt;-errCh
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>			}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		}()
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>		go func() {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			select {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>			case &lt;-ctx.Done():
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>				c.SetDeadline(socksaLongTimeAgo)
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>				errCh &lt;- ctx.Err()
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>			case &lt;-done:
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>				errCh &lt;- nil
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>			}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>		}()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	b := make([]byte, 0, 6+len(host)) <span class="comment">// the size here is just an estimate</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	b = append(b, socksVersion5)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	if len(d.AuthMethods) == 0 || d.Authenticate == nil {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		b = append(b, 1, byte(socksAuthMethodNotRequired))
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	} else {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		ams := d.AuthMethods
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		if len(ams) &gt; 255 {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>			return nil, errors.New(&#34;too many authentication methods&#34;)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		b = append(b, byte(len(ams)))
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		for _, am := range ams {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>			b = append(b, byte(am))
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		}
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	if _, ctxErr = c.Write(b); ctxErr != nil {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		return
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	}
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	if _, ctxErr = io.ReadFull(c, b[:2]); ctxErr != nil {
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		return
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	}
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	if b[0] != socksVersion5 {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		return nil, errors.New(&#34;unexpected protocol version &#34; + strconv.Itoa(int(b[0])))
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	am := socksAuthMethod(b[1])
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	if am == socksAuthMethodNoAcceptableMethods {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>		return nil, errors.New(&#34;no acceptable authentication methods&#34;)
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	if d.Authenticate != nil {
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		if ctxErr = d.Authenticate(ctx, c, am); ctxErr != nil {
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>			return
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>		}
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	b = b[:0]
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	b = append(b, socksVersion5, byte(d.cmd), 0)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if ip := net.ParseIP(host); ip != nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		if ip4 := ip.To4(); ip4 != nil {
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>			b = append(b, socksAddrTypeIPv4)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>			b = append(b, ip4...)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		} else if ip6 := ip.To16(); ip6 != nil {
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>			b = append(b, socksAddrTypeIPv6)
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			b = append(b, ip6...)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>		} else {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>			return nil, errors.New(&#34;unknown address type&#34;)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	} else {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		if len(host) &gt; 255 {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>			return nil, errors.New(&#34;FQDN too long&#34;)
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		}
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		b = append(b, socksAddrTypeFQDN)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		b = append(b, byte(len(host)))
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		b = append(b, host...)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	b = append(b, byte(port&gt;&gt;8), byte(port))
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	if _, ctxErr = c.Write(b); ctxErr != nil {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		return
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	if _, ctxErr = io.ReadFull(c, b[:4]); ctxErr != nil {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		return
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	if b[0] != socksVersion5 {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		return nil, errors.New(&#34;unexpected protocol version &#34; + strconv.Itoa(int(b[0])))
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	if cmdErr := socksReply(b[1]); cmdErr != socksStatusSucceeded {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		return nil, errors.New(&#34;unknown error &#34; + cmdErr.String())
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	if b[2] != 0 {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>		return nil, errors.New(&#34;non-zero reserved field&#34;)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	l := 2
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	var a socksAddr
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	switch b[3] {
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	case socksAddrTypeIPv4:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		l += net.IPv4len
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>		a.IP = make(net.IP, net.IPv4len)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	case socksAddrTypeIPv6:
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		l += net.IPv6len
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		a.IP = make(net.IP, net.IPv6len)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	case socksAddrTypeFQDN:
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		if _, err := io.ReadFull(c, b[:1]); err != nil {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			return nil, err
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		l += int(b[0])
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	default:
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return nil, errors.New(&#34;unknown address type &#34; + strconv.Itoa(int(b[3])))
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	if cap(b) &lt; l {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		b = make([]byte, l)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	} else {
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>		b = b[:l]
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	}
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if _, ctxErr = io.ReadFull(c, b); ctxErr != nil {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if a.IP != nil {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		copy(a.IP, b)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	} else {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>		a.Name = string(b[:len(b)-2])
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	a.Port = int(b[len(b)-2])&lt;&lt;8 | int(b[len(b)-1])
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	return &amp;a, nil
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func sockssplitHostPort(address string) (string, int, error) {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	host, port, err := net.SplitHostPort(address)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	if err != nil {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		return &#34;&#34;, 0, err
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	portnum, err := strconv.Atoi(port)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	if err != nil {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>		return &#34;&#34;, 0, err
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	if 1 &gt; portnum || portnum &gt; 0xffff {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>		return &#34;&#34;, 0, errors.New(&#34;port number out of range &#34; + port)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	return host, portnum, nil
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// A Command represents a SOCKS command.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>type socksCommand int
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>func (cmd socksCommand) String() string {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	switch cmd {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	case socksCmdConnect:
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		return &#34;socks connect&#34;
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	case sockscmdBind:
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>		return &#34;socks bind&#34;
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	default:
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		return &#34;socks &#34; + strconv.Itoa(int(cmd))
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// An AuthMethod represents a SOCKS authentication method.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>type socksAuthMethod int
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span><span class="comment">// A Reply represents a SOCKS command reply code.</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>type socksReply int
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func (code socksReply) String() string {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	switch code {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	case socksStatusSucceeded:
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return &#34;succeeded&#34;
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	case 0x01:
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return &#34;general SOCKS server failure&#34;
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	case 0x02:
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		return &#34;connection not allowed by ruleset&#34;
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	case 0x03:
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return &#34;network unreachable&#34;
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	case 0x04:
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		return &#34;host unreachable&#34;
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	case 0x05:
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return &#34;connection refused&#34;
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	case 0x06:
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		return &#34;TTL expired&#34;
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	case 0x07:
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		return &#34;command not supported&#34;
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	case 0x08:
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		return &#34;address type not supported&#34;
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	default:
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return &#34;unknown code: &#34; + strconv.Itoa(int(code))
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// Wire protocol constants.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>const (
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	socksVersion5 = 0x05
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	socksAddrTypeIPv4 = 0x01
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	socksAddrTypeFQDN = 0x03
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	socksAddrTypeIPv6 = 0x04
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	socksCmdConnect socksCommand = 0x01 <span class="comment">// establishes an active-open forward proxy connection</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	sockscmdBind    socksCommand = 0x02 <span class="comment">// establishes a passive-open forward proxy connection</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	socksAuthMethodNotRequired         socksAuthMethod = 0x00 <span class="comment">// no authentication required</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	socksAuthMethodUsernamePassword    socksAuthMethod = 0x02 <span class="comment">// use username/password</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	socksAuthMethodNoAcceptableMethods socksAuthMethod = 0xff <span class="comment">// no acceptable authentication methods</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	socksStatusSucceeded socksReply = 0x00
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// An Addr represents a SOCKS-specific address.</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// Either Name or IP is used exclusively.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>type socksAddr struct {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	Name string <span class="comment">// fully-qualified domain name</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	IP   net.IP
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	Port int
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func (a *socksAddr) Network() string { return &#34;socks&#34; }
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>func (a *socksAddr) String() string {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	if a == nil {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	port := strconv.Itoa(a.Port)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if a.IP == nil {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return net.JoinHostPort(a.Name, port)
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	return net.JoinHostPort(a.IP.String(), port)
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// A Conn represents a forward proxy connection.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>type socksConn struct {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	net.Conn
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	boundAddr net.Addr
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// BoundAddr returns the address assigned by the proxy server for</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// connecting to the command target address from the proxy server.</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>func (c *socksConn) BoundAddr() net.Addr {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	if c == nil {
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		return nil
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	}
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	return c.boundAddr
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// A Dialer holds SOCKS-specific options.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>type socksDialer struct {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	cmd          socksCommand <span class="comment">// either CmdConnect or cmdBind</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	proxyNetwork string       <span class="comment">// network between a proxy server and a client</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	proxyAddress string       <span class="comment">// proxy server address</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">// ProxyDial specifies the optional dial function for</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// establishing the transport connection.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	ProxyDial func(context.Context, string, string) (net.Conn, error)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	<span class="comment">// AuthMethods specifies the list of request authentication</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	<span class="comment">// methods.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// If empty, SOCKS client requests only AuthMethodNotRequired.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	AuthMethods []socksAuthMethod
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// Authenticate specifies the optional authentication</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	<span class="comment">// function. It must be non-nil when AuthMethods is not empty.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	<span class="comment">// It must return an error when the authentication is failed.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	Authenticate func(context.Context, io.ReadWriter, socksAuthMethod) error
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// DialContext connects to the provided address on the provided</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span><span class="comment">// network.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span><span class="comment">// The returned error value may be a net.OpError. When the Op field of</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// net.OpError contains &#34;socks&#34;, the Source field contains a proxy</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// server address and the Addr field contains a command target</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// address.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// See func Dial of the net package of standard library for a</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">// description of the network and address parameters.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>func (d *socksDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error) {
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	if err := d.validateTarget(network, address); err != nil {
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: errors.New(&#34;nil context&#34;)}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	var err error
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	var c net.Conn
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if d.ProxyDial != nil {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		c, err = d.ProxyDial(ctx, d.proxyNetwork, d.proxyAddress)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	} else {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>		var dd net.Dialer
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		c, err = dd.DialContext(ctx, d.proxyNetwork, d.proxyAddress)
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	if err != nil {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	a, err := d.connect(ctx, c, address)
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	if err != nil {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		c.Close()
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	return &amp;socksConn{Conn: c, boundAddr: a}, nil
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// DialWithConn initiates a connection from SOCKS server to the target</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// network and address using the connection c that is already</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// connected to the SOCKS server.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// It returns the connection&#39;s local address assigned by the SOCKS</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// server.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>func (d *socksDialer) DialWithConn(ctx context.Context, c net.Conn, network, address string) (net.Addr, error) {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	if err := d.validateTarget(network, address); err != nil {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: errors.New(&#34;nil context&#34;)}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	a, err := d.connect(ctx, c, address)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	if err != nil {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	return a, nil
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// Dial connects to the provided address on the provided network.</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// Unlike DialContext, it returns a raw transport connection instead</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// of a forward proxy connection.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// Deprecated: Use DialContext or DialWithConn instead.</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>func (d *socksDialer) Dial(network, address string) (net.Conn, error) {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	if err := d.validateTarget(network, address); err != nil {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	var err error
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	var c net.Conn
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	if d.ProxyDial != nil {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		c, err = d.ProxyDial(context.Background(), d.proxyNetwork, d.proxyAddress)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	} else {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		c, err = net.Dial(d.proxyNetwork, d.proxyAddress)
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	if err != nil {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		proxy, dst, _ := d.pathAddrs(address)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		return nil, &amp;net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if _, err := d.DialWithConn(context.Background(), c, network, address); err != nil {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		c.Close()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		return nil, err
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	return c, nil
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func (d *socksDialer) validateTarget(network, address string) error {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	switch network {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	case &#34;tcp&#34;, &#34;tcp6&#34;, &#34;tcp4&#34;:
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>	default:
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>		return errors.New(&#34;network not implemented&#34;)
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	switch d.cmd {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	case socksCmdConnect, sockscmdBind:
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	default:
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		return errors.New(&#34;command not implemented&#34;)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	return nil
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>func (d *socksDialer) pathAddrs(address string) (proxy, dst net.Addr, err error) {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	for i, s := range []string{d.proxyAddress, address} {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		host, port, err := sockssplitHostPort(s)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>		if err != nil {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>			return nil, nil, err
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>		a := &amp;socksAddr{Port: port}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		a.IP = net.ParseIP(host)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		if a.IP == nil {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			a.Name = host
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		if i == 0 {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>			proxy = a
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		} else {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>			dst = a
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	return
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>}
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// NewDialer returns a new Dialer that dials through the provided</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// proxy server&#39;s network and address.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>func socksNewDialer(network, address string) *socksDialer {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	return &amp;socksDialer{proxyNetwork: network, proxyAddress: address, cmd: socksCmdConnect}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>}
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>const (
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	socksauthUsernamePasswordVersion = 0x01
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	socksauthStatusSucceeded         = 0x00
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// UsernamePassword are the credentials for the username/password</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">// authentication method.</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>type socksUsernamePassword struct {
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	Username string
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	Password string
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// Authenticate authenticates a pair of username and password with the</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// proxy server.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>func (up *socksUsernamePassword) Authenticate(ctx context.Context, rw io.ReadWriter, auth socksAuthMethod) error {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	switch auth {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	case socksAuthMethodNotRequired:
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		return nil
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	case socksAuthMethodUsernamePassword:
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		if len(up.Username) == 0 || len(up.Username) &gt; 255 || len(up.Password) &gt; 255 {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>			return errors.New(&#34;invalid username/password&#34;)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		b := []byte{socksauthUsernamePasswordVersion}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		b = append(b, byte(len(up.Username)))
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		b = append(b, up.Username...)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		b = append(b, byte(len(up.Password)))
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		b = append(b, up.Password...)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		<span class="comment">// TODO(mikio): handle IO deadlines and cancelation if</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		<span class="comment">// necessary</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		if _, err := rw.Write(b); err != nil {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			return err
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		if _, err := io.ReadFull(rw, b[:2]); err != nil {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>			return err
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		if b[0] != socksauthUsernamePasswordVersion {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>			return errors.New(&#34;invalid username/password version&#34;)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		if b[1] != socksauthStatusSucceeded {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			return errors.New(&#34;username/password authentication failed&#34;)
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>		}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		return nil
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	return errors.New(&#34;unsupported authentication method &#34; + strconv.Itoa(int(auth)))
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
</pre><p><a href="socks_bundle.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
