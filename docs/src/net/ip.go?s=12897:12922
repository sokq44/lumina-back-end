<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/ip.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./ip.go?s=12897:12922#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<span class="text-muted">ip.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net">net</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// IP address manipulations</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// IPv4 addresses are 4 bytes; IPv6 addresses are 16 bytes.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// An IPv4 address can be converted to an IPv6 address by</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// adding a canonical prefix (10 zeros, 2 0xFFs).</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// This library accepts either size of byte slice but always</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// returns 16-byte addresses.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>package net
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>import (
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;internal/bytealg&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;internal/itoa&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;net/netip&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>)
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// IP address lengths (bytes).</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>const (
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	IPv4len = 4
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	IPv6len = 16
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>)
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// An IP is a single IP address, a slice of bytes.</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Functions in this package accept either 4-byte (IPv4)</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// or 16-byte (IPv6) slices as input.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// Note that in this documentation, referring to an</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// IP address as an IPv4 address or an IPv6 address</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// is a semantic property of the address, not just the</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// length of the byte slice: a 16-byte slice can still</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// be an IPv4 address.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>type IP []byte
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// An IPMask is a bitmask that can be used to manipulate</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// IP addresses for IP addressing and routing.</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// See type [IPNet] and func [ParseCIDR] for details.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>type IPMask []byte
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">// An IPNet represents an IP network.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>type IPNet struct {
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	IP   IP     <span class="comment">// network number</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Mask IPMask <span class="comment">// network mask</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>}
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// IPv4 returns the IP address (in 16-byte form) of the</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// IPv4 address a.b.c.d.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>func IPv4(a, b, c, d byte) IP {
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	p := make(IP, IPv6len)
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	copy(p, v4InV6Prefix)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	p[12] = a
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	p[13] = b
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	p[14] = c
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	p[15] = d
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	return p
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>var v4InV6Prefix = []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// IPv4Mask returns the IP mask (in 4-byte form) of the</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// IPv4 mask a.b.c.d.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>func IPv4Mask(a, b, c, d byte) IPMask {
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	p := make(IPMask, IPv4len)
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	p[0] = a
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	p[1] = b
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	p[2] = c
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	p[3] = d
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	return p
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// CIDRMask returns an [IPMask] consisting of &#39;ones&#39; 1 bits</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// followed by 0s up to a total length of &#39;bits&#39; bits.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// For a mask of this form, CIDRMask is the inverse of [IPMask.Size].</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func CIDRMask(ones, bits int) IPMask {
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if bits != 8*IPv4len &amp;&amp; bits != 8*IPv6len {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		return nil
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	if ones &lt; 0 || ones &gt; bits {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		return nil
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	}
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	l := bits / 8
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	m := make(IPMask, l)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	n := uint(ones)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	for i := 0; i &lt; l; i++ {
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		if n &gt;= 8 {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			m[i] = 0xff
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>			n -= 8
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>			continue
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		}
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		m[i] = ^byte(0xff &gt;&gt; n)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		n = 0
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	return m
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>}
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// Well-known IPv4 addresses</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>var (
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	IPv4bcast     = IPv4(255, 255, 255, 255) <span class="comment">// limited broadcast</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	IPv4allsys    = IPv4(224, 0, 0, 1)       <span class="comment">// all systems</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	IPv4allrouter = IPv4(224, 0, 0, 2)       <span class="comment">// all routers</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	IPv4zero      = IPv4(0, 0, 0, 0)         <span class="comment">// all zeros</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// Well-known IPv6 addresses</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>var (
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	IPv6zero                   = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	IPv6unspecified            = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	IPv6loopback               = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	IPv6interfacelocalallnodes = IP{0xff, 0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	IPv6linklocalallnodes      = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	IPv6linklocalallrouters    = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x02}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// IsUnspecified reports whether ip is an unspecified address, either</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// the IPv4 address &#34;0.0.0.0&#34; or the IPv6 address &#34;::&#34;.</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>func (ip IP) IsUnspecified() bool {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	return ip.Equal(IPv4zero) || ip.Equal(IPv6unspecified)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>}
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// IsLoopback reports whether ip is a loopback address.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>func (ip IP) IsLoopback() bool {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	if ip4 := ip.To4(); ip4 != nil {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		return ip4[0] == 127
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	return ip.Equal(IPv6loopback)
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>}
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// IsPrivate reports whether ip is a private address, according to</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// RFC 1918 (IPv4 addresses) and RFC 4193 (IPv6 addresses).</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (ip IP) IsPrivate() bool {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if ip4 := ip.To4(); ip4 != nil {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		<span class="comment">// Following RFC 1918, Section 3. Private Address Space which says:</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>		<span class="comment">//   The Internet Assigned Numbers Authority (IANA) has reserved the</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>		<span class="comment">//   following three blocks of the IP address space for private internets:</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		<span class="comment">//     10.0.0.0        -   10.255.255.255  (10/8 prefix)</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		<span class="comment">//     172.16.0.0      -   172.31.255.255  (172.16/12 prefix)</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		<span class="comment">//     192.168.0.0     -   192.168.255.255 (192.168/16 prefix)</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return ip4[0] == 10 ||
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			(ip4[0] == 172 &amp;&amp; ip4[1]&amp;0xf0 == 16) ||
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			(ip4[0] == 192 &amp;&amp; ip4[1] == 168)
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// Following RFC 4193, Section 8. IANA Considerations which says:</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//   The IANA has assigned the FC00::/7 prefix to &#34;Unique Local Unicast&#34;.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	return len(ip) == IPv6len &amp;&amp; ip[0]&amp;0xfe == 0xfc
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>}
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span><span class="comment">// IsMulticast reports whether ip is a multicast address.</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>func (ip IP) IsMulticast() bool {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if ip4 := ip.To4(); ip4 != nil {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		return ip4[0]&amp;0xf0 == 0xe0
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	}
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	return len(ip) == IPv6len &amp;&amp; ip[0] == 0xff
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span><span class="comment">// IsInterfaceLocalMulticast reports whether ip is</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// an interface-local multicast address.</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>func (ip IP) IsInterfaceLocalMulticast() bool {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	return len(ip) == IPv6len &amp;&amp; ip[0] == 0xff &amp;&amp; ip[1]&amp;0x0f == 0x01
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span><span class="comment">// IsLinkLocalMulticast reports whether ip is a link-local</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// multicast address.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>func (ip IP) IsLinkLocalMulticast() bool {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if ip4 := ip.To4(); ip4 != nil {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		return ip4[0] == 224 &amp;&amp; ip4[1] == 0 &amp;&amp; ip4[2] == 0
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	return len(ip) == IPv6len &amp;&amp; ip[0] == 0xff &amp;&amp; ip[1]&amp;0x0f == 0x02
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// IsLinkLocalUnicast reports whether ip is a link-local</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// unicast address.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>func (ip IP) IsLinkLocalUnicast() bool {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	if ip4 := ip.To4(); ip4 != nil {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		return ip4[0] == 169 &amp;&amp; ip4[1] == 254
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	return len(ip) == IPv6len &amp;&amp; ip[0] == 0xfe &amp;&amp; ip[1]&amp;0xc0 == 0x80
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// IsGlobalUnicast reports whether ip is a global unicast</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// address.</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// The identification of global unicast addresses uses address type</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// identification as defined in RFC 1122, RFC 4632 and RFC 4291 with</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// the exception of IPv4 directed broadcast addresses.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// It returns true even if ip is in IPv4 private address space or</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// local IPv6 unicast address space.</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>func (ip IP) IsGlobalUnicast() bool {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	return (len(ip) == IPv4len || len(ip) == IPv6len) &amp;&amp;
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		!ip.Equal(IPv4bcast) &amp;&amp;
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		!ip.IsUnspecified() &amp;&amp;
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>		!ip.IsLoopback() &amp;&amp;
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		!ip.IsMulticast() &amp;&amp;
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		!ip.IsLinkLocalUnicast()
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// Is p all zeros?</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func isZeros(p IP) bool {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	for i := 0; i &lt; len(p); i++ {
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		if p[i] != 0 {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>			return false
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return true
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// To4 converts the IPv4 address ip to a 4-byte representation.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// If ip is not an IPv4 address, To4 returns nil.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (ip IP) To4() IP {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	if len(ip) == IPv4len {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>		return ip
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	if len(ip) == IPv6len &amp;&amp;
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		isZeros(ip[0:10]) &amp;&amp;
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		ip[10] == 0xff &amp;&amp;
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		ip[11] == 0xff {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		return ip[12:16]
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	}
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	return nil
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// To16 converts the IP address ip to a 16-byte representation.</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// If ip is not an IP address (it is the wrong length), To16 returns nil.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func (ip IP) To16() IP {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if len(ip) == IPv4len {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		return IPv4(ip[0], ip[1], ip[2], ip[3])
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	if len(ip) == IPv6len {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		return ip
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	return nil
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// Default route masks for IPv4.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>var (
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	classAMask = IPv4Mask(0xff, 0, 0, 0)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	classBMask = IPv4Mask(0xff, 0xff, 0, 0)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	classCMask = IPv4Mask(0xff, 0xff, 0xff, 0)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// DefaultMask returns the default IP mask for the IP address ip.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// Only IPv4 addresses have default masks; DefaultMask returns</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// nil if ip is not a valid IPv4 address.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func (ip IP) DefaultMask() IPMask {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	if ip = ip.To4(); ip == nil {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return nil
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	switch {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	case ip[0] &lt; 0x80:
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		return classAMask
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	case ip[0] &lt; 0xC0:
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return classBMask
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	default:
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		return classCMask
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>func allFF(b []byte) bool {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	for _, c := range b {
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>		if c != 0xff {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			return false
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	}
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	return true
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// Mask returns the result of masking the IP address ip with mask.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>func (ip IP) Mask(mask IPMask) IP {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if len(mask) == IPv6len &amp;&amp; len(ip) == IPv4len &amp;&amp; allFF(mask[:12]) {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		mask = mask[12:]
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if len(mask) == IPv4len &amp;&amp; len(ip) == IPv6len &amp;&amp; bytealg.Equal(ip[:12], v4InV6Prefix) {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		ip = ip[12:]
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	n := len(ip)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	if n != len(mask) {
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		return nil
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	}
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	out := make(IP, n)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	for i := 0; i &lt; n; i++ {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		out[i] = ip[i] &amp; mask[i]
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return out
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// String returns the string form of the IP address ip.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// It returns one of 4 forms:</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">//   - &#34;&lt;nil&gt;&#34;, if ip has length 0</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">//   - dotted decimal (&#34;192.0.2.1&#34;), if ip is an IPv4 or IP4-mapped IPv6 address</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">//   - IPv6 conforming to RFC 5952 (&#34;2001:db8::1&#34;), if ip is a valid IPv6 address</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">//   - the hexadecimal form of ip, without punctuation, if no other cases apply</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>func (ip IP) String() string {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if len(ip) == 0 {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	if len(ip) != IPv4len &amp;&amp; len(ip) != IPv6len {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		return &#34;?&#34; + hexString(ip)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	<span class="comment">// If IPv4, use dotted notation.</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if p4 := ip.To4(); len(p4) == IPv4len {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return netip.AddrFrom4([4]byte(p4)).String()
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	return netip.AddrFrom16([16]byte(ip)).String()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>}
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>func hexString(b []byte) string {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	s := make([]byte, len(b)*2)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	for i, tn := range b {
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		s[i*2], s[i*2+1] = hexDigit[tn&gt;&gt;4], hexDigit[tn&amp;0xf]
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	}
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	return string(s)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// ipEmptyString is like ip.String except that it returns</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// an empty string when ip is unset.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func ipEmptyString(ip IP) string {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	if len(ip) == 0 {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	return ip.String()
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>}
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// MarshalText implements the [encoding.TextMarshaler] interface.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">// The encoding is the same as returned by [IP.String], with one exception:</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// When len(ip) is zero, it returns an empty slice.</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>func (ip IP) MarshalText() ([]byte, error) {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if len(ip) == 0 {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return []byte(&#34;&#34;), nil
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	if len(ip) != IPv4len &amp;&amp; len(ip) != IPv6len {
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>		return nil, &amp;AddrError{Err: &#34;invalid IP address&#34;, Addr: hexString(ip)}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	return []byte(ip.String()), nil
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// UnmarshalText implements the [encoding.TextUnmarshaler] interface.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span><span class="comment">// The IP address is expected in a form accepted by [ParseIP].</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>func (ip *IP) UnmarshalText(text []byte) error {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	if len(text) == 0 {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		*ip = nil
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		return nil
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	s := string(text)
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	x := ParseIP(s)
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	if x == nil {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		return &amp;ParseError{Type: &#34;IP address&#34;, Text: s}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	*ip = x
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return nil
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// Equal reports whether ip and x are the same IP address.</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// An IPv4 address and that same address in IPv6 form are</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">// considered to be equal.</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>func (ip IP) Equal(x IP) bool {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	if len(ip) == len(x) {
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		return bytealg.Equal(ip, x)
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	if len(ip) == IPv4len &amp;&amp; len(x) == IPv6len {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		return bytealg.Equal(x[0:12], v4InV6Prefix) &amp;&amp; bytealg.Equal(ip, x[12:])
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	if len(ip) == IPv6len &amp;&amp; len(x) == IPv4len {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		return bytealg.Equal(ip[0:12], v4InV6Prefix) &amp;&amp; bytealg.Equal(ip[12:], x)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	return false
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func (ip IP) matchAddrFamily(x IP) bool {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	return ip.To4() != nil &amp;&amp; x.To4() != nil || ip.To16() != nil &amp;&amp; ip.To4() == nil &amp;&amp; x.To16() != nil &amp;&amp; x.To4() == nil
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span><span class="comment">// If mask is a sequence of 1 bits followed by 0 bits,</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// return the number of 1 bits.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>func simpleMaskLength(mask IPMask) int {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	var n int
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	for i, v := range mask {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>		if v == 0xff {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			n += 8
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>			continue
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		}
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		<span class="comment">// found non-ff byte</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		<span class="comment">// count 1 bits</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		for v&amp;0x80 != 0 {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			n++
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			v &lt;&lt;= 1
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>		}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>		<span class="comment">// rest must be 0 bits</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		if v != 0 {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			return -1
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		for i++; i &lt; len(mask); i++ {
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			if mask[i] != 0 {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				return -1
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		break
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	return n
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// Size returns the number of leading ones and total bits in the mask.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">// If the mask is not in the canonical form--ones followed by zeros--then</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// Size returns 0, 0.</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func (m IPMask) Size() (ones, bits int) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	ones, bits = simpleMaskLength(m), len(m)*8
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	if ones == -1 {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		return 0, 0
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	return
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// String returns the hexadecimal form of m, with no punctuation.</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>func (m IPMask) String() string {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	if len(m) == 0 {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	}
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	return hexString(m)
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>func networkNumberAndMask(n *IPNet) (ip IP, m IPMask) {
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	if ip = n.IP.To4(); ip == nil {
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		ip = n.IP
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>		if len(ip) != IPv6len {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>			return nil, nil
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	m = n.Mask
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	switch len(m) {
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	case IPv4len:
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		if len(ip) != IPv4len {
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>			return nil, nil
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		}
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	case IPv6len:
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		if len(ip) == IPv4len {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			m = m[12:]
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	default:
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		return nil, nil
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	return
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// Contains reports whether the network includes ip.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func (n *IPNet) Contains(ip IP) bool {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	nn, m := networkNumberAndMask(n)
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	if x := ip.To4(); x != nil {
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		ip = x
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	l := len(ip)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	if l != len(nn) {
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		return false
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	for i := 0; i &lt; l; i++ {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		if nn[i]&amp;m[i] != ip[i]&amp;m[i] {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			return false
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	return true
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>
<span id="L465" class="ln">   465&nbsp;&nbsp;</span><span class="comment">// Network returns the address&#39;s network name, &#34;ip+net&#34;.</span>
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>func (n *IPNet) Network() string { return &#34;ip+net&#34; }
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// String returns the CIDR notation of n like &#34;192.0.2.0/24&#34;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">// or &#34;2001:db8::/48&#34; as defined in RFC 4632 and RFC 4291.</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// If the mask is not in the canonical form, it returns the</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// string which consists of an IP address, followed by a slash</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// character and a mask expressed as hexadecimal form with no</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// punctuation like &#34;198.51.100.0/c000ff00&#34;.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>func (n *IPNet) String() string {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	if n == nil {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	nn, m := networkNumberAndMask(n)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	if nn == nil || m == nil {
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	}
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	l := simpleMaskLength(m)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if l == -1 {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return nn.String() + &#34;/&#34; + m.String()
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	return nn.String() + &#34;/&#34; + itoa.Uitoa(uint(l))
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">// ParseIP parses s as an IP address, returning the result.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// The string s can be in IPv4 dotted decimal (&#34;192.0.2.1&#34;), IPv6</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// (&#34;2001:db8::68&#34;), or IPv4-mapped IPv6 (&#34;::ffff:192.0.2.1&#34;) form.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// If s is not a valid textual representation of an IP address,</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// ParseIP returns nil.</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="selection">func ParseIP(s string) IP</span> {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	if addr, valid := parseIP(s); valid {
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		return IP(addr[:])
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	return nil
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>func parseIP(s string) ([16]byte, bool) {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	ip, err := netip.ParseAddr(s)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	if err != nil || ip.Zone() != &#34;&#34; {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>		return [16]byte{}, false
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>	}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	return ip.As16(), true
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// ParseCIDR parses s as a CIDR notation IP address and prefix length,</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">// like &#34;192.0.2.0/24&#34; or &#34;2001:db8::/32&#34;, as defined in</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span><span class="comment">// RFC 4632 and RFC 4291.</span>
<span id="L512" class="ln">   512&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// It returns the IP address and the network implied by the IP and</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// prefix length.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">// For example, ParseCIDR(&#34;192.0.2.1/24&#34;) returns the IP address</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// 192.0.2.1 and the network 192.0.2.0/24.</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>func ParseCIDR(s string) (IP, *IPNet, error) {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	i := bytealg.IndexByteString(s, &#39;/&#39;)
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>		return nil, nil, &amp;ParseError{Type: &#34;CIDR address&#34;, Text: s}
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	addr, mask := s[:i], s[i+1:]
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	ipAddr, err := netip.ParseAddr(addr)
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	if err != nil || ipAddr.Zone() != &#34;&#34; {
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>		return nil, nil, &amp;ParseError{Type: &#34;CIDR address&#34;, Text: s}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	}
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	n, i, ok := dtoi(mask)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if !ok || i != len(mask) || n &lt; 0 || n &gt; ipAddr.BitLen() {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		return nil, nil, &amp;ParseError{Type: &#34;CIDR address&#34;, Text: s}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	m := CIDRMask(n, ipAddr.BitLen())
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	addr16 := ipAddr.As16()
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	return IP(addr16[:]), &amp;IPNet{IP: IP(addr16[:]).Mask(m), Mask: m}, nil
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>func copyIP(x IP) IP {
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	y := make(IP, len(x))
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	copy(y, x)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	return y
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
</pre><p><a href="ip.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
