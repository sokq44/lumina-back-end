<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/mail/message.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./message.go?s=7511:7577#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/mail">mail</a>/<span class="text-muted">message.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/mail">net/mail</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package mail implements parsing of mail messages.
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>For the most part, this package follows the syntax as specified by RFC 5322 and
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>extended by RFC 6532.
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>Notable divergences:
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>  - Obsolete address formats are not parsed, including addresses with
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>    embedded route information.
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>  - The full range of spacing (the CFWS syntax element) is not supported,
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>    such as breaking addresses across lines.
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>  - No unicode normalization is performed.
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>  - The special characters ()[]:;@\, are allowed to appear unquoted in names.
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>  - A leading From line is permitted, as in mbox format (RFC 4155).
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>*/</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>package mail
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>import (
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;mime&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>)
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>var debug = debugT(false)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>type debugT bool
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>func (d debugT) Printf(format string, args ...any) {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	if d {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>		log.Printf(format, args...)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>}
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">// A Message represents a parsed mail message.</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>type Message struct {
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Header Header
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	Body   io.Reader
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// ReadMessage reads a message from r.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// The headers are parsed, and the body of the message will be available</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">// for reading from msg.Body.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>func ReadMessage(r io.Reader) (msg *Message, err error) {
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	tp := textproto.NewReader(bufio.NewReader(r))
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	hdr, err := readHeader(tp)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	if err != nil &amp;&amp; (err != io.EOF || len(hdr) == 0) {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>		return nil, err
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	return &amp;Message{
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		Header: Header(hdr),
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		Body:   tp.R,
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	}, nil
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// readHeader reads the message headers from r.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// This is like textproto.ReadMIMEHeader, but doesn&#39;t validate.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// The fix for issue #53188 tightened up net/textproto to enforce</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// restrictions of RFC 7230.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// This package implements RFC 5322, which does not have those restrictions.</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// This function copies the relevant code from net/textproto,</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// simplified for RFC 5322.</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>func readHeader(r *textproto.Reader) (map[string][]string, error) {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	m := make(map[string][]string)
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	<span class="comment">// The first line cannot start with a leading space.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	if buf, err := r.R.Peek(1); err == nil &amp;&amp; (buf[0] == &#39; &#39; || buf[0] == &#39;\t&#39;) {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		line, err := r.ReadLine()
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		if err != nil {
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>			return m, err
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>		}
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		return m, errors.New(&#34;malformed initial line: &#34; + line)
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	}
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	for {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		kv, err := r.ReadContinuedLine()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>		if kv == &#34;&#34; {
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>			return m, err
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		<span class="comment">// Key ends at first colon.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		k, v, ok := strings.Cut(kv, &#34;:&#34;)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		if !ok {
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>			return m, errors.New(&#34;malformed header line: &#34; + kv)
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>		key := textproto.CanonicalMIMEHeaderKey(k)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		<span class="comment">// Permit empty key, because that is what we did in the past.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>		if key == &#34;&#34; {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>			continue
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>		<span class="comment">// Skip initial spaces in value.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>		value := strings.TrimLeft(v, &#34; \t&#34;)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		m[key] = append(m[key], value)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		if err != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			return m, err
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	}
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// Layouts suitable for passing to time.Parse.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">// These are tried in order.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>var (
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	dateLayoutsBuildOnce sync.Once
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	dateLayouts          []string
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func buildDateLayouts() {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// Generate layouts based on RFC 5322, section 3.3.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	dows := [...]string{&#34;&#34;, &#34;Mon, &#34;}   <span class="comment">// day-of-week</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	days := [...]string{&#34;2&#34;, &#34;02&#34;}     <span class="comment">// day = 1*2DIGIT</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	years := [...]string{&#34;2006&#34;, &#34;06&#34;} <span class="comment">// year = 4*DIGIT / 2*DIGIT</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	seconds := [...]string{&#34;:05&#34;, &#34;&#34;}  <span class="comment">// second</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// &#34;-0700 (MST)&#34; is not in RFC 5322, but is common.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	zones := [...]string{&#34;-0700&#34;, &#34;MST&#34;, &#34;UT&#34;} <span class="comment">// zone = ((&#34;+&#34; / &#34;-&#34;) 4DIGIT) / &#34;UT&#34; / &#34;GMT&#34; / ...</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	for _, dow := range dows {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		for _, day := range days {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			for _, year := range years {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>				for _, second := range seconds {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>					for _, zone := range zones {
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>						s := dow + day + &#34; Jan &#34; + year + &#34; 15:04&#34; + second + &#34; &#34; + zone
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>						dateLayouts = append(dateLayouts, s)
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>					}
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>				}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span><span class="comment">// ParseDate parses an RFC 5322 date string.</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>func ParseDate(date string) (time.Time, error) {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	dateLayoutsBuildOnce.Do(buildDateLayouts)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// CR and LF must match and are tolerated anywhere in the date field.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	date = strings.ReplaceAll(date, &#34;\r\n&#34;, &#34;&#34;)
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	if strings.Contains(date, &#34;\r&#34;) {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>		return time.Time{}, errors.New(&#34;mail: header has a CR without LF&#34;)
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// Re-using some addrParser methods which support obsolete text, i.e. non-printable ASCII</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	p := addrParser{date, nil}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// RFC 5322: zone = (FWS ( &#34;+&#34; / &#34;-&#34; ) 4DIGIT) / obs-zone</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// zone length is always 5 chars unless obsolete (obs-zone)</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	if ind := strings.IndexAny(p.s, &#34;+-&#34;); ind != -1 &amp;&amp; len(p.s) &gt;= ind+5 {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		date = p.s[:ind+5]
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>		p.s = p.s[ind+5:]
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	} else {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>		ind := strings.Index(p.s, &#34;T&#34;)
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		if ind == 0 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			<span class="comment">// In this case we have the following date formats:</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>			<span class="comment">// * Thu, 20 Nov 1997 09:55:06 MDT</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			<span class="comment">// * Thu, 20 Nov 1997 09:55:06 MDT (MDT)</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>			<span class="comment">// * Thu, 20 Nov 1997 09:55:06 MDT (This comment)</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			ind = strings.Index(p.s[1:], &#34;T&#34;)
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			if ind != -1 {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>				ind++
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		if ind != -1 &amp;&amp; len(p.s) &gt;= ind+5 {
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			<span class="comment">// The last letter T of the obsolete time zone is checked when no standard time zone is found.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			<span class="comment">// If T is misplaced, the date to parse is garbage.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			date = p.s[:ind+1]
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			p.s = p.s[ind+1:]
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	}
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if !p.skipCFWS() {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		return time.Time{}, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	for _, layout := range dateLayouts {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		t, err := time.Parse(layout, date)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		if err == nil {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>			return t, nil
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return time.Time{}, errors.New(&#34;mail: header could not be parsed&#34;)
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// A Header represents the key-value pairs in a mail message header.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>type Header map[string][]string
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// Get gets the first value associated with the given key.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// It is case insensitive; CanonicalMIMEHeaderKey is used</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span><span class="comment">// to canonicalize the provided key.</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span><span class="comment">// If there are no values associated with the key, Get returns &#34;&#34;.</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// To access multiple values of a key, or to use non-canonical keys,</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span><span class="comment">// access the map directly.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>func (h Header) Get(key string) string {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	return textproto.MIMEHeader(h).Get(key)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>var ErrHeaderNotPresent = errors.New(&#34;mail: header not in message&#34;)
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// Date parses the Date header field.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>func (h Header) Date() (time.Time, error) {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	hdr := h.Get(&#34;Date&#34;)
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if hdr == &#34;&#34; {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		return time.Time{}, ErrHeaderNotPresent
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return ParseDate(hdr)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// AddressList parses the named header field as a list of addresses.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>func (h Header) AddressList(key string) ([]*Address, error) {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	hdr := h.Get(key)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	if hdr == &#34;&#34; {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		return nil, ErrHeaderNotPresent
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	return ParseAddressList(hdr)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>}
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// Address represents a single mail address.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// An address such as &#34;Barry Gibbs &lt;bg@example.com&gt;&#34; is represented</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span><span class="comment">// as Address{Name: &#34;Barry Gibbs&#34;, Address: &#34;bg@example.com&#34;}.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>type Address struct {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	Name    string <span class="comment">// Proper name; may be empty.</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	Address string <span class="comment">// user@domain</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>}
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// ParseAddress parses a single RFC 5322 address, e.g. &#34;Barry Gibbs &lt;bg@example.com&gt;&#34;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func ParseAddress(address string) (*Address, error) {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return (&amp;addrParser{s: address}).parseSingleAddress()
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// ParseAddressList parses the given string as a list of addresses.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>func ParseAddressList(list string) ([]*Address, error) {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	return (&amp;addrParser{s: list}).parseAddressList()
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// An AddressParser is an RFC 5322 address parser.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>type AddressParser struct {
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// WordDecoder optionally specifies a decoder for RFC 2047 encoded-words.</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	WordDecoder *mime.WordDecoder
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span><span class="comment">// Parse parses a single RFC 5322 address of the</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span><span class="comment">// form &#34;Gogh Fir &lt;gf@example.com&gt;&#34; or &#34;foo@example.com&#34;.</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>func (p *AddressParser) Parse(address string) (*Address, error) {
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	return (&amp;addrParser{s: address, dec: p.WordDecoder}).parseSingleAddress()
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// ParseList parses the given string as a list of comma-separated addresses</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// of the form &#34;Gogh Fir &lt;gf@example.com&gt;&#34; or &#34;foo@example.com&#34;.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="selection">func (p *AddressParser) ParseList(list string) ([]*Address, error)</span> {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return (&amp;addrParser{s: list, dec: p.WordDecoder}).parseAddressList()
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// String formats the address as a valid RFC 5322 address.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// If the address&#39;s name contains non-ASCII characters</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// the name will be rendered according to RFC 2047.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>func (a *Address) String() string {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// Format address local@domain</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	at := strings.LastIndex(a.Address, &#34;@&#34;)
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	var local, domain string
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	if at &lt; 0 {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		<span class="comment">// This is a malformed address (&#34;@&#34; is required in addr-spec);</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>		<span class="comment">// treat the whole address as local-part.</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		local = a.Address
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	} else {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>		local, domain = a.Address[:at], a.Address[at+1:]
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// Add quotes if needed</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	quoteLocal := false
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	for i, r := range local {
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		if isAtext(r, false) {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>			continue
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>		}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		if r == &#39;.&#39; {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>			<span class="comment">// Dots are okay if they are surrounded by atext.</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			<span class="comment">// We only need to check that the previous byte is</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			<span class="comment">// not a dot, and this isn&#39;t the end of the string.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>			if i &gt; 0 &amp;&amp; local[i-1] != &#39;.&#39; &amp;&amp; i &lt; len(local)-1 {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>				continue
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		}
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		quoteLocal = true
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		break
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	if quoteLocal {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		local = quoteString(local)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	s := &#34;&lt;&#34; + local + &#34;@&#34; + domain + &#34;&gt;&#34;
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if a.Name == &#34;&#34; {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		return s
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// If every character is printable ASCII, quoting is simple.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	allPrintable := true
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	for _, r := range a.Name {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>		<span class="comment">// isWSP here should actually be isFWS,</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		<span class="comment">// but we don&#39;t support folding yet.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>		if !isVchar(r) &amp;&amp; !isWSP(r) || isMultibyte(r) {
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			allPrintable = false
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>			break
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	if allPrintable {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>		return quoteString(a.Name) + &#34; &#34; + s
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	<span class="comment">// Text in an encoded-word in a display-name must not contain certain</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// characters like quotes or parentheses (see RFC 2047 section 5.3).</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// When this is the case encode the name using base64 encoding.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	if strings.ContainsAny(a.Name, &#34;\&#34;#$%&amp;&#39;(),.:;&lt;&gt;@[]^`{|}~&#34;) {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		return mime.BEncoding.Encode(&#34;utf-8&#34;, a.Name) + &#34; &#34; + s
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	return mime.QEncoding.Encode(&#34;utf-8&#34;, a.Name) + &#34; &#34; + s
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>type addrParser struct {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	s   string
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	dec *mime.WordDecoder <span class="comment">// may be nil</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>func (p *addrParser) parseAddressList() ([]*Address, error) {
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	var list []*Address
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	for {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		p.skipSpace()
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>		<span class="comment">// allow skipping empty entries (RFC5322 obs-addr-list)</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		if p.consume(&#39;,&#39;) {
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>			continue
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		}
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		addrs, err := p.parseAddress(true)
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		if err != nil {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>			return nil, err
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		list = append(list, addrs...)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		if !p.skipCFWS() {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		if p.empty() {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			break
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>		if p.peek() != &#39;,&#39; {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: expected comma&#34;)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		<span class="comment">// Skip empty entries for obs-addr-list.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>		for p.consume(&#39;,&#39;) {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>			p.skipSpace()
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>		if p.empty() {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			break
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		}
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	return list, nil
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>}
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func (p *addrParser) parseSingleAddress() (*Address, error) {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	addrs, err := p.parseAddress(true)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	if err != nil {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>		return nil, err
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	if !p.skipCFWS() {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	if !p.empty() {
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;mail: expected single address, got %q&#34;, p.s)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	if len(addrs) == 0 {
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: empty group&#34;)
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	}
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	if len(addrs) &gt; 1 {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: group with multiple addresses&#34;)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	}
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	return addrs[0], nil
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>}
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span><span class="comment">// parseAddress parses a single RFC 5322 address at the start of p.</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>func (p *addrParser) parseAddress(handleGroup bool) ([]*Address, error) {
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	debug.Printf(&#34;parseAddress: %q&#34;, p.s)
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	if p.empty() {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: no address&#34;)
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	<span class="comment">// address = mailbox / group</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	<span class="comment">// mailbox = name-addr / addr-spec</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// group = display-name &#34;:&#34; [group-list] &#34;;&#34; [CFWS]</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// addr-spec has a more restricted grammar than name-addr,</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	<span class="comment">// so try parsing it first, and fallback to name-addr.</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	<span class="comment">// TODO(dsymonds): Is this really correct?</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	spec, err := p.consumeAddrSpec()
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if err == nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		var displayName string
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>		p.skipSpace()
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>		if !p.empty() &amp;&amp; p.peek() == &#39;(&#39; {
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			displayName, err = p.consumeDisplayNameComment()
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			if err != nil {
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>				return nil, err
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>			}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		return []*Address{{
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			Name:    displayName,
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			Address: spec,
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>		}}, err
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	}
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	debug.Printf(&#34;parseAddress: not an addr-spec: %v&#34;, err)
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	debug.Printf(&#34;parseAddress: state is now %q&#34;, p.s)
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// display-name</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	var displayName string
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if p.peek() != &#39;&lt;&#39; {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		displayName, err = p.consumePhrase()
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		if err != nil {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>			return nil, err
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		}
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	debug.Printf(&#34;parseAddress: displayName=%q&#34;, displayName)
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	if handleGroup {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		if p.consume(&#39;:&#39;) {
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>			return p.consumeGroupList()
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>		}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	<span class="comment">// angle-addr = &#34;&lt;&#34; addr-spec &#34;&gt;&#34;</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	if !p.consume(&#39;&lt;&#39;) {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		atext := true
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>		for _, r := range displayName {
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>			if !isAtext(r, true) {
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>				atext = false
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>				break
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>			}
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>		if atext {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>			<span class="comment">// The input is like &#34;foo.bar&#34;; it&#39;s possible the input</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>			<span class="comment">// meant to be &#34;foo.bar@domain&#34;, or &#34;foo.bar &lt;...&gt;&#34;.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: missing &#39;@&#39; or angle-addr&#34;)
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>		}
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>		<span class="comment">// The input is like &#34;Full Name&#34;, which couldn&#39;t possibly be a</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		<span class="comment">// valid email address if followed by &#34;@domain&#34;; the input</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		<span class="comment">// likely meant to be &#34;Full Name &lt;...&gt;&#34;.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: no angle-addr&#34;)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	spec, err = p.consumeAddrSpec()
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	if err != nil {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		return nil, err
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	if !p.consume(&#39;&gt;&#39;) {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		return nil, errors.New(&#34;mail: unclosed angle-addr&#34;)
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	debug.Printf(&#34;parseAddress: spec=%q&#34;, spec)
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	return []*Address{{
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>		Name:    displayName,
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		Address: spec,
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	}}, nil
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>func (p *addrParser) consumeGroupList() ([]*Address, error) {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	var group []*Address
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	<span class="comment">// handle empty group.</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	if p.consume(&#39;;&#39;) {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>		if !p.skipCFWS() {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		return group, nil
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	for {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		p.skipSpace()
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		<span class="comment">// embedded groups not allowed.</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		addrs, err := p.parseAddress(false)
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		if err != nil {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			return nil, err
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		group = append(group, addrs...)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		if !p.skipCFWS() {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		if p.consume(&#39;;&#39;) {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>			if !p.skipCFWS() {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>				return nil, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>			break
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>		}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>		if !p.consume(&#39;,&#39;) {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			return nil, errors.New(&#34;mail: expected comma&#34;)
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	return group, nil
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// consumeAddrSpec parses a single RFC 5322 addr-spec at the start of p.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>func (p *addrParser) consumeAddrSpec() (spec string, err error) {
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	debug.Printf(&#34;consumeAddrSpec: %q&#34;, p.s)
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	orig := *p
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	defer func() {
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>		if err != nil {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>			*p = orig
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>		}
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	}()
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	<span class="comment">// local-part = dot-atom / quoted-string</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	var localPart string
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if p.empty() {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: no addr-spec&#34;)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	}
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if p.peek() == &#39;&#34;&#39; {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		<span class="comment">// quoted-string</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		debug.Printf(&#34;consumeAddrSpec: parsing quoted-string&#34;)
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		localPart, err = p.consumeQuotedString()
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		if localPart == &#34;&#34; {
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>			err = errors.New(&#34;mail: empty quoted string in addr-spec&#34;)
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		}
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	} else {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		<span class="comment">// dot-atom</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		debug.Printf(&#34;consumeAddrSpec: parsing dot-atom&#34;)
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>		localPart, err = p.consumeAtom(true, false)
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	if err != nil {
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		debug.Printf(&#34;consumeAddrSpec: failed: %v&#34;, err)
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		return &#34;&#34;, err
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	if !p.consume(&#39;@&#39;) {
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: missing @ in addr-spec&#34;)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	<span class="comment">// domain = dot-atom / domain-literal</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	var domain string
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	if p.empty() {
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: no domain in addr-spec&#34;)
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	<span class="comment">// TODO(dsymonds): Handle domain-literal</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	domain, err = p.consumeAtom(true, false)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if err != nil {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		return &#34;&#34;, err
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	return localPart + &#34;@&#34; + domain, nil
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span><span class="comment">// consumePhrase parses the RFC 5322 phrase at the start of p.</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>func (p *addrParser) consumePhrase() (phrase string, err error) {
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	debug.Printf(&#34;consumePhrase: [%s]&#34;, p.s)
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	<span class="comment">// phrase = 1*word</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	var words []string
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	var isPrevEncoded bool
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	for {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		<span class="comment">// obs-phrase allows CFWS after one word</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		if len(words) &gt; 0 {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			if !p.skipCFWS() {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>				return &#34;&#34;, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>			}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		}
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		<span class="comment">// word = atom / quoted-string</span>
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		var word string
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		p.skipSpace()
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if p.empty() {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			break
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>		}
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		isEncoded := false
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		if p.peek() == &#39;&#34;&#39; {
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			<span class="comment">// quoted-string</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			word, err = p.consumeQuotedString()
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		} else {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>			<span class="comment">// atom</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			<span class="comment">// We actually parse dot-atom here to be more permissive</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>			<span class="comment">// than what RFC 5322 specifies.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>			word, err = p.consumeAtom(true, true)
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>			if err == nil {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>				word, isEncoded, err = p.decodeRFC2047Word(word)
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>			}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>		}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>		if err != nil {
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>			break
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		}
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>		debug.Printf(&#34;consumePhrase: consumed %q&#34;, word)
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		if isPrevEncoded &amp;&amp; isEncoded {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>			words[len(words)-1] += word
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		} else {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>			words = append(words, word)
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		}
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		isPrevEncoded = isEncoded
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	<span class="comment">// Ignore any error if we got at least one word.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	if err != nil &amp;&amp; len(words) == 0 {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		debug.Printf(&#34;consumePhrase: hit err: %v&#34;, err)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		return &#34;&#34;, fmt.Errorf(&#34;mail: missing word in phrase: %v&#34;, err)
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	phrase = strings.Join(words, &#34; &#34;)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	return phrase, nil
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>}
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span><span class="comment">// consumeQuotedString parses the quoted string at the start of p.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>func (p *addrParser) consumeQuotedString() (qs string, err error) {
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	<span class="comment">// Assume first byte is &#39;&#34;&#39;.</span>
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	i := 1
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	qsb := make([]rune, 0, 10)
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	escaped := false
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>Loop:
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	for {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		r, size := utf8.DecodeRuneInString(p.s[i:])
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		switch {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		case size == 0:
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>			return &#34;&#34;, errors.New(&#34;mail: unclosed quoted-string&#34;)
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		case size == 1 &amp;&amp; r == utf8.RuneError:
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>			return &#34;&#34;, fmt.Errorf(&#34;mail: invalid utf-8 in quoted-string: %q&#34;, p.s)
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		case escaped:
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			<span class="comment">//  quoted-pair = (&#34;\&#34; (VCHAR / WSP))</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			if !isVchar(r) &amp;&amp; !isWSP(r) {
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>				return &#34;&#34;, fmt.Errorf(&#34;mail: bad character in quoted-string: %q&#34;, r)
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>			}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>			qsb = append(qsb, r)
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			escaped = false
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		case isQtext(r) || isWSP(r):
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>			<span class="comment">// qtext (printable US-ASCII excluding &#34; and \), or</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>			<span class="comment">// FWS (almost; we&#39;re ignoring CRLF)</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>			qsb = append(qsb, r)
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		case r == &#39;&#34;&#39;:
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>			break Loop
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		case r == &#39;\\&#39;:
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>			escaped = true
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		default:
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			return &#34;&#34;, fmt.Errorf(&#34;mail: bad character in quoted-string: %q&#34;, r)
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		i += size
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	p.s = p.s[i+1:]
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	return string(qsb), nil
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span><span class="comment">// consumeAtom parses an RFC 5322 atom at the start of p.</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">// If dot is true, consumeAtom parses an RFC 5322 dot-atom instead.</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span><span class="comment">// If permissive is true, consumeAtom will not fail on:</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="comment">// - leading/trailing/double dots in the atom (see golang.org/issue/4938)</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>func (p *addrParser) consumeAtom(dot bool, permissive bool) (atom string, err error) {
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	i := 0
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>Loop:
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	for {
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		r, size := utf8.DecodeRuneInString(p.s[i:])
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		switch {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		case size == 1 &amp;&amp; r == utf8.RuneError:
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			return &#34;&#34;, fmt.Errorf(&#34;mail: invalid utf-8 in address: %q&#34;, p.s)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>		case size == 0 || !isAtext(r, dot):
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>			break Loop
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		default:
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>			i += size
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	if i == 0 {
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: invalid string&#34;)
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	}
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	atom, p.s = p.s[:i], p.s[i:]
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	if !permissive {
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		if strings.HasPrefix(atom, &#34;.&#34;) {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>			return &#34;&#34;, errors.New(&#34;mail: leading dot in atom&#34;)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		if strings.Contains(atom, &#34;..&#34;) {
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>			return &#34;&#34;, errors.New(&#34;mail: double dot in atom&#34;)
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		}
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		if strings.HasSuffix(atom, &#34;.&#34;) {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>			return &#34;&#34;, errors.New(&#34;mail: trailing dot in atom&#34;)
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	return atom, nil
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>func (p *addrParser) consumeDisplayNameComment() (string, error) {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	if !p.consume(&#39;(&#39;) {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: comment does not start with (&#34;)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>	}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	comment, ok := p.consumeComment()
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	if !ok {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;mail: misformatted parenthetical comment&#34;)
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>	}
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	<span class="comment">// TODO(stapelberg): parse quoted-string within comment</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>	words := strings.FieldsFunc(comment, func(r rune) bool { return r == &#39; &#39; || r == &#39;\t&#39; })
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	for idx, word := range words {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>		decoded, isEncoded, err := p.decodeRFC2047Word(word)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		if err != nil {
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>			return &#34;&#34;, err
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		}
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		if isEncoded {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>			words[idx] = decoded
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	return strings.Join(words, &#34; &#34;), nil
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>func (p *addrParser) consume(c byte) bool {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	if p.empty() || p.peek() != c {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		return false
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	p.s = p.s[1:]
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	return true
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>}
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">// skipSpace skips the leading space and tab characters.</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>func (p *addrParser) skipSpace() {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	p.s = strings.TrimLeft(p.s, &#34; \t&#34;)
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>func (p *addrParser) peek() byte {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>	return p.s[0]
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>}
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>func (p *addrParser) empty() bool {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	return p.len() == 0
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>func (p *addrParser) len() int {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>	return len(p.s)
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">// skipCFWS skips CFWS as defined in RFC5322.</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>func (p *addrParser) skipCFWS() bool {
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	p.skipSpace()
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	for {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		if !p.consume(&#39;(&#39;) {
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>			break
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>		}
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		if _, ok := p.consumeComment(); !ok {
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>			return false
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		}
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		p.skipSpace()
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	return true
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>func (p *addrParser) consumeComment() (string, bool) {
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	<span class="comment">// &#39;(&#39; already consumed.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	depth := 1
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	var comment string
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	for {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		if p.empty() || depth == 0 {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>			break
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		if p.peek() == &#39;\\&#39; &amp;&amp; p.len() &gt; 1 {
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>			p.s = p.s[1:]
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>		} else if p.peek() == &#39;(&#39; {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>			depth++
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		} else if p.peek() == &#39;)&#39; {
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>			depth--
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>		}
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		if depth &gt; 0 {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>			comment += p.s[:1]
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		}
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		p.s = p.s[1:]
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	return comment, depth == 0
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>}
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>func (p *addrParser) decodeRFC2047Word(s string) (word string, isEncoded bool, err error) {
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>	dec := p.dec
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>	if dec == nil {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		dec = &amp;rfc2047Decoder
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	<span class="comment">// Substitute our own CharsetReader function so that we can tell</span>
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	<span class="comment">// whether an error from the Decode method was due to the</span>
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	<span class="comment">// CharsetReader (meaning the charset is invalid).</span>
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	<span class="comment">// We used to look for the charsetError type in the error result,</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>	<span class="comment">// but that behaves badly with CharsetReaders other than the</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	<span class="comment">// one in rfc2047Decoder.</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>	adec := *dec
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>	charsetReaderError := false
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>	adec.CharsetReader = func(charset string, input io.Reader) (io.Reader, error) {
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		if dec.CharsetReader == nil {
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>			charsetReaderError = true
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>			return nil, charsetError(charset)
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>		}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		r, err := dec.CharsetReader(charset, input)
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		if err != nil {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>			charsetReaderError = true
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		return r, err
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>	}
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	word, err = adec.Decode(s)
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	if err == nil {
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		return word, true, nil
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>	}
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	<span class="comment">// If the error came from the character set reader</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	<span class="comment">// (meaning the character set itself is invalid</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	<span class="comment">// but the decoding worked fine until then),</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>	<span class="comment">// return the original text and the error,</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	<span class="comment">// with isEncoded=true.</span>
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	if charsetReaderError {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		return s, true, err
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	<span class="comment">// Ignore invalid RFC 2047 encoded-word errors.</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	return s, false, nil
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>var rfc2047Decoder = mime.WordDecoder{
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>	CharsetReader: func(charset string, input io.Reader) (io.Reader, error) {
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		return nil, charsetError(charset)
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	},
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>}
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>type charsetError string
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>func (e charsetError) Error() string {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	return fmt.Sprintf(&#34;charset not supported: %q&#34;, string(e))
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>}
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span><span class="comment">// isAtext reports whether r is an RFC 5322 atext character.</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span><span class="comment">// If dot is true, period is included.</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>func isAtext(r rune, dot bool) bool {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	switch r {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	case &#39;.&#39;:
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>		return dot
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	<span class="comment">// RFC 5322 3.2.3. specials</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	case &#39;(&#39;, &#39;)&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;[&#39;, &#39;]&#39;, &#39;:&#39;, &#39;;&#39;, &#39;@&#39;, &#39;\\&#39;, &#39;,&#39;, &#39;&#34;&#39;: <span class="comment">// RFC 5322 3.2.3. specials</span>
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>		return false
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	return isVchar(r)
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// isQtext reports whether r is an RFC 5322 qtext character.</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span>func isQtext(r rune) bool {
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>	<span class="comment">// Printable US-ASCII, excluding backslash or quote.</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	if r == &#39;\\&#39; || r == &#39;&#34;&#39; {
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>		return false
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>	}
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	return isVchar(r)
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>}
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// quoteString renders a string as an RFC 5322 quoted-string.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>func quoteString(s string) string {
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	var b strings.Builder
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	b.WriteByte(&#39;&#34;&#39;)
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	for _, r := range s {
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>		if isQtext(r) || isWSP(r) {
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>			b.WriteRune(r)
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>		} else if isVchar(r) {
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>			b.WriteByte(&#39;\\&#39;)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>			b.WriteRune(r)
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>		}
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	}
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	b.WriteByte(&#39;&#34;&#39;)
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>	return b.String()
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>}
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span><span class="comment">// isVchar reports whether r is an RFC 5322 VCHAR character.</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>func isVchar(r rune) bool {
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	<span class="comment">// Visible (printing) characters.</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>	return &#39;!&#39; &lt;= r &amp;&amp; r &lt;= &#39;~&#39; || isMultibyte(r)
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span><span class="comment">// isMultibyte reports whether r is a multi-byte UTF-8 character</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span><span class="comment">// as supported by RFC 6532.</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>func isMultibyte(r rune) bool {
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>	return r &gt;= utf8.RuneSelf
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>}
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">// isWSP reports whether r is a WSP (white space).</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span><span class="comment">// WSP is a space or horizontal tab (RFC 5234 Appendix B).</span>
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>func isWSP(r rune) bool {
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	return r == &#39; &#39; || r == &#39;\t&#39;
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>
</pre><p><a href="message.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
