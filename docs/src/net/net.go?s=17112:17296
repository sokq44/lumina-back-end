<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/net.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./net.go?s=17112:17296#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<span class="text-muted">net.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net">net</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package net provides a portable interface for network I/O, including
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>TCP/IP, UDP, domain name resolution, and Unix domain sockets.
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>Although the package provides access to low-level networking
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>primitives, most clients will need only the basic interface provided
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>by the [Dial], [Listen], and Accept functions and the associated
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>[Conn] and [Listener] interfaces. The crypto/tls package uses
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>the same interfaces and similar Dial and Listen functions.
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>The Dial function connects to a server:
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	conn, err := net.Dial(&#34;tcp&#34;, &#34;golang.org:80&#34;)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	if err != nil {
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>		// handle error
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	}
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	fmt.Fprintf(conn, &#34;GET / HTTP/1.0\r\n\r\n&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	status, err := bufio.NewReader(conn).ReadString(&#39;\n&#39;)
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	// ...
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>The Listen function creates servers:
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	ln, err := net.Listen(&#34;tcp&#34;, &#34;:8080&#34;)
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	if err != nil {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>		// handle error
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	for {
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>		conn, err := ln.Accept()
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>		if err != nil {
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>			// handle error
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>		}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>		go handleConnection(conn)
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span># Name Resolution
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>The method for resolving domain names, whether indirectly with functions like Dial
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>or directly with functions like [LookupHost] and [LookupAddr], varies by operating system.
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>On Unix systems, the resolver has two options for resolving names.
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>It can use a pure Go resolver that sends DNS requests directly to the servers
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>listed in /etc/resolv.conf, or it can use a cgo-based resolver that calls C
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>library routines such as getaddrinfo and getnameinfo.
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>By default the pure Go resolver is used, because a blocked DNS request consumes
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>only a goroutine, while a blocked C call consumes an operating system thread.
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>When cgo is available, the cgo-based resolver is used instead under a variety of
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>conditions: on systems that do not let programs make direct DNS requests (OS X),
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>when the LOCALDOMAIN environment variable is present (even if empty),
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>when the RES_OPTIONS or HOSTALIASES environment variable is non-empty,
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>when the ASR_CONFIG environment variable is non-empty (OpenBSD only),
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>when /etc/resolv.conf or /etc/nsswitch.conf specify the use of features that the
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>Go resolver does not implement, and when the name being looked up ends in .local
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>or is an mDNS name.
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>The resolver decision can be overridden by setting the netdns value of the
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>GODEBUG environment variable (see package runtime) to go or cgo, as in:
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	export GODEBUG=netdns=go    # force pure Go resolver
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	export GODEBUG=netdns=cgo   # force native resolver (cgo, win32)
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>The decision can also be forced while building the Go source tree
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>by setting the netgo or netcgo build tag.
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>A numeric netdns setting, as in GODEBUG=netdns=1, causes the resolver
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>to print debugging information about its decisions.
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>To force a particular resolver while also printing debugging information,
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>join the two settings by a plus sign, as in GODEBUG=netdns=go+1.
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>On macOS, if Go code that uses the net package is built with
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>-buildmode=c-archive, linking the resulting archive into a C program
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>requires passing -lresolv when linking the C code.
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>On Plan 9, the resolver always accesses /net/cs and /net/dns.
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>On Windows, in Go 1.18.x and earlier, the resolver always used C
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>library functions, such as GetAddrInfo and DnsQuery.
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>*/</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>package net
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>import (
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	&#34;internal/poll&#34;
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	&#34;syscall&#34;
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>)
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// Addr represents a network end point address.</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// The two methods [Addr.Network] and [Addr.String] conventionally return strings</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// that can be passed as the arguments to [Dial], but the exact form</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// and meaning of the strings is up to the implementation.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>type Addr interface {
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	Network() string <span class="comment">// name of the network (for example, &#34;tcp&#34;, &#34;udp&#34;)</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	String() string  <span class="comment">// string form of address (for example, &#34;192.0.2.1:25&#34;, &#34;[2001:db8::1]:80&#34;)</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// Conn is a generic stream-oriented network connection.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// Multiple goroutines may invoke methods on a Conn simultaneously.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>type Conn interface {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	<span class="comment">// Read reads data from the connection.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// Read can be made to time out and return an error after a fixed</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// time limit; see SetDeadline and SetReadDeadline.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	Read(b []byte) (n int, err error)
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">// Write writes data to the connection.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">// Write can be made to time out and return an error after a fixed</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// time limit; see SetDeadline and SetWriteDeadline.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	Write(b []byte) (n int, err error)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// Close closes the connection.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	<span class="comment">// Any blocked Read or Write operations will be unblocked and return errors.</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	Close() error
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// LocalAddr returns the local network address, if known.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	LocalAddr() Addr
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">// RemoteAddr returns the remote network address, if known.</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	RemoteAddr() Addr
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">// SetDeadline sets the read and write deadlines associated</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">// with the connection. It is equivalent to calling both</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">// SetReadDeadline and SetWriteDeadline.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	<span class="comment">// A deadline is an absolute time after which I/O operations</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// fail instead of blocking. The deadline applies to all future</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// and pending I/O, not just the immediately following call to</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// Read or Write. After a deadline has been exceeded, the</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	<span class="comment">// connection can be refreshed by setting a deadline in the future.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// If the deadline is exceeded a call to Read or Write or to other</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// I/O methods will return an error that wraps os.ErrDeadlineExceeded.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	<span class="comment">// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	<span class="comment">// The error&#39;s Timeout method will return true, but note that there</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// are other possible errors for which the Timeout method will</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// return true even if the deadline has not been exceeded.</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">// An idle timeout can be implemented by repeatedly extending</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// the deadline after successful Read or Write calls.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means I/O operations will not time out.</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	SetDeadline(t time.Time) error
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// SetReadDeadline sets the deadline for future Read calls</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// and any currently-blocked Read call.</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means Read will not time out.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	SetReadDeadline(t time.Time) error
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// SetWriteDeadline sets the deadline for future Write calls</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// and any currently-blocked Write call.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	<span class="comment">// Even if write times out, it may return n &gt; 0, indicating that</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// some of the data was successfully written.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means Write will not time out.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	SetWriteDeadline(t time.Time) error
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>type conn struct {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	fd *netFD
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>func (c *conn) ok() bool { return c != nil &amp;&amp; c.fd != nil }
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// Implementation of the Conn interface.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// Read implements the Conn Read method.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>func (c *conn) Read(b []byte) (int, error) {
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		return 0, syscall.EINVAL
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	n, err := c.fd.Read(b)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	if err != nil &amp;&amp; err != io.EOF {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>		err = &amp;OpError{Op: &#34;read&#34;, Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	return n, err
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Write implements the Conn Write method.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>func (c *conn) Write(b []byte) (int, error) {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>		return 0, syscall.EINVAL
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	n, err := c.fd.Write(b)
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	if err != nil {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		err = &amp;OpError{Op: &#34;write&#34;, Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	return n, err
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span><span class="comment">// Close closes the connection.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>func (c *conn) Close() error {
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	err := c.fd.Close()
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	if err != nil {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		err = &amp;OpError{Op: &#34;close&#34;, Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return err
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span><span class="comment">// LocalAddr returns the local network address.</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span><span class="comment">// The Addr returned is shared by all invocations of LocalAddr, so</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span><span class="comment">// do not modify it.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>func (c *conn) LocalAddr() Addr {
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		return nil
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	}
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	return c.fd.laddr
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// RemoteAddr returns the remote network address.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// The Addr returned is shared by all invocations of RemoteAddr, so</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// do not modify it.</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>func (c *conn) RemoteAddr() Addr {
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>		return nil
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	return c.fd.raddr
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>}
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span><span class="comment">// SetDeadline implements the Conn SetDeadline method.</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func (c *conn) SetDeadline(t time.Time) error {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	}
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	if err := c.fd.SetDeadline(t); err != nil {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>		return &amp;OpError{Op: &#34;set&#34;, Net: c.fd.net, Source: nil, Addr: c.fd.laddr, Err: err}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	return nil
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>}
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// SetReadDeadline implements the Conn SetReadDeadline method.</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>func (c *conn) SetReadDeadline(t time.Time) error {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if err := c.fd.SetReadDeadline(t); err != nil {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		return &amp;OpError{Op: &#34;set&#34;, Net: c.fd.net, Source: nil, Addr: c.fd.laddr, Err: err}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	return nil
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span><span class="comment">// SetWriteDeadline implements the Conn SetWriteDeadline method.</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>func (c *conn) SetWriteDeadline(t time.Time) error {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if err := c.fd.SetWriteDeadline(t); err != nil {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return &amp;OpError{Op: &#34;set&#34;, Net: c.fd.net, Source: nil, Addr: c.fd.laddr, Err: err}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	return nil
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>}
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// SetReadBuffer sets the size of the operating system&#39;s</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// receive buffer associated with the connection.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>func (c *conn) SetReadBuffer(bytes int) error {
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	}
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if err := setReadBuffer(c.fd, bytes); err != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return &amp;OpError{Op: &#34;set&#34;, Net: c.fd.net, Source: nil, Addr: c.fd.laddr, Err: err}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	return nil
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// SetWriteBuffer sets the size of the operating system&#39;s</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// transmit buffer associated with the connection.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func (c *conn) SetWriteBuffer(bytes int) error {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	if !c.ok() {
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		return syscall.EINVAL
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	}
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	if err := setWriteBuffer(c.fd, bytes); err != nil {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		return &amp;OpError{Op: &#34;set&#34;, Net: c.fd.net, Source: nil, Addr: c.fd.laddr, Err: err}
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	return nil
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// File returns a copy of the underlying [os.File].</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// It is the caller&#39;s responsibility to close f when finished.</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// Closing c does not affect f, and closing f does not affect c.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// The returned os.File&#39;s file descriptor is different from the connection&#39;s.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// Attempting to change properties of the original using this duplicate</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// may or may not have the desired effect.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func (c *conn) File() (f *os.File, err error) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	f, err = c.fd.dup()
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	if err != nil {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		err = &amp;OpError{Op: &#34;file&#34;, Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	return
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>}
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// PacketConn is a generic packet-oriented network connection.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// Multiple goroutines may invoke methods on a PacketConn simultaneously.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>type PacketConn interface {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// ReadFrom reads a packet from the connection,</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// copying the payload into p. It returns the number of</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	<span class="comment">// bytes copied into p and the return address that</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>	<span class="comment">// was on the packet.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">// It returns the number of bytes read (0 &lt;= n &lt;= len(p))</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	<span class="comment">// and any error encountered. Callers should always process</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	<span class="comment">// the n &gt; 0 bytes returned before considering the error err.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// ReadFrom can be made to time out and return an error after a</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// fixed time limit; see SetDeadline and SetReadDeadline.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	ReadFrom(p []byte) (n int, addr Addr, err error)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// WriteTo writes a packet with payload p to addr.</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// WriteTo can be made to time out and return an Error after a</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// fixed time limit; see SetDeadline and SetWriteDeadline.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// On packet-oriented connections, write timeouts are rare.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	WriteTo(p []byte, addr Addr) (n int, err error)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// Close closes the connection.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">// Any blocked ReadFrom or WriteTo operations will be unblocked and return errors.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	Close() error
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// LocalAddr returns the local network address, if known.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	LocalAddr() Addr
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// SetDeadline sets the read and write deadlines associated</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">// with the connection. It is equivalent to calling both</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// SetReadDeadline and SetWriteDeadline.</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// A deadline is an absolute time after which I/O operations</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	<span class="comment">// fail instead of blocking. The deadline applies to all future</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	<span class="comment">// and pending I/O, not just the immediately following call to</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	<span class="comment">// Read or Write. After a deadline has been exceeded, the</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	<span class="comment">// connection can be refreshed by setting a deadline in the future.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// If the deadline is exceeded a call to Read or Write or to other</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// I/O methods will return an error that wraps os.ErrDeadlineExceeded.</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// This can be tested using errors.Is(err, os.ErrDeadlineExceeded).</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// The error&#39;s Timeout method will return true, but note that there</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">// are other possible errors for which the Timeout method will</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// return true even if the deadline has not been exceeded.</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// An idle timeout can be implemented by repeatedly extending</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	<span class="comment">// the deadline after successful ReadFrom or WriteTo calls.</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means I/O operations will not time out.</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	SetDeadline(t time.Time) error
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	<span class="comment">// SetReadDeadline sets the deadline for future ReadFrom calls</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	<span class="comment">// and any currently-blocked ReadFrom call.</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means ReadFrom will not time out.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	SetReadDeadline(t time.Time) error
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	<span class="comment">// SetWriteDeadline sets the deadline for future WriteTo calls</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	<span class="comment">// and any currently-blocked WriteTo call.</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	<span class="comment">// Even if write times out, it may return n &gt; 0, indicating that</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	<span class="comment">// some of the data was successfully written.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	<span class="comment">// A zero value for t means WriteTo will not time out.</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	SetWriteDeadline(t time.Time) error
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>}
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>var listenerBacklogCache struct {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	sync.Once
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	val int
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>}
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// listenerBacklog is a caching wrapper around maxListenerBacklog.</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func listenerBacklog() int {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	listenerBacklogCache.Do(func() { listenerBacklogCache.val = maxListenerBacklog() })
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	return listenerBacklogCache.val
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>
<span id="L377" class="ln">   377&nbsp;&nbsp;</span><span class="comment">// A Listener is a generic network listener for stream-oriented protocols.</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// Multiple goroutines may invoke methods on a Listener simultaneously.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>type Listener interface {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	<span class="comment">// Accept waits for and returns the next connection to the listener.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	Accept() (Conn, error)
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	<span class="comment">// Close closes the listener.</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	<span class="comment">// Any blocked Accept operations will be unblocked and return errors.</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	Close() error
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	<span class="comment">// Addr returns the listener&#39;s network address.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	Addr() Addr
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span><span class="comment">// An Error represents a network error.</span>
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>type Error interface {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	error
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	Timeout() bool <span class="comment">// Is the error a timeout?</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	<span class="comment">// Deprecated: Temporary errors are not well-defined.</span>
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	<span class="comment">// Most &#34;temporary&#34; errors are timeouts, and the few exceptions are surprising.</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	<span class="comment">// Do not use this method.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	Temporary() bool
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// Various errors contained in OpError.</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>var (
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	<span class="comment">// For connection setup operations.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	errNoSuitableAddress = errors.New(&#34;no suitable address found&#34;)
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>	<span class="comment">// For connection setup and write operations.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	errMissingAddress = errors.New(&#34;missing address&#34;)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	<span class="comment">// For both read and write operations.</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	errCanceled         = canceledError{}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	ErrWriteToConnected = errors.New(&#34;use of WriteTo with pre-connected connection&#34;)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>)
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// canceledError lets us return the same error string we have always</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// returned, while still being Is context.Canceled.</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>type canceledError struct{}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>func (canceledError) Error() string { return &#34;operation was canceled&#34; }
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>func (canceledError) Is(err error) bool { return err == context.Canceled }
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// mapErr maps from the context errors to the historical internal net</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">// error values.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>func mapErr(err error) error {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	switch err {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	case context.Canceled:
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		return errCanceled
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	case context.DeadlineExceeded:
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return errTimeout
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	default:
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		return err
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>}
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span><span class="comment">// OpError is the error type usually returned by functions in the net</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span><span class="comment">// package. It describes the operation, network type, and address of</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// an error.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>type OpError struct {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	<span class="comment">// Op is the operation which caused the error, such as</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	<span class="comment">// &#34;read&#34; or &#34;write&#34;.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	Op string
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>	<span class="comment">// Net is the network type on which this error occurred,</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	<span class="comment">// such as &#34;tcp&#34; or &#34;udp6&#34;.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	Net string
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	<span class="comment">// For operations involving a remote network connection, like</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>	<span class="comment">// Dial, Read, or Write, Source is the corresponding local</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	<span class="comment">// network address.</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	Source Addr
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	<span class="comment">// Addr is the network address for which this error occurred.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	<span class="comment">// For local operations, like Listen or SetDeadline, Addr is</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	<span class="comment">// the address of the local endpoint being manipulated.</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	<span class="comment">// For operations involving a remote network connection, like</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	<span class="comment">// Dial, Read, or Write, Addr is the remote address of that</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	<span class="comment">// connection.</span>
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	Addr Addr
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	<span class="comment">// Err is the error that occurred during the operation.</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	<span class="comment">// The Error method panics if the error is nil.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	Err error
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>func (e *OpError) Unwrap() error { return e.Err }
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>func (e *OpError) Error() string {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	if e == nil {
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	}
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	s := e.Op
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	if e.Net != &#34;&#34; {
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>		s += &#34; &#34; + e.Net
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if e.Source != nil {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		s += &#34; &#34; + e.Source.String()
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	if e.Addr != nil {
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>		if e.Source != nil {
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>			s += &#34;-&gt;&#34;
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>		} else {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>			s += &#34; &#34;
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>		s += e.Addr.String()
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	}
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>	s += &#34;: &#34; + e.Err.Error()
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	return s
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>}
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>var (
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	<span class="comment">// aLongTimeAgo is a non-zero time, far in the past, used for</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	<span class="comment">// immediate cancellation of dials.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	aLongTimeAgo = time.Unix(1, 0)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	<span class="comment">// noDeadline and noCancel are just zero values for</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>	<span class="comment">// readability with functions taking too many parameters.</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	noDeadline = time.Time{}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	noCancel   = (chan struct{})(nil)
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>type timeout interface {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>	Timeout() bool
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>}
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>func (e *OpError) Timeout() bool {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	if ne, ok := e.Err.(*os.SyscallError); ok {
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		t, ok := ne.Err.(timeout)
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		return ok &amp;&amp; t.Timeout()
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	t, ok := e.Err.(timeout)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	return ok &amp;&amp; t.Timeout()
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>type temporary interface {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	Temporary() bool
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>func (e *OpError) Temporary() bool {
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// Treat ECONNRESET and ECONNABORTED as temporary errors when</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// they come from calling accept. See issue 6163.</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	if e.Op == &#34;accept&#34; &amp;&amp; isConnError(e.Err) {
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>		return true
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	}
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	if ne, ok := e.Err.(*os.SyscallError); ok {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		t, ok := ne.Err.(temporary)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		return ok &amp;&amp; t.Temporary()
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	t, ok := e.Err.(temporary)
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	return ok &amp;&amp; t.Temporary()
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span><span class="comment">// A ParseError is the error type of literal network address parsers.</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span><span class="selection">type ParseError struct {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Type is the type of string that was expected, such as</span><span class="selection">
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	</span><span class="selection-comment">// &#34;IP address&#34;, &#34;CIDR address&#34;.</span><span class="selection">
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	Type string
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	</span><span class="selection-comment">// Text is the malformed text string.</span><span class="selection">
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	Text string
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>}</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>func (e *ParseError) Error() string { return &#34;invalid &#34; + e.Type + &#34;: &#34; + e.Text }
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>func (e *ParseError) Timeout() bool   { return false }
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>func (e *ParseError) Temporary() bool { return false }
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>type AddrError struct {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	Err  string
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	Addr string
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>}
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>func (e *AddrError) Error() string {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	if e == nil {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	}
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	s := e.Err
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	if e.Addr != &#34;&#34; {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		s = &#34;address &#34; + e.Addr + &#34;: &#34; + s
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	return s
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>func (e *AddrError) Timeout() bool   { return false }
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>func (e *AddrError) Temporary() bool { return false }
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>type UnknownNetworkError string
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func (e UnknownNetworkError) Error() string   { return &#34;unknown network &#34; + string(e) }
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>func (e UnknownNetworkError) Timeout() bool   { return false }
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func (e UnknownNetworkError) Temporary() bool { return false }
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>type InvalidAddrError string
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>func (e InvalidAddrError) Error() string   { return string(e) }
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>func (e InvalidAddrError) Timeout() bool   { return false }
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>func (e InvalidAddrError) Temporary() bool { return false }
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>
<span id="L581" class="ln">   581&nbsp;&nbsp;</span><span class="comment">// errTimeout exists to return the historical &#34;i/o timeout&#34; string</span>
<span id="L582" class="ln">   582&nbsp;&nbsp;</span><span class="comment">// for context.DeadlineExceeded. See mapErr.</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span><span class="comment">// It is also used when Dialer.Deadline is exceeded.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// error.Is(errTimeout, context.DeadlineExceeded) returns true.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span><span class="comment">// TODO(iant): We could consider changing this to os.ErrDeadlineExceeded</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// in the future, if we make</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span><span class="comment">//	errors.Is(os.ErrDeadlineExceeded, context.DeadlineExceeded)</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">// return true.</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>var errTimeout error = &amp;timeoutError{}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>type timeoutError struct{}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>func (e *timeoutError) Error() string   { return &#34;i/o timeout&#34; }
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>func (e *timeoutError) Timeout() bool   { return true }
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>func (e *timeoutError) Temporary() bool { return true }
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>func (e *timeoutError) Is(err error) bool {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	return err == context.DeadlineExceeded
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">// DNSConfigError represents an error reading the machine&#39;s DNS configuration.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span><span class="comment">// (No longer used; kept for compatibility.)</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>type DNSConfigError struct {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	Err error
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>func (e *DNSConfigError) Unwrap() error   { return e.Err }
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>func (e *DNSConfigError) Error() string   { return &#34;error reading DNS config: &#34; + e.Err.Error() }
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>func (e *DNSConfigError) Timeout() bool   { return false }
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>func (e *DNSConfigError) Temporary() bool { return false }
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// Various errors contained in DNSError.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>var (
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	errNoSuchHost = errors.New(&#34;no such host&#34;)
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span><span class="comment">// DNSError represents a DNS lookup error.</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>type DNSError struct {
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	Err         string <span class="comment">// description of the error</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	Name        string <span class="comment">// name looked for</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	Server      string <span class="comment">// server used</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	IsTimeout   bool   <span class="comment">// if true, timed out; not all timeouts set this</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	IsTemporary bool   <span class="comment">// if true, error is temporary; not all errors set this</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	<span class="comment">// IsNotFound is set to true when the requested name does not</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	<span class="comment">// contain any records of the requested type (data not found),</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	<span class="comment">// or the name itself was not found (NXDOMAIN).</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	IsNotFound bool
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>func (e *DNSError) Error() string {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	if e == nil {
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		return &#34;&lt;nil&gt;&#34;
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	}
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	s := &#34;lookup &#34; + e.Name
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	if e.Server != &#34;&#34; {
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		s += &#34; on &#34; + e.Server
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>	}
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	s += &#34;: &#34; + e.Err
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	return s
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>}
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span><span class="comment">// Timeout reports whether the DNS lookup is known to have timed out.</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span><span class="comment">// This is not always known; a DNS lookup may fail due to a timeout</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span><span class="comment">// and return a [DNSError] for which Timeout returns false.</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>func (e *DNSError) Timeout() bool { return e.IsTimeout }
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// Temporary reports whether the DNS error is known to be temporary.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// This is not always known; a DNS lookup may fail due to a temporary</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// error and return a [DNSError] for which Temporary returns false.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>func (e *DNSError) Temporary() bool { return e.IsTimeout || e.IsTemporary }
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">// errClosed exists just so that the docs for ErrClosed don&#39;t mention</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// the internal package poll.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>var errClosed = poll.ErrNetClosing
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span><span class="comment">// ErrClosed is the error returned by an I/O call on a network</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span><span class="comment">// connection that has already been closed, or that is closed by</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span><span class="comment">// another goroutine before the I/O is completed. This may be wrapped</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">// in another error, and should normally be tested using</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// errors.Is(err, net.ErrClosed).</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>var ErrClosed error = errClosed
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span><span class="comment">// noReadFrom can be embedded alongside another type to</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span><span class="comment">// hide the ReadFrom method of that other type.</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>type noReadFrom struct{}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span><span class="comment">// ReadFrom hides another ReadFrom method.</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span><span class="comment">// It should never be called.</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>func (noReadFrom) ReadFrom(io.Reader) (int64, error) {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>	panic(&#34;can&#39;t happen&#34;)
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span><span class="comment">// tcpConnWithoutReadFrom implements all the methods of *TCPConn other</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span><span class="comment">// than ReadFrom. This is used to permit ReadFrom to call io.Copy</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span><span class="comment">// without leading to a recursive call to ReadFrom.</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>type tcpConnWithoutReadFrom struct {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	noReadFrom
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	*TCPConn
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span><span class="comment">// Fallback implementation of io.ReaderFrom&#39;s ReadFrom, when sendfile isn&#39;t</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// applicable.</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>func genericReadFrom(c *TCPConn, r io.Reader) (n int64, err error) {
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	<span class="comment">// Use wrapper to hide existing r.ReadFrom from io.Copy.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	return io.Copy(tcpConnWithoutReadFrom{TCPConn: c}, r)
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>}
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// noWriteTo can be embedded alongside another type to</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">// hide the WriteTo method of that other type.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>type noWriteTo struct{}
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>
<span id="L696" class="ln">   696&nbsp;&nbsp;</span><span class="comment">// WriteTo hides another WriteTo method.</span>
<span id="L697" class="ln">   697&nbsp;&nbsp;</span><span class="comment">// It should never be called.</span>
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>func (noWriteTo) WriteTo(io.Writer) (int64, error) {
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	panic(&#34;can&#39;t happen&#34;)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>}
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// tcpConnWithoutWriteTo implements all the methods of *TCPConn other</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span><span class="comment">// than WriteTo. This is used to permit WriteTo to call io.Copy</span>
<span id="L704" class="ln">   704&nbsp;&nbsp;</span><span class="comment">// without leading to a recursive call to WriteTo.</span>
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>type tcpConnWithoutWriteTo struct {
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	noWriteTo
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	*TCPConn
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span><span class="comment">// Fallback implementation of io.WriterTo&#39;s WriteTo, when zero-copy isn&#39;t applicable.</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>func genericWriteTo(c *TCPConn, w io.Writer) (n int64, err error) {
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	<span class="comment">// Use wrapper to hide existing w.WriteTo from io.Copy.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>	return io.Copy(w, tcpConnWithoutWriteTo{TCPConn: c})
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>}
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// Limit the number of concurrent cgo-using goroutines, because</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">// each will block an entire operating system thread. The usual culprit</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">// is resolving many DNS names in separate goroutines but the DNS</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span><span class="comment">// server is not responding. Then the many lookups each use a different</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span><span class="comment">// thread, and the system or the program runs out of threads.</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>var threadLimit chan struct{}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>var threadOnce sync.Once
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>func acquireThread() {
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	threadOnce.Do(func() {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		threadLimit = make(chan struct{}, concurrentThreadsLimit())
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>	})
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	threadLimit &lt;- struct{}{}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>}
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>func releaseThread() {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	&lt;-threadLimit
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// buffersWriter is the interface implemented by Conns that support a</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">// &#34;writev&#34;-like batch write optimization.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span><span class="comment">// writeBuffers should fully consume and write all chunks from the</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// provided Buffers, else it should report a non-nil error.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>type buffersWriter interface {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	writeBuffers(*Buffers) (int64, error)
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span><span class="comment">// Buffers contains zero or more runs of bytes to write.</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span><span class="comment">// On certain machines, for certain types of connections, this is</span>
<span id="L748" class="ln">   748&nbsp;&nbsp;</span><span class="comment">// optimized into an OS-specific batch write operation (such as</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// &#34;writev&#34;).</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>type Buffers [][]byte
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>var (
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	_ io.WriterTo = (*Buffers)(nil)
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	_ io.Reader   = (*Buffers)(nil)
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>)
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">// WriteTo writes contents of the buffers to w.</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// WriteTo implements [io.WriterTo] for [Buffers].</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span><span class="comment">// WriteTo modifies the slice v as well as v[i] for 0 &lt;= i &lt; len(v),</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// but does not modify v[i][j] for any i, j.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>func (v *Buffers) WriteTo(w io.Writer) (n int64, err error) {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	if wv, ok := w.(buffersWriter); ok {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>		return wv.writeBuffers(v)
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	}
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	for _, b := range *v {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		nb, err := w.Write(b)
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		n += int64(nb)
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		if err != nil {
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>			v.consume(n)
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>			return n, err
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>		}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>	}
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>	v.consume(n)
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	return n, nil
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>}
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span><span class="comment">// Read from the buffers.</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span><span class="comment">// Read implements [io.Reader] for [Buffers].</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span><span class="comment">// Read modifies the slice v as well as v[i] for 0 &lt;= i &lt; len(v),</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span><span class="comment">// but does not modify v[i][j] for any i, j.</span>
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>func (v *Buffers) Read(p []byte) (n int, err error) {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	for len(p) &gt; 0 &amp;&amp; len(*v) &gt; 0 {
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>		n0 := copy(p, (*v)[0])
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		v.consume(int64(n0))
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		p = p[n0:]
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		n += n0
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	if len(*v) == 0 {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		err = io.EOF
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	return
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>}
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>func (v *Buffers) consume(n int64) {
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	for len(*v) &gt; 0 {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		ln0 := int64(len((*v)[0]))
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		if ln0 &gt; n {
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>			(*v)[0] = (*v)[0][n:]
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>			return
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		}
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		n -= ln0
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		(*v)[0] = nil
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		*v = (*v)[1:]
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	}
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>
</pre><p><a href="net.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
