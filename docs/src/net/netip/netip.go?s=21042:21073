<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/netip/netip.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./netip.go?s=21042:21073#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/netip">netip</a>/<span class="text-muted">netip.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/netip">net/netip</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2020 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package netip defines an IP address type that&#39;s a small value type.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// Building on that [Addr] type, the package also defines [AddrPort] (an</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// IP address and a port) and [Prefix] (an IP address and a bit length</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// prefix).</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// Compared to the [net.IP] type, [Addr] type takes less memory, is immutable,</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// and is comparable (supports == and being a map key).</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>package netip
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>import (
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;cmp&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;internal/bytealg&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;internal/intern&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;internal/itoa&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// Sizes: (64-bit)</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">//   net.IP:     24 byte slice header + {4, 16} = 28 to 40 bytes</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//   net.IPAddr: 40 byte slice header + {4, 16} = 44 to 56 bytes + zone length</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//   netip.Addr: 24 bytes (zone is per-name singleton, shared across all users)</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Addr represents an IPv4 or IPv6 address (with or without a scoped</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// addressing zone), similar to [net.IP] or [net.IPAddr].</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// Unlike [net.IP] or [net.IPAddr], Addr is a comparable value</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// type (it supports == and can be a map key) and is immutable.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// The zero Addr is not a valid IP address.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Addr{} is distinct from both 0.0.0.0 and ::.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>type Addr struct {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// addr is the hi and lo bits of an IPv6 address. If z==z4,</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// hi and lo contain the IPv4-mapped IPv6 address.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// hi and lo are constructed by interpreting a 16-byte IPv6</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// address as a big-endian 128-bit number. The most significant</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// bits of that number go into hi, the rest into lo.</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// For example, 0011:2233:4455:6677:8899:aabb:ccdd:eeff is stored as:</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">//  addr.hi = 0x0011223344556677</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">//  addr.lo = 0x8899aabbccddeeff</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// We store IPs like this, rather than as [16]byte, because it</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// turns most operations on IPs into arithmetic and bit-twiddling</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// operations on 64-bit registers, which is much faster than</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// bytewise processing.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	addr uint128
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// z is a combination of the address family and the IPv6 zone.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// nil means invalid IP address (for a zero Addr).</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// z4 means an IPv4 address.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// z6noz means an IPv6 address without a zone.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// Otherwise it&#39;s the interned zone name string.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	z *intern.Value
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">// z0, z4, and z6noz are sentinel Addr.z values.</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">// See the Addr type&#39;s field docs.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>var (
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	z0    = (*intern.Value)(nil)
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	z4    = new(intern.Value)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	z6noz = new(intern.Value)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// IPv6LinkLocalAllNodes returns the IPv6 link-local all nodes multicast</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">// address ff02::1.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>func IPv6LinkLocalAllNodes() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x01}) }
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// IPv6LinkLocalAllRouters returns the IPv6 link-local all routers multicast</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">// address ff02::2.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>func IPv6LinkLocalAllRouters() Addr { return AddrFrom16([16]byte{0: 0xff, 1: 0x02, 15: 0x02}) }
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// IPv6Loopback returns the IPv6 loopback address ::1.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>func IPv6Loopback() Addr { return AddrFrom16([16]byte{15: 0x01}) }
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// IPv6Unspecified returns the IPv6 unspecified address &#34;::&#34;.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func IPv6Unspecified() Addr { return Addr{z: z6noz} }
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// IPv4Unspecified returns the IPv4 unspecified address &#34;0.0.0.0&#34;.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>func IPv4Unspecified() Addr { return AddrFrom4([4]byte{}) }
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// AddrFrom4 returns the address of the IPv4 address given by the bytes in addr.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func AddrFrom4(addr [4]byte) Addr {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return Addr{
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		addr: uint128{0, 0xffff00000000 | uint64(addr[0])&lt;&lt;24 | uint64(addr[1])&lt;&lt;16 | uint64(addr[2])&lt;&lt;8 | uint64(addr[3])},
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		z:    z4,
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	}
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>}
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// AddrFrom16 returns the IPv6 address given by the bytes in addr.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// An IPv4-mapped IPv6 address is left as an IPv6 address.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// (Use Unmap to convert them if needed.)</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>func AddrFrom16(addr [16]byte) Addr {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	return Addr{
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		addr: uint128{
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			beUint64(addr[:8]),
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			beUint64(addr[8:]),
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		},
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		z: z6noz,
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>}
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// ParseAddr parses s as an IP address, returning the result. The string</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">// s can be in dotted decimal (&#34;192.0.2.1&#34;), IPv6 (&#34;2001:db8::68&#34;),</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// or IPv6 with a scoped addressing zone (&#34;fe80::1cc0:3e8c:119f:c2e1%ens18&#34;).</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>func ParseAddr(s string) (Addr, error) {
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		switch s[i] {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>		case &#39;.&#39;:
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>			return parseIPv4(s)
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		case &#39;:&#39;:
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			return parseIPv6(s)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		case &#39;%&#39;:
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			<span class="comment">// Assume that this was trying to be an IPv6 address with</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			<span class="comment">// a zone specifier, but the address is missing.</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: s, msg: &#34;missing IPv6 address&#34;}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	return Addr{}, parseAddrError{in: s, msg: &#34;unable to parse IP&#34;}
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// MustParseAddr calls [ParseAddr](s) and panics on error.</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// It is intended for use in tests with hard-coded strings.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func MustParseAddr(s string) Addr {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	ip, err := ParseAddr(s)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if err != nil {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		panic(err)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	return ip
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>}
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>type parseAddrError struct {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	in  string <span class="comment">// the string given to ParseAddr</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	msg string <span class="comment">// an explanation of the parse failure</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	at  string <span class="comment">// optionally, the unparsed portion of in at which the error occurred.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>}
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>func (err parseAddrError) Error() string {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	q := strconv.Quote
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	if err.at != &#34;&#34; {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>		return &#34;ParseAddr(&#34; + q(err.in) + &#34;): &#34; + err.msg + &#34; (at &#34; + q(err.at) + &#34;)&#34;
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	return &#34;ParseAddr(&#34; + q(err.in) + &#34;): &#34; + err.msg
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>}
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// parseIPv4 parses s as an IPv4 address (in form &#34;192.168.0.1&#34;).</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func parseIPv4(s string) (ip Addr, err error) {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	var fields [4]uint8
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	var val, pos int
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	var digLen int <span class="comment">// number of digits in current octet</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		if s[i] &gt;= &#39;0&#39; &amp;&amp; s[i] &lt;= &#39;9&#39; {
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>			if digLen == 1 &amp;&amp; val == 0 {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: s, msg: &#34;IPv4 field has octet with leading zero&#34;}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>			}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			val = val*10 + int(s[i]) - &#39;0&#39;
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>			digLen++
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>			if val &gt; 255 {
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: s, msg: &#34;IPv4 field has value &gt;255&#34;}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>			}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>		} else if s[i] == &#39;.&#39; {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>			<span class="comment">// .1.2.3</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>			<span class="comment">// 1.2.3.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>			<span class="comment">// 1..2.3</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>			if i == 0 || i == len(s)-1 || s[i-1] == &#39;.&#39; {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: s, msg: &#34;IPv4 field must have at least one digit&#34;, at: s[i:]}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>			}
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			<span class="comment">// 1.2.3.4.5</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>			if pos == 3 {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: s, msg: &#34;IPv4 address too long&#34;}
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>			}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			fields[pos] = uint8(val)
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>			pos++
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>			val = 0
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>			digLen = 0
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		} else {
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: s, msg: &#34;unexpected character&#34;, at: s[i:]}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>		}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	}
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	if pos &lt; 3 {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>		return Addr{}, parseAddrError{in: s, msg: &#34;IPv4 address too short&#34;}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	}
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	fields[3] = uint8(val)
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	return AddrFrom4(fields), nil
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>}
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// parseIPv6 parses s as an IPv6 address (in form &#34;2001:db8::68&#34;).</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func parseIPv6(in string) (Addr, error) {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	s := in
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// Split off the zone right from the start. Yes it&#39;s a second scan</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// of the string, but trying to handle it inline makes a bunch of</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// other inner loop conditionals more expensive, and it ends up</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// being slower.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	zone := &#34;&#34;
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	i := bytealg.IndexByteString(s, &#39;%&#39;)
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	if i != -1 {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>		s, zone = s[:i], s[i+1:]
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>		if zone == &#34;&#34; {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>			<span class="comment">// Not allowed to have an empty zone if explicitly specified.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: in, msg: &#34;zone must be a non-empty string&#34;}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	var ip [16]byte
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	ellipsis := -1 <span class="comment">// position of ellipsis in ip</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// Might have leading ellipsis</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;:&#39; &amp;&amp; s[1] == &#39;:&#39; {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		ellipsis = 0
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		s = s[2:]
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		<span class="comment">// Might be only ellipsis</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		if len(s) == 0 {
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>			return IPv6Unspecified().WithZone(zone), nil
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	<span class="comment">// Loop, parsing hex numbers followed by colon.</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	i = 0
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	for i &lt; 16 {
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		<span class="comment">// Hex number. Similar to parseIPv4, inlining the hex number</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>		<span class="comment">// parsing yields a significant performance increase.</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		off := 0
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		acc := uint32(0)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		for ; off &lt; len(s); off++ {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>			c := s[off]
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>			if c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39; {
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>				acc = (acc &lt;&lt; 4) + uint32(c-&#39;0&#39;)
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>			} else if c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;f&#39; {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>				acc = (acc &lt;&lt; 4) + uint32(c-&#39;a&#39;+10)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>			} else if c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;F&#39; {
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>				acc = (acc &lt;&lt; 4) + uint32(c-&#39;A&#39;+10)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>			} else {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>				break
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			}
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			if acc &gt; math.MaxUint16 {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>				<span class="comment">// Overflow, fail.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: in, msg: &#34;IPv6 field has value &gt;=2^16&#34;, at: s}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>			}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		if off == 0 {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>			<span class="comment">// No digits found, fail.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: in, msg: &#34;each colon-separated field must have at least one digit&#34;, at: s}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		}
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>		<span class="comment">// If followed by dot, might be in trailing IPv4.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		if off &lt; len(s) &amp;&amp; s[off] == &#39;.&#39; {
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			if ellipsis &lt; 0 &amp;&amp; i != 12 {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>				<span class="comment">// Not the right place.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: in, msg: &#34;embedded IPv4 address must replace the final 2 fields of the address&#34;, at: s}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>			}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>			if i+4 &gt; 16 {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>				<span class="comment">// Not enough room.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: in, msg: &#34;too many hex fields to fit an embedded IPv4 at the end of the address&#34;, at: s}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>			}
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>			<span class="comment">// TODO: could make this a bit faster by having a helper</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>			<span class="comment">// that parses to a [4]byte, and have both parseIPv4 and</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			<span class="comment">// parseIPv6 use it.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>			ip4, err := parseIPv4(s)
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			if err != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: in, msg: err.Error(), at: s}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>			}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>			ip[i] = ip4.v4(0)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>			ip[i+1] = ip4.v4(1)
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			ip[i+2] = ip4.v4(2)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>			ip[i+3] = ip4.v4(3)
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>			s = &#34;&#34;
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>			i += 4
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>			break
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>		}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		<span class="comment">// Save this 16-bit chunk.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		ip[i] = byte(acc &gt;&gt; 8)
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>		ip[i+1] = byte(acc)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>		i += 2
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		<span class="comment">// Stop at end of string.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		s = s[off:]
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		if len(s) == 0 {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			break
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		}
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		<span class="comment">// Otherwise must be followed by colon and more.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		if s[0] != &#39;:&#39; {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: in, msg: &#34;unexpected character, want colon&#34;, at: s}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		} else if len(s) == 1 {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: in, msg: &#34;colon must be followed by more characters&#34;, at: s}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>		s = s[1:]
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// Look for ellipsis.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		if s[0] == &#39;:&#39; {
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>			if ellipsis &gt;= 0 { <span class="comment">// already have one</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>				return Addr{}, parseAddrError{in: in, msg: &#34;multiple :: in address&#34;, at: s}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>			}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			ellipsis = i
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			s = s[1:]
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>			if len(s) == 0 { <span class="comment">// can be at end</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>				break
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>			}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		}
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	}
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// Must have used entire string.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	if len(s) != 0 {
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		return Addr{}, parseAddrError{in: in, msg: &#34;trailing garbage after address&#34;, at: s}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	}
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// If didn&#39;t parse enough, expand ellipsis.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	if i &lt; 16 {
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>		if ellipsis &lt; 0 {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			return Addr{}, parseAddrError{in: in, msg: &#34;address string too short&#34;}
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		n := 16 - i
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		for j := i - 1; j &gt;= ellipsis; j-- {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			ip[j+n] = ip[j]
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		}
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>		for j := ellipsis + n - 1; j &gt;= ellipsis; j-- {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			ip[j] = 0
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	} else if ellipsis &gt;= 0 {
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		<span class="comment">// Ellipsis must represent at least one 0 group.</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return Addr{}, parseAddrError{in: in, msg: &#34;the :: must expand to at least one field of zeros&#34;}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	return AddrFrom16(ip).WithZone(zone), nil
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// AddrFromSlice parses the 4- or 16-byte byte slice as an IPv4 or IPv6 address.</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// Note that a [net.IP] can be passed directly as the []byte argument.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span><span class="comment">// If slice&#39;s length is not 4 or 16, AddrFromSlice returns [Addr]{}, false.</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>func AddrFromSlice(slice []byte) (ip Addr, ok bool) {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	switch len(slice) {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	case 4:
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		return AddrFrom4([4]byte(slice)), true
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	case 16:
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		return AddrFrom16([16]byte(slice)), true
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	return Addr{}, false
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>}
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span><span class="comment">// v4 returns the i&#39;th byte of ip. If ip is not an IPv4, v4 returns</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span><span class="comment">// unspecified garbage.</span>
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>func (ip Addr) v4(i uint8) uint8 {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>	return uint8(ip.addr.lo &gt;&gt; ((3 - i) * 8))
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">// v6 returns the i&#39;th byte of ip. If ip is an IPv4 address, this</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// accesses the IPv4-mapped IPv6 address form of the IP.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>func (ip Addr) v6(i uint8) uint8 {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>	return uint8(*(ip.addr.halves()[(i/8)%2]) &gt;&gt; ((7 - i%8) * 8))
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">// v6u16 returns the i&#39;th 16-bit word of ip. If ip is an IPv4 address,</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// this accesses the IPv4-mapped IPv6 address form of the IP.</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>func (ip Addr) v6u16(i uint8) uint16 {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	return uint16(*(ip.addr.halves()[(i/4)%2]) &gt;&gt; ((3 - i%4) * 16))
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// isZero reports whether ip is the zero value of the IP type.</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// The zero value is not a valid IP address of any type.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// Note that &#34;0.0.0.0&#34; and &#34;::&#34; are not the zero value. Use IsUnspecified to</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// check for these values instead.</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>func (ip Addr) isZero() bool {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	<span class="comment">// Faster than comparing ip == Addr{}, but effectively equivalent,</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	<span class="comment">// as there&#39;s no way to make an IP with a nil z from this package.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	return ip.z == z0
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether the [Addr] is an initialized address (not the zero Addr).</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// Note that &#34;0.0.0.0&#34; and &#34;::&#34; are both valid values.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func (ip Addr) IsValid() bool { return ip.z != z0 }
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// BitLen returns the number of bits in the IP address:</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span><span class="comment">// 128 for IPv6, 32 for IPv4, and 0 for the zero [Addr].</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// Note that IPv4-mapped IPv6 addresses are considered IPv6 addresses</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span><span class="comment">// and therefore have bit length 128.</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>func (ip Addr) BitLen() int {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	switch ip.z {
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	case z0:
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>		return 0
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	case z4:
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		return 32
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	return 128
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>}
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// Zone returns ip&#39;s IPv6 scoped addressing zone, if any.</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (ip Addr) Zone() string {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	if ip.z == nil {
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	}
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	zone, _ := ip.z.Get().(string)
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	return zone
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">// Compare returns an integer comparing two IPs.</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// The result will be 0 if ip == ip2, -1 if ip &lt; ip2, and +1 if ip &gt; ip2.</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// The definition of &#34;less than&#34; is the same as the [Addr.Less] method.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>func (ip Addr) Compare(ip2 Addr) int {
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>	f1, f2 := ip.BitLen(), ip2.BitLen()
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>	if f1 &lt; f2 {
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		return -1
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>	}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	if f1 &gt; f2 {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		return 1
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	hi1, hi2 := ip.addr.hi, ip2.addr.hi
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if hi1 &lt; hi2 {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return -1
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	if hi1 &gt; hi2 {
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		return 1
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	lo1, lo2 := ip.addr.lo, ip2.addr.lo
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	if lo1 &lt; lo2 {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		return -1
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	}
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	if lo1 &gt; lo2 {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		return 1
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		za, zb := ip.Zone(), ip2.Zone()
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		if za &lt; zb {
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>			return -1
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		if za &gt; zb {
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>			return 1
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		}
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>	}
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	return 0
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>}
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="comment">// Less reports whether ip sorts before ip2.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span><span class="comment">// IP addresses sort first by length, then their address.</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// IPv6 addresses with zones sort just after the same address without a zone.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func (ip Addr) Less(ip2 Addr) bool { return ip.Compare(ip2) == -1 }
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// Is4 reports whether ip is an IPv4 address.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// It returns false for IPv4-mapped IPv6 addresses. See [Addr.Unmap].</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>func (ip Addr) Is4() bool {
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	return ip.z == z4
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>}
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// Is4In6 reports whether ip is an IPv4-mapped IPv6 address.</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>func (ip Addr) Is4In6() bool {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	return ip.Is6() &amp;&amp; ip.addr.hi == 0 &amp;&amp; ip.addr.lo&gt;&gt;32 == 0xffff
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>
<span id="L462" class="ln">   462&nbsp;&nbsp;</span><span class="comment">// Is6 reports whether ip is an IPv6 address, including IPv4-mapped</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span><span class="comment">// IPv6 addresses.</span>
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>func (ip Addr) Is6() bool {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	return ip.z != z0 &amp;&amp; ip.z != z4
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span><span class="comment">// Unmap returns ip with any IPv4-mapped IPv6 address prefix removed.</span>
<span id="L469" class="ln">   469&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L470" class="ln">   470&nbsp;&nbsp;</span><span class="comment">// That is, if ip is an IPv6 address wrapping an IPv4 address, it</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// returns the wrapped IPv4 address. Otherwise it returns ip unmodified.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>func (ip Addr) Unmap() Addr {
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		ip.z = z4
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	return ip
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span><span class="comment">// WithZone returns an IP that&#39;s the same as ip but with the provided</span>
<span id="L480" class="ln">   480&nbsp;&nbsp;</span><span class="comment">// zone. If zone is empty, the zone is removed. If ip is an IPv4</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// address, WithZone is a no-op and returns ip unchanged.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>func (ip Addr) WithZone(zone string) Addr {
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	if !ip.Is6() {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		return ip
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	}
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if zone == &#34;&#34; {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		ip.z = z6noz
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		return ip
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	}
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	ip.z = intern.GetByString(zone)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	return ip
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// withoutZone unconditionally strips the zone from ip.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">// It&#39;s similar to WithZone, but small enough to be inlinable.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>func (ip Addr) withoutZone() Addr {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>	if !ip.Is6() {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>		return ip
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>	}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	ip.z = z6noz
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return ip
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// hasZone reports whether ip has an IPv6 zone.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>func (ip Addr) hasZone() bool {
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>	return ip.z != z0 &amp;&amp; ip.z != z4 &amp;&amp; ip.z != z6noz
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">// IsLinkLocalUnicast reports whether ip is a link-local unicast address.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>func (ip Addr) IsLinkLocalUnicast() bool {
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>	}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	<span class="comment">// Dynamic Configuration of IPv4 Link-Local Addresses</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc3927#section-2.1</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>		return ip.v4(0) == 169 &amp;&amp; ip.v4(1) == 254
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	}
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	<span class="comment">// IP Version 6 Addressing Architecture (2.4 Address Type Identification)</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc4291#section-2.4</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>		return ip.v6u16(0)&amp;0xffc0 == 0xfe80
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>}
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span><span class="comment">// IsLoopback reports whether ip is a loopback address.</span>
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>func (ip Addr) IsLoopback() bool {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	}
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	<span class="comment">// Requirements for Internet Hosts -- Communication Layers (3.2.1.3 Addressing)</span>
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc1122#section-3.2.1.3</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>		return ip.v4(0) == 127
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>	<span class="comment">// IP Version 6 Addressing Architecture (2.4 Address Type Identification)</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc4291#section-2.4</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>		return ip.addr.hi == 0 &amp;&amp; ip.addr.lo == 1
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	}
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>}
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// IsMulticast reports whether ip is a multicast address.</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>func (ip Addr) IsMulticast() bool {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>	}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	<span class="comment">// Host Extensions for IP Multicasting (4. HOST GROUP ADDRESSES)</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc1112#section-4</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		return ip.v4(0)&amp;0xf0 == 0xe0
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	}
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	<span class="comment">// IP Version 6 Addressing Architecture (2.4 Address Type Identification)</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc4291#section-2.4</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		return ip.addr.hi&gt;&gt;(64-8) == 0xff <span class="comment">// ip.v6(0) == 0xff</span>
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	}
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span><span class="comment">// IsInterfaceLocalMulticast reports whether ip is an IPv6 interface-local</span>
<span id="L567" class="ln">   567&nbsp;&nbsp;</span><span class="comment">// multicast address.</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>func (ip Addr) IsInterfaceLocalMulticast() bool {
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	<span class="comment">// IPv6 Addressing Architecture (2.7.1. Pre-Defined Multicast Addresses)</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc4291#section-2.7.1</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	if ip.Is6() &amp;&amp; !ip.Is4In6() {
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>		return ip.v6u16(0)&amp;0xff0f == 0xff01
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	}
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>}
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>
<span id="L577" class="ln">   577&nbsp;&nbsp;</span><span class="comment">// IsLinkLocalMulticast reports whether ip is a link-local multicast address.</span>
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>func (ip Addr) IsLinkLocalMulticast() bool {
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>	<span class="comment">// IPv4 Multicast Guidelines (4. Local Network Control Block (224.0.0/24))</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc5771#section-4</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		return ip.v4(0) == 224 &amp;&amp; ip.v4(1) == 0 &amp;&amp; ip.v4(2) == 0
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	<span class="comment">// IPv6 Addressing Architecture (2.7.1. Pre-Defined Multicast Addresses)</span>
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	<span class="comment">// https://datatracker.ietf.org/doc/html/rfc4291#section-2.7.1</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>		return ip.v6u16(0)&amp;0xff0f == 0xff02
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>}
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// IsGlobalUnicast reports whether ip is a global unicast address.</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">// It returns true for IPv6 addresses which fall outside of the current</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// IANA-allocated 2000::/3 global unicast space, with the exception of the</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// link-local address space. It also returns true even if ip is in the IPv4</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">// private address space or IPv6 unique local address space.</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span><span class="comment">// It returns false for the zero [Addr].</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">// For reference, see RFC 1122, RFC 4291, and RFC 4632.</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>func (ip Addr) IsGlobalUnicast() bool {
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	if ip.z == z0 {
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>		<span class="comment">// Invalid or zero-value.</span>
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		return false
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>	}
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	<span class="comment">// Match package net&#39;s IsGlobalUnicast logic. Notably private IPv4 addresses</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	<span class="comment">// and ULA IPv6 addresses are still considered &#34;global unicast&#34;.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	if ip.Is4() &amp;&amp; (ip == IPv4Unspecified() || ip == AddrFrom4([4]byte{255, 255, 255, 255})) {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		return false
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	return ip != IPv6Unspecified() &amp;&amp;
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>		!ip.IsLoopback() &amp;&amp;
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		!ip.IsMulticast() &amp;&amp;
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>		!ip.IsLinkLocalUnicast()
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>}
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span><span class="comment">// IsPrivate reports whether ip is a private address, according to RFC 1918</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span><span class="comment">// (IPv4 addresses) and RFC 4193 (IPv6 addresses). That is, it reports whether</span>
<span id="L629" class="ln">   629&nbsp;&nbsp;</span><span class="comment">// ip is in 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or fc00::/7. This is the</span>
<span id="L630" class="ln">   630&nbsp;&nbsp;</span><span class="comment">// same as [net.IP.IsPrivate].</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>func (ip Addr) IsPrivate() bool {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	if ip.Is4In6() {
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		ip = ip.Unmap()
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	}
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	<span class="comment">// Match the stdlib&#39;s IsPrivate logic.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		<span class="comment">// RFC 1918 allocates 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 as</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>		<span class="comment">// private IPv4 address subnets.</span>
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		return ip.v4(0) == 10 ||
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>			(ip.v4(0) == 172 &amp;&amp; ip.v4(1)&amp;0xf0 == 16) ||
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>			(ip.v4(0) == 192 &amp;&amp; ip.v4(1) == 168)
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	}
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		<span class="comment">// RFC 4193 allocates fc00::/7 as the unique local unicast IPv6 address</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		<span class="comment">// subnet.</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		return ip.v6(0)&amp;0xfe == 0xfc
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	}
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	return false <span class="comment">// zero value</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// IsUnspecified reports whether ip is an unspecified address, either the IPv4</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span><span class="comment">// address &#34;0.0.0.0&#34; or the IPv6 address &#34;::&#34;.</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span><span class="comment">// Note that the zero [Addr] is not an unspecified address.</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>func (ip Addr) IsUnspecified() bool {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>	return ip == IPv4Unspecified() || ip == IPv6Unspecified()
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>
<span id="L662" class="ln">   662&nbsp;&nbsp;</span><span class="comment">// Prefix keeps only the top b bits of IP, producing a Prefix</span>
<span id="L663" class="ln">   663&nbsp;&nbsp;</span><span class="comment">// of the specified length.</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// If ip is a zero [Addr], Prefix always returns a zero Prefix and a nil error.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span><span class="comment">// Otherwise, if bits is less than zero or greater than ip.BitLen(),</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">// Prefix returns an error.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>func (ip Addr) Prefix(b int) (Prefix, error) {
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	if b &lt; 0 {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;negative Prefix bits&#34;)
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>	}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	effectiveBits := b
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>	switch ip.z {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	case z0:
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		return Prefix{}, nil
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	case z4:
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>		if b &gt; 32 {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>			return Prefix{}, errors.New(&#34;prefix length &#34; + itoa.Itoa(b) + &#34; too large for IPv4&#34;)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>		}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>		effectiveBits += 96
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>	default:
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		if b &gt; 128 {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			return Prefix{}, errors.New(&#34;prefix length &#34; + itoa.Itoa(b) + &#34; too large for IPv6&#34;)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		}
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	ip.addr = ip.addr.and(mask6(effectiveBits))
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	return PrefixFrom(ip, b), nil
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span><span class="comment">// As16 returns the IP address in its 16-byte representation.</span>
<span id="L690" class="ln">   690&nbsp;&nbsp;</span><span class="comment">// IPv4 addresses are returned as IPv4-mapped IPv6 addresses.</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// IPv6 addresses with zones are returned without their zone (use the</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span><span class="comment">// [Addr.Zone] method to get it).</span>
<span id="L693" class="ln">   693&nbsp;&nbsp;</span><span class="comment">// The ip zero value returns all zeroes.</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>func (ip Addr) As16() (a16 [16]byte) {
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	bePutUint64(a16[:8], ip.addr.hi)
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	bePutUint64(a16[8:], ip.addr.lo)
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>	return a16
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span><span class="comment">// As4 returns an IPv4 or IPv4-in-IPv6 address in its 4-byte representation.</span>
<span id="L701" class="ln">   701&nbsp;&nbsp;</span><span class="comment">// If ip is the zero [Addr] or an IPv6 address, As4 panics.</span>
<span id="L702" class="ln">   702&nbsp;&nbsp;</span><span class="comment">// Note that 0.0.0.0 is not the zero Addr.</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>func (ip Addr) As4() (a4 [4]byte) {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	if ip.z == z4 || ip.Is4In6() {
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		bePutUint32(a4[:], uint32(ip.addr.lo))
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		return a4
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	if ip.z == z0 {
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>		panic(&#34;As4 called on IP zero value&#34;)
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>	}
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	panic(&#34;As4 called on IPv6 address&#34;)
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>}
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">// AsSlice returns an IPv4 or IPv6 address in its respective 4-byte or 16-byte representation.</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="selection">func (ip Addr) AsSlice() []byte</span> {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	switch ip.z {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>	case z0:
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>		return nil
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>	case z4:
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		var ret [4]byte
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		bePutUint32(ret[:], uint32(ip.addr.lo))
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		return ret[:]
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	default:
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>		var ret [16]byte
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>		bePutUint64(ret[:8], ip.addr.hi)
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>		bePutUint64(ret[8:], ip.addr.lo)
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>		return ret[:]
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	}
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span><span class="comment">// Next returns the address following ip.</span>
<span id="L732" class="ln">   732&nbsp;&nbsp;</span><span class="comment">// If there is none, it returns the zero [Addr].</span>
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>func (ip Addr) Next() Addr {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>	ip.addr = ip.addr.addOne()
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>		if uint32(ip.addr.lo) == 0 {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>			<span class="comment">// Overflowed.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>			return Addr{}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>		}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	} else {
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>		if ip.addr.isZero() {
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>			<span class="comment">// Overflowed</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>			return Addr{}
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>		}
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	}
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	return ip
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>}
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>
<span id="L749" class="ln">   749&nbsp;&nbsp;</span><span class="comment">// Prev returns the IP before ip.</span>
<span id="L750" class="ln">   750&nbsp;&nbsp;</span><span class="comment">// If there is none, it returns the IP zero value.</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>func (ip Addr) Prev() Addr {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		if uint32(ip.addr.lo) == 0 {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			return Addr{}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>		}
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	} else if ip.addr.isZero() {
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>		return Addr{}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>	}
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>	ip.addr = ip.addr.subOne()
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	return ip
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span><span class="comment">// String returns the string form of the IP address ip.</span>
<span id="L764" class="ln">   764&nbsp;&nbsp;</span><span class="comment">// It returns one of 5 forms:</span>
<span id="L765" class="ln">   765&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span><span class="comment">//   - &#34;invalid IP&#34;, if ip is the zero [Addr]</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span><span class="comment">//   - IPv4 dotted decimal (&#34;192.0.2.1&#34;)</span>
<span id="L768" class="ln">   768&nbsp;&nbsp;</span><span class="comment">//   - IPv6 (&#34;2001:db8::1&#34;)</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span><span class="comment">//   - &#34;::ffff:1.2.3.4&#34; (if [Addr.Is4In6])</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span><span class="comment">//   - IPv6 with zone (&#34;fe80:db8::1%eth0&#34;)</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span><span class="comment">// Note that unlike package net&#39;s IP.String method,</span>
<span id="L773" class="ln">   773&nbsp;&nbsp;</span><span class="comment">// IPv4-mapped IPv6 addresses format with a &#34;::ffff:&#34;</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span><span class="comment">// prefix before the dotted quad.</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>func (ip Addr) String() string {
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	switch ip.z {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>	case z0:
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		return &#34;invalid IP&#34;
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	case z4:
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>		return ip.string4()
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	default:
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>		if ip.Is4In6() {
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>			if z := ip.Zone(); z != &#34;&#34; {
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>				return &#34;::ffff:&#34; + ip.Unmap().string4() + &#34;%&#34; + z
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			} else {
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>				return &#34;::ffff:&#34; + ip.Unmap().string4()
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>			}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>		}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		return ip.string6()
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>	}
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span><span class="comment">// AppendTo appends a text encoding of ip,</span>
<span id="L794" class="ln">   794&nbsp;&nbsp;</span><span class="comment">// as generated by [Addr.MarshalText],</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span><span class="comment">// to b and returns the extended buffer.</span>
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>func (ip Addr) AppendTo(b []byte) []byte {
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	switch ip.z {
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>	case z0:
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		return b
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	case z4:
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		return ip.appendTo4(b)
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	default:
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>		if ip.Is4In6() {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>			b = append(b, &#34;::ffff:&#34;...)
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>			b = ip.Unmap().appendTo4(b)
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>			if z := ip.Zone(); z != &#34;&#34; {
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>				b = append(b, &#39;%&#39;)
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>				b = append(b, z...)
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>			}
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>			return b
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		}
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		return ip.appendTo6(b)
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>	}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">// digits is a string of the hex digits from 0 to f. It&#39;s used in</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">// appendDecimal and appendHex to format IP addresses.</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>const digits = &#34;0123456789abcdef&#34;
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// appendDecimal appends the decimal string representation of x to b.</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>func appendDecimal(b []byte, x uint8) []byte {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>	<span class="comment">// Using this function rather than strconv.AppendUint makes IPv4</span>
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	<span class="comment">// string building 2x faster.</span>
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>	if x &gt;= 100 {
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		b = append(b, digits[x/100])
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	}
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	if x &gt;= 10 {
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		b = append(b, digits[x/10%10])
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	}
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>	return append(b, digits[x%10])
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>}
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span><span class="comment">// appendHex appends the hex string representation of x to b.</span>
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>func appendHex(b []byte, x uint16) []byte {
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>	<span class="comment">// Using this function rather than strconv.AppendUint makes IPv6</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	<span class="comment">// string building 2x faster.</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	if x &gt;= 0x1000 {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>		b = append(b, digits[x&gt;&gt;12])
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>	}
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	if x &gt;= 0x100 {
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		b = append(b, digits[x&gt;&gt;8&amp;0xf])
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	}
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	if x &gt;= 0x10 {
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>		b = append(b, digits[x&gt;&gt;4&amp;0xf])
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>	}
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	return append(b, digits[x&amp;0xf])
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span><span class="comment">// appendHexPad appends the fully padded hex string representation of x to b.</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>func appendHexPad(b []byte, x uint16) []byte {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	return append(b, digits[x&gt;&gt;12], digits[x&gt;&gt;8&amp;0xf], digits[x&gt;&gt;4&amp;0xf], digits[x&amp;0xf])
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>}
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>func (ip Addr) string4() string {
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	const max = len(&#34;255.255.255.255&#34;)
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	ret := make([]byte, 0, max)
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	ret = ip.appendTo4(ret)
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	return string(ret)
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>}
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>func (ip Addr) appendTo4(ret []byte) []byte {
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	ret = appendDecimal(ret, ip.v4(0))
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	ret = append(ret, &#39;.&#39;)
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	ret = appendDecimal(ret, ip.v4(1))
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>	ret = append(ret, &#39;.&#39;)
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>	ret = appendDecimal(ret, ip.v4(2))
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	ret = append(ret, &#39;.&#39;)
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>	ret = appendDecimal(ret, ip.v4(3))
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	return ret
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>}
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">// string6 formats ip in IPv6 textual representation. It follows the</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// guidelines in section 4 of RFC 5952</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">// (https://tools.ietf.org/html/rfc5952#section-4): no unnecessary</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// zeros, use :: to elide the longest run of zeros, and don&#39;t use ::</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">// to compact a single zero field.</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>func (ip Addr) string6() string {
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	<span class="comment">// Use a zone with a &#34;plausibly long&#34; name, so that most zone-ful</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	<span class="comment">// IP addresses won&#39;t require additional allocation.</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	<span class="comment">// The compiler does a cool optimization here, where ret ends up</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>	<span class="comment">// stack-allocated and so the only allocation this function does</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	<span class="comment">// is to construct the returned string. As such, it&#39;s okay to be a</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	<span class="comment">// bit greedy here, size-wise.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	const max = len(&#34;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%enp5s0&#34;)
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	ret := make([]byte, 0, max)
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	ret = ip.appendTo6(ret)
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	return string(ret)
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>}
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>func (ip Addr) appendTo6(ret []byte) []byte {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	zeroStart, zeroEnd := uint8(255), uint8(255)
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	for i := uint8(0); i &lt; 8; i++ {
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>		j := i
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>		for j &lt; 8 &amp;&amp; ip.v6u16(j) == 0 {
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>			j++
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		}
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>		if l := j - i; l &gt;= 2 &amp;&amp; l &gt; zeroEnd-zeroStart {
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>			zeroStart, zeroEnd = i, j
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>		}
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	}
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>	for i := uint8(0); i &lt; 8; i++ {
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		if i == zeroStart {
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>			ret = append(ret, &#39;:&#39;, &#39;:&#39;)
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>			i = zeroEnd
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>			if i &gt;= 8 {
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>				break
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			}
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		} else if i &gt; 0 {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>			ret = append(ret, &#39;:&#39;)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>		}
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		ret = appendHex(ret, ip.v6u16(i))
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>	}
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>	if ip.z != z6noz {
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>		ret = append(ret, &#39;%&#39;)
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>		ret = append(ret, ip.Zone()...)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	}
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>	return ret
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>}
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span><span class="comment">// StringExpanded is like [Addr.String] but IPv6 addresses are expanded with leading</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span><span class="comment">// zeroes and no &#34;::&#34; compression. For example, &#34;2001:db8::1&#34; becomes</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span><span class="comment">// &#34;2001:0db8:0000:0000:0000:0000:0000:0001&#34;.</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>func (ip Addr) StringExpanded() string {
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>	switch ip.z {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>	case z0, z4:
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		return ip.String()
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>	}
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	const size = len(&#34;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#34;)
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>	ret := make([]byte, 0, size)
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>	for i := uint8(0); i &lt; 8; i++ {
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>			ret = append(ret, &#39;:&#39;)
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>		}
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>		ret = appendHexPad(ret, ip.v6u16(i))
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>	}
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>	if ip.z != z6noz {
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		<span class="comment">// The addition of a zone will cause a second allocation, but when there</span>
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		<span class="comment">// is no zone the ret slice will be stack allocated.</span>
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		ret = append(ret, &#39;%&#39;)
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		ret = append(ret, ip.Zone()...)
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>	}
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>	return string(ret)
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>}
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span><span class="comment">// MarshalText implements the [encoding.TextMarshaler] interface,</span>
<span id="L955" class="ln">   955&nbsp;&nbsp;</span><span class="comment">// The encoding is the same as returned by [Addr.String], with one exception:</span>
<span id="L956" class="ln">   956&nbsp;&nbsp;</span><span class="comment">// If ip is the zero [Addr], the encoding is the empty string.</span>
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>func (ip Addr) MarshalText() ([]byte, error) {
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>	switch ip.z {
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>	case z0:
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		return []byte(&#34;&#34;), nil
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	case z4:
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		max := len(&#34;255.255.255.255&#34;)
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		b := make([]byte, 0, max)
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		return ip.appendTo4(b), nil
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>	default:
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		max := len(&#34;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%enp5s0&#34;)
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		b := make([]byte, 0, max)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		if ip.Is4In6() {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>			b = append(b, &#34;::ffff:&#34;...)
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			b = ip.Unmap().appendTo4(b)
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			if z := ip.Zone(); z != &#34;&#34; {
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>				b = append(b, &#39;%&#39;)
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>				b = append(b, z...)
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>			}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>			return b, nil
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>		}
<span id="L977" class="ln">   977&nbsp;&nbsp;</span>		return ip.appendTo6(b), nil
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>	}
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>}
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>
<span id="L982" class="ln">   982&nbsp;&nbsp;</span><span class="comment">// UnmarshalText implements the encoding.TextUnmarshaler interface.</span>
<span id="L983" class="ln">   983&nbsp;&nbsp;</span><span class="comment">// The IP address is expected in a form accepted by [ParseAddr].</span>
<span id="L984" class="ln">   984&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L985" class="ln">   985&nbsp;&nbsp;</span><span class="comment">// If text is empty, UnmarshalText sets *ip to the zero [Addr] and</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span><span class="comment">// returns no error.</span>
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>func (ip *Addr) UnmarshalText(text []byte) error {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	if len(text) == 0 {
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>		*ip = Addr{}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		return nil
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	var err error
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>	*ip, err = ParseAddr(string(text))
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	return err
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>}
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>func (ip Addr) marshalBinaryWithTrailingBytes(trailingBytes int) []byte {
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	var b []byte
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	switch ip.z {
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	case z0:
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>		b = make([]byte, trailingBytes)
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	case z4:
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>		b = make([]byte, 4+trailingBytes)
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		bePutUint32(b, uint32(ip.addr.lo))
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	default:
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>		z := ip.Zone()
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>		b = make([]byte, 16+len(z)+trailingBytes)
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>		bePutUint64(b[:8], ip.addr.hi)
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>		bePutUint64(b[8:], ip.addr.lo)
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>		copy(b[16:], z)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	}
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	return b
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>}
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span><span class="comment">// MarshalBinary implements the [encoding.BinaryMarshaler] interface.</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span><span class="comment">// It returns a zero-length slice for the zero [Addr],</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span><span class="comment">// the 4-byte form for an IPv4 address,</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span><span class="comment">// and the 16-byte form with zone appended for an IPv6 address.</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>func (ip Addr) MarshalBinary() ([]byte, error) {
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	return ip.marshalBinaryWithTrailingBytes(0), nil
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>}
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span><span class="comment">// UnmarshalBinary implements the [encoding.BinaryUnmarshaler] interface.</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span><span class="comment">// It expects data in the form generated by MarshalBinary.</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>func (ip *Addr) UnmarshalBinary(b []byte) error {
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	n := len(b)
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	switch {
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	case n == 0:
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>		*ip = Addr{}
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>		return nil
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>	case n == 4:
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>		*ip = AddrFrom4([4]byte(b))
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>		return nil
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	case n == 16:
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>		*ip = AddrFrom16([16]byte(b))
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>		return nil
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>	case n &gt; 16:
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>		*ip = AddrFrom16([16]byte(b[:16])).WithZone(string(b[16:]))
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>		return nil
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	}
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	return errors.New(&#34;unexpected slice size&#34;)
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// AddrPort is an IP and a port number.</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>type AddrPort struct {
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	ip   Addr
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	port uint16
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>}
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span><span class="comment">// AddrPortFrom returns an [AddrPort] with the provided IP and port.</span>
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span><span class="comment">// It does not allocate.</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>func AddrPortFrom(ip Addr, port uint16) AddrPort { return AddrPort{ip: ip, port: port} }
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span><span class="comment">// Addr returns p&#39;s IP address.</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>func (p AddrPort) Addr() Addr { return p.ip }
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span><span class="comment">// Port returns p&#39;s port.</span>
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>func (p AddrPort) Port() uint16 { return p.port }
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span><span class="comment">// splitAddrPort splits s into an IP address string and a port</span>
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span><span class="comment">// string. It splits strings shaped like &#34;foo:bar&#34; or &#34;[foo]:bar&#34;,</span>
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span><span class="comment">// without further validating the substrings. v6 indicates whether the</span>
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span><span class="comment">// ip string should parse as an IPv6 address or an IPv4 address, in</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// order for s to be a valid ip:port string.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>func splitAddrPort(s string) (ip, port string, v6 bool, err error) {
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>	i := bytealg.LastIndexByteString(s, &#39;:&#39;)
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>	if i == -1 {
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false, errors.New(&#34;not an ip:port&#34;)
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>	}
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>	ip, port = s[:i], s[i+1:]
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>	if len(ip) == 0 {
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false, errors.New(&#34;no IP&#34;)
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>	}
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	if len(port) == 0 {
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>		return &#34;&#34;, &#34;&#34;, false, errors.New(&#34;no port&#34;)
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>	}
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	if ip[0] == &#39;[&#39; {
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>		if len(ip) &lt; 2 || ip[len(ip)-1] != &#39;]&#39; {
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>			return &#34;&#34;, &#34;&#34;, false, errors.New(&#34;missing ]&#34;)
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		}
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>		ip = ip[1 : len(ip)-1]
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>		v6 = true
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	}
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	return ip, port, v6, nil
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span><span class="comment">// ParseAddrPort parses s as an [AddrPort].</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span><span class="comment">// It doesn&#39;t do any name resolution: both the address and the port</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span><span class="comment">// must be numeric.</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>func ParseAddrPort(s string) (AddrPort, error) {
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	var ipp AddrPort
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	ip, port, v6, err := splitAddrPort(s)
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	if err != nil {
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>		return ipp, err
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>	}
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	port16, err := strconv.ParseUint(port, 10, 16)
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	if err != nil {
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>		return ipp, errors.New(&#34;invalid port &#34; + strconv.Quote(port) + &#34; parsing &#34; + strconv.Quote(s))
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	}
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	ipp.port = uint16(port16)
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>	ipp.ip, err = ParseAddr(ip)
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>	if err != nil {
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>		return AddrPort{}, err
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	}
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	if v6 &amp;&amp; ipp.ip.Is4() {
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>		return AddrPort{}, errors.New(&#34;invalid ip:port &#34; + strconv.Quote(s) + &#34;, square brackets can only be used with IPv6 addresses&#34;)
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	} else if !v6 &amp;&amp; ipp.ip.Is6() {
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>		return AddrPort{}, errors.New(&#34;invalid ip:port &#34; + strconv.Quote(s) + &#34;, IPv6 addresses must be surrounded by square brackets&#34;)
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>	}
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>	return ipp, nil
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>}
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span><span class="comment">// MustParseAddrPort calls [ParseAddrPort](s) and panics on error.</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span><span class="comment">// It is intended for use in tests with hard-coded strings.</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>func MustParseAddrPort(s string) AddrPort {
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>	ip, err := ParseAddrPort(s)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>	if err != nil {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		panic(err)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>	}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>	return ip
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>}
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether p.Addr() is valid.</span>
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span><span class="comment">// All ports are valid, including zero.</span>
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>func (p AddrPort) IsValid() bool { return p.ip.IsValid() }
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span><span class="comment">// Compare returns an integer comparing two AddrPorts.</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span><span class="comment">// The result will be 0 if p == p2, -1 if p &lt; p2, and +1 if p &gt; p2.</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span><span class="comment">// AddrPorts sort first by IP address, then port.</span>
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>func (p AddrPort) Compare(p2 AddrPort) int {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>	if c := p.Addr().Compare(p2.Addr()); c != 0 {
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>		return c
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>	}
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	return cmp.Compare(p.Port(), p2.Port())
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>}
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>func (p AddrPort) String() string {
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	switch p.ip.z {
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	case z0:
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		return &#34;invalid AddrPort&#34;
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	case z4:
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>		const max = len(&#34;255.255.255.255:65535&#34;)
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		buf := make([]byte, 0, max)
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>		buf = p.ip.appendTo4(buf)
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>		buf = append(buf, &#39;:&#39;)
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>		buf = strconv.AppendUint(buf, uint64(p.port), 10)
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		return string(buf)
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	default:
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>		<span class="comment">// TODO: this could be more efficient allocation-wise:</span>
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		return &#34;[&#34; + p.ip.String() + &#34;]:&#34; + itoa.Uitoa(uint(p.port))
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>}
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span><span class="comment">// AppendTo appends a text encoding of p,</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span><span class="comment">// as generated by [AddrPort.MarshalText],</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span><span class="comment">// to b and returns the extended buffer.</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>func (p AddrPort) AppendTo(b []byte) []byte {
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	switch p.ip.z {
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	case z0:
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>		return b
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>	case z4:
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>		b = p.ip.appendTo4(b)
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	default:
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		if p.ip.Is4In6() {
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>			b = append(b, &#34;[::ffff:&#34;...)
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			b = p.ip.Unmap().appendTo4(b)
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			if z := p.ip.Zone(); z != &#34;&#34; {
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>				b = append(b, &#39;%&#39;)
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>				b = append(b, z...)
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>			}
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>		} else {
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>			b = append(b, &#39;[&#39;)
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>			b = p.ip.appendTo6(b)
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>		}
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>		b = append(b, &#39;]&#39;)
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>	}
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>	b = append(b, &#39;:&#39;)
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>	b = strconv.AppendUint(b, uint64(p.port), 10)
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>	return b
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>}
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span><span class="comment">// MarshalText implements the [encoding.TextMarshaler] interface. The</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span><span class="comment">// encoding is the same as returned by [AddrPort.String], with one exception: if</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span><span class="comment">// p.Addr() is the zero [Addr], the encoding is the empty string.</span>
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>func (p AddrPort) MarshalText() ([]byte, error) {
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>	var max int
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>	switch p.ip.z {
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>	case z0:
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	case z4:
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		max = len(&#34;255.255.255.255:65535&#34;)
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	default:
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>		max = len(&#34;[ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%enp5s0]:65535&#34;)
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	}
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	b := make([]byte, 0, max)
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	b = p.AppendTo(b)
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	return b, nil
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>}
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span><span class="comment">// UnmarshalText implements the encoding.TextUnmarshaler</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span><span class="comment">// interface. The [AddrPort] is expected in a form</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span><span class="comment">// generated by [AddrPort.MarshalText] or accepted by [ParseAddrPort].</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>func (p *AddrPort) UnmarshalText(text []byte) error {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	if len(text) == 0 {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>		*p = AddrPort{}
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		return nil
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>	}
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>	var err error
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	*p, err = ParseAddrPort(string(text))
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>	return err
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>}
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span><span class="comment">// MarshalBinary implements the [encoding.BinaryMarshaler] interface.</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span><span class="comment">// It returns [Addr.MarshalBinary] with an additional two bytes appended</span>
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span><span class="comment">// containing the port in little-endian.</span>
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>func (p AddrPort) MarshalBinary() ([]byte, error) {
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	b := p.Addr().marshalBinaryWithTrailingBytes(2)
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	lePutUint16(b[len(b)-2:], p.Port())
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>	return b, nil
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>}
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span><span class="comment">// UnmarshalBinary implements the [encoding.BinaryUnmarshaler] interface.</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span><span class="comment">// It expects data in the form generated by [AddrPort.MarshalBinary].</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>func (p *AddrPort) UnmarshalBinary(b []byte) error {
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>	if len(b) &lt; 2 {
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>		return errors.New(&#34;unexpected slice size&#34;)
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>	}
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>	var addr Addr
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	err := addr.UnmarshalBinary(b[:len(b)-2])
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	if err != nil {
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>		return err
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>	}
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>	*p = AddrPortFrom(addr, leUint16(b[len(b)-2:]))
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	return nil
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>}
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span><span class="comment">// Prefix is an IP address prefix (CIDR) representing an IP network.</span>
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span><span class="comment">// The first [Prefix.Bits]() of [Addr]() are specified. The remaining bits match any address.</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span><span class="comment">// The range of Bits() is [0,32] for IPv4 or [0,128] for IPv6.</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>type Prefix struct {
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>	ip Addr
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>	<span class="comment">// bitsPlusOne stores the prefix bit length plus one.</span>
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>	<span class="comment">// A Prefix is valid if and only if bitsPlusOne is non-zero.</span>
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	bitsPlusOne uint8
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>}
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span><span class="comment">// PrefixFrom returns a [Prefix] with the provided IP address and bit</span>
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span><span class="comment">// prefix length.</span>
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span><span class="comment">// It does not allocate. Unlike [Addr.Prefix], [PrefixFrom] does not mask</span>
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span><span class="comment">// off the host bits of ip.</span>
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span><span class="comment">// If bits is less than zero or greater than ip.BitLen, [Prefix.Bits]</span>
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span><span class="comment">// will return an invalid value -1.</span>
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>func PrefixFrom(ip Addr, bits int) Prefix {
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	var bitsPlusOne uint8
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	if !ip.isZero() &amp;&amp; bits &gt;= 0 &amp;&amp; bits &lt;= ip.BitLen() {
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>		bitsPlusOne = uint8(bits) + 1
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>	}
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>	return Prefix{
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>		ip:          ip.withoutZone(),
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>		bitsPlusOne: bitsPlusOne,
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	}
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>}
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span><span class="comment">// Addr returns p&#39;s IP address.</span>
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>func (p Prefix) Addr() Addr { return p.ip }
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span><span class="comment">// Bits returns p&#39;s prefix length.</span>
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span><span class="comment">// It reports -1 if invalid.</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span>func (p Prefix) Bits() int { return int(p.bitsPlusOne) - 1 }
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span><span class="comment">// IsValid reports whether p.Bits() has a valid range for p.Addr().</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span><span class="comment">// If p.Addr() is the zero [Addr], IsValid returns false.</span>
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span><span class="comment">// Note that if p is the zero [Prefix], then p.IsValid() == false.</span>
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>func (p Prefix) IsValid() bool { return p.bitsPlusOne &gt; 0 }
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>func (p Prefix) isZero() bool { return p == Prefix{} }
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span><span class="comment">// IsSingleIP reports whether p contains exactly one IP.</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>func (p Prefix) IsSingleIP() bool { return p.IsValid() &amp;&amp; p.Bits() == p.ip.BitLen() }
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span><span class="comment">// compare returns an integer comparing two prefixes.</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span><span class="comment">// The result will be 0 if p == p2, -1 if p &lt; p2, and +1 if p &gt; p2.</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span><span class="comment">// Prefixes sort first by validity (invalid before valid), then</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span><span class="comment">// address family (IPv4 before IPv6), then prefix length, then</span>
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span><span class="comment">// address.</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span><span class="comment">// Unexported for Go 1.22 because we may want to compare by p.Addr first.</span>
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span><span class="comment">// See post-acceptance discussion on go.dev/issue/61642.</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>func (p Prefix) compare(p2 Prefix) int {
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	if c := cmp.Compare(p.Addr().BitLen(), p2.Addr().BitLen()); c != 0 {
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>		return c
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>	}
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>	if c := cmp.Compare(p.Bits(), p2.Bits()); c != 0 {
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		return c
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>	}
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>	return p.Addr().Compare(p2.Addr())
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>}
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span><span class="comment">// ParsePrefix parses s as an IP address prefix.</span>
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span><span class="comment">// The string can be in the form &#34;192.168.1.0/24&#34; or &#34;2001:db8::/32&#34;,</span>
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span><span class="comment">// the CIDR notation defined in RFC 4632 and RFC 4291.</span>
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span><span class="comment">// IPv6 zones are not permitted in prefixes, and an error will be returned if a</span>
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span><span class="comment">// zone is present.</span>
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span><span class="comment">// Note that masked address bits are not zeroed. Use Masked for that.</span>
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>func ParsePrefix(s string) (Prefix, error) {
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>	i := bytealg.LastIndexByteString(s, &#39;/&#39;)
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>	if i &lt; 0 {
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): no &#39;/&#39;&#34;)
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>	}
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>	ip, err := ParseAddr(s[:i])
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>	if err != nil {
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): &#34; + err.Error())
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>	}
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>	<span class="comment">// IPv6 zones are not allowed: https://go.dev/issue/51899</span>
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>	if ip.Is6() &amp;&amp; ip.z != z6noz {
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): IPv6 zones cannot be present in a prefix&#34;)
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>	}
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>	bitsStr := s[i+1:]
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>	<span class="comment">// strconv.Atoi accepts a leading sign and leading zeroes, but we don&#39;t want that.</span>
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>	if len(bitsStr) &gt; 1 &amp;&amp; (bitsStr[0] &lt; &#39;1&#39; || bitsStr[0] &gt; &#39;9&#39;) {
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): bad bits after slash: &#34; + strconv.Quote(bitsStr))
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>	}
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	bits, err := strconv.Atoi(bitsStr)
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>	if err != nil {
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): bad bits after slash: &#34; + strconv.Quote(bitsStr))
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>	}
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>	maxBits := 32
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>	if ip.Is6() {
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>		maxBits = 128
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>	}
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>	if bits &lt; 0 || bits &gt; maxBits {
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>		return Prefix{}, errors.New(&#34;netip.ParsePrefix(&#34; + strconv.Quote(s) + &#34;): prefix length out of range&#34;)
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>	}
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>	return PrefixFrom(ip, bits), nil
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>}
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span><span class="comment">// MustParsePrefix calls [ParsePrefix](s) and panics on error.</span>
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span><span class="comment">// It is intended for use in tests with hard-coded strings.</span>
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>func MustParsePrefix(s string) Prefix {
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>	ip, err := ParsePrefix(s)
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>	if err != nil {
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>		panic(err)
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>	}
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>	return ip
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>}
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span><span class="comment">// Masked returns p in its canonical form, with all but the high</span>
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span><span class="comment">// p.Bits() bits of p.Addr() masked off.</span>
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span><span class="comment">// If p is zero or otherwise invalid, Masked returns the zero [Prefix].</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span>func (p Prefix) Masked() Prefix {
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span>	m, _ := p.ip.Prefix(p.Bits())
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span>	return m
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>}
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span><span class="comment">// Contains reports whether the network p includes ip.</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span><span class="comment">// An IPv4 address will not match an IPv6 prefix.</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span><span class="comment">// An IPv4-mapped IPv6 address will not match an IPv4 prefix.</span>
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span><span class="comment">// A zero-value IP will not match any prefix.</span>
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span><span class="comment">// If ip has an IPv6 zone, Contains returns false,</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span><span class="comment">// because Prefixes strip zones.</span>
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span>func (p Prefix) Contains(ip Addr) bool {
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span>	if !p.IsValid() || ip.hasZone() {
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span>		return false
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span>	}
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>	if f1, f2 := p.ip.BitLen(), ip.BitLen(); f1 == 0 || f2 == 0 || f1 != f2 {
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>		return false
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>	}
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>	if ip.Is4() {
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>		<span class="comment">// xor the IP addresses together; mismatched bits are now ones.</span>
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>		<span class="comment">// Shift away the number of bits we don&#39;t care about.</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>		<span class="comment">// Shifts in Go are more efficient if the compiler can prove</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>		<span class="comment">// that the shift amount is smaller than the width of the shifted type (64 here).</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>		<span class="comment">// We know that p.bits is in the range 0..32 because p is Valid;</span>
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>		<span class="comment">// the compiler doesn&#39;t know that, so mask with 63 to help it.</span>
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>		<span class="comment">// Now truncate to 32 bits, because this is IPv4.</span>
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>		<span class="comment">// If all the bits we care about are equal, the result will be zero.</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>		return uint32((ip.addr.lo^p.ip.addr.lo)&gt;&gt;((32-p.Bits())&amp;63)) == 0
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>	} else {
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>		<span class="comment">// xor the IP addresses together.</span>
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>		<span class="comment">// Mask away the bits we don&#39;t care about.</span>
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>		<span class="comment">// If all the bits we care about are equal, the result will be zero.</span>
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>		return ip.addr.xor(p.ip.addr).and(mask6(p.Bits())).isZero()
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>	}
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>}
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span><span class="comment">// Overlaps reports whether p and o contain any IP addresses in common.</span>
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span><span class="comment">// If p and o are of different address families or either have a zero</span>
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span><span class="comment">// IP, it reports false. Like the Contains method, a prefix with an</span>
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span><span class="comment">// IPv4-mapped IPv6 address is still treated as an IPv6 mask.</span>
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>func (p Prefix) Overlaps(o Prefix) bool {
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	if !p.IsValid() || !o.IsValid() {
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>		return false
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	}
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>	if p == o {
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>		return true
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>	}
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>	if p.ip.Is4() != o.ip.Is4() {
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>		return false
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>	}
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>	var minBits int
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	if pb, ob := p.Bits(), o.Bits(); pb &lt; ob {
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>		minBits = pb
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>	} else {
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>		minBits = ob
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>	}
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>	if minBits == 0 {
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>		return true
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	}
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>	<span class="comment">// One of these Prefix calls might look redundant, but we don&#39;t require</span>
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	<span class="comment">// that p and o values are normalized (via Prefix.Masked) first,</span>
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>	<span class="comment">// so the Prefix call on the one that&#39;s already minBits serves to zero</span>
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>	<span class="comment">// out any remaining bits in IP.</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	var err error
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	if p, err = p.ip.Prefix(minBits); err != nil {
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>		return false
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>	}
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	if o, err = o.ip.Prefix(minBits); err != nil {
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		return false
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>	}
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	return p.ip == o.ip
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>}
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span><span class="comment">// AppendTo appends a text encoding of p,</span>
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span><span class="comment">// as generated by [Prefix.MarshalText],</span>
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span><span class="comment">// to b and returns the extended buffer.</span>
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>func (p Prefix) AppendTo(b []byte) []byte {
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>	if p.isZero() {
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>		return b
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>	}
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>	if !p.IsValid() {
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>		return append(b, &#34;invalid Prefix&#34;...)
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>	}
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>	<span class="comment">// p.ip is non-nil, because p is valid.</span>
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>	if p.ip.z == z4 {
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>		b = p.ip.appendTo4(b)
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>	} else {
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>		if p.ip.Is4In6() {
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>			b = append(b, &#34;::ffff:&#34;...)
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>			b = p.ip.Unmap().appendTo4(b)
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>		} else {
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>			b = p.ip.appendTo6(b)
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>		}
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>	}
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>	b = append(b, &#39;/&#39;)
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>	b = appendDecimal(b, uint8(p.Bits()))
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>	return b
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>}
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span><span class="comment">// MarshalText implements the [encoding.TextMarshaler] interface,</span>
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span><span class="comment">// The encoding is the same as returned by [Prefix.String], with one exception:</span>
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span><span class="comment">// If p is the zero value, the encoding is the empty string.</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>func (p Prefix) MarshalText() ([]byte, error) {
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>	var max int
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>	switch p.ip.z {
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>	case z0:
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>	case z4:
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		max = len(&#34;255.255.255.255/32&#34;)
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>	default:
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>		max = len(&#34;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff%enp5s0/128&#34;)
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>	}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>	b := make([]byte, 0, max)
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>	b = p.AppendTo(b)
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>	return b, nil
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>}
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span><span class="comment">// UnmarshalText implements the encoding.TextUnmarshaler interface.</span>
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span><span class="comment">// The IP address is expected in a form accepted by [ParsePrefix]</span>
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span><span class="comment">// or generated by [Prefix.MarshalText].</span>
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>func (p *Prefix) UnmarshalText(text []byte) error {
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>	if len(text) == 0 {
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>		*p = Prefix{}
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>		return nil
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>	}
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>	var err error
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>	*p, err = ParsePrefix(string(text))
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>	return err
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>}
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span><span class="comment">// MarshalBinary implements the [encoding.BinaryMarshaler] interface.</span>
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span><span class="comment">// It returns [Addr.MarshalBinary] with an additional byte appended</span>
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span><span class="comment">// containing the prefix bits.</span>
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>func (p Prefix) MarshalBinary() ([]byte, error) {
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>	b := p.Addr().withoutZone().marshalBinaryWithTrailingBytes(1)
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>	b[len(b)-1] = uint8(p.Bits())
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>	return b, nil
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span>}
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span>
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span><span class="comment">// UnmarshalBinary implements the [encoding.BinaryUnmarshaler] interface.</span>
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span><span class="comment">// It expects data in the form generated by [Prefix.MarshalBinary].</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span>func (p *Prefix) UnmarshalBinary(b []byte) error {
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span>	if len(b) &lt; 1 {
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span>		return errors.New(&#34;unexpected slice size&#34;)
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span>	}
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span>	var addr Addr
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span>	err := addr.UnmarshalBinary(b[:len(b)-1])
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span>	if err != nil {
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span>		return err
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span>	}
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span>	*p = PrefixFrom(addr, int(b[len(b)-1]))
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span>	return nil
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span>}
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span>
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span><span class="comment">// String returns the CIDR notation of p: &#34;&lt;ip&gt;/&lt;bits&gt;&#34;.</span>
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span>func (p Prefix) String() string {
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>	if !p.IsValid() {
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>		return &#34;invalid Prefix&#34;
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>	}
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>	return p.ip.String() + &#34;/&#34; + itoa.Itoa(p.Bits())
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>}
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>
</pre><p><a href="netip.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
