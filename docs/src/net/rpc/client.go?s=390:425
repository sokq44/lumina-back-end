<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/rpc/client.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./client.go?s=390:425#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/rpc">rpc</a>/<span class="text-muted">client.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/rpc">net/rpc</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package rpc
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;encoding/gob&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>)
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// ServerError represents an error that has been returned from</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// the remote side of the RPC connection.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>type ServerError string
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="selection">func (e ServerError) Error() string</span> {
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	return string(e)
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>}
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>var ErrShutdown = errors.New(&#34;connection is shut down&#34;)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Call represents an active RPC.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>type Call struct {
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	ServiceMethod string     <span class="comment">// The name of the service and method to call.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	Args          any        <span class="comment">// The argument to the function (*struct).</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	Reply         any        <span class="comment">// The reply from the function (*struct).</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	Error         error      <span class="comment">// After completion, the error status.</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	Done          chan *Call <span class="comment">// Receives *Call when Go is complete.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>}
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Client represents an RPC Client.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// There may be multiple outstanding Calls associated</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">// with a single Client, and a Client may be used by</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// multiple goroutines simultaneously.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>type Client struct {
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	codec ClientCodec
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	reqMutex sync.Mutex <span class="comment">// protects following</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	request  Request
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	mutex    sync.Mutex <span class="comment">// protects following</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	seq      uint64
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	pending  map[uint64]*Call
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	closing  bool <span class="comment">// user has called Close</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	shutdown bool <span class="comment">// server has told us to stop</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">// A ClientCodec implements writing of RPC requests and</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// reading of RPC responses for the client side of an RPC session.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// The client calls [ClientCodec.WriteRequest] to write a request to the connection</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// and calls [ClientCodec.ReadResponseHeader] and [ClientCodec.ReadResponseBody] in pairs</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// to read responses. The client calls [ClientCodec.Close] when finished with the</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// connection. ReadResponseBody may be called with a nil</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">// argument to force the body of the response to be read and then</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// discarded.</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// See [NewClient]&#39;s comment for information about concurrent access.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>type ClientCodec interface {
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	WriteRequest(*Request, any) error
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	ReadResponseHeader(*Response) error
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	ReadResponseBody(any) error
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Close() error
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>func (client *Client) send(call *Call) {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	client.reqMutex.Lock()
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	defer client.reqMutex.Unlock()
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// Register this call.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	client.mutex.Lock()
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	if client.shutdown || client.closing {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		client.mutex.Unlock()
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		call.Error = ErrShutdown
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		call.done()
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		return
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	seq := client.seq
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	client.seq++
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	client.pending[seq] = call
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	client.mutex.Unlock()
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// Encode and send the request.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	client.request.Seq = seq
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	client.request.ServiceMethod = call.ServiceMethod
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	err := client.codec.WriteRequest(&amp;client.request, call.Args)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	if err != nil {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>		client.mutex.Lock()
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>		call = client.pending[seq]
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>		delete(client.pending, seq)
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>		client.mutex.Unlock()
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>		if call != nil {
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>			call.Error = err
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>			call.done()
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		}
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>}
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>func (client *Client) input() {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	var err error
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	var response Response
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	for err == nil {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		response = Response{}
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>		err = client.codec.ReadResponseHeader(&amp;response)
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		if err != nil {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>			break
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>		}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		seq := response.Seq
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		client.mutex.Lock()
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>		call := client.pending[seq]
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>		delete(client.pending, seq)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>		client.mutex.Unlock()
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>		switch {
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>		case call == nil:
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ve got no pending call. That usually means that</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>			<span class="comment">// WriteRequest partially failed, and call was already</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>			<span class="comment">// removed; response is a server telling us about an</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>			<span class="comment">// error reading request body. We should still attempt</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>			<span class="comment">// to read error body, but there&#39;s no one to give it to.</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>			err = client.codec.ReadResponseBody(nil)
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>			if err != nil {
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>				err = errors.New(&#34;reading error body: &#34; + err.Error())
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			}
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		case response.Error != &#34;&#34;:
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			<span class="comment">// We&#39;ve got an error response. Give this to the request;</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			<span class="comment">// any subsequent requests will get the ReadResponseBody</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>			<span class="comment">// error if there is one.</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			call.Error = ServerError(response.Error)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			err = client.codec.ReadResponseBody(nil)
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			if err != nil {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>				err = errors.New(&#34;reading error body: &#34; + err.Error())
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>			}
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>			call.done()
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		default:
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			err = client.codec.ReadResponseBody(call.Reply)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			if err != nil {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>				call.Error = errors.New(&#34;reading body &#34; + err.Error())
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>			call.done()
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// Terminate pending calls.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	client.reqMutex.Lock()
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	client.mutex.Lock()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	client.shutdown = true
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	closing := client.closing
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	if err == io.EOF {
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>		if closing {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			err = ErrShutdown
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		} else {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			err = io.ErrUnexpectedEOF
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	}
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	for _, call := range client.pending {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		call.Error = err
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		call.done()
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	client.mutex.Unlock()
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	client.reqMutex.Unlock()
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	if debugLog &amp;&amp; err != io.EOF &amp;&amp; !closing {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		log.Println(&#34;rpc: client protocol error:&#34;, err)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>}
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func (call *Call) done() {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	select {
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	case call.Done &lt;- call:
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		<span class="comment">// ok</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	default:
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		<span class="comment">// We don&#39;t want to block here. It is the caller&#39;s responsibility to make</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>		<span class="comment">// sure the channel has enough buffer space. See comment in Go().</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		if debugLog {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>			log.Println(&#34;rpc: discarding Call reply due to insufficient Done chan capacity&#34;)
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	}
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">// NewClient returns a new [Client] to handle requests to the</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// set of services at the other end of the connection.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// It adds a buffer to the write side of the connection so</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// the header and payload are sent as a unit.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span><span class="comment">// The read and write halves of the connection are serialized independently,</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span><span class="comment">// so no interlocking is required. However each half may be accessed</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span><span class="comment">// concurrently so the implementation of conn should protect against</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span><span class="comment">// concurrent reads or concurrent writes.</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>func NewClient(conn io.ReadWriteCloser) *Client {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	encBuf := bufio.NewWriter(conn)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	client := &amp;gobClientCodec{conn, gob.NewDecoder(conn), gob.NewEncoder(encBuf), encBuf}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	return NewClientWithCodec(client)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span><span class="comment">// NewClientWithCodec is like [NewClient] but uses the specified</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// codec to encode requests and decode responses.</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>func NewClientWithCodec(codec ClientCodec) *Client {
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	client := &amp;Client{
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		codec:   codec,
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		pending: make(map[uint64]*Call),
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	}
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	go client.input()
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	return client
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>}
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>type gobClientCodec struct {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	rwc    io.ReadWriteCloser
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	dec    *gob.Decoder
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	enc    *gob.Encoder
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	encBuf *bufio.Writer
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>}
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func (c *gobClientCodec) WriteRequest(r *Request, body any) (err error) {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if err = c.enc.Encode(r); err != nil {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if err = c.enc.Encode(body); err != nil {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		return
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	return c.encBuf.Flush()
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>}
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func (c *gobClientCodec) ReadResponseHeader(r *Response) error {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	return c.dec.Decode(r)
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>func (c *gobClientCodec) ReadResponseBody(body any) error {
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	return c.dec.Decode(body)
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>}
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>func (c *gobClientCodec) Close() error {
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	return c.rwc.Close()
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>}
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// DialHTTP connects to an HTTP RPC server at the specified network address</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// listening on the default HTTP RPC path.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>func DialHTTP(network, address string) (*Client, error) {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	return DialHTTPPath(network, address, DefaultRPCPath)
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>}
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// DialHTTPPath connects to an HTTP RPC server</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// at the specified network address and path.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func DialHTTPPath(network, address, path string) (*Client, error) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	conn, err := net.Dial(network, address)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if err != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return nil, err
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	io.WriteString(conn, &#34;CONNECT &#34;+path+&#34; HTTP/1.0\n\n&#34;)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Require successful HTTP response</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// before switching to RPC protocol.</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	resp, err := http.ReadResponse(bufio.NewReader(conn), &amp;http.Request{Method: &#34;CONNECT&#34;})
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	if err == nil &amp;&amp; resp.Status == connected {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		return NewClient(conn), nil
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	if err == nil {
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>		err = errors.New(&#34;unexpected HTTP response: &#34; + resp.Status)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	}
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	conn.Close()
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	return nil, &amp;net.OpError{
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		Op:   &#34;dial-http&#34;,
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		Net:  network + &#34; &#34; + address,
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>		Addr: nil,
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		Err:  err,
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	}
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// Dial connects to an RPC server at the specified network address.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>func Dial(network, address string) (*Client, error) {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	conn, err := net.Dial(network, address)
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if err != nil {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return nil, err
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return NewClient(conn), nil
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// Close calls the underlying codec&#39;s Close method. If the connection is already</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// shutting down, [ErrShutdown] is returned.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func (client *Client) Close() error {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	client.mutex.Lock()
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	if client.closing {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		client.mutex.Unlock()
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		return ErrShutdown
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	}
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	client.closing = true
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	client.mutex.Unlock()
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	return client.codec.Close()
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// Go invokes the function asynchronously. It returns the [Call] structure representing</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// the invocation. The done channel will signal when the call is complete by returning</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span><span class="comment">// the same Call object. If done is nil, Go will allocate a new channel.</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span><span class="comment">// If non-nil, done must be buffered or Go will deliberately crash.</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func (client *Client) Go(serviceMethod string, args any, reply any, done chan *Call) *Call {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	call := new(Call)
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>	call.ServiceMethod = serviceMethod
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	call.Args = args
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	call.Reply = reply
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if done == nil {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		done = make(chan *Call, 10) <span class="comment">// buffered.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	} else {
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		<span class="comment">// If caller passes done != nil, it must arrange that</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		<span class="comment">// done has enough buffer for the number of simultaneous</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		<span class="comment">// RPCs that will be using that channel. If the channel</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		<span class="comment">// is totally unbuffered, it&#39;s best not to run at all.</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if cap(done) == 0 {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			log.Panic(&#34;rpc: done channel is unbuffered&#34;)
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>		}
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	call.Done = done
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	client.send(call)
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	return call
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>}
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// Call invokes the named function, waits for it to complete, and returns its error status.</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>func (client *Client) Call(serviceMethod string, args any, reply any) error {
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	call := &lt;-client.Go(serviceMethod, args, reply, make(chan *Call, 1)).Done
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	return call.Error
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>}
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>
</pre><p><a href="client.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
