<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/rpc/server.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./server.go?s=13454:13510#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/rpc">rpc</a>/<span class="text-muted">server.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/rpc">net/rpc</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">/*
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>Package rpc provides access to the exported methods of an object across a
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>network or other I/O connection.  A server registers an object, making it visible
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>as a service with the name of the type of the object.  After registration, exported
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>methods of the object will be accessible remotely.  A server may register multiple
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>objects (services) of different types but it is an error to register multiple
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>objects of the same type.
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>Only methods that satisfy these criteria will be made available for remote access;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>other methods will be ignored:
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>  - the method&#39;s type is exported.
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>  - the method is exported.
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>  - the method has two arguments, both exported (or builtin) types.
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>  - the method&#39;s second argument is a pointer.
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>  - the method has return type error.
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>In effect, the method must look schematically like
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	func (t *T) MethodName(argType T1, replyType *T2) error
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>where T1 and T2 can be marshaled by encoding/gob.
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>These requirements apply even if a different codec is used.
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>(In the future, these requirements may soften for custom codecs.)
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>The method&#39;s first argument represents the arguments provided by the caller; the
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>second argument represents the result parameters to be returned to the caller.
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>The method&#39;s return value, if non-nil, is passed back as a string that the client
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>sees as if created by [errors.New].  If an error is returned, the reply parameter
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>will not be sent back to the client.
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>The server may handle requests on a single connection by calling [ServeConn].  More
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>typically it will create a network listener and call [Accept] or, for an HTTP
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>listener, [HandleHTTP] and [http.Serve].
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>A client wishing to use the service establishes a connection and then invokes
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>[NewClient] on the connection.  The convenience function [Dial] ([DialHTTP]) performs
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>both steps for a raw network connection (an HTTP connection).  The resulting
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>[Client] object has two methods, [Call] and Go, that specify the service and method to
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>call, a pointer containing the arguments, and a pointer to receive the result
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>parameters.
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>The Call method waits for the remote call to complete while the Go method
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>launches the call asynchronously and signals completion using the Call
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>structure&#39;s Done channel.
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>Unless an explicit codec is set up, package [encoding/gob] is used to
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>transport the data.
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>Here is a simple example.  A server wishes to export an object of type Arith:
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	package server
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	import &#34;errors&#34;
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	type Args struct {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>		A, B int
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	}
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	type Quotient struct {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>		Quo, Rem int
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	type Arith int
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	func (t *Arith) Multiply(args *Args, reply *int) error {
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		*reply = args.A * args.B
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		return nil
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	func (t *Arith) Divide(args *Args, quo *Quotient) error {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		if args.B == 0 {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			return errors.New(&#34;divide by zero&#34;)
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>		quo.Quo = args.A / args.B
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>		quo.Rem = args.A % args.B
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>		return nil
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	}
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>The server calls (for HTTP service):
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	arith := new(Arith)
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	rpc.Register(arith)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	rpc.HandleHTTP()
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	l, err := net.Listen(&#34;tcp&#34;, &#34;:1234&#34;)
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	if err != nil {
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>		log.Fatal(&#34;listen error:&#34;, err)
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	}
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	go http.Serve(l, nil)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>At this point, clients can see a service &#34;Arith&#34; with methods &#34;Arith.Multiply&#34; and
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>&#34;Arith.Divide&#34;.  To invoke one, a client first dials the server:
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	client, err := rpc.DialHTTP(&#34;tcp&#34;, serverAddress + &#34;:1234&#34;)
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if err != nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		log.Fatal(&#34;dialing:&#34;, err)
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>Then it can make a remote call:
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	// Synchronous call
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	args := &amp;server.Args{7,8}
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>	var reply int
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	err = client.Call(&#34;Arith.Multiply&#34;, args, &amp;reply)
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	if err != nil {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		log.Fatal(&#34;arith error:&#34;, err)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	fmt.Printf(&#34;Arith: %d*%d=%d&#34;, args.A, args.B, reply)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>or
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	// Asynchronous call
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	quotient := new(Quotient)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	divCall := client.Go(&#34;Arith.Divide&#34;, args, quotient, nil)
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	replyCall := &lt;-divCall.Done	// will be equal to divCall
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	// check errors, print, etc.
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>A server implementation will often provide a simple, type-safe wrapper for the
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>client.
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>The net/rpc package is frozen and is not accepting new features.
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>*/</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>package rpc
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>import (
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	&#34;encoding/gob&#34;
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	&#34;go/token&#34;
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	&#34;log&#34;
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	&#34;net/http&#34;
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	&#34;reflect&#34;
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>const (
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// Defaults used by HandleHTTP</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	DefaultRPCPath   = &#34;/_goRPC_&#34;
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	DefaultDebugPath = &#34;/debug/rpc&#34;
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>)
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span><span class="comment">// Precompute the reflect type for error.</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>var typeOfError = reflect.TypeFor[error]()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>type methodType struct {
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	sync.Mutex <span class="comment">// protects counters</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	method     reflect.Method
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	ArgType    reflect.Type
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	ReplyType  reflect.Type
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	numCalls   uint
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>type service struct {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	name   string                 <span class="comment">// name of service</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	rcvr   reflect.Value          <span class="comment">// receiver of methods for the service</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	typ    reflect.Type           <span class="comment">// type of the receiver</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	method map[string]*methodType <span class="comment">// registered methods</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>}
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// Request is a header written before every RPC call. It is used internally</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// but documented here as an aid to debugging, such as when analyzing</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// network traffic.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>type Request struct {
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	ServiceMethod string   <span class="comment">// format: &#34;Service.Method&#34;</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	Seq           uint64   <span class="comment">// sequence number chosen by client</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	next          *Request <span class="comment">// for free list in Server</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>}
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// Response is a header written before every RPC return. It is used internally</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// but documented here as an aid to debugging, such as when analyzing</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// network traffic.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>type Response struct {
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	ServiceMethod string    <span class="comment">// echoes that of the Request</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	Seq           uint64    <span class="comment">// echoes that of the request</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	Error         string    <span class="comment">// error, if any.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	next          *Response <span class="comment">// for free list in Server</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// Server represents an RPC Server.</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>type Server struct {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	serviceMap sync.Map   <span class="comment">// map[string]*service</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	reqLock    sync.Mutex <span class="comment">// protects freeReq</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	freeReq    *Request
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	respLock   sync.Mutex <span class="comment">// protects freeResp</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	freeResp   *Response
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>}
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// NewServer returns a new [Server].</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>func NewServer() *Server {
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	return &amp;Server{}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>}
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span><span class="comment">// DefaultServer is the default instance of [*Server].</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>var DefaultServer = NewServer()
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span><span class="comment">// Is this type exported or a builtin?</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>func isExportedOrBuiltinType(t reflect.Type) bool {
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	for t.Kind() == reflect.Pointer {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		t = t.Elem()
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// PkgPath will be non-empty even for an exported type,</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	<span class="comment">// so we need to check the type name as well.</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	return token.IsExported(t.Name()) || t.PkgPath() == &#34;&#34;
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>}
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span><span class="comment">// Register publishes in the server the set of methods of the</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// receiver value that satisfy the following conditions:</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">//   - exported method of exported type</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">//   - two arguments, both of exported type</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span><span class="comment">//   - the second argument is a pointer</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span><span class="comment">//   - one return value, of type error</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span><span class="comment">// It returns an error if the receiver is not an exported type or has</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span><span class="comment">// no suitable methods. It also logs the error using package log.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span><span class="comment">// The client accesses each method using a string of the form &#34;Type.Method&#34;,</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span><span class="comment">// where Type is the receiver&#39;s concrete type.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>func (server *Server) Register(rcvr any) error {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	return server.register(rcvr, &#34;&#34;, false)
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// RegisterName is like [Register] but uses the provided name for the type</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// instead of the receiver&#39;s concrete type.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func (server *Server) RegisterName(name string, rcvr any) error {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return server.register(rcvr, name, true)
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// logRegisterError specifies whether to log problems during method registration.</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// To debug registration, recompile the package with this set to true.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>const logRegisterError = false
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func (server *Server) register(rcvr any, name string, useName bool) error {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	s := new(service)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	s.typ = reflect.TypeOf(rcvr)
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	s.rcvr = reflect.ValueOf(rcvr)
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	sname := name
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	if !useName {
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>		sname = reflect.Indirect(s.rcvr).Type().Name()
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	}
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if sname == &#34;&#34; {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		s := &#34;rpc.Register: no service name for type &#34; + s.typ.String()
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		log.Print(s)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>		return errors.New(s)
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	}
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	if !useName &amp;&amp; !token.IsExported(sname) {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>		s := &#34;rpc.Register: type &#34; + sname + &#34; is not exported&#34;
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		log.Print(s)
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		return errors.New(s)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	s.name = sname
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// Install the methods</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	s.method = suitableMethods(s.typ, logRegisterError)
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	if len(s.method) == 0 {
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>		str := &#34;&#34;
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>		<span class="comment">// To help the user, see if a pointer receiver would work.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>		method := suitableMethods(reflect.PointerTo(s.typ), false)
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>		if len(method) != 0 {
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>			str = &#34;rpc.Register: type &#34; + sname + &#34; has no exported methods of suitable type (hint: pass a pointer to value of that type)&#34;
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>		} else {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>			str = &#34;rpc.Register: type &#34; + sname + &#34; has no exported methods of suitable type&#34;
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		}
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>		log.Print(str)
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>		return errors.New(str)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	}
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	if _, dup := server.serviceMap.LoadOrStore(sname, s); dup {
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>		return errors.New(&#34;rpc: service already defined: &#34; + sname)
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	}
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	return nil
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// suitableMethods returns suitable Rpc methods of typ. It will log</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// errors if logErr is true.</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>func suitableMethods(typ reflect.Type, logErr bool) map[string]*methodType {
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	methods := make(map[string]*methodType)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	for m := 0; m &lt; typ.NumMethod(); m++ {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>		method := typ.Method(m)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		mtype := method.Type
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>		mname := method.Name
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		<span class="comment">// Method must be exported.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if !method.IsExported() {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			continue
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		<span class="comment">// Method needs three ins: receiver, *args, *reply.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		if mtype.NumIn() != 3 {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>			if logErr {
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: method %q has %d input parameters; needs exactly three\n&#34;, mname, mtype.NumIn())
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>			}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			continue
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>		}
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		<span class="comment">// First arg need not be a pointer.</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		argType := mtype.In(1)
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		if !isExportedOrBuiltinType(argType) {
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>			if logErr {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: argument type of method %q is not exported: %q\n&#34;, mname, argType)
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>			}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>			continue
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>		}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>		<span class="comment">// Second arg must be a pointer.</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>		replyType := mtype.In(2)
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>		if replyType.Kind() != reflect.Pointer {
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>			if logErr {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: reply type of method %q is not a pointer: %q\n&#34;, mname, replyType)
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>			}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>			continue
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>		}
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>		<span class="comment">// Reply type must be exported.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>		if !isExportedOrBuiltinType(replyType) {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>			if logErr {
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: reply type of method %q is not exported: %q\n&#34;, mname, replyType)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>			}
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>			continue
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>		}
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		<span class="comment">// Method needs one out.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		if mtype.NumOut() != 1 {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			if logErr {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: method %q has %d output parameters; needs exactly one\n&#34;, mname, mtype.NumOut())
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			}
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			continue
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// The return type of the method must be error.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		if returnType := mtype.Out(0); returnType != typeOfError {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>			if logErr {
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>				log.Printf(&#34;rpc.Register: return type of method %q is %q, must be error\n&#34;, mname, returnType)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>			}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>			continue
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>		methods[mname] = &amp;methodType{method: method, ArgType: argType, ReplyType: replyType}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	}
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	return methods
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>}
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span><span class="comment">// A value sent as a placeholder for the server&#39;s response value when the server</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span><span class="comment">// receives an invalid request. It is never decoded by the client since the Response</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span><span class="comment">// contains an error when it is used.</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>var invalidRequest = struct{}{}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>func (server *Server) sendResponse(sending *sync.Mutex, req *Request, reply any, codec ServerCodec, errmsg string) {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	resp := server.getResponse()
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>	<span class="comment">// Encode the response header</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	resp.ServiceMethod = req.ServiceMethod
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	if errmsg != &#34;&#34; {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>		resp.Error = errmsg
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		reply = invalidRequest
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	resp.Seq = req.Seq
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>	sending.Lock()
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	err := codec.WriteResponse(resp, reply)
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	if debugLog &amp;&amp; err != nil {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		log.Println(&#34;rpc: writing response:&#34;, err)
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>	}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>	sending.Unlock()
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	server.freeResponse(resp)
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>func (m *methodType) NumCalls() (n uint) {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	m.Lock()
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	n = m.numCalls
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	m.Unlock()
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>	return n
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>func (s *service) call(server *Server, sending *sync.Mutex, wg *sync.WaitGroup, mtype *methodType, req *Request, argv, replyv reflect.Value, codec ServerCodec) {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>	if wg != nil {
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		defer wg.Done()
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	}
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	mtype.Lock()
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	mtype.numCalls++
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>	mtype.Unlock()
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>	function := mtype.method.Func
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	<span class="comment">// Invoke the method, providing a new value for the reply.</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	returnValues := function.Call([]reflect.Value{s.rcvr, argv, replyv})
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	<span class="comment">// The return value for the method is an error.</span>
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	errInter := returnValues[0].Interface()
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>	errmsg := &#34;&#34;
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	if errInter != nil {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>		errmsg = errInter.(error).Error()
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>	}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	server.sendResponse(sending, req, replyv.Interface(), codec, errmsg)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	server.freeRequest(req)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>type gobServerCodec struct {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	rwc    io.ReadWriteCloser
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>	dec    *gob.Decoder
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	enc    *gob.Encoder
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	encBuf *bufio.Writer
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	closed bool
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>func (c *gobServerCodec) ReadRequestHeader(r *Request) error {
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return c.dec.Decode(r)
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>func (c *gobServerCodec) ReadRequestBody(body any) error {
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	return c.dec.Decode(body)
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>func (c *gobServerCodec) WriteResponse(r *Response, body any) (err error) {
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	if err = c.enc.Encode(r); err != nil {
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>		if c.encBuf.Flush() == nil {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>			<span class="comment">// Gob couldn&#39;t encode the header. Should not happen, so if it does,</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			<span class="comment">// shut down the connection to signal that the connection is broken.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>			log.Println(&#34;rpc: gob error encoding response:&#34;, err)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			c.Close()
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		}
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>		return
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	}
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	if err = c.enc.Encode(body); err != nil {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		if c.encBuf.Flush() == nil {
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>			<span class="comment">// Was a gob problem encoding the body but the header has been written.</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			<span class="comment">// Shut down the connection to signal that the connection is broken.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			log.Println(&#34;rpc: gob error encoding body:&#34;, err)
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			c.Close()
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>		}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		return
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	}
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	return c.encBuf.Flush()
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>func (c *gobServerCodec) Close() error {
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	if c.closed {
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		<span class="comment">// Only call c.rwc.Close once; otherwise the semantics are undefined.</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		return nil
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>	}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>	c.closed = true
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>	return c.rwc.Close()
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span><span class="comment">// ServeConn runs the server on a single connection.</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// ServeConn blocks, serving the connection until the client hangs up.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// The caller typically invokes ServeConn in a go statement.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// ServeConn uses the gob wire format (see package gob) on the</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span><span class="comment">// connection. To use an alternate codec, use [ServeCodec].</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span><span class="comment">// See [NewClient]&#39;s comment for information about concurrent access.</span>
<span id="L445" class="ln">   445&nbsp;&nbsp;</span><span class="selection">func (server *Server) ServeConn(conn io.ReadWriteCloser)</span> {
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	buf := bufio.NewWriter(conn)
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	srv := &amp;gobServerCodec{
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		rwc:    conn,
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>		dec:    gob.NewDecoder(conn),
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		enc:    gob.NewEncoder(buf),
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>		encBuf: buf,
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	}
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	server.ServeCodec(srv)
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>}
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// ServeCodec is like [ServeConn] but uses the specified codec to</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// decode requests and encode responses.</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>func (server *Server) ServeCodec(codec ServerCodec) {
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	sending := new(sync.Mutex)
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	wg := new(sync.WaitGroup)
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	for {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>		service, mtype, req, argv, replyv, keepReading, err := server.readRequest(codec)
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>		if err != nil {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			if debugLog &amp;&amp; err != io.EOF {
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>				log.Println(&#34;rpc:&#34;, err)
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			}
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>			if !keepReading {
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>				break
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>			<span class="comment">// send a response if we actually managed to read a header.</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			if req != nil {
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>				server.sendResponse(sending, req, invalidRequest, codec, err.Error())
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>				server.freeRequest(req)
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>			}
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>			continue
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>		}
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		wg.Add(1)
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		go service.call(server, sending, wg, mtype, req, argv, replyv, codec)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">// We&#39;ve seen that there are no more requests.</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	<span class="comment">// Wait for responses to be sent before closing codec.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	wg.Wait()
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	codec.Close()
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>}
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// ServeRequest is like [ServeCodec] but synchronously serves a single request.</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// It does not close the codec upon completion.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>func (server *Server) ServeRequest(codec ServerCodec) error {
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>	sending := new(sync.Mutex)
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>	service, mtype, req, argv, replyv, keepReading, err := server.readRequest(codec)
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>	if err != nil {
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>		if !keepReading {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>			return err
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		}
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		<span class="comment">// send a response if we actually managed to read a header.</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		if req != nil {
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>			server.sendResponse(sending, req, invalidRequest, codec, err.Error())
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			server.freeRequest(req)
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>		}
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>		return err
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	}
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	service.call(server, sending, nil, mtype, req, argv, replyv, codec)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	return nil
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func (server *Server) getRequest() *Request {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	server.reqLock.Lock()
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	req := server.freeReq
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	if req == nil {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>		req = new(Request)
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	} else {
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		server.freeReq = req.next
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		*req = Request{}
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>	server.reqLock.Unlock()
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return req
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>func (server *Server) freeRequest(req *Request) {
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	server.reqLock.Lock()
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	req.next = server.freeReq
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	server.freeReq = req
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	server.reqLock.Unlock()
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>}
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>func (server *Server) getResponse() *Response {
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	server.respLock.Lock()
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	resp := server.freeResp
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	if resp == nil {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		resp = new(Response)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>	} else {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		server.freeResp = resp.next
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		*resp = Response{}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	server.respLock.Unlock()
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	return resp
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>func (server *Server) freeResponse(resp *Response) {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>	server.respLock.Lock()
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	resp.next = server.freeResp
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>	server.freeResp = resp
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>	server.respLock.Unlock()
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>}
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>func (server *Server) readRequest(codec ServerCodec) (service *service, mtype *methodType, req *Request, argv, replyv reflect.Value, keepReading bool, err error) {
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	service, mtype, req, keepReading, err = server.readRequestHeader(codec)
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	if err != nil {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		if !keepReading {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			return
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		<span class="comment">// discard body</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>		codec.ReadRequestBody(nil)
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>		return
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>	}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	<span class="comment">// Decode the argument value.</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>	argIsValue := false <span class="comment">// if true, need to indirect before calling.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if mtype.ArgType.Kind() == reflect.Pointer {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		argv = reflect.New(mtype.ArgType.Elem())
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	} else {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		argv = reflect.New(mtype.ArgType)
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		argIsValue = true
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	<span class="comment">// argv guaranteed to be a pointer now.</span>
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	if err = codec.ReadRequestBody(argv.Interface()); err != nil {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>		return
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>	}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	if argIsValue {
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		argv = argv.Elem()
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	}
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>	replyv = reflect.New(mtype.ReplyType.Elem())
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	switch mtype.ReplyType.Elem().Kind() {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	case reflect.Map:
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		replyv.Elem().Set(reflect.MakeMap(mtype.ReplyType.Elem()))
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>	case reflect.Slice:
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		replyv.Elem().Set(reflect.MakeSlice(mtype.ReplyType.Elem(), 0, 0))
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	}
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	return
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>func (server *Server) readRequestHeader(codec ServerCodec) (svc *service, mtype *methodType, req *Request, keepReading bool, err error) {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	<span class="comment">// Grab the request header.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>	req = server.getRequest()
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	err = codec.ReadRequestHeader(req)
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	if err != nil {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>		req = nil
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		if err == io.EOF || err == io.ErrUnexpectedEOF {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			return
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		err = errors.New(&#34;rpc: server cannot decode request: &#34; + err.Error())
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		return
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	<span class="comment">// We read the header successfully. If we see an error now,</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// we can still recover and move on to the next request.</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	keepReading = true
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	dot := strings.LastIndex(req.ServiceMethod, &#34;.&#34;)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	if dot &lt; 0 {
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>		err = errors.New(&#34;rpc: service/method request ill-formed: &#34; + req.ServiceMethod)
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		return
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	serviceName := req.ServiceMethod[:dot]
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	methodName := req.ServiceMethod[dot+1:]
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	<span class="comment">// Look up the request.</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	svci, ok := server.serviceMap.Load(serviceName)
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	if !ok {
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>		err = errors.New(&#34;rpc: can&#39;t find service &#34; + req.ServiceMethod)
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		return
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	svc = svci.(*service)
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	mtype = svc.method[methodName]
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	if mtype == nil {
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>		err = errors.New(&#34;rpc: can&#39;t find method &#34; + req.ServiceMethod)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	return
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span><span class="comment">// Accept accepts connections on the listener and serves requests</span>
<span id="L624" class="ln">   624&nbsp;&nbsp;</span><span class="comment">// for each incoming connection. Accept blocks until the listener</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span><span class="comment">// returns a non-nil error. The caller typically invokes Accept in a</span>
<span id="L626" class="ln">   626&nbsp;&nbsp;</span><span class="comment">// go statement.</span>
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>func (server *Server) Accept(lis net.Listener) {
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>	for {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		conn, err := lis.Accept()
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>		if err != nil {
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			log.Print(&#34;rpc.Serve: accept:&#34;, err.Error())
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>			return
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>		go server.ServeConn(conn)
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	}
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span><span class="comment">// Register publishes the receiver&#39;s methods in the [DefaultServer].</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>func Register(rcvr any) error { return DefaultServer.Register(rcvr) }
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
<span id="L641" class="ln">   641&nbsp;&nbsp;</span><span class="comment">// RegisterName is like [Register] but uses the provided name for the type</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// instead of the receiver&#39;s concrete type.</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>func RegisterName(name string, rcvr any) error {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	return DefaultServer.RegisterName(name, rcvr)
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>}
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span><span class="comment">// A ServerCodec implements reading of RPC requests and writing of</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span><span class="comment">// RPC responses for the server side of an RPC session.</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span><span class="comment">// The server calls [ServerCodec.ReadRequestHeader] and [ServerCodec.ReadRequestBody] in pairs</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span><span class="comment">// to read requests from the connection, and it calls [ServerCodec.WriteResponse] to</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span><span class="comment">// write a response back. The server calls [ServerCodec.Close] when finished with the</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span><span class="comment">// connection. ReadRequestBody may be called with a nil</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span><span class="comment">// argument to force the body of the request to be read and discarded.</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span><span class="comment">// See [NewClient]&#39;s comment for information about concurrent access.</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>type ServerCodec interface {
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>	ReadRequestHeader(*Request) error
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>	ReadRequestBody(any) error
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	WriteResponse(*Response, any) error
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	<span class="comment">// Close can be called multiple times and must be idempotent.</span>
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	Close() error
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>}
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>
<span id="L664" class="ln">   664&nbsp;&nbsp;</span><span class="comment">// ServeConn runs the [DefaultServer] on a single connection.</span>
<span id="L665" class="ln">   665&nbsp;&nbsp;</span><span class="comment">// ServeConn blocks, serving the connection until the client hangs up.</span>
<span id="L666" class="ln">   666&nbsp;&nbsp;</span><span class="comment">// The caller typically invokes ServeConn in a go statement.</span>
<span id="L667" class="ln">   667&nbsp;&nbsp;</span><span class="comment">// ServeConn uses the gob wire format (see package gob) on the</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span><span class="comment">// connection. To use an alternate codec, use [ServeCodec].</span>
<span id="L669" class="ln">   669&nbsp;&nbsp;</span><span class="comment">// See [NewClient]&#39;s comment for information about concurrent access.</span>
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>func ServeConn(conn io.ReadWriteCloser) {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>	DefaultServer.ServeConn(conn)
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>}
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span><span class="comment">// ServeCodec is like [ServeConn] but uses the specified codec to</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">// decode requests and encode responses.</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>func ServeCodec(codec ServerCodec) {
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	DefaultServer.ServeCodec(codec)
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>}
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span><span class="comment">// ServeRequest is like [ServeCodec] but synchronously serves a single request.</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span><span class="comment">// It does not close the codec upon completion.</span>
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>func ServeRequest(codec ServerCodec) error {
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	return DefaultServer.ServeRequest(codec)
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>}
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span><span class="comment">// Accept accepts connections on the listener and serves requests</span>
<span id="L687" class="ln">   687&nbsp;&nbsp;</span><span class="comment">// to [DefaultServer] for each incoming connection.</span>
<span id="L688" class="ln">   688&nbsp;&nbsp;</span><span class="comment">// Accept blocks; the caller typically invokes it in a go statement.</span>
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>func Accept(lis net.Listener) { DefaultServer.Accept(lis) }
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span><span class="comment">// Can connect to RPC service using HTTP CONNECT to rpcPath.</span>
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>var connected = &#34;200 Connected to Go RPC&#34;
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>
<span id="L694" class="ln">   694&nbsp;&nbsp;</span><span class="comment">// ServeHTTP implements an [http.Handler] that answers RPC requests.</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request) {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	if req.Method != &#34;CONNECT&#34; {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		w.WriteHeader(http.StatusMethodNotAllowed)
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		io.WriteString(w, &#34;405 must CONNECT\n&#34;)
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		return
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>	}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>	conn, _, err := w.(http.Hijacker).Hijack()
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>	if err != nil {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		log.Print(&#34;rpc hijacking &#34;, req.RemoteAddr, &#34;: &#34;, err.Error())
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>		return
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	}
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>	io.WriteString(conn, &#34;HTTP/1.0 &#34;+connected+&#34;\n\n&#34;)
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	server.ServeConn(conn)
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>}
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">// HandleHTTP registers an HTTP handler for RPC messages on rpcPath,</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">// and a debugging handler on debugPath.</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">// It is still necessary to invoke [http.Serve](), typically in a go statement.</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>func (server *Server) HandleHTTP(rpcPath, debugPath string) {
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>	http.Handle(rpcPath, server)
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	http.Handle(debugPath, debugHTTP{server})
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span><span class="comment">// HandleHTTP registers an HTTP handler for RPC messages to [DefaultServer]</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span><span class="comment">// on [DefaultRPCPath] and a debugging handler on [DefaultDebugPath].</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span><span class="comment">// It is still necessary to invoke [http.Serve](), typically in a go statement.</span>
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>func HandleHTTP() {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	DefaultServer.HandleHTTP(DefaultRPCPath, DefaultDebugPath)
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>}
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>
</pre><p><a href="server.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
