<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/smtp/smtp.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./smtp.go?s=7493:7531#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/smtp">smtp</a>/<span class="text-muted">smtp.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/smtp">net/smtp</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// It also implements the following extensions:</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//	8BITMIME  RFC 1652</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//	AUTH      RFC 2554</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//	STARTTLS  RFC 3207</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// Additional extensions may be handled by clients.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// The smtp package is frozen and is not accepting new features.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// Some external packages provide more functionality. See:</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//	https://godoc.org/?q=smtp</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>package smtp
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>import (
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;crypto/tls&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;encoding/base64&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	&#34;net&#34;
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	&#34;net/textproto&#34;
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>)
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// A Client represents a client connection to an SMTP server.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>type Client struct {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	<span class="comment">// Text is the textproto.Conn used by the Client. It is exported to allow for</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>	<span class="comment">// clients to add extensions.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	Text *textproto.Conn
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	<span class="comment">// keep a reference to the connection so it can be used to create a TLS</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	<span class="comment">// connection later</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	conn net.Conn
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	<span class="comment">// whether the Client is using TLS</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	tls        bool
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	serverName string
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// map of supported extensions</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	ext map[string]string
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	<span class="comment">// supported auth mechanisms</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	auth       []string
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	localName  string <span class="comment">// the name to use in HELO/EHLO</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	didHello   bool   <span class="comment">// whether we&#39;ve said HELO/EHLO</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	helloError error  <span class="comment">// the error from the hello</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>}
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">// Dial returns a new [Client] connected to an SMTP server at addr.</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">// The addr must include a port, as in &#34;mail.example.com:smtp&#34;.</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>func Dial(addr string) (*Client, error) {
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	conn, err := net.Dial(&#34;tcp&#34;, addr)
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	if err != nil {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		return nil, err
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	}
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	host, _, _ := net.SplitHostPort(addr)
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	return NewClient(conn, host)
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>}
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// NewClient returns a new [Client] using an existing connection and host as a</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// server name to be used when authenticating.</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>func NewClient(conn net.Conn, host string) (*Client, error) {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	text := textproto.NewConn(conn)
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	_, _, err := text.ReadResponse(220)
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	if err != nil {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		text.Close()
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		return nil, err
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	}
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	c := &amp;Client{Text: text, conn: conn, serverName: host, localName: &#34;localhost&#34;}
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	_, c.tls = conn.(*tls.Conn)
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	return c, nil
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Close closes the connection.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>func (c *Client) Close() error {
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	return c.Text.Close()
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">// hello runs a hello exchange if needed.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>func (c *Client) hello() error {
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>	if !c.didHello {
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>		c.didHello = true
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>		err := c.ehlo()
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>		if err != nil {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>			c.helloError = c.helo()
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>		}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>	return c.helloError
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>}
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// Hello sends a HELO or EHLO to the server as the given host name.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// Calling this method is only necessary if the client needs control</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">// over the host name used. The client will introduce itself as &#34;localhost&#34;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// automatically otherwise. If Hello is called, it must be called before</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// any of the other methods.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>func (c *Client) Hello(localName string) error {
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	if err := validateLine(localName); err != nil {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>		return err
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	}
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	if c.didHello {
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>		return errors.New(&#34;smtp: Hello called after other methods&#34;)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	}
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	c.localName = localName
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	return c.hello()
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// cmd is a convenience function that sends a command and returns the response</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>func (c *Client) cmd(expectCode int, format string, args ...any) (int, string, error) {
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	id, err := c.Text.Cmd(format, args...)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	if err != nil {
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>		return 0, &#34;&#34;, err
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	}
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	c.Text.StartResponse(id)
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	defer c.Text.EndResponse(id)
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	code, msg, err := c.Text.ReadResponse(expectCode)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return code, msg, err
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// helo sends the HELO greeting to the server. It should be used only when the</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// server does not support ehlo.</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>func (c *Client) helo() error {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	c.ext = nil
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	_, _, err := c.cmd(250, &#34;HELO %s&#34;, c.localName)
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return err
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// ehlo sends the EHLO (extended hello) greeting to the server. It</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// should be the preferred greeting for servers that support it.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>func (c *Client) ehlo() error {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	_, msg, err := c.cmd(250, &#34;EHLO %s&#34;, c.localName)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	if err != nil {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		return err
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	ext := make(map[string]string)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	extList := strings.Split(msg, &#34;\n&#34;)
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	if len(extList) &gt; 1 {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		extList = extList[1:]
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>		for _, line := range extList {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>			k, v, _ := strings.Cut(line, &#34; &#34;)
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>			ext[k] = v
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>		}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	}
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	if mechs, ok := ext[&#34;AUTH&#34;]; ok {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>		c.auth = strings.Split(mechs, &#34; &#34;)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	c.ext = ext
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	return err
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span><span class="comment">// StartTLS sends the STARTTLS command and encrypts all further communication.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Only servers that advertise the STARTTLS extension support this function.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>func (c *Client) StartTLS(config *tls.Config) error {
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		return err
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	_, _, err := c.cmd(220, &#34;STARTTLS&#34;)
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if err != nil {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		return err
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	c.conn = tls.Client(c.conn, config)
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	c.Text = textproto.NewConn(c.conn)
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	c.tls = true
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	return c.ehlo()
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// TLSConnectionState returns the client&#39;s TLS connection state.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span><span class="comment">// The return values are their zero values if [Client.StartTLS] did</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// not succeed.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>func (c *Client) TLSConnectionState() (state tls.ConnectionState, ok bool) {
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	tc, ok := c.conn.(*tls.Conn)
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	if !ok {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>		return
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	return tc.ConnectionState(), true
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>}
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// Verify checks the validity of an email address on the server.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">// If Verify returns nil, the address is valid. A non-nil return</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// does not necessarily indicate an invalid address. Many servers</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// will not verify addresses for security reasons.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>func (c *Client) Verify(addr string) error {
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if err := validateLine(addr); err != nil {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		return err
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>		return err
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	}
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	_, _, err := c.cmd(250, &#34;VRFY %s&#34;, addr)
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	return err
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>}
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span><span class="comment">// Auth authenticates a client using the provided authentication mechanism.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span><span class="comment">// A failed authentication closes the connection.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span><span class="comment">// Only servers that advertise the AUTH extension support this function.</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>func (c *Client) Auth(a Auth) error {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		return err
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	encoding := base64.StdEncoding
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	mech, resp, err := a.Start(&amp;ServerInfo{c.serverName, c.tls, c.auth})
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	if err != nil {
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>		c.Quit()
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>		return err
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	}
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	resp64 := make([]byte, encoding.EncodedLen(len(resp)))
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	encoding.Encode(resp64, resp)
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	code, msg64, err := c.cmd(0, strings.TrimSpace(fmt.Sprintf(&#34;AUTH %s %s&#34;, mech, resp64)))
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	for err == nil {
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>		var msg []byte
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>		switch code {
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>		case 334:
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>			msg, err = encoding.DecodeString(msg64)
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>		case 235:
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>			<span class="comment">// the last message isn&#39;t base64 because it isn&#39;t a challenge</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>			msg = []byte(msg64)
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>		default:
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>			err = &amp;textproto.Error{Code: code, Msg: msg64}
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>		}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>		if err == nil {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>			resp, err = a.Next(msg, code == 334)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>		if err != nil {
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>			<span class="comment">// abort the AUTH</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>			c.cmd(501, &#34;*&#34;)
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>			c.Quit()
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>			break
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>		if resp == nil {
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>			break
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>		}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>		resp64 = make([]byte, encoding.EncodedLen(len(resp)))
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>		encoding.Encode(resp64, resp)
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		code, msg64, err = c.cmd(0, string(resp64))
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	return err
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>}
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">// Mail issues a MAIL command to the server using the provided email address.</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">// If the server supports the 8BITMIME extension, Mail adds the BODY=8BITMIME</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// parameter. If the server supports the SMTPUTF8 extension, Mail adds the</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// SMTPUTF8 parameter.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// This initiates a mail transaction and is followed by one or more [Client.Rcpt] calls.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>func (c *Client) Mail(from string) error {
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	if err := validateLine(from); err != nil {
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>		return err
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>		return err
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	}
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	cmdStr := &#34;MAIL FROM:&lt;%s&gt;&#34;
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	if c.ext != nil {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		if _, ok := c.ext[&#34;8BITMIME&#34;]; ok {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			cmdStr += &#34; BODY=8BITMIME&#34;
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>		}
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>		if _, ok := c.ext[&#34;SMTPUTF8&#34;]; ok {
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>			cmdStr += &#34; SMTPUTF8&#34;
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>		}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	_, _, err := c.cmd(250, cmdStr, from)
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	return err
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>}
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// Rcpt issues a RCPT command to the server using the provided email address.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// A call to Rcpt must be preceded by a call to [Client.Mail] and may be followed by</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// a [Client.Data] call or another Rcpt call.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="selection">func (c *Client) Rcpt(to string) error</span> {
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	if err := validateLine(to); err != nil {
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>		return err
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	}
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	_, _, err := c.cmd(25, &#34;RCPT TO:&lt;%s&gt;&#34;, to)
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	return err
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>}
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>type dataCloser struct {
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	c *Client
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	io.WriteCloser
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>}
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>func (d *dataCloser) Close() error {
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	d.WriteCloser.Close()
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	_, _, err := d.c.Text.ReadResponse(250)
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	return err
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>}
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span><span class="comment">// Data issues a DATA command to the server and returns a writer that</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span><span class="comment">// can be used to write the mail headers and body. The caller should</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// close the writer before calling any more methods on c. A call to</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// Data must be preceded by one or more calls to [Client.Rcpt].</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>func (c *Client) Data() (io.WriteCloser, error) {
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	_, _, err := c.cmd(354, &#34;DATA&#34;)
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>	if err != nil {
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		return nil, err
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	}
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	return &amp;dataCloser{c, c.Text.DotWriter()}, nil
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>}
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>var testHookStartTLS func(*tls.Config) <span class="comment">// nil, except for tests</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span><span class="comment">// SendMail connects to the server at addr, switches to TLS if</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span><span class="comment">// possible, authenticates with the optional mechanism a if possible,</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span><span class="comment">// and then sends an email from address from, to addresses to, with</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span><span class="comment">// message msg.</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span><span class="comment">// The addr must include a port, as in &#34;mail.example.com:smtp&#34;.</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span><span class="comment">// The addresses in the to parameter are the SMTP RCPT addresses.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// The msg parameter should be an RFC 822-style email with headers</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// first, a blank line, and then the message body. The lines of msg</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// should be CRLF terminated. The msg headers should usually include</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// fields such as &#34;From&#34;, &#34;To&#34;, &#34;Subject&#34;, and &#34;Cc&#34;.  Sending &#34;Bcc&#34;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// messages is accomplished by including an email address in the to</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// parameter but not including it in the msg headers.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// The SendMail function and the net/smtp package are low-level</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// mechanisms and provide no support for DKIM signing, MIME</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// attachments (see the mime/multipart package), or other mail</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// functionality. Higher-level packages exist outside of the standard</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// library.</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>func SendMail(addr string, a Auth, from string, to []string, msg []byte) error {
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if err := validateLine(from); err != nil {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		return err
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	for _, recp := range to {
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>		if err := validateLine(recp); err != nil {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>			return err
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	c, err := Dial(addr)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	if err != nil {
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>		return err
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	}
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	defer c.Close()
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	if err = c.hello(); err != nil {
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>		return err
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	}
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>	if ok, _ := c.Extension(&#34;STARTTLS&#34;); ok {
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>		config := &amp;tls.Config{ServerName: c.serverName}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>		if testHookStartTLS != nil {
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>			testHookStartTLS(config)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>		}
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>		if err = c.StartTLS(config); err != nil {
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>			return err
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		}
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	}
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	if a != nil &amp;&amp; c.ext != nil {
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		if _, ok := c.ext[&#34;AUTH&#34;]; !ok {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			return errors.New(&#34;smtp: server doesn&#39;t support AUTH&#34;)
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		if err = c.Auth(a); err != nil {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			return err
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	}
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>	if err = c.Mail(from); err != nil {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		return err
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>	}
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	for _, addr := range to {
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		if err = c.Rcpt(addr); err != nil {
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>			return err
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		}
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	w, err := c.Data()
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>	if err != nil {
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>		return err
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>	_, err = w.Write(msg)
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>	if err != nil {
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		return err
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>	}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	err = w.Close()
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>	if err != nil {
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		return err
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>	}
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>	return c.Quit()
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>}
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>
<span id="L378" class="ln">   378&nbsp;&nbsp;</span><span class="comment">// Extension reports whether an extension is support by the server.</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// The extension name is case-insensitive. If the extension is supported,</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span><span class="comment">// Extension also returns a string that contains any parameters the</span>
<span id="L381" class="ln">   381&nbsp;&nbsp;</span><span class="comment">// server specifies for the extension.</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>func (c *Client) Extension(ext string) (bool, string) {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		return false, &#34;&#34;
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	if c.ext == nil {
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>		return false, &#34;&#34;
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>	}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	ext = strings.ToUpper(ext)
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>	param, ok := c.ext[ext]
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>	return ok, param
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// Reset sends the RSET command to the server, aborting the current mail</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// transaction.</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>func (c *Client) Reset() error {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>		return err
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>	}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>	_, _, err := c.cmd(250, &#34;RSET&#34;)
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	return err
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>}
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// Noop sends the NOOP command to the server. It does nothing but check</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// that the connection to the server is okay.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>func (c *Client) Noop() error {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>		return err
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>	}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>	_, _, err := c.cmd(250, &#34;NOOP&#34;)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	return err
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// Quit sends the QUIT command and closes the connection to the server.</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>func (c *Client) Quit() error {
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	if err := c.hello(); err != nil {
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>		return err
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	}
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	_, _, err := c.cmd(221, &#34;QUIT&#34;)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if err != nil {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		return err
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	return c.Text.Close()
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// validateLine checks to see if a line has CR or LF as per RFC 5321.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>func validateLine(line string) error {
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	if strings.ContainsAny(line, &#34;\n\r&#34;) {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>		return errors.New(&#34;smtp: A line must not contain CR or LF&#34;)
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>	}
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	return nil
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>}
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>
</pre><p><a href="smtp.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
