<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/net/textproto/reader.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./reader.go?s=559:677#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/net">net</a>/<a href="http://localhost:8080/src/net/textproto">textproto</a>/<span class="text-muted">reader.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/net/textproto">net/textproto</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package textproto
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;bufio&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;fmt&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;math&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>)
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// TODO: This should be a distinguishable error (ErrMessageTooLarge)</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// to allow mime/multipart to detect it.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>var errMessageTooLarge = errors.New(&#34;message too large&#34;)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// A Reader implements convenience methods for reading requests</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// or responses from a text protocol network connection.</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="selection">type Reader struct {
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>	R   *bufio.Reader
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>	dot *dotReader
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	buf []byte </span><span class="selection-comment">// a re-usable buffer for readContinuedLineSlice</span><span class="selection">
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>}</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// NewReader returns a new [Reader] reading from r.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// To avoid denial of service attacks, the provided [bufio.Reader]</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// should be reading from an [io.LimitReader] or similar Reader to bound</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// the size of responses.</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>func NewReader(r *bufio.Reader) *Reader {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	return &amp;Reader{R: r}
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// ReadLine reads a single line from r,</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">// eliding the final \n or \r\n from the returned string.</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (r *Reader) ReadLine() (string, error) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	line, err := r.readLineSlice(-1)
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	return string(line), err
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>}
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">// ReadLineBytes is like [Reader.ReadLine] but returns a []byte instead of a string.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>func (r *Reader) ReadLineBytes() ([]byte, error) {
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	line, err := r.readLineSlice(-1)
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	if line != nil {
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>		line = bytes.Clone(line)
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	}
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	return line, err
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>}
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// readLineSlice reads a single line from r,</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">// up to lim bytes long (or unlimited if lim is less than 0),</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// eliding the final \r or \r\n from the returned string.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>func (r *Reader) readLineSlice(lim int64) ([]byte, error) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	r.closeDot()
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	var line []byte
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	for {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>		l, more, err := r.R.ReadLine()
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>		if err != nil {
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			return nil, err
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>		if lim &gt;= 0 &amp;&amp; int64(len(line))+int64(len(l)) &gt; lim {
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>			return nil, errMessageTooLarge
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>		}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>		<span class="comment">// Avoid the copy if the first call produced a full line.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>		if line == nil &amp;&amp; !more {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>			return l, nil
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>		}
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		line = append(line, l...)
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>		if !more {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>			break
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>		}
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	return line, nil
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// ReadContinuedLine reads a possibly continued line from r,</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// eliding the final trailing ASCII white space.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// Lines after the first are considered continuations if they</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// begin with a space or tab character. In the returned data,</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// continuation lines are separated from the previous line</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// only by a single space: the newline and leading white space</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// are removed.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// For example, consider this input:</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//	Line 1</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">//	  continued...</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//	Line 2</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// The first call to ReadContinuedLine will return &#34;Line 1 continued...&#34;</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// and the second will return &#34;Line 2&#34;.</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">// Empty lines are never continued.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>func (r *Reader) ReadContinuedLine() (string, error) {
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	line, err := r.readContinuedLineSlice(-1, noValidation)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	return string(line), err
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>}
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// trim returns s with leading and trailing spaces and tabs removed.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// It does not assume Unicode or UTF-8.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>func trim(s []byte) []byte {
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	i := 0
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	for i &lt; len(s) &amp;&amp; (s[i] == &#39; &#39; || s[i] == &#39;\t&#39;) {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>		i++
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	}
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	n := len(s)
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	for n &gt; i &amp;&amp; (s[n-1] == &#39; &#39; || s[n-1] == &#39;\t&#39;) {
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>		n--
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	}
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	return s[i:n]
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>}
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// ReadContinuedLineBytes is like [Reader.ReadContinuedLine] but</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// returns a []byte instead of a string.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func (r *Reader) ReadContinuedLineBytes() ([]byte, error) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	line, err := r.readContinuedLineSlice(-1, noValidation)
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	if line != nil {
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>		line = bytes.Clone(line)
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	}
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	return line, err
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>}
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// readContinuedLineSlice reads continued lines from the reader buffer,</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// returning a byte slice with all lines. The validateFirstLine function</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// is run on the first read line, and if it returns an error then this</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// error is returned from readContinuedLineSlice.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span><span class="comment">// It reads up to lim bytes of data (or unlimited if lim is less than 0).</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>func (r *Reader) readContinuedLineSlice(lim int64, validateFirstLine func([]byte) error) ([]byte, error) {
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	if validateFirstLine == nil {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>		return nil, fmt.Errorf(&#34;missing validateFirstLine func&#34;)
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>	<span class="comment">// Read the first line.</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	line, err := r.readLineSlice(lim)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	if err != nil {
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		return nil, err
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>	}
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	if len(line) == 0 { <span class="comment">// blank line - no continuation</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>		return line, nil
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	if err := validateFirstLine(line); err != nil {
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>		return nil, err
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	}
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// Optimistically assume that we have started to buffer the next line</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">// and it starts with an ASCII letter (the next header key), or a blank</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">// line, so we can avoid copying that buffered data around in memory</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// and skipping over non-existent whitespace.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	if r.R.Buffered() &gt; 1 {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>		peek, _ := r.R.Peek(2)
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>		if len(peek) &gt; 0 &amp;&amp; (isASCIILetter(peek[0]) || peek[0] == &#39;\n&#39;) ||
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			len(peek) == 2 &amp;&amp; peek[0] == &#39;\r&#39; &amp;&amp; peek[1] == &#39;\n&#39; {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>			return trim(line), nil
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>		}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// ReadByte or the next readLineSlice will flush the read buffer;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// copy the slice into buf.</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	r.buf = append(r.buf[:0], trim(line)...)
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	if lim &lt; 0 {
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>		lim = math.MaxInt64
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	}
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	lim -= int64(len(r.buf))
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// Read continuation lines.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	for r.skipSpace() &gt; 0 {
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>		r.buf = append(r.buf, &#39; &#39;)
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>		if int64(len(r.buf)) &gt;= lim {
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>			return nil, errMessageTooLarge
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>		}
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>		line, err := r.readLineSlice(lim - int64(len(r.buf)))
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>		if err != nil {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>			break
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>		}
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>		r.buf = append(r.buf, trim(line)...)
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	}
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	return r.buf, nil
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>}
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span><span class="comment">// skipSpace skips R over all spaces and returns the number of bytes skipped.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>func (r *Reader) skipSpace() int {
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	n := 0
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	for {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>		c, err := r.R.ReadByte()
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>		if err != nil {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>			<span class="comment">// Bufio will keep err until next read.</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			break
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>		if c != &#39; &#39; &amp;&amp; c != &#39;\t&#39; {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>			r.R.UnreadByte()
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>			break
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		}
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>		n++
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	}
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	return n
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>func (r *Reader) readCodeLine(expectCode int) (code int, continued bool, message string, err error) {
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	line, err := r.ReadLine()
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if err != nil {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return parseCodeLine(line, expectCode)
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>func parseCodeLine(line string, expectCode int) (code int, continued bool, message string, err error) {
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	if len(line) &lt; 4 || line[3] != &#39; &#39; &amp;&amp; line[3] != &#39;-&#39; {
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>		err = ProtocolError(&#34;short response: &#34; + line)
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>		return
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	}
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	continued = line[3] == &#39;-&#39;
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	code, err = strconv.Atoi(line[0:3])
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	if err != nil || code &lt; 100 {
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		err = ProtocolError(&#34;invalid response code: &#34; + line)
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>		return
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	}
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	message = line[4:]
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	if 1 &lt;= expectCode &amp;&amp; expectCode &lt; 10 &amp;&amp; code/100 != expectCode ||
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>		10 &lt;= expectCode &amp;&amp; expectCode &lt; 100 &amp;&amp; code/10 != expectCode ||
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>		100 &lt;= expectCode &amp;&amp; expectCode &lt; 1000 &amp;&amp; code != expectCode {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		err = &amp;Error{code, message}
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// ReadCodeLine reads a response code line of the form</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">//	code message</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// where code is a three-digit status code and the message</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span><span class="comment">// extends to the rest of the line. An example of such a line is:</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span><span class="comment">//	220 plan9.bell-labs.com ESMTP</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// If the prefix of the status does not match the digits in expectCode,</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// ReadCodeLine returns with err set to &amp;Error{code, message}.</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// For example, if expectCode is 31, an error will be returned if</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// the status is not in the range [310,319].</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span><span class="comment">// If the response is multi-line, ReadCodeLine returns an error.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span><span class="comment">// An expectCode &lt;= 0 disables the check of the status code.</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>func (r *Reader) ReadCodeLine(expectCode int) (code int, message string, err error) {
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	code, continued, message, err := r.readCodeLine(expectCode)
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	if err == nil &amp;&amp; continued {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>		err = ProtocolError(&#34;unexpected multi-line response: &#34; + message)
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	}
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	return
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// ReadResponse reads a multi-line response of the form:</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">//	code-message line 1</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">//	code-message line 2</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">//	code message line n</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">// where code is a three-digit status code. The first line starts with the</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// code and a hyphen. The response is terminated by a line that starts</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// with the same code followed by a space. Each line in message is</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// separated by a newline (\n).</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// See page 36 of RFC 959 (https://www.ietf.org/rfc/rfc959.txt) for</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// details of another form of response accepted:</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">//	code-message line 1</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">//	message line 2</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">//	...</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span><span class="comment">//	code message line n</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span><span class="comment">// If the prefix of the status does not match the digits in expectCode,</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// ReadResponse returns with err set to &amp;Error{code, message}.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// For example, if expectCode is 31, an error will be returned if</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// the status is not in the range [310,319].</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// An expectCode &lt;= 0 disables the check of the status code.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func (r *Reader) ReadResponse(expectCode int) (code int, message string, err error) {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	code, continued, message, err := r.readCodeLine(expectCode)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>	multi := continued
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	for continued {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>		line, err := r.ReadLine()
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>		if err != nil {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			return 0, &#34;&#34;, err
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>		}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>		var code2 int
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>		var moreMessage string
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>		code2, continued, moreMessage, err = parseCodeLine(line, 0)
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>		if err != nil || code2 != code {
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>			message += &#34;\n&#34; + strings.TrimRight(line, &#34;\r\n&#34;)
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>			continued = true
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>			continue
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>		}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>		message += &#34;\n&#34; + moreMessage
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	}
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>	if err != nil &amp;&amp; multi &amp;&amp; message != &#34;&#34; {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>		<span class="comment">// replace one line error message with all lines (full message)</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>		err = &amp;Error{code, message}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	return
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// DotReader returns a new [Reader] that satisfies Reads using the</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// decoded text of a dot-encoded block read from r.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// The returned Reader is only valid until the next call</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// to a method on r.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// Dot encoding is a common framing used for data blocks</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span><span class="comment">// in text protocols such as SMTP.  The data consists of a sequence</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span><span class="comment">// of lines, each of which ends in &#34;\r\n&#34;.  The sequence itself</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span><span class="comment">// ends at a line containing just a dot: &#34;.\r\n&#34;.  Lines beginning</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span><span class="comment">// with a dot are escaped with an additional dot to avoid</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// looking like the end of the sequence.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span><span class="comment">// The decoded form returned by the Reader&#39;s Read method</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// rewrites the &#34;\r\n&#34; line endings into the simpler &#34;\n&#34;,</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span><span class="comment">// removes leading dot escapes if present, and stops with error [io.EOF]</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span><span class="comment">// after consuming (and discarding) the end-of-sequence line.</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>func (r *Reader) DotReader() io.Reader {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	r.closeDot()
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	r.dot = &amp;dotReader{r: r}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	return r.dot
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>type dotReader struct {
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	r     *Reader
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	state int
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>}
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// Read satisfies reads by decoding dot-encoded data read from d.r.</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>func (d *dotReader) Read(b []byte) (n int, err error) {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// Run data through a simple state machine to</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	<span class="comment">// elide leading dots, rewrite trailing \r\n into \n,</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// and detect ending .\r\n line.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	const (
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>		stateBeginLine = iota <span class="comment">// beginning of line; initial state; must be zero</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		stateDot              <span class="comment">// read . at beginning of line</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>		stateDotCR            <span class="comment">// read .\r at beginning of line</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		stateCR               <span class="comment">// read \r (possibly at end of line)</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		stateData             <span class="comment">// reading data in middle of line</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>		stateEOF              <span class="comment">// reached .\r\n end marker line</span>
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>	br := d.r.R
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>	for n &lt; len(b) &amp;&amp; d.state != stateEOF {
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		var c byte
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		c, err = br.ReadByte()
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>		if err != nil {
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>			if err == io.EOF {
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>				err = io.ErrUnexpectedEOF
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			}
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>			break
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		}
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		switch d.state {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>		case stateBeginLine:
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>			if c == &#39;.&#39; {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>				d.state = stateDot
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>				continue
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>			}
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>			if c == &#39;\r&#39; {
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>				d.state = stateCR
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>				continue
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>			}
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			d.state = stateData
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		case stateDot:
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>			if c == &#39;\r&#39; {
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>				d.state = stateDotCR
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>				continue
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			if c == &#39;\n&#39; {
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>				d.state = stateEOF
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>				continue
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			}
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			d.state = stateData
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		case stateDotCR:
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			if c == &#39;\n&#39; {
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>				d.state = stateEOF
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>				continue
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>			}
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>			<span class="comment">// Not part of .\r\n.</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>			<span class="comment">// Consume leading dot and emit saved \r.</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>			br.UnreadByte()
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>			c = &#39;\r&#39;
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>			d.state = stateData
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>		case stateCR:
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			if c == &#39;\n&#39; {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				d.state = stateBeginLine
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>				break
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			}
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>			<span class="comment">// Not part of \r\n. Emit saved \r</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>			br.UnreadByte()
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>			c = &#39;\r&#39;
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			d.state = stateData
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>		case stateData:
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>			if c == &#39;\r&#39; {
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				d.state = stateCR
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>				continue
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>			}
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>			if c == &#39;\n&#39; {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>				d.state = stateBeginLine
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>			}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>		}
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>		b[n] = c
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		n++
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>	if err == nil &amp;&amp; d.state == stateEOF {
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>		err = io.EOF
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>	}
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>	if err != nil &amp;&amp; d.r.dot == d {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>		d.r.dot = nil
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	}
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>	return
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>}
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// closeDot drains the current DotReader if any,</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">// making sure that it reads until the ending dot line.</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>func (r *Reader) closeDot() {
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	if r.dot == nil {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		return
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	}
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	buf := make([]byte, 128)
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	for r.dot != nil {
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		<span class="comment">// When Read reaches EOF or an error,</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		<span class="comment">// it will set r.dot == nil.</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		r.dot.Read(buf)
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>	}
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>}
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span><span class="comment">// ReadDotBytes reads a dot-encoding and returns the decoded data.</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span><span class="comment">// See the documentation for the [Reader.DotReader] method for details about dot-encoding.</span>
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>func (r *Reader) ReadDotBytes() ([]byte, error) {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	return io.ReadAll(r.DotReader())
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// ReadDotLines reads a dot-encoding and returns a slice</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span><span class="comment">// containing the decoded lines, with the final \r\n or \n elided from each.</span>
<span id="L449" class="ln">   449&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// See the documentation for the [Reader.DotReader] method for details about dot-encoding.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>func (r *Reader) ReadDotLines() ([]string, error) {
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	<span class="comment">// We could use ReadDotBytes and then Split it,</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>	<span class="comment">// but reading a line at a time avoids needing a</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>	<span class="comment">// large contiguous block of memory and is simpler.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>	var v []string
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	var err error
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	for {
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>		var line string
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>		line, err = r.ReadLine()
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		if err != nil {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>			if err == io.EOF {
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>				err = io.ErrUnexpectedEOF
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>			}
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>			break
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		}
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>		<span class="comment">// Dot by itself marks end; otherwise cut one dot.</span>
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>		if len(line) &gt; 0 &amp;&amp; line[0] == &#39;.&#39; {
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			if len(line) == 1 {
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>				break
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>			}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>			line = line[1:]
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>		}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>		v = append(v, line)
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	}
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	return v, err
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>}
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>var colon = []byte(&#34;:&#34;)
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span><span class="comment">// ReadMIMEHeader reads a MIME-style header from r.</span>
<span id="L482" class="ln">   482&nbsp;&nbsp;</span><span class="comment">// The header is a sequence of possibly continued Key: Value lines</span>
<span id="L483" class="ln">   483&nbsp;&nbsp;</span><span class="comment">// ending in a blank line.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span><span class="comment">// The returned map m maps [CanonicalMIMEHeaderKey](key) to a</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// sequence of values in the same order encountered in the input.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// For example, consider this input:</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">//	My-Key: Value 1</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">//	Long-Key: Even</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">//	       Longer Value</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">//	My-Key: Value 2</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// Given that input, ReadMIMEHeader returns the map:</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">//	map[string][]string{</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span><span class="comment">//		&#34;My-Key&#34;: {&#34;Value 1&#34;, &#34;Value 2&#34;},</span>
<span id="L498" class="ln">   498&nbsp;&nbsp;</span><span class="comment">//		&#34;Long-Key&#34;: {&#34;Even Longer Value&#34;},</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>func (r *Reader) ReadMIMEHeader() (MIMEHeader, error) {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>	return readMIMEHeader(r, math.MaxInt64, math.MaxInt64)
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span><span class="comment">// readMIMEHeader is a version of ReadMIMEHeader which takes a limit on the header size.</span>
<span id="L505" class="ln">   505&nbsp;&nbsp;</span><span class="comment">// It is called by the mime/multipart package.</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func readMIMEHeader(r *Reader, maxMemory, maxHeaders int64) (MIMEHeader, error) {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	<span class="comment">// Avoid lots of small slice allocations later by allocating one</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>	<span class="comment">// large one ahead of time which we&#39;ll cut up into smaller</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	<span class="comment">// slices. If this isn&#39;t big enough later, we allocate small ones.</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	var strs []string
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>	hint := r.upcomingHeaderKeys()
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>	if hint &gt; 0 {
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		if hint &gt; 1000 {
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>			hint = 1000 <span class="comment">// set a cap to avoid overallocation</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>		}
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>		strs = make([]string, hint)
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>	}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>	m := make(MIMEHeader, hint)
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	<span class="comment">// Account for 400 bytes of overhead for the MIMEHeader, plus 200 bytes per entry.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	<span class="comment">// Benchmarking map creation as of go1.20, a one-entry MIMEHeader is 416 bytes and large</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	<span class="comment">// MIMEHeaders average about 200 bytes per entry.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>	maxMemory -= 400
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	const mapEntryOverhead = 200
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	<span class="comment">// The first line cannot start with a leading space.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>	if buf, err := r.R.Peek(1); err == nil &amp;&amp; (buf[0] == &#39; &#39; || buf[0] == &#39;\t&#39;) {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		const errorLimit = 80 <span class="comment">// arbitrary limit on how much of the line we&#39;ll quote</span>
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>		line, err := r.readLineSlice(errorLimit)
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		if err != nil {
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>			return m, err
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		return m, ProtocolError(&#34;malformed MIME header initial line: &#34; + string(line))
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	}
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	for {
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>		kv, err := r.readContinuedLineSlice(maxMemory, mustHaveFieldNameColon)
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>		if len(kv) == 0 {
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>			return m, err
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>		}
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>		<span class="comment">// Key ends at first colon.</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>		k, v, ok := bytes.Cut(kv, colon)
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>		if !ok {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>			return m, ProtocolError(&#34;malformed MIME header line: &#34; + string(kv))
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>		}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>		key, ok := canonicalMIMEHeaderKey(k)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>		if !ok {
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>			return m, ProtocolError(&#34;malformed MIME header line: &#34; + string(kv))
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		}
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>		for _, c := range v {
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>			if !validHeaderValueByte(c) {
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>				return m, ProtocolError(&#34;malformed MIME header line: &#34; + string(kv))
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>			}
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>		}
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		<span class="comment">// As per RFC 7230 field-name is a token, tokens consist of one or more chars.</span>
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>		<span class="comment">// We could return a ProtocolError here, but better to be liberal in what we</span>
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		<span class="comment">// accept, so if we get an empty key, skip it.</span>
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		if key == &#34;&#34; {
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>			continue
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>		maxHeaders--
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		if maxHeaders &lt; 0 {
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>			return nil, errMessageTooLarge
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>		}
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>		<span class="comment">// Skip initial spaces in value.</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		value := string(bytes.TrimLeft(v, &#34; \t&#34;))
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		vv := m[key]
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>		if vv == nil {
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>			maxMemory -= int64(len(key))
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>			maxMemory -= mapEntryOverhead
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		}
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		maxMemory -= int64(len(value))
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		if maxMemory &lt; 0 {
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>			return m, errMessageTooLarge
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>		}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>		if vv == nil &amp;&amp; len(strs) &gt; 0 {
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>			<span class="comment">// More than likely this will be a single-element key.</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>			<span class="comment">// Most headers aren&#39;t multi-valued.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>			<span class="comment">// Set the capacity on strs[0] to 1, so any future append</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>			<span class="comment">// won&#39;t extend the slice into the other strings.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>			vv, strs = strs[:1:1], strs[1:]
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>			vv[0] = value
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>			m[key] = vv
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		} else {
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>			m[key] = append(vv, value)
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>		}
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		if err != nil {
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>			return m, err
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>		}
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	}
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>}
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// noValidation is a no-op validation func for readContinuedLineSlice</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">// that permits any lines.</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>func noValidation(_ []byte) error { return nil }
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>
<span id="L604" class="ln">   604&nbsp;&nbsp;</span><span class="comment">// mustHaveFieldNameColon ensures that, per RFC 7230, the</span>
<span id="L605" class="ln">   605&nbsp;&nbsp;</span><span class="comment">// field-name is on a single line, so the first line must</span>
<span id="L606" class="ln">   606&nbsp;&nbsp;</span><span class="comment">// contain a colon.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>func mustHaveFieldNameColon(line []byte) error {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	if bytes.IndexByte(line, &#39;:&#39;) &lt; 0 {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		return ProtocolError(fmt.Sprintf(&#34;malformed MIME header: missing colon: %q&#34;, line))
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	return nil
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>}
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>var nl = []byte(&#34;\n&#34;)
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// upcomingHeaderKeys returns an approximation of the number of keys</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// that will be in this header. If it gets confused, it returns 0.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>func (r *Reader) upcomingHeaderKeys() (n int) {
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	<span class="comment">// Try to determine the &#39;hint&#39; size.</span>
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	r.R.Peek(1) <span class="comment">// force a buffer load if empty</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	s := r.R.Buffered()
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	if s == 0 {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		return
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	peek, _ := r.R.Peek(s)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	for len(peek) &gt; 0 &amp;&amp; n &lt; 1000 {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		var line []byte
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		line, peek, _ = bytes.Cut(peek, nl)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>		if len(line) == 0 || (len(line) == 1 &amp;&amp; line[0] == &#39;\r&#39;) {
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			<span class="comment">// Blank line separating headers from the body.</span>
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>			break
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		}
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>		if line[0] == &#39; &#39; || line[0] == &#39;\t&#39; {
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>			<span class="comment">// Folded continuation of the previous line.</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>			continue
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>		}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>		n++
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	}
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	return n
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span><span class="comment">// CanonicalMIMEHeaderKey returns the canonical format of the</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span><span class="comment">// MIME header key s. The canonicalization converts the first</span>
<span id="L644" class="ln">   644&nbsp;&nbsp;</span><span class="comment">// letter and any letter following a hyphen to upper case;</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span><span class="comment">// the rest are converted to lowercase. For example, the</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span><span class="comment">// canonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span><span class="comment">// MIME header keys are assumed to be ASCII only.</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span><span class="comment">// If s contains a space or invalid header field bytes, it is</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span><span class="comment">// returned without modifications.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>func CanonicalMIMEHeaderKey(s string) string {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>	<span class="comment">// Quick check for canonical encoding.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	upper := true
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>	for i := 0; i &lt; len(s); i++ {
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		c := s[i]
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		if !validHeaderFieldByte(c) {
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>			return s
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		}
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		if upper &amp;&amp; &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>			s, _ = canonicalMIMEHeaderKey([]byte(s))
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>			return s
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		}
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		if !upper &amp;&amp; &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			s, _ = canonicalMIMEHeaderKey([]byte(s))
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>			return s
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>		}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>		upper = c == &#39;-&#39;
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>	}
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	return s
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>}
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>const toLower = &#39;a&#39; - &#39;A&#39;
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>
<span id="L673" class="ln">   673&nbsp;&nbsp;</span><span class="comment">// validHeaderFieldByte reports whether c is a valid byte in a header</span>
<span id="L674" class="ln">   674&nbsp;&nbsp;</span><span class="comment">// field name. RFC 7230 says:</span>
<span id="L675" class="ln">   675&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L676" class="ln">   676&nbsp;&nbsp;</span><span class="comment">//	header-field   = field-name &#34;:&#34; OWS field-value OWS</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span><span class="comment">//	field-name     = token</span>
<span id="L678" class="ln">   678&nbsp;&nbsp;</span><span class="comment">//	tchar = &#34;!&#34; / &#34;#&#34; / &#34;$&#34; / &#34;%&#34; / &#34;&amp;&#34; / &#34;&#39;&#34; / &#34;*&#34; / &#34;+&#34; / &#34;-&#34; / &#34;.&#34; /</span>
<span id="L679" class="ln">   679&nbsp;&nbsp;</span><span class="comment">//	        &#34;^&#34; / &#34;_&#34; / &#34;`&#34; / &#34;|&#34; / &#34;~&#34; / DIGIT / ALPHA</span>
<span id="L680" class="ln">   680&nbsp;&nbsp;</span><span class="comment">//	token = 1*tchar</span>
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>func validHeaderFieldByte(c byte) bool {
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	<span class="comment">// mask is a 128-bit bitmap with 1s for allowed bytes,</span>
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	<span class="comment">// so that the byte c can be tested with a shift and an and.</span>
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	<span class="comment">// If c &gt;= 128, then 1&lt;&lt;c and 1&lt;&lt;(c-64) will both be zero,</span>
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>	<span class="comment">// and this function will return false.</span>
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	const mask = 0 |
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>		(1&lt;&lt;(10)-1)&lt;&lt;&#39;0&#39; |
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>		(1&lt;&lt;(26)-1)&lt;&lt;&#39;a&#39; |
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>		(1&lt;&lt;(26)-1)&lt;&lt;&#39;A&#39; |
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		1&lt;&lt;&#39;!&#39; |
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>		1&lt;&lt;&#39;#&#39; |
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>		1&lt;&lt;&#39;$&#39; |
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>		1&lt;&lt;&#39;%&#39; |
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>		1&lt;&lt;&#39;&amp;&#39; |
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>		1&lt;&lt;&#39;\&#39;&#39; |
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>		1&lt;&lt;&#39;*&#39; |
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		1&lt;&lt;&#39;+&#39; |
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>		1&lt;&lt;&#39;-&#39; |
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>		1&lt;&lt;&#39;.&#39; |
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>		1&lt;&lt;&#39;^&#39; |
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		1&lt;&lt;&#39;_&#39; |
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		1&lt;&lt;&#39;`&#39; |
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		1&lt;&lt;&#39;|&#39; |
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		1&lt;&lt;&#39;~&#39;
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	return ((uint64(1)&lt;&lt;c)&amp;(mask&amp;(1&lt;&lt;64-1)) |
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>		(uint64(1)&lt;&lt;(c-64))&amp;(mask&gt;&gt;64)) != 0
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>}
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>
<span id="L709" class="ln">   709&nbsp;&nbsp;</span><span class="comment">// validHeaderValueByte reports whether c is a valid byte in a header</span>
<span id="L710" class="ln">   710&nbsp;&nbsp;</span><span class="comment">// field value. RFC 7230 says:</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span><span class="comment">//	field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]</span>
<span id="L713" class="ln">   713&nbsp;&nbsp;</span><span class="comment">//	field-vchar    = VCHAR / obs-text</span>
<span id="L714" class="ln">   714&nbsp;&nbsp;</span><span class="comment">//	obs-text       = %x80-FF</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span><span class="comment">// RFC 5234 says:</span>
<span id="L717" class="ln">   717&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L718" class="ln">   718&nbsp;&nbsp;</span><span class="comment">//	HTAB           =  %x09</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span><span class="comment">//	SP             =  %x20</span>
<span id="L720" class="ln">   720&nbsp;&nbsp;</span><span class="comment">//	VCHAR          =  %x21-7E</span>
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>func validHeaderValueByte(c byte) bool {
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	<span class="comment">// mask is a 128-bit bitmap with 1s for allowed bytes,</span>
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	<span class="comment">// so that the byte c can be tested with a shift and an and.</span>
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	<span class="comment">// If c &gt;= 128, then 1&lt;&lt;c and 1&lt;&lt;(c-64) will both be zero.</span>
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>	<span class="comment">// Since this is the obs-text range, we invert the mask to</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>	<span class="comment">// create a bitmap with 1s for disallowed bytes.</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>	const mask = 0 |
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>		(1&lt;&lt;(0x7f-0x21)-1)&lt;&lt;0x21 | <span class="comment">// VCHAR: %x21-7E</span>
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		1&lt;&lt;0x20 | <span class="comment">// SP: %x20</span>
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>		1&lt;&lt;0x09 <span class="comment">// HTAB: %x09</span>
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	return ((uint64(1)&lt;&lt;c)&amp;^(mask&amp;(1&lt;&lt;64-1)) |
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>		(uint64(1)&lt;&lt;(c-64))&amp;^(mask&gt;&gt;64)) == 0
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span><span class="comment">// canonicalMIMEHeaderKey is like CanonicalMIMEHeaderKey but is</span>
<span id="L736" class="ln">   736&nbsp;&nbsp;</span><span class="comment">// allowed to mutate the provided byte slice before returning the</span>
<span id="L737" class="ln">   737&nbsp;&nbsp;</span><span class="comment">// string.</span>
<span id="L738" class="ln">   738&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span><span class="comment">// For invalid inputs (if a contains spaces or non-token bytes), a</span>
<span id="L740" class="ln">   740&nbsp;&nbsp;</span><span class="comment">// is unchanged and a string copy is returned.</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span><span class="comment">// ok is true if the header key contains only valid characters and spaces.</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span><span class="comment">// ReadMIMEHeader accepts header keys containing spaces, but does not</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span><span class="comment">// canonicalize them.</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>func canonicalMIMEHeaderKey(a []byte) (_ string, ok bool) {
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	<span class="comment">// See if a looks like a header key. If not, return it unchanged.</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	noCanon := false
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	for _, c := range a {
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		if validHeaderFieldByte(c) {
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>			continue
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>		}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t canonicalize.</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		if c == &#39; &#39; {
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>			<span class="comment">// We accept invalid headers with a space before the</span>
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>			<span class="comment">// colon, but must not canonicalize them.</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>			<span class="comment">// See https://go.dev/issue/34540.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>			noCanon = true
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>			continue
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>		}
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>		return string(a), false
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>	}
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	if noCanon {
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>		return string(a), true
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	}
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>	upper := true
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	for i, c := range a {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>		<span class="comment">// Canonicalize: first letter upper case</span>
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		<span class="comment">// and upper case after each dash.</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>		<span class="comment">// (Host, User-Agent, If-Modified-Since).</span>
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>		<span class="comment">// MIME headers are ASCII only, so no Unicode issues.</span>
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		if upper &amp;&amp; &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; {
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			c -= toLower
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>		} else if !upper &amp;&amp; &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			c += toLower
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>		}
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		a[i] = c
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>		upper = c == &#39;-&#39; <span class="comment">// for next time</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	}
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	commonHeaderOnce.Do(initCommonHeader)
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>	<span class="comment">// The compiler recognizes m[string(byteSlice)] as a special</span>
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>	<span class="comment">// case, so a copy of a&#39;s bytes into a new string does not</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>	<span class="comment">// happen in this map lookup:</span>
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	if v := commonHeader[string(a)]; v != &#34;&#34; {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		return v, true
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	return string(a), true
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>}
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>
<span id="L790" class="ln">   790&nbsp;&nbsp;</span><span class="comment">// commonHeader interns common header strings.</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>var commonHeader map[string]string
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>var commonHeaderOnce sync.Once
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>func initCommonHeader() {
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	commonHeader = make(map[string]string)
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>	for _, v := range []string{
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		&#34;Accept&#34;,
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>		&#34;Accept-Charset&#34;,
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>		&#34;Accept-Encoding&#34;,
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		&#34;Accept-Language&#34;,
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>		&#34;Accept-Ranges&#34;,
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>		&#34;Cache-Control&#34;,
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		&#34;Cc&#34;,
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		&#34;Connection&#34;,
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		&#34;Content-Id&#34;,
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		&#34;Content-Language&#34;,
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		&#34;Content-Length&#34;,
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		&#34;Content-Transfer-Encoding&#34;,
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		&#34;Content-Type&#34;,
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>		&#34;Cookie&#34;,
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>		&#34;Date&#34;,
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		&#34;Dkim-Signature&#34;,
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>		&#34;Etag&#34;,
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>		&#34;Expires&#34;,
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>		&#34;From&#34;,
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		&#34;Host&#34;,
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		&#34;If-Modified-Since&#34;,
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>		&#34;If-None-Match&#34;,
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>		&#34;In-Reply-To&#34;,
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>		&#34;Last-Modified&#34;,
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>		&#34;Location&#34;,
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>		&#34;Message-Id&#34;,
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		&#34;Mime-Version&#34;,
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>		&#34;Pragma&#34;,
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>		&#34;Received&#34;,
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>		&#34;Return-Path&#34;,
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>		&#34;Server&#34;,
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		&#34;Set-Cookie&#34;,
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>		&#34;Subject&#34;,
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		&#34;To&#34;,
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>		&#34;User-Agent&#34;,
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		&#34;Via&#34;,
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>		&#34;X-Forwarded-For&#34;,
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>		&#34;X-Imforwards&#34;,
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>		&#34;X-Powered-By&#34;,
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>	} {
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>		commonHeader[v] = v
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>	}
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>}
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>
</pre><p><a href="reader.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
