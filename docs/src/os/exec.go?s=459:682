<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/os/exec.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./exec.go?s=459:682#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/os">os</a>/<span class="text-muted">exec.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/os">os</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package os
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;internal/testlog&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>	&#34;sync/atomic&#34;
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>	&#34;syscall&#34;
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>)
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">// ErrProcessDone indicates a Process has finished.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>var ErrProcessDone = errors.New(&#34;os: process already finished&#34;)
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// Process stores the information about a process created by StartProcess.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="selection">type Process struct {
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	Pid    int
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	handle uintptr      </span><span class="selection-comment">// handle is accessed atomically on Windows</span><span class="selection">
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	isdone atomic.Bool  </span><span class="selection-comment">// process has been successfully waited on</span><span class="selection">
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	sigMu  sync.RWMutex </span><span class="selection-comment">// avoid race between wait and signal</span><span class="selection">
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>}</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>func newProcess(pid int, handle uintptr) *Process {
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	p := &amp;Process{Pid: pid, handle: handle}
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	runtime.SetFinalizer(p, (*Process).Release)
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	return p
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>}
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>func (p *Process) setDone() {
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>	p.isdone.Store(true)
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>}
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>func (p *Process) done() bool {
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	return p.isdone.Load()
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">// ProcAttr holds the attributes that will be applied to a new process</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">// started by StartProcess.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>type ProcAttr struct {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	<span class="comment">// If Dir is non-empty, the child changes into the directory before</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// creating the process.</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	Dir string
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	<span class="comment">// If Env is non-nil, it gives the environment variables for the</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>	<span class="comment">// new process in the form returned by Environ.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// If it is nil, the result of Environ will be used.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	Env []string
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">// Files specifies the open files inherited by the new process. The</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// first three entries correspond to standard input, standard output, and</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// standard error. An implementation may support additional entries,</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// depending on the underlying operating system. A nil entry corresponds</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">// to that file being closed when the process starts.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// On Unix systems, StartProcess will change these File values</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// to blocking mode, which means that SetDeadline will stop working</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">// and calling Close will not interrupt a Read or Write.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	Files []*File
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>	<span class="comment">// Operating system-specific process creation attributes.</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// Note that setting this field means that your program</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// may not execute properly or even compile on some</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">// operating systems.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	Sys *syscall.SysProcAttr
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>}
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">// A Signal represents an operating system signal.</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">// The usual underlying implementation is operating system-dependent:</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">// on Unix it is syscall.Signal.</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>type Signal interface {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	String() string
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	Signal() <span class="comment">// to distinguish from other Stringers</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>}
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// Getpid returns the process id of the caller.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>func Getpid() int { return syscall.Getpid() }
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">// Getppid returns the process id of the caller&#39;s parent.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>func Getppid() int { return syscall.Getppid() }
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// FindProcess looks for a running process by its pid.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// The Process it returns can be used to obtain information</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// about the underlying operating system process.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// On Unix systems, FindProcess always succeeds and returns a Process</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// for the given pid, regardless of whether the process exists. To test whether</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// the process actually exists, see whether p.Signal(syscall.Signal(0)) reports</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// an error.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>func FindProcess(pid int) (*Process, error) {
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return findProcess(pid)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// StartProcess starts a new process with the program, arguments and attributes</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// specified by name, argv and attr. The argv slice will become os.Args in the</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// new process, so it normally starts with the program name.</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">// If the calling goroutine has locked the operating system thread</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">// with runtime.LockOSThread and modified any inheritable OS-level</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">// thread state (for example, Linux or Plan 9 name spaces), the new</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// process will inherit the caller&#39;s thread state.</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// StartProcess is a low-level interface. The os/exec package provides</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// higher-level interfaces.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">// If there is an error, it will be of type *PathError.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error) {
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	testlog.Open(name)
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	return startProcess(name, argv, attr)
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>}
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// Release releases any resources associated with the Process p,</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// rendering it unusable in the future.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// Release only needs to be called if Wait is not.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>func (p *Process) Release() error {
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	return p.release()
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>}
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span><span class="comment">// Kill causes the Process to exit immediately. Kill does not wait until</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span><span class="comment">// the Process has actually exited. This only kills the Process itself,</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span><span class="comment">// not any other processes it may have started.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>func (p *Process) Kill() error {
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	return p.kill()
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>}
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span><span class="comment">// Wait waits for the Process to exit, and then returns a</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// ProcessState describing its status and an error, if any.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span><span class="comment">// Wait releases any resources associated with the Process.</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span><span class="comment">// On most operating systems, the Process must be a child</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span><span class="comment">// of the current process or an error will be returned.</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>func (p *Process) Wait() (*ProcessState, error) {
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>	return p.wait()
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>}
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span><span class="comment">// Signal sends a signal to the Process.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span><span class="comment">// Sending Interrupt on Windows is not implemented.</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (p *Process) Signal(sig Signal) error {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return p.signal(sig)
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// UserTime returns the user CPU time of the exited process and its children.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>func (p *ProcessState) UserTime() time.Duration {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	return p.userTime()
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>}
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span><span class="comment">// SystemTime returns the system CPU time of the exited process and its children.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>func (p *ProcessState) SystemTime() time.Duration {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	return p.systemTime()
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span><span class="comment">// Exited reports whether the program has exited.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span><span class="comment">// On Unix systems this reports true if the program exited due to calling exit,</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span><span class="comment">// but false if the program terminated due to a signal.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>func (p *ProcessState) Exited() bool {
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	return p.exited()
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>}
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span><span class="comment">// Success reports whether the program exited successfully,</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span><span class="comment">// such as with exit status 0 on Unix.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>func (p *ProcessState) Success() bool {
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	return p.success()
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>}
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span><span class="comment">// Sys returns system-dependent exit information about</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span><span class="comment">// the process. Convert it to the appropriate underlying</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span><span class="comment">// type, such as syscall.WaitStatus on Unix, to access its contents.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>func (p *ProcessState) Sys() any {
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	return p.sys()
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>}
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span><span class="comment">// SysUsage returns system-dependent resource usage information about</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// the exited process. Convert it to the appropriate underlying</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">// type, such as *syscall.Rusage on Unix, to access its contents.</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">// (On Unix, *syscall.Rusage matches struct rusage as defined in the</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// getrusage(2) manual page.)</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>func (p *ProcessState) SysUsage() any {
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	return p.sysUsage()
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>}
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>
</pre><p><a href="exec.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
