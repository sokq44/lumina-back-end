<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/os/exec/exec.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./exec.go?s=33972:34021#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/os">os</a>/<a href="http://localhost:8080/src/os/exec">exec</a>/<span class="text-muted">exec.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/os/exec">os/exec</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package exec runs external commands. It wraps os.StartProcess to make it</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// easier to remap stdin and stdout, connect I/O with pipes, and do other</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// adjustments.</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// Unlike the &#34;system&#34; library call from C and other languages, the</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// os/exec package intentionally does not invoke the system shell and</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// does not expand any glob patterns or handle other expansions,</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// pipelines, or redirections typically done by shells. The package</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// behaves more like C&#39;s &#34;exec&#34; family of functions. To expand glob</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// patterns, either call the shell directly, taking care to escape any</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// dangerous input, or use the path/filepath package&#39;s Glob function.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// To expand environment variables, use package os&#39;s ExpandEnv.</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// Note that the examples in this package assume a Unix system.</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// They may not run on Windows, and they do not run in the Go Playground</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// used by golang.org and godoc.org.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// # Executables in the current directory</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// The functions Command and LookPath look for a program</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// in the directories listed in the current path, following the</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// conventions of the host operating system.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">// Operating systems have for decades included the current</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// directory in this search, sometimes implicitly and sometimes</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">// configured explicitly that way by default.</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Modern practice is that including the current directory</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// is usually unexpected and often leads to security problems.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// To avoid those security problems, as of Go 1.19, this package will not resolve a program</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// using an implicit or explicit path entry relative to the current directory.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">// That is, if you run exec.LookPath(&#34;go&#34;), it will not successfully return</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// ./go on Unix nor .\go.exe on Windows, no matter how the path is configured.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// Instead, if the usual path algorithms would result in that answer,</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// these functions return an error err satisfying errors.Is(err, ErrDot).</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">// For example, consider these two program snippets:</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//	path, err := exec.LookPath(&#34;prog&#34;)</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//	use(path)</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// and</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//	cmd := exec.Command(&#34;prog&#34;)</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//	if err := cmd.Run(); err != nil {</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">// These will not find and run ./prog or .\prog.exe,</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">// no matter how the current path is configured.</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">// Code that always wants to run a program from the current directory</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">// can be rewritten to say &#34;./prog&#34; instead of &#34;prog&#34;.</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">// Code that insists on including results from relative path entries</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// can instead override the error using an errors.Is check:</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">//	path, err := exec.LookPath(&#34;prog&#34;)</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">//	if errors.Is(err, exec.ErrDot) {</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span><span class="comment">//		err = nil</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span><span class="comment">//	use(path)</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// and</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//	cmd := exec.Command(&#34;prog&#34;)</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//	if errors.Is(cmd.Err, exec.ErrDot) {</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//		cmd.Err = nil</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//	if err := cmd.Run(); err != nil {</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//		log.Fatal(err)</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Setting the environment variable GODEBUG=execerrdot=0</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// disables generation of ErrDot entirely, temporarily restoring the pre-Go 1.19</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// behavior for programs that are unable to apply more targeted fixes.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// A future version of Go may remove support for this variable.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">// Before adding such overrides, make sure you understand the</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// security implications of doing so.</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// See https://go.dev/blog/path-security for more information.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>package exec
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>import (
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>	&#34;bytes&#34;
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	&#34;internal/godebug&#34;
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	&#34;internal/syscall/execenv&#34;
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	&#34;io&#34;
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	&#34;path/filepath&#34;
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	&#34;runtime&#34;
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	&#34;syscall&#34;
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	&#34;time&#34;
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>)
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Error is returned by LookPath when it fails to classify a file as an</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// executable.</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>type Error struct {
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Name is the file name for which the error occurred.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	Name string
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// Err is the underlying error.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	Err error
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>}
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>func (e *Error) Error() string {
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	return &#34;exec: &#34; + strconv.Quote(e.Name) + &#34;: &#34; + e.Err.Error()
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>}
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>func (e *Error) Unwrap() error { return e.Err }
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span><span class="comment">// ErrWaitDelay is returned by (*Cmd).Wait if the process exits with a</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span><span class="comment">// successful status code but its output pipes are not closed before the</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span><span class="comment">// command&#39;s WaitDelay expires.</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>var ErrWaitDelay = errors.New(&#34;exec: WaitDelay expired before I/O complete&#34;)
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span><span class="comment">// wrappedError wraps an error without relying on fmt.Errorf.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>type wrappedError struct {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	prefix string
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	err    error
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>func (w wrappedError) Error() string {
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	return w.prefix + &#34;: &#34; + w.err.Error()
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>}
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>func (w wrappedError) Unwrap() error {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	return w.err
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>
<span id="L143" class="ln">   143&nbsp;&nbsp;</span><span class="comment">// Cmd represents an external command being prepared or run.</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span><span class="comment">// A Cmd cannot be reused after calling its Run, Output or CombinedOutput</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span><span class="comment">// methods.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>type Cmd struct {
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// Path is the path of the command to run.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">// This is the only field that must be set to a non-zero</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">// value. If Path is relative, it is evaluated relative</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">// to Dir.</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	Path string
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// Args holds command line arguments, including the command as Args[0].</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	<span class="comment">// If the Args field is empty or nil, Run uses {Path}.</span>
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// In typical use, both Path and Args are set by calling Command.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	Args []string
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>	<span class="comment">// Env specifies the environment of the process.</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// Each entry is of the form &#34;key=value&#34;.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// If Env is nil, the new process uses the current process&#39;s</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// environment.</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// If Env contains duplicate environment keys, only the last</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	<span class="comment">// value in the slice for each duplicate key is used.</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// As a special case on Windows, SYSTEMROOT is always added if</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// missing and not explicitly set to the empty string.</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	Env []string
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	<span class="comment">// Dir specifies the working directory of the command.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>	<span class="comment">// If Dir is the empty string, Run runs the command in the</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// calling process&#39;s current directory.</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	Dir string
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// Stdin specifies the process&#39;s standard input.</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	<span class="comment">// If Stdin is nil, the process reads from the null device (os.DevNull).</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// If Stdin is an *os.File, the process&#39;s standard input is connected</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// directly to that file.</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, during the execution of the command a separate</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// goroutine reads from Stdin and delivers that data to the command</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// over a pipe. In this case, Wait does not complete until the goroutine</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// stops copying, either because it has reached the end of Stdin</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// (EOF or a read error), or because writing to the pipe returned an error,</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// or because a nonzero WaitDelay was set and expired.</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	Stdin io.Reader
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// Stdout and Stderr specify the process&#39;s standard output and error.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// If either is nil, Run connects the corresponding file descriptor</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// to the null device (os.DevNull).</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	<span class="comment">// If either is an *os.File, the corresponding output from the process</span>
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	<span class="comment">// is connected directly to that file.</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// Otherwise, during the execution of the command a separate goroutine</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// reads from the process over a pipe and delivers that data to the</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// corresponding Writer. In this case, Wait does not complete until the</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// goroutine reaches EOF or encounters an error or a nonzero WaitDelay</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// expires.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// If Stdout and Stderr are the same writer, and have a type that can</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// be compared with ==, at most one goroutine at a time will call Write.</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	Stdout io.Writer
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	Stderr io.Writer
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	<span class="comment">// ExtraFiles specifies additional open files to be inherited by the</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// new process. It does not include standard input, standard output, or</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// standard error. If non-nil, entry i becomes file descriptor 3+i.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	<span class="comment">// ExtraFiles is not supported on Windows.</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	ExtraFiles []*os.File
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	<span class="comment">// SysProcAttr holds optional, operating system-specific attributes.</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	<span class="comment">// Run passes it to os.StartProcess as the os.ProcAttr&#39;s Sys field.</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	SysProcAttr *syscall.SysProcAttr
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	<span class="comment">// Process is the underlying process, once started.</span>
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>	Process *os.Process
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// ProcessState contains information about an exited process.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// If the process was started successfully, Wait or Run will</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	<span class="comment">// populate its ProcessState when the command completes.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>	ProcessState *os.ProcessState
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	<span class="comment">// ctx is the context passed to CommandContext, if any.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	ctx context.Context
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>	Err error <span class="comment">// LookPath error, if any.</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	<span class="comment">// If Cancel is non-nil, the command must have been created with</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>	<span class="comment">// CommandContext and Cancel will be called when the command&#39;s</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	<span class="comment">// Context is done. By default, CommandContext sets Cancel to</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>	<span class="comment">// call the Kill method on the command&#39;s Process.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	<span class="comment">// Typically a custom Cancel will send a signal to the command&#39;s</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>	<span class="comment">// Process, but it may instead take other actions to initiate cancellation,</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	<span class="comment">// such as closing a stdin or stdout pipe or sending a shutdown request on a</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>	<span class="comment">// network socket.</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>	<span class="comment">// If the command exits with a success status after Cancel is</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>	<span class="comment">// called, and Cancel does not return an error equivalent to</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>	<span class="comment">// os.ErrProcessDone, then Wait and similar methods will return a non-nil</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>	<span class="comment">// error: either an error wrapping the one returned by Cancel,</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	<span class="comment">// or the error from the Context.</span>
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	<span class="comment">// (If the command exits with a non-success status, or Cancel</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	<span class="comment">// returns an error that wraps os.ErrProcessDone, Wait and similar methods</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// continue to return the command&#39;s usual exit status.)</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	<span class="comment">// If Cancel is set to nil, nothing will happen immediately when the command&#39;s</span>
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	<span class="comment">// Context is done, but a nonzero WaitDelay will still take effect. That may</span>
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	<span class="comment">// be useful, for example, to work around deadlocks in commands that do not</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	<span class="comment">// support shutdown signals but are expected to always finish quickly.</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	<span class="comment">// Cancel will not be called if Start returns a non-nil error.</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	Cancel func() error
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	<span class="comment">// If WaitDelay is non-zero, it bounds the time spent waiting on two sources</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	<span class="comment">// of unexpected delay in Wait: a child process that fails to exit after the</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	<span class="comment">// associated Context is canceled, and a child process that exits but leaves</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	<span class="comment">// its I/O pipes unclosed.</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	<span class="comment">// The WaitDelay timer starts when either the associated Context is done or a</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	<span class="comment">// call to Wait observes that the child process has exited, whichever occurs</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	<span class="comment">// first. When the delay has elapsed, the command shuts down the child process</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	<span class="comment">// and/or its I/O pipes.</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	<span class="comment">// If the child process has failed to exit — perhaps because it ignored or</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	<span class="comment">// failed to receive a shutdown signal from a Cancel function, or because no</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	<span class="comment">// Cancel function was set — then it will be terminated using os.Process.Kill.</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	<span class="comment">// Then, if the I/O pipes communicating with the child process are still open,</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	<span class="comment">// those pipes are closed in order to unblock any goroutines currently blocked</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	<span class="comment">// on Read or Write calls.</span>
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	<span class="comment">// If pipes are closed due to WaitDelay, no Cancel call has occurred,</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>	<span class="comment">// and the command has otherwise exited with a successful status, Wait and</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>	<span class="comment">// similar methods will return ErrWaitDelay instead of nil.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	<span class="comment">// If WaitDelay is zero (the default), I/O pipes will be read until EOF,</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	<span class="comment">// which might not occur until orphaned subprocesses of the command have</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	<span class="comment">// also closed their descriptors for the pipes.</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	WaitDelay time.Duration
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>	<span class="comment">// childIOFiles holds closers for any of the child process&#39;s</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>	<span class="comment">// stdin, stdout, and/or stderr files that were opened by the Cmd itself</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>	<span class="comment">// (not supplied by the caller). These should be closed as soon as they</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	<span class="comment">// are inherited by the child process.</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>	childIOFiles []io.Closer
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	<span class="comment">// parentIOPipes holds closers for the parent&#39;s end of any pipes</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	<span class="comment">// connected to the child&#39;s stdin, stdout, and/or stderr streams</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>	<span class="comment">// that were opened by the Cmd itself (not supplied by the caller).</span>
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	<span class="comment">// These should be closed after Wait sees the command and copying</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>	<span class="comment">// goroutines exit, or after WaitDelay has expired.</span>
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	parentIOPipes []io.Closer
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	<span class="comment">// goroutine holds a set of closures to execute to copy data</span>
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	<span class="comment">// to and/or from the command&#39;s I/O pipes.</span>
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	goroutine []func() error
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	<span class="comment">// If goroutineErr is non-nil, it receives the first error from a copying</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	<span class="comment">// goroutine once all such goroutines have completed.</span>
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	<span class="comment">// goroutineErr is set to nil once its error has been received.</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	goroutineErr &lt;-chan error
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>	<span class="comment">// If ctxResult is non-nil, it receives the result of watchCtx exactly once.</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>	ctxResult &lt;-chan ctxResult
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>	<span class="comment">// The stack saved when the Command was created, if GODEBUG contains</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>	<span class="comment">// execwait=2. Used for debugging leaks.</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>	createdByStack []byte
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// For a security release long ago, we created x/sys/execabs,</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// which manipulated the unexported lookPathErr error field</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	<span class="comment">// in this struct. For Go 1.19 we exported the field as Err error,</span>
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	<span class="comment">// above, but we have to keep lookPathErr around for use by</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	<span class="comment">// old programs building against new toolchains.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	<span class="comment">// The String and Start methods look for an error in lookPathErr</span>
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>	<span class="comment">// in preference to Err, to preserve the errors that execabs sets.</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	<span class="comment">// In general we don&#39;t guarantee misuse of reflect like this,</span>
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	<span class="comment">// but the misuse of reflect was by us, the best of various bad</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	<span class="comment">// options to fix the security problem, and people depend on</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>	<span class="comment">// those old copies of execabs continuing to work.</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	<span class="comment">// The result is that we have to leave this variable around for the</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>	<span class="comment">// rest of time, a compatibility scar.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	<span class="comment">// See https://go.dev/blog/path-security</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	<span class="comment">// and https://go.dev/issue/43724 for more context.</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	lookPathErr error
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>}
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">// A ctxResult reports the result of watching the Context associated with a</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span><span class="comment">// running command (and sending corresponding signals if needed).</span>
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>type ctxResult struct {
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	err error
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	<span class="comment">// If timer is non-nil, it expires after WaitDelay has elapsed after</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	<span class="comment">// the Context is done.</span>
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>	<span class="comment">// (If timer is nil, that means that the Context was not done before the</span>
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	<span class="comment">// command completed, or no WaitDelay was set, or the WaitDelay already</span>
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>	<span class="comment">// expired and its effect was already applied.)</span>
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>	timer *time.Timer
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>}
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>var execwait = godebug.New(&#34;#execwait&#34;)
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>var execerrdot = godebug.New(&#34;execerrdot&#34;)
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>
<span id="L354" class="ln">   354&nbsp;&nbsp;</span><span class="comment">// Command returns the Cmd struct to execute the named program with</span>
<span id="L355" class="ln">   355&nbsp;&nbsp;</span><span class="comment">// the given arguments.</span>
<span id="L356" class="ln">   356&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span><span class="comment">// It sets only the Path and Args in the returned structure.</span>
<span id="L358" class="ln">   358&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L359" class="ln">   359&nbsp;&nbsp;</span><span class="comment">// If name contains no path separators, Command uses LookPath to</span>
<span id="L360" class="ln">   360&nbsp;&nbsp;</span><span class="comment">// resolve name to a complete path if possible. Otherwise it uses name</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span><span class="comment">// directly as Path.</span>
<span id="L362" class="ln">   362&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L363" class="ln">   363&nbsp;&nbsp;</span><span class="comment">// The returned Cmd&#39;s Args field is constructed from the command name</span>
<span id="L364" class="ln">   364&nbsp;&nbsp;</span><span class="comment">// followed by the elements of arg, so arg should not include the</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span><span class="comment">// command name itself. For example, Command(&#34;echo&#34;, &#34;hello&#34;).</span>
<span id="L366" class="ln">   366&nbsp;&nbsp;</span><span class="comment">// Args[0] is always name, not the possibly resolved Path.</span>
<span id="L367" class="ln">   367&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span><span class="comment">// On Windows, processes receive the whole command line as a single string</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// and do their own parsing. Command combines and quotes Args into a command</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span><span class="comment">// line string with an algorithm compatible with applications using</span>
<span id="L371" class="ln">   371&nbsp;&nbsp;</span><span class="comment">// CommandLineToArgvW (which is the most common way). Notable exceptions are</span>
<span id="L372" class="ln">   372&nbsp;&nbsp;</span><span class="comment">// msiexec.exe and cmd.exe (and thus, all batch files), which have a different</span>
<span id="L373" class="ln">   373&nbsp;&nbsp;</span><span class="comment">// unquoting algorithm. In these or other similar cases, you can do the</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// quoting yourself and provide the full command line in SysProcAttr.CmdLine,</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span><span class="comment">// leaving Args empty.</span>
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>func Command(name string, arg ...string) *Cmd {
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>	cmd := &amp;Cmd{
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>		Path: name,
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		Args: append([]string{name}, arg...),
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>	}
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>	if v := execwait.Value(); v != &#34;&#34; {
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		if v == &#34;2&#34; {
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>			<span class="comment">// Obtain the caller stack. (This is equivalent to runtime/debug.Stack,</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>			<span class="comment">// copied to avoid importing the whole package.)</span>
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>			stack := make([]byte, 1024)
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>			for {
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>				n := runtime.Stack(stack, false)
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>				if n &lt; len(stack) {
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>					stack = stack[:n]
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>					break
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>				}
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>				stack = make([]byte, 2*len(stack))
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>			}
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>			if i := bytes.Index(stack, []byte(&#34;\nos/exec.Command(&#34;)); i &gt;= 0 {
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>				stack = stack[i+1:]
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>			}
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>			cmd.createdByStack = stack
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		}
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>		runtime.SetFinalizer(cmd, func(c *Cmd) {
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>			if c.Process != nil &amp;&amp; c.ProcessState == nil {
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>				debugHint := &#34;&#34;
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>				if c.createdByStack == nil {
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>					debugHint = &#34; (set GODEBUG=execwait=2 to capture stacks for debugging)&#34;
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>				} else {
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>					os.Stderr.WriteString(&#34;GODEBUG=execwait=2 detected a leaked exec.Cmd created by:\n&#34;)
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>					os.Stderr.Write(c.createdByStack)
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>					os.Stderr.WriteString(&#34;\n&#34;)
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>					debugHint = &#34;&#34;
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>				}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>				panic(&#34;exec: Cmd started a Process but leaked without a call to Wait&#34; + debugHint)
<span id="L414" class="ln">   414&nbsp;&nbsp;</span>			}
<span id="L415" class="ln">   415&nbsp;&nbsp;</span>		})
<span id="L416" class="ln">   416&nbsp;&nbsp;</span>	}
<span id="L417" class="ln">   417&nbsp;&nbsp;</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>	if filepath.Base(name) == name {
<span id="L419" class="ln">   419&nbsp;&nbsp;</span>		lp, err := LookPath(name)
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>		if lp != &#34;&#34; {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>			<span class="comment">// Update cmd.Path even if err is non-nil.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>			<span class="comment">// If err is ErrDot (especially on Windows), lp may include a resolved</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>			<span class="comment">// extension (like .exe or .bat) that should be preserved.</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>			cmd.Path = lp
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>		}
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>		if err != nil {
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>			cmd.Err = err
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>		}
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	} else if runtime.GOOS == &#34;windows&#34; &amp;&amp; filepath.IsAbs(name) {
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>		<span class="comment">// We may need to add a filename extension from PATHEXT</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>		<span class="comment">// or verify an extension that is already present.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>		<span class="comment">// Since the path is absolute, its extension should be unambiguous</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>		<span class="comment">// and independent of cmd.Dir, and we can go ahead and update cmd.Path to</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>		<span class="comment">// reflect it.</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span>		<span class="comment">// Note that we cannot add an extension here for relative paths, because</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>		<span class="comment">// cmd.Dir may be set after we return from this function and that may cause</span>
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>		<span class="comment">// the command to resolve to a different extension.</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>		lp, err := lookExtensions(name, &#34;&#34;)
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>		if lp != &#34;&#34; {
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>			cmd.Path = lp
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>		}
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>		if err != nil {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>			cmd.Err = err
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>		}
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>	}
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>	return cmd
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>}
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>
<span id="L450" class="ln">   450&nbsp;&nbsp;</span><span class="comment">// CommandContext is like Command but includes a context.</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L452" class="ln">   452&nbsp;&nbsp;</span><span class="comment">// The provided context is used to interrupt the process</span>
<span id="L453" class="ln">   453&nbsp;&nbsp;</span><span class="comment">// (by calling cmd.Cancel or os.Process.Kill)</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span><span class="comment">// if the context becomes done before the command completes on its own.</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L456" class="ln">   456&nbsp;&nbsp;</span><span class="comment">// CommandContext sets the command&#39;s Cancel function to invoke the Kill method</span>
<span id="L457" class="ln">   457&nbsp;&nbsp;</span><span class="comment">// on its Process, and leaves its WaitDelay unset. The caller may change the</span>
<span id="L458" class="ln">   458&nbsp;&nbsp;</span><span class="comment">// cancellation behavior by modifying those fields before starting the command.</span>
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>func CommandContext(ctx context.Context, name string, arg ...string) *Cmd {
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	if ctx == nil {
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>		panic(&#34;nil Context&#34;)
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	}
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	cmd := Command(name, arg...)
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	cmd.ctx = ctx
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	cmd.Cancel = func() error {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>		return cmd.Process.Kill()
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	}
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	return cmd
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>}
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>
<span id="L471" class="ln">   471&nbsp;&nbsp;</span><span class="comment">// String returns a human-readable description of c.</span>
<span id="L472" class="ln">   472&nbsp;&nbsp;</span><span class="comment">// It is intended only for debugging.</span>
<span id="L473" class="ln">   473&nbsp;&nbsp;</span><span class="comment">// In particular, it is not suitable for use as input to a shell.</span>
<span id="L474" class="ln">   474&nbsp;&nbsp;</span><span class="comment">// The output of String may vary across Go releases.</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>func (c *Cmd) String() string {
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	if c.Err != nil || c.lookPathErr != nil {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>		<span class="comment">// failed to resolve path; report the original requested path (plus args)</span>
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		return strings.Join(c.Args, &#34; &#34;)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	<span class="comment">// report the exact executable path (plus args)</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	b := new(strings.Builder)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	b.WriteString(c.Path)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	for _, a := range c.Args[1:] {
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>		b.WriteByte(&#39; &#39;)
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>		b.WriteString(a)
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	}
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>	return b.String()
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>}
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span><span class="comment">// interfaceEqual protects against panics from doing equality tests on</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span><span class="comment">// two interfaces with non-comparable underlying types.</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>func interfaceEqual(a, b any) bool {
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>	defer func() {
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>		recover()
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>	}()
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>	return a == b
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>}
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>func (c *Cmd) argv() []string {
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>	if len(c.Args) &gt; 0 {
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		return c.Args
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>	}
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>	return []string{c.Path}
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>}
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>func (c *Cmd) childStdin() (*os.File, error) {
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>	if c.Stdin == nil {
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		f, err := os.Open(os.DevNull)
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>		if err != nil {
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>			return nil, err
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>		}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>		c.childIOFiles = append(c.childIOFiles, f)
<span id="L513" class="ln">   513&nbsp;&nbsp;</span>		return f, nil
<span id="L514" class="ln">   514&nbsp;&nbsp;</span>	}
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	if f, ok := c.Stdin.(*os.File); ok {
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>		return f, nil
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>	}
<span id="L519" class="ln">   519&nbsp;&nbsp;</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span>	pr, pw, err := os.Pipe()
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>	if err != nil {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>		return nil, err
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>	}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span>	c.childIOFiles = append(c.childIOFiles, pr)
<span id="L526" class="ln">   526&nbsp;&nbsp;</span>	c.parentIOPipes = append(c.parentIOPipes, pw)
<span id="L527" class="ln">   527&nbsp;&nbsp;</span>	c.goroutine = append(c.goroutine, func() error {
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>		_, err := io.Copy(pw, c.Stdin)
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>		if skipStdinCopyError(err) {
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>			err = nil
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		}
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>		if err1 := pw.Close(); err == nil {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>			err = err1
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>		}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>		return err
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>	})
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	return pr, nil
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>func (c *Cmd) childStdout() (*os.File, error) {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	return c.writerDescriptor(c.Stdout)
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func (c *Cmd) childStderr(childStdout *os.File) (*os.File, error) {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	if c.Stderr != nil &amp;&amp; interfaceEqual(c.Stderr, c.Stdout) {
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>		return childStdout, nil
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>	}
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>	return c.writerDescriptor(c.Stderr)
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>}
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span><span class="comment">// writerDescriptor returns an os.File to which the child process</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span><span class="comment">// can write to send data to w.</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// If w is nil, writerDescriptor returns a File that writes to os.DevNull.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>func (c *Cmd) writerDescriptor(w io.Writer) (*os.File, error) {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	if w == nil {
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>		f, err := os.OpenFile(os.DevNull, os.O_WRONLY, 0)
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		if err != nil {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>			return nil, err
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		}
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>		c.childIOFiles = append(c.childIOFiles, f)
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>		return f, nil
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	}
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	if f, ok := w.(*os.File); ok {
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>		return f, nil
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>	}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>	pr, pw, err := os.Pipe()
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>	if err != nil {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>		return nil, err
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	}
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	c.childIOFiles = append(c.childIOFiles, pw)
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	c.parentIOPipes = append(c.parentIOPipes, pr)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	c.goroutine = append(c.goroutine, func() error {
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>		_, err := io.Copy(w, pr)
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		pr.Close() <span class="comment">// in case io.Copy stopped due to write error</span>
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>		return err
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	})
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	return pw, nil
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>func closeDescriptors(closers []io.Closer) {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>	for _, fd := range closers {
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		fd.Close()
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>}
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>
<span id="L590" class="ln">   590&nbsp;&nbsp;</span><span class="comment">// Run starts the specified command and waits for it to complete.</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L592" class="ln">   592&nbsp;&nbsp;</span><span class="comment">// The returned error is nil if the command runs, has no problems</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span><span class="comment">// copying stdin, stdout, and stderr, and exits with a zero exit</span>
<span id="L594" class="ln">   594&nbsp;&nbsp;</span><span class="comment">// status.</span>
<span id="L595" class="ln">   595&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L596" class="ln">   596&nbsp;&nbsp;</span><span class="comment">// If the command starts but does not complete successfully, the error is of</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span><span class="comment">// type *ExitError. Other error types may be returned for other situations.</span>
<span id="L598" class="ln">   598&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span><span class="comment">// If the calling goroutine has locked the operating system thread</span>
<span id="L600" class="ln">   600&nbsp;&nbsp;</span><span class="comment">// with runtime.LockOSThread and modified any inheritable OS-level</span>
<span id="L601" class="ln">   601&nbsp;&nbsp;</span><span class="comment">// thread state (for example, Linux or Plan 9 name spaces), the new</span>
<span id="L602" class="ln">   602&nbsp;&nbsp;</span><span class="comment">// process will inherit the caller&#39;s thread state.</span>
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>func (c *Cmd) Run() error {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	if err := c.Start(); err != nil {
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>		return err
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	}
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	return c.Wait()
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>}
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>
<span id="L610" class="ln">   610&nbsp;&nbsp;</span><span class="comment">// Start starts the specified command but does not wait for it to complete.</span>
<span id="L611" class="ln">   611&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L612" class="ln">   612&nbsp;&nbsp;</span><span class="comment">// If Start returns successfully, the c.Process field will be set.</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// After a successful call to Start the Wait method must be called in</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// order to release associated system resources.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>func (c *Cmd) Start() error {
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	<span class="comment">// Check for doubled Start calls before we defer failure cleanup. If the prior</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	<span class="comment">// call to Start succeeded, we don&#39;t want to spuriously close its pipes.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	if c.Process != nil {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>		return errors.New(&#34;exec: already started&#34;)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	}
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>	started := false
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	defer func() {
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>		closeDescriptors(c.childIOFiles)
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>		c.childIOFiles = nil
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		if !started {
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>			closeDescriptors(c.parentIOPipes)
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>			c.parentIOPipes = nil
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>		}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>	}()
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>	if c.Path == &#34;&#34; &amp;&amp; c.Err == nil &amp;&amp; c.lookPathErr == nil {
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>		c.Err = errors.New(&#34;exec: no command&#34;)
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>	}
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	if c.Err != nil || c.lookPathErr != nil {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>		if c.lookPathErr != nil {
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>			return c.lookPathErr
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>		}
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		return c.Err
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>	}
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>	lp := c.Path
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>	if runtime.GOOS == &#34;windows&#34; &amp;&amp; !filepath.IsAbs(c.Path) {
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		<span class="comment">// If c.Path is relative, we had to wait until now</span>
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>		<span class="comment">// to resolve it in case c.Dir was changed.</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		<span class="comment">// (If it is absolute, we already resolved its extension in Command</span>
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>		<span class="comment">// and shouldn&#39;t need to do so again.)</span>
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>		<span class="comment">// Unfortunately, we cannot write the result back to c.Path because programs</span>
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		<span class="comment">// may assume that they can call Start concurrently with reading the path.</span>
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>		<span class="comment">// (It is safe and non-racy to do so on Unix platforms, and users might not</span>
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>		<span class="comment">// test with the race detector on all platforms;</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>		<span class="comment">// see https://go.dev/issue/62596.)</span>
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>		<span class="comment">//</span>
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>		<span class="comment">// So we will pass the fully resolved path to os.StartProcess, but leave</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>		<span class="comment">// c.Path as is: missing a bit of logging information seems less harmful</span>
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>		<span class="comment">// than triggering a surprising data race, and if the user really cares</span>
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		<span class="comment">// about that bit of logging they can always use LookPath to resolve it.</span>
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>		var err error
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>		lp, err = lookExtensions(c.Path, c.Dir)
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>		if err != nil {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>			return err
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>		}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	}
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>	if c.Cancel != nil &amp;&amp; c.ctx == nil {
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>		return errors.New(&#34;exec: command with a non-nil Cancel was not created with CommandContext&#34;)
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>	}
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	if c.ctx != nil {
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>		select {
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>		case &lt;-c.ctx.Done():
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>			return c.ctx.Err()
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>		default:
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		}
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	childFiles := make([]*os.File, 0, 3+len(c.ExtraFiles))
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	stdin, err := c.childStdin()
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	if err != nil {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		return err
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>	}
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>	childFiles = append(childFiles, stdin)
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>	stdout, err := c.childStdout()
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>	if err != nil {
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		return err
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>	}
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	childFiles = append(childFiles, stdout)
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	stderr, err := c.childStderr(stdout)
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>	if err != nil {
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>		return err
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>	}
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	childFiles = append(childFiles, stderr)
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>	childFiles = append(childFiles, c.ExtraFiles...)
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>	env, err := c.environ()
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	if err != nil {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		return err
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	c.Process, err = os.StartProcess(lp, c.argv(), &amp;os.ProcAttr{
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>		Dir:   c.Dir,
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>		Files: childFiles,
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>		Env:   env,
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>		Sys:   c.SysProcAttr,
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>	})
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>	if err != nil {
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>		return err
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	}
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	started = true
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	<span class="comment">// Don&#39;t allocate the goroutineErr channel unless there are goroutines to start.</span>
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	if len(c.goroutine) &gt; 0 {
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>		goroutineErr := make(chan error, 1)
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>		c.goroutineErr = goroutineErr
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>		type goroutineStatus struct {
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>			running  int
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>			firstErr error
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>		}
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>		statusc := make(chan goroutineStatus, 1)
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		statusc &lt;- goroutineStatus{running: len(c.goroutine)}
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>		for _, fn := range c.goroutine {
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>			go func(fn func() error) {
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>				err := fn()
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>				status := &lt;-statusc
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>				if status.firstErr == nil {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>					status.firstErr = err
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>				}
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>				status.running--
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>				if status.running == 0 {
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>					goroutineErr &lt;- status.firstErr
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>				} else {
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>					statusc &lt;- status
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>				}
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>			}(fn)
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		}
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>		c.goroutine = nil <span class="comment">// Allow the goroutines&#39; closures to be GC&#39;d when they complete.</span>
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	}
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>	<span class="comment">// If we have anything to do when the command&#39;s Context expires,</span>
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>	<span class="comment">// start a goroutine to watch for cancellation.</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	<span class="comment">// (Even if the command was created by CommandContext, a helper library may</span>
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>	<span class="comment">// have explicitly set its Cancel field back to nil, indicating that it should</span>
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	<span class="comment">// be allowed to continue running after cancellation after all.)</span>
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	if (c.Cancel != nil || c.WaitDelay != 0) &amp;&amp; c.ctx != nil &amp;&amp; c.ctx.Done() != nil {
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>		resultc := make(chan ctxResult)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>		c.ctxResult = resultc
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>		go c.watchCtx(resultc)
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>	}
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>	return nil
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>
<span id="L756" class="ln">   756&nbsp;&nbsp;</span><span class="comment">// watchCtx watches c.ctx until it is able to send a result to resultc.</span>
<span id="L757" class="ln">   757&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L758" class="ln">   758&nbsp;&nbsp;</span><span class="comment">// If c.ctx is done before a result can be sent, watchCtx calls c.Cancel,</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span><span class="comment">// and/or kills cmd.Process it after c.WaitDelay has elapsed.</span>
<span id="L760" class="ln">   760&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L761" class="ln">   761&nbsp;&nbsp;</span><span class="comment">// watchCtx manipulates c.goroutineErr, so its result must be received before</span>
<span id="L762" class="ln">   762&nbsp;&nbsp;</span><span class="comment">// c.awaitGoroutines is called.</span>
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>func (c *Cmd) watchCtx(resultc chan&lt;- ctxResult) {
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	select {
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>	case resultc &lt;- ctxResult{}:
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>		return
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>	case &lt;-c.ctx.Done():
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	}
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	var err error
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	if c.Cancel != nil {
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>		if interruptErr := c.Cancel(); interruptErr == nil {
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>			<span class="comment">// We appear to have successfully interrupted the command, so any</span>
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>			<span class="comment">// program behavior from this point may be due to ctx even if the</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>			<span class="comment">// command exits with code 0.</span>
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>			err = c.ctx.Err()
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		} else if errors.Is(interruptErr, os.ErrProcessDone) {
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>			<span class="comment">// The process already finished: we just didn&#39;t notice it yet.</span>
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>			<span class="comment">// (Perhaps c.Wait hadn&#39;t been called, or perhaps it happened to race with</span>
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>			<span class="comment">// c.ctx being cancelled.) Don&#39;t inject a needless error.</span>
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>		} else {
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>			err = wrappedError{
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>				prefix: &#34;exec: canceling Cmd&#34;,
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>				err:    interruptErr,
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>			}
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>		}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	}
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	if c.WaitDelay == 0 {
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>		resultc &lt;- ctxResult{err: err}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>		return
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>	}
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>	timer := time.NewTimer(c.WaitDelay)
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	select {
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	case resultc &lt;- ctxResult{err: err, timer: timer}:
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>		<span class="comment">// c.Process.Wait returned and we&#39;ve handed the timer off to c.Wait.</span>
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>		<span class="comment">// It will take care of goroutine shutdown from here.</span>
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>		return
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>	case &lt;-timer.C:
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	}
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	killed := false
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	if killErr := c.Process.Kill(); killErr == nil {
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>		<span class="comment">// We appear to have killed the process. c.Process.Wait should return a</span>
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>		<span class="comment">// non-nil error to c.Wait unless the Kill signal races with a successful</span>
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>		<span class="comment">// exit, and if that does happen we shouldn&#39;t report a spurious error,</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>		<span class="comment">// so don&#39;t set err to anything here.</span>
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>		killed = true
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>	} else if !errors.Is(killErr, os.ErrProcessDone) {
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>		err = wrappedError{
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>			prefix: &#34;exec: killing Cmd&#34;,
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>			err:    killErr,
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>		}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>	}
<span id="L815" class="ln">   815&nbsp;&nbsp;</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span>	if c.goroutineErr != nil {
<span id="L817" class="ln">   817&nbsp;&nbsp;</span>		select {
<span id="L818" class="ln">   818&nbsp;&nbsp;</span>		case goroutineErr := &lt;-c.goroutineErr:
<span id="L819" class="ln">   819&nbsp;&nbsp;</span>			<span class="comment">// Forward goroutineErr only if we don&#39;t have reason to believe it was</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span>			<span class="comment">// caused by a call to Cancel or Kill above.</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span>			if err == nil &amp;&amp; !killed {
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>				err = goroutineErr
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>			}
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>		default:
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>			<span class="comment">// Close the child process&#39;s I/O pipes, in case it abandoned some</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>			<span class="comment">// subprocess that inherited them and is still holding them open</span>
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>			<span class="comment">// (see https://go.dev/issue/23019).</span>
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>			<span class="comment">//</span>
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>			<span class="comment">// We close the goroutine pipes only after we have sent any signals we&#39;re</span>
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>			<span class="comment">// going to send to the process (via Signal or Kill above): if we send</span>
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>			<span class="comment">// SIGKILL to the process, we would prefer for it to die of SIGKILL, not</span>
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>			<span class="comment">// SIGPIPE. (However, this may still cause any orphaned subprocesses to</span>
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>			<span class="comment">// terminate with SIGPIPE.)</span>
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>			closeDescriptors(c.parentIOPipes)
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>			<span class="comment">// Wait for the copying goroutines to finish, but report ErrWaitDelay for</span>
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>			<span class="comment">// the error: any other error here could result from closing the pipes.</span>
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>			_ = &lt;-c.goroutineErr
<span id="L838" class="ln">   838&nbsp;&nbsp;</span>			if err == nil {
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>				err = ErrWaitDelay
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>			}
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		}
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>		<span class="comment">// Since we have already received the only result from c.goroutineErr,</span>
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>		<span class="comment">// set it to nil to prevent awaitGoroutines from blocking on it.</span>
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>		c.goroutineErr = nil
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	}
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>	resultc &lt;- ctxResult{err: err}
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>}
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>
<span id="L851" class="ln">   851&nbsp;&nbsp;</span><span class="comment">// An ExitError reports an unsuccessful exit by a command.</span>
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>type ExitError struct {
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	*os.ProcessState
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>	<span class="comment">// Stderr holds a subset of the standard error output from the</span>
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>	<span class="comment">// Cmd.Output method if standard error was not otherwise being</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span>	<span class="comment">// collected.</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>	<span class="comment">// If the error output is long, Stderr may contain only a prefix</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span>	<span class="comment">// and suffix of the output, with the middle replaced with</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>	<span class="comment">// text about the number of omitted bytes.</span>
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>	<span class="comment">// Stderr is provided for debugging, for inclusion in error messages.</span>
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	<span class="comment">// Users with other needs should redirect Cmd.Stderr as needed.</span>
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	Stderr []byte
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>}
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>func (e *ExitError) Error() string {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>	return e.ProcessState.String()
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>
<span id="L872" class="ln">   872&nbsp;&nbsp;</span><span class="comment">// Wait waits for the command to exit and waits for any copying to</span>
<span id="L873" class="ln">   873&nbsp;&nbsp;</span><span class="comment">// stdin or copying from stdout or stderr to complete.</span>
<span id="L874" class="ln">   874&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// The command must have been started by Start.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L877" class="ln">   877&nbsp;&nbsp;</span><span class="comment">// The returned error is nil if the command runs, has no problems</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span><span class="comment">// copying stdin, stdout, and stderr, and exits with a zero exit</span>
<span id="L879" class="ln">   879&nbsp;&nbsp;</span><span class="comment">// status.</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span><span class="comment">// If the command fails to run or doesn&#39;t complete successfully, the</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span><span class="comment">// error is of type *ExitError. Other error types may be</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span><span class="comment">// returned for I/O problems.</span>
<span id="L884" class="ln">   884&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span><span class="comment">// If any of c.Stdin, c.Stdout or c.Stderr are not an *os.File, Wait also waits</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span><span class="comment">// for the respective I/O loop copying to or from the process to complete.</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span><span class="comment">// Wait releases any resources associated with the Cmd.</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>func (c *Cmd) Wait() error {
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>	if c.Process == nil {
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>		return errors.New(&#34;exec: not started&#34;)
<span id="L892" class="ln">   892&nbsp;&nbsp;</span>	}
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>	if c.ProcessState != nil {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>		return errors.New(&#34;exec: Wait was already called&#34;)
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>	}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span>	state, err := c.Process.Wait()
<span id="L898" class="ln">   898&nbsp;&nbsp;</span>	if err == nil &amp;&amp; !state.Success() {
<span id="L899" class="ln">   899&nbsp;&nbsp;</span>		err = &amp;ExitError{ProcessState: state}
<span id="L900" class="ln">   900&nbsp;&nbsp;</span>	}
<span id="L901" class="ln">   901&nbsp;&nbsp;</span>	c.ProcessState = state
<span id="L902" class="ln">   902&nbsp;&nbsp;</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span>	var timer *time.Timer
<span id="L904" class="ln">   904&nbsp;&nbsp;</span>	if c.ctxResult != nil {
<span id="L905" class="ln">   905&nbsp;&nbsp;</span>		watch := &lt;-c.ctxResult
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>		timer = watch.timer
<span id="L907" class="ln">   907&nbsp;&nbsp;</span>		<span class="comment">// If c.Process.Wait returned an error, prefer that.</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span>		<span class="comment">// Otherwise, report any error from the watchCtx goroutine,</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span>		<span class="comment">// such as a Context cancellation or a WaitDelay overrun.</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span>		if err == nil &amp;&amp; watch.err != nil {
<span id="L911" class="ln">   911&nbsp;&nbsp;</span>			err = watch.err
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>		}
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	}
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>	if goroutineErr := c.awaitGoroutines(timer); err == nil {
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>		<span class="comment">// Report an error from the copying goroutines only if the program otherwise</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span>		<span class="comment">// exited normally on its own. Otherwise, the copying error may be due to the</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span>		<span class="comment">// abnormal termination.</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span>		err = goroutineErr
<span id="L920" class="ln">   920&nbsp;&nbsp;</span>	}
<span id="L921" class="ln">   921&nbsp;&nbsp;</span>	closeDescriptors(c.parentIOPipes)
<span id="L922" class="ln">   922&nbsp;&nbsp;</span>	c.parentIOPipes = nil
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	return err
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>}
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span><span class="comment">// awaitGoroutines waits for the results of the goroutines copying data to or</span>
<span id="L928" class="ln">   928&nbsp;&nbsp;</span><span class="comment">// from the command&#39;s I/O pipes.</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L930" class="ln">   930&nbsp;&nbsp;</span><span class="comment">// If c.WaitDelay elapses before the goroutines complete, awaitGoroutines</span>
<span id="L931" class="ln">   931&nbsp;&nbsp;</span><span class="comment">// forcibly closes their pipes and returns ErrWaitDelay.</span>
<span id="L932" class="ln">   932&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L933" class="ln">   933&nbsp;&nbsp;</span><span class="comment">// If timer is non-nil, it must send to timer.C at the end of c.WaitDelay.</span>
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>func (c *Cmd) awaitGoroutines(timer *time.Timer) error {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>	defer func() {
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		if timer != nil {
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>			timer.Stop()
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		}
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		c.goroutineErr = nil
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>	}()
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>	if c.goroutineErr == nil {
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		return nil <span class="comment">// No running goroutines to await.</span>
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>	}
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>	if timer == nil {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>		if c.WaitDelay == 0 {
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>			return &lt;-c.goroutineErr
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		}
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>		select {
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		case err := &lt;-c.goroutineErr:
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>			<span class="comment">// Avoid the overhead of starting a timer.</span>
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>			return err
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>		default:
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>		}
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>		<span class="comment">// No existing timer was started: either there is no Context associated with</span>
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		<span class="comment">// the command, or c.Process.Wait completed before the Context was done.</span>
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		timer = time.NewTimer(c.WaitDelay)
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>	}
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>	select {
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>	case &lt;-timer.C:
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>		closeDescriptors(c.parentIOPipes)
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		<span class="comment">// Wait for the copying goroutines to finish, but ignore any error</span>
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>		<span class="comment">// (since it was probably caused by closing the pipes).</span>
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>		_ = &lt;-c.goroutineErr
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>		return ErrWaitDelay
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>	case err := &lt;-c.goroutineErr:
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		return err
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	}
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>}
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>
<span id="L976" class="ln">   976&nbsp;&nbsp;</span><span class="comment">// Output runs the command and returns its standard output.</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span><span class="comment">// Any returned error will usually be of type *ExitError.</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span><span class="comment">// If c.Stderr was nil, Output populates ExitError.Stderr.</span>
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>func (c *Cmd) Output() ([]byte, error) {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>	if c.Stdout != nil {
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stdout already set&#34;)
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	}
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	var stdout bytes.Buffer
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	c.Stdout = &amp;stdout
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	captureErr := c.Stderr == nil
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>	if captureErr {
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>		c.Stderr = &amp;prefixSuffixSaver{N: 32 &lt;&lt; 10}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	}
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	err := c.Run()
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	if err != nil &amp;&amp; captureErr {
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>		if ee, ok := err.(*ExitError); ok {
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>			ee.Stderr = c.Stderr.(*prefixSuffixSaver).Bytes()
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>		}
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	}
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	return stdout.Bytes(), err
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>}
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span><span class="comment">// CombinedOutput runs the command and returns its combined standard</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span><span class="comment">// output and standard error.</span>
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>func (c *Cmd) CombinedOutput() ([]byte, error) {
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>	if c.Stdout != nil {
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stdout already set&#34;)
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span>	}
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span>	if c.Stderr != nil {
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stderr already set&#34;)
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span>	}
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>	var b bytes.Buffer
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	c.Stdout = &amp;b
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	c.Stderr = &amp;b
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>	err := c.Run()
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>	return b.Bytes(), err
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>}
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span><span class="comment">// StdinPipe returns a pipe that will be connected to the command&#39;s</span>
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span><span class="comment">// standard input when the command starts.</span>
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span><span class="comment">// The pipe will be closed automatically after Wait sees the command exit.</span>
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span><span class="comment">// A caller need only call Close to force the pipe to close sooner.</span>
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span><span class="comment">// For example, if the command being run will not exit until standard input</span>
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span><span class="comment">// is closed, the caller must close the pipe.</span>
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>func (c *Cmd) StdinPipe() (io.WriteCloser, error) {
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>	if c.Stdin != nil {
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stdin already set&#34;)
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>	}
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	if c.Process != nil {
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: StdinPipe after process started&#34;)
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>	}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>	pr, pw, err := os.Pipe()
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span>	if err != nil {
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span>		return nil, err
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>	}
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	c.Stdin = pr
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	c.childIOFiles = append(c.childIOFiles, pr)
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	c.parentIOPipes = append(c.parentIOPipes, pw)
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	return pw, nil
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>}
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span><span class="comment">// StdoutPipe returns a pipe that will be connected to the command&#39;s</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span><span class="comment">// standard output when the command starts.</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span><span class="comment">// Wait will close the pipe after seeing the command exit, so most callers</span>
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span><span class="comment">// need not close the pipe themselves. It is thus incorrect to call Wait</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span><span class="comment">// before all reads from the pipe have completed.</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span><span class="comment">// For the same reason, it is incorrect to call Run when using StdoutPipe.</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span><span class="comment">// See the example for idiomatic usage.</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span><span class="selection">func (c *Cmd) StdoutPipe() (io.ReadCloser, error)</span> {
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	if c.Stdout != nil {
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stdout already set&#34;)
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	}
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>	if c.Process != nil {
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: StdoutPipe after process started&#34;)
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	}
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	pr, pw, err := os.Pipe()
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	if err != nil {
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>		return nil, err
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>	c.Stdout = pw
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	c.childIOFiles = append(c.childIOFiles, pw)
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>	c.parentIOPipes = append(c.parentIOPipes, pr)
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>	return pr, nil
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>}
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span><span class="comment">// StderrPipe returns a pipe that will be connected to the command&#39;s</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span><span class="comment">// standard error when the command starts.</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span><span class="comment">// Wait will close the pipe after seeing the command exit, so most callers</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span><span class="comment">// need not close the pipe themselves. It is thus incorrect to call Wait</span>
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span><span class="comment">// before all reads from the pipe have completed.</span>
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span><span class="comment">// For the same reason, it is incorrect to use Run when using StderrPipe.</span>
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span><span class="comment">// See the StdoutPipe example for idiomatic usage.</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>func (c *Cmd) StderrPipe() (io.ReadCloser, error) {
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>	if c.Stderr != nil {
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: Stderr already set&#34;)
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>	}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>	if c.Process != nil {
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>		return nil, errors.New(&#34;exec: StderrPipe after process started&#34;)
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>	}
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>	pr, pw, err := os.Pipe()
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>	if err != nil {
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>		return nil, err
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>	}
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>	c.Stderr = pw
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>	c.childIOFiles = append(c.childIOFiles, pw)
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>	c.parentIOPipes = append(c.parentIOPipes, pr)
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>	return pr, nil
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span><span class="comment">// prefixSuffixSaver is an io.Writer which retains the first N bytes</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span><span class="comment">// and the last N bytes written to it. The Bytes() methods reconstructs</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span><span class="comment">// it with a pretty error message.</span>
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>type prefixSuffixSaver struct {
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>	N         int <span class="comment">// max size of prefix or suffix</span>
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>	prefix    []byte
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>	suffix    []byte <span class="comment">// ring buffer once len(suffix) == N</span>
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>	suffixOff int    <span class="comment">// offset to write into suffix</span>
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>	skipped   int64
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>	<span class="comment">// TODO(bradfitz): we could keep one large []byte and use part of it for</span>
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>	<span class="comment">// the prefix, reserve space for the &#39;... Omitting N bytes ...&#39; message,</span>
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>	<span class="comment">// then the ring buffer suffix, and just rearrange the ring buffer</span>
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>	<span class="comment">// suffix when Bytes() is called, but it doesn&#39;t seem worth it for</span>
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>	<span class="comment">// now just for error messages. It&#39;s only ~64KB anyway.</span>
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>}
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>func (w *prefixSuffixSaver) Write(p []byte) (n int, err error) {
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>	lenp := len(p)
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>	p = w.fill(&amp;w.prefix, p)
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>	<span class="comment">// Only keep the last w.N bytes of suffix data.</span>
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>	if overage := len(p) - w.N; overage &gt; 0 {
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>		p = p[overage:]
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>		w.skipped += int64(overage)
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>	}
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>	p = w.fill(&amp;w.suffix, p)
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>	<span class="comment">// w.suffix is full now if p is non-empty. Overwrite it in a circle.</span>
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>	for len(p) &gt; 0 { <span class="comment">// 0, 1, or 2 iterations.</span>
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>		n := copy(w.suffix[w.suffixOff:], p)
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>		p = p[n:]
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>		w.skipped += int64(n)
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>		w.suffixOff += n
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>		if w.suffixOff == w.N {
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>			w.suffixOff = 0
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>		}
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>	}
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>	return lenp, nil
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span><span class="comment">// fill appends up to len(p) bytes of p to *dst, such that *dst does not</span>
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span><span class="comment">// grow larger than w.N. It returns the un-appended suffix of p.</span>
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>func (w *prefixSuffixSaver) fill(dst *[]byte, p []byte) (pRemain []byte) {
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	if remain := w.N - len(*dst); remain &gt; 0 {
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>		add := min(len(p), remain)
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>		*dst = append(*dst, p[:add]...)
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span>		p = p[add:]
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span>	}
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>	return p
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>}
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>func (w *prefixSuffixSaver) Bytes() []byte {
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>	if w.suffix == nil {
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>		return w.prefix
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>	}
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>	if w.skipped == 0 {
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>		return append(w.prefix, w.suffix...)
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>	}
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>	var buf bytes.Buffer
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>	buf.Grow(len(w.prefix) + len(w.suffix) + 50)
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>	buf.Write(w.prefix)
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	buf.WriteString(&#34;\n... omitting &#34;)
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	buf.WriteString(strconv.FormatInt(w.skipped, 10))
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>	buf.WriteString(&#34; bytes ...\n&#34;)
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	buf.Write(w.suffix[w.suffixOff:])
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	buf.Write(w.suffix[:w.suffixOff])
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>	return buf.Bytes()
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>}
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span><span class="comment">// environ returns a best-effort copy of the environment in which the command</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span><span class="comment">// would be run as it is currently configured. If an error occurs in computing</span>
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span><span class="comment">// the environment, it is returned alongside the best-effort copy.</span>
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>func (c *Cmd) environ() ([]string, error) {
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>	var err error
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>	env := c.Env
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>	if env == nil {
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span>		env, err = execenv.Default(c.SysProcAttr)
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>		if err != nil {
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>			env = os.Environ()
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>			<span class="comment">// Note that the non-nil err is preserved despite env being overridden.</span>
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>		}
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span>		if c.Dir != &#34;&#34; {
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>			switch runtime.GOOS {
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>			case &#34;windows&#34;, &#34;plan9&#34;:
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span>				<span class="comment">// Windows and Plan 9 do not use the PWD variable, so we don&#39;t need to</span>
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span>				<span class="comment">// keep it accurate.</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span>			default:
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span>				<span class="comment">// On POSIX platforms, PWD represents “an absolute pathname of the</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span>				<span class="comment">// current working directory.” Since we are changing the working</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span>				<span class="comment">// directory for the command, we should also update PWD to reflect that.</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span>				<span class="comment">//</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>				<span class="comment">// Unfortunately, we didn&#39;t always do that, so (as proposed in</span>
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>				<span class="comment">// https://go.dev/issue/50599) to avoid unintended collateral damage we</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span>				<span class="comment">// only implicitly update PWD when Env is nil. That way, we&#39;re much</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span>				<span class="comment">// less likely to override an intentional change to the variable.</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>				if pwd, absErr := filepath.Abs(c.Dir); absErr == nil {
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>					env = append(env, &#34;PWD=&#34;+pwd)
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>				} else if err == nil {
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>					err = absErr
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>				}
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>			}
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>		}
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>	}
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>	env, dedupErr := dedupEnv(env)
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	if err == nil {
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>		err = dedupErr
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>	}
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	return addCriticalEnv(env), err
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>}
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span><span class="comment">// Environ returns a copy of the environment in which the command would be run</span>
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span><span class="comment">// as it is currently configured.</span>
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>func (c *Cmd) Environ() []string {
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>	<span class="comment">//  Intentionally ignore errors: environ returns a best-effort environment no matter what.</span>
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>	env, _ := c.environ()
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>	return env
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>}
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span><span class="comment">// dedupEnv returns a copy of env with any duplicates removed, in favor of</span>
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span><span class="comment">// later values.</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span><span class="comment">// Items not of the normal environment &#34;key=value&#34; form are preserved unchanged.</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span><span class="comment">// Except on Plan 9, items containing NUL characters are removed, and</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span><span class="comment">// an error is returned along with the remaining values.</span>
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>func dedupEnv(env []string) ([]string, error) {
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	return dedupEnvCase(runtime.GOOS == &#34;windows&#34;, runtime.GOOS == &#34;plan9&#34;, env)
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>}
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span><span class="comment">// dedupEnvCase is dedupEnv with a case option for testing.</span>
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span><span class="comment">// If caseInsensitive is true, the case of keys is ignored.</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span><span class="comment">// If nulOK is false, items containing NUL characters are allowed.</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>func dedupEnvCase(caseInsensitive, nulOK bool, env []string) ([]string, error) {
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>	<span class="comment">// Construct the output in reverse order, to preserve the</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>	<span class="comment">// last occurrence of each key.</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	var err error
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>	out := make([]string, 0, len(env))
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>	saw := make(map[string]bool, len(env))
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>	for n := len(env); n &gt; 0; n-- {
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>		kv := env[n-1]
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>		<span class="comment">// Reject NUL in environment variables to prevent security issues (#56284);</span>
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>		<span class="comment">// except on Plan 9, which uses NUL as os.PathListSeparator (#56544).</span>
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>		if !nulOK &amp;&amp; strings.IndexByte(kv, 0) != -1 {
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>			err = errors.New(&#34;exec: environment variable contains NUL&#34;)
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>			continue
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>		}
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span>		i := strings.Index(kv, &#34;=&#34;)
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>		if i == 0 {
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>			<span class="comment">// We observe in practice keys with a single leading &#34;=&#34; on Windows.</span>
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>			<span class="comment">// TODO(#49886): Should we consume only the first leading &#34;=&#34; as part</span>
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>			<span class="comment">// of the key, or parse through arbitrarily many of them until a non-&#34;=&#34;?</span>
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>			i = strings.Index(kv[1:], &#34;=&#34;) + 1
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>		}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>		if i &lt; 0 {
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>			if kv != &#34;&#34; {
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>				<span class="comment">// The entry is not of the form &#34;key=value&#34; (as it is required to be).</span>
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>				<span class="comment">// Leave it as-is for now.</span>
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>				<span class="comment">// TODO(#52436): should we strip or reject these bogus entries?</span>
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>				out = append(out, kv)
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>			}
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>			continue
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>		}
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>		k := kv[:i]
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>		if caseInsensitive {
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>			k = strings.ToLower(k)
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>		}
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>		if saw[k] {
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>			continue
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>		}
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>		saw[k] = true
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>		out = append(out, kv)
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>	}
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>	<span class="comment">// Now reverse the slice to restore the original order.</span>
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	for i := 0; i &lt; len(out)/2; i++ {
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>		j := len(out) - i - 1
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>		out[i], out[j] = out[j], out[i]
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>	}
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	return out, err
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>}
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span><span class="comment">// addCriticalEnv adds any critical environment variables that are required</span>
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span><span class="comment">// (or at least almost always required) on the operating system.</span>
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span><span class="comment">// Currently this is only used for Windows.</span>
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>func addCriticalEnv(env []string) []string {
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>	if runtime.GOOS != &#34;windows&#34; {
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>		return env
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>	}
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>	for _, kv := range env {
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>		k, _, ok := strings.Cut(kv, &#34;=&#34;)
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>		if !ok {
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>			continue
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>		}
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>		if strings.EqualFold(k, &#34;SYSTEMROOT&#34;) {
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>			<span class="comment">// We already have it.</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>			return env
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>		}
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	}
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	return append(env, &#34;SYSTEMROOT=&#34;+os.Getenv(&#34;SYSTEMROOT&#34;))
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>}
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span><span class="comment">// ErrDot indicates that a path lookup resolved to an executable</span>
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span><span class="comment">// in the current directory due to ‘.’ being in the path, either</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span><span class="comment">// implicitly or explicitly. See the package documentation for details.</span>
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span><span class="comment">// Note that functions in this package do not return ErrDot directly.</span>
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span><span class="comment">// Code should use errors.Is(err, ErrDot), not err == ErrDot,</span>
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span><span class="comment">// to test whether a returned error err is due to this condition.</span>
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>var ErrDot = errors.New(&#34;cannot run executable found relative to current directory&#34;)
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>
</pre><p><a href="exec.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
