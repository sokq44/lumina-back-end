<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/os/signal/signal.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./signal.go?s=4593:4622#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/os">os</a>/<a href="http://localhost:8080/src/os/signal">signal</a>/<span class="text-muted">signal.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/os/signal">os/signal</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span>package signal
<span id="L6" class="ln">     6&nbsp;&nbsp;</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span>import (
<span id="L8" class="ln">     8&nbsp;&nbsp;</span>	&#34;context&#34;
<span id="L9" class="ln">     9&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L10" class="ln">    10&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L11" class="ln">    11&nbsp;&nbsp;</span>)
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>var handlers struct {
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>	sync.Mutex
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	<span class="comment">// Map a channel to the signals that should be sent to it.</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	m map[chan&lt;- os.Signal]*handler
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	<span class="comment">// Map a signal to the number of channels receiving it.</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	ref [numSig]int64
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	<span class="comment">// Map channels to signals while the channel is being stopped.</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	<span class="comment">// Not a map because entries live here only very briefly.</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	<span class="comment">// We need a separate container because we need m to correspond to ref</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	<span class="comment">// at all times, and we also need to keep track of the *handler</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	<span class="comment">// value for a channel being stopped. See the Stop function.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	stopping []stopping
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>}
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>type stopping struct {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	c chan&lt;- os.Signal
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	h *handler
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>}
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>type handler struct {
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>	mask [(numSig + 31) / 32]uint32
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>}
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>func (h *handler) want(sig int) bool {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>	return (h.mask[sig/32]&gt;&gt;uint(sig&amp;31))&amp;1 != 0
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>func (h *handler) set(sig int) {
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>	h.mask[sig/32] |= 1 &lt;&lt; uint(sig&amp;31)
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>}
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>func (h *handler) clear(sig int) {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>	h.mask[sig/32] &amp;^= 1 &lt;&lt; uint(sig&amp;31)
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>}
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">// Stop relaying the signals, sigs, to any channels previously registered to</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">// receive them and either reset the signal handlers to their original values</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">// (action=disableSignal) or ignore the signals (action=ignoreSignal).</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>func cancel(sigs []os.Signal, action func(int)) {
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	handlers.Lock()
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	defer handlers.Unlock()
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	remove := func(n int) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>		var zerohandler handler
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>		for c, h := range handlers.m {
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>			if h.want(n) {
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>				handlers.ref[n]--
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>				h.clear(n)
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>				if h.mask == zerohandler.mask {
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>					delete(handlers.m, c)
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>				}
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>			}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>		}
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>		action(n)
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	}
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	if len(sigs) == 0 {
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>		for n := 0; n &lt; numSig; n++ {
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>			remove(n)
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>		}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	} else {
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>		for _, s := range sigs {
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>			remove(signum(s))
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>		}
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>	}
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>}
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">// Ignore causes the provided signals to be ignored. If they are received by</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// the program, nothing will happen. Ignore undoes the effect of any prior</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// calls to Notify for the provided signals.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// If no signals are provided, all incoming signals will be ignored.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>func Ignore(sig ...os.Signal) {
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	cancel(sig, ignoreSignal)
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>}
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// Ignored reports whether sig is currently ignored.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>func Ignored(sig os.Signal) bool {
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	sn := signum(sig)
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	return sn &gt;= 0 &amp;&amp; signalIgnored(sn)
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>}
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>var (
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// watchSignalLoopOnce guards calling the conditionally</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// initialized watchSignalLoop. If watchSignalLoop is non-nil,</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// it will be run in a goroutine lazily once Notify is invoked.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	<span class="comment">// See Issue 21576.</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	watchSignalLoopOnce sync.Once
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	watchSignalLoop     func()
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>)
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">// Notify causes package signal to relay incoming signals to c.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">// If no signals are provided, all incoming signals will be relayed to c.</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">// Otherwise, just the provided signals will.</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">// Package signal will not block sending to c: the caller must ensure</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">// that c has sufficient buffer space to keep up with the expected</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">// signal rate. For a channel used for notification of just one signal value,</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">// a buffer of size 1 is sufficient.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">// It is allowed to call Notify multiple times with the same channel:</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">// each call expands the set of signals sent to that channel.</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">// The only way to remove signals from the set is to call Stop.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">// It is allowed to call Notify multiple times with different channels</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">// and the same signals: each channel receives copies of incoming</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span><span class="comment">// signals independently.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>func Notify(c chan&lt;- os.Signal, sig ...os.Signal) {
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>	if c == nil {
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>		panic(&#34;os/signal: Notify using nil channel&#34;)
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	}
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	handlers.Lock()
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	defer handlers.Unlock()
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	h := handlers.m[c]
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	if h == nil {
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>		if handlers.m == nil {
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			handlers.m = make(map[chan&lt;- os.Signal]*handler)
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		}
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>		h = new(handler)
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>		handlers.m[c] = h
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	}
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	add := func(n int) {
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>		if n &lt; 0 {
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>			return
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>		}
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>		if !h.want(n) {
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			h.set(n)
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>			if handlers.ref[n] == 0 {
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				enableSignal(n)
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>				<span class="comment">// The runtime requires that we enable a</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>				<span class="comment">// signal before starting the watcher.</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>				watchSignalLoopOnce.Do(func() {
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>					if watchSignalLoop != nil {
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>						go watchSignalLoop()
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>					}
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>				})
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			}
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			handlers.ref[n]++
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>		}
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>	}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	if len(sig) == 0 {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>		for n := 0; n &lt; numSig; n++ {
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			add(n)
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	} else {
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>		for _, s := range sig {
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>			add(signum(s))
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>		}
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	}
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span><span class="comment">// Reset undoes the effect of any prior calls to Notify for the provided</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span><span class="comment">// signals.</span>
<span id="L172" class="ln">   172&nbsp;&nbsp;</span><span class="comment">// If no signals are provided, all signal handlers will be reset.</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>func Reset(sig ...os.Signal) {
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	cancel(sig, disableSignal)
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>}
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">// Stop causes package signal to stop relaying incoming signals to c.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">// It undoes the effect of all prior calls to Notify using c.</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">// When Stop returns, it is guaranteed that c will receive no more signals.</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="selection">func Stop(c chan&lt;- os.Signal)</span> {
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	handlers.Lock()
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	h := handlers.m[c]
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	if h == nil {
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>		handlers.Unlock()
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>		return
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	}
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	delete(handlers.m, c)
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	for n := 0; n &lt; numSig; n++ {
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>		if h.want(n) {
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>			handlers.ref[n]--
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>			if handlers.ref[n] == 0 {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>				disableSignal(n)
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>			}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>		}
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	}
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// Signals will no longer be delivered to the channel.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// We want to avoid a race for a signal such as SIGINT:</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	<span class="comment">// it should be either delivered to the channel,</span>
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>	<span class="comment">// or the program should take the default action (that is, exit).</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// To avoid the possibility that the signal is delivered,</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// and the signal handler invoked, and then Stop deregisters</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	<span class="comment">// the channel before the process function below has a chance</span>
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>	<span class="comment">// to send it on the channel, put the channel on a list of</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// channels being stopped and wait for signal delivery to</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// quiesce before fully removing it.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	handlers.stopping = append(handlers.stopping, stopping{c, h})
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	handlers.Unlock()
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>	signalWaitUntilIdle()
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	handlers.Lock()
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	for i, s := range handlers.stopping {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		if s.c == c {
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>			handlers.stopping = append(handlers.stopping[:i], handlers.stopping[i+1:]...)
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>			break
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>		}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	}
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	handlers.Unlock()
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>}
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span><span class="comment">// Wait until there are no more signals waiting to be delivered.</span>
<span id="L229" class="ln">   229&nbsp;&nbsp;</span><span class="comment">// Defined by the runtime package.</span>
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>func signalWaitUntilIdle()
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>func process(sig os.Signal) {
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>	n := signum(sig)
<span id="L234" class="ln">   234&nbsp;&nbsp;</span>	if n &lt; 0 {
<span id="L235" class="ln">   235&nbsp;&nbsp;</span>		return
<span id="L236" class="ln">   236&nbsp;&nbsp;</span>	}
<span id="L237" class="ln">   237&nbsp;&nbsp;</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>	handlers.Lock()
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	defer handlers.Unlock()
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>	for c, h := range handlers.m {
<span id="L242" class="ln">   242&nbsp;&nbsp;</span>		if h.want(n) {
<span id="L243" class="ln">   243&nbsp;&nbsp;</span>			<span class="comment">// send but do not block for it</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span>			select {
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>			case c &lt;- sig:
<span id="L246" class="ln">   246&nbsp;&nbsp;</span>			default:
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>			}
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>		}
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	}
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	<span class="comment">// Avoid the race mentioned in Stop.</span>
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	for _, d := range handlers.stopping {
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>		if d.h.want(n) {
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>			select {
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>			case d.c &lt;- sig:
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>			default:
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>			}
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>		}
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	}
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>}
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// NotifyContext returns a copy of the parent context that is marked done</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span><span class="comment">// (its Done channel is closed) when one of the listed signals arrives,</span>
<span id="L264" class="ln">   264&nbsp;&nbsp;</span><span class="comment">// when the returned stop function is called, or when the parent context&#39;s</span>
<span id="L265" class="ln">   265&nbsp;&nbsp;</span><span class="comment">// Done channel is closed, whichever happens first.</span>
<span id="L266" class="ln">   266&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// The stop function unregisters the signal behavior, which, like signal.Reset,</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// may restore the default behavior for a given signal. For example, the default</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// behavior of a Go program receiving os.Interrupt is to exit. Calling</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// NotifyContext(parent, os.Interrupt) will change the behavior to cancel</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="comment">// the returned context. Future interrupts received will not trigger the default</span>
<span id="L272" class="ln">   272&nbsp;&nbsp;</span><span class="comment">// (exit) behavior until the returned stop function is called.</span>
<span id="L273" class="ln">   273&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L274" class="ln">   274&nbsp;&nbsp;</span><span class="comment">// The stop function releases resources associated with it, so code should</span>
<span id="L275" class="ln">   275&nbsp;&nbsp;</span><span class="comment">// call stop as soon as the operations running in this Context complete and</span>
<span id="L276" class="ln">   276&nbsp;&nbsp;</span><span class="comment">// signals no longer need to be diverted to the context.</span>
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>func NotifyContext(parent context.Context, signals ...os.Signal) (ctx context.Context, stop context.CancelFunc) {
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>	ctx, cancel := context.WithCancel(parent)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>	c := &amp;signalCtx{
<span id="L280" class="ln">   280&nbsp;&nbsp;</span>		Context: ctx,
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>		cancel:  cancel,
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>		signals: signals,
<span id="L283" class="ln">   283&nbsp;&nbsp;</span>	}
<span id="L284" class="ln">   284&nbsp;&nbsp;</span>	c.ch = make(chan os.Signal, 1)
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>	Notify(c.ch, c.signals...)
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	if ctx.Err() == nil {
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>		go func() {
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>			select {
<span id="L289" class="ln">   289&nbsp;&nbsp;</span>			case &lt;-c.ch:
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>				c.cancel()
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>			case &lt;-c.Done():
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>			}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>		}()
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>	}
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return c, c.stop
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>type signalCtx struct {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	context.Context
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	cancel  context.CancelFunc
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	signals []os.Signal
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	ch      chan os.Signal
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>}
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>func (c *signalCtx) stop() {
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>	c.cancel()
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>	Stop(c.ch)
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>}
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>type stringer interface {
<span id="L312" class="ln">   312&nbsp;&nbsp;</span>	String() string
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>}
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>func (c *signalCtx) String() string {
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	var buf []byte
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	<span class="comment">// We know that the type of c.Context is context.cancelCtx, and we know that the</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	<span class="comment">// String method of cancelCtx returns a string that ends with &#34;.WithCancel&#34;.</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	name := c.Context.(stringer).String()
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	name = name[:len(name)-len(&#34;.WithCancel&#34;)]
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	buf = append(buf, &#34;signal.NotifyContext(&#34;+name...)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if len(c.signals) != 0 {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		buf = append(buf, &#34;, [&#34;...)
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>		for i, s := range c.signals {
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>			buf = append(buf, s.String()...)
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>			if i != len(c.signals)-1 {
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>				buf = append(buf, &#39; &#39;)
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>			}
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>		}
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		buf = append(buf, &#39;]&#39;)
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>	}
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	buf = append(buf, &#39;)&#39;)
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>	return string(buf)
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>}
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>
</pre><p><a href="signal.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
