<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/path/filepath/path.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../../index.html">GoDoc</a></div>
<a href="./path.go?s=7736:7764#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/path">path</a>/<a href="http://localhost:8080/src/path/filepath">filepath</a>/<span class="text-muted">path.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/path/filepath">path/filepath</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package filepath implements utility routines for manipulating filename paths</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// in a way compatible with the target operating system-defined file paths.</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// The filepath package uses either forward slashes or backslashes,</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">// depending on the operating system. To process paths such as URLs</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// that always use forward slashes regardless of the operating</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// system, see the [path] package.</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span>package filepath
<span id="L13" class="ln">    13&nbsp;&nbsp;</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span>import (
<span id="L15" class="ln">    15&nbsp;&nbsp;</span>	&#34;errors&#34;
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>	&#34;io/fs&#34;
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>	&#34;os&#34;
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>	&#34;slices&#34;
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;sort&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;strings&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>)
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// A lazybuf is a lazily constructed path buffer.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">// It supports append, reading previously appended bytes,</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// and retrieving the final string. It does not allocate a buffer</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// to hold the output until that output diverges from s.</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>type lazybuf struct {
<span id="L28" class="ln">    28&nbsp;&nbsp;</span>	path       string
<span id="L29" class="ln">    29&nbsp;&nbsp;</span>	buf        []byte
<span id="L30" class="ln">    30&nbsp;&nbsp;</span>	w          int
<span id="L31" class="ln">    31&nbsp;&nbsp;</span>	volAndPath string
<span id="L32" class="ln">    32&nbsp;&nbsp;</span>	volLen     int
<span id="L33" class="ln">    33&nbsp;&nbsp;</span>}
<span id="L34" class="ln">    34&nbsp;&nbsp;</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span>func (b *lazybuf) index(i int) byte {
<span id="L36" class="ln">    36&nbsp;&nbsp;</span>	if b.buf != nil {
<span id="L37" class="ln">    37&nbsp;&nbsp;</span>		return b.buf[i]
<span id="L38" class="ln">    38&nbsp;&nbsp;</span>	}
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>	return b.path[i]
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>}
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>func (b *lazybuf) append(c byte) {
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	if b.buf == nil {
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>		if b.w &lt; len(b.path) &amp;&amp; b.path[b.w] == c {
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>			b.w++
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>			return
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>		}
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>		b.buf = make([]byte, len(b.path))
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>		copy(b.buf, b.path[:b.w])
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	}
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	b.buf[b.w] = c
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	b.w++
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>}
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>func (b *lazybuf) prepend(prefix ...byte) {
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	b.buf = slices.Insert(b.buf, 0, prefix...)
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	b.w += len(prefix)
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>}
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>func (b *lazybuf) string() string {
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	if b.buf == nil {
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>		return b.volAndPath[:b.volLen+b.w]
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	}
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	return b.volAndPath[:b.volLen] + string(b.buf[:b.w])
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>}
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>const (
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	Separator     = os.PathSeparator
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	ListSeparator = os.PathListSeparator
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>)
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span><span class="comment">// Clean returns the shortest path name equivalent to path</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span><span class="comment">// by purely lexical processing. It applies the following rules</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span><span class="comment">// iteratively until no further processing can be done:</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">//  1. Replace multiple [Separator] elements with a single one.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">//  2. Eliminate each . path name element (the current directory).</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">//  3. Eliminate each inner .. path name element (the parent directory)</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span><span class="comment">//     along with the non-.. element that precedes it.</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span><span class="comment">//  4. Eliminate .. elements that begin a rooted path:</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span><span class="comment">//     that is, replace &#34;/..&#34; by &#34;/&#34; at the beginning of a path,</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span><span class="comment">//     assuming Separator is &#39;/&#39;.</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// The returned path ends in a slash only if it represents a root directory,</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// such as &#34;/&#34; on Unix or `C:\` on Windows.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="comment">// Finally, any occurrences of slash are replaced by Separator.</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span><span class="comment">// If the result of this process is an empty string, Clean</span>
<span id="L90" class="ln">    90&nbsp;&nbsp;</span><span class="comment">// returns the string &#34;.&#34;.</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">// On Windows, Clean does not modify the volume name other than to replace</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// occurrences of &#34;/&#34; with `\`.</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">// For example, Clean(&#34;//host/share/../x&#34;) returns `\\host\share\x`.</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">// See also Rob Pike, “Lexical File Names in Plan 9 or</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">// Getting Dot-Dot Right,”</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">// https://9p.io/sys/doc/lexnames.html</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>func Clean(path string) string {
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	originalPath := path
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>	volLen := volumeNameLen(path)
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	path = path[volLen:]
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	if path == &#34;&#34; {
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>		if volLen &gt; 1 &amp;&amp; os.IsPathSeparator(originalPath[0]) &amp;&amp; os.IsPathSeparator(originalPath[1]) {
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>			<span class="comment">// should be UNC</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>			return FromSlash(originalPath)
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>		}
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>		return originalPath + &#34;.&#34;
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	}
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>	rooted := os.IsPathSeparator(path[0])
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Invariants:</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">//	reading from path; r is index of next byte to process.</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">//	writing to buf; w is index of next byte to write.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	<span class="comment">//	dotdot is index in buf where .. must stop, either because</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>	<span class="comment">//		it is the leading slash or it is a leading ../../.. prefix.</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	n := len(path)
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	out := lazybuf{path: path, volAndPath: originalPath, volLen: volLen}
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	r, dotdot := 0, 0
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	if rooted {
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>		out.append(Separator)
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>		r, dotdot = 1, 1
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	}
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	for r &lt; n {
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>		switch {
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>		case os.IsPathSeparator(path[r]):
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>			<span class="comment">// empty path element</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>			r++
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>		case path[r] == &#39;.&#39; &amp;&amp; (r+1 == n || os.IsPathSeparator(path[r+1])):
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>			<span class="comment">// . element</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>			r++
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>		case path[r] == &#39;.&#39; &amp;&amp; path[r+1] == &#39;.&#39; &amp;&amp; (r+2 == n || os.IsPathSeparator(path[r+2])):
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>			<span class="comment">// .. element: remove to last separator</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>			r += 2
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>			switch {
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>			case out.w &gt; dotdot:
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>				<span class="comment">// can backtrack</span>
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>				out.w--
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>				for out.w &gt; dotdot &amp;&amp; !os.IsPathSeparator(out.index(out.w)) {
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>					out.w--
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>				}
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>			case !rooted:
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>				<span class="comment">// cannot backtrack, but not rooted, so append .. element.</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>				if out.w &gt; 0 {
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>					out.append(Separator)
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>				}
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>				out.append(&#39;.&#39;)
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>				out.append(&#39;.&#39;)
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>				dotdot = out.w
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>			}
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>		default:
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>			<span class="comment">// real path element.</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>			<span class="comment">// add slash if needed</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>			if rooted &amp;&amp; out.w != 1 || !rooted &amp;&amp; out.w != 0 {
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>				out.append(Separator)
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>			}
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>			<span class="comment">// copy element</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>			for ; r &lt; n &amp;&amp; !os.IsPathSeparator(path[r]); r++ {
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>				out.append(path[r])
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>			}
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>		}
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	}
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	<span class="comment">// Turn empty string into &#34;.&#34;</span>
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>	if out.w == 0 {
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>		out.append(&#39;.&#39;)
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	}
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	postClean(&amp;out) <span class="comment">// avoid creating absolute paths on Windows</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	return FromSlash(out.string())
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>}
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span><span class="comment">// IsLocal reports whether path, using lexical analysis only, has all of these properties:</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span><span class="comment">//   - is within the subtree rooted at the directory in which path is evaluated</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span><span class="comment">//   - is not an absolute path</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span><span class="comment">//   - is not empty</span>
<span id="L179" class="ln">   179&nbsp;&nbsp;</span><span class="comment">//   - on Windows, is not a reserved name such as &#34;NUL&#34;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span><span class="comment">// If IsLocal(path) returns true, then</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span><span class="comment">// Join(base, path) will always produce a path contained within base and</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span><span class="comment">// Clean(path) will always produce an unrooted path with no &#34;..&#34; path elements.</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span><span class="comment">// IsLocal is a purely lexical operation.</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span><span class="comment">// In particular, it does not account for the effect of any symbolic links</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span><span class="comment">// that may exist in the filesystem.</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>func IsLocal(path string) bool {
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	return isLocal(path)
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>}
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>func unixIsLocal(path string) bool {
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	if IsAbs(path) || path == &#34;&#34; {
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>		return false
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	}
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	hasDots := false
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>	for p := path; p != &#34;&#34;; {
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>		var part string
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>		part, p, _ = strings.Cut(p, &#34;/&#34;)
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>		if part == &#34;.&#34; || part == &#34;..&#34; {
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>			hasDots = true
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>			break
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>		}
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	}
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	if hasDots {
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>		path = Clean(path)
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	}
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	if path == &#34;..&#34; || strings.HasPrefix(path, &#34;../&#34;) {
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>		return false
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>	}
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	return true
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>}
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>
<span id="L214" class="ln">   214&nbsp;&nbsp;</span><span class="comment">// ToSlash returns the result of replacing each separator character</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span><span class="comment">// in path with a slash (&#39;/&#39;) character. Multiple separators are</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span><span class="comment">// replaced by multiple slashes.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>func ToSlash(path string) string {
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>	if Separator == &#39;/&#39; {
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>		return path
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	}
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	return strings.ReplaceAll(path, string(Separator), &#34;/&#34;)
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>}
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span><span class="comment">// FromSlash returns the result of replacing each slash (&#39;/&#39;) character</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span><span class="comment">// in path with a separator character. Multiple slashes are replaced</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span><span class="comment">// by multiple separators.</span>
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>func FromSlash(path string) string {
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	if Separator == &#39;/&#39; {
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>		return path
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>	}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>	return strings.ReplaceAll(path, &#34;/&#34;, string(Separator))
<span id="L232" class="ln">   232&nbsp;&nbsp;</span>}
<span id="L233" class="ln">   233&nbsp;&nbsp;</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// SplitList splits a list of paths joined by the OS-specific [ListSeparator],</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// usually found in PATH or GOPATH environment variables.</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// Unlike strings.Split, SplitList returns an empty slice when passed an empty</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// string.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span>func SplitList(path string) []string {
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>	return splitList(path)
<span id="L240" class="ln">   240&nbsp;&nbsp;</span>}
<span id="L241" class="ln">   241&nbsp;&nbsp;</span>
<span id="L242" class="ln">   242&nbsp;&nbsp;</span><span class="comment">// Split splits path immediately following the final [Separator],</span>
<span id="L243" class="ln">   243&nbsp;&nbsp;</span><span class="comment">// separating it into a directory and file name component.</span>
<span id="L244" class="ln">   244&nbsp;&nbsp;</span><span class="comment">// If there is no Separator in path, Split returns an empty dir</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span><span class="comment">// and file set to path.</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// The returned values have the property that path = dir+file.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span>func Split(path string) (dir, file string) {
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>	vol := VolumeName(path)
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>	i := len(path) - 1
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>	for i &gt;= len(vol) &amp;&amp; !os.IsPathSeparator(path[i]) {
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>		i--
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	}
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	return path[:i+1], path[i+1:]
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>}
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>
<span id="L256" class="ln">   256&nbsp;&nbsp;</span><span class="comment">// Join joins any number of path elements into a single path,</span>
<span id="L257" class="ln">   257&nbsp;&nbsp;</span><span class="comment">// separating them with an OS specific [Separator]. Empty elements</span>
<span id="L258" class="ln">   258&nbsp;&nbsp;</span><span class="comment">// are ignored. The result is Cleaned. However, if the argument</span>
<span id="L259" class="ln">   259&nbsp;&nbsp;</span><span class="comment">// list is empty or all its elements are empty, Join returns</span>
<span id="L260" class="ln">   260&nbsp;&nbsp;</span><span class="comment">// an empty string.</span>
<span id="L261" class="ln">   261&nbsp;&nbsp;</span><span class="comment">// On Windows, the result will only be a UNC path if the first</span>
<span id="L262" class="ln">   262&nbsp;&nbsp;</span><span class="comment">// non-empty element is a UNC path.</span>
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>func Join(elem ...string) string {
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	return join(elem)
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>}
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>
<span id="L267" class="ln">   267&nbsp;&nbsp;</span><span class="comment">// Ext returns the file name extension used by path.</span>
<span id="L268" class="ln">   268&nbsp;&nbsp;</span><span class="comment">// The extension is the suffix beginning at the final dot</span>
<span id="L269" class="ln">   269&nbsp;&nbsp;</span><span class="comment">// in the final element of path; it is empty if there is</span>
<span id="L270" class="ln">   270&nbsp;&nbsp;</span><span class="comment">// no dot.</span>
<span id="L271" class="ln">   271&nbsp;&nbsp;</span><span class="selection">func Ext(path string) string</span> {
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	for i := len(path) - 1; i &gt;= 0 &amp;&amp; !os.IsPathSeparator(path[i]); i-- {
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>		if path[i] == &#39;.&#39; {
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>			return path[i:]
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>		}
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	}
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	return &#34;&#34;
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>}
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// EvalSymlinks returns the path name after the evaluation of any symbolic</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span><span class="comment">// links.</span>
<span id="L282" class="ln">   282&nbsp;&nbsp;</span><span class="comment">// If path is relative the result will be relative to the current directory,</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// unless one of the components is an absolute symbolic link.</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// EvalSymlinks calls [Clean] on the result.</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span>func EvalSymlinks(path string) (string, error) {
<span id="L286" class="ln">   286&nbsp;&nbsp;</span>	return evalSymlinks(path)
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>}
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// Abs returns an absolute representation of path.</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span><span class="comment">// If the path is not absolute it will be joined with the current</span>
<span id="L291" class="ln">   291&nbsp;&nbsp;</span><span class="comment">// working directory to turn it into an absolute path. The absolute</span>
<span id="L292" class="ln">   292&nbsp;&nbsp;</span><span class="comment">// path name for a given file is not guaranteed to be unique.</span>
<span id="L293" class="ln">   293&nbsp;&nbsp;</span><span class="comment">// Abs calls [Clean] on the result.</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span>func Abs(path string) (string, error) {
<span id="L295" class="ln">   295&nbsp;&nbsp;</span>	return abs(path)
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>}
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>func unixAbs(path string) (string, error) {
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>	if IsAbs(path) {
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>		return Clean(path), nil
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	}
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>	wd, err := os.Getwd()
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>	if err != nil {
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>		return &#34;&#34;, err
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	}
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>	return Join(wd, path), nil
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>}
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>
<span id="L309" class="ln">   309&nbsp;&nbsp;</span><span class="comment">// Rel returns a relative path that is lexically equivalent to targpath when</span>
<span id="L310" class="ln">   310&nbsp;&nbsp;</span><span class="comment">// joined to basepath with an intervening separator. That is,</span>
<span id="L311" class="ln">   311&nbsp;&nbsp;</span><span class="comment">// [Join](basepath, Rel(basepath, targpath)) is equivalent to targpath itself.</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// On success, the returned path will always be relative to basepath,</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span><span class="comment">// even if basepath and targpath share no elements.</span>
<span id="L314" class="ln">   314&nbsp;&nbsp;</span><span class="comment">// An error is returned if targpath can&#39;t be made relative to basepath or if</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span><span class="comment">// knowing the current working directory would be necessary to compute it.</span>
<span id="L316" class="ln">   316&nbsp;&nbsp;</span><span class="comment">// Rel calls [Clean] on the result.</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>func Rel(basepath, targpath string) (string, error) {
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	baseVol := VolumeName(basepath)
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>	targVol := VolumeName(targpath)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>	base := Clean(basepath)
<span id="L321" class="ln">   321&nbsp;&nbsp;</span>	targ := Clean(targpath)
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>	if sameWord(targ, base) {
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>		return &#34;.&#34;, nil
<span id="L324" class="ln">   324&nbsp;&nbsp;</span>	}
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>	base = base[len(baseVol):]
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>	targ = targ[len(targVol):]
<span id="L327" class="ln">   327&nbsp;&nbsp;</span>	if base == &#34;.&#34; {
<span id="L328" class="ln">   328&nbsp;&nbsp;</span>		base = &#34;&#34;
<span id="L329" class="ln">   329&nbsp;&nbsp;</span>	} else if base == &#34;&#34; &amp;&amp; volumeNameLen(baseVol) &gt; 2 <span class="comment">/* isUNC */</span> {
<span id="L330" class="ln">   330&nbsp;&nbsp;</span>		<span class="comment">// Treat any targetpath matching `\\host\share` basepath as absolute path.</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span>		base = string(Separator)
<span id="L332" class="ln">   332&nbsp;&nbsp;</span>	}
<span id="L333" class="ln">   333&nbsp;&nbsp;</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span>	<span class="comment">// Can&#39;t use IsAbs - `\a` and `a` are both relative in Windows.</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span>	baseSlashed := len(base) &gt; 0 &amp;&amp; base[0] == Separator
<span id="L336" class="ln">   336&nbsp;&nbsp;</span>	targSlashed := len(targ) &gt; 0 &amp;&amp; targ[0] == Separator
<span id="L337" class="ln">   337&nbsp;&nbsp;</span>	if baseSlashed != targSlashed || !sameWord(baseVol, targVol) {
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;Rel: can&#39;t make &#34; + targpath + &#34; relative to &#34; + basepath)
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>	}
<span id="L340" class="ln">   340&nbsp;&nbsp;</span>	<span class="comment">// Position base[b0:bi] and targ[t0:ti] at the first differing elements.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>	bl := len(base)
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	tl := len(targ)
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>	var b0, bi, t0, ti int
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>	for {
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>		for bi &lt; bl &amp;&amp; base[bi] != Separator {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>			bi++
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>		}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>		for ti &lt; tl &amp;&amp; targ[ti] != Separator {
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>			ti++
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>		}
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>		if !sameWord(targ[t0:ti], base[b0:bi]) {
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>			break
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>		}
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>		if bi &lt; bl {
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>			bi++
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>		}
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>		if ti &lt; tl {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>			ti++
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>		}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>		b0 = bi
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>		t0 = ti
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	}
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>	if base[b0:bi] == &#34;..&#34; {
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>		return &#34;&#34;, errors.New(&#34;Rel: can&#39;t make &#34; + targpath + &#34; relative to &#34; + basepath)
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>	}
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	if b0 != bl {
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>		<span class="comment">// Base elements left. Must go up before going down.</span>
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>		seps := strings.Count(base[b0:bl], string(Separator))
<span id="L369" class="ln">   369&nbsp;&nbsp;</span>		size := 2 + seps*3
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>		if tl != t0 {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>			size += 1 + tl - t0
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>		}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>		buf := make([]byte, size)
<span id="L374" class="ln">   374&nbsp;&nbsp;</span>		n := copy(buf, &#34;..&#34;)
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>		for i := 0; i &lt; seps; i++ {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>			buf[n] = Separator
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>			copy(buf[n+1:], &#34;..&#34;)
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>			n += 3
<span id="L379" class="ln">   379&nbsp;&nbsp;</span>		}
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>		if t0 != tl {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>			buf[n] = Separator
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>			copy(buf[n+1:], targ[t0:])
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>		}
<span id="L384" class="ln">   384&nbsp;&nbsp;</span>		return string(buf), nil
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>	}
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>	return targ[t0:], nil
<span id="L387" class="ln">   387&nbsp;&nbsp;</span>}
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>
<span id="L389" class="ln">   389&nbsp;&nbsp;</span><span class="comment">// SkipDir is used as a return value from [WalkFunc] to indicate that</span>
<span id="L390" class="ln">   390&nbsp;&nbsp;</span><span class="comment">// the directory named in the call is to be skipped. It is not returned</span>
<span id="L391" class="ln">   391&nbsp;&nbsp;</span><span class="comment">// as an error by any function.</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>var SkipDir error = fs.SkipDir
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>
<span id="L394" class="ln">   394&nbsp;&nbsp;</span><span class="comment">// SkipAll is used as a return value from [WalkFunc] to indicate that</span>
<span id="L395" class="ln">   395&nbsp;&nbsp;</span><span class="comment">// all remaining files and directories are to be skipped. It is not returned</span>
<span id="L396" class="ln">   396&nbsp;&nbsp;</span><span class="comment">// as an error by any function.</span>
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>var SkipAll error = fs.SkipAll
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>
<span id="L399" class="ln">   399&nbsp;&nbsp;</span><span class="comment">// WalkFunc is the type of the function called by [Walk] to visit each</span>
<span id="L400" class="ln">   400&nbsp;&nbsp;</span><span class="comment">// file or directory.</span>
<span id="L401" class="ln">   401&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L402" class="ln">   402&nbsp;&nbsp;</span><span class="comment">// The path argument contains the argument to Walk as a prefix.</span>
<span id="L403" class="ln">   403&nbsp;&nbsp;</span><span class="comment">// That is, if Walk is called with root argument &#34;dir&#34; and finds a file</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span><span class="comment">// named &#34;a&#34; in that directory, the walk function will be called with</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span><span class="comment">// argument &#34;dir/a&#34;.</span>
<span id="L406" class="ln">   406&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L407" class="ln">   407&nbsp;&nbsp;</span><span class="comment">// The directory and file are joined with Join, which may clean the</span>
<span id="L408" class="ln">   408&nbsp;&nbsp;</span><span class="comment">// directory name: if Walk is called with the root argument &#34;x/../dir&#34;</span>
<span id="L409" class="ln">   409&nbsp;&nbsp;</span><span class="comment">// and finds a file named &#34;a&#34; in that directory, the walk function will</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span><span class="comment">// be called with argument &#34;dir/a&#34;, not &#34;x/../dir/a&#34;.</span>
<span id="L411" class="ln">   411&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L412" class="ln">   412&nbsp;&nbsp;</span><span class="comment">// The info argument is the fs.FileInfo for the named path.</span>
<span id="L413" class="ln">   413&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">// The error result returned by the function controls how Walk continues.</span>
<span id="L415" class="ln">   415&nbsp;&nbsp;</span><span class="comment">// If the function returns the special value [SkipDir], Walk skips the</span>
<span id="L416" class="ln">   416&nbsp;&nbsp;</span><span class="comment">// current directory (path if info.IsDir() is true, otherwise path&#39;s</span>
<span id="L417" class="ln">   417&nbsp;&nbsp;</span><span class="comment">// parent directory). If the function returns the special value [SkipAll],</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span><span class="comment">// Walk skips all remaining files and directories. Otherwise, if the function</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// returns a non-nil error, Walk stops entirely and returns that error.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L421" class="ln">   421&nbsp;&nbsp;</span><span class="comment">// The err argument reports an error related to path, signaling that Walk</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span><span class="comment">// will not walk into that directory. The function can decide how to</span>
<span id="L423" class="ln">   423&nbsp;&nbsp;</span><span class="comment">// handle that error; as described earlier, returning the error will</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span><span class="comment">// cause Walk to stop walking the entire tree.</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span><span class="comment">// Walk calls the function with a non-nil err argument in two cases.</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span><span class="comment">// First, if an [os.Lstat] on the root directory or any directory or file</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span><span class="comment">// in the tree fails, Walk calls the function with path set to that</span>
<span id="L430" class="ln">   430&nbsp;&nbsp;</span><span class="comment">// directory or file&#39;s path, info set to nil, and err set to the error</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span><span class="comment">// from os.Lstat.</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span><span class="comment">// Second, if a directory&#39;s Readdirnames method fails, Walk calls the</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span><span class="comment">// function with path set to the directory&#39;s path, info, set to an</span>
<span id="L435" class="ln">   435&nbsp;&nbsp;</span><span class="comment">// [fs.FileInfo] describing the directory, and err set to the error from</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span><span class="comment">// Readdirnames.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>type WalkFunc func(path string, info fs.FileInfo, err error) error
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>var lstat = os.Lstat <span class="comment">// for testing</span>
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span><span class="comment">// walkDir recursively descends path, calling walkDirFn.</span>
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>func walkDir(path string, d fs.DirEntry, walkDirFn fs.WalkDirFunc) error {
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	if err := walkDirFn(path, d, nil); err != nil || !d.IsDir() {
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>		if err == SkipDir &amp;&amp; d.IsDir() {
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>			<span class="comment">// Successfully skipped directory.</span>
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>			err = nil
<span id="L447" class="ln">   447&nbsp;&nbsp;</span>		}
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>		return err
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	}
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	dirs, err := os.ReadDir(path)
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	if err != nil {
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>		<span class="comment">// Second call, to report ReadDir error.</span>
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>		err = walkDirFn(path, d, err)
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>		if err != nil {
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>			if err == SkipDir &amp;&amp; d.IsDir() {
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>				err = nil
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>			}
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>			return err
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>		}
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	}
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	for _, d1 := range dirs {
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>		path1 := Join(path, d1.Name())
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>		if err := walkDir(path1, d1, walkDirFn); err != nil {
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>			if err == SkipDir {
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>				break
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>			}
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>			return err
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>		}
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	}
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	return nil
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>}
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>
<span id="L475" class="ln">   475&nbsp;&nbsp;</span><span class="comment">// walk recursively descends path, calling walkFn.</span>
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>func walk(path string, info fs.FileInfo, walkFn WalkFunc) error {
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	if !info.IsDir() {
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>		return walkFn(path, info, nil)
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	}
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	names, err := readDirNames(path)
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	err1 := walkFn(path, info, err)
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>	<span class="comment">// If err != nil, walk can&#39;t walk into this directory.</span>
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>	<span class="comment">// err1 != nil means walkFn want walk to skip this directory or stop walking.</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span>	<span class="comment">// Therefore, if one of err and err1 isn&#39;t nil, walk will return.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span>	if err != nil || err1 != nil {
<span id="L487" class="ln">   487&nbsp;&nbsp;</span>		<span class="comment">// The caller&#39;s behavior is controlled by the return value, which is decided</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span>		<span class="comment">// by walkFn. walkFn may ignore err and return nil.</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span>		<span class="comment">// If walkFn returns SkipDir or SkipAll, it will be handled by the caller.</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>		<span class="comment">// So walk should return whatever walkFn returns.</span>
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>		return err1
<span id="L492" class="ln">   492&nbsp;&nbsp;</span>	}
<span id="L493" class="ln">   493&nbsp;&nbsp;</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span>	for _, name := range names {
<span id="L495" class="ln">   495&nbsp;&nbsp;</span>		filename := Join(path, name)
<span id="L496" class="ln">   496&nbsp;&nbsp;</span>		fileInfo, err := lstat(filename)
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>		if err != nil {
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>			if err := walkFn(filename, fileInfo, err); err != nil &amp;&amp; err != SkipDir {
<span id="L499" class="ln">   499&nbsp;&nbsp;</span>				return err
<span id="L500" class="ln">   500&nbsp;&nbsp;</span>			}
<span id="L501" class="ln">   501&nbsp;&nbsp;</span>		} else {
<span id="L502" class="ln">   502&nbsp;&nbsp;</span>			err = walk(filename, fileInfo, walkFn)
<span id="L503" class="ln">   503&nbsp;&nbsp;</span>			if err != nil {
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>				if !fileInfo.IsDir() || err != SkipDir {
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>					return err
<span id="L506" class="ln">   506&nbsp;&nbsp;</span>				}
<span id="L507" class="ln">   507&nbsp;&nbsp;</span>			}
<span id="L508" class="ln">   508&nbsp;&nbsp;</span>		}
<span id="L509" class="ln">   509&nbsp;&nbsp;</span>	}
<span id="L510" class="ln">   510&nbsp;&nbsp;</span>	return nil
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>}
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// WalkDir walks the file tree rooted at root, calling fn for each file or</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// directory in the tree, including root.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L516" class="ln">   516&nbsp;&nbsp;</span><span class="comment">// All errors that arise visiting files and directories are filtered by fn:</span>
<span id="L517" class="ln">   517&nbsp;&nbsp;</span><span class="comment">// see the [fs.WalkDirFunc] documentation for details.</span>
<span id="L518" class="ln">   518&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// The files are walked in lexical order, which makes the output deterministic</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// but requires WalkDir to read an entire directory into memory before proceeding</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span><span class="comment">// to walk that directory.</span>
<span id="L522" class="ln">   522&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L523" class="ln">   523&nbsp;&nbsp;</span><span class="comment">// WalkDir does not follow symbolic links.</span>
<span id="L524" class="ln">   524&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// WalkDir calls fn with paths that use the separator character appropriate</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// for the operating system. This is unlike [io/fs.WalkDir], which always</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// uses slash separated paths.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func WalkDir(root string, fn fs.WalkDirFunc) error {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	info, err := os.Lstat(root)
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>	if err != nil {
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>		err = fn(root, nil, err)
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>	} else {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>		err = walkDir(root, fs.FileInfoToDirEntry(info), fn)
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>	}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>	if err == SkipDir || err == SkipAll {
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>		return nil
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	}
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>	return err
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>}
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>
<span id="L541" class="ln">   541&nbsp;&nbsp;</span><span class="comment">// Walk walks the file tree rooted at root, calling fn for each file or</span>
<span id="L542" class="ln">   542&nbsp;&nbsp;</span><span class="comment">// directory in the tree, including root.</span>
<span id="L543" class="ln">   543&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span><span class="comment">// All errors that arise visiting files and directories are filtered by fn:</span>
<span id="L545" class="ln">   545&nbsp;&nbsp;</span><span class="comment">// see the [WalkFunc] documentation for details.</span>
<span id="L546" class="ln">   546&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L547" class="ln">   547&nbsp;&nbsp;</span><span class="comment">// The files are walked in lexical order, which makes the output deterministic</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span><span class="comment">// but requires Walk to read an entire directory into memory before proceeding</span>
<span id="L549" class="ln">   549&nbsp;&nbsp;</span><span class="comment">// to walk that directory.</span>
<span id="L550" class="ln">   550&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L551" class="ln">   551&nbsp;&nbsp;</span><span class="comment">// Walk does not follow symbolic links.</span>
<span id="L552" class="ln">   552&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L553" class="ln">   553&nbsp;&nbsp;</span><span class="comment">// Walk is less efficient than [WalkDir], introduced in Go 1.16,</span>
<span id="L554" class="ln">   554&nbsp;&nbsp;</span><span class="comment">// which avoids calling os.Lstat on every visited file or directory.</span>
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>func Walk(root string, fn WalkFunc) error {
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>	info, err := os.Lstat(root)
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>	if err != nil {
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>		err = fn(root, nil, err)
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	} else {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		err = walk(root, info, fn)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	if err == SkipDir || err == SkipAll {
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>		return nil
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>	}
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	return err
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>}
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>
<span id="L568" class="ln">   568&nbsp;&nbsp;</span><span class="comment">// readDirNames reads the directory named by dirname and returns</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span><span class="comment">// a sorted list of directory entry names.</span>
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>func readDirNames(dirname string) ([]string, error) {
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>	f, err := os.Open(dirname)
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>	if err != nil {
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>		return nil, err
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>	}
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>	names, err := f.Readdirnames(-1)
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	f.Close()
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	if err != nil {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		return nil, err
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	sort.Strings(names)
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>	return names, nil
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>}
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>
<span id="L584" class="ln">   584&nbsp;&nbsp;</span><span class="comment">// Base returns the last element of path.</span>
<span id="L585" class="ln">   585&nbsp;&nbsp;</span><span class="comment">// Trailing path separators are removed before extracting the last element.</span>
<span id="L586" class="ln">   586&nbsp;&nbsp;</span><span class="comment">// If the path is empty, Base returns &#34;.&#34;.</span>
<span id="L587" class="ln">   587&nbsp;&nbsp;</span><span class="comment">// If the path consists entirely of separators, Base returns a single separator.</span>
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>func Base(path string) string {
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>	if path == &#34;&#34; {
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>		return &#34;.&#34;
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>	}
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	<span class="comment">// Strip trailing slashes.</span>
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>	for len(path) &gt; 0 &amp;&amp; os.IsPathSeparator(path[len(path)-1]) {
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		path = path[0 : len(path)-1]
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	<span class="comment">// Throw away volume name</span>
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	path = path[len(VolumeName(path)):]
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>	<span class="comment">// Find the last element</span>
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	i := len(path) - 1
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	for i &gt;= 0 &amp;&amp; !os.IsPathSeparator(path[i]) {
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>		i--
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	}
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	if i &gt;= 0 {
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>		path = path[i+1:]
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	}
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	<span class="comment">// If empty now, it had only slashes.</span>
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	if path == &#34;&#34; {
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>		return string(Separator)
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>	}
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	return path
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>}
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>
<span id="L613" class="ln">   613&nbsp;&nbsp;</span><span class="comment">// Dir returns all but the last element of path, typically the path&#39;s directory.</span>
<span id="L614" class="ln">   614&nbsp;&nbsp;</span><span class="comment">// After dropping the final element, Dir calls [Clean] on the path and trailing</span>
<span id="L615" class="ln">   615&nbsp;&nbsp;</span><span class="comment">// slashes are removed.</span>
<span id="L616" class="ln">   616&nbsp;&nbsp;</span><span class="comment">// If the path is empty, Dir returns &#34;.&#34;.</span>
<span id="L617" class="ln">   617&nbsp;&nbsp;</span><span class="comment">// If the path consists entirely of separators, Dir returns a single separator.</span>
<span id="L618" class="ln">   618&nbsp;&nbsp;</span><span class="comment">// The returned path does not end in a separator unless it is the root directory.</span>
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>func Dir(path string) string {
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>	vol := VolumeName(path)
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	i := len(path) - 1
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	for i &gt;= len(vol) &amp;&amp; !os.IsPathSeparator(path[i]) {
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>		i--
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>	}
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>	dir := Clean(path[len(vol) : i+1])
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	if dir == &#34;.&#34; &amp;&amp; len(vol) &gt; 2 {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		<span class="comment">// must be UNC</span>
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		return vol
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	return vol + dir
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>}
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>
<span id="L633" class="ln">   633&nbsp;&nbsp;</span><span class="comment">// VolumeName returns leading volume name.</span>
<span id="L634" class="ln">   634&nbsp;&nbsp;</span><span class="comment">// Given &#34;C:\foo\bar&#34; it returns &#34;C:&#34; on Windows.</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span><span class="comment">// Given &#34;\\host\share\foo&#34; it returns &#34;\\host\share&#34;.</span>
<span id="L636" class="ln">   636&nbsp;&nbsp;</span><span class="comment">// On other platforms it returns &#34;&#34;.</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>func VolumeName(path string) string {
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	return FromSlash(path[:volumeNameLen(path)])
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>}
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>
</pre><p><a href="path.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
