<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/plugin/plugin.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./plugin.go?s=3700:3755#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/plugin">plugin</a>/<span class="text-muted">plugin.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/plugin">plugin</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2016 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package plugin implements loading and symbol resolution of Go plugins.</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// A plugin is a Go main package with exported functions and variables that</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// has been built with:</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">//	go build -buildmode=plugin</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// When a plugin is first opened, the init functions of all packages not</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">// already part of the program are called. The main function is not run.</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// A plugin is only initialized once, and cannot be closed.</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span><span class="comment">// # Warnings</span>
<span id="L17" class="ln">    17&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span><span class="comment">// The ability to dynamically load parts of an application during</span>
<span id="L19" class="ln">    19&nbsp;&nbsp;</span><span class="comment">// execution, perhaps based on user-defined configuration, may be a</span>
<span id="L20" class="ln">    20&nbsp;&nbsp;</span><span class="comment">// useful building block in some designs. In particular, because</span>
<span id="L21" class="ln">    21&nbsp;&nbsp;</span><span class="comment">// applications and dynamically loaded functions can share data</span>
<span id="L22" class="ln">    22&nbsp;&nbsp;</span><span class="comment">// structures directly, plugins may enable very high-performance</span>
<span id="L23" class="ln">    23&nbsp;&nbsp;</span><span class="comment">// integration of separate parts.</span>
<span id="L24" class="ln">    24&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L25" class="ln">    25&nbsp;&nbsp;</span><span class="comment">// However, the plugin mechanism has many significant drawbacks that</span>
<span id="L26" class="ln">    26&nbsp;&nbsp;</span><span class="comment">// should be considered carefully during the design. For example:</span>
<span id="L27" class="ln">    27&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">//   - Plugins are currently supported only on Linux, FreeBSD, and</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//     macOS, making them unsuitable for applications intended to be</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">//     portable.</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">//   - Applications that use plugins may require careful configuration</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">//     to ensure that the various parts of the program be made available</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">//     in the correct location in the file system (or container image).</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//     By contrast, deploying an application consisting of a single static</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">//     executable is straightforward.</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">//   - Reasoning about program initialization is more difficult when</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span><span class="comment">//     some packages may not be initialized until long after the</span>
<span id="L40" class="ln">    40&nbsp;&nbsp;</span><span class="comment">//     application has started running.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span><span class="comment">//   - Bugs in applications that load plugins could be exploited by</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span><span class="comment">//     an attacker to load dangerous or untrusted libraries.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L45" class="ln">    45&nbsp;&nbsp;</span><span class="comment">//   - Runtime crashes are likely to occur unless all parts of the</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span><span class="comment">//     program (the application and all its plugins) are compiled</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span><span class="comment">//     using exactly the same version of the toolchain, the same build</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span><span class="comment">//     tags, and the same values of certain flags and environment</span>
<span id="L49" class="ln">    49&nbsp;&nbsp;</span><span class="comment">//     variables.</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span><span class="comment">//   - Similar crashing problems are likely to arise unless all common</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span><span class="comment">//     dependencies of the application and its plugins are built from</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span><span class="comment">//     exactly the same source code.</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span><span class="comment">//   - Together, these restrictions mean that, in practice, the</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span><span class="comment">//     application and its plugins must all be built together by a</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span><span class="comment">//     single person or component of a system. In that case, it may</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span><span class="comment">//     be simpler for that person or component to generate Go source</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span><span class="comment">//     files that blank-import the desired set of plugins and then</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span><span class="comment">//     compile a static executable in the usual way.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L62" class="ln">    62&nbsp;&nbsp;</span><span class="comment">// For these reasons, many users decide that traditional interprocess</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span><span class="comment">// communication (IPC) mechanisms such as sockets, pipes, remote</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span><span class="comment">// procedure call (RPC), shared memory mappings, or file system</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span><span class="comment">// operations may be more suitable despite the performance overheads.</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>package plugin
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span><span class="comment">// Plugin is a loaded Go plugin.</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>type Plugin struct {
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	pluginpath string
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	err        string        <span class="comment">// set if plugin failed to load</span>
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>	loaded     chan struct{} <span class="comment">// closed when loaded</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	syms       map[string]any
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>}
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span><span class="comment">// Open opens a Go plugin.</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span><span class="comment">// If a path has already been opened, then the existing *[Plugin] is returned.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span><span class="comment">// It is safe for concurrent use by multiple goroutines.</span>
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>func Open(path string) (*Plugin, error) {
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	return open(path)
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>}
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>
<span id="L83" class="ln">    83&nbsp;&nbsp;</span><span class="comment">// Lookup searches for a symbol named symName in plugin p.</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span><span class="comment">// A symbol is any exported variable or function.</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span><span class="comment">// It reports an error if the symbol is not found.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span><span class="comment">// It is safe for concurrent use by multiple goroutines.</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span><span class="selection">func (p *Plugin) Lookup(symName string) (Symbol, error)</span> {
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	return lookup(p, symName)
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>}
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span><span class="comment">// A Symbol is a pointer to a variable or function.</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span><span class="comment">// For example, a plugin defined as</span>
<span id="L94" class="ln">    94&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span><span class="comment">//	package main</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span><span class="comment">//	import &#34;fmt&#34;</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span><span class="comment">//	var V int</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L101" class="ln">   101&nbsp;&nbsp;</span><span class="comment">//	func F() { fmt.Printf(&#34;Hello, number %d\n&#34;, V) }</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span><span class="comment">// may be loaded with the [Open] function and then the exported package</span>
<span id="L104" class="ln">   104&nbsp;&nbsp;</span><span class="comment">// symbols V and F can be accessed</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span><span class="comment">//	p, err := plugin.Open(&#34;plugin_name.so&#34;)</span>
<span id="L107" class="ln">   107&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span><span class="comment">//		panic(err)</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L110" class="ln">   110&nbsp;&nbsp;</span><span class="comment">//	v, err := p.Lookup(&#34;V&#34;)</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span><span class="comment">//		panic(err)</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span><span class="comment">//	f, err := p.Lookup(&#34;F&#34;)</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span><span class="comment">//	if err != nil {</span>
<span id="L116" class="ln">   116&nbsp;&nbsp;</span><span class="comment">//		panic(err)</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span><span class="comment">//	*v.(*int) = 7</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span><span class="comment">//	f.(func())() // prints &#34;Hello, number 7&#34;</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>type Symbol any
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>
</pre><p><a href="plugin.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
