<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="#375EAB">

  <title>src/reflect/type.go - Go Documentation Server</title>

<link type="text/css" rel="stylesheet" href="../../lib/godoc/style.css">

<script>window.initFuncs = [];</script>
<script src="../../lib/godoc/jquery.js" defer></script>



<script>var goVersion = "go1.22.2";</script>
<script src="../../lib/godoc/godocs.js" defer></script>
</head>
<body>

<div id='lowframe' style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">
<div class="top-heading" id="heading-wide"><a href="../../index.html">Go Documentation Server</a></div>
<div class="top-heading" id="heading-narrow"><a href="../../index.html">GoDoc</a></div>
<a href="./type.go?s=25646:25667#" id="menu-button"><span id="menu-button-arrow">&#9661;</span></a>
<form method="GET" action="http://localhost:8080/search">
<div id="menu">

<span class="search-box"><input type="search" id="search" name="q" placeholder="Search" aria-label="Search" required><button type="submit"><span><!-- magnifying glass: --><svg width="24" height="24" viewBox="0 0 24 24"><title>submit search</title><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></span></button></span>
</div>
</form>

</div></div>



<div id="page" class="wide">
<div class="container">


  <h1>
    Source file
    <a href="http://localhost:8080/src">src</a>/<a href="http://localhost:8080/src/reflect">reflect</a>/<span class="text-muted">type.go</span>
  </h1>





  <h2>
    Documentation: <a href="http://localhost:8080/pkg/reflect">reflect</a>
  </h2>



<div id="nav"></div>


<script type='text/javascript'>document.ANALYSIS_DATA = null;</script>
<pre><span id="L1" class="ln">     1&nbsp;&nbsp;</span><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<span id="L2" class="ln">     2&nbsp;&nbsp;</span><span class="comment">// Use of this source code is governed by a BSD-style</span>
<span id="L3" class="ln">     3&nbsp;&nbsp;</span><span class="comment">// license that can be found in the LICENSE file.</span>
<span id="L4" class="ln">     4&nbsp;&nbsp;</span>
<span id="L5" class="ln">     5&nbsp;&nbsp;</span><span class="comment">// Package reflect implements run-time reflection, allowing a program to</span>
<span id="L6" class="ln">     6&nbsp;&nbsp;</span><span class="comment">// manipulate objects with arbitrary types. The typical use is to take a value</span>
<span id="L7" class="ln">     7&nbsp;&nbsp;</span><span class="comment">// with static type interface{} and extract its dynamic type information by</span>
<span id="L8" class="ln">     8&nbsp;&nbsp;</span><span class="comment">// calling TypeOf, which returns a Type.</span>
<span id="L9" class="ln">     9&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L10" class="ln">    10&nbsp;&nbsp;</span><span class="comment">// A call to ValueOf returns a Value representing the run-time data.</span>
<span id="L11" class="ln">    11&nbsp;&nbsp;</span><span class="comment">// Zero takes a Type and returns a Value representing a zero value</span>
<span id="L12" class="ln">    12&nbsp;&nbsp;</span><span class="comment">// for that type.</span>
<span id="L13" class="ln">    13&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L14" class="ln">    14&nbsp;&nbsp;</span><span class="comment">// See &#34;The Laws of Reflection&#34; for an introduction to reflection in Go:</span>
<span id="L15" class="ln">    15&nbsp;&nbsp;</span><span class="comment">// https://golang.org/doc/articles/laws_of_reflection.html</span>
<span id="L16" class="ln">    16&nbsp;&nbsp;</span>package reflect
<span id="L17" class="ln">    17&nbsp;&nbsp;</span>
<span id="L18" class="ln">    18&nbsp;&nbsp;</span>import (
<span id="L19" class="ln">    19&nbsp;&nbsp;</span>	&#34;internal/abi&#34;
<span id="L20" class="ln">    20&nbsp;&nbsp;</span>	&#34;internal/goarch&#34;
<span id="L21" class="ln">    21&nbsp;&nbsp;</span>	&#34;strconv&#34;
<span id="L22" class="ln">    22&nbsp;&nbsp;</span>	&#34;sync&#34;
<span id="L23" class="ln">    23&nbsp;&nbsp;</span>	&#34;unicode&#34;
<span id="L24" class="ln">    24&nbsp;&nbsp;</span>	&#34;unicode/utf8&#34;
<span id="L25" class="ln">    25&nbsp;&nbsp;</span>	&#34;unsafe&#34;
<span id="L26" class="ln">    26&nbsp;&nbsp;</span>)
<span id="L27" class="ln">    27&nbsp;&nbsp;</span>
<span id="L28" class="ln">    28&nbsp;&nbsp;</span><span class="comment">// Type is the representation of a Go type.</span>
<span id="L29" class="ln">    29&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L30" class="ln">    30&nbsp;&nbsp;</span><span class="comment">// Not all methods apply to all kinds of types. Restrictions,</span>
<span id="L31" class="ln">    31&nbsp;&nbsp;</span><span class="comment">// if any, are noted in the documentation for each method.</span>
<span id="L32" class="ln">    32&nbsp;&nbsp;</span><span class="comment">// Use the Kind method to find out the kind of type before</span>
<span id="L33" class="ln">    33&nbsp;&nbsp;</span><span class="comment">// calling kind-specific methods. Calling a method</span>
<span id="L34" class="ln">    34&nbsp;&nbsp;</span><span class="comment">// inappropriate to the kind of type causes a run-time panic.</span>
<span id="L35" class="ln">    35&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L36" class="ln">    36&nbsp;&nbsp;</span><span class="comment">// Type values are comparable, such as with the == operator,</span>
<span id="L37" class="ln">    37&nbsp;&nbsp;</span><span class="comment">// so they can be used as map keys.</span>
<span id="L38" class="ln">    38&nbsp;&nbsp;</span><span class="comment">// Two Type values are equal if they represent identical types.</span>
<span id="L39" class="ln">    39&nbsp;&nbsp;</span>type Type interface {
<span id="L40" class="ln">    40&nbsp;&nbsp;</span>	<span class="comment">// Methods applicable to all types.</span>
<span id="L41" class="ln">    41&nbsp;&nbsp;</span>
<span id="L42" class="ln">    42&nbsp;&nbsp;</span>	<span class="comment">// Align returns the alignment in bytes of a value of</span>
<span id="L43" class="ln">    43&nbsp;&nbsp;</span>	<span class="comment">// this type when allocated in memory.</span>
<span id="L44" class="ln">    44&nbsp;&nbsp;</span>	Align() int
<span id="L45" class="ln">    45&nbsp;&nbsp;</span>
<span id="L46" class="ln">    46&nbsp;&nbsp;</span>	<span class="comment">// FieldAlign returns the alignment in bytes of a value of</span>
<span id="L47" class="ln">    47&nbsp;&nbsp;</span>	<span class="comment">// this type when used as a field in a struct.</span>
<span id="L48" class="ln">    48&nbsp;&nbsp;</span>	FieldAlign() int
<span id="L49" class="ln">    49&nbsp;&nbsp;</span>
<span id="L50" class="ln">    50&nbsp;&nbsp;</span>	<span class="comment">// Method returns the i&#39;th method in the type&#39;s method set.</span>
<span id="L51" class="ln">    51&nbsp;&nbsp;</span>	<span class="comment">// It panics if i is not in the range [0, NumMethod()).</span>
<span id="L52" class="ln">    52&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L53" class="ln">    53&nbsp;&nbsp;</span>	<span class="comment">// For a non-interface type T or *T, the returned Method&#39;s Type and Func</span>
<span id="L54" class="ln">    54&nbsp;&nbsp;</span>	<span class="comment">// fields describe a function whose first argument is the receiver,</span>
<span id="L55" class="ln">    55&nbsp;&nbsp;</span>	<span class="comment">// and only exported methods are accessible.</span>
<span id="L56" class="ln">    56&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L57" class="ln">    57&nbsp;&nbsp;</span>	<span class="comment">// For an interface type, the returned Method&#39;s Type field gives the</span>
<span id="L58" class="ln">    58&nbsp;&nbsp;</span>	<span class="comment">// method signature, without a receiver, and the Func field is nil.</span>
<span id="L59" class="ln">    59&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L60" class="ln">    60&nbsp;&nbsp;</span>	<span class="comment">// Methods are sorted in lexicographic order.</span>
<span id="L61" class="ln">    61&nbsp;&nbsp;</span>	Method(int) Method
<span id="L62" class="ln">    62&nbsp;&nbsp;</span>
<span id="L63" class="ln">    63&nbsp;&nbsp;</span>	<span class="comment">// MethodByName returns the method with that name in the type&#39;s</span>
<span id="L64" class="ln">    64&nbsp;&nbsp;</span>	<span class="comment">// method set and a boolean indicating if the method was found.</span>
<span id="L65" class="ln">    65&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L66" class="ln">    66&nbsp;&nbsp;</span>	<span class="comment">// For a non-interface type T or *T, the returned Method&#39;s Type and Func</span>
<span id="L67" class="ln">    67&nbsp;&nbsp;</span>	<span class="comment">// fields describe a function whose first argument is the receiver.</span>
<span id="L68" class="ln">    68&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L69" class="ln">    69&nbsp;&nbsp;</span>	<span class="comment">// For an interface type, the returned Method&#39;s Type field gives the</span>
<span id="L70" class="ln">    70&nbsp;&nbsp;</span>	<span class="comment">// method signature, without a receiver, and the Func field is nil.</span>
<span id="L71" class="ln">    71&nbsp;&nbsp;</span>	MethodByName(string) (Method, bool)
<span id="L72" class="ln">    72&nbsp;&nbsp;</span>
<span id="L73" class="ln">    73&nbsp;&nbsp;</span>	<span class="comment">// NumMethod returns the number of methods accessible using Method.</span>
<span id="L74" class="ln">    74&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L75" class="ln">    75&nbsp;&nbsp;</span>	<span class="comment">// For a non-interface type, it returns the number of exported methods.</span>
<span id="L76" class="ln">    76&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L77" class="ln">    77&nbsp;&nbsp;</span>	<span class="comment">// For an interface type, it returns the number of exported and unexported methods.</span>
<span id="L78" class="ln">    78&nbsp;&nbsp;</span>	NumMethod() int
<span id="L79" class="ln">    79&nbsp;&nbsp;</span>
<span id="L80" class="ln">    80&nbsp;&nbsp;</span>	<span class="comment">// Name returns the type&#39;s name within its package for a defined type.</span>
<span id="L81" class="ln">    81&nbsp;&nbsp;</span>	<span class="comment">// For other (non-defined) types it returns the empty string.</span>
<span id="L82" class="ln">    82&nbsp;&nbsp;</span>	Name() string
<span id="L83" class="ln">    83&nbsp;&nbsp;</span>
<span id="L84" class="ln">    84&nbsp;&nbsp;</span>	<span class="comment">// PkgPath returns a defined type&#39;s package path, that is, the import path</span>
<span id="L85" class="ln">    85&nbsp;&nbsp;</span>	<span class="comment">// that uniquely identifies the package, such as &#34;encoding/base64&#34;.</span>
<span id="L86" class="ln">    86&nbsp;&nbsp;</span>	<span class="comment">// If the type was predeclared (string, error) or not defined (*T, struct{},</span>
<span id="L87" class="ln">    87&nbsp;&nbsp;</span>	<span class="comment">// []int, or A where A is an alias for a non-defined type), the package path</span>
<span id="L88" class="ln">    88&nbsp;&nbsp;</span>	<span class="comment">// will be the empty string.</span>
<span id="L89" class="ln">    89&nbsp;&nbsp;</span>	PkgPath() string
<span id="L90" class="ln">    90&nbsp;&nbsp;</span>
<span id="L91" class="ln">    91&nbsp;&nbsp;</span>	<span class="comment">// Size returns the number of bytes needed to store</span>
<span id="L92" class="ln">    92&nbsp;&nbsp;</span>	<span class="comment">// a value of the given type; it is analogous to unsafe.Sizeof.</span>
<span id="L93" class="ln">    93&nbsp;&nbsp;</span>	Size() uintptr
<span id="L94" class="ln">    94&nbsp;&nbsp;</span>
<span id="L95" class="ln">    95&nbsp;&nbsp;</span>	<span class="comment">// String returns a string representation of the type.</span>
<span id="L96" class="ln">    96&nbsp;&nbsp;</span>	<span class="comment">// The string representation may use shortened package names</span>
<span id="L97" class="ln">    97&nbsp;&nbsp;</span>	<span class="comment">// (e.g., base64 instead of &#34;encoding/base64&#34;) and is not</span>
<span id="L98" class="ln">    98&nbsp;&nbsp;</span>	<span class="comment">// guaranteed to be unique among types. To test for type identity,</span>
<span id="L99" class="ln">    99&nbsp;&nbsp;</span>	<span class="comment">// compare the Types directly.</span>
<span id="L100" class="ln">   100&nbsp;&nbsp;</span>	String() string
<span id="L101" class="ln">   101&nbsp;&nbsp;</span>
<span id="L102" class="ln">   102&nbsp;&nbsp;</span>	<span class="comment">// Kind returns the specific kind of this type.</span>
<span id="L103" class="ln">   103&nbsp;&nbsp;</span>	Kind() Kind
<span id="L104" class="ln">   104&nbsp;&nbsp;</span>
<span id="L105" class="ln">   105&nbsp;&nbsp;</span>	<span class="comment">// Implements reports whether the type implements the interface type u.</span>
<span id="L106" class="ln">   106&nbsp;&nbsp;</span>	Implements(u Type) bool
<span id="L107" class="ln">   107&nbsp;&nbsp;</span>
<span id="L108" class="ln">   108&nbsp;&nbsp;</span>	<span class="comment">// AssignableTo reports whether a value of the type is assignable to type u.</span>
<span id="L109" class="ln">   109&nbsp;&nbsp;</span>	AssignableTo(u Type) bool
<span id="L110" class="ln">   110&nbsp;&nbsp;</span>
<span id="L111" class="ln">   111&nbsp;&nbsp;</span>	<span class="comment">// ConvertibleTo reports whether a value of the type is convertible to type u.</span>
<span id="L112" class="ln">   112&nbsp;&nbsp;</span>	<span class="comment">// Even if ConvertibleTo returns true, the conversion may still panic.</span>
<span id="L113" class="ln">   113&nbsp;&nbsp;</span>	<span class="comment">// For example, a slice of type []T is convertible to *[N]T,</span>
<span id="L114" class="ln">   114&nbsp;&nbsp;</span>	<span class="comment">// but the conversion will panic if its length is less than N.</span>
<span id="L115" class="ln">   115&nbsp;&nbsp;</span>	ConvertibleTo(u Type) bool
<span id="L116" class="ln">   116&nbsp;&nbsp;</span>
<span id="L117" class="ln">   117&nbsp;&nbsp;</span>	<span class="comment">// Comparable reports whether values of this type are comparable.</span>
<span id="L118" class="ln">   118&nbsp;&nbsp;</span>	<span class="comment">// Even if Comparable returns true, the comparison may still panic.</span>
<span id="L119" class="ln">   119&nbsp;&nbsp;</span>	<span class="comment">// For example, values of interface type are comparable,</span>
<span id="L120" class="ln">   120&nbsp;&nbsp;</span>	<span class="comment">// but the comparison will panic if their dynamic type is not comparable.</span>
<span id="L121" class="ln">   121&nbsp;&nbsp;</span>	Comparable() bool
<span id="L122" class="ln">   122&nbsp;&nbsp;</span>
<span id="L123" class="ln">   123&nbsp;&nbsp;</span>	<span class="comment">// Methods applicable only to some types, depending on Kind.</span>
<span id="L124" class="ln">   124&nbsp;&nbsp;</span>	<span class="comment">// The methods allowed for each kind are:</span>
<span id="L125" class="ln">   125&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L126" class="ln">   126&nbsp;&nbsp;</span>	<span class="comment">//	Int*, Uint*, Float*, Complex*: Bits</span>
<span id="L127" class="ln">   127&nbsp;&nbsp;</span>	<span class="comment">//	Array: Elem, Len</span>
<span id="L128" class="ln">   128&nbsp;&nbsp;</span>	<span class="comment">//	Chan: ChanDir, Elem</span>
<span id="L129" class="ln">   129&nbsp;&nbsp;</span>	<span class="comment">//	Func: In, NumIn, Out, NumOut, IsVariadic.</span>
<span id="L130" class="ln">   130&nbsp;&nbsp;</span>	<span class="comment">//	Map: Key, Elem</span>
<span id="L131" class="ln">   131&nbsp;&nbsp;</span>	<span class="comment">//	Pointer: Elem</span>
<span id="L132" class="ln">   132&nbsp;&nbsp;</span>	<span class="comment">//	Slice: Elem</span>
<span id="L133" class="ln">   133&nbsp;&nbsp;</span>	<span class="comment">//	Struct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField</span>
<span id="L134" class="ln">   134&nbsp;&nbsp;</span>
<span id="L135" class="ln">   135&nbsp;&nbsp;</span>	<span class="comment">// Bits returns the size of the type in bits.</span>
<span id="L136" class="ln">   136&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not one of the</span>
<span id="L137" class="ln">   137&nbsp;&nbsp;</span>	<span class="comment">// sized or unsized Int, Uint, Float, or Complex kinds.</span>
<span id="L138" class="ln">   138&nbsp;&nbsp;</span>	Bits() int
<span id="L139" class="ln">   139&nbsp;&nbsp;</span>
<span id="L140" class="ln">   140&nbsp;&nbsp;</span>	<span class="comment">// ChanDir returns a channel type&#39;s direction.</span>
<span id="L141" class="ln">   141&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Chan.</span>
<span id="L142" class="ln">   142&nbsp;&nbsp;</span>	ChanDir() ChanDir
<span id="L143" class="ln">   143&nbsp;&nbsp;</span>
<span id="L144" class="ln">   144&nbsp;&nbsp;</span>	<span class="comment">// IsVariadic reports whether a function type&#39;s final input parameter</span>
<span id="L145" class="ln">   145&nbsp;&nbsp;</span>	<span class="comment">// is a &#34;...&#34; parameter. If so, t.In(t.NumIn() - 1) returns the parameter&#39;s</span>
<span id="L146" class="ln">   146&nbsp;&nbsp;</span>	<span class="comment">// implicit actual type []T.</span>
<span id="L147" class="ln">   147&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L148" class="ln">   148&nbsp;&nbsp;</span>	<span class="comment">// For concreteness, if t represents func(x int, y ... float64), then</span>
<span id="L149" class="ln">   149&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L150" class="ln">   150&nbsp;&nbsp;</span>	<span class="comment">//	t.NumIn() == 2</span>
<span id="L151" class="ln">   151&nbsp;&nbsp;</span>	<span class="comment">//	t.In(0) is the reflect.Type for &#34;int&#34;</span>
<span id="L152" class="ln">   152&nbsp;&nbsp;</span>	<span class="comment">//	t.In(1) is the reflect.Type for &#34;[]float64&#34;</span>
<span id="L153" class="ln">   153&nbsp;&nbsp;</span>	<span class="comment">//	t.IsVariadic() == true</span>
<span id="L154" class="ln">   154&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L155" class="ln">   155&nbsp;&nbsp;</span>	<span class="comment">// IsVariadic panics if the type&#39;s Kind is not Func.</span>
<span id="L156" class="ln">   156&nbsp;&nbsp;</span>	IsVariadic() bool
<span id="L157" class="ln">   157&nbsp;&nbsp;</span>
<span id="L158" class="ln">   158&nbsp;&nbsp;</span>	<span class="comment">// Elem returns a type&#39;s element type.</span>
<span id="L159" class="ln">   159&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Array, Chan, Map, Pointer, or Slice.</span>
<span id="L160" class="ln">   160&nbsp;&nbsp;</span>	Elem() Type
<span id="L161" class="ln">   161&nbsp;&nbsp;</span>
<span id="L162" class="ln">   162&nbsp;&nbsp;</span>	<span class="comment">// Field returns a struct type&#39;s i&#39;th field.</span>
<span id="L163" class="ln">   163&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Struct.</span>
<span id="L164" class="ln">   164&nbsp;&nbsp;</span>	<span class="comment">// It panics if i is not in the range [0, NumField()).</span>
<span id="L165" class="ln">   165&nbsp;&nbsp;</span>	Field(i int) StructField
<span id="L166" class="ln">   166&nbsp;&nbsp;</span>
<span id="L167" class="ln">   167&nbsp;&nbsp;</span>	<span class="comment">// FieldByIndex returns the nested field corresponding</span>
<span id="L168" class="ln">   168&nbsp;&nbsp;</span>	<span class="comment">// to the index sequence. It is equivalent to calling Field</span>
<span id="L169" class="ln">   169&nbsp;&nbsp;</span>	<span class="comment">// successively for each index i.</span>
<span id="L170" class="ln">   170&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Struct.</span>
<span id="L171" class="ln">   171&nbsp;&nbsp;</span>	FieldByIndex(index []int) StructField
<span id="L172" class="ln">   172&nbsp;&nbsp;</span>
<span id="L173" class="ln">   173&nbsp;&nbsp;</span>	<span class="comment">// FieldByName returns the struct field with the given name</span>
<span id="L174" class="ln">   174&nbsp;&nbsp;</span>	<span class="comment">// and a boolean indicating if the field was found.</span>
<span id="L175" class="ln">   175&nbsp;&nbsp;</span>	<span class="comment">// If the returned field is promoted from an embedded struct,</span>
<span id="L176" class="ln">   176&nbsp;&nbsp;</span>	<span class="comment">// then Offset in the returned StructField is the offset in</span>
<span id="L177" class="ln">   177&nbsp;&nbsp;</span>	<span class="comment">// the embedded struct.</span>
<span id="L178" class="ln">   178&nbsp;&nbsp;</span>	FieldByName(name string) (StructField, bool)
<span id="L179" class="ln">   179&nbsp;&nbsp;</span>
<span id="L180" class="ln">   180&nbsp;&nbsp;</span>	<span class="comment">// FieldByNameFunc returns the struct field with a name</span>
<span id="L181" class="ln">   181&nbsp;&nbsp;</span>	<span class="comment">// that satisfies the match function and a boolean indicating if</span>
<span id="L182" class="ln">   182&nbsp;&nbsp;</span>	<span class="comment">// the field was found.</span>
<span id="L183" class="ln">   183&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L184" class="ln">   184&nbsp;&nbsp;</span>	<span class="comment">// FieldByNameFunc considers the fields in the struct itself</span>
<span id="L185" class="ln">   185&nbsp;&nbsp;</span>	<span class="comment">// and then the fields in any embedded structs, in breadth first order,</span>
<span id="L186" class="ln">   186&nbsp;&nbsp;</span>	<span class="comment">// stopping at the shallowest nesting depth containing one or more</span>
<span id="L187" class="ln">   187&nbsp;&nbsp;</span>	<span class="comment">// fields satisfying the match function. If multiple fields at that depth</span>
<span id="L188" class="ln">   188&nbsp;&nbsp;</span>	<span class="comment">// satisfy the match function, they cancel each other</span>
<span id="L189" class="ln">   189&nbsp;&nbsp;</span>	<span class="comment">// and FieldByNameFunc returns no match.</span>
<span id="L190" class="ln">   190&nbsp;&nbsp;</span>	<span class="comment">// This behavior mirrors Go&#39;s handling of name lookup in</span>
<span id="L191" class="ln">   191&nbsp;&nbsp;</span>	<span class="comment">// structs containing embedded fields.</span>
<span id="L192" class="ln">   192&nbsp;&nbsp;</span>	<span class="comment">//</span>
<span id="L193" class="ln">   193&nbsp;&nbsp;</span>	<span class="comment">// If the returned field is promoted from an embedded struct,</span>
<span id="L194" class="ln">   194&nbsp;&nbsp;</span>	<span class="comment">// then Offset in the returned StructField is the offset in</span>
<span id="L195" class="ln">   195&nbsp;&nbsp;</span>	<span class="comment">// the embedded struct.</span>
<span id="L196" class="ln">   196&nbsp;&nbsp;</span>	FieldByNameFunc(match func(string) bool) (StructField, bool)
<span id="L197" class="ln">   197&nbsp;&nbsp;</span>
<span id="L198" class="ln">   198&nbsp;&nbsp;</span>	<span class="comment">// In returns the type of a function type&#39;s i&#39;th input parameter.</span>
<span id="L199" class="ln">   199&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Func.</span>
<span id="L200" class="ln">   200&nbsp;&nbsp;</span>	<span class="comment">// It panics if i is not in the range [0, NumIn()).</span>
<span id="L201" class="ln">   201&nbsp;&nbsp;</span>	In(i int) Type
<span id="L202" class="ln">   202&nbsp;&nbsp;</span>
<span id="L203" class="ln">   203&nbsp;&nbsp;</span>	<span class="comment">// Key returns a map type&#39;s key type.</span>
<span id="L204" class="ln">   204&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Map.</span>
<span id="L205" class="ln">   205&nbsp;&nbsp;</span>	Key() Type
<span id="L206" class="ln">   206&nbsp;&nbsp;</span>
<span id="L207" class="ln">   207&nbsp;&nbsp;</span>	<span class="comment">// Len returns an array type&#39;s length.</span>
<span id="L208" class="ln">   208&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Array.</span>
<span id="L209" class="ln">   209&nbsp;&nbsp;</span>	Len() int
<span id="L210" class="ln">   210&nbsp;&nbsp;</span>
<span id="L211" class="ln">   211&nbsp;&nbsp;</span>	<span class="comment">// NumField returns a struct type&#39;s field count.</span>
<span id="L212" class="ln">   212&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Struct.</span>
<span id="L213" class="ln">   213&nbsp;&nbsp;</span>	NumField() int
<span id="L214" class="ln">   214&nbsp;&nbsp;</span>
<span id="L215" class="ln">   215&nbsp;&nbsp;</span>	<span class="comment">// NumIn returns a function type&#39;s input parameter count.</span>
<span id="L216" class="ln">   216&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Func.</span>
<span id="L217" class="ln">   217&nbsp;&nbsp;</span>	NumIn() int
<span id="L218" class="ln">   218&nbsp;&nbsp;</span>
<span id="L219" class="ln">   219&nbsp;&nbsp;</span>	<span class="comment">// NumOut returns a function type&#39;s output parameter count.</span>
<span id="L220" class="ln">   220&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Func.</span>
<span id="L221" class="ln">   221&nbsp;&nbsp;</span>	NumOut() int
<span id="L222" class="ln">   222&nbsp;&nbsp;</span>
<span id="L223" class="ln">   223&nbsp;&nbsp;</span>	<span class="comment">// Out returns the type of a function type&#39;s i&#39;th output parameter.</span>
<span id="L224" class="ln">   224&nbsp;&nbsp;</span>	<span class="comment">// It panics if the type&#39;s Kind is not Func.</span>
<span id="L225" class="ln">   225&nbsp;&nbsp;</span>	<span class="comment">// It panics if i is not in the range [0, NumOut()).</span>
<span id="L226" class="ln">   226&nbsp;&nbsp;</span>	Out(i int) Type
<span id="L227" class="ln">   227&nbsp;&nbsp;</span>
<span id="L228" class="ln">   228&nbsp;&nbsp;</span>	common() *abi.Type
<span id="L229" class="ln">   229&nbsp;&nbsp;</span>	uncommon() *uncommonType
<span id="L230" class="ln">   230&nbsp;&nbsp;</span>}
<span id="L231" class="ln">   231&nbsp;&nbsp;</span>
<span id="L232" class="ln">   232&nbsp;&nbsp;</span><span class="comment">// BUG(rsc): FieldByName and related functions consider struct field names to be equal</span>
<span id="L233" class="ln">   233&nbsp;&nbsp;</span><span class="comment">// if the names are equal, even if they are unexported names originating</span>
<span id="L234" class="ln">   234&nbsp;&nbsp;</span><span class="comment">// in different packages. The practical effect of this is that the result of</span>
<span id="L235" class="ln">   235&nbsp;&nbsp;</span><span class="comment">// t.FieldByName(&#34;x&#34;) is not well defined if the struct type t contains</span>
<span id="L236" class="ln">   236&nbsp;&nbsp;</span><span class="comment">// multiple fields named x (embedded from different packages).</span>
<span id="L237" class="ln">   237&nbsp;&nbsp;</span><span class="comment">// FieldByName may return one of the fields named x or may report that there are none.</span>
<span id="L238" class="ln">   238&nbsp;&nbsp;</span><span class="comment">// See https://golang.org/issue/4876 for more details.</span>
<span id="L239" class="ln">   239&nbsp;&nbsp;</span>
<span id="L240" class="ln">   240&nbsp;&nbsp;</span><span class="comment">/*
<span id="L241" class="ln">   241&nbsp;&nbsp;</span> * These data structures are known to the compiler (../cmd/compile/internal/reflectdata/reflect.go).
<span id="L242" class="ln">   242&nbsp;&nbsp;</span> * A few are known to ../runtime/type.go to convey to debuggers.
<span id="L243" class="ln">   243&nbsp;&nbsp;</span> * They are also known to ../runtime/type.go.
<span id="L244" class="ln">   244&nbsp;&nbsp;</span> */</span>
<span id="L245" class="ln">   245&nbsp;&nbsp;</span>
<span id="L246" class="ln">   246&nbsp;&nbsp;</span><span class="comment">// A Kind represents the specific kind of type that a [Type] represents.</span>
<span id="L247" class="ln">   247&nbsp;&nbsp;</span><span class="comment">// The zero Kind is not a valid kind.</span>
<span id="L248" class="ln">   248&nbsp;&nbsp;</span>type Kind uint
<span id="L249" class="ln">   249&nbsp;&nbsp;</span>
<span id="L250" class="ln">   250&nbsp;&nbsp;</span>const (
<span id="L251" class="ln">   251&nbsp;&nbsp;</span>	Invalid Kind = iota
<span id="L252" class="ln">   252&nbsp;&nbsp;</span>	Bool
<span id="L253" class="ln">   253&nbsp;&nbsp;</span>	Int
<span id="L254" class="ln">   254&nbsp;&nbsp;</span>	Int8
<span id="L255" class="ln">   255&nbsp;&nbsp;</span>	Int16
<span id="L256" class="ln">   256&nbsp;&nbsp;</span>	Int32
<span id="L257" class="ln">   257&nbsp;&nbsp;</span>	Int64
<span id="L258" class="ln">   258&nbsp;&nbsp;</span>	Uint
<span id="L259" class="ln">   259&nbsp;&nbsp;</span>	Uint8
<span id="L260" class="ln">   260&nbsp;&nbsp;</span>	Uint16
<span id="L261" class="ln">   261&nbsp;&nbsp;</span>	Uint32
<span id="L262" class="ln">   262&nbsp;&nbsp;</span>	Uint64
<span id="L263" class="ln">   263&nbsp;&nbsp;</span>	Uintptr
<span id="L264" class="ln">   264&nbsp;&nbsp;</span>	Float32
<span id="L265" class="ln">   265&nbsp;&nbsp;</span>	Float64
<span id="L266" class="ln">   266&nbsp;&nbsp;</span>	Complex64
<span id="L267" class="ln">   267&nbsp;&nbsp;</span>	Complex128
<span id="L268" class="ln">   268&nbsp;&nbsp;</span>	Array
<span id="L269" class="ln">   269&nbsp;&nbsp;</span>	Chan
<span id="L270" class="ln">   270&nbsp;&nbsp;</span>	Func
<span id="L271" class="ln">   271&nbsp;&nbsp;</span>	Interface
<span id="L272" class="ln">   272&nbsp;&nbsp;</span>	Map
<span id="L273" class="ln">   273&nbsp;&nbsp;</span>	Pointer
<span id="L274" class="ln">   274&nbsp;&nbsp;</span>	Slice
<span id="L275" class="ln">   275&nbsp;&nbsp;</span>	String
<span id="L276" class="ln">   276&nbsp;&nbsp;</span>	Struct
<span id="L277" class="ln">   277&nbsp;&nbsp;</span>	UnsafePointer
<span id="L278" class="ln">   278&nbsp;&nbsp;</span>)
<span id="L279" class="ln">   279&nbsp;&nbsp;</span>
<span id="L280" class="ln">   280&nbsp;&nbsp;</span><span class="comment">// Ptr is the old name for the [Pointer] kind.</span>
<span id="L281" class="ln">   281&nbsp;&nbsp;</span>const Ptr = Pointer
<span id="L282" class="ln">   282&nbsp;&nbsp;</span>
<span id="L283" class="ln">   283&nbsp;&nbsp;</span><span class="comment">// uncommonType is present only for defined types or types with methods</span>
<span id="L284" class="ln">   284&nbsp;&nbsp;</span><span class="comment">// (if T is a defined type, the uncommonTypes for T and *T have methods).</span>
<span id="L285" class="ln">   285&nbsp;&nbsp;</span><span class="comment">// Using a pointer to this struct reduces the overall size required</span>
<span id="L286" class="ln">   286&nbsp;&nbsp;</span><span class="comment">// to describe a non-defined type with no methods.</span>
<span id="L287" class="ln">   287&nbsp;&nbsp;</span>type uncommonType = abi.UncommonType
<span id="L288" class="ln">   288&nbsp;&nbsp;</span>
<span id="L289" class="ln">   289&nbsp;&nbsp;</span><span class="comment">// Embed this type to get common/uncommon</span>
<span id="L290" class="ln">   290&nbsp;&nbsp;</span>type common struct {
<span id="L291" class="ln">   291&nbsp;&nbsp;</span>	abi.Type
<span id="L292" class="ln">   292&nbsp;&nbsp;</span>}
<span id="L293" class="ln">   293&nbsp;&nbsp;</span>
<span id="L294" class="ln">   294&nbsp;&nbsp;</span><span class="comment">// rtype is the common implementation of most values.</span>
<span id="L295" class="ln">   295&nbsp;&nbsp;</span><span class="comment">// It is embedded in other struct types.</span>
<span id="L296" class="ln">   296&nbsp;&nbsp;</span>type rtype struct {
<span id="L297" class="ln">   297&nbsp;&nbsp;</span>	t abi.Type
<span id="L298" class="ln">   298&nbsp;&nbsp;</span>}
<span id="L299" class="ln">   299&nbsp;&nbsp;</span>
<span id="L300" class="ln">   300&nbsp;&nbsp;</span>func (t *rtype) common() *abi.Type {
<span id="L301" class="ln">   301&nbsp;&nbsp;</span>	return &amp;t.t
<span id="L302" class="ln">   302&nbsp;&nbsp;</span>}
<span id="L303" class="ln">   303&nbsp;&nbsp;</span>
<span id="L304" class="ln">   304&nbsp;&nbsp;</span>func (t *rtype) uncommon() *abi.UncommonType {
<span id="L305" class="ln">   305&nbsp;&nbsp;</span>	return t.t.Uncommon()
<span id="L306" class="ln">   306&nbsp;&nbsp;</span>}
<span id="L307" class="ln">   307&nbsp;&nbsp;</span>
<span id="L308" class="ln">   308&nbsp;&nbsp;</span>type aNameOff = abi.NameOff
<span id="L309" class="ln">   309&nbsp;&nbsp;</span>type aTypeOff = abi.TypeOff
<span id="L310" class="ln">   310&nbsp;&nbsp;</span>type aTextOff = abi.TextOff
<span id="L311" class="ln">   311&nbsp;&nbsp;</span>
<span id="L312" class="ln">   312&nbsp;&nbsp;</span><span class="comment">// ChanDir represents a channel type&#39;s direction.</span>
<span id="L313" class="ln">   313&nbsp;&nbsp;</span>type ChanDir int
<span id="L314" class="ln">   314&nbsp;&nbsp;</span>
<span id="L315" class="ln">   315&nbsp;&nbsp;</span>const (
<span id="L316" class="ln">   316&nbsp;&nbsp;</span>	RecvDir ChanDir             = 1 &lt;&lt; iota <span class="comment">// &lt;-chan</span>
<span id="L317" class="ln">   317&nbsp;&nbsp;</span>	SendDir                                 <span class="comment">// chan&lt;-</span>
<span id="L318" class="ln">   318&nbsp;&nbsp;</span>	BothDir = RecvDir | SendDir             <span class="comment">// chan</span>
<span id="L319" class="ln">   319&nbsp;&nbsp;</span>)
<span id="L320" class="ln">   320&nbsp;&nbsp;</span>
<span id="L321" class="ln">   321&nbsp;&nbsp;</span><span class="comment">// arrayType represents a fixed array type.</span>
<span id="L322" class="ln">   322&nbsp;&nbsp;</span>type arrayType = abi.ArrayType
<span id="L323" class="ln">   323&nbsp;&nbsp;</span>
<span id="L324" class="ln">   324&nbsp;&nbsp;</span><span class="comment">// chanType represents a channel type.</span>
<span id="L325" class="ln">   325&nbsp;&nbsp;</span>type chanType = abi.ChanType
<span id="L326" class="ln">   326&nbsp;&nbsp;</span>
<span id="L327" class="ln">   327&nbsp;&nbsp;</span><span class="comment">// funcType represents a function type.</span>
<span id="L328" class="ln">   328&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L329" class="ln">   329&nbsp;&nbsp;</span><span class="comment">// A *rtype for each in and out parameter is stored in an array that</span>
<span id="L330" class="ln">   330&nbsp;&nbsp;</span><span class="comment">// directly follows the funcType (and possibly its uncommonType). So</span>
<span id="L331" class="ln">   331&nbsp;&nbsp;</span><span class="comment">// a function type with one method, one input, and one output is:</span>
<span id="L332" class="ln">   332&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L333" class="ln">   333&nbsp;&nbsp;</span><span class="comment">//	struct {</span>
<span id="L334" class="ln">   334&nbsp;&nbsp;</span><span class="comment">//		funcType</span>
<span id="L335" class="ln">   335&nbsp;&nbsp;</span><span class="comment">//		uncommonType</span>
<span id="L336" class="ln">   336&nbsp;&nbsp;</span><span class="comment">//		[2]*rtype    // [0] is in, [1] is out</span>
<span id="L337" class="ln">   337&nbsp;&nbsp;</span><span class="comment">//	}</span>
<span id="L338" class="ln">   338&nbsp;&nbsp;</span>type funcType = abi.FuncType
<span id="L339" class="ln">   339&nbsp;&nbsp;</span>
<span id="L340" class="ln">   340&nbsp;&nbsp;</span><span class="comment">// interfaceType represents an interface type.</span>
<span id="L341" class="ln">   341&nbsp;&nbsp;</span>type interfaceType struct {
<span id="L342" class="ln">   342&nbsp;&nbsp;</span>	abi.InterfaceType <span class="comment">// can embed directly because not a public type.</span>
<span id="L343" class="ln">   343&nbsp;&nbsp;</span>}
<span id="L344" class="ln">   344&nbsp;&nbsp;</span>
<span id="L345" class="ln">   345&nbsp;&nbsp;</span>func (t *interfaceType) nameOff(off aNameOff) abi.Name {
<span id="L346" class="ln">   346&nbsp;&nbsp;</span>	return toRType(&amp;t.Type).nameOff(off)
<span id="L347" class="ln">   347&nbsp;&nbsp;</span>}
<span id="L348" class="ln">   348&nbsp;&nbsp;</span>
<span id="L349" class="ln">   349&nbsp;&nbsp;</span>func nameOffFor(t *abi.Type, off aNameOff) abi.Name {
<span id="L350" class="ln">   350&nbsp;&nbsp;</span>	return toRType(t).nameOff(off)
<span id="L351" class="ln">   351&nbsp;&nbsp;</span>}
<span id="L352" class="ln">   352&nbsp;&nbsp;</span>
<span id="L353" class="ln">   353&nbsp;&nbsp;</span>func typeOffFor(t *abi.Type, off aTypeOff) *abi.Type {
<span id="L354" class="ln">   354&nbsp;&nbsp;</span>	return toRType(t).typeOff(off)
<span id="L355" class="ln">   355&nbsp;&nbsp;</span>}
<span id="L356" class="ln">   356&nbsp;&nbsp;</span>
<span id="L357" class="ln">   357&nbsp;&nbsp;</span>func (t *interfaceType) typeOff(off aTypeOff) *abi.Type {
<span id="L358" class="ln">   358&nbsp;&nbsp;</span>	return toRType(&amp;t.Type).typeOff(off)
<span id="L359" class="ln">   359&nbsp;&nbsp;</span>}
<span id="L360" class="ln">   360&nbsp;&nbsp;</span>
<span id="L361" class="ln">   361&nbsp;&nbsp;</span>func (t *interfaceType) common() *abi.Type {
<span id="L362" class="ln">   362&nbsp;&nbsp;</span>	return &amp;t.Type
<span id="L363" class="ln">   363&nbsp;&nbsp;</span>}
<span id="L364" class="ln">   364&nbsp;&nbsp;</span>
<span id="L365" class="ln">   365&nbsp;&nbsp;</span>func (t *interfaceType) uncommon() *abi.UncommonType {
<span id="L366" class="ln">   366&nbsp;&nbsp;</span>	return t.Uncommon()
<span id="L367" class="ln">   367&nbsp;&nbsp;</span>}
<span id="L368" class="ln">   368&nbsp;&nbsp;</span>
<span id="L369" class="ln">   369&nbsp;&nbsp;</span><span class="comment">// mapType represents a map type.</span>
<span id="L370" class="ln">   370&nbsp;&nbsp;</span>type mapType struct {
<span id="L371" class="ln">   371&nbsp;&nbsp;</span>	abi.MapType
<span id="L372" class="ln">   372&nbsp;&nbsp;</span>}
<span id="L373" class="ln">   373&nbsp;&nbsp;</span>
<span id="L374" class="ln">   374&nbsp;&nbsp;</span><span class="comment">// ptrType represents a pointer type.</span>
<span id="L375" class="ln">   375&nbsp;&nbsp;</span>type ptrType struct {
<span id="L376" class="ln">   376&nbsp;&nbsp;</span>	abi.PtrType
<span id="L377" class="ln">   377&nbsp;&nbsp;</span>}
<span id="L378" class="ln">   378&nbsp;&nbsp;</span>
<span id="L379" class="ln">   379&nbsp;&nbsp;</span><span class="comment">// sliceType represents a slice type.</span>
<span id="L380" class="ln">   380&nbsp;&nbsp;</span>type sliceType struct {
<span id="L381" class="ln">   381&nbsp;&nbsp;</span>	abi.SliceType
<span id="L382" class="ln">   382&nbsp;&nbsp;</span>}
<span id="L383" class="ln">   383&nbsp;&nbsp;</span>
<span id="L384" class="ln">   384&nbsp;&nbsp;</span><span class="comment">// Struct field</span>
<span id="L385" class="ln">   385&nbsp;&nbsp;</span>type structField = abi.StructField
<span id="L386" class="ln">   386&nbsp;&nbsp;</span>
<span id="L387" class="ln">   387&nbsp;&nbsp;</span><span class="comment">// structType represents a struct type.</span>
<span id="L388" class="ln">   388&nbsp;&nbsp;</span>type structType struct {
<span id="L389" class="ln">   389&nbsp;&nbsp;</span>	abi.StructType
<span id="L390" class="ln">   390&nbsp;&nbsp;</span>}
<span id="L391" class="ln">   391&nbsp;&nbsp;</span>
<span id="L392" class="ln">   392&nbsp;&nbsp;</span>func pkgPath(n abi.Name) string {
<span id="L393" class="ln">   393&nbsp;&nbsp;</span>	if n.Bytes == nil || *n.DataChecked(0, &#34;name flag field&#34;)&amp;(1&lt;&lt;2) == 0 {
<span id="L394" class="ln">   394&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L395" class="ln">   395&nbsp;&nbsp;</span>	}
<span id="L396" class="ln">   396&nbsp;&nbsp;</span>	i, l := n.ReadVarint(1)
<span id="L397" class="ln">   397&nbsp;&nbsp;</span>	off := 1 + i + l
<span id="L398" class="ln">   398&nbsp;&nbsp;</span>	if n.HasTag() {
<span id="L399" class="ln">   399&nbsp;&nbsp;</span>		i2, l2 := n.ReadVarint(off)
<span id="L400" class="ln">   400&nbsp;&nbsp;</span>		off += i2 + l2
<span id="L401" class="ln">   401&nbsp;&nbsp;</span>	}
<span id="L402" class="ln">   402&nbsp;&nbsp;</span>	var nameOff int32
<span id="L403" class="ln">   403&nbsp;&nbsp;</span>	<span class="comment">// Note that this field may not be aligned in memory,</span>
<span id="L404" class="ln">   404&nbsp;&nbsp;</span>	<span class="comment">// so we cannot use a direct int32 assignment here.</span>
<span id="L405" class="ln">   405&nbsp;&nbsp;</span>	copy((*[4]byte)(unsafe.Pointer(&amp;nameOff))[:], (*[4]byte)(unsafe.Pointer(n.DataChecked(off, &#34;name offset field&#34;)))[:])
<span id="L406" class="ln">   406&nbsp;&nbsp;</span>	pkgPathName := abi.Name{Bytes: (*byte)(resolveTypeOff(unsafe.Pointer(n.Bytes), nameOff))}
<span id="L407" class="ln">   407&nbsp;&nbsp;</span>	return pkgPathName.Name()
<span id="L408" class="ln">   408&nbsp;&nbsp;</span>}
<span id="L409" class="ln">   409&nbsp;&nbsp;</span>
<span id="L410" class="ln">   410&nbsp;&nbsp;</span>func newName(n, tag string, exported, embedded bool) abi.Name {
<span id="L411" class="ln">   411&nbsp;&nbsp;</span>	return abi.NewName(n, tag, exported, embedded)
<span id="L412" class="ln">   412&nbsp;&nbsp;</span>}
<span id="L413" class="ln">   413&nbsp;&nbsp;</span>
<span id="L414" class="ln">   414&nbsp;&nbsp;</span><span class="comment">/*
<span id="L415" class="ln">   415&nbsp;&nbsp;</span> * The compiler knows the exact layout of all the data structures above.
<span id="L416" class="ln">   416&nbsp;&nbsp;</span> * The compiler does not know about the data structures and methods below.
<span id="L417" class="ln">   417&nbsp;&nbsp;</span> */</span>
<span id="L418" class="ln">   418&nbsp;&nbsp;</span>
<span id="L419" class="ln">   419&nbsp;&nbsp;</span><span class="comment">// Method represents a single method.</span>
<span id="L420" class="ln">   420&nbsp;&nbsp;</span>type Method struct {
<span id="L421" class="ln">   421&nbsp;&nbsp;</span>	<span class="comment">// Name is the method name.</span>
<span id="L422" class="ln">   422&nbsp;&nbsp;</span>	Name string
<span id="L423" class="ln">   423&nbsp;&nbsp;</span>
<span id="L424" class="ln">   424&nbsp;&nbsp;</span>	<span class="comment">// PkgPath is the package path that qualifies a lower case (unexported)</span>
<span id="L425" class="ln">   425&nbsp;&nbsp;</span>	<span class="comment">// method name. It is empty for upper case (exported) method names.</span>
<span id="L426" class="ln">   426&nbsp;&nbsp;</span>	<span class="comment">// The combination of PkgPath and Name uniquely identifies a method</span>
<span id="L427" class="ln">   427&nbsp;&nbsp;</span>	<span class="comment">// in a method set.</span>
<span id="L428" class="ln">   428&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span>
<span id="L429" class="ln">   429&nbsp;&nbsp;</span>	PkgPath string
<span id="L430" class="ln">   430&nbsp;&nbsp;</span>
<span id="L431" class="ln">   431&nbsp;&nbsp;</span>	Type  Type  <span class="comment">// method type</span>
<span id="L432" class="ln">   432&nbsp;&nbsp;</span>	Func  Value <span class="comment">// func with receiver as first argument</span>
<span id="L433" class="ln">   433&nbsp;&nbsp;</span>	Index int   <span class="comment">// index for Type.Method</span>
<span id="L434" class="ln">   434&nbsp;&nbsp;</span>}
<span id="L435" class="ln">   435&nbsp;&nbsp;</span>
<span id="L436" class="ln">   436&nbsp;&nbsp;</span><span class="comment">// IsExported reports whether the method is exported.</span>
<span id="L437" class="ln">   437&nbsp;&nbsp;</span>func (m Method) IsExported() bool {
<span id="L438" class="ln">   438&nbsp;&nbsp;</span>	return m.PkgPath == &#34;&#34;
<span id="L439" class="ln">   439&nbsp;&nbsp;</span>}
<span id="L440" class="ln">   440&nbsp;&nbsp;</span>
<span id="L441" class="ln">   441&nbsp;&nbsp;</span>const (
<span id="L442" class="ln">   442&nbsp;&nbsp;</span>	kindDirectIface = 1 &lt;&lt; 5
<span id="L443" class="ln">   443&nbsp;&nbsp;</span>	kindGCProg      = 1 &lt;&lt; 6 <span class="comment">// Type.gc points to GC program</span>
<span id="L444" class="ln">   444&nbsp;&nbsp;</span>	kindMask        = (1 &lt;&lt; 5) - 1
<span id="L445" class="ln">   445&nbsp;&nbsp;</span>)
<span id="L446" class="ln">   446&nbsp;&nbsp;</span>
<span id="L447" class="ln">   447&nbsp;&nbsp;</span><span class="comment">// String returns the name of k.</span>
<span id="L448" class="ln">   448&nbsp;&nbsp;</span>func (k Kind) String() string {
<span id="L449" class="ln">   449&nbsp;&nbsp;</span>	if uint(k) &lt; uint(len(kindNames)) {
<span id="L450" class="ln">   450&nbsp;&nbsp;</span>		return kindNames[uint(k)]
<span id="L451" class="ln">   451&nbsp;&nbsp;</span>	}
<span id="L452" class="ln">   452&nbsp;&nbsp;</span>	return &#34;kind&#34; + strconv.Itoa(int(k))
<span id="L453" class="ln">   453&nbsp;&nbsp;</span>}
<span id="L454" class="ln">   454&nbsp;&nbsp;</span>
<span id="L455" class="ln">   455&nbsp;&nbsp;</span>var kindNames = []string{
<span id="L456" class="ln">   456&nbsp;&nbsp;</span>	Invalid:       &#34;invalid&#34;,
<span id="L457" class="ln">   457&nbsp;&nbsp;</span>	Bool:          &#34;bool&#34;,
<span id="L458" class="ln">   458&nbsp;&nbsp;</span>	Int:           &#34;int&#34;,
<span id="L459" class="ln">   459&nbsp;&nbsp;</span>	Int8:          &#34;int8&#34;,
<span id="L460" class="ln">   460&nbsp;&nbsp;</span>	Int16:         &#34;int16&#34;,
<span id="L461" class="ln">   461&nbsp;&nbsp;</span>	Int32:         &#34;int32&#34;,
<span id="L462" class="ln">   462&nbsp;&nbsp;</span>	Int64:         &#34;int64&#34;,
<span id="L463" class="ln">   463&nbsp;&nbsp;</span>	Uint:          &#34;uint&#34;,
<span id="L464" class="ln">   464&nbsp;&nbsp;</span>	Uint8:         &#34;uint8&#34;,
<span id="L465" class="ln">   465&nbsp;&nbsp;</span>	Uint16:        &#34;uint16&#34;,
<span id="L466" class="ln">   466&nbsp;&nbsp;</span>	Uint32:        &#34;uint32&#34;,
<span id="L467" class="ln">   467&nbsp;&nbsp;</span>	Uint64:        &#34;uint64&#34;,
<span id="L468" class="ln">   468&nbsp;&nbsp;</span>	Uintptr:       &#34;uintptr&#34;,
<span id="L469" class="ln">   469&nbsp;&nbsp;</span>	Float32:       &#34;float32&#34;,
<span id="L470" class="ln">   470&nbsp;&nbsp;</span>	Float64:       &#34;float64&#34;,
<span id="L471" class="ln">   471&nbsp;&nbsp;</span>	Complex64:     &#34;complex64&#34;,
<span id="L472" class="ln">   472&nbsp;&nbsp;</span>	Complex128:    &#34;complex128&#34;,
<span id="L473" class="ln">   473&nbsp;&nbsp;</span>	Array:         &#34;array&#34;,
<span id="L474" class="ln">   474&nbsp;&nbsp;</span>	Chan:          &#34;chan&#34;,
<span id="L475" class="ln">   475&nbsp;&nbsp;</span>	Func:          &#34;func&#34;,
<span id="L476" class="ln">   476&nbsp;&nbsp;</span>	Interface:     &#34;interface&#34;,
<span id="L477" class="ln">   477&nbsp;&nbsp;</span>	Map:           &#34;map&#34;,
<span id="L478" class="ln">   478&nbsp;&nbsp;</span>	Pointer:       &#34;ptr&#34;,
<span id="L479" class="ln">   479&nbsp;&nbsp;</span>	Slice:         &#34;slice&#34;,
<span id="L480" class="ln">   480&nbsp;&nbsp;</span>	String:        &#34;string&#34;,
<span id="L481" class="ln">   481&nbsp;&nbsp;</span>	Struct:        &#34;struct&#34;,
<span id="L482" class="ln">   482&nbsp;&nbsp;</span>	UnsafePointer: &#34;unsafe.Pointer&#34;,
<span id="L483" class="ln">   483&nbsp;&nbsp;</span>}
<span id="L484" class="ln">   484&nbsp;&nbsp;</span>
<span id="L485" class="ln">   485&nbsp;&nbsp;</span><span class="comment">// resolveNameOff resolves a name offset from a base pointer.</span>
<span id="L486" class="ln">   486&nbsp;&nbsp;</span><span class="comment">// The (*rtype).nameOff method is a convenience wrapper for this function.</span>
<span id="L487" class="ln">   487&nbsp;&nbsp;</span><span class="comment">// Implemented in the runtime package.</span>
<span id="L488" class="ln">   488&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L489" class="ln">   489&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L490" class="ln">   490&nbsp;&nbsp;</span>func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer
<span id="L491" class="ln">   491&nbsp;&nbsp;</span>
<span id="L492" class="ln">   492&nbsp;&nbsp;</span><span class="comment">// resolveTypeOff resolves an *rtype offset from a base type.</span>
<span id="L493" class="ln">   493&nbsp;&nbsp;</span><span class="comment">// The (*rtype).typeOff method is a convenience wrapper for this function.</span>
<span id="L494" class="ln">   494&nbsp;&nbsp;</span><span class="comment">// Implemented in the runtime package.</span>
<span id="L495" class="ln">   495&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L496" class="ln">   496&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L497" class="ln">   497&nbsp;&nbsp;</span>func resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer
<span id="L498" class="ln">   498&nbsp;&nbsp;</span>
<span id="L499" class="ln">   499&nbsp;&nbsp;</span><span class="comment">// resolveTextOff resolves a function pointer offset from a base type.</span>
<span id="L500" class="ln">   500&nbsp;&nbsp;</span><span class="comment">// The (*rtype).textOff method is a convenience wrapper for this function.</span>
<span id="L501" class="ln">   501&nbsp;&nbsp;</span><span class="comment">// Implemented in the runtime package.</span>
<span id="L502" class="ln">   502&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L503" class="ln">   503&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L504" class="ln">   504&nbsp;&nbsp;</span>func resolveTextOff(rtype unsafe.Pointer, off int32) unsafe.Pointer
<span id="L505" class="ln">   505&nbsp;&nbsp;</span>
<span id="L506" class="ln">   506&nbsp;&nbsp;</span><span class="comment">// addReflectOff adds a pointer to the reflection lookup map in the runtime.</span>
<span id="L507" class="ln">   507&nbsp;&nbsp;</span><span class="comment">// It returns a new ID that can be used as a typeOff or textOff, and will</span>
<span id="L508" class="ln">   508&nbsp;&nbsp;</span><span class="comment">// be resolved correctly. Implemented in the runtime package.</span>
<span id="L509" class="ln">   509&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L510" class="ln">   510&nbsp;&nbsp;</span><span class="comment">//go:noescape</span>
<span id="L511" class="ln">   511&nbsp;&nbsp;</span>func addReflectOff(ptr unsafe.Pointer) int32
<span id="L512" class="ln">   512&nbsp;&nbsp;</span>
<span id="L513" class="ln">   513&nbsp;&nbsp;</span><span class="comment">// resolveReflectName adds a name to the reflection lookup map in the runtime.</span>
<span id="L514" class="ln">   514&nbsp;&nbsp;</span><span class="comment">// It returns a new nameOff that can be used to refer to the pointer.</span>
<span id="L515" class="ln">   515&nbsp;&nbsp;</span>func resolveReflectName(n abi.Name) aNameOff {
<span id="L516" class="ln">   516&nbsp;&nbsp;</span>	return aNameOff(addReflectOff(unsafe.Pointer(n.Bytes)))
<span id="L517" class="ln">   517&nbsp;&nbsp;</span>}
<span id="L518" class="ln">   518&nbsp;&nbsp;</span>
<span id="L519" class="ln">   519&nbsp;&nbsp;</span><span class="comment">// resolveReflectType adds a *rtype to the reflection lookup map in the runtime.</span>
<span id="L520" class="ln">   520&nbsp;&nbsp;</span><span class="comment">// It returns a new typeOff that can be used to refer to the pointer.</span>
<span id="L521" class="ln">   521&nbsp;&nbsp;</span>func resolveReflectType(t *abi.Type) aTypeOff {
<span id="L522" class="ln">   522&nbsp;&nbsp;</span>	return aTypeOff(addReflectOff(unsafe.Pointer(t)))
<span id="L523" class="ln">   523&nbsp;&nbsp;</span>}
<span id="L524" class="ln">   524&nbsp;&nbsp;</span>
<span id="L525" class="ln">   525&nbsp;&nbsp;</span><span class="comment">// resolveReflectText adds a function pointer to the reflection lookup map in</span>
<span id="L526" class="ln">   526&nbsp;&nbsp;</span><span class="comment">// the runtime. It returns a new textOff that can be used to refer to the</span>
<span id="L527" class="ln">   527&nbsp;&nbsp;</span><span class="comment">// pointer.</span>
<span id="L528" class="ln">   528&nbsp;&nbsp;</span>func resolveReflectText(ptr unsafe.Pointer) aTextOff {
<span id="L529" class="ln">   529&nbsp;&nbsp;</span>	return aTextOff(addReflectOff(ptr))
<span id="L530" class="ln">   530&nbsp;&nbsp;</span>}
<span id="L531" class="ln">   531&nbsp;&nbsp;</span>
<span id="L532" class="ln">   532&nbsp;&nbsp;</span>func (t *rtype) nameOff(off aNameOff) abi.Name {
<span id="L533" class="ln">   533&nbsp;&nbsp;</span>	return abi.Name{Bytes: (*byte)(resolveNameOff(unsafe.Pointer(t), int32(off)))}
<span id="L534" class="ln">   534&nbsp;&nbsp;</span>}
<span id="L535" class="ln">   535&nbsp;&nbsp;</span>
<span id="L536" class="ln">   536&nbsp;&nbsp;</span>func (t *rtype) typeOff(off aTypeOff) *abi.Type {
<span id="L537" class="ln">   537&nbsp;&nbsp;</span>	return (*abi.Type)(resolveTypeOff(unsafe.Pointer(t), int32(off)))
<span id="L538" class="ln">   538&nbsp;&nbsp;</span>}
<span id="L539" class="ln">   539&nbsp;&nbsp;</span>
<span id="L540" class="ln">   540&nbsp;&nbsp;</span>func (t *rtype) textOff(off aTextOff) unsafe.Pointer {
<span id="L541" class="ln">   541&nbsp;&nbsp;</span>	return resolveTextOff(unsafe.Pointer(t), int32(off))
<span id="L542" class="ln">   542&nbsp;&nbsp;</span>}
<span id="L543" class="ln">   543&nbsp;&nbsp;</span>
<span id="L544" class="ln">   544&nbsp;&nbsp;</span>func textOffFor(t *abi.Type, off aTextOff) unsafe.Pointer {
<span id="L545" class="ln">   545&nbsp;&nbsp;</span>	return toRType(t).textOff(off)
<span id="L546" class="ln">   546&nbsp;&nbsp;</span>}
<span id="L547" class="ln">   547&nbsp;&nbsp;</span>
<span id="L548" class="ln">   548&nbsp;&nbsp;</span>func (t *rtype) String() string {
<span id="L549" class="ln">   549&nbsp;&nbsp;</span>	s := t.nameOff(t.t.Str).Name()
<span id="L550" class="ln">   550&nbsp;&nbsp;</span>	if t.t.TFlag&amp;abi.TFlagExtraStar != 0 {
<span id="L551" class="ln">   551&nbsp;&nbsp;</span>		return s[1:]
<span id="L552" class="ln">   552&nbsp;&nbsp;</span>	}
<span id="L553" class="ln">   553&nbsp;&nbsp;</span>	return s
<span id="L554" class="ln">   554&nbsp;&nbsp;</span>}
<span id="L555" class="ln">   555&nbsp;&nbsp;</span>
<span id="L556" class="ln">   556&nbsp;&nbsp;</span>func (t *rtype) Size() uintptr { return t.t.Size() }
<span id="L557" class="ln">   557&nbsp;&nbsp;</span>
<span id="L558" class="ln">   558&nbsp;&nbsp;</span>func (t *rtype) Bits() int {
<span id="L559" class="ln">   559&nbsp;&nbsp;</span>	if t == nil {
<span id="L560" class="ln">   560&nbsp;&nbsp;</span>		panic(&#34;reflect: Bits of nil Type&#34;)
<span id="L561" class="ln">   561&nbsp;&nbsp;</span>	}
<span id="L562" class="ln">   562&nbsp;&nbsp;</span>	k := t.Kind()
<span id="L563" class="ln">   563&nbsp;&nbsp;</span>	if k &lt; Int || k &gt; Complex128 {
<span id="L564" class="ln">   564&nbsp;&nbsp;</span>		panic(&#34;reflect: Bits of non-arithmetic Type &#34; + t.String())
<span id="L565" class="ln">   565&nbsp;&nbsp;</span>	}
<span id="L566" class="ln">   566&nbsp;&nbsp;</span>	return int(t.t.Size_) * 8
<span id="L567" class="ln">   567&nbsp;&nbsp;</span>}
<span id="L568" class="ln">   568&nbsp;&nbsp;</span>
<span id="L569" class="ln">   569&nbsp;&nbsp;</span>func (t *rtype) Align() int { return t.t.Align() }
<span id="L570" class="ln">   570&nbsp;&nbsp;</span>
<span id="L571" class="ln">   571&nbsp;&nbsp;</span>func (t *rtype) FieldAlign() int { return t.t.FieldAlign() }
<span id="L572" class="ln">   572&nbsp;&nbsp;</span>
<span id="L573" class="ln">   573&nbsp;&nbsp;</span>func (t *rtype) Kind() Kind { return Kind(t.t.Kind()) }
<span id="L574" class="ln">   574&nbsp;&nbsp;</span>
<span id="L575" class="ln">   575&nbsp;&nbsp;</span>func (t *rtype) exportedMethods() []abi.Method {
<span id="L576" class="ln">   576&nbsp;&nbsp;</span>	ut := t.uncommon()
<span id="L577" class="ln">   577&nbsp;&nbsp;</span>	if ut == nil {
<span id="L578" class="ln">   578&nbsp;&nbsp;</span>		return nil
<span id="L579" class="ln">   579&nbsp;&nbsp;</span>	}
<span id="L580" class="ln">   580&nbsp;&nbsp;</span>	return ut.ExportedMethods()
<span id="L581" class="ln">   581&nbsp;&nbsp;</span>}
<span id="L582" class="ln">   582&nbsp;&nbsp;</span>
<span id="L583" class="ln">   583&nbsp;&nbsp;</span>func (t *rtype) NumMethod() int {
<span id="L584" class="ln">   584&nbsp;&nbsp;</span>	if t.Kind() == Interface {
<span id="L585" class="ln">   585&nbsp;&nbsp;</span>		tt := (*interfaceType)(unsafe.Pointer(t))
<span id="L586" class="ln">   586&nbsp;&nbsp;</span>		return tt.NumMethod()
<span id="L587" class="ln">   587&nbsp;&nbsp;</span>	}
<span id="L588" class="ln">   588&nbsp;&nbsp;</span>	return len(t.exportedMethods())
<span id="L589" class="ln">   589&nbsp;&nbsp;</span>}
<span id="L590" class="ln">   590&nbsp;&nbsp;</span>
<span id="L591" class="ln">   591&nbsp;&nbsp;</span>func (t *rtype) Method(i int) (m Method) {
<span id="L592" class="ln">   592&nbsp;&nbsp;</span>	if t.Kind() == Interface {
<span id="L593" class="ln">   593&nbsp;&nbsp;</span>		tt := (*interfaceType)(unsafe.Pointer(t))
<span id="L594" class="ln">   594&nbsp;&nbsp;</span>		return tt.Method(i)
<span id="L595" class="ln">   595&nbsp;&nbsp;</span>	}
<span id="L596" class="ln">   596&nbsp;&nbsp;</span>	methods := t.exportedMethods()
<span id="L597" class="ln">   597&nbsp;&nbsp;</span>	if i &lt; 0 || i &gt;= len(methods) {
<span id="L598" class="ln">   598&nbsp;&nbsp;</span>		panic(&#34;reflect: Method index out of range&#34;)
<span id="L599" class="ln">   599&nbsp;&nbsp;</span>	}
<span id="L600" class="ln">   600&nbsp;&nbsp;</span>	p := methods[i]
<span id="L601" class="ln">   601&nbsp;&nbsp;</span>	pname := t.nameOff(p.Name)
<span id="L602" class="ln">   602&nbsp;&nbsp;</span>	m.Name = pname.Name()
<span id="L603" class="ln">   603&nbsp;&nbsp;</span>	fl := flag(Func)
<span id="L604" class="ln">   604&nbsp;&nbsp;</span>	mtyp := t.typeOff(p.Mtyp)
<span id="L605" class="ln">   605&nbsp;&nbsp;</span>	ft := (*funcType)(unsafe.Pointer(mtyp))
<span id="L606" class="ln">   606&nbsp;&nbsp;</span>	in := make([]Type, 0, 1+ft.NumIn())
<span id="L607" class="ln">   607&nbsp;&nbsp;</span>	in = append(in, t)
<span id="L608" class="ln">   608&nbsp;&nbsp;</span>	for _, arg := range ft.InSlice() {
<span id="L609" class="ln">   609&nbsp;&nbsp;</span>		in = append(in, toRType(arg))
<span id="L610" class="ln">   610&nbsp;&nbsp;</span>	}
<span id="L611" class="ln">   611&nbsp;&nbsp;</span>	out := make([]Type, 0, ft.NumOut())
<span id="L612" class="ln">   612&nbsp;&nbsp;</span>	for _, ret := range ft.OutSlice() {
<span id="L613" class="ln">   613&nbsp;&nbsp;</span>		out = append(out, toRType(ret))
<span id="L614" class="ln">   614&nbsp;&nbsp;</span>	}
<span id="L615" class="ln">   615&nbsp;&nbsp;</span>	mt := FuncOf(in, out, ft.IsVariadic())
<span id="L616" class="ln">   616&nbsp;&nbsp;</span>	m.Type = mt
<span id="L617" class="ln">   617&nbsp;&nbsp;</span>	tfn := t.textOff(p.Tfn)
<span id="L618" class="ln">   618&nbsp;&nbsp;</span>	fn := unsafe.Pointer(&amp;tfn)
<span id="L619" class="ln">   619&nbsp;&nbsp;</span>	m.Func = Value{&amp;mt.(*rtype).t, fn, fl}
<span id="L620" class="ln">   620&nbsp;&nbsp;</span>
<span id="L621" class="ln">   621&nbsp;&nbsp;</span>	m.Index = i
<span id="L622" class="ln">   622&nbsp;&nbsp;</span>	return m
<span id="L623" class="ln">   623&nbsp;&nbsp;</span>}
<span id="L624" class="ln">   624&nbsp;&nbsp;</span>
<span id="L625" class="ln">   625&nbsp;&nbsp;</span>func (t *rtype) MethodByName(name string) (m Method, ok bool) {
<span id="L626" class="ln">   626&nbsp;&nbsp;</span>	if t.Kind() == Interface {
<span id="L627" class="ln">   627&nbsp;&nbsp;</span>		tt := (*interfaceType)(unsafe.Pointer(t))
<span id="L628" class="ln">   628&nbsp;&nbsp;</span>		return tt.MethodByName(name)
<span id="L629" class="ln">   629&nbsp;&nbsp;</span>	}
<span id="L630" class="ln">   630&nbsp;&nbsp;</span>	ut := t.uncommon()
<span id="L631" class="ln">   631&nbsp;&nbsp;</span>	if ut == nil {
<span id="L632" class="ln">   632&nbsp;&nbsp;</span>		return Method{}, false
<span id="L633" class="ln">   633&nbsp;&nbsp;</span>	}
<span id="L634" class="ln">   634&nbsp;&nbsp;</span>
<span id="L635" class="ln">   635&nbsp;&nbsp;</span>	methods := ut.ExportedMethods()
<span id="L636" class="ln">   636&nbsp;&nbsp;</span>
<span id="L637" class="ln">   637&nbsp;&nbsp;</span>	<span class="comment">// We are looking for the first index i where the string becomes &gt;= s.</span>
<span id="L638" class="ln">   638&nbsp;&nbsp;</span>	<span class="comment">// This is a copy of sort.Search, with f(h) replaced by (t.nameOff(methods[h].name).name() &gt;= name).</span>
<span id="L639" class="ln">   639&nbsp;&nbsp;</span>	i, j := 0, len(methods)
<span id="L640" class="ln">   640&nbsp;&nbsp;</span>	for i &lt; j {
<span id="L641" class="ln">   641&nbsp;&nbsp;</span>		h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L642" class="ln">   642&nbsp;&nbsp;</span>		<span class="comment">// i ≤ h &lt; j</span>
<span id="L643" class="ln">   643&nbsp;&nbsp;</span>		if !(t.nameOff(methods[h].Name).Name() &gt;= name) {
<span id="L644" class="ln">   644&nbsp;&nbsp;</span>			i = h + 1 <span class="comment">// preserves f(i-1) == false</span>
<span id="L645" class="ln">   645&nbsp;&nbsp;</span>		} else {
<span id="L646" class="ln">   646&nbsp;&nbsp;</span>			j = h <span class="comment">// preserves f(j) == true</span>
<span id="L647" class="ln">   647&nbsp;&nbsp;</span>		}
<span id="L648" class="ln">   648&nbsp;&nbsp;</span>	}
<span id="L649" class="ln">   649&nbsp;&nbsp;</span>	<span class="comment">// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =&gt;  answer is i.</span>
<span id="L650" class="ln">   650&nbsp;&nbsp;</span>	if i &lt; len(methods) &amp;&amp; name == t.nameOff(methods[i].Name).Name() {
<span id="L651" class="ln">   651&nbsp;&nbsp;</span>		return t.Method(i), true
<span id="L652" class="ln">   652&nbsp;&nbsp;</span>	}
<span id="L653" class="ln">   653&nbsp;&nbsp;</span>
<span id="L654" class="ln">   654&nbsp;&nbsp;</span>	return Method{}, false
<span id="L655" class="ln">   655&nbsp;&nbsp;</span>}
<span id="L656" class="ln">   656&nbsp;&nbsp;</span>
<span id="L657" class="ln">   657&nbsp;&nbsp;</span>func (t *rtype) PkgPath() string {
<span id="L658" class="ln">   658&nbsp;&nbsp;</span>	if t.t.TFlag&amp;abi.TFlagNamed == 0 {
<span id="L659" class="ln">   659&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L660" class="ln">   660&nbsp;&nbsp;</span>	}
<span id="L661" class="ln">   661&nbsp;&nbsp;</span>	ut := t.uncommon()
<span id="L662" class="ln">   662&nbsp;&nbsp;</span>	if ut == nil {
<span id="L663" class="ln">   663&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L664" class="ln">   664&nbsp;&nbsp;</span>	}
<span id="L665" class="ln">   665&nbsp;&nbsp;</span>	return t.nameOff(ut.PkgPath).Name()
<span id="L666" class="ln">   666&nbsp;&nbsp;</span>}
<span id="L667" class="ln">   667&nbsp;&nbsp;</span>
<span id="L668" class="ln">   668&nbsp;&nbsp;</span>func pkgPathFor(t *abi.Type) string {
<span id="L669" class="ln">   669&nbsp;&nbsp;</span>	return toRType(t).PkgPath()
<span id="L670" class="ln">   670&nbsp;&nbsp;</span>}
<span id="L671" class="ln">   671&nbsp;&nbsp;</span>
<span id="L672" class="ln">   672&nbsp;&nbsp;</span>func (t *rtype) Name() string {
<span id="L673" class="ln">   673&nbsp;&nbsp;</span>	if !t.t.HasName() {
<span id="L674" class="ln">   674&nbsp;&nbsp;</span>		return &#34;&#34;
<span id="L675" class="ln">   675&nbsp;&nbsp;</span>	}
<span id="L676" class="ln">   676&nbsp;&nbsp;</span>	s := t.String()
<span id="L677" class="ln">   677&nbsp;&nbsp;</span>	i := len(s) - 1
<span id="L678" class="ln">   678&nbsp;&nbsp;</span>	sqBrackets := 0
<span id="L679" class="ln">   679&nbsp;&nbsp;</span>	for i &gt;= 0 &amp;&amp; (s[i] != &#39;.&#39; || sqBrackets != 0) {
<span id="L680" class="ln">   680&nbsp;&nbsp;</span>		switch s[i] {
<span id="L681" class="ln">   681&nbsp;&nbsp;</span>		case &#39;]&#39;:
<span id="L682" class="ln">   682&nbsp;&nbsp;</span>			sqBrackets++
<span id="L683" class="ln">   683&nbsp;&nbsp;</span>		case &#39;[&#39;:
<span id="L684" class="ln">   684&nbsp;&nbsp;</span>			sqBrackets--
<span id="L685" class="ln">   685&nbsp;&nbsp;</span>		}
<span id="L686" class="ln">   686&nbsp;&nbsp;</span>		i--
<span id="L687" class="ln">   687&nbsp;&nbsp;</span>	}
<span id="L688" class="ln">   688&nbsp;&nbsp;</span>	return s[i+1:]
<span id="L689" class="ln">   689&nbsp;&nbsp;</span>}
<span id="L690" class="ln">   690&nbsp;&nbsp;</span>
<span id="L691" class="ln">   691&nbsp;&nbsp;</span>func nameFor(t *abi.Type) string {
<span id="L692" class="ln">   692&nbsp;&nbsp;</span>	return toRType(t).Name()
<span id="L693" class="ln">   693&nbsp;&nbsp;</span>}
<span id="L694" class="ln">   694&nbsp;&nbsp;</span>
<span id="L695" class="ln">   695&nbsp;&nbsp;</span>func (t *rtype) ChanDir() ChanDir {
<span id="L696" class="ln">   696&nbsp;&nbsp;</span>	if t.Kind() != Chan {
<span id="L697" class="ln">   697&nbsp;&nbsp;</span>		panic(&#34;reflect: ChanDir of non-chan type &#34; + t.String())
<span id="L698" class="ln">   698&nbsp;&nbsp;</span>	}
<span id="L699" class="ln">   699&nbsp;&nbsp;</span>	tt := (*abi.ChanType)(unsafe.Pointer(t))
<span id="L700" class="ln">   700&nbsp;&nbsp;</span>	return ChanDir(tt.Dir)
<span id="L701" class="ln">   701&nbsp;&nbsp;</span>}
<span id="L702" class="ln">   702&nbsp;&nbsp;</span>
<span id="L703" class="ln">   703&nbsp;&nbsp;</span>func toRType(t *abi.Type) *rtype {
<span id="L704" class="ln">   704&nbsp;&nbsp;</span>	return (*rtype)(unsafe.Pointer(t))
<span id="L705" class="ln">   705&nbsp;&nbsp;</span>}
<span id="L706" class="ln">   706&nbsp;&nbsp;</span>
<span id="L707" class="ln">   707&nbsp;&nbsp;</span>func elem(t *abi.Type) *abi.Type {
<span id="L708" class="ln">   708&nbsp;&nbsp;</span>	et := t.Elem()
<span id="L709" class="ln">   709&nbsp;&nbsp;</span>	if et != nil {
<span id="L710" class="ln">   710&nbsp;&nbsp;</span>		return et
<span id="L711" class="ln">   711&nbsp;&nbsp;</span>	}
<span id="L712" class="ln">   712&nbsp;&nbsp;</span>	panic(&#34;reflect: Elem of invalid type &#34; + stringFor(t))
<span id="L713" class="ln">   713&nbsp;&nbsp;</span>}
<span id="L714" class="ln">   714&nbsp;&nbsp;</span>
<span id="L715" class="ln">   715&nbsp;&nbsp;</span>func (t *rtype) Elem() Type {
<span id="L716" class="ln">   716&nbsp;&nbsp;</span>	return toType(elem(t.common()))
<span id="L717" class="ln">   717&nbsp;&nbsp;</span>}
<span id="L718" class="ln">   718&nbsp;&nbsp;</span>
<span id="L719" class="ln">   719&nbsp;&nbsp;</span>func (t *rtype) Field(i int) StructField {
<span id="L720" class="ln">   720&nbsp;&nbsp;</span>	if t.Kind() != Struct {
<span id="L721" class="ln">   721&nbsp;&nbsp;</span>		panic(&#34;reflect: Field of non-struct type &#34; + t.String())
<span id="L722" class="ln">   722&nbsp;&nbsp;</span>	}
<span id="L723" class="ln">   723&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(t))
<span id="L724" class="ln">   724&nbsp;&nbsp;</span>	return tt.Field(i)
<span id="L725" class="ln">   725&nbsp;&nbsp;</span>}
<span id="L726" class="ln">   726&nbsp;&nbsp;</span>
<span id="L727" class="ln">   727&nbsp;&nbsp;</span>func (t *rtype) FieldByIndex(index []int) StructField {
<span id="L728" class="ln">   728&nbsp;&nbsp;</span>	if t.Kind() != Struct {
<span id="L729" class="ln">   729&nbsp;&nbsp;</span>		panic(&#34;reflect: FieldByIndex of non-struct type &#34; + t.String())
<span id="L730" class="ln">   730&nbsp;&nbsp;</span>	}
<span id="L731" class="ln">   731&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(t))
<span id="L732" class="ln">   732&nbsp;&nbsp;</span>	return tt.FieldByIndex(index)
<span id="L733" class="ln">   733&nbsp;&nbsp;</span>}
<span id="L734" class="ln">   734&nbsp;&nbsp;</span>
<span id="L735" class="ln">   735&nbsp;&nbsp;</span>func (t *rtype) FieldByName(name string) (StructField, bool) {
<span id="L736" class="ln">   736&nbsp;&nbsp;</span>	if t.Kind() != Struct {
<span id="L737" class="ln">   737&nbsp;&nbsp;</span>		panic(&#34;reflect: FieldByName of non-struct type &#34; + t.String())
<span id="L738" class="ln">   738&nbsp;&nbsp;</span>	}
<span id="L739" class="ln">   739&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(t))
<span id="L740" class="ln">   740&nbsp;&nbsp;</span>	return tt.FieldByName(name)
<span id="L741" class="ln">   741&nbsp;&nbsp;</span>}
<span id="L742" class="ln">   742&nbsp;&nbsp;</span>
<span id="L743" class="ln">   743&nbsp;&nbsp;</span>func (t *rtype) FieldByNameFunc(match func(string) bool) (StructField, bool) {
<span id="L744" class="ln">   744&nbsp;&nbsp;</span>	if t.Kind() != Struct {
<span id="L745" class="ln">   745&nbsp;&nbsp;</span>		panic(&#34;reflect: FieldByNameFunc of non-struct type &#34; + t.String())
<span id="L746" class="ln">   746&nbsp;&nbsp;</span>	}
<span id="L747" class="ln">   747&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(t))
<span id="L748" class="ln">   748&nbsp;&nbsp;</span>	return tt.FieldByNameFunc(match)
<span id="L749" class="ln">   749&nbsp;&nbsp;</span>}
<span id="L750" class="ln">   750&nbsp;&nbsp;</span>
<span id="L751" class="ln">   751&nbsp;&nbsp;</span>func (t *rtype) Key() Type {
<span id="L752" class="ln">   752&nbsp;&nbsp;</span>	if t.Kind() != Map {
<span id="L753" class="ln">   753&nbsp;&nbsp;</span>		panic(&#34;reflect: Key of non-map type &#34; + t.String())
<span id="L754" class="ln">   754&nbsp;&nbsp;</span>	}
<span id="L755" class="ln">   755&nbsp;&nbsp;</span>	tt := (*mapType)(unsafe.Pointer(t))
<span id="L756" class="ln">   756&nbsp;&nbsp;</span>	return toType(tt.Key)
<span id="L757" class="ln">   757&nbsp;&nbsp;</span>}
<span id="L758" class="ln">   758&nbsp;&nbsp;</span>
<span id="L759" class="ln">   759&nbsp;&nbsp;</span>func (t *rtype) Len() int {
<span id="L760" class="ln">   760&nbsp;&nbsp;</span>	if t.Kind() != Array {
<span id="L761" class="ln">   761&nbsp;&nbsp;</span>		panic(&#34;reflect: Len of non-array type &#34; + t.String())
<span id="L762" class="ln">   762&nbsp;&nbsp;</span>	}
<span id="L763" class="ln">   763&nbsp;&nbsp;</span>	tt := (*arrayType)(unsafe.Pointer(t))
<span id="L764" class="ln">   764&nbsp;&nbsp;</span>	return int(tt.Len)
<span id="L765" class="ln">   765&nbsp;&nbsp;</span>}
<span id="L766" class="ln">   766&nbsp;&nbsp;</span>
<span id="L767" class="ln">   767&nbsp;&nbsp;</span>func (t *rtype) NumField() int {
<span id="L768" class="ln">   768&nbsp;&nbsp;</span>	if t.Kind() != Struct {
<span id="L769" class="ln">   769&nbsp;&nbsp;</span>		panic(&#34;reflect: NumField of non-struct type &#34; + t.String())
<span id="L770" class="ln">   770&nbsp;&nbsp;</span>	}
<span id="L771" class="ln">   771&nbsp;&nbsp;</span>	tt := (*structType)(unsafe.Pointer(t))
<span id="L772" class="ln">   772&nbsp;&nbsp;</span>	return len(tt.Fields)
<span id="L773" class="ln">   773&nbsp;&nbsp;</span>}
<span id="L774" class="ln">   774&nbsp;&nbsp;</span>
<span id="L775" class="ln">   775&nbsp;&nbsp;</span>func (t *rtype) In(i int) Type {
<span id="L776" class="ln">   776&nbsp;&nbsp;</span>	if t.Kind() != Func {
<span id="L777" class="ln">   777&nbsp;&nbsp;</span>		panic(&#34;reflect: In of non-func type &#34; + t.String())
<span id="L778" class="ln">   778&nbsp;&nbsp;</span>	}
<span id="L779" class="ln">   779&nbsp;&nbsp;</span>	tt := (*abi.FuncType)(unsafe.Pointer(t))
<span id="L780" class="ln">   780&nbsp;&nbsp;</span>	return toType(tt.InSlice()[i])
<span id="L781" class="ln">   781&nbsp;&nbsp;</span>}
<span id="L782" class="ln">   782&nbsp;&nbsp;</span>
<span id="L783" class="ln">   783&nbsp;&nbsp;</span>func (t *rtype) NumIn() int {
<span id="L784" class="ln">   784&nbsp;&nbsp;</span>	if t.Kind() != Func {
<span id="L785" class="ln">   785&nbsp;&nbsp;</span>		panic(&#34;reflect: NumIn of non-func type &#34; + t.String())
<span id="L786" class="ln">   786&nbsp;&nbsp;</span>	}
<span id="L787" class="ln">   787&nbsp;&nbsp;</span>	tt := (*abi.FuncType)(unsafe.Pointer(t))
<span id="L788" class="ln">   788&nbsp;&nbsp;</span>	return tt.NumIn()
<span id="L789" class="ln">   789&nbsp;&nbsp;</span>}
<span id="L790" class="ln">   790&nbsp;&nbsp;</span>
<span id="L791" class="ln">   791&nbsp;&nbsp;</span>func (t *rtype) NumOut() int {
<span id="L792" class="ln">   792&nbsp;&nbsp;</span>	if t.Kind() != Func {
<span id="L793" class="ln">   793&nbsp;&nbsp;</span>		panic(&#34;reflect: NumOut of non-func type &#34; + t.String())
<span id="L794" class="ln">   794&nbsp;&nbsp;</span>	}
<span id="L795" class="ln">   795&nbsp;&nbsp;</span>	tt := (*abi.FuncType)(unsafe.Pointer(t))
<span id="L796" class="ln">   796&nbsp;&nbsp;</span>	return tt.NumOut()
<span id="L797" class="ln">   797&nbsp;&nbsp;</span>}
<span id="L798" class="ln">   798&nbsp;&nbsp;</span>
<span id="L799" class="ln">   799&nbsp;&nbsp;</span>func (t *rtype) Out(i int) Type {
<span id="L800" class="ln">   800&nbsp;&nbsp;</span>	if t.Kind() != Func {
<span id="L801" class="ln">   801&nbsp;&nbsp;</span>		panic(&#34;reflect: Out of non-func type &#34; + t.String())
<span id="L802" class="ln">   802&nbsp;&nbsp;</span>	}
<span id="L803" class="ln">   803&nbsp;&nbsp;</span>	tt := (*abi.FuncType)(unsafe.Pointer(t))
<span id="L804" class="ln">   804&nbsp;&nbsp;</span>	return toType(tt.OutSlice()[i])
<span id="L805" class="ln">   805&nbsp;&nbsp;</span>}
<span id="L806" class="ln">   806&nbsp;&nbsp;</span>
<span id="L807" class="ln">   807&nbsp;&nbsp;</span>func (t *rtype) IsVariadic() bool {
<span id="L808" class="ln">   808&nbsp;&nbsp;</span>	if t.Kind() != Func {
<span id="L809" class="ln">   809&nbsp;&nbsp;</span>		panic(&#34;reflect: IsVariadic of non-func type &#34; + t.String())
<span id="L810" class="ln">   810&nbsp;&nbsp;</span>	}
<span id="L811" class="ln">   811&nbsp;&nbsp;</span>	tt := (*abi.FuncType)(unsafe.Pointer(t))
<span id="L812" class="ln">   812&nbsp;&nbsp;</span>	return tt.IsVariadic()
<span id="L813" class="ln">   813&nbsp;&nbsp;</span>}
<span id="L814" class="ln">   814&nbsp;&nbsp;</span>
<span id="L815" class="ln">   815&nbsp;&nbsp;</span><span class="comment">// add returns p+x.</span>
<span id="L816" class="ln">   816&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L817" class="ln">   817&nbsp;&nbsp;</span><span class="comment">// The whySafe string is ignored, so that the function still inlines</span>
<span id="L818" class="ln">   818&nbsp;&nbsp;</span><span class="comment">// as efficiently as p+x, but all call sites should use the string to</span>
<span id="L819" class="ln">   819&nbsp;&nbsp;</span><span class="comment">// record why the addition is safe, which is to say why the addition</span>
<span id="L820" class="ln">   820&nbsp;&nbsp;</span><span class="comment">// does not cause x to advance to the very end of p&#39;s allocation</span>
<span id="L821" class="ln">   821&nbsp;&nbsp;</span><span class="comment">// and therefore point incorrectly at the next block in memory.</span>
<span id="L822" class="ln">   822&nbsp;&nbsp;</span>func add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer {
<span id="L823" class="ln">   823&nbsp;&nbsp;</span>	return unsafe.Pointer(uintptr(p) + x)
<span id="L824" class="ln">   824&nbsp;&nbsp;</span>}
<span id="L825" class="ln">   825&nbsp;&nbsp;</span>
<span id="L826" class="ln">   826&nbsp;&nbsp;</span>func (d ChanDir) String() string {
<span id="L827" class="ln">   827&nbsp;&nbsp;</span>	switch d {
<span id="L828" class="ln">   828&nbsp;&nbsp;</span>	case SendDir:
<span id="L829" class="ln">   829&nbsp;&nbsp;</span>		return &#34;chan&lt;-&#34;
<span id="L830" class="ln">   830&nbsp;&nbsp;</span>	case RecvDir:
<span id="L831" class="ln">   831&nbsp;&nbsp;</span>		return &#34;&lt;-chan&#34;
<span id="L832" class="ln">   832&nbsp;&nbsp;</span>	case BothDir:
<span id="L833" class="ln">   833&nbsp;&nbsp;</span>		return &#34;chan&#34;
<span id="L834" class="ln">   834&nbsp;&nbsp;</span>	}
<span id="L835" class="ln">   835&nbsp;&nbsp;</span>	return &#34;ChanDir&#34; + strconv.Itoa(int(d))
<span id="L836" class="ln">   836&nbsp;&nbsp;</span>}
<span id="L837" class="ln">   837&nbsp;&nbsp;</span>
<span id="L838" class="ln">   838&nbsp;&nbsp;</span><span class="comment">// Method returns the i&#39;th method in the type&#39;s method set.</span>
<span id="L839" class="ln">   839&nbsp;&nbsp;</span>func (t *interfaceType) Method(i int) (m Method) {
<span id="L840" class="ln">   840&nbsp;&nbsp;</span>	if i &lt; 0 || i &gt;= len(t.Methods) {
<span id="L841" class="ln">   841&nbsp;&nbsp;</span>		return
<span id="L842" class="ln">   842&nbsp;&nbsp;</span>	}
<span id="L843" class="ln">   843&nbsp;&nbsp;</span>	p := &amp;t.Methods[i]
<span id="L844" class="ln">   844&nbsp;&nbsp;</span>	pname := t.nameOff(p.Name)
<span id="L845" class="ln">   845&nbsp;&nbsp;</span>	m.Name = pname.Name()
<span id="L846" class="ln">   846&nbsp;&nbsp;</span>	if !pname.IsExported() {
<span id="L847" class="ln">   847&nbsp;&nbsp;</span>		m.PkgPath = pkgPath(pname)
<span id="L848" class="ln">   848&nbsp;&nbsp;</span>		if m.PkgPath == &#34;&#34; {
<span id="L849" class="ln">   849&nbsp;&nbsp;</span>			m.PkgPath = t.PkgPath.Name()
<span id="L850" class="ln">   850&nbsp;&nbsp;</span>		}
<span id="L851" class="ln">   851&nbsp;&nbsp;</span>	}
<span id="L852" class="ln">   852&nbsp;&nbsp;</span>	m.Type = toType(t.typeOff(p.Typ))
<span id="L853" class="ln">   853&nbsp;&nbsp;</span>	m.Index = i
<span id="L854" class="ln">   854&nbsp;&nbsp;</span>	return
<span id="L855" class="ln">   855&nbsp;&nbsp;</span>}
<span id="L856" class="ln">   856&nbsp;&nbsp;</span>
<span id="L857" class="ln">   857&nbsp;&nbsp;</span><span class="comment">// NumMethod returns the number of interface methods in the type&#39;s method set.</span>
<span id="L858" class="ln">   858&nbsp;&nbsp;</span>func (t *interfaceType) NumMethod() int { return len(t.Methods) }
<span id="L859" class="ln">   859&nbsp;&nbsp;</span>
<span id="L860" class="ln">   860&nbsp;&nbsp;</span><span class="comment">// MethodByName method with the given name in the type&#39;s method set.</span>
<span id="L861" class="ln">   861&nbsp;&nbsp;</span>func (t *interfaceType) MethodByName(name string) (m Method, ok bool) {
<span id="L862" class="ln">   862&nbsp;&nbsp;</span>	if t == nil {
<span id="L863" class="ln">   863&nbsp;&nbsp;</span>		return
<span id="L864" class="ln">   864&nbsp;&nbsp;</span>	}
<span id="L865" class="ln">   865&nbsp;&nbsp;</span>	var p *abi.Imethod
<span id="L866" class="ln">   866&nbsp;&nbsp;</span>	for i := range t.Methods {
<span id="L867" class="ln">   867&nbsp;&nbsp;</span>		p = &amp;t.Methods[i]
<span id="L868" class="ln">   868&nbsp;&nbsp;</span>		if t.nameOff(p.Name).Name() == name {
<span id="L869" class="ln">   869&nbsp;&nbsp;</span>			return t.Method(i), true
<span id="L870" class="ln">   870&nbsp;&nbsp;</span>		}
<span id="L871" class="ln">   871&nbsp;&nbsp;</span>	}
<span id="L872" class="ln">   872&nbsp;&nbsp;</span>	return
<span id="L873" class="ln">   873&nbsp;&nbsp;</span>}
<span id="L874" class="ln">   874&nbsp;&nbsp;</span>
<span id="L875" class="ln">   875&nbsp;&nbsp;</span><span class="comment">// A StructField describes a single field in a struct.</span>
<span id="L876" class="ln">   876&nbsp;&nbsp;</span>type StructField struct {
<span id="L877" class="ln">   877&nbsp;&nbsp;</span>	<span class="comment">// Name is the field name.</span>
<span id="L878" class="ln">   878&nbsp;&nbsp;</span>	Name string
<span id="L879" class="ln">   879&nbsp;&nbsp;</span>
<span id="L880" class="ln">   880&nbsp;&nbsp;</span>	<span class="comment">// PkgPath is the package path that qualifies a lower case (unexported)</span>
<span id="L881" class="ln">   881&nbsp;&nbsp;</span>	<span class="comment">// field name. It is empty for upper case (exported) field names.</span>
<span id="L882" class="ln">   882&nbsp;&nbsp;</span>	<span class="comment">// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span>
<span id="L883" class="ln">   883&nbsp;&nbsp;</span>	PkgPath string
<span id="L884" class="ln">   884&nbsp;&nbsp;</span>
<span id="L885" class="ln">   885&nbsp;&nbsp;</span>	Type      Type      <span class="comment">// field type</span>
<span id="L886" class="ln">   886&nbsp;&nbsp;</span>	Tag       StructTag <span class="comment">// field tag string</span>
<span id="L887" class="ln">   887&nbsp;&nbsp;</span>	Offset    uintptr   <span class="comment">// offset within struct, in bytes</span>
<span id="L888" class="ln">   888&nbsp;&nbsp;</span>	Index     []int     <span class="comment">// index sequence for Type.FieldByIndex</span>
<span id="L889" class="ln">   889&nbsp;&nbsp;</span>	Anonymous bool      <span class="comment">// is an embedded field</span>
<span id="L890" class="ln">   890&nbsp;&nbsp;</span>}
<span id="L891" class="ln">   891&nbsp;&nbsp;</span>
<span id="L892" class="ln">   892&nbsp;&nbsp;</span><span class="comment">// IsExported reports whether the field is exported.</span>
<span id="L893" class="ln">   893&nbsp;&nbsp;</span>func (f StructField) IsExported() bool {
<span id="L894" class="ln">   894&nbsp;&nbsp;</span>	return f.PkgPath == &#34;&#34;
<span id="L895" class="ln">   895&nbsp;&nbsp;</span>}
<span id="L896" class="ln">   896&nbsp;&nbsp;</span>
<span id="L897" class="ln">   897&nbsp;&nbsp;</span><span class="comment">// A StructTag is the tag string in a struct field.</span>
<span id="L898" class="ln">   898&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L899" class="ln">   899&nbsp;&nbsp;</span><span class="comment">// By convention, tag strings are a concatenation of</span>
<span id="L900" class="ln">   900&nbsp;&nbsp;</span><span class="comment">// optionally space-separated key:&#34;value&#34; pairs.</span>
<span id="L901" class="ln">   901&nbsp;&nbsp;</span><span class="comment">// Each key is a non-empty string consisting of non-control</span>
<span id="L902" class="ln">   902&nbsp;&nbsp;</span><span class="comment">// characters other than space (U+0020 &#39; &#39;), quote (U+0022 &#39;&#34;&#39;),</span>
<span id="L903" class="ln">   903&nbsp;&nbsp;</span><span class="comment">// and colon (U+003A &#39;:&#39;).  Each value is quoted using U+0022 &#39;&#34;&#39;</span>
<span id="L904" class="ln">   904&nbsp;&nbsp;</span><span class="comment">// characters and Go string literal syntax.</span>
<span id="L905" class="ln">   905&nbsp;&nbsp;</span><span class="selection">type StructTag string</span>
<span id="L906" class="ln">   906&nbsp;&nbsp;</span>
<span id="L907" class="ln">   907&nbsp;&nbsp;</span><span class="comment">// Get returns the value associated with key in the tag string.</span>
<span id="L908" class="ln">   908&nbsp;&nbsp;</span><span class="comment">// If there is no such key in the tag, Get returns the empty string.</span>
<span id="L909" class="ln">   909&nbsp;&nbsp;</span><span class="comment">// If the tag does not have the conventional format, the value</span>
<span id="L910" class="ln">   910&nbsp;&nbsp;</span><span class="comment">// returned by Get is unspecified. To determine whether a tag is</span>
<span id="L911" class="ln">   911&nbsp;&nbsp;</span><span class="comment">// explicitly set to the empty string, use Lookup.</span>
<span id="L912" class="ln">   912&nbsp;&nbsp;</span>func (tag StructTag) Get(key string) string {
<span id="L913" class="ln">   913&nbsp;&nbsp;</span>	v, _ := tag.Lookup(key)
<span id="L914" class="ln">   914&nbsp;&nbsp;</span>	return v
<span id="L915" class="ln">   915&nbsp;&nbsp;</span>}
<span id="L916" class="ln">   916&nbsp;&nbsp;</span>
<span id="L917" class="ln">   917&nbsp;&nbsp;</span><span class="comment">// Lookup returns the value associated with key in the tag string.</span>
<span id="L918" class="ln">   918&nbsp;&nbsp;</span><span class="comment">// If the key is present in the tag the value (which may be empty)</span>
<span id="L919" class="ln">   919&nbsp;&nbsp;</span><span class="comment">// is returned. Otherwise the returned value will be the empty string.</span>
<span id="L920" class="ln">   920&nbsp;&nbsp;</span><span class="comment">// The ok return value reports whether the value was explicitly set in</span>
<span id="L921" class="ln">   921&nbsp;&nbsp;</span><span class="comment">// the tag string. If the tag does not have the conventional format,</span>
<span id="L922" class="ln">   922&nbsp;&nbsp;</span><span class="comment">// the value returned by Lookup is unspecified.</span>
<span id="L923" class="ln">   923&nbsp;&nbsp;</span>func (tag StructTag) Lookup(key string) (value string, ok bool) {
<span id="L924" class="ln">   924&nbsp;&nbsp;</span>	<span class="comment">// When modifying this code, also update the validateStructTag code</span>
<span id="L925" class="ln">   925&nbsp;&nbsp;</span>	<span class="comment">// in cmd/vet/structtag.go.</span>
<span id="L926" class="ln">   926&nbsp;&nbsp;</span>
<span id="L927" class="ln">   927&nbsp;&nbsp;</span>	for tag != &#34;&#34; {
<span id="L928" class="ln">   928&nbsp;&nbsp;</span>		<span class="comment">// Skip leading space.</span>
<span id="L929" class="ln">   929&nbsp;&nbsp;</span>		i := 0
<span id="L930" class="ln">   930&nbsp;&nbsp;</span>		for i &lt; len(tag) &amp;&amp; tag[i] == &#39; &#39; {
<span id="L931" class="ln">   931&nbsp;&nbsp;</span>			i++
<span id="L932" class="ln">   932&nbsp;&nbsp;</span>		}
<span id="L933" class="ln">   933&nbsp;&nbsp;</span>		tag = tag[i:]
<span id="L934" class="ln">   934&nbsp;&nbsp;</span>		if tag == &#34;&#34; {
<span id="L935" class="ln">   935&nbsp;&nbsp;</span>			break
<span id="L936" class="ln">   936&nbsp;&nbsp;</span>		}
<span id="L937" class="ln">   937&nbsp;&nbsp;</span>
<span id="L938" class="ln">   938&nbsp;&nbsp;</span>		<span class="comment">// Scan to colon. A space, a quote or a control character is a syntax error.</span>
<span id="L939" class="ln">   939&nbsp;&nbsp;</span>		<span class="comment">// Strictly speaking, control chars include the range [0x7f, 0x9f], not just</span>
<span id="L940" class="ln">   940&nbsp;&nbsp;</span>		<span class="comment">// [0x00, 0x1f], but in practice, we ignore the multi-byte control characters</span>
<span id="L941" class="ln">   941&nbsp;&nbsp;</span>		<span class="comment">// as it is simpler to inspect the tag&#39;s bytes than the tag&#39;s runes.</span>
<span id="L942" class="ln">   942&nbsp;&nbsp;</span>		i = 0
<span id="L943" class="ln">   943&nbsp;&nbsp;</span>		for i &lt; len(tag) &amp;&amp; tag[i] &gt; &#39; &#39; &amp;&amp; tag[i] != &#39;:&#39; &amp;&amp; tag[i] != &#39;&#34;&#39; &amp;&amp; tag[i] != 0x7f {
<span id="L944" class="ln">   944&nbsp;&nbsp;</span>			i++
<span id="L945" class="ln">   945&nbsp;&nbsp;</span>		}
<span id="L946" class="ln">   946&nbsp;&nbsp;</span>		if i == 0 || i+1 &gt;= len(tag) || tag[i] != &#39;:&#39; || tag[i+1] != &#39;&#34;&#39; {
<span id="L947" class="ln">   947&nbsp;&nbsp;</span>			break
<span id="L948" class="ln">   948&nbsp;&nbsp;</span>		}
<span id="L949" class="ln">   949&nbsp;&nbsp;</span>		name := string(tag[:i])
<span id="L950" class="ln">   950&nbsp;&nbsp;</span>		tag = tag[i+1:]
<span id="L951" class="ln">   951&nbsp;&nbsp;</span>
<span id="L952" class="ln">   952&nbsp;&nbsp;</span>		<span class="comment">// Scan quoted string to find value.</span>
<span id="L953" class="ln">   953&nbsp;&nbsp;</span>		i = 1
<span id="L954" class="ln">   954&nbsp;&nbsp;</span>		for i &lt; len(tag) &amp;&amp; tag[i] != &#39;&#34;&#39; {
<span id="L955" class="ln">   955&nbsp;&nbsp;</span>			if tag[i] == &#39;\\&#39; {
<span id="L956" class="ln">   956&nbsp;&nbsp;</span>				i++
<span id="L957" class="ln">   957&nbsp;&nbsp;</span>			}
<span id="L958" class="ln">   958&nbsp;&nbsp;</span>			i++
<span id="L959" class="ln">   959&nbsp;&nbsp;</span>		}
<span id="L960" class="ln">   960&nbsp;&nbsp;</span>		if i &gt;= len(tag) {
<span id="L961" class="ln">   961&nbsp;&nbsp;</span>			break
<span id="L962" class="ln">   962&nbsp;&nbsp;</span>		}
<span id="L963" class="ln">   963&nbsp;&nbsp;</span>		qvalue := string(tag[:i+1])
<span id="L964" class="ln">   964&nbsp;&nbsp;</span>		tag = tag[i+1:]
<span id="L965" class="ln">   965&nbsp;&nbsp;</span>
<span id="L966" class="ln">   966&nbsp;&nbsp;</span>		if key == name {
<span id="L967" class="ln">   967&nbsp;&nbsp;</span>			value, err := strconv.Unquote(qvalue)
<span id="L968" class="ln">   968&nbsp;&nbsp;</span>			if err != nil {
<span id="L969" class="ln">   969&nbsp;&nbsp;</span>				break
<span id="L970" class="ln">   970&nbsp;&nbsp;</span>			}
<span id="L971" class="ln">   971&nbsp;&nbsp;</span>			return value, true
<span id="L972" class="ln">   972&nbsp;&nbsp;</span>		}
<span id="L973" class="ln">   973&nbsp;&nbsp;</span>	}
<span id="L974" class="ln">   974&nbsp;&nbsp;</span>	return &#34;&#34;, false
<span id="L975" class="ln">   975&nbsp;&nbsp;</span>}
<span id="L976" class="ln">   976&nbsp;&nbsp;</span>
<span id="L977" class="ln">   977&nbsp;&nbsp;</span><span class="comment">// Field returns the i&#39;th struct field.</span>
<span id="L978" class="ln">   978&nbsp;&nbsp;</span>func (t *structType) Field(i int) (f StructField) {
<span id="L979" class="ln">   979&nbsp;&nbsp;</span>	if i &lt; 0 || i &gt;= len(t.Fields) {
<span id="L980" class="ln">   980&nbsp;&nbsp;</span>		panic(&#34;reflect: Field index out of bounds&#34;)
<span id="L981" class="ln">   981&nbsp;&nbsp;</span>	}
<span id="L982" class="ln">   982&nbsp;&nbsp;</span>	p := &amp;t.Fields[i]
<span id="L983" class="ln">   983&nbsp;&nbsp;</span>	f.Type = toType(p.Typ)
<span id="L984" class="ln">   984&nbsp;&nbsp;</span>	f.Name = p.Name.Name()
<span id="L985" class="ln">   985&nbsp;&nbsp;</span>	f.Anonymous = p.Embedded()
<span id="L986" class="ln">   986&nbsp;&nbsp;</span>	if !p.Name.IsExported() {
<span id="L987" class="ln">   987&nbsp;&nbsp;</span>		f.PkgPath = t.PkgPath.Name()
<span id="L988" class="ln">   988&nbsp;&nbsp;</span>	}
<span id="L989" class="ln">   989&nbsp;&nbsp;</span>	if tag := p.Name.Tag(); tag != &#34;&#34; {
<span id="L990" class="ln">   990&nbsp;&nbsp;</span>		f.Tag = StructTag(tag)
<span id="L991" class="ln">   991&nbsp;&nbsp;</span>	}
<span id="L992" class="ln">   992&nbsp;&nbsp;</span>	f.Offset = p.Offset
<span id="L993" class="ln">   993&nbsp;&nbsp;</span>
<span id="L994" class="ln">   994&nbsp;&nbsp;</span>	<span class="comment">// NOTE(rsc): This is the only allocation in the interface</span>
<span id="L995" class="ln">   995&nbsp;&nbsp;</span>	<span class="comment">// presented by a reflect.Type. It would be nice to avoid,</span>
<span id="L996" class="ln">   996&nbsp;&nbsp;</span>	<span class="comment">// at least in the common cases, but we need to make sure</span>
<span id="L997" class="ln">   997&nbsp;&nbsp;</span>	<span class="comment">// that misbehaving clients of reflect cannot affect other</span>
<span id="L998" class="ln">   998&nbsp;&nbsp;</span>	<span class="comment">// uses of reflect. One possibility is CL 5371098, but we</span>
<span id="L999" class="ln">   999&nbsp;&nbsp;</span>	<span class="comment">// postponed that ugliness until there is a demonstrated</span>
<span id="L1000" class="ln">  1000&nbsp;&nbsp;</span>	<span class="comment">// need for the performance. This is issue 2320.</span>
<span id="L1001" class="ln">  1001&nbsp;&nbsp;</span>	f.Index = []int{i}
<span id="L1002" class="ln">  1002&nbsp;&nbsp;</span>	return
<span id="L1003" class="ln">  1003&nbsp;&nbsp;</span>}
<span id="L1004" class="ln">  1004&nbsp;&nbsp;</span>
<span id="L1005" class="ln">  1005&nbsp;&nbsp;</span><span class="comment">// TODO(gri): Should there be an error/bool indicator if the index</span>
<span id="L1006" class="ln">  1006&nbsp;&nbsp;</span><span class="comment">// is wrong for FieldByIndex?</span>
<span id="L1007" class="ln">  1007&nbsp;&nbsp;</span>
<span id="L1008" class="ln">  1008&nbsp;&nbsp;</span><span class="comment">// FieldByIndex returns the nested field corresponding to index.</span>
<span id="L1009" class="ln">  1009&nbsp;&nbsp;</span>func (t *structType) FieldByIndex(index []int) (f StructField) {
<span id="L1010" class="ln">  1010&nbsp;&nbsp;</span>	f.Type = toType(&amp;t.Type)
<span id="L1011" class="ln">  1011&nbsp;&nbsp;</span>	for i, x := range index {
<span id="L1012" class="ln">  1012&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L1013" class="ln">  1013&nbsp;&nbsp;</span>			ft := f.Type
<span id="L1014" class="ln">  1014&nbsp;&nbsp;</span>			if ft.Kind() == Pointer &amp;&amp; ft.Elem().Kind() == Struct {
<span id="L1015" class="ln">  1015&nbsp;&nbsp;</span>				ft = ft.Elem()
<span id="L1016" class="ln">  1016&nbsp;&nbsp;</span>			}
<span id="L1017" class="ln">  1017&nbsp;&nbsp;</span>			f.Type = ft
<span id="L1018" class="ln">  1018&nbsp;&nbsp;</span>		}
<span id="L1019" class="ln">  1019&nbsp;&nbsp;</span>		f = f.Type.Field(x)
<span id="L1020" class="ln">  1020&nbsp;&nbsp;</span>	}
<span id="L1021" class="ln">  1021&nbsp;&nbsp;</span>	return
<span id="L1022" class="ln">  1022&nbsp;&nbsp;</span>}
<span id="L1023" class="ln">  1023&nbsp;&nbsp;</span>
<span id="L1024" class="ln">  1024&nbsp;&nbsp;</span><span class="comment">// A fieldScan represents an item on the fieldByNameFunc scan work list.</span>
<span id="L1025" class="ln">  1025&nbsp;&nbsp;</span>type fieldScan struct {
<span id="L1026" class="ln">  1026&nbsp;&nbsp;</span>	typ   *structType
<span id="L1027" class="ln">  1027&nbsp;&nbsp;</span>	index []int
<span id="L1028" class="ln">  1028&nbsp;&nbsp;</span>}
<span id="L1029" class="ln">  1029&nbsp;&nbsp;</span>
<span id="L1030" class="ln">  1030&nbsp;&nbsp;</span><span class="comment">// FieldByNameFunc returns the struct field with a name that satisfies the</span>
<span id="L1031" class="ln">  1031&nbsp;&nbsp;</span><span class="comment">// match function and a boolean to indicate if the field was found.</span>
<span id="L1032" class="ln">  1032&nbsp;&nbsp;</span>func (t *structType) FieldByNameFunc(match func(string) bool) (result StructField, ok bool) {
<span id="L1033" class="ln">  1033&nbsp;&nbsp;</span>	<span class="comment">// This uses the same condition that the Go language does: there must be a unique instance</span>
<span id="L1034" class="ln">  1034&nbsp;&nbsp;</span>	<span class="comment">// of the match at a given depth level. If there are multiple instances of a match at the</span>
<span id="L1035" class="ln">  1035&nbsp;&nbsp;</span>	<span class="comment">// same depth, they annihilate each other and inhibit any possible match at a lower level.</span>
<span id="L1036" class="ln">  1036&nbsp;&nbsp;</span>	<span class="comment">// The algorithm is breadth first search, one depth level at a time.</span>
<span id="L1037" class="ln">  1037&nbsp;&nbsp;</span>
<span id="L1038" class="ln">  1038&nbsp;&nbsp;</span>	<span class="comment">// The current and next slices are work queues:</span>
<span id="L1039" class="ln">  1039&nbsp;&nbsp;</span>	<span class="comment">// current lists the fields to visit on this depth level,</span>
<span id="L1040" class="ln">  1040&nbsp;&nbsp;</span>	<span class="comment">// and next lists the fields on the next lower level.</span>
<span id="L1041" class="ln">  1041&nbsp;&nbsp;</span>	current := []fieldScan{}
<span id="L1042" class="ln">  1042&nbsp;&nbsp;</span>	next := []fieldScan{{typ: t}}
<span id="L1043" class="ln">  1043&nbsp;&nbsp;</span>
<span id="L1044" class="ln">  1044&nbsp;&nbsp;</span>	<span class="comment">// nextCount records the number of times an embedded type has been</span>
<span id="L1045" class="ln">  1045&nbsp;&nbsp;</span>	<span class="comment">// encountered and considered for queueing in the &#39;next&#39; slice.</span>
<span id="L1046" class="ln">  1046&nbsp;&nbsp;</span>	<span class="comment">// We only queue the first one, but we increment the count on each.</span>
<span id="L1047" class="ln">  1047&nbsp;&nbsp;</span>	<span class="comment">// If a struct type T can be reached more than once at a given depth level,</span>
<span id="L1048" class="ln">  1048&nbsp;&nbsp;</span>	<span class="comment">// then it annihilates itself and need not be considered at all when we</span>
<span id="L1049" class="ln">  1049&nbsp;&nbsp;</span>	<span class="comment">// process that next depth level.</span>
<span id="L1050" class="ln">  1050&nbsp;&nbsp;</span>	var nextCount map[*structType]int
<span id="L1051" class="ln">  1051&nbsp;&nbsp;</span>
<span id="L1052" class="ln">  1052&nbsp;&nbsp;</span>	<span class="comment">// visited records the structs that have been considered already.</span>
<span id="L1053" class="ln">  1053&nbsp;&nbsp;</span>	<span class="comment">// Embedded pointer fields can create cycles in the graph of</span>
<span id="L1054" class="ln">  1054&nbsp;&nbsp;</span>	<span class="comment">// reachable embedded types; visited avoids following those cycles.</span>
<span id="L1055" class="ln">  1055&nbsp;&nbsp;</span>	<span class="comment">// It also avoids duplicated effort: if we didn&#39;t find the field in an</span>
<span id="L1056" class="ln">  1056&nbsp;&nbsp;</span>	<span class="comment">// embedded type T at level 2, we won&#39;t find it in one at level 4 either.</span>
<span id="L1057" class="ln">  1057&nbsp;&nbsp;</span>	visited := map[*structType]bool{}
<span id="L1058" class="ln">  1058&nbsp;&nbsp;</span>
<span id="L1059" class="ln">  1059&nbsp;&nbsp;</span>	for len(next) &gt; 0 {
<span id="L1060" class="ln">  1060&nbsp;&nbsp;</span>		current, next = next, current[:0]
<span id="L1061" class="ln">  1061&nbsp;&nbsp;</span>		count := nextCount
<span id="L1062" class="ln">  1062&nbsp;&nbsp;</span>		nextCount = nil
<span id="L1063" class="ln">  1063&nbsp;&nbsp;</span>
<span id="L1064" class="ln">  1064&nbsp;&nbsp;</span>		<span class="comment">// Process all the fields at this depth, now listed in &#39;current&#39;.</span>
<span id="L1065" class="ln">  1065&nbsp;&nbsp;</span>		<span class="comment">// The loop queues embedded fields found in &#39;next&#39;, for processing during the next</span>
<span id="L1066" class="ln">  1066&nbsp;&nbsp;</span>		<span class="comment">// iteration. The multiplicity of the &#39;current&#39; field counts is recorded</span>
<span id="L1067" class="ln">  1067&nbsp;&nbsp;</span>		<span class="comment">// in &#39;count&#39;; the multiplicity of the &#39;next&#39; field counts is recorded in &#39;nextCount&#39;.</span>
<span id="L1068" class="ln">  1068&nbsp;&nbsp;</span>		for _, scan := range current {
<span id="L1069" class="ln">  1069&nbsp;&nbsp;</span>			t := scan.typ
<span id="L1070" class="ln">  1070&nbsp;&nbsp;</span>			if visited[t] {
<span id="L1071" class="ln">  1071&nbsp;&nbsp;</span>				<span class="comment">// We&#39;ve looked through this type before, at a higher level.</span>
<span id="L1072" class="ln">  1072&nbsp;&nbsp;</span>				<span class="comment">// That higher level would shadow the lower level we&#39;re now at,</span>
<span id="L1073" class="ln">  1073&nbsp;&nbsp;</span>				<span class="comment">// so this one can&#39;t be useful to us. Ignore it.</span>
<span id="L1074" class="ln">  1074&nbsp;&nbsp;</span>				continue
<span id="L1075" class="ln">  1075&nbsp;&nbsp;</span>			}
<span id="L1076" class="ln">  1076&nbsp;&nbsp;</span>			visited[t] = true
<span id="L1077" class="ln">  1077&nbsp;&nbsp;</span>			for i := range t.Fields {
<span id="L1078" class="ln">  1078&nbsp;&nbsp;</span>				f := &amp;t.Fields[i]
<span id="L1079" class="ln">  1079&nbsp;&nbsp;</span>				<span class="comment">// Find name and (for embedded field) type for field f.</span>
<span id="L1080" class="ln">  1080&nbsp;&nbsp;</span>				fname := f.Name.Name()
<span id="L1081" class="ln">  1081&nbsp;&nbsp;</span>				var ntyp *abi.Type
<span id="L1082" class="ln">  1082&nbsp;&nbsp;</span>				if f.Embedded() {
<span id="L1083" class="ln">  1083&nbsp;&nbsp;</span>					<span class="comment">// Embedded field of type T or *T.</span>
<span id="L1084" class="ln">  1084&nbsp;&nbsp;</span>					ntyp = f.Typ
<span id="L1085" class="ln">  1085&nbsp;&nbsp;</span>					if ntyp.Kind() == abi.Pointer {
<span id="L1086" class="ln">  1086&nbsp;&nbsp;</span>						ntyp = ntyp.Elem()
<span id="L1087" class="ln">  1087&nbsp;&nbsp;</span>					}
<span id="L1088" class="ln">  1088&nbsp;&nbsp;</span>				}
<span id="L1089" class="ln">  1089&nbsp;&nbsp;</span>
<span id="L1090" class="ln">  1090&nbsp;&nbsp;</span>				<span class="comment">// Does it match?</span>
<span id="L1091" class="ln">  1091&nbsp;&nbsp;</span>				if match(fname) {
<span id="L1092" class="ln">  1092&nbsp;&nbsp;</span>					<span class="comment">// Potential match</span>
<span id="L1093" class="ln">  1093&nbsp;&nbsp;</span>					if count[t] &gt; 1 || ok {
<span id="L1094" class="ln">  1094&nbsp;&nbsp;</span>						<span class="comment">// Name appeared multiple times at this level: annihilate.</span>
<span id="L1095" class="ln">  1095&nbsp;&nbsp;</span>						return StructField{}, false
<span id="L1096" class="ln">  1096&nbsp;&nbsp;</span>					}
<span id="L1097" class="ln">  1097&nbsp;&nbsp;</span>					result = t.Field(i)
<span id="L1098" class="ln">  1098&nbsp;&nbsp;</span>					result.Index = nil
<span id="L1099" class="ln">  1099&nbsp;&nbsp;</span>					result.Index = append(result.Index, scan.index...)
<span id="L1100" class="ln">  1100&nbsp;&nbsp;</span>					result.Index = append(result.Index, i)
<span id="L1101" class="ln">  1101&nbsp;&nbsp;</span>					ok = true
<span id="L1102" class="ln">  1102&nbsp;&nbsp;</span>					continue
<span id="L1103" class="ln">  1103&nbsp;&nbsp;</span>				}
<span id="L1104" class="ln">  1104&nbsp;&nbsp;</span>
<span id="L1105" class="ln">  1105&nbsp;&nbsp;</span>				<span class="comment">// Queue embedded struct fields for processing with next level,</span>
<span id="L1106" class="ln">  1106&nbsp;&nbsp;</span>				<span class="comment">// but only if we haven&#39;t seen a match yet at this level and only</span>
<span id="L1107" class="ln">  1107&nbsp;&nbsp;</span>				<span class="comment">// if the embedded types haven&#39;t already been queued.</span>
<span id="L1108" class="ln">  1108&nbsp;&nbsp;</span>				if ok || ntyp == nil || ntyp.Kind() != abi.Struct {
<span id="L1109" class="ln">  1109&nbsp;&nbsp;</span>					continue
<span id="L1110" class="ln">  1110&nbsp;&nbsp;</span>				}
<span id="L1111" class="ln">  1111&nbsp;&nbsp;</span>				styp := (*structType)(unsafe.Pointer(ntyp))
<span id="L1112" class="ln">  1112&nbsp;&nbsp;</span>				if nextCount[styp] &gt; 0 {
<span id="L1113" class="ln">  1113&nbsp;&nbsp;</span>					nextCount[styp] = 2 <span class="comment">// exact multiple doesn&#39;t matter</span>
<span id="L1114" class="ln">  1114&nbsp;&nbsp;</span>					continue
<span id="L1115" class="ln">  1115&nbsp;&nbsp;</span>				}
<span id="L1116" class="ln">  1116&nbsp;&nbsp;</span>				if nextCount == nil {
<span id="L1117" class="ln">  1117&nbsp;&nbsp;</span>					nextCount = map[*structType]int{}
<span id="L1118" class="ln">  1118&nbsp;&nbsp;</span>				}
<span id="L1119" class="ln">  1119&nbsp;&nbsp;</span>				nextCount[styp] = 1
<span id="L1120" class="ln">  1120&nbsp;&nbsp;</span>				if count[t] &gt; 1 {
<span id="L1121" class="ln">  1121&nbsp;&nbsp;</span>					nextCount[styp] = 2 <span class="comment">// exact multiple doesn&#39;t matter</span>
<span id="L1122" class="ln">  1122&nbsp;&nbsp;</span>				}
<span id="L1123" class="ln">  1123&nbsp;&nbsp;</span>				var index []int
<span id="L1124" class="ln">  1124&nbsp;&nbsp;</span>				index = append(index, scan.index...)
<span id="L1125" class="ln">  1125&nbsp;&nbsp;</span>				index = append(index, i)
<span id="L1126" class="ln">  1126&nbsp;&nbsp;</span>				next = append(next, fieldScan{styp, index})
<span id="L1127" class="ln">  1127&nbsp;&nbsp;</span>			}
<span id="L1128" class="ln">  1128&nbsp;&nbsp;</span>		}
<span id="L1129" class="ln">  1129&nbsp;&nbsp;</span>		if ok {
<span id="L1130" class="ln">  1130&nbsp;&nbsp;</span>			break
<span id="L1131" class="ln">  1131&nbsp;&nbsp;</span>		}
<span id="L1132" class="ln">  1132&nbsp;&nbsp;</span>	}
<span id="L1133" class="ln">  1133&nbsp;&nbsp;</span>	return
<span id="L1134" class="ln">  1134&nbsp;&nbsp;</span>}
<span id="L1135" class="ln">  1135&nbsp;&nbsp;</span>
<span id="L1136" class="ln">  1136&nbsp;&nbsp;</span><span class="comment">// FieldByName returns the struct field with the given name</span>
<span id="L1137" class="ln">  1137&nbsp;&nbsp;</span><span class="comment">// and a boolean to indicate if the field was found.</span>
<span id="L1138" class="ln">  1138&nbsp;&nbsp;</span>func (t *structType) FieldByName(name string) (f StructField, present bool) {
<span id="L1139" class="ln">  1139&nbsp;&nbsp;</span>	<span class="comment">// Quick check for top-level name, or struct without embedded fields.</span>
<span id="L1140" class="ln">  1140&nbsp;&nbsp;</span>	hasEmbeds := false
<span id="L1141" class="ln">  1141&nbsp;&nbsp;</span>	if name != &#34;&#34; {
<span id="L1142" class="ln">  1142&nbsp;&nbsp;</span>		for i := range t.Fields {
<span id="L1143" class="ln">  1143&nbsp;&nbsp;</span>			tf := &amp;t.Fields[i]
<span id="L1144" class="ln">  1144&nbsp;&nbsp;</span>			if tf.Name.Name() == name {
<span id="L1145" class="ln">  1145&nbsp;&nbsp;</span>				return t.Field(i), true
<span id="L1146" class="ln">  1146&nbsp;&nbsp;</span>			}
<span id="L1147" class="ln">  1147&nbsp;&nbsp;</span>			if tf.Embedded() {
<span id="L1148" class="ln">  1148&nbsp;&nbsp;</span>				hasEmbeds = true
<span id="L1149" class="ln">  1149&nbsp;&nbsp;</span>			}
<span id="L1150" class="ln">  1150&nbsp;&nbsp;</span>		}
<span id="L1151" class="ln">  1151&nbsp;&nbsp;</span>	}
<span id="L1152" class="ln">  1152&nbsp;&nbsp;</span>	if !hasEmbeds {
<span id="L1153" class="ln">  1153&nbsp;&nbsp;</span>		return
<span id="L1154" class="ln">  1154&nbsp;&nbsp;</span>	}
<span id="L1155" class="ln">  1155&nbsp;&nbsp;</span>	return t.FieldByNameFunc(func(s string) bool { return s == name })
<span id="L1156" class="ln">  1156&nbsp;&nbsp;</span>}
<span id="L1157" class="ln">  1157&nbsp;&nbsp;</span>
<span id="L1158" class="ln">  1158&nbsp;&nbsp;</span><span class="comment">// TypeOf returns the reflection [Type] that represents the dynamic type of i.</span>
<span id="L1159" class="ln">  1159&nbsp;&nbsp;</span><span class="comment">// If i is a nil interface value, TypeOf returns nil.</span>
<span id="L1160" class="ln">  1160&nbsp;&nbsp;</span>func TypeOf(i any) Type {
<span id="L1161" class="ln">  1161&nbsp;&nbsp;</span>	eface := *(*emptyInterface)(unsafe.Pointer(&amp;i))
<span id="L1162" class="ln">  1162&nbsp;&nbsp;</span>	<span class="comment">// Noescape so this doesn&#39;t make i to escape. See the comment</span>
<span id="L1163" class="ln">  1163&nbsp;&nbsp;</span>	<span class="comment">// at Value.typ for why this is safe.</span>
<span id="L1164" class="ln">  1164&nbsp;&nbsp;</span>	return toType((*abi.Type)(noescape(unsafe.Pointer(eface.typ))))
<span id="L1165" class="ln">  1165&nbsp;&nbsp;</span>}
<span id="L1166" class="ln">  1166&nbsp;&nbsp;</span>
<span id="L1167" class="ln">  1167&nbsp;&nbsp;</span><span class="comment">// rtypeOf directly extracts the *rtype of the provided value.</span>
<span id="L1168" class="ln">  1168&nbsp;&nbsp;</span>func rtypeOf(i any) *abi.Type {
<span id="L1169" class="ln">  1169&nbsp;&nbsp;</span>	eface := *(*emptyInterface)(unsafe.Pointer(&amp;i))
<span id="L1170" class="ln">  1170&nbsp;&nbsp;</span>	return eface.typ
<span id="L1171" class="ln">  1171&nbsp;&nbsp;</span>}
<span id="L1172" class="ln">  1172&nbsp;&nbsp;</span>
<span id="L1173" class="ln">  1173&nbsp;&nbsp;</span><span class="comment">// ptrMap is the cache for PointerTo.</span>
<span id="L1174" class="ln">  1174&nbsp;&nbsp;</span>var ptrMap sync.Map <span class="comment">// map[*rtype]*ptrType</span>
<span id="L1175" class="ln">  1175&nbsp;&nbsp;</span>
<span id="L1176" class="ln">  1176&nbsp;&nbsp;</span><span class="comment">// PtrTo returns the pointer type with element t.</span>
<span id="L1177" class="ln">  1177&nbsp;&nbsp;</span><span class="comment">// For example, if t represents type Foo, PtrTo(t) represents *Foo.</span>
<span id="L1178" class="ln">  1178&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1179" class="ln">  1179&nbsp;&nbsp;</span><span class="comment">// PtrTo is the old spelling of [PointerTo].</span>
<span id="L1180" class="ln">  1180&nbsp;&nbsp;</span><span class="comment">// The two functions behave identically.</span>
<span id="L1181" class="ln">  1181&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1182" class="ln">  1182&nbsp;&nbsp;</span><span class="comment">// Deprecated: Superseded by [PointerTo].</span>
<span id="L1183" class="ln">  1183&nbsp;&nbsp;</span>func PtrTo(t Type) Type { return PointerTo(t) }
<span id="L1184" class="ln">  1184&nbsp;&nbsp;</span>
<span id="L1185" class="ln">  1185&nbsp;&nbsp;</span><span class="comment">// PointerTo returns the pointer type with element t.</span>
<span id="L1186" class="ln">  1186&nbsp;&nbsp;</span><span class="comment">// For example, if t represents type Foo, PointerTo(t) represents *Foo.</span>
<span id="L1187" class="ln">  1187&nbsp;&nbsp;</span>func PointerTo(t Type) Type {
<span id="L1188" class="ln">  1188&nbsp;&nbsp;</span>	return toRType(t.(*rtype).ptrTo())
<span id="L1189" class="ln">  1189&nbsp;&nbsp;</span>}
<span id="L1190" class="ln">  1190&nbsp;&nbsp;</span>
<span id="L1191" class="ln">  1191&nbsp;&nbsp;</span>func (t *rtype) ptrTo() *abi.Type {
<span id="L1192" class="ln">  1192&nbsp;&nbsp;</span>	at := &amp;t.t
<span id="L1193" class="ln">  1193&nbsp;&nbsp;</span>	if at.PtrToThis != 0 {
<span id="L1194" class="ln">  1194&nbsp;&nbsp;</span>		return t.typeOff(at.PtrToThis)
<span id="L1195" class="ln">  1195&nbsp;&nbsp;</span>	}
<span id="L1196" class="ln">  1196&nbsp;&nbsp;</span>
<span id="L1197" class="ln">  1197&nbsp;&nbsp;</span>	<span class="comment">// Check the cache.</span>
<span id="L1198" class="ln">  1198&nbsp;&nbsp;</span>	if pi, ok := ptrMap.Load(t); ok {
<span id="L1199" class="ln">  1199&nbsp;&nbsp;</span>		return &amp;pi.(*ptrType).Type
<span id="L1200" class="ln">  1200&nbsp;&nbsp;</span>	}
<span id="L1201" class="ln">  1201&nbsp;&nbsp;</span>
<span id="L1202" class="ln">  1202&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L1203" class="ln">  1203&nbsp;&nbsp;</span>	s := &#34;*&#34; + t.String()
<span id="L1204" class="ln">  1204&nbsp;&nbsp;</span>	for _, tt := range typesByString(s) {
<span id="L1205" class="ln">  1205&nbsp;&nbsp;</span>		p := (*ptrType)(unsafe.Pointer(tt))
<span id="L1206" class="ln">  1206&nbsp;&nbsp;</span>		if p.Elem != &amp;t.t {
<span id="L1207" class="ln">  1207&nbsp;&nbsp;</span>			continue
<span id="L1208" class="ln">  1208&nbsp;&nbsp;</span>		}
<span id="L1209" class="ln">  1209&nbsp;&nbsp;</span>		pi, _ := ptrMap.LoadOrStore(t, p)
<span id="L1210" class="ln">  1210&nbsp;&nbsp;</span>		return &amp;pi.(*ptrType).Type
<span id="L1211" class="ln">  1211&nbsp;&nbsp;</span>	}
<span id="L1212" class="ln">  1212&nbsp;&nbsp;</span>
<span id="L1213" class="ln">  1213&nbsp;&nbsp;</span>	<span class="comment">// Create a new ptrType starting with the description</span>
<span id="L1214" class="ln">  1214&nbsp;&nbsp;</span>	<span class="comment">// of an *unsafe.Pointer.</span>
<span id="L1215" class="ln">  1215&nbsp;&nbsp;</span>	var iptr any = (*unsafe.Pointer)(nil)
<span id="L1216" class="ln">  1216&nbsp;&nbsp;</span>	prototype := *(**ptrType)(unsafe.Pointer(&amp;iptr))
<span id="L1217" class="ln">  1217&nbsp;&nbsp;</span>	pp := *prototype
<span id="L1218" class="ln">  1218&nbsp;&nbsp;</span>
<span id="L1219" class="ln">  1219&nbsp;&nbsp;</span>	pp.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L1220" class="ln">  1220&nbsp;&nbsp;</span>	pp.PtrToThis = 0
<span id="L1221" class="ln">  1221&nbsp;&nbsp;</span>
<span id="L1222" class="ln">  1222&nbsp;&nbsp;</span>	<span class="comment">// For the type structures linked into the binary, the</span>
<span id="L1223" class="ln">  1223&nbsp;&nbsp;</span>	<span class="comment">// compiler provides a good hash of the string.</span>
<span id="L1224" class="ln">  1224&nbsp;&nbsp;</span>	<span class="comment">// Create a good hash for the new string by using</span>
<span id="L1225" class="ln">  1225&nbsp;&nbsp;</span>	<span class="comment">// the FNV-1 hash&#39;s mixing function to combine the</span>
<span id="L1226" class="ln">  1226&nbsp;&nbsp;</span>	<span class="comment">// old hash and the new &#34;*&#34;.</span>
<span id="L1227" class="ln">  1227&nbsp;&nbsp;</span>	pp.Hash = fnv1(t.t.Hash, &#39;*&#39;)
<span id="L1228" class="ln">  1228&nbsp;&nbsp;</span>
<span id="L1229" class="ln">  1229&nbsp;&nbsp;</span>	pp.Elem = at
<span id="L1230" class="ln">  1230&nbsp;&nbsp;</span>
<span id="L1231" class="ln">  1231&nbsp;&nbsp;</span>	pi, _ := ptrMap.LoadOrStore(t, &amp;pp)
<span id="L1232" class="ln">  1232&nbsp;&nbsp;</span>	return &amp;pi.(*ptrType).Type
<span id="L1233" class="ln">  1233&nbsp;&nbsp;</span>}
<span id="L1234" class="ln">  1234&nbsp;&nbsp;</span>
<span id="L1235" class="ln">  1235&nbsp;&nbsp;</span>func ptrTo(t *abi.Type) *abi.Type {
<span id="L1236" class="ln">  1236&nbsp;&nbsp;</span>	return toRType(t).ptrTo()
<span id="L1237" class="ln">  1237&nbsp;&nbsp;</span>}
<span id="L1238" class="ln">  1238&nbsp;&nbsp;</span>
<span id="L1239" class="ln">  1239&nbsp;&nbsp;</span><span class="comment">// fnv1 incorporates the list of bytes into the hash x using the FNV-1 hash function.</span>
<span id="L1240" class="ln">  1240&nbsp;&nbsp;</span>func fnv1(x uint32, list ...byte) uint32 {
<span id="L1241" class="ln">  1241&nbsp;&nbsp;</span>	for _, b := range list {
<span id="L1242" class="ln">  1242&nbsp;&nbsp;</span>		x = x*16777619 ^ uint32(b)
<span id="L1243" class="ln">  1243&nbsp;&nbsp;</span>	}
<span id="L1244" class="ln">  1244&nbsp;&nbsp;</span>	return x
<span id="L1245" class="ln">  1245&nbsp;&nbsp;</span>}
<span id="L1246" class="ln">  1246&nbsp;&nbsp;</span>
<span id="L1247" class="ln">  1247&nbsp;&nbsp;</span>func (t *rtype) Implements(u Type) bool {
<span id="L1248" class="ln">  1248&nbsp;&nbsp;</span>	if u == nil {
<span id="L1249" class="ln">  1249&nbsp;&nbsp;</span>		panic(&#34;reflect: nil type passed to Type.Implements&#34;)
<span id="L1250" class="ln">  1250&nbsp;&nbsp;</span>	}
<span id="L1251" class="ln">  1251&nbsp;&nbsp;</span>	if u.Kind() != Interface {
<span id="L1252" class="ln">  1252&nbsp;&nbsp;</span>		panic(&#34;reflect: non-interface type passed to Type.Implements&#34;)
<span id="L1253" class="ln">  1253&nbsp;&nbsp;</span>	}
<span id="L1254" class="ln">  1254&nbsp;&nbsp;</span>	return implements(u.common(), t.common())
<span id="L1255" class="ln">  1255&nbsp;&nbsp;</span>}
<span id="L1256" class="ln">  1256&nbsp;&nbsp;</span>
<span id="L1257" class="ln">  1257&nbsp;&nbsp;</span>func (t *rtype) AssignableTo(u Type) bool {
<span id="L1258" class="ln">  1258&nbsp;&nbsp;</span>	if u == nil {
<span id="L1259" class="ln">  1259&nbsp;&nbsp;</span>		panic(&#34;reflect: nil type passed to Type.AssignableTo&#34;)
<span id="L1260" class="ln">  1260&nbsp;&nbsp;</span>	}
<span id="L1261" class="ln">  1261&nbsp;&nbsp;</span>	uu := u.common()
<span id="L1262" class="ln">  1262&nbsp;&nbsp;</span>	return directlyAssignable(uu, t.common()) || implements(uu, t.common())
<span id="L1263" class="ln">  1263&nbsp;&nbsp;</span>}
<span id="L1264" class="ln">  1264&nbsp;&nbsp;</span>
<span id="L1265" class="ln">  1265&nbsp;&nbsp;</span>func (t *rtype) ConvertibleTo(u Type) bool {
<span id="L1266" class="ln">  1266&nbsp;&nbsp;</span>	if u == nil {
<span id="L1267" class="ln">  1267&nbsp;&nbsp;</span>		panic(&#34;reflect: nil type passed to Type.ConvertibleTo&#34;)
<span id="L1268" class="ln">  1268&nbsp;&nbsp;</span>	}
<span id="L1269" class="ln">  1269&nbsp;&nbsp;</span>	return convertOp(u.common(), t.common()) != nil
<span id="L1270" class="ln">  1270&nbsp;&nbsp;</span>}
<span id="L1271" class="ln">  1271&nbsp;&nbsp;</span>
<span id="L1272" class="ln">  1272&nbsp;&nbsp;</span>func (t *rtype) Comparable() bool {
<span id="L1273" class="ln">  1273&nbsp;&nbsp;</span>	return t.t.Equal != nil
<span id="L1274" class="ln">  1274&nbsp;&nbsp;</span>}
<span id="L1275" class="ln">  1275&nbsp;&nbsp;</span>
<span id="L1276" class="ln">  1276&nbsp;&nbsp;</span><span class="comment">// implements reports whether the type V implements the interface type T.</span>
<span id="L1277" class="ln">  1277&nbsp;&nbsp;</span>func implements(T, V *abi.Type) bool {
<span id="L1278" class="ln">  1278&nbsp;&nbsp;</span>	if T.Kind() != abi.Interface {
<span id="L1279" class="ln">  1279&nbsp;&nbsp;</span>		return false
<span id="L1280" class="ln">  1280&nbsp;&nbsp;</span>	}
<span id="L1281" class="ln">  1281&nbsp;&nbsp;</span>	t := (*interfaceType)(unsafe.Pointer(T))
<span id="L1282" class="ln">  1282&nbsp;&nbsp;</span>	if len(t.Methods) == 0 {
<span id="L1283" class="ln">  1283&nbsp;&nbsp;</span>		return true
<span id="L1284" class="ln">  1284&nbsp;&nbsp;</span>	}
<span id="L1285" class="ln">  1285&nbsp;&nbsp;</span>
<span id="L1286" class="ln">  1286&nbsp;&nbsp;</span>	<span class="comment">// The same algorithm applies in both cases, but the</span>
<span id="L1287" class="ln">  1287&nbsp;&nbsp;</span>	<span class="comment">// method tables for an interface type and a concrete type</span>
<span id="L1288" class="ln">  1288&nbsp;&nbsp;</span>	<span class="comment">// are different, so the code is duplicated.</span>
<span id="L1289" class="ln">  1289&nbsp;&nbsp;</span>	<span class="comment">// In both cases the algorithm is a linear scan over the two</span>
<span id="L1290" class="ln">  1290&nbsp;&nbsp;</span>	<span class="comment">// lists - T&#39;s methods and V&#39;s methods - simultaneously.</span>
<span id="L1291" class="ln">  1291&nbsp;&nbsp;</span>	<span class="comment">// Since method tables are stored in a unique sorted order</span>
<span id="L1292" class="ln">  1292&nbsp;&nbsp;</span>	<span class="comment">// (alphabetical, with no duplicate method names), the scan</span>
<span id="L1293" class="ln">  1293&nbsp;&nbsp;</span>	<span class="comment">// through V&#39;s methods must hit a match for each of T&#39;s</span>
<span id="L1294" class="ln">  1294&nbsp;&nbsp;</span>	<span class="comment">// methods along the way, or else V does not implement T.</span>
<span id="L1295" class="ln">  1295&nbsp;&nbsp;</span>	<span class="comment">// This lets us run the scan in overall linear time instead of</span>
<span id="L1296" class="ln">  1296&nbsp;&nbsp;</span>	<span class="comment">// the quadratic time  a naive search would require.</span>
<span id="L1297" class="ln">  1297&nbsp;&nbsp;</span>	<span class="comment">// See also ../runtime/iface.go.</span>
<span id="L1298" class="ln">  1298&nbsp;&nbsp;</span>	if V.Kind() == abi.Interface {
<span id="L1299" class="ln">  1299&nbsp;&nbsp;</span>		v := (*interfaceType)(unsafe.Pointer(V))
<span id="L1300" class="ln">  1300&nbsp;&nbsp;</span>		i := 0
<span id="L1301" class="ln">  1301&nbsp;&nbsp;</span>		for j := 0; j &lt; len(v.Methods); j++ {
<span id="L1302" class="ln">  1302&nbsp;&nbsp;</span>			tm := &amp;t.Methods[i]
<span id="L1303" class="ln">  1303&nbsp;&nbsp;</span>			tmName := t.nameOff(tm.Name)
<span id="L1304" class="ln">  1304&nbsp;&nbsp;</span>			vm := &amp;v.Methods[j]
<span id="L1305" class="ln">  1305&nbsp;&nbsp;</span>			vmName := nameOffFor(V, vm.Name)
<span id="L1306" class="ln">  1306&nbsp;&nbsp;</span>			if vmName.Name() == tmName.Name() &amp;&amp; typeOffFor(V, vm.Typ) == t.typeOff(tm.Typ) {
<span id="L1307" class="ln">  1307&nbsp;&nbsp;</span>				if !tmName.IsExported() {
<span id="L1308" class="ln">  1308&nbsp;&nbsp;</span>					tmPkgPath := pkgPath(tmName)
<span id="L1309" class="ln">  1309&nbsp;&nbsp;</span>					if tmPkgPath == &#34;&#34; {
<span id="L1310" class="ln">  1310&nbsp;&nbsp;</span>						tmPkgPath = t.PkgPath.Name()
<span id="L1311" class="ln">  1311&nbsp;&nbsp;</span>					}
<span id="L1312" class="ln">  1312&nbsp;&nbsp;</span>					vmPkgPath := pkgPath(vmName)
<span id="L1313" class="ln">  1313&nbsp;&nbsp;</span>					if vmPkgPath == &#34;&#34; {
<span id="L1314" class="ln">  1314&nbsp;&nbsp;</span>						vmPkgPath = v.PkgPath.Name()
<span id="L1315" class="ln">  1315&nbsp;&nbsp;</span>					}
<span id="L1316" class="ln">  1316&nbsp;&nbsp;</span>					if tmPkgPath != vmPkgPath {
<span id="L1317" class="ln">  1317&nbsp;&nbsp;</span>						continue
<span id="L1318" class="ln">  1318&nbsp;&nbsp;</span>					}
<span id="L1319" class="ln">  1319&nbsp;&nbsp;</span>				}
<span id="L1320" class="ln">  1320&nbsp;&nbsp;</span>				if i++; i &gt;= len(t.Methods) {
<span id="L1321" class="ln">  1321&nbsp;&nbsp;</span>					return true
<span id="L1322" class="ln">  1322&nbsp;&nbsp;</span>				}
<span id="L1323" class="ln">  1323&nbsp;&nbsp;</span>			}
<span id="L1324" class="ln">  1324&nbsp;&nbsp;</span>		}
<span id="L1325" class="ln">  1325&nbsp;&nbsp;</span>		return false
<span id="L1326" class="ln">  1326&nbsp;&nbsp;</span>	}
<span id="L1327" class="ln">  1327&nbsp;&nbsp;</span>
<span id="L1328" class="ln">  1328&nbsp;&nbsp;</span>	v := V.Uncommon()
<span id="L1329" class="ln">  1329&nbsp;&nbsp;</span>	if v == nil {
<span id="L1330" class="ln">  1330&nbsp;&nbsp;</span>		return false
<span id="L1331" class="ln">  1331&nbsp;&nbsp;</span>	}
<span id="L1332" class="ln">  1332&nbsp;&nbsp;</span>	i := 0
<span id="L1333" class="ln">  1333&nbsp;&nbsp;</span>	vmethods := v.Methods()
<span id="L1334" class="ln">  1334&nbsp;&nbsp;</span>	for j := 0; j &lt; int(v.Mcount); j++ {
<span id="L1335" class="ln">  1335&nbsp;&nbsp;</span>		tm := &amp;t.Methods[i]
<span id="L1336" class="ln">  1336&nbsp;&nbsp;</span>		tmName := t.nameOff(tm.Name)
<span id="L1337" class="ln">  1337&nbsp;&nbsp;</span>		vm := vmethods[j]
<span id="L1338" class="ln">  1338&nbsp;&nbsp;</span>		vmName := nameOffFor(V, vm.Name)
<span id="L1339" class="ln">  1339&nbsp;&nbsp;</span>		if vmName.Name() == tmName.Name() &amp;&amp; typeOffFor(V, vm.Mtyp) == t.typeOff(tm.Typ) {
<span id="L1340" class="ln">  1340&nbsp;&nbsp;</span>			if !tmName.IsExported() {
<span id="L1341" class="ln">  1341&nbsp;&nbsp;</span>				tmPkgPath := pkgPath(tmName)
<span id="L1342" class="ln">  1342&nbsp;&nbsp;</span>				if tmPkgPath == &#34;&#34; {
<span id="L1343" class="ln">  1343&nbsp;&nbsp;</span>					tmPkgPath = t.PkgPath.Name()
<span id="L1344" class="ln">  1344&nbsp;&nbsp;</span>				}
<span id="L1345" class="ln">  1345&nbsp;&nbsp;</span>				vmPkgPath := pkgPath(vmName)
<span id="L1346" class="ln">  1346&nbsp;&nbsp;</span>				if vmPkgPath == &#34;&#34; {
<span id="L1347" class="ln">  1347&nbsp;&nbsp;</span>					vmPkgPath = nameOffFor(V, v.PkgPath).Name()
<span id="L1348" class="ln">  1348&nbsp;&nbsp;</span>				}
<span id="L1349" class="ln">  1349&nbsp;&nbsp;</span>				if tmPkgPath != vmPkgPath {
<span id="L1350" class="ln">  1350&nbsp;&nbsp;</span>					continue
<span id="L1351" class="ln">  1351&nbsp;&nbsp;</span>				}
<span id="L1352" class="ln">  1352&nbsp;&nbsp;</span>			}
<span id="L1353" class="ln">  1353&nbsp;&nbsp;</span>			if i++; i &gt;= len(t.Methods) {
<span id="L1354" class="ln">  1354&nbsp;&nbsp;</span>				return true
<span id="L1355" class="ln">  1355&nbsp;&nbsp;</span>			}
<span id="L1356" class="ln">  1356&nbsp;&nbsp;</span>		}
<span id="L1357" class="ln">  1357&nbsp;&nbsp;</span>	}
<span id="L1358" class="ln">  1358&nbsp;&nbsp;</span>	return false
<span id="L1359" class="ln">  1359&nbsp;&nbsp;</span>}
<span id="L1360" class="ln">  1360&nbsp;&nbsp;</span>
<span id="L1361" class="ln">  1361&nbsp;&nbsp;</span><span class="comment">// specialChannelAssignability reports whether a value x of channel type V</span>
<span id="L1362" class="ln">  1362&nbsp;&nbsp;</span><span class="comment">// can be directly assigned (using memmove) to another channel type T.</span>
<span id="L1363" class="ln">  1363&nbsp;&nbsp;</span><span class="comment">// https://golang.org/doc/go_spec.html#Assignability</span>
<span id="L1364" class="ln">  1364&nbsp;&nbsp;</span><span class="comment">// T and V must be both of Chan kind.</span>
<span id="L1365" class="ln">  1365&nbsp;&nbsp;</span>func specialChannelAssignability(T, V *abi.Type) bool {
<span id="L1366" class="ln">  1366&nbsp;&nbsp;</span>	<span class="comment">// Special case:</span>
<span id="L1367" class="ln">  1367&nbsp;&nbsp;</span>	<span class="comment">// x is a bidirectional channel value, T is a channel type,</span>
<span id="L1368" class="ln">  1368&nbsp;&nbsp;</span>	<span class="comment">// x&#39;s type V and T have identical element types,</span>
<span id="L1369" class="ln">  1369&nbsp;&nbsp;</span>	<span class="comment">// and at least one of V or T is not a defined type.</span>
<span id="L1370" class="ln">  1370&nbsp;&nbsp;</span>	return V.ChanDir() == abi.BothDir &amp;&amp; (nameFor(T) == &#34;&#34; || nameFor(V) == &#34;&#34;) &amp;&amp; haveIdenticalType(T.Elem(), V.Elem(), true)
<span id="L1371" class="ln">  1371&nbsp;&nbsp;</span>}
<span id="L1372" class="ln">  1372&nbsp;&nbsp;</span>
<span id="L1373" class="ln">  1373&nbsp;&nbsp;</span><span class="comment">// directlyAssignable reports whether a value x of type V can be directly</span>
<span id="L1374" class="ln">  1374&nbsp;&nbsp;</span><span class="comment">// assigned (using memmove) to a value of type T.</span>
<span id="L1375" class="ln">  1375&nbsp;&nbsp;</span><span class="comment">// https://golang.org/doc/go_spec.html#Assignability</span>
<span id="L1376" class="ln">  1376&nbsp;&nbsp;</span><span class="comment">// Ignoring the interface rules (implemented elsewhere)</span>
<span id="L1377" class="ln">  1377&nbsp;&nbsp;</span><span class="comment">// and the ideal constant rules (no ideal constants at run time).</span>
<span id="L1378" class="ln">  1378&nbsp;&nbsp;</span>func directlyAssignable(T, V *abi.Type) bool {
<span id="L1379" class="ln">  1379&nbsp;&nbsp;</span>	<span class="comment">// x&#39;s type V is identical to T?</span>
<span id="L1380" class="ln">  1380&nbsp;&nbsp;</span>	if T == V {
<span id="L1381" class="ln">  1381&nbsp;&nbsp;</span>		return true
<span id="L1382" class="ln">  1382&nbsp;&nbsp;</span>	}
<span id="L1383" class="ln">  1383&nbsp;&nbsp;</span>
<span id="L1384" class="ln">  1384&nbsp;&nbsp;</span>	<span class="comment">// Otherwise at least one of T and V must not be defined</span>
<span id="L1385" class="ln">  1385&nbsp;&nbsp;</span>	<span class="comment">// and they must have the same kind.</span>
<span id="L1386" class="ln">  1386&nbsp;&nbsp;</span>	if T.HasName() &amp;&amp; V.HasName() || T.Kind() != V.Kind() {
<span id="L1387" class="ln">  1387&nbsp;&nbsp;</span>		return false
<span id="L1388" class="ln">  1388&nbsp;&nbsp;</span>	}
<span id="L1389" class="ln">  1389&nbsp;&nbsp;</span>
<span id="L1390" class="ln">  1390&nbsp;&nbsp;</span>	if T.Kind() == abi.Chan &amp;&amp; specialChannelAssignability(T, V) {
<span id="L1391" class="ln">  1391&nbsp;&nbsp;</span>		return true
<span id="L1392" class="ln">  1392&nbsp;&nbsp;</span>	}
<span id="L1393" class="ln">  1393&nbsp;&nbsp;</span>
<span id="L1394" class="ln">  1394&nbsp;&nbsp;</span>	<span class="comment">// x&#39;s type T and V must have identical underlying types.</span>
<span id="L1395" class="ln">  1395&nbsp;&nbsp;</span>	return haveIdenticalUnderlyingType(T, V, true)
<span id="L1396" class="ln">  1396&nbsp;&nbsp;</span>}
<span id="L1397" class="ln">  1397&nbsp;&nbsp;</span>
<span id="L1398" class="ln">  1398&nbsp;&nbsp;</span>func haveIdenticalType(T, V *abi.Type, cmpTags bool) bool {
<span id="L1399" class="ln">  1399&nbsp;&nbsp;</span>	if cmpTags {
<span id="L1400" class="ln">  1400&nbsp;&nbsp;</span>		return T == V
<span id="L1401" class="ln">  1401&nbsp;&nbsp;</span>	}
<span id="L1402" class="ln">  1402&nbsp;&nbsp;</span>
<span id="L1403" class="ln">  1403&nbsp;&nbsp;</span>	if nameFor(T) != nameFor(V) || T.Kind() != V.Kind() || pkgPathFor(T) != pkgPathFor(V) {
<span id="L1404" class="ln">  1404&nbsp;&nbsp;</span>		return false
<span id="L1405" class="ln">  1405&nbsp;&nbsp;</span>	}
<span id="L1406" class="ln">  1406&nbsp;&nbsp;</span>
<span id="L1407" class="ln">  1407&nbsp;&nbsp;</span>	return haveIdenticalUnderlyingType(T, V, false)
<span id="L1408" class="ln">  1408&nbsp;&nbsp;</span>}
<span id="L1409" class="ln">  1409&nbsp;&nbsp;</span>
<span id="L1410" class="ln">  1410&nbsp;&nbsp;</span>func haveIdenticalUnderlyingType(T, V *abi.Type, cmpTags bool) bool {
<span id="L1411" class="ln">  1411&nbsp;&nbsp;</span>	if T == V {
<span id="L1412" class="ln">  1412&nbsp;&nbsp;</span>		return true
<span id="L1413" class="ln">  1413&nbsp;&nbsp;</span>	}
<span id="L1414" class="ln">  1414&nbsp;&nbsp;</span>
<span id="L1415" class="ln">  1415&nbsp;&nbsp;</span>	kind := Kind(T.Kind())
<span id="L1416" class="ln">  1416&nbsp;&nbsp;</span>	if kind != Kind(V.Kind()) {
<span id="L1417" class="ln">  1417&nbsp;&nbsp;</span>		return false
<span id="L1418" class="ln">  1418&nbsp;&nbsp;</span>	}
<span id="L1419" class="ln">  1419&nbsp;&nbsp;</span>
<span id="L1420" class="ln">  1420&nbsp;&nbsp;</span>	<span class="comment">// Non-composite types of equal kind have same underlying type</span>
<span id="L1421" class="ln">  1421&nbsp;&nbsp;</span>	<span class="comment">// (the predefined instance of the type).</span>
<span id="L1422" class="ln">  1422&nbsp;&nbsp;</span>	if Bool &lt;= kind &amp;&amp; kind &lt;= Complex128 || kind == String || kind == UnsafePointer {
<span id="L1423" class="ln">  1423&nbsp;&nbsp;</span>		return true
<span id="L1424" class="ln">  1424&nbsp;&nbsp;</span>	}
<span id="L1425" class="ln">  1425&nbsp;&nbsp;</span>
<span id="L1426" class="ln">  1426&nbsp;&nbsp;</span>	<span class="comment">// Composite types.</span>
<span id="L1427" class="ln">  1427&nbsp;&nbsp;</span>	switch kind {
<span id="L1428" class="ln">  1428&nbsp;&nbsp;</span>	case Array:
<span id="L1429" class="ln">  1429&nbsp;&nbsp;</span>		return T.Len() == V.Len() &amp;&amp; haveIdenticalType(T.Elem(), V.Elem(), cmpTags)
<span id="L1430" class="ln">  1430&nbsp;&nbsp;</span>
<span id="L1431" class="ln">  1431&nbsp;&nbsp;</span>	case Chan:
<span id="L1432" class="ln">  1432&nbsp;&nbsp;</span>		return V.ChanDir() == T.ChanDir() &amp;&amp; haveIdenticalType(T.Elem(), V.Elem(), cmpTags)
<span id="L1433" class="ln">  1433&nbsp;&nbsp;</span>
<span id="L1434" class="ln">  1434&nbsp;&nbsp;</span>	case Func:
<span id="L1435" class="ln">  1435&nbsp;&nbsp;</span>		t := (*funcType)(unsafe.Pointer(T))
<span id="L1436" class="ln">  1436&nbsp;&nbsp;</span>		v := (*funcType)(unsafe.Pointer(V))
<span id="L1437" class="ln">  1437&nbsp;&nbsp;</span>		if t.OutCount != v.OutCount || t.InCount != v.InCount {
<span id="L1438" class="ln">  1438&nbsp;&nbsp;</span>			return false
<span id="L1439" class="ln">  1439&nbsp;&nbsp;</span>		}
<span id="L1440" class="ln">  1440&nbsp;&nbsp;</span>		for i := 0; i &lt; t.NumIn(); i++ {
<span id="L1441" class="ln">  1441&nbsp;&nbsp;</span>			if !haveIdenticalType(t.In(i), v.In(i), cmpTags) {
<span id="L1442" class="ln">  1442&nbsp;&nbsp;</span>				return false
<span id="L1443" class="ln">  1443&nbsp;&nbsp;</span>			}
<span id="L1444" class="ln">  1444&nbsp;&nbsp;</span>		}
<span id="L1445" class="ln">  1445&nbsp;&nbsp;</span>		for i := 0; i &lt; t.NumOut(); i++ {
<span id="L1446" class="ln">  1446&nbsp;&nbsp;</span>			if !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {
<span id="L1447" class="ln">  1447&nbsp;&nbsp;</span>				return false
<span id="L1448" class="ln">  1448&nbsp;&nbsp;</span>			}
<span id="L1449" class="ln">  1449&nbsp;&nbsp;</span>		}
<span id="L1450" class="ln">  1450&nbsp;&nbsp;</span>		return true
<span id="L1451" class="ln">  1451&nbsp;&nbsp;</span>
<span id="L1452" class="ln">  1452&nbsp;&nbsp;</span>	case Interface:
<span id="L1453" class="ln">  1453&nbsp;&nbsp;</span>		t := (*interfaceType)(unsafe.Pointer(T))
<span id="L1454" class="ln">  1454&nbsp;&nbsp;</span>		v := (*interfaceType)(unsafe.Pointer(V))
<span id="L1455" class="ln">  1455&nbsp;&nbsp;</span>		if len(t.Methods) == 0 &amp;&amp; len(v.Methods) == 0 {
<span id="L1456" class="ln">  1456&nbsp;&nbsp;</span>			return true
<span id="L1457" class="ln">  1457&nbsp;&nbsp;</span>		}
<span id="L1458" class="ln">  1458&nbsp;&nbsp;</span>		<span class="comment">// Might have the same methods but still</span>
<span id="L1459" class="ln">  1459&nbsp;&nbsp;</span>		<span class="comment">// need a run time conversion.</span>
<span id="L1460" class="ln">  1460&nbsp;&nbsp;</span>		return false
<span id="L1461" class="ln">  1461&nbsp;&nbsp;</span>
<span id="L1462" class="ln">  1462&nbsp;&nbsp;</span>	case Map:
<span id="L1463" class="ln">  1463&nbsp;&nbsp;</span>		return haveIdenticalType(T.Key(), V.Key(), cmpTags) &amp;&amp; haveIdenticalType(T.Elem(), V.Elem(), cmpTags)
<span id="L1464" class="ln">  1464&nbsp;&nbsp;</span>
<span id="L1465" class="ln">  1465&nbsp;&nbsp;</span>	case Pointer, Slice:
<span id="L1466" class="ln">  1466&nbsp;&nbsp;</span>		return haveIdenticalType(T.Elem(), V.Elem(), cmpTags)
<span id="L1467" class="ln">  1467&nbsp;&nbsp;</span>
<span id="L1468" class="ln">  1468&nbsp;&nbsp;</span>	case Struct:
<span id="L1469" class="ln">  1469&nbsp;&nbsp;</span>		t := (*structType)(unsafe.Pointer(T))
<span id="L1470" class="ln">  1470&nbsp;&nbsp;</span>		v := (*structType)(unsafe.Pointer(V))
<span id="L1471" class="ln">  1471&nbsp;&nbsp;</span>		if len(t.Fields) != len(v.Fields) {
<span id="L1472" class="ln">  1472&nbsp;&nbsp;</span>			return false
<span id="L1473" class="ln">  1473&nbsp;&nbsp;</span>		}
<span id="L1474" class="ln">  1474&nbsp;&nbsp;</span>		if t.PkgPath.Name() != v.PkgPath.Name() {
<span id="L1475" class="ln">  1475&nbsp;&nbsp;</span>			return false
<span id="L1476" class="ln">  1476&nbsp;&nbsp;</span>		}
<span id="L1477" class="ln">  1477&nbsp;&nbsp;</span>		for i := range t.Fields {
<span id="L1478" class="ln">  1478&nbsp;&nbsp;</span>			tf := &amp;t.Fields[i]
<span id="L1479" class="ln">  1479&nbsp;&nbsp;</span>			vf := &amp;v.Fields[i]
<span id="L1480" class="ln">  1480&nbsp;&nbsp;</span>			if tf.Name.Name() != vf.Name.Name() {
<span id="L1481" class="ln">  1481&nbsp;&nbsp;</span>				return false
<span id="L1482" class="ln">  1482&nbsp;&nbsp;</span>			}
<span id="L1483" class="ln">  1483&nbsp;&nbsp;</span>			if !haveIdenticalType(tf.Typ, vf.Typ, cmpTags) {
<span id="L1484" class="ln">  1484&nbsp;&nbsp;</span>				return false
<span id="L1485" class="ln">  1485&nbsp;&nbsp;</span>			}
<span id="L1486" class="ln">  1486&nbsp;&nbsp;</span>			if cmpTags &amp;&amp; tf.Name.Tag() != vf.Name.Tag() {
<span id="L1487" class="ln">  1487&nbsp;&nbsp;</span>				return false
<span id="L1488" class="ln">  1488&nbsp;&nbsp;</span>			}
<span id="L1489" class="ln">  1489&nbsp;&nbsp;</span>			if tf.Offset != vf.Offset {
<span id="L1490" class="ln">  1490&nbsp;&nbsp;</span>				return false
<span id="L1491" class="ln">  1491&nbsp;&nbsp;</span>			}
<span id="L1492" class="ln">  1492&nbsp;&nbsp;</span>			if tf.Embedded() != vf.Embedded() {
<span id="L1493" class="ln">  1493&nbsp;&nbsp;</span>				return false
<span id="L1494" class="ln">  1494&nbsp;&nbsp;</span>			}
<span id="L1495" class="ln">  1495&nbsp;&nbsp;</span>		}
<span id="L1496" class="ln">  1496&nbsp;&nbsp;</span>		return true
<span id="L1497" class="ln">  1497&nbsp;&nbsp;</span>	}
<span id="L1498" class="ln">  1498&nbsp;&nbsp;</span>
<span id="L1499" class="ln">  1499&nbsp;&nbsp;</span>	return false
<span id="L1500" class="ln">  1500&nbsp;&nbsp;</span>}
<span id="L1501" class="ln">  1501&nbsp;&nbsp;</span>
<span id="L1502" class="ln">  1502&nbsp;&nbsp;</span><span class="comment">// typelinks is implemented in package runtime.</span>
<span id="L1503" class="ln">  1503&nbsp;&nbsp;</span><span class="comment">// It returns a slice of the sections in each module,</span>
<span id="L1504" class="ln">  1504&nbsp;&nbsp;</span><span class="comment">// and a slice of *rtype offsets in each module.</span>
<span id="L1505" class="ln">  1505&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1506" class="ln">  1506&nbsp;&nbsp;</span><span class="comment">// The types in each module are sorted by string. That is, the first</span>
<span id="L1507" class="ln">  1507&nbsp;&nbsp;</span><span class="comment">// two linked types of the first module are:</span>
<span id="L1508" class="ln">  1508&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1509" class="ln">  1509&nbsp;&nbsp;</span><span class="comment">//	d0 := sections[0]</span>
<span id="L1510" class="ln">  1510&nbsp;&nbsp;</span><span class="comment">//	t1 := (*rtype)(add(d0, offset[0][0]))</span>
<span id="L1511" class="ln">  1511&nbsp;&nbsp;</span><span class="comment">//	t2 := (*rtype)(add(d0, offset[0][1]))</span>
<span id="L1512" class="ln">  1512&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1513" class="ln">  1513&nbsp;&nbsp;</span><span class="comment">// and</span>
<span id="L1514" class="ln">  1514&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1515" class="ln">  1515&nbsp;&nbsp;</span><span class="comment">//	t1.String() &lt; t2.String()</span>
<span id="L1516" class="ln">  1516&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1517" class="ln">  1517&nbsp;&nbsp;</span><span class="comment">// Note that strings are not unique identifiers for types:</span>
<span id="L1518" class="ln">  1518&nbsp;&nbsp;</span><span class="comment">// there can be more than one with a given string.</span>
<span id="L1519" class="ln">  1519&nbsp;&nbsp;</span><span class="comment">// Only types we might want to look up are included:</span>
<span id="L1520" class="ln">  1520&nbsp;&nbsp;</span><span class="comment">// pointers, channels, maps, slices, and arrays.</span>
<span id="L1521" class="ln">  1521&nbsp;&nbsp;</span>func typelinks() (sections []unsafe.Pointer, offset [][]int32)
<span id="L1522" class="ln">  1522&nbsp;&nbsp;</span>
<span id="L1523" class="ln">  1523&nbsp;&nbsp;</span>func rtypeOff(section unsafe.Pointer, off int32) *abi.Type {
<span id="L1524" class="ln">  1524&nbsp;&nbsp;</span>	return (*abi.Type)(add(section, uintptr(off), &#34;sizeof(rtype) &gt; 0&#34;))
<span id="L1525" class="ln">  1525&nbsp;&nbsp;</span>}
<span id="L1526" class="ln">  1526&nbsp;&nbsp;</span>
<span id="L1527" class="ln">  1527&nbsp;&nbsp;</span><span class="comment">// typesByString returns the subslice of typelinks() whose elements have</span>
<span id="L1528" class="ln">  1528&nbsp;&nbsp;</span><span class="comment">// the given string representation.</span>
<span id="L1529" class="ln">  1529&nbsp;&nbsp;</span><span class="comment">// It may be empty (no known types with that string) or may have</span>
<span id="L1530" class="ln">  1530&nbsp;&nbsp;</span><span class="comment">// multiple elements (multiple types with that string).</span>
<span id="L1531" class="ln">  1531&nbsp;&nbsp;</span>func typesByString(s string) []*abi.Type {
<span id="L1532" class="ln">  1532&nbsp;&nbsp;</span>	sections, offset := typelinks()
<span id="L1533" class="ln">  1533&nbsp;&nbsp;</span>	var ret []*abi.Type
<span id="L1534" class="ln">  1534&nbsp;&nbsp;</span>
<span id="L1535" class="ln">  1535&nbsp;&nbsp;</span>	for offsI, offs := range offset {
<span id="L1536" class="ln">  1536&nbsp;&nbsp;</span>		section := sections[offsI]
<span id="L1537" class="ln">  1537&nbsp;&nbsp;</span>
<span id="L1538" class="ln">  1538&nbsp;&nbsp;</span>		<span class="comment">// We are looking for the first index i where the string becomes &gt;= s.</span>
<span id="L1539" class="ln">  1539&nbsp;&nbsp;</span>		<span class="comment">// This is a copy of sort.Search, with f(h) replaced by (*typ[h].String() &gt;= s).</span>
<span id="L1540" class="ln">  1540&nbsp;&nbsp;</span>		i, j := 0, len(offs)
<span id="L1541" class="ln">  1541&nbsp;&nbsp;</span>		for i &lt; j {
<span id="L1542" class="ln">  1542&nbsp;&nbsp;</span>			h := int(uint(i+j) &gt;&gt; 1) <span class="comment">// avoid overflow when computing h</span>
<span id="L1543" class="ln">  1543&nbsp;&nbsp;</span>			<span class="comment">// i ≤ h &lt; j</span>
<span id="L1544" class="ln">  1544&nbsp;&nbsp;</span>			if !(stringFor(rtypeOff(section, offs[h])) &gt;= s) {
<span id="L1545" class="ln">  1545&nbsp;&nbsp;</span>				i = h + 1 <span class="comment">// preserves f(i-1) == false</span>
<span id="L1546" class="ln">  1546&nbsp;&nbsp;</span>			} else {
<span id="L1547" class="ln">  1547&nbsp;&nbsp;</span>				j = h <span class="comment">// preserves f(j) == true</span>
<span id="L1548" class="ln">  1548&nbsp;&nbsp;</span>			}
<span id="L1549" class="ln">  1549&nbsp;&nbsp;</span>		}
<span id="L1550" class="ln">  1550&nbsp;&nbsp;</span>		<span class="comment">// i == j, f(i-1) == false, and f(j) (= f(i)) == true  =&gt;  answer is i.</span>
<span id="L1551" class="ln">  1551&nbsp;&nbsp;</span>
<span id="L1552" class="ln">  1552&nbsp;&nbsp;</span>		<span class="comment">// Having found the first, linear scan forward to find the last.</span>
<span id="L1553" class="ln">  1553&nbsp;&nbsp;</span>		<span class="comment">// We could do a second binary search, but the caller is going</span>
<span id="L1554" class="ln">  1554&nbsp;&nbsp;</span>		<span class="comment">// to do a linear scan anyway.</span>
<span id="L1555" class="ln">  1555&nbsp;&nbsp;</span>		for j := i; j &lt; len(offs); j++ {
<span id="L1556" class="ln">  1556&nbsp;&nbsp;</span>			typ := rtypeOff(section, offs[j])
<span id="L1557" class="ln">  1557&nbsp;&nbsp;</span>			if stringFor(typ) != s {
<span id="L1558" class="ln">  1558&nbsp;&nbsp;</span>				break
<span id="L1559" class="ln">  1559&nbsp;&nbsp;</span>			}
<span id="L1560" class="ln">  1560&nbsp;&nbsp;</span>			ret = append(ret, typ)
<span id="L1561" class="ln">  1561&nbsp;&nbsp;</span>		}
<span id="L1562" class="ln">  1562&nbsp;&nbsp;</span>	}
<span id="L1563" class="ln">  1563&nbsp;&nbsp;</span>	return ret
<span id="L1564" class="ln">  1564&nbsp;&nbsp;</span>}
<span id="L1565" class="ln">  1565&nbsp;&nbsp;</span>
<span id="L1566" class="ln">  1566&nbsp;&nbsp;</span><span class="comment">// The lookupCache caches ArrayOf, ChanOf, MapOf and SliceOf lookups.</span>
<span id="L1567" class="ln">  1567&nbsp;&nbsp;</span>var lookupCache sync.Map <span class="comment">// map[cacheKey]*rtype</span>
<span id="L1568" class="ln">  1568&nbsp;&nbsp;</span>
<span id="L1569" class="ln">  1569&nbsp;&nbsp;</span><span class="comment">// A cacheKey is the key for use in the lookupCache.</span>
<span id="L1570" class="ln">  1570&nbsp;&nbsp;</span><span class="comment">// Four values describe any of the types we are looking for:</span>
<span id="L1571" class="ln">  1571&nbsp;&nbsp;</span><span class="comment">// type kind, one or two subtypes, and an extra integer.</span>
<span id="L1572" class="ln">  1572&nbsp;&nbsp;</span>type cacheKey struct {
<span id="L1573" class="ln">  1573&nbsp;&nbsp;</span>	kind  Kind
<span id="L1574" class="ln">  1574&nbsp;&nbsp;</span>	t1    *abi.Type
<span id="L1575" class="ln">  1575&nbsp;&nbsp;</span>	t2    *abi.Type
<span id="L1576" class="ln">  1576&nbsp;&nbsp;</span>	extra uintptr
<span id="L1577" class="ln">  1577&nbsp;&nbsp;</span>}
<span id="L1578" class="ln">  1578&nbsp;&nbsp;</span>
<span id="L1579" class="ln">  1579&nbsp;&nbsp;</span><span class="comment">// The funcLookupCache caches FuncOf lookups.</span>
<span id="L1580" class="ln">  1580&nbsp;&nbsp;</span><span class="comment">// FuncOf does not share the common lookupCache since cacheKey is not</span>
<span id="L1581" class="ln">  1581&nbsp;&nbsp;</span><span class="comment">// sufficient to represent functions unambiguously.</span>
<span id="L1582" class="ln">  1582&nbsp;&nbsp;</span>var funcLookupCache struct {
<span id="L1583" class="ln">  1583&nbsp;&nbsp;</span>	sync.Mutex <span class="comment">// Guards stores (but not loads) on m.</span>
<span id="L1584" class="ln">  1584&nbsp;&nbsp;</span>
<span id="L1585" class="ln">  1585&nbsp;&nbsp;</span>	<span class="comment">// m is a map[uint32][]*rtype keyed by the hash calculated in FuncOf.</span>
<span id="L1586" class="ln">  1586&nbsp;&nbsp;</span>	<span class="comment">// Elements of m are append-only and thus safe for concurrent reading.</span>
<span id="L1587" class="ln">  1587&nbsp;&nbsp;</span>	m sync.Map
<span id="L1588" class="ln">  1588&nbsp;&nbsp;</span>}
<span id="L1589" class="ln">  1589&nbsp;&nbsp;</span>
<span id="L1590" class="ln">  1590&nbsp;&nbsp;</span><span class="comment">// ChanOf returns the channel type with the given direction and element type.</span>
<span id="L1591" class="ln">  1591&nbsp;&nbsp;</span><span class="comment">// For example, if t represents int, ChanOf(RecvDir, t) represents &lt;-chan int.</span>
<span id="L1592" class="ln">  1592&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1593" class="ln">  1593&nbsp;&nbsp;</span><span class="comment">// The gc runtime imposes a limit of 64 kB on channel element types.</span>
<span id="L1594" class="ln">  1594&nbsp;&nbsp;</span><span class="comment">// If t&#39;s size is equal to or exceeds this limit, ChanOf panics.</span>
<span id="L1595" class="ln">  1595&nbsp;&nbsp;</span>func ChanOf(dir ChanDir, t Type) Type {
<span id="L1596" class="ln">  1596&nbsp;&nbsp;</span>	typ := t.common()
<span id="L1597" class="ln">  1597&nbsp;&nbsp;</span>
<span id="L1598" class="ln">  1598&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L1599" class="ln">  1599&nbsp;&nbsp;</span>	ckey := cacheKey{Chan, typ, nil, uintptr(dir)}
<span id="L1600" class="ln">  1600&nbsp;&nbsp;</span>	if ch, ok := lookupCache.Load(ckey); ok {
<span id="L1601" class="ln">  1601&nbsp;&nbsp;</span>		return ch.(*rtype)
<span id="L1602" class="ln">  1602&nbsp;&nbsp;</span>	}
<span id="L1603" class="ln">  1603&nbsp;&nbsp;</span>
<span id="L1604" class="ln">  1604&nbsp;&nbsp;</span>	<span class="comment">// This restriction is imposed by the gc compiler and the runtime.</span>
<span id="L1605" class="ln">  1605&nbsp;&nbsp;</span>	if typ.Size_ &gt;= 1&lt;&lt;16 {
<span id="L1606" class="ln">  1606&nbsp;&nbsp;</span>		panic(&#34;reflect.ChanOf: element size too large&#34;)
<span id="L1607" class="ln">  1607&nbsp;&nbsp;</span>	}
<span id="L1608" class="ln">  1608&nbsp;&nbsp;</span>
<span id="L1609" class="ln">  1609&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L1610" class="ln">  1610&nbsp;&nbsp;</span>	var s string
<span id="L1611" class="ln">  1611&nbsp;&nbsp;</span>	switch dir {
<span id="L1612" class="ln">  1612&nbsp;&nbsp;</span>	default:
<span id="L1613" class="ln">  1613&nbsp;&nbsp;</span>		panic(&#34;reflect.ChanOf: invalid dir&#34;)
<span id="L1614" class="ln">  1614&nbsp;&nbsp;</span>	case SendDir:
<span id="L1615" class="ln">  1615&nbsp;&nbsp;</span>		s = &#34;chan&lt;- &#34; + stringFor(typ)
<span id="L1616" class="ln">  1616&nbsp;&nbsp;</span>	case RecvDir:
<span id="L1617" class="ln">  1617&nbsp;&nbsp;</span>		s = &#34;&lt;-chan &#34; + stringFor(typ)
<span id="L1618" class="ln">  1618&nbsp;&nbsp;</span>	case BothDir:
<span id="L1619" class="ln">  1619&nbsp;&nbsp;</span>		typeStr := stringFor(typ)
<span id="L1620" class="ln">  1620&nbsp;&nbsp;</span>		if typeStr[0] == &#39;&lt;&#39; {
<span id="L1621" class="ln">  1621&nbsp;&nbsp;</span>			<span class="comment">// typ is recv chan, need parentheses as &#34;&lt;-&#34; associates with leftmost</span>
<span id="L1622" class="ln">  1622&nbsp;&nbsp;</span>			<span class="comment">// chan possible, see:</span>
<span id="L1623" class="ln">  1623&nbsp;&nbsp;</span>			<span class="comment">// * https://golang.org/ref/spec#Channel_types</span>
<span id="L1624" class="ln">  1624&nbsp;&nbsp;</span>			<span class="comment">// * https://github.com/golang/go/issues/39897</span>
<span id="L1625" class="ln">  1625&nbsp;&nbsp;</span>			s = &#34;chan (&#34; + typeStr + &#34;)&#34;
<span id="L1626" class="ln">  1626&nbsp;&nbsp;</span>		} else {
<span id="L1627" class="ln">  1627&nbsp;&nbsp;</span>			s = &#34;chan &#34; + typeStr
<span id="L1628" class="ln">  1628&nbsp;&nbsp;</span>		}
<span id="L1629" class="ln">  1629&nbsp;&nbsp;</span>	}
<span id="L1630" class="ln">  1630&nbsp;&nbsp;</span>	for _, tt := range typesByString(s) {
<span id="L1631" class="ln">  1631&nbsp;&nbsp;</span>		ch := (*chanType)(unsafe.Pointer(tt))
<span id="L1632" class="ln">  1632&nbsp;&nbsp;</span>		if ch.Elem == typ &amp;&amp; ch.Dir == abi.ChanDir(dir) {
<span id="L1633" class="ln">  1633&nbsp;&nbsp;</span>			ti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))
<span id="L1634" class="ln">  1634&nbsp;&nbsp;</span>			return ti.(Type)
<span id="L1635" class="ln">  1635&nbsp;&nbsp;</span>		}
<span id="L1636" class="ln">  1636&nbsp;&nbsp;</span>	}
<span id="L1637" class="ln">  1637&nbsp;&nbsp;</span>
<span id="L1638" class="ln">  1638&nbsp;&nbsp;</span>	<span class="comment">// Make a channel type.</span>
<span id="L1639" class="ln">  1639&nbsp;&nbsp;</span>	var ichan any = (chan unsafe.Pointer)(nil)
<span id="L1640" class="ln">  1640&nbsp;&nbsp;</span>	prototype := *(**chanType)(unsafe.Pointer(&amp;ichan))
<span id="L1641" class="ln">  1641&nbsp;&nbsp;</span>	ch := *prototype
<span id="L1642" class="ln">  1642&nbsp;&nbsp;</span>	ch.TFlag = abi.TFlagRegularMemory
<span id="L1643" class="ln">  1643&nbsp;&nbsp;</span>	ch.Dir = abi.ChanDir(dir)
<span id="L1644" class="ln">  1644&nbsp;&nbsp;</span>	ch.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L1645" class="ln">  1645&nbsp;&nbsp;</span>	ch.Hash = fnv1(typ.Hash, &#39;c&#39;, byte(dir))
<span id="L1646" class="ln">  1646&nbsp;&nbsp;</span>	ch.Elem = typ
<span id="L1647" class="ln">  1647&nbsp;&nbsp;</span>
<span id="L1648" class="ln">  1648&nbsp;&nbsp;</span>	ti, _ := lookupCache.LoadOrStore(ckey, toRType(&amp;ch.Type))
<span id="L1649" class="ln">  1649&nbsp;&nbsp;</span>	return ti.(Type)
<span id="L1650" class="ln">  1650&nbsp;&nbsp;</span>}
<span id="L1651" class="ln">  1651&nbsp;&nbsp;</span>
<span id="L1652" class="ln">  1652&nbsp;&nbsp;</span><span class="comment">// MapOf returns the map type with the given key and element types.</span>
<span id="L1653" class="ln">  1653&nbsp;&nbsp;</span><span class="comment">// For example, if k represents int and e represents string,</span>
<span id="L1654" class="ln">  1654&nbsp;&nbsp;</span><span class="comment">// MapOf(k, e) represents map[int]string.</span>
<span id="L1655" class="ln">  1655&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1656" class="ln">  1656&nbsp;&nbsp;</span><span class="comment">// If the key type is not a valid map key type (that is, if it does</span>
<span id="L1657" class="ln">  1657&nbsp;&nbsp;</span><span class="comment">// not implement Go&#39;s == operator), MapOf panics.</span>
<span id="L1658" class="ln">  1658&nbsp;&nbsp;</span>func MapOf(key, elem Type) Type {
<span id="L1659" class="ln">  1659&nbsp;&nbsp;</span>	ktyp := key.common()
<span id="L1660" class="ln">  1660&nbsp;&nbsp;</span>	etyp := elem.common()
<span id="L1661" class="ln">  1661&nbsp;&nbsp;</span>
<span id="L1662" class="ln">  1662&nbsp;&nbsp;</span>	if ktyp.Equal == nil {
<span id="L1663" class="ln">  1663&nbsp;&nbsp;</span>		panic(&#34;reflect.MapOf: invalid key type &#34; + stringFor(ktyp))
<span id="L1664" class="ln">  1664&nbsp;&nbsp;</span>	}
<span id="L1665" class="ln">  1665&nbsp;&nbsp;</span>
<span id="L1666" class="ln">  1666&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L1667" class="ln">  1667&nbsp;&nbsp;</span>	ckey := cacheKey{Map, ktyp, etyp, 0}
<span id="L1668" class="ln">  1668&nbsp;&nbsp;</span>	if mt, ok := lookupCache.Load(ckey); ok {
<span id="L1669" class="ln">  1669&nbsp;&nbsp;</span>		return mt.(Type)
<span id="L1670" class="ln">  1670&nbsp;&nbsp;</span>	}
<span id="L1671" class="ln">  1671&nbsp;&nbsp;</span>
<span id="L1672" class="ln">  1672&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L1673" class="ln">  1673&nbsp;&nbsp;</span>	s := &#34;map[&#34; + stringFor(ktyp) + &#34;]&#34; + stringFor(etyp)
<span id="L1674" class="ln">  1674&nbsp;&nbsp;</span>	for _, tt := range typesByString(s) {
<span id="L1675" class="ln">  1675&nbsp;&nbsp;</span>		mt := (*mapType)(unsafe.Pointer(tt))
<span id="L1676" class="ln">  1676&nbsp;&nbsp;</span>		if mt.Key == ktyp &amp;&amp; mt.Elem == etyp {
<span id="L1677" class="ln">  1677&nbsp;&nbsp;</span>			ti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))
<span id="L1678" class="ln">  1678&nbsp;&nbsp;</span>			return ti.(Type)
<span id="L1679" class="ln">  1679&nbsp;&nbsp;</span>		}
<span id="L1680" class="ln">  1680&nbsp;&nbsp;</span>	}
<span id="L1681" class="ln">  1681&nbsp;&nbsp;</span>
<span id="L1682" class="ln">  1682&nbsp;&nbsp;</span>	<span class="comment">// Make a map type.</span>
<span id="L1683" class="ln">  1683&nbsp;&nbsp;</span>	<span class="comment">// Note: flag values must match those used in the TMAP case</span>
<span id="L1684" class="ln">  1684&nbsp;&nbsp;</span>	<span class="comment">// in ../cmd/compile/internal/reflectdata/reflect.go:writeType.</span>
<span id="L1685" class="ln">  1685&nbsp;&nbsp;</span>	var imap any = (map[unsafe.Pointer]unsafe.Pointer)(nil)
<span id="L1686" class="ln">  1686&nbsp;&nbsp;</span>	mt := **(**mapType)(unsafe.Pointer(&amp;imap))
<span id="L1687" class="ln">  1687&nbsp;&nbsp;</span>	mt.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L1688" class="ln">  1688&nbsp;&nbsp;</span>	mt.TFlag = 0
<span id="L1689" class="ln">  1689&nbsp;&nbsp;</span>	mt.Hash = fnv1(etyp.Hash, &#39;m&#39;, byte(ktyp.Hash&gt;&gt;24), byte(ktyp.Hash&gt;&gt;16), byte(ktyp.Hash&gt;&gt;8), byte(ktyp.Hash))
<span id="L1690" class="ln">  1690&nbsp;&nbsp;</span>	mt.Key = ktyp
<span id="L1691" class="ln">  1691&nbsp;&nbsp;</span>	mt.Elem = etyp
<span id="L1692" class="ln">  1692&nbsp;&nbsp;</span>	mt.Bucket = bucketOf(ktyp, etyp)
<span id="L1693" class="ln">  1693&nbsp;&nbsp;</span>	mt.Hasher = func(p unsafe.Pointer, seed uintptr) uintptr {
<span id="L1694" class="ln">  1694&nbsp;&nbsp;</span>		return typehash(ktyp, p, seed)
<span id="L1695" class="ln">  1695&nbsp;&nbsp;</span>	}
<span id="L1696" class="ln">  1696&nbsp;&nbsp;</span>	mt.Flags = 0
<span id="L1697" class="ln">  1697&nbsp;&nbsp;</span>	if ktyp.Size_ &gt; maxKeySize {
<span id="L1698" class="ln">  1698&nbsp;&nbsp;</span>		mt.KeySize = uint8(goarch.PtrSize)
<span id="L1699" class="ln">  1699&nbsp;&nbsp;</span>		mt.Flags |= 1 <span class="comment">// indirect key</span>
<span id="L1700" class="ln">  1700&nbsp;&nbsp;</span>	} else {
<span id="L1701" class="ln">  1701&nbsp;&nbsp;</span>		mt.KeySize = uint8(ktyp.Size_)
<span id="L1702" class="ln">  1702&nbsp;&nbsp;</span>	}
<span id="L1703" class="ln">  1703&nbsp;&nbsp;</span>	if etyp.Size_ &gt; maxValSize {
<span id="L1704" class="ln">  1704&nbsp;&nbsp;</span>		mt.ValueSize = uint8(goarch.PtrSize)
<span id="L1705" class="ln">  1705&nbsp;&nbsp;</span>		mt.Flags |= 2 <span class="comment">// indirect value</span>
<span id="L1706" class="ln">  1706&nbsp;&nbsp;</span>	} else {
<span id="L1707" class="ln">  1707&nbsp;&nbsp;</span>		mt.MapType.ValueSize = uint8(etyp.Size_)
<span id="L1708" class="ln">  1708&nbsp;&nbsp;</span>	}
<span id="L1709" class="ln">  1709&nbsp;&nbsp;</span>	mt.MapType.BucketSize = uint16(mt.Bucket.Size_)
<span id="L1710" class="ln">  1710&nbsp;&nbsp;</span>	if isReflexive(ktyp) {
<span id="L1711" class="ln">  1711&nbsp;&nbsp;</span>		mt.Flags |= 4
<span id="L1712" class="ln">  1712&nbsp;&nbsp;</span>	}
<span id="L1713" class="ln">  1713&nbsp;&nbsp;</span>	if needKeyUpdate(ktyp) {
<span id="L1714" class="ln">  1714&nbsp;&nbsp;</span>		mt.Flags |= 8
<span id="L1715" class="ln">  1715&nbsp;&nbsp;</span>	}
<span id="L1716" class="ln">  1716&nbsp;&nbsp;</span>	if hashMightPanic(ktyp) {
<span id="L1717" class="ln">  1717&nbsp;&nbsp;</span>		mt.Flags |= 16
<span id="L1718" class="ln">  1718&nbsp;&nbsp;</span>	}
<span id="L1719" class="ln">  1719&nbsp;&nbsp;</span>	mt.PtrToThis = 0
<span id="L1720" class="ln">  1720&nbsp;&nbsp;</span>
<span id="L1721" class="ln">  1721&nbsp;&nbsp;</span>	ti, _ := lookupCache.LoadOrStore(ckey, toRType(&amp;mt.Type))
<span id="L1722" class="ln">  1722&nbsp;&nbsp;</span>	return ti.(Type)
<span id="L1723" class="ln">  1723&nbsp;&nbsp;</span>}
<span id="L1724" class="ln">  1724&nbsp;&nbsp;</span>
<span id="L1725" class="ln">  1725&nbsp;&nbsp;</span>var funcTypes []Type
<span id="L1726" class="ln">  1726&nbsp;&nbsp;</span>var funcTypesMutex sync.Mutex
<span id="L1727" class="ln">  1727&nbsp;&nbsp;</span>
<span id="L1728" class="ln">  1728&nbsp;&nbsp;</span>func initFuncTypes(n int) Type {
<span id="L1729" class="ln">  1729&nbsp;&nbsp;</span>	funcTypesMutex.Lock()
<span id="L1730" class="ln">  1730&nbsp;&nbsp;</span>	defer funcTypesMutex.Unlock()
<span id="L1731" class="ln">  1731&nbsp;&nbsp;</span>	if n &gt;= len(funcTypes) {
<span id="L1732" class="ln">  1732&nbsp;&nbsp;</span>		newFuncTypes := make([]Type, n+1)
<span id="L1733" class="ln">  1733&nbsp;&nbsp;</span>		copy(newFuncTypes, funcTypes)
<span id="L1734" class="ln">  1734&nbsp;&nbsp;</span>		funcTypes = newFuncTypes
<span id="L1735" class="ln">  1735&nbsp;&nbsp;</span>	}
<span id="L1736" class="ln">  1736&nbsp;&nbsp;</span>	if funcTypes[n] != nil {
<span id="L1737" class="ln">  1737&nbsp;&nbsp;</span>		return funcTypes[n]
<span id="L1738" class="ln">  1738&nbsp;&nbsp;</span>	}
<span id="L1739" class="ln">  1739&nbsp;&nbsp;</span>
<span id="L1740" class="ln">  1740&nbsp;&nbsp;</span>	funcTypes[n] = StructOf([]StructField{
<span id="L1741" class="ln">  1741&nbsp;&nbsp;</span>		{
<span id="L1742" class="ln">  1742&nbsp;&nbsp;</span>			Name: &#34;FuncType&#34;,
<span id="L1743" class="ln">  1743&nbsp;&nbsp;</span>			Type: TypeOf(funcType{}),
<span id="L1744" class="ln">  1744&nbsp;&nbsp;</span>		},
<span id="L1745" class="ln">  1745&nbsp;&nbsp;</span>		{
<span id="L1746" class="ln">  1746&nbsp;&nbsp;</span>			Name: &#34;Args&#34;,
<span id="L1747" class="ln">  1747&nbsp;&nbsp;</span>			Type: ArrayOf(n, TypeOf(&amp;rtype{})),
<span id="L1748" class="ln">  1748&nbsp;&nbsp;</span>		},
<span id="L1749" class="ln">  1749&nbsp;&nbsp;</span>	})
<span id="L1750" class="ln">  1750&nbsp;&nbsp;</span>	return funcTypes[n]
<span id="L1751" class="ln">  1751&nbsp;&nbsp;</span>}
<span id="L1752" class="ln">  1752&nbsp;&nbsp;</span>
<span id="L1753" class="ln">  1753&nbsp;&nbsp;</span><span class="comment">// FuncOf returns the function type with the given argument and result types.</span>
<span id="L1754" class="ln">  1754&nbsp;&nbsp;</span><span class="comment">// For example if k represents int and e represents string,</span>
<span id="L1755" class="ln">  1755&nbsp;&nbsp;</span><span class="comment">// FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.</span>
<span id="L1756" class="ln">  1756&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L1757" class="ln">  1757&nbsp;&nbsp;</span><span class="comment">// The variadic argument controls whether the function is variadic. FuncOf</span>
<span id="L1758" class="ln">  1758&nbsp;&nbsp;</span><span class="comment">// panics if the in[len(in)-1] does not represent a slice and variadic is</span>
<span id="L1759" class="ln">  1759&nbsp;&nbsp;</span><span class="comment">// true.</span>
<span id="L1760" class="ln">  1760&nbsp;&nbsp;</span>func FuncOf(in, out []Type, variadic bool) Type {
<span id="L1761" class="ln">  1761&nbsp;&nbsp;</span>	if variadic &amp;&amp; (len(in) == 0 || in[len(in)-1].Kind() != Slice) {
<span id="L1762" class="ln">  1762&nbsp;&nbsp;</span>		panic(&#34;reflect.FuncOf: last arg of variadic func must be slice&#34;)
<span id="L1763" class="ln">  1763&nbsp;&nbsp;</span>	}
<span id="L1764" class="ln">  1764&nbsp;&nbsp;</span>
<span id="L1765" class="ln">  1765&nbsp;&nbsp;</span>	<span class="comment">// Make a func type.</span>
<span id="L1766" class="ln">  1766&nbsp;&nbsp;</span>	var ifunc any = (func())(nil)
<span id="L1767" class="ln">  1767&nbsp;&nbsp;</span>	prototype := *(**funcType)(unsafe.Pointer(&amp;ifunc))
<span id="L1768" class="ln">  1768&nbsp;&nbsp;</span>	n := len(in) + len(out)
<span id="L1769" class="ln">  1769&nbsp;&nbsp;</span>
<span id="L1770" class="ln">  1770&nbsp;&nbsp;</span>	if n &gt; 128 {
<span id="L1771" class="ln">  1771&nbsp;&nbsp;</span>		panic(&#34;reflect.FuncOf: too many arguments&#34;)
<span id="L1772" class="ln">  1772&nbsp;&nbsp;</span>	}
<span id="L1773" class="ln">  1773&nbsp;&nbsp;</span>
<span id="L1774" class="ln">  1774&nbsp;&nbsp;</span>	o := New(initFuncTypes(n)).Elem()
<span id="L1775" class="ln">  1775&nbsp;&nbsp;</span>	ft := (*funcType)(unsafe.Pointer(o.Field(0).Addr().Pointer()))
<span id="L1776" class="ln">  1776&nbsp;&nbsp;</span>	args := unsafe.Slice((**rtype)(unsafe.Pointer(o.Field(1).Addr().Pointer())), n)[0:0:n]
<span id="L1777" class="ln">  1777&nbsp;&nbsp;</span>	*ft = *prototype
<span id="L1778" class="ln">  1778&nbsp;&nbsp;</span>
<span id="L1779" class="ln">  1779&nbsp;&nbsp;</span>	<span class="comment">// Build a hash and minimally populate ft.</span>
<span id="L1780" class="ln">  1780&nbsp;&nbsp;</span>	var hash uint32
<span id="L1781" class="ln">  1781&nbsp;&nbsp;</span>	for _, in := range in {
<span id="L1782" class="ln">  1782&nbsp;&nbsp;</span>		t := in.(*rtype)
<span id="L1783" class="ln">  1783&nbsp;&nbsp;</span>		args = append(args, t)
<span id="L1784" class="ln">  1784&nbsp;&nbsp;</span>		hash = fnv1(hash, byte(t.t.Hash&gt;&gt;24), byte(t.t.Hash&gt;&gt;16), byte(t.t.Hash&gt;&gt;8), byte(t.t.Hash))
<span id="L1785" class="ln">  1785&nbsp;&nbsp;</span>	}
<span id="L1786" class="ln">  1786&nbsp;&nbsp;</span>	if variadic {
<span id="L1787" class="ln">  1787&nbsp;&nbsp;</span>		hash = fnv1(hash, &#39;v&#39;)
<span id="L1788" class="ln">  1788&nbsp;&nbsp;</span>	}
<span id="L1789" class="ln">  1789&nbsp;&nbsp;</span>	hash = fnv1(hash, &#39;.&#39;)
<span id="L1790" class="ln">  1790&nbsp;&nbsp;</span>	for _, out := range out {
<span id="L1791" class="ln">  1791&nbsp;&nbsp;</span>		t := out.(*rtype)
<span id="L1792" class="ln">  1792&nbsp;&nbsp;</span>		args = append(args, t)
<span id="L1793" class="ln">  1793&nbsp;&nbsp;</span>		hash = fnv1(hash, byte(t.t.Hash&gt;&gt;24), byte(t.t.Hash&gt;&gt;16), byte(t.t.Hash&gt;&gt;8), byte(t.t.Hash))
<span id="L1794" class="ln">  1794&nbsp;&nbsp;</span>	}
<span id="L1795" class="ln">  1795&nbsp;&nbsp;</span>
<span id="L1796" class="ln">  1796&nbsp;&nbsp;</span>	ft.TFlag = 0
<span id="L1797" class="ln">  1797&nbsp;&nbsp;</span>	ft.Hash = hash
<span id="L1798" class="ln">  1798&nbsp;&nbsp;</span>	ft.InCount = uint16(len(in))
<span id="L1799" class="ln">  1799&nbsp;&nbsp;</span>	ft.OutCount = uint16(len(out))
<span id="L1800" class="ln">  1800&nbsp;&nbsp;</span>	if variadic {
<span id="L1801" class="ln">  1801&nbsp;&nbsp;</span>		ft.OutCount |= 1 &lt;&lt; 15
<span id="L1802" class="ln">  1802&nbsp;&nbsp;</span>	}
<span id="L1803" class="ln">  1803&nbsp;&nbsp;</span>
<span id="L1804" class="ln">  1804&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L1805" class="ln">  1805&nbsp;&nbsp;</span>	if ts, ok := funcLookupCache.m.Load(hash); ok {
<span id="L1806" class="ln">  1806&nbsp;&nbsp;</span>		for _, t := range ts.([]*abi.Type) {
<span id="L1807" class="ln">  1807&nbsp;&nbsp;</span>			if haveIdenticalUnderlyingType(&amp;ft.Type, t, true) {
<span id="L1808" class="ln">  1808&nbsp;&nbsp;</span>				return toRType(t)
<span id="L1809" class="ln">  1809&nbsp;&nbsp;</span>			}
<span id="L1810" class="ln">  1810&nbsp;&nbsp;</span>		}
<span id="L1811" class="ln">  1811&nbsp;&nbsp;</span>	}
<span id="L1812" class="ln">  1812&nbsp;&nbsp;</span>
<span id="L1813" class="ln">  1813&nbsp;&nbsp;</span>	<span class="comment">// Not in cache, lock and retry.</span>
<span id="L1814" class="ln">  1814&nbsp;&nbsp;</span>	funcLookupCache.Lock()
<span id="L1815" class="ln">  1815&nbsp;&nbsp;</span>	defer funcLookupCache.Unlock()
<span id="L1816" class="ln">  1816&nbsp;&nbsp;</span>	if ts, ok := funcLookupCache.m.Load(hash); ok {
<span id="L1817" class="ln">  1817&nbsp;&nbsp;</span>		for _, t := range ts.([]*abi.Type) {
<span id="L1818" class="ln">  1818&nbsp;&nbsp;</span>			if haveIdenticalUnderlyingType(&amp;ft.Type, t, true) {
<span id="L1819" class="ln">  1819&nbsp;&nbsp;</span>				return toRType(t)
<span id="L1820" class="ln">  1820&nbsp;&nbsp;</span>			}
<span id="L1821" class="ln">  1821&nbsp;&nbsp;</span>		}
<span id="L1822" class="ln">  1822&nbsp;&nbsp;</span>	}
<span id="L1823" class="ln">  1823&nbsp;&nbsp;</span>
<span id="L1824" class="ln">  1824&nbsp;&nbsp;</span>	addToCache := func(tt *abi.Type) Type {
<span id="L1825" class="ln">  1825&nbsp;&nbsp;</span>		var rts []*abi.Type
<span id="L1826" class="ln">  1826&nbsp;&nbsp;</span>		if rti, ok := funcLookupCache.m.Load(hash); ok {
<span id="L1827" class="ln">  1827&nbsp;&nbsp;</span>			rts = rti.([]*abi.Type)
<span id="L1828" class="ln">  1828&nbsp;&nbsp;</span>		}
<span id="L1829" class="ln">  1829&nbsp;&nbsp;</span>		funcLookupCache.m.Store(hash, append(rts, tt))
<span id="L1830" class="ln">  1830&nbsp;&nbsp;</span>		return toType(tt)
<span id="L1831" class="ln">  1831&nbsp;&nbsp;</span>	}
<span id="L1832" class="ln">  1832&nbsp;&nbsp;</span>
<span id="L1833" class="ln">  1833&nbsp;&nbsp;</span>	<span class="comment">// Look in known types for the same string representation.</span>
<span id="L1834" class="ln">  1834&nbsp;&nbsp;</span>	str := funcStr(ft)
<span id="L1835" class="ln">  1835&nbsp;&nbsp;</span>	for _, tt := range typesByString(str) {
<span id="L1836" class="ln">  1836&nbsp;&nbsp;</span>		if haveIdenticalUnderlyingType(&amp;ft.Type, tt, true) {
<span id="L1837" class="ln">  1837&nbsp;&nbsp;</span>			return addToCache(tt)
<span id="L1838" class="ln">  1838&nbsp;&nbsp;</span>		}
<span id="L1839" class="ln">  1839&nbsp;&nbsp;</span>	}
<span id="L1840" class="ln">  1840&nbsp;&nbsp;</span>
<span id="L1841" class="ln">  1841&nbsp;&nbsp;</span>	<span class="comment">// Populate the remaining fields of ft and store in cache.</span>
<span id="L1842" class="ln">  1842&nbsp;&nbsp;</span>	ft.Str = resolveReflectName(newName(str, &#34;&#34;, false, false))
<span id="L1843" class="ln">  1843&nbsp;&nbsp;</span>	ft.PtrToThis = 0
<span id="L1844" class="ln">  1844&nbsp;&nbsp;</span>	return addToCache(&amp;ft.Type)
<span id="L1845" class="ln">  1845&nbsp;&nbsp;</span>}
<span id="L1846" class="ln">  1846&nbsp;&nbsp;</span>func stringFor(t *abi.Type) string {
<span id="L1847" class="ln">  1847&nbsp;&nbsp;</span>	return toRType(t).String()
<span id="L1848" class="ln">  1848&nbsp;&nbsp;</span>}
<span id="L1849" class="ln">  1849&nbsp;&nbsp;</span>
<span id="L1850" class="ln">  1850&nbsp;&nbsp;</span><span class="comment">// funcStr builds a string representation of a funcType.</span>
<span id="L1851" class="ln">  1851&nbsp;&nbsp;</span>func funcStr(ft *funcType) string {
<span id="L1852" class="ln">  1852&nbsp;&nbsp;</span>	repr := make([]byte, 0, 64)
<span id="L1853" class="ln">  1853&nbsp;&nbsp;</span>	repr = append(repr, &#34;func(&#34;...)
<span id="L1854" class="ln">  1854&nbsp;&nbsp;</span>	for i, t := range ft.InSlice() {
<span id="L1855" class="ln">  1855&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L1856" class="ln">  1856&nbsp;&nbsp;</span>			repr = append(repr, &#34;, &#34;...)
<span id="L1857" class="ln">  1857&nbsp;&nbsp;</span>		}
<span id="L1858" class="ln">  1858&nbsp;&nbsp;</span>		if ft.IsVariadic() &amp;&amp; i == int(ft.InCount)-1 {
<span id="L1859" class="ln">  1859&nbsp;&nbsp;</span>			repr = append(repr, &#34;...&#34;...)
<span id="L1860" class="ln">  1860&nbsp;&nbsp;</span>			repr = append(repr, stringFor((*sliceType)(unsafe.Pointer(t)).Elem)...)
<span id="L1861" class="ln">  1861&nbsp;&nbsp;</span>		} else {
<span id="L1862" class="ln">  1862&nbsp;&nbsp;</span>			repr = append(repr, stringFor(t)...)
<span id="L1863" class="ln">  1863&nbsp;&nbsp;</span>		}
<span id="L1864" class="ln">  1864&nbsp;&nbsp;</span>	}
<span id="L1865" class="ln">  1865&nbsp;&nbsp;</span>	repr = append(repr, &#39;)&#39;)
<span id="L1866" class="ln">  1866&nbsp;&nbsp;</span>	out := ft.OutSlice()
<span id="L1867" class="ln">  1867&nbsp;&nbsp;</span>	if len(out) == 1 {
<span id="L1868" class="ln">  1868&nbsp;&nbsp;</span>		repr = append(repr, &#39; &#39;)
<span id="L1869" class="ln">  1869&nbsp;&nbsp;</span>	} else if len(out) &gt; 1 {
<span id="L1870" class="ln">  1870&nbsp;&nbsp;</span>		repr = append(repr, &#34; (&#34;...)
<span id="L1871" class="ln">  1871&nbsp;&nbsp;</span>	}
<span id="L1872" class="ln">  1872&nbsp;&nbsp;</span>	for i, t := range out {
<span id="L1873" class="ln">  1873&nbsp;&nbsp;</span>		if i &gt; 0 {
<span id="L1874" class="ln">  1874&nbsp;&nbsp;</span>			repr = append(repr, &#34;, &#34;...)
<span id="L1875" class="ln">  1875&nbsp;&nbsp;</span>		}
<span id="L1876" class="ln">  1876&nbsp;&nbsp;</span>		repr = append(repr, stringFor(t)...)
<span id="L1877" class="ln">  1877&nbsp;&nbsp;</span>	}
<span id="L1878" class="ln">  1878&nbsp;&nbsp;</span>	if len(out) &gt; 1 {
<span id="L1879" class="ln">  1879&nbsp;&nbsp;</span>		repr = append(repr, &#39;)&#39;)
<span id="L1880" class="ln">  1880&nbsp;&nbsp;</span>	}
<span id="L1881" class="ln">  1881&nbsp;&nbsp;</span>	return string(repr)
<span id="L1882" class="ln">  1882&nbsp;&nbsp;</span>}
<span id="L1883" class="ln">  1883&nbsp;&nbsp;</span>
<span id="L1884" class="ln">  1884&nbsp;&nbsp;</span><span class="comment">// isReflexive reports whether the == operation on the type is reflexive.</span>
<span id="L1885" class="ln">  1885&nbsp;&nbsp;</span><span class="comment">// That is, x == x for all values x of type t.</span>
<span id="L1886" class="ln">  1886&nbsp;&nbsp;</span>func isReflexive(t *abi.Type) bool {
<span id="L1887" class="ln">  1887&nbsp;&nbsp;</span>	switch Kind(t.Kind()) {
<span id="L1888" class="ln">  1888&nbsp;&nbsp;</span>	case Bool, Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr, Chan, Pointer, String, UnsafePointer:
<span id="L1889" class="ln">  1889&nbsp;&nbsp;</span>		return true
<span id="L1890" class="ln">  1890&nbsp;&nbsp;</span>	case Float32, Float64, Complex64, Complex128, Interface:
<span id="L1891" class="ln">  1891&nbsp;&nbsp;</span>		return false
<span id="L1892" class="ln">  1892&nbsp;&nbsp;</span>	case Array:
<span id="L1893" class="ln">  1893&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(t))
<span id="L1894" class="ln">  1894&nbsp;&nbsp;</span>		return isReflexive(tt.Elem)
<span id="L1895" class="ln">  1895&nbsp;&nbsp;</span>	case Struct:
<span id="L1896" class="ln">  1896&nbsp;&nbsp;</span>		tt := (*structType)(unsafe.Pointer(t))
<span id="L1897" class="ln">  1897&nbsp;&nbsp;</span>		for _, f := range tt.Fields {
<span id="L1898" class="ln">  1898&nbsp;&nbsp;</span>			if !isReflexive(f.Typ) {
<span id="L1899" class="ln">  1899&nbsp;&nbsp;</span>				return false
<span id="L1900" class="ln">  1900&nbsp;&nbsp;</span>			}
<span id="L1901" class="ln">  1901&nbsp;&nbsp;</span>		}
<span id="L1902" class="ln">  1902&nbsp;&nbsp;</span>		return true
<span id="L1903" class="ln">  1903&nbsp;&nbsp;</span>	default:
<span id="L1904" class="ln">  1904&nbsp;&nbsp;</span>		<span class="comment">// Func, Map, Slice, Invalid</span>
<span id="L1905" class="ln">  1905&nbsp;&nbsp;</span>		panic(&#34;isReflexive called on non-key type &#34; + stringFor(t))
<span id="L1906" class="ln">  1906&nbsp;&nbsp;</span>	}
<span id="L1907" class="ln">  1907&nbsp;&nbsp;</span>}
<span id="L1908" class="ln">  1908&nbsp;&nbsp;</span>
<span id="L1909" class="ln">  1909&nbsp;&nbsp;</span><span class="comment">// needKeyUpdate reports whether map overwrites require the key to be copied.</span>
<span id="L1910" class="ln">  1910&nbsp;&nbsp;</span>func needKeyUpdate(t *abi.Type) bool {
<span id="L1911" class="ln">  1911&nbsp;&nbsp;</span>	switch Kind(t.Kind()) {
<span id="L1912" class="ln">  1912&nbsp;&nbsp;</span>	case Bool, Int, Int8, Int16, Int32, Int64, Uint, Uint8, Uint16, Uint32, Uint64, Uintptr, Chan, Pointer, UnsafePointer:
<span id="L1913" class="ln">  1913&nbsp;&nbsp;</span>		return false
<span id="L1914" class="ln">  1914&nbsp;&nbsp;</span>	case Float32, Float64, Complex64, Complex128, Interface, String:
<span id="L1915" class="ln">  1915&nbsp;&nbsp;</span>		<span class="comment">// Float keys can be updated from +0 to -0.</span>
<span id="L1916" class="ln">  1916&nbsp;&nbsp;</span>		<span class="comment">// String keys can be updated to use a smaller backing store.</span>
<span id="L1917" class="ln">  1917&nbsp;&nbsp;</span>		<span class="comment">// Interfaces might have floats or strings in them.</span>
<span id="L1918" class="ln">  1918&nbsp;&nbsp;</span>		return true
<span id="L1919" class="ln">  1919&nbsp;&nbsp;</span>	case Array:
<span id="L1920" class="ln">  1920&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(t))
<span id="L1921" class="ln">  1921&nbsp;&nbsp;</span>		return needKeyUpdate(tt.Elem)
<span id="L1922" class="ln">  1922&nbsp;&nbsp;</span>	case Struct:
<span id="L1923" class="ln">  1923&nbsp;&nbsp;</span>		tt := (*structType)(unsafe.Pointer(t))
<span id="L1924" class="ln">  1924&nbsp;&nbsp;</span>		for _, f := range tt.Fields {
<span id="L1925" class="ln">  1925&nbsp;&nbsp;</span>			if needKeyUpdate(f.Typ) {
<span id="L1926" class="ln">  1926&nbsp;&nbsp;</span>				return true
<span id="L1927" class="ln">  1927&nbsp;&nbsp;</span>			}
<span id="L1928" class="ln">  1928&nbsp;&nbsp;</span>		}
<span id="L1929" class="ln">  1929&nbsp;&nbsp;</span>		return false
<span id="L1930" class="ln">  1930&nbsp;&nbsp;</span>	default:
<span id="L1931" class="ln">  1931&nbsp;&nbsp;</span>		<span class="comment">// Func, Map, Slice, Invalid</span>
<span id="L1932" class="ln">  1932&nbsp;&nbsp;</span>		panic(&#34;needKeyUpdate called on non-key type &#34; + stringFor(t))
<span id="L1933" class="ln">  1933&nbsp;&nbsp;</span>	}
<span id="L1934" class="ln">  1934&nbsp;&nbsp;</span>}
<span id="L1935" class="ln">  1935&nbsp;&nbsp;</span>
<span id="L1936" class="ln">  1936&nbsp;&nbsp;</span><span class="comment">// hashMightPanic reports whether the hash of a map key of type t might panic.</span>
<span id="L1937" class="ln">  1937&nbsp;&nbsp;</span>func hashMightPanic(t *abi.Type) bool {
<span id="L1938" class="ln">  1938&nbsp;&nbsp;</span>	switch Kind(t.Kind()) {
<span id="L1939" class="ln">  1939&nbsp;&nbsp;</span>	case Interface:
<span id="L1940" class="ln">  1940&nbsp;&nbsp;</span>		return true
<span id="L1941" class="ln">  1941&nbsp;&nbsp;</span>	case Array:
<span id="L1942" class="ln">  1942&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(t))
<span id="L1943" class="ln">  1943&nbsp;&nbsp;</span>		return hashMightPanic(tt.Elem)
<span id="L1944" class="ln">  1944&nbsp;&nbsp;</span>	case Struct:
<span id="L1945" class="ln">  1945&nbsp;&nbsp;</span>		tt := (*structType)(unsafe.Pointer(t))
<span id="L1946" class="ln">  1946&nbsp;&nbsp;</span>		for _, f := range tt.Fields {
<span id="L1947" class="ln">  1947&nbsp;&nbsp;</span>			if hashMightPanic(f.Typ) {
<span id="L1948" class="ln">  1948&nbsp;&nbsp;</span>				return true
<span id="L1949" class="ln">  1949&nbsp;&nbsp;</span>			}
<span id="L1950" class="ln">  1950&nbsp;&nbsp;</span>		}
<span id="L1951" class="ln">  1951&nbsp;&nbsp;</span>		return false
<span id="L1952" class="ln">  1952&nbsp;&nbsp;</span>	default:
<span id="L1953" class="ln">  1953&nbsp;&nbsp;</span>		return false
<span id="L1954" class="ln">  1954&nbsp;&nbsp;</span>	}
<span id="L1955" class="ln">  1955&nbsp;&nbsp;</span>}
<span id="L1956" class="ln">  1956&nbsp;&nbsp;</span>
<span id="L1957" class="ln">  1957&nbsp;&nbsp;</span><span class="comment">// Make sure these routines stay in sync with ../runtime/map.go!</span>
<span id="L1958" class="ln">  1958&nbsp;&nbsp;</span><span class="comment">// These types exist only for GC, so we only fill out GC relevant info.</span>
<span id="L1959" class="ln">  1959&nbsp;&nbsp;</span><span class="comment">// Currently, that&#39;s just size and the GC program. We also fill in string</span>
<span id="L1960" class="ln">  1960&nbsp;&nbsp;</span><span class="comment">// for possible debugging use.</span>
<span id="L1961" class="ln">  1961&nbsp;&nbsp;</span>const (
<span id="L1962" class="ln">  1962&nbsp;&nbsp;</span>	bucketSize uintptr = abi.MapBucketCount
<span id="L1963" class="ln">  1963&nbsp;&nbsp;</span>	maxKeySize uintptr = abi.MapMaxKeyBytes
<span id="L1964" class="ln">  1964&nbsp;&nbsp;</span>	maxValSize uintptr = abi.MapMaxElemBytes
<span id="L1965" class="ln">  1965&nbsp;&nbsp;</span>)
<span id="L1966" class="ln">  1966&nbsp;&nbsp;</span>
<span id="L1967" class="ln">  1967&nbsp;&nbsp;</span>func bucketOf(ktyp, etyp *abi.Type) *abi.Type {
<span id="L1968" class="ln">  1968&nbsp;&nbsp;</span>	if ktyp.Size_ &gt; maxKeySize {
<span id="L1969" class="ln">  1969&nbsp;&nbsp;</span>		ktyp = ptrTo(ktyp)
<span id="L1970" class="ln">  1970&nbsp;&nbsp;</span>	}
<span id="L1971" class="ln">  1971&nbsp;&nbsp;</span>	if etyp.Size_ &gt; maxValSize {
<span id="L1972" class="ln">  1972&nbsp;&nbsp;</span>		etyp = ptrTo(etyp)
<span id="L1973" class="ln">  1973&nbsp;&nbsp;</span>	}
<span id="L1974" class="ln">  1974&nbsp;&nbsp;</span>
<span id="L1975" class="ln">  1975&nbsp;&nbsp;</span>	<span class="comment">// Prepare GC data if any.</span>
<span id="L1976" class="ln">  1976&nbsp;&nbsp;</span>	<span class="comment">// A bucket is at most bucketSize*(1+maxKeySize+maxValSize)+ptrSize bytes,</span>
<span id="L1977" class="ln">  1977&nbsp;&nbsp;</span>	<span class="comment">// or 2064 bytes, or 258 pointer-size words, or 33 bytes of pointer bitmap.</span>
<span id="L1978" class="ln">  1978&nbsp;&nbsp;</span>	<span class="comment">// Note that since the key and value are known to be &lt;= 128 bytes,</span>
<span id="L1979" class="ln">  1979&nbsp;&nbsp;</span>	<span class="comment">// they&#39;re guaranteed to have bitmaps instead of GC programs.</span>
<span id="L1980" class="ln">  1980&nbsp;&nbsp;</span>	var gcdata *byte
<span id="L1981" class="ln">  1981&nbsp;&nbsp;</span>	var ptrdata uintptr
<span id="L1982" class="ln">  1982&nbsp;&nbsp;</span>
<span id="L1983" class="ln">  1983&nbsp;&nbsp;</span>	size := bucketSize*(1+ktyp.Size_+etyp.Size_) + goarch.PtrSize
<span id="L1984" class="ln">  1984&nbsp;&nbsp;</span>	if size&amp;uintptr(ktyp.Align_-1) != 0 || size&amp;uintptr(etyp.Align_-1) != 0 {
<span id="L1985" class="ln">  1985&nbsp;&nbsp;</span>		panic(&#34;reflect: bad size computation in MapOf&#34;)
<span id="L1986" class="ln">  1986&nbsp;&nbsp;</span>	}
<span id="L1987" class="ln">  1987&nbsp;&nbsp;</span>
<span id="L1988" class="ln">  1988&nbsp;&nbsp;</span>	if ktyp.PtrBytes != 0 || etyp.PtrBytes != 0 {
<span id="L1989" class="ln">  1989&nbsp;&nbsp;</span>		nptr := (bucketSize*(1+ktyp.Size_+etyp.Size_) + goarch.PtrSize) / goarch.PtrSize
<span id="L1990" class="ln">  1990&nbsp;&nbsp;</span>		n := (nptr + 7) / 8
<span id="L1991" class="ln">  1991&nbsp;&nbsp;</span>
<span id="L1992" class="ln">  1992&nbsp;&nbsp;</span>		<span class="comment">// Runtime needs pointer masks to be a multiple of uintptr in size.</span>
<span id="L1993" class="ln">  1993&nbsp;&nbsp;</span>		n = (n + goarch.PtrSize - 1) &amp;^ (goarch.PtrSize - 1)
<span id="L1994" class="ln">  1994&nbsp;&nbsp;</span>		mask := make([]byte, n)
<span id="L1995" class="ln">  1995&nbsp;&nbsp;</span>		base := bucketSize / goarch.PtrSize
<span id="L1996" class="ln">  1996&nbsp;&nbsp;</span>
<span id="L1997" class="ln">  1997&nbsp;&nbsp;</span>		if ktyp.PtrBytes != 0 {
<span id="L1998" class="ln">  1998&nbsp;&nbsp;</span>			emitGCMask(mask, base, ktyp, bucketSize)
<span id="L1999" class="ln">  1999&nbsp;&nbsp;</span>		}
<span id="L2000" class="ln">  2000&nbsp;&nbsp;</span>		base += bucketSize * ktyp.Size_ / goarch.PtrSize
<span id="L2001" class="ln">  2001&nbsp;&nbsp;</span>
<span id="L2002" class="ln">  2002&nbsp;&nbsp;</span>		if etyp.PtrBytes != 0 {
<span id="L2003" class="ln">  2003&nbsp;&nbsp;</span>			emitGCMask(mask, base, etyp, bucketSize)
<span id="L2004" class="ln">  2004&nbsp;&nbsp;</span>		}
<span id="L2005" class="ln">  2005&nbsp;&nbsp;</span>		base += bucketSize * etyp.Size_ / goarch.PtrSize
<span id="L2006" class="ln">  2006&nbsp;&nbsp;</span>
<span id="L2007" class="ln">  2007&nbsp;&nbsp;</span>		word := base
<span id="L2008" class="ln">  2008&nbsp;&nbsp;</span>		mask[word/8] |= 1 &lt;&lt; (word % 8)
<span id="L2009" class="ln">  2009&nbsp;&nbsp;</span>		gcdata = &amp;mask[0]
<span id="L2010" class="ln">  2010&nbsp;&nbsp;</span>		ptrdata = (word + 1) * goarch.PtrSize
<span id="L2011" class="ln">  2011&nbsp;&nbsp;</span>
<span id="L2012" class="ln">  2012&nbsp;&nbsp;</span>		<span class="comment">// overflow word must be last</span>
<span id="L2013" class="ln">  2013&nbsp;&nbsp;</span>		if ptrdata != size {
<span id="L2014" class="ln">  2014&nbsp;&nbsp;</span>			panic(&#34;reflect: bad layout computation in MapOf&#34;)
<span id="L2015" class="ln">  2015&nbsp;&nbsp;</span>		}
<span id="L2016" class="ln">  2016&nbsp;&nbsp;</span>	}
<span id="L2017" class="ln">  2017&nbsp;&nbsp;</span>
<span id="L2018" class="ln">  2018&nbsp;&nbsp;</span>	b := &amp;abi.Type{
<span id="L2019" class="ln">  2019&nbsp;&nbsp;</span>		Align_:   goarch.PtrSize,
<span id="L2020" class="ln">  2020&nbsp;&nbsp;</span>		Size_:    size,
<span id="L2021" class="ln">  2021&nbsp;&nbsp;</span>		Kind_:    uint8(Struct),
<span id="L2022" class="ln">  2022&nbsp;&nbsp;</span>		PtrBytes: ptrdata,
<span id="L2023" class="ln">  2023&nbsp;&nbsp;</span>		GCData:   gcdata,
<span id="L2024" class="ln">  2024&nbsp;&nbsp;</span>	}
<span id="L2025" class="ln">  2025&nbsp;&nbsp;</span>	s := &#34;bucket(&#34; + stringFor(ktyp) + &#34;,&#34; + stringFor(etyp) + &#34;)&#34;
<span id="L2026" class="ln">  2026&nbsp;&nbsp;</span>	b.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L2027" class="ln">  2027&nbsp;&nbsp;</span>	return b
<span id="L2028" class="ln">  2028&nbsp;&nbsp;</span>}
<span id="L2029" class="ln">  2029&nbsp;&nbsp;</span>
<span id="L2030" class="ln">  2030&nbsp;&nbsp;</span>func (t *rtype) gcSlice(begin, end uintptr) []byte {
<span id="L2031" class="ln">  2031&nbsp;&nbsp;</span>	return (*[1 &lt;&lt; 30]byte)(unsafe.Pointer(t.t.GCData))[begin:end:end]
<span id="L2032" class="ln">  2032&nbsp;&nbsp;</span>}
<span id="L2033" class="ln">  2033&nbsp;&nbsp;</span>
<span id="L2034" class="ln">  2034&nbsp;&nbsp;</span><span class="comment">// emitGCMask writes the GC mask for [n]typ into out, starting at bit</span>
<span id="L2035" class="ln">  2035&nbsp;&nbsp;</span><span class="comment">// offset base.</span>
<span id="L2036" class="ln">  2036&nbsp;&nbsp;</span>func emitGCMask(out []byte, base uintptr, typ *abi.Type, n uintptr) {
<span id="L2037" class="ln">  2037&nbsp;&nbsp;</span>	if typ.Kind_&amp;kindGCProg != 0 {
<span id="L2038" class="ln">  2038&nbsp;&nbsp;</span>		panic(&#34;reflect: unexpected GC program&#34;)
<span id="L2039" class="ln">  2039&nbsp;&nbsp;</span>	}
<span id="L2040" class="ln">  2040&nbsp;&nbsp;</span>	ptrs := typ.PtrBytes / goarch.PtrSize
<span id="L2041" class="ln">  2041&nbsp;&nbsp;</span>	words := typ.Size_ / goarch.PtrSize
<span id="L2042" class="ln">  2042&nbsp;&nbsp;</span>	mask := typ.GcSlice(0, (ptrs+7)/8)
<span id="L2043" class="ln">  2043&nbsp;&nbsp;</span>	for j := uintptr(0); j &lt; ptrs; j++ {
<span id="L2044" class="ln">  2044&nbsp;&nbsp;</span>		if (mask[j/8]&gt;&gt;(j%8))&amp;1 != 0 {
<span id="L2045" class="ln">  2045&nbsp;&nbsp;</span>			for i := uintptr(0); i &lt; n; i++ {
<span id="L2046" class="ln">  2046&nbsp;&nbsp;</span>				k := base + i*words + j
<span id="L2047" class="ln">  2047&nbsp;&nbsp;</span>				out[k/8] |= 1 &lt;&lt; (k % 8)
<span id="L2048" class="ln">  2048&nbsp;&nbsp;</span>			}
<span id="L2049" class="ln">  2049&nbsp;&nbsp;</span>		}
<span id="L2050" class="ln">  2050&nbsp;&nbsp;</span>	}
<span id="L2051" class="ln">  2051&nbsp;&nbsp;</span>}
<span id="L2052" class="ln">  2052&nbsp;&nbsp;</span>
<span id="L2053" class="ln">  2053&nbsp;&nbsp;</span><span class="comment">// appendGCProg appends the GC program for the first ptrdata bytes of</span>
<span id="L2054" class="ln">  2054&nbsp;&nbsp;</span><span class="comment">// typ to dst and returns the extended slice.</span>
<span id="L2055" class="ln">  2055&nbsp;&nbsp;</span>func appendGCProg(dst []byte, typ *abi.Type) []byte {
<span id="L2056" class="ln">  2056&nbsp;&nbsp;</span>	if typ.Kind_&amp;kindGCProg != 0 {
<span id="L2057" class="ln">  2057&nbsp;&nbsp;</span>		<span class="comment">// Element has GC program; emit one element.</span>
<span id="L2058" class="ln">  2058&nbsp;&nbsp;</span>		n := uintptr(*(*uint32)(unsafe.Pointer(typ.GCData)))
<span id="L2059" class="ln">  2059&nbsp;&nbsp;</span>		prog := typ.GcSlice(4, 4+n-1)
<span id="L2060" class="ln">  2060&nbsp;&nbsp;</span>		return append(dst, prog...)
<span id="L2061" class="ln">  2061&nbsp;&nbsp;</span>	}
<span id="L2062" class="ln">  2062&nbsp;&nbsp;</span>
<span id="L2063" class="ln">  2063&nbsp;&nbsp;</span>	<span class="comment">// Element is small with pointer mask; use as literal bits.</span>
<span id="L2064" class="ln">  2064&nbsp;&nbsp;</span>	ptrs := typ.PtrBytes / goarch.PtrSize
<span id="L2065" class="ln">  2065&nbsp;&nbsp;</span>	mask := typ.GcSlice(0, (ptrs+7)/8)
<span id="L2066" class="ln">  2066&nbsp;&nbsp;</span>
<span id="L2067" class="ln">  2067&nbsp;&nbsp;</span>	<span class="comment">// Emit 120-bit chunks of full bytes (max is 127 but we avoid using partial bytes).</span>
<span id="L2068" class="ln">  2068&nbsp;&nbsp;</span>	for ; ptrs &gt; 120; ptrs -= 120 {
<span id="L2069" class="ln">  2069&nbsp;&nbsp;</span>		dst = append(dst, 120)
<span id="L2070" class="ln">  2070&nbsp;&nbsp;</span>		dst = append(dst, mask[:15]...)
<span id="L2071" class="ln">  2071&nbsp;&nbsp;</span>		mask = mask[15:]
<span id="L2072" class="ln">  2072&nbsp;&nbsp;</span>	}
<span id="L2073" class="ln">  2073&nbsp;&nbsp;</span>
<span id="L2074" class="ln">  2074&nbsp;&nbsp;</span>	dst = append(dst, byte(ptrs))
<span id="L2075" class="ln">  2075&nbsp;&nbsp;</span>	dst = append(dst, mask...)
<span id="L2076" class="ln">  2076&nbsp;&nbsp;</span>	return dst
<span id="L2077" class="ln">  2077&nbsp;&nbsp;</span>}
<span id="L2078" class="ln">  2078&nbsp;&nbsp;</span>
<span id="L2079" class="ln">  2079&nbsp;&nbsp;</span><span class="comment">// SliceOf returns the slice type with element type t.</span>
<span id="L2080" class="ln">  2080&nbsp;&nbsp;</span><span class="comment">// For example, if t represents int, SliceOf(t) represents []int.</span>
<span id="L2081" class="ln">  2081&nbsp;&nbsp;</span>func SliceOf(t Type) Type {
<span id="L2082" class="ln">  2082&nbsp;&nbsp;</span>	typ := t.common()
<span id="L2083" class="ln">  2083&nbsp;&nbsp;</span>
<span id="L2084" class="ln">  2084&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L2085" class="ln">  2085&nbsp;&nbsp;</span>	ckey := cacheKey{Slice, typ, nil, 0}
<span id="L2086" class="ln">  2086&nbsp;&nbsp;</span>	if slice, ok := lookupCache.Load(ckey); ok {
<span id="L2087" class="ln">  2087&nbsp;&nbsp;</span>		return slice.(Type)
<span id="L2088" class="ln">  2088&nbsp;&nbsp;</span>	}
<span id="L2089" class="ln">  2089&nbsp;&nbsp;</span>
<span id="L2090" class="ln">  2090&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L2091" class="ln">  2091&nbsp;&nbsp;</span>	s := &#34;[]&#34; + stringFor(typ)
<span id="L2092" class="ln">  2092&nbsp;&nbsp;</span>	for _, tt := range typesByString(s) {
<span id="L2093" class="ln">  2093&nbsp;&nbsp;</span>		slice := (*sliceType)(unsafe.Pointer(tt))
<span id="L2094" class="ln">  2094&nbsp;&nbsp;</span>		if slice.Elem == typ {
<span id="L2095" class="ln">  2095&nbsp;&nbsp;</span>			ti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))
<span id="L2096" class="ln">  2096&nbsp;&nbsp;</span>			return ti.(Type)
<span id="L2097" class="ln">  2097&nbsp;&nbsp;</span>		}
<span id="L2098" class="ln">  2098&nbsp;&nbsp;</span>	}
<span id="L2099" class="ln">  2099&nbsp;&nbsp;</span>
<span id="L2100" class="ln">  2100&nbsp;&nbsp;</span>	<span class="comment">// Make a slice type.</span>
<span id="L2101" class="ln">  2101&nbsp;&nbsp;</span>	var islice any = ([]unsafe.Pointer)(nil)
<span id="L2102" class="ln">  2102&nbsp;&nbsp;</span>	prototype := *(**sliceType)(unsafe.Pointer(&amp;islice))
<span id="L2103" class="ln">  2103&nbsp;&nbsp;</span>	slice := *prototype
<span id="L2104" class="ln">  2104&nbsp;&nbsp;</span>	slice.TFlag = 0
<span id="L2105" class="ln">  2105&nbsp;&nbsp;</span>	slice.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L2106" class="ln">  2106&nbsp;&nbsp;</span>	slice.Hash = fnv1(typ.Hash, &#39;[&#39;)
<span id="L2107" class="ln">  2107&nbsp;&nbsp;</span>	slice.Elem = typ
<span id="L2108" class="ln">  2108&nbsp;&nbsp;</span>	slice.PtrToThis = 0
<span id="L2109" class="ln">  2109&nbsp;&nbsp;</span>
<span id="L2110" class="ln">  2110&nbsp;&nbsp;</span>	ti, _ := lookupCache.LoadOrStore(ckey, toRType(&amp;slice.Type))
<span id="L2111" class="ln">  2111&nbsp;&nbsp;</span>	return ti.(Type)
<span id="L2112" class="ln">  2112&nbsp;&nbsp;</span>}
<span id="L2113" class="ln">  2113&nbsp;&nbsp;</span>
<span id="L2114" class="ln">  2114&nbsp;&nbsp;</span><span class="comment">// The structLookupCache caches StructOf lookups.</span>
<span id="L2115" class="ln">  2115&nbsp;&nbsp;</span><span class="comment">// StructOf does not share the common lookupCache since we need to pin</span>
<span id="L2116" class="ln">  2116&nbsp;&nbsp;</span><span class="comment">// the memory associated with *structTypeFixedN.</span>
<span id="L2117" class="ln">  2117&nbsp;&nbsp;</span>var structLookupCache struct {
<span id="L2118" class="ln">  2118&nbsp;&nbsp;</span>	sync.Mutex <span class="comment">// Guards stores (but not loads) on m.</span>
<span id="L2119" class="ln">  2119&nbsp;&nbsp;</span>
<span id="L2120" class="ln">  2120&nbsp;&nbsp;</span>	<span class="comment">// m is a map[uint32][]Type keyed by the hash calculated in StructOf.</span>
<span id="L2121" class="ln">  2121&nbsp;&nbsp;</span>	<span class="comment">// Elements in m are append-only and thus safe for concurrent reading.</span>
<span id="L2122" class="ln">  2122&nbsp;&nbsp;</span>	m sync.Map
<span id="L2123" class="ln">  2123&nbsp;&nbsp;</span>}
<span id="L2124" class="ln">  2124&nbsp;&nbsp;</span>
<span id="L2125" class="ln">  2125&nbsp;&nbsp;</span>type structTypeUncommon struct {
<span id="L2126" class="ln">  2126&nbsp;&nbsp;</span>	structType
<span id="L2127" class="ln">  2127&nbsp;&nbsp;</span>	u uncommonType
<span id="L2128" class="ln">  2128&nbsp;&nbsp;</span>}
<span id="L2129" class="ln">  2129&nbsp;&nbsp;</span>
<span id="L2130" class="ln">  2130&nbsp;&nbsp;</span><span class="comment">// isLetter reports whether a given &#39;rune&#39; is classified as a Letter.</span>
<span id="L2131" class="ln">  2131&nbsp;&nbsp;</span>func isLetter(ch rune) bool {
<span id="L2132" class="ln">  2132&nbsp;&nbsp;</span>	return &#39;a&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;z&#39; || &#39;A&#39; &lt;= ch &amp;&amp; ch &lt;= &#39;Z&#39; || ch == &#39;_&#39; || ch &gt;= utf8.RuneSelf &amp;&amp; unicode.IsLetter(ch)
<span id="L2133" class="ln">  2133&nbsp;&nbsp;</span>}
<span id="L2134" class="ln">  2134&nbsp;&nbsp;</span>
<span id="L2135" class="ln">  2135&nbsp;&nbsp;</span><span class="comment">// isValidFieldName checks if a string is a valid (struct) field name or not.</span>
<span id="L2136" class="ln">  2136&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2137" class="ln">  2137&nbsp;&nbsp;</span><span class="comment">// According to the language spec, a field name should be an identifier.</span>
<span id="L2138" class="ln">  2138&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2139" class="ln">  2139&nbsp;&nbsp;</span><span class="comment">// identifier = letter { letter | unicode_digit } .</span>
<span id="L2140" class="ln">  2140&nbsp;&nbsp;</span><span class="comment">// letter = unicode_letter | &#34;_&#34; .</span>
<span id="L2141" class="ln">  2141&nbsp;&nbsp;</span>func isValidFieldName(fieldName string) bool {
<span id="L2142" class="ln">  2142&nbsp;&nbsp;</span>	for i, c := range fieldName {
<span id="L2143" class="ln">  2143&nbsp;&nbsp;</span>		if i == 0 &amp;&amp; !isLetter(c) {
<span id="L2144" class="ln">  2144&nbsp;&nbsp;</span>			return false
<span id="L2145" class="ln">  2145&nbsp;&nbsp;</span>		}
<span id="L2146" class="ln">  2146&nbsp;&nbsp;</span>
<span id="L2147" class="ln">  2147&nbsp;&nbsp;</span>		if !(isLetter(c) || unicode.IsDigit(c)) {
<span id="L2148" class="ln">  2148&nbsp;&nbsp;</span>			return false
<span id="L2149" class="ln">  2149&nbsp;&nbsp;</span>		}
<span id="L2150" class="ln">  2150&nbsp;&nbsp;</span>	}
<span id="L2151" class="ln">  2151&nbsp;&nbsp;</span>
<span id="L2152" class="ln">  2152&nbsp;&nbsp;</span>	return len(fieldName) &gt; 0
<span id="L2153" class="ln">  2153&nbsp;&nbsp;</span>}
<span id="L2154" class="ln">  2154&nbsp;&nbsp;</span>
<span id="L2155" class="ln">  2155&nbsp;&nbsp;</span><span class="comment">// StructOf returns the struct type containing fields.</span>
<span id="L2156" class="ln">  2156&nbsp;&nbsp;</span><span class="comment">// The Offset and Index fields are ignored and computed as they would be</span>
<span id="L2157" class="ln">  2157&nbsp;&nbsp;</span><span class="comment">// by the compiler.</span>
<span id="L2158" class="ln">  2158&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2159" class="ln">  2159&nbsp;&nbsp;</span><span class="comment">// StructOf currently does not support promoted methods of embedded fields</span>
<span id="L2160" class="ln">  2160&nbsp;&nbsp;</span><span class="comment">// and panics if passed unexported StructFields.</span>
<span id="L2161" class="ln">  2161&nbsp;&nbsp;</span>func StructOf(fields []StructField) Type {
<span id="L2162" class="ln">  2162&nbsp;&nbsp;</span>	var (
<span id="L2163" class="ln">  2163&nbsp;&nbsp;</span>		hash       = fnv1(0, []byte(&#34;struct {&#34;)...)
<span id="L2164" class="ln">  2164&nbsp;&nbsp;</span>		size       uintptr
<span id="L2165" class="ln">  2165&nbsp;&nbsp;</span>		typalign   uint8
<span id="L2166" class="ln">  2166&nbsp;&nbsp;</span>		comparable = true
<span id="L2167" class="ln">  2167&nbsp;&nbsp;</span>		methods    []abi.Method
<span id="L2168" class="ln">  2168&nbsp;&nbsp;</span>
<span id="L2169" class="ln">  2169&nbsp;&nbsp;</span>		fs   = make([]structField, len(fields))
<span id="L2170" class="ln">  2170&nbsp;&nbsp;</span>		repr = make([]byte, 0, 64)
<span id="L2171" class="ln">  2171&nbsp;&nbsp;</span>		fset = map[string]struct{}{} <span class="comment">// fields&#39; names</span>
<span id="L2172" class="ln">  2172&nbsp;&nbsp;</span>
<span id="L2173" class="ln">  2173&nbsp;&nbsp;</span>		hasGCProg = false <span class="comment">// records whether a struct-field type has a GCProg</span>
<span id="L2174" class="ln">  2174&nbsp;&nbsp;</span>	)
<span id="L2175" class="ln">  2175&nbsp;&nbsp;</span>
<span id="L2176" class="ln">  2176&nbsp;&nbsp;</span>	lastzero := uintptr(0)
<span id="L2177" class="ln">  2177&nbsp;&nbsp;</span>	repr = append(repr, &#34;struct {&#34;...)
<span id="L2178" class="ln">  2178&nbsp;&nbsp;</span>	pkgpath := &#34;&#34;
<span id="L2179" class="ln">  2179&nbsp;&nbsp;</span>	for i, field := range fields {
<span id="L2180" class="ln">  2180&nbsp;&nbsp;</span>		if field.Name == &#34;&#34; {
<span id="L2181" class="ln">  2181&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: field &#34; + strconv.Itoa(i) + &#34; has no name&#34;)
<span id="L2182" class="ln">  2182&nbsp;&nbsp;</span>		}
<span id="L2183" class="ln">  2183&nbsp;&nbsp;</span>		if !isValidFieldName(field.Name) {
<span id="L2184" class="ln">  2184&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: field &#34; + strconv.Itoa(i) + &#34; has invalid name&#34;)
<span id="L2185" class="ln">  2185&nbsp;&nbsp;</span>		}
<span id="L2186" class="ln">  2186&nbsp;&nbsp;</span>		if field.Type == nil {
<span id="L2187" class="ln">  2187&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: field &#34; + strconv.Itoa(i) + &#34; has no type&#34;)
<span id="L2188" class="ln">  2188&nbsp;&nbsp;</span>		}
<span id="L2189" class="ln">  2189&nbsp;&nbsp;</span>		f, fpkgpath := runtimeStructField(field)
<span id="L2190" class="ln">  2190&nbsp;&nbsp;</span>		ft := f.Typ
<span id="L2191" class="ln">  2191&nbsp;&nbsp;</span>		if ft.Kind_&amp;kindGCProg != 0 {
<span id="L2192" class="ln">  2192&nbsp;&nbsp;</span>			hasGCProg = true
<span id="L2193" class="ln">  2193&nbsp;&nbsp;</span>		}
<span id="L2194" class="ln">  2194&nbsp;&nbsp;</span>		if fpkgpath != &#34;&#34; {
<span id="L2195" class="ln">  2195&nbsp;&nbsp;</span>			if pkgpath == &#34;&#34; {
<span id="L2196" class="ln">  2196&nbsp;&nbsp;</span>				pkgpath = fpkgpath
<span id="L2197" class="ln">  2197&nbsp;&nbsp;</span>			} else if pkgpath != fpkgpath {
<span id="L2198" class="ln">  2198&nbsp;&nbsp;</span>				panic(&#34;reflect.Struct: fields with different PkgPath &#34; + pkgpath + &#34; and &#34; + fpkgpath)
<span id="L2199" class="ln">  2199&nbsp;&nbsp;</span>			}
<span id="L2200" class="ln">  2200&nbsp;&nbsp;</span>		}
<span id="L2201" class="ln">  2201&nbsp;&nbsp;</span>
<span id="L2202" class="ln">  2202&nbsp;&nbsp;</span>		<span class="comment">// Update string and hash</span>
<span id="L2203" class="ln">  2203&nbsp;&nbsp;</span>		name := f.Name.Name()
<span id="L2204" class="ln">  2204&nbsp;&nbsp;</span>		hash = fnv1(hash, []byte(name)...)
<span id="L2205" class="ln">  2205&nbsp;&nbsp;</span>		repr = append(repr, (&#34; &#34; + name)...)
<span id="L2206" class="ln">  2206&nbsp;&nbsp;</span>		if f.Embedded() {
<span id="L2207" class="ln">  2207&nbsp;&nbsp;</span>			<span class="comment">// Embedded field</span>
<span id="L2208" class="ln">  2208&nbsp;&nbsp;</span>			if f.Typ.Kind() == abi.Pointer {
<span id="L2209" class="ln">  2209&nbsp;&nbsp;</span>				<span class="comment">// Embedded ** and *interface{} are illegal</span>
<span id="L2210" class="ln">  2210&nbsp;&nbsp;</span>				elem := ft.Elem()
<span id="L2211" class="ln">  2211&nbsp;&nbsp;</span>				if k := elem.Kind(); k == abi.Pointer || k == abi.Interface {
<span id="L2212" class="ln">  2212&nbsp;&nbsp;</span>					panic(&#34;reflect.StructOf: illegal embedded field type &#34; + stringFor(ft))
<span id="L2213" class="ln">  2213&nbsp;&nbsp;</span>				}
<span id="L2214" class="ln">  2214&nbsp;&nbsp;</span>			}
<span id="L2215" class="ln">  2215&nbsp;&nbsp;</span>
<span id="L2216" class="ln">  2216&nbsp;&nbsp;</span>			switch Kind(f.Typ.Kind()) {
<span id="L2217" class="ln">  2217&nbsp;&nbsp;</span>			case Interface:
<span id="L2218" class="ln">  2218&nbsp;&nbsp;</span>				ift := (*interfaceType)(unsafe.Pointer(ft))
<span id="L2219" class="ln">  2219&nbsp;&nbsp;</span>				for _, m := range ift.Methods {
<span id="L2220" class="ln">  2220&nbsp;&nbsp;</span>					if pkgPath(ift.nameOff(m.Name)) != &#34;&#34; {
<span id="L2221" class="ln">  2221&nbsp;&nbsp;</span>						<span class="comment">// TODO(sbinet).  Issue 15924.</span>
<span id="L2222" class="ln">  2222&nbsp;&nbsp;</span>						panic(&#34;reflect: embedded interface with unexported method(s) not implemented&#34;)
<span id="L2223" class="ln">  2223&nbsp;&nbsp;</span>					}
<span id="L2224" class="ln">  2224&nbsp;&nbsp;</span>
<span id="L2225" class="ln">  2225&nbsp;&nbsp;</span>					fnStub := resolveReflectText(unsafe.Pointer(abi.FuncPCABIInternal(embeddedIfaceMethStub)))
<span id="L2226" class="ln">  2226&nbsp;&nbsp;</span>					methods = append(methods, abi.Method{
<span id="L2227" class="ln">  2227&nbsp;&nbsp;</span>						Name: resolveReflectName(ift.nameOff(m.Name)),
<span id="L2228" class="ln">  2228&nbsp;&nbsp;</span>						Mtyp: resolveReflectType(ift.typeOff(m.Typ)),
<span id="L2229" class="ln">  2229&nbsp;&nbsp;</span>						Ifn:  fnStub,
<span id="L2230" class="ln">  2230&nbsp;&nbsp;</span>						Tfn:  fnStub,
<span id="L2231" class="ln">  2231&nbsp;&nbsp;</span>					})
<span id="L2232" class="ln">  2232&nbsp;&nbsp;</span>				}
<span id="L2233" class="ln">  2233&nbsp;&nbsp;</span>			case Pointer:
<span id="L2234" class="ln">  2234&nbsp;&nbsp;</span>				ptr := (*ptrType)(unsafe.Pointer(ft))
<span id="L2235" class="ln">  2235&nbsp;&nbsp;</span>				if unt := ptr.Uncommon(); unt != nil {
<span id="L2236" class="ln">  2236&nbsp;&nbsp;</span>					if i &gt; 0 &amp;&amp; unt.Mcount &gt; 0 {
<span id="L2237" class="ln">  2237&nbsp;&nbsp;</span>						<span class="comment">// Issue 15924.</span>
<span id="L2238" class="ln">  2238&nbsp;&nbsp;</span>						panic(&#34;reflect: embedded type with methods not implemented if type is not first field&#34;)
<span id="L2239" class="ln">  2239&nbsp;&nbsp;</span>					}
<span id="L2240" class="ln">  2240&nbsp;&nbsp;</span>					if len(fields) &gt; 1 {
<span id="L2241" class="ln">  2241&nbsp;&nbsp;</span>						panic(&#34;reflect: embedded type with methods not implemented if there is more than one field&#34;)
<span id="L2242" class="ln">  2242&nbsp;&nbsp;</span>					}
<span id="L2243" class="ln">  2243&nbsp;&nbsp;</span>					for _, m := range unt.Methods() {
<span id="L2244" class="ln">  2244&nbsp;&nbsp;</span>						mname := nameOffFor(ft, m.Name)
<span id="L2245" class="ln">  2245&nbsp;&nbsp;</span>						if pkgPath(mname) != &#34;&#34; {
<span id="L2246" class="ln">  2246&nbsp;&nbsp;</span>							<span class="comment">// TODO(sbinet).</span>
<span id="L2247" class="ln">  2247&nbsp;&nbsp;</span>							<span class="comment">// Issue 15924.</span>
<span id="L2248" class="ln">  2248&nbsp;&nbsp;</span>							panic(&#34;reflect: embedded interface with unexported method(s) not implemented&#34;)
<span id="L2249" class="ln">  2249&nbsp;&nbsp;</span>						}
<span id="L2250" class="ln">  2250&nbsp;&nbsp;</span>						methods = append(methods, abi.Method{
<span id="L2251" class="ln">  2251&nbsp;&nbsp;</span>							Name: resolveReflectName(mname),
<span id="L2252" class="ln">  2252&nbsp;&nbsp;</span>							Mtyp: resolveReflectType(typeOffFor(ft, m.Mtyp)),
<span id="L2253" class="ln">  2253&nbsp;&nbsp;</span>							Ifn:  resolveReflectText(textOffFor(ft, m.Ifn)),
<span id="L2254" class="ln">  2254&nbsp;&nbsp;</span>							Tfn:  resolveReflectText(textOffFor(ft, m.Tfn)),
<span id="L2255" class="ln">  2255&nbsp;&nbsp;</span>						})
<span id="L2256" class="ln">  2256&nbsp;&nbsp;</span>					}
<span id="L2257" class="ln">  2257&nbsp;&nbsp;</span>				}
<span id="L2258" class="ln">  2258&nbsp;&nbsp;</span>				if unt := ptr.Elem.Uncommon(); unt != nil {
<span id="L2259" class="ln">  2259&nbsp;&nbsp;</span>					for _, m := range unt.Methods() {
<span id="L2260" class="ln">  2260&nbsp;&nbsp;</span>						mname := nameOffFor(ft, m.Name)
<span id="L2261" class="ln">  2261&nbsp;&nbsp;</span>						if pkgPath(mname) != &#34;&#34; {
<span id="L2262" class="ln">  2262&nbsp;&nbsp;</span>							<span class="comment">// TODO(sbinet)</span>
<span id="L2263" class="ln">  2263&nbsp;&nbsp;</span>							<span class="comment">// Issue 15924.</span>
<span id="L2264" class="ln">  2264&nbsp;&nbsp;</span>							panic(&#34;reflect: embedded interface with unexported method(s) not implemented&#34;)
<span id="L2265" class="ln">  2265&nbsp;&nbsp;</span>						}
<span id="L2266" class="ln">  2266&nbsp;&nbsp;</span>						methods = append(methods, abi.Method{
<span id="L2267" class="ln">  2267&nbsp;&nbsp;</span>							Name: resolveReflectName(mname),
<span id="L2268" class="ln">  2268&nbsp;&nbsp;</span>							Mtyp: resolveReflectType(typeOffFor(ptr.Elem, m.Mtyp)),
<span id="L2269" class="ln">  2269&nbsp;&nbsp;</span>							Ifn:  resolveReflectText(textOffFor(ptr.Elem, m.Ifn)),
<span id="L2270" class="ln">  2270&nbsp;&nbsp;</span>							Tfn:  resolveReflectText(textOffFor(ptr.Elem, m.Tfn)),
<span id="L2271" class="ln">  2271&nbsp;&nbsp;</span>						})
<span id="L2272" class="ln">  2272&nbsp;&nbsp;</span>					}
<span id="L2273" class="ln">  2273&nbsp;&nbsp;</span>				}
<span id="L2274" class="ln">  2274&nbsp;&nbsp;</span>			default:
<span id="L2275" class="ln">  2275&nbsp;&nbsp;</span>				if unt := ft.Uncommon(); unt != nil {
<span id="L2276" class="ln">  2276&nbsp;&nbsp;</span>					if i &gt; 0 &amp;&amp; unt.Mcount &gt; 0 {
<span id="L2277" class="ln">  2277&nbsp;&nbsp;</span>						<span class="comment">// Issue 15924.</span>
<span id="L2278" class="ln">  2278&nbsp;&nbsp;</span>						panic(&#34;reflect: embedded type with methods not implemented if type is not first field&#34;)
<span id="L2279" class="ln">  2279&nbsp;&nbsp;</span>					}
<span id="L2280" class="ln">  2280&nbsp;&nbsp;</span>					if len(fields) &gt; 1 &amp;&amp; ft.Kind_&amp;kindDirectIface != 0 {
<span id="L2281" class="ln">  2281&nbsp;&nbsp;</span>						panic(&#34;reflect: embedded type with methods not implemented for non-pointer type&#34;)
<span id="L2282" class="ln">  2282&nbsp;&nbsp;</span>					}
<span id="L2283" class="ln">  2283&nbsp;&nbsp;</span>					for _, m := range unt.Methods() {
<span id="L2284" class="ln">  2284&nbsp;&nbsp;</span>						mname := nameOffFor(ft, m.Name)
<span id="L2285" class="ln">  2285&nbsp;&nbsp;</span>						if pkgPath(mname) != &#34;&#34; {
<span id="L2286" class="ln">  2286&nbsp;&nbsp;</span>							<span class="comment">// TODO(sbinet)</span>
<span id="L2287" class="ln">  2287&nbsp;&nbsp;</span>							<span class="comment">// Issue 15924.</span>
<span id="L2288" class="ln">  2288&nbsp;&nbsp;</span>							panic(&#34;reflect: embedded interface with unexported method(s) not implemented&#34;)
<span id="L2289" class="ln">  2289&nbsp;&nbsp;</span>						}
<span id="L2290" class="ln">  2290&nbsp;&nbsp;</span>						methods = append(methods, abi.Method{
<span id="L2291" class="ln">  2291&nbsp;&nbsp;</span>							Name: resolveReflectName(mname),
<span id="L2292" class="ln">  2292&nbsp;&nbsp;</span>							Mtyp: resolveReflectType(typeOffFor(ft, m.Mtyp)),
<span id="L2293" class="ln">  2293&nbsp;&nbsp;</span>							Ifn:  resolveReflectText(textOffFor(ft, m.Ifn)),
<span id="L2294" class="ln">  2294&nbsp;&nbsp;</span>							Tfn:  resolveReflectText(textOffFor(ft, m.Tfn)),
<span id="L2295" class="ln">  2295&nbsp;&nbsp;</span>						})
<span id="L2296" class="ln">  2296&nbsp;&nbsp;</span>
<span id="L2297" class="ln">  2297&nbsp;&nbsp;</span>					}
<span id="L2298" class="ln">  2298&nbsp;&nbsp;</span>				}
<span id="L2299" class="ln">  2299&nbsp;&nbsp;</span>			}
<span id="L2300" class="ln">  2300&nbsp;&nbsp;</span>		}
<span id="L2301" class="ln">  2301&nbsp;&nbsp;</span>		if _, dup := fset[name]; dup &amp;&amp; name != &#34;_&#34; {
<span id="L2302" class="ln">  2302&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: duplicate field &#34; + name)
<span id="L2303" class="ln">  2303&nbsp;&nbsp;</span>		}
<span id="L2304" class="ln">  2304&nbsp;&nbsp;</span>		fset[name] = struct{}{}
<span id="L2305" class="ln">  2305&nbsp;&nbsp;</span>
<span id="L2306" class="ln">  2306&nbsp;&nbsp;</span>		hash = fnv1(hash, byte(ft.Hash&gt;&gt;24), byte(ft.Hash&gt;&gt;16), byte(ft.Hash&gt;&gt;8), byte(ft.Hash))
<span id="L2307" class="ln">  2307&nbsp;&nbsp;</span>
<span id="L2308" class="ln">  2308&nbsp;&nbsp;</span>		repr = append(repr, (&#34; &#34; + stringFor(ft))...)
<span id="L2309" class="ln">  2309&nbsp;&nbsp;</span>		if f.Name.HasTag() {
<span id="L2310" class="ln">  2310&nbsp;&nbsp;</span>			hash = fnv1(hash, []byte(f.Name.Tag())...)
<span id="L2311" class="ln">  2311&nbsp;&nbsp;</span>			repr = append(repr, (&#34; &#34; + strconv.Quote(f.Name.Tag()))...)
<span id="L2312" class="ln">  2312&nbsp;&nbsp;</span>		}
<span id="L2313" class="ln">  2313&nbsp;&nbsp;</span>		if i &lt; len(fields)-1 {
<span id="L2314" class="ln">  2314&nbsp;&nbsp;</span>			repr = append(repr, &#39;;&#39;)
<span id="L2315" class="ln">  2315&nbsp;&nbsp;</span>		}
<span id="L2316" class="ln">  2316&nbsp;&nbsp;</span>
<span id="L2317" class="ln">  2317&nbsp;&nbsp;</span>		comparable = comparable &amp;&amp; (ft.Equal != nil)
<span id="L2318" class="ln">  2318&nbsp;&nbsp;</span>
<span id="L2319" class="ln">  2319&nbsp;&nbsp;</span>		offset := align(size, uintptr(ft.Align_))
<span id="L2320" class="ln">  2320&nbsp;&nbsp;</span>		if offset &lt; size {
<span id="L2321" class="ln">  2321&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: struct size would exceed virtual address space&#34;)
<span id="L2322" class="ln">  2322&nbsp;&nbsp;</span>		}
<span id="L2323" class="ln">  2323&nbsp;&nbsp;</span>		if ft.Align_ &gt; typalign {
<span id="L2324" class="ln">  2324&nbsp;&nbsp;</span>			typalign = ft.Align_
<span id="L2325" class="ln">  2325&nbsp;&nbsp;</span>		}
<span id="L2326" class="ln">  2326&nbsp;&nbsp;</span>		size = offset + ft.Size_
<span id="L2327" class="ln">  2327&nbsp;&nbsp;</span>		if size &lt; offset {
<span id="L2328" class="ln">  2328&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: struct size would exceed virtual address space&#34;)
<span id="L2329" class="ln">  2329&nbsp;&nbsp;</span>		}
<span id="L2330" class="ln">  2330&nbsp;&nbsp;</span>		f.Offset = offset
<span id="L2331" class="ln">  2331&nbsp;&nbsp;</span>
<span id="L2332" class="ln">  2332&nbsp;&nbsp;</span>		if ft.Size_ == 0 {
<span id="L2333" class="ln">  2333&nbsp;&nbsp;</span>			lastzero = size
<span id="L2334" class="ln">  2334&nbsp;&nbsp;</span>		}
<span id="L2335" class="ln">  2335&nbsp;&nbsp;</span>
<span id="L2336" class="ln">  2336&nbsp;&nbsp;</span>		fs[i] = f
<span id="L2337" class="ln">  2337&nbsp;&nbsp;</span>	}
<span id="L2338" class="ln">  2338&nbsp;&nbsp;</span>
<span id="L2339" class="ln">  2339&nbsp;&nbsp;</span>	if size &gt; 0 &amp;&amp; lastzero == size {
<span id="L2340" class="ln">  2340&nbsp;&nbsp;</span>		<span class="comment">// This is a non-zero sized struct that ends in a</span>
<span id="L2341" class="ln">  2341&nbsp;&nbsp;</span>		<span class="comment">// zero-sized field. We add an extra byte of padding,</span>
<span id="L2342" class="ln">  2342&nbsp;&nbsp;</span>		<span class="comment">// to ensure that taking the address of the final</span>
<span id="L2343" class="ln">  2343&nbsp;&nbsp;</span>		<span class="comment">// zero-sized field can&#39;t manufacture a pointer to the</span>
<span id="L2344" class="ln">  2344&nbsp;&nbsp;</span>		<span class="comment">// next object in the heap. See issue 9401.</span>
<span id="L2345" class="ln">  2345&nbsp;&nbsp;</span>		size++
<span id="L2346" class="ln">  2346&nbsp;&nbsp;</span>		if size == 0 {
<span id="L2347" class="ln">  2347&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: struct size would exceed virtual address space&#34;)
<span id="L2348" class="ln">  2348&nbsp;&nbsp;</span>		}
<span id="L2349" class="ln">  2349&nbsp;&nbsp;</span>	}
<span id="L2350" class="ln">  2350&nbsp;&nbsp;</span>
<span id="L2351" class="ln">  2351&nbsp;&nbsp;</span>	var typ *structType
<span id="L2352" class="ln">  2352&nbsp;&nbsp;</span>	var ut *uncommonType
<span id="L2353" class="ln">  2353&nbsp;&nbsp;</span>
<span id="L2354" class="ln">  2354&nbsp;&nbsp;</span>	if len(methods) == 0 {
<span id="L2355" class="ln">  2355&nbsp;&nbsp;</span>		t := new(structTypeUncommon)
<span id="L2356" class="ln">  2356&nbsp;&nbsp;</span>		typ = &amp;t.structType
<span id="L2357" class="ln">  2357&nbsp;&nbsp;</span>		ut = &amp;t.u
<span id="L2358" class="ln">  2358&nbsp;&nbsp;</span>	} else {
<span id="L2359" class="ln">  2359&nbsp;&nbsp;</span>		<span class="comment">// A *rtype representing a struct is followed directly in memory by an</span>
<span id="L2360" class="ln">  2360&nbsp;&nbsp;</span>		<span class="comment">// array of method objects representing the methods attached to the</span>
<span id="L2361" class="ln">  2361&nbsp;&nbsp;</span>		<span class="comment">// struct. To get the same layout for a run time generated type, we</span>
<span id="L2362" class="ln">  2362&nbsp;&nbsp;</span>		<span class="comment">// need an array directly following the uncommonType memory.</span>
<span id="L2363" class="ln">  2363&nbsp;&nbsp;</span>		<span class="comment">// A similar strategy is used for funcTypeFixed4, ...funcTypeFixedN.</span>
<span id="L2364" class="ln">  2364&nbsp;&nbsp;</span>		tt := New(StructOf([]StructField{
<span id="L2365" class="ln">  2365&nbsp;&nbsp;</span>			{Name: &#34;S&#34;, Type: TypeOf(structType{})},
<span id="L2366" class="ln">  2366&nbsp;&nbsp;</span>			{Name: &#34;U&#34;, Type: TypeOf(uncommonType{})},
<span id="L2367" class="ln">  2367&nbsp;&nbsp;</span>			{Name: &#34;M&#34;, Type: ArrayOf(len(methods), TypeOf(methods[0]))},
<span id="L2368" class="ln">  2368&nbsp;&nbsp;</span>		}))
<span id="L2369" class="ln">  2369&nbsp;&nbsp;</span>
<span id="L2370" class="ln">  2370&nbsp;&nbsp;</span>		typ = (*structType)(tt.Elem().Field(0).Addr().UnsafePointer())
<span id="L2371" class="ln">  2371&nbsp;&nbsp;</span>		ut = (*uncommonType)(tt.Elem().Field(1).Addr().UnsafePointer())
<span id="L2372" class="ln">  2372&nbsp;&nbsp;</span>
<span id="L2373" class="ln">  2373&nbsp;&nbsp;</span>		copy(tt.Elem().Field(2).Slice(0, len(methods)).Interface().([]abi.Method), methods)
<span id="L2374" class="ln">  2374&nbsp;&nbsp;</span>	}
<span id="L2375" class="ln">  2375&nbsp;&nbsp;</span>	<span class="comment">// TODO(sbinet): Once we allow embedding multiple types,</span>
<span id="L2376" class="ln">  2376&nbsp;&nbsp;</span>	<span class="comment">// methods will need to be sorted like the compiler does.</span>
<span id="L2377" class="ln">  2377&nbsp;&nbsp;</span>	<span class="comment">// TODO(sbinet): Once we allow non-exported methods, we will</span>
<span id="L2378" class="ln">  2378&nbsp;&nbsp;</span>	<span class="comment">// need to compute xcount as the number of exported methods.</span>
<span id="L2379" class="ln">  2379&nbsp;&nbsp;</span>	ut.Mcount = uint16(len(methods))
<span id="L2380" class="ln">  2380&nbsp;&nbsp;</span>	ut.Xcount = ut.Mcount
<span id="L2381" class="ln">  2381&nbsp;&nbsp;</span>	ut.Moff = uint32(unsafe.Sizeof(uncommonType{}))
<span id="L2382" class="ln">  2382&nbsp;&nbsp;</span>
<span id="L2383" class="ln">  2383&nbsp;&nbsp;</span>	if len(fs) &gt; 0 {
<span id="L2384" class="ln">  2384&nbsp;&nbsp;</span>		repr = append(repr, &#39; &#39;)
<span id="L2385" class="ln">  2385&nbsp;&nbsp;</span>	}
<span id="L2386" class="ln">  2386&nbsp;&nbsp;</span>	repr = append(repr, &#39;}&#39;)
<span id="L2387" class="ln">  2387&nbsp;&nbsp;</span>	hash = fnv1(hash, &#39;}&#39;)
<span id="L2388" class="ln">  2388&nbsp;&nbsp;</span>	str := string(repr)
<span id="L2389" class="ln">  2389&nbsp;&nbsp;</span>
<span id="L2390" class="ln">  2390&nbsp;&nbsp;</span>	<span class="comment">// Round the size up to be a multiple of the alignment.</span>
<span id="L2391" class="ln">  2391&nbsp;&nbsp;</span>	s := align(size, uintptr(typalign))
<span id="L2392" class="ln">  2392&nbsp;&nbsp;</span>	if s &lt; size {
<span id="L2393" class="ln">  2393&nbsp;&nbsp;</span>		panic(&#34;reflect.StructOf: struct size would exceed virtual address space&#34;)
<span id="L2394" class="ln">  2394&nbsp;&nbsp;</span>	}
<span id="L2395" class="ln">  2395&nbsp;&nbsp;</span>	size = s
<span id="L2396" class="ln">  2396&nbsp;&nbsp;</span>
<span id="L2397" class="ln">  2397&nbsp;&nbsp;</span>	<span class="comment">// Make the struct type.</span>
<span id="L2398" class="ln">  2398&nbsp;&nbsp;</span>	var istruct any = struct{}{}
<span id="L2399" class="ln">  2399&nbsp;&nbsp;</span>	prototype := *(**structType)(unsafe.Pointer(&amp;istruct))
<span id="L2400" class="ln">  2400&nbsp;&nbsp;</span>	*typ = *prototype
<span id="L2401" class="ln">  2401&nbsp;&nbsp;</span>	typ.Fields = fs
<span id="L2402" class="ln">  2402&nbsp;&nbsp;</span>	if pkgpath != &#34;&#34; {
<span id="L2403" class="ln">  2403&nbsp;&nbsp;</span>		typ.PkgPath = newName(pkgpath, &#34;&#34;, false, false)
<span id="L2404" class="ln">  2404&nbsp;&nbsp;</span>	}
<span id="L2405" class="ln">  2405&nbsp;&nbsp;</span>
<span id="L2406" class="ln">  2406&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L2407" class="ln">  2407&nbsp;&nbsp;</span>	if ts, ok := structLookupCache.m.Load(hash); ok {
<span id="L2408" class="ln">  2408&nbsp;&nbsp;</span>		for _, st := range ts.([]Type) {
<span id="L2409" class="ln">  2409&nbsp;&nbsp;</span>			t := st.common()
<span id="L2410" class="ln">  2410&nbsp;&nbsp;</span>			if haveIdenticalUnderlyingType(&amp;typ.Type, t, true) {
<span id="L2411" class="ln">  2411&nbsp;&nbsp;</span>				return toType(t)
<span id="L2412" class="ln">  2412&nbsp;&nbsp;</span>			}
<span id="L2413" class="ln">  2413&nbsp;&nbsp;</span>		}
<span id="L2414" class="ln">  2414&nbsp;&nbsp;</span>	}
<span id="L2415" class="ln">  2415&nbsp;&nbsp;</span>
<span id="L2416" class="ln">  2416&nbsp;&nbsp;</span>	<span class="comment">// Not in cache, lock and retry.</span>
<span id="L2417" class="ln">  2417&nbsp;&nbsp;</span>	structLookupCache.Lock()
<span id="L2418" class="ln">  2418&nbsp;&nbsp;</span>	defer structLookupCache.Unlock()
<span id="L2419" class="ln">  2419&nbsp;&nbsp;</span>	if ts, ok := structLookupCache.m.Load(hash); ok {
<span id="L2420" class="ln">  2420&nbsp;&nbsp;</span>		for _, st := range ts.([]Type) {
<span id="L2421" class="ln">  2421&nbsp;&nbsp;</span>			t := st.common()
<span id="L2422" class="ln">  2422&nbsp;&nbsp;</span>			if haveIdenticalUnderlyingType(&amp;typ.Type, t, true) {
<span id="L2423" class="ln">  2423&nbsp;&nbsp;</span>				return toType(t)
<span id="L2424" class="ln">  2424&nbsp;&nbsp;</span>			}
<span id="L2425" class="ln">  2425&nbsp;&nbsp;</span>		}
<span id="L2426" class="ln">  2426&nbsp;&nbsp;</span>	}
<span id="L2427" class="ln">  2427&nbsp;&nbsp;</span>
<span id="L2428" class="ln">  2428&nbsp;&nbsp;</span>	addToCache := func(t Type) Type {
<span id="L2429" class="ln">  2429&nbsp;&nbsp;</span>		var ts []Type
<span id="L2430" class="ln">  2430&nbsp;&nbsp;</span>		if ti, ok := structLookupCache.m.Load(hash); ok {
<span id="L2431" class="ln">  2431&nbsp;&nbsp;</span>			ts = ti.([]Type)
<span id="L2432" class="ln">  2432&nbsp;&nbsp;</span>		}
<span id="L2433" class="ln">  2433&nbsp;&nbsp;</span>		structLookupCache.m.Store(hash, append(ts, t))
<span id="L2434" class="ln">  2434&nbsp;&nbsp;</span>		return t
<span id="L2435" class="ln">  2435&nbsp;&nbsp;</span>	}
<span id="L2436" class="ln">  2436&nbsp;&nbsp;</span>
<span id="L2437" class="ln">  2437&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L2438" class="ln">  2438&nbsp;&nbsp;</span>	for _, t := range typesByString(str) {
<span id="L2439" class="ln">  2439&nbsp;&nbsp;</span>		if haveIdenticalUnderlyingType(&amp;typ.Type, t, true) {
<span id="L2440" class="ln">  2440&nbsp;&nbsp;</span>			<span class="comment">// even if &#39;t&#39; wasn&#39;t a structType with methods, we should be ok</span>
<span id="L2441" class="ln">  2441&nbsp;&nbsp;</span>			<span class="comment">// as the &#39;u uncommonType&#39; field won&#39;t be accessed except when</span>
<span id="L2442" class="ln">  2442&nbsp;&nbsp;</span>			<span class="comment">// tflag&amp;abi.TFlagUncommon is set.</span>
<span id="L2443" class="ln">  2443&nbsp;&nbsp;</span>			return addToCache(toType(t))
<span id="L2444" class="ln">  2444&nbsp;&nbsp;</span>		}
<span id="L2445" class="ln">  2445&nbsp;&nbsp;</span>	}
<span id="L2446" class="ln">  2446&nbsp;&nbsp;</span>
<span id="L2447" class="ln">  2447&nbsp;&nbsp;</span>	typ.Str = resolveReflectName(newName(str, &#34;&#34;, false, false))
<span id="L2448" class="ln">  2448&nbsp;&nbsp;</span>	typ.TFlag = 0 <span class="comment">// TODO: set tflagRegularMemory</span>
<span id="L2449" class="ln">  2449&nbsp;&nbsp;</span>	typ.Hash = hash
<span id="L2450" class="ln">  2450&nbsp;&nbsp;</span>	typ.Size_ = size
<span id="L2451" class="ln">  2451&nbsp;&nbsp;</span>	typ.PtrBytes = typeptrdata(&amp;typ.Type)
<span id="L2452" class="ln">  2452&nbsp;&nbsp;</span>	typ.Align_ = typalign
<span id="L2453" class="ln">  2453&nbsp;&nbsp;</span>	typ.FieldAlign_ = typalign
<span id="L2454" class="ln">  2454&nbsp;&nbsp;</span>	typ.PtrToThis = 0
<span id="L2455" class="ln">  2455&nbsp;&nbsp;</span>	if len(methods) &gt; 0 {
<span id="L2456" class="ln">  2456&nbsp;&nbsp;</span>		typ.TFlag |= abi.TFlagUncommon
<span id="L2457" class="ln">  2457&nbsp;&nbsp;</span>	}
<span id="L2458" class="ln">  2458&nbsp;&nbsp;</span>
<span id="L2459" class="ln">  2459&nbsp;&nbsp;</span>	if hasGCProg {
<span id="L2460" class="ln">  2460&nbsp;&nbsp;</span>		lastPtrField := 0
<span id="L2461" class="ln">  2461&nbsp;&nbsp;</span>		for i, ft := range fs {
<span id="L2462" class="ln">  2462&nbsp;&nbsp;</span>			if ft.Typ.Pointers() {
<span id="L2463" class="ln">  2463&nbsp;&nbsp;</span>				lastPtrField = i
<span id="L2464" class="ln">  2464&nbsp;&nbsp;</span>			}
<span id="L2465" class="ln">  2465&nbsp;&nbsp;</span>		}
<span id="L2466" class="ln">  2466&nbsp;&nbsp;</span>		prog := []byte{0, 0, 0, 0} <span class="comment">// will be length of prog</span>
<span id="L2467" class="ln">  2467&nbsp;&nbsp;</span>		var off uintptr
<span id="L2468" class="ln">  2468&nbsp;&nbsp;</span>		for i, ft := range fs {
<span id="L2469" class="ln">  2469&nbsp;&nbsp;</span>			if i &gt; lastPtrField {
<span id="L2470" class="ln">  2470&nbsp;&nbsp;</span>				<span class="comment">// gcprog should not include anything for any field after</span>
<span id="L2471" class="ln">  2471&nbsp;&nbsp;</span>				<span class="comment">// the last field that contains pointer data</span>
<span id="L2472" class="ln">  2472&nbsp;&nbsp;</span>				break
<span id="L2473" class="ln">  2473&nbsp;&nbsp;</span>			}
<span id="L2474" class="ln">  2474&nbsp;&nbsp;</span>			if !ft.Typ.Pointers() {
<span id="L2475" class="ln">  2475&nbsp;&nbsp;</span>				<span class="comment">// Ignore pointerless fields.</span>
<span id="L2476" class="ln">  2476&nbsp;&nbsp;</span>				continue
<span id="L2477" class="ln">  2477&nbsp;&nbsp;</span>			}
<span id="L2478" class="ln">  2478&nbsp;&nbsp;</span>			<span class="comment">// Pad to start of this field with zeros.</span>
<span id="L2479" class="ln">  2479&nbsp;&nbsp;</span>			if ft.Offset &gt; off {
<span id="L2480" class="ln">  2480&nbsp;&nbsp;</span>				n := (ft.Offset - off) / goarch.PtrSize
<span id="L2481" class="ln">  2481&nbsp;&nbsp;</span>				prog = append(prog, 0x01, 0x00) <span class="comment">// emit a 0 bit</span>
<span id="L2482" class="ln">  2482&nbsp;&nbsp;</span>				if n &gt; 1 {
<span id="L2483" class="ln">  2483&nbsp;&nbsp;</span>					prog = append(prog, 0x81)      <span class="comment">// repeat previous bit</span>
<span id="L2484" class="ln">  2484&nbsp;&nbsp;</span>					prog = appendVarint(prog, n-1) <span class="comment">// n-1 times</span>
<span id="L2485" class="ln">  2485&nbsp;&nbsp;</span>				}
<span id="L2486" class="ln">  2486&nbsp;&nbsp;</span>				off = ft.Offset
<span id="L2487" class="ln">  2487&nbsp;&nbsp;</span>			}
<span id="L2488" class="ln">  2488&nbsp;&nbsp;</span>
<span id="L2489" class="ln">  2489&nbsp;&nbsp;</span>			prog = appendGCProg(prog, ft.Typ)
<span id="L2490" class="ln">  2490&nbsp;&nbsp;</span>			off += ft.Typ.PtrBytes
<span id="L2491" class="ln">  2491&nbsp;&nbsp;</span>		}
<span id="L2492" class="ln">  2492&nbsp;&nbsp;</span>		prog = append(prog, 0)
<span id="L2493" class="ln">  2493&nbsp;&nbsp;</span>		*(*uint32)(unsafe.Pointer(&amp;prog[0])) = uint32(len(prog) - 4)
<span id="L2494" class="ln">  2494&nbsp;&nbsp;</span>		typ.Kind_ |= kindGCProg
<span id="L2495" class="ln">  2495&nbsp;&nbsp;</span>		typ.GCData = &amp;prog[0]
<span id="L2496" class="ln">  2496&nbsp;&nbsp;</span>	} else {
<span id="L2497" class="ln">  2497&nbsp;&nbsp;</span>		typ.Kind_ &amp;^= kindGCProg
<span id="L2498" class="ln">  2498&nbsp;&nbsp;</span>		bv := new(bitVector)
<span id="L2499" class="ln">  2499&nbsp;&nbsp;</span>		addTypeBits(bv, 0, &amp;typ.Type)
<span id="L2500" class="ln">  2500&nbsp;&nbsp;</span>		if len(bv.data) &gt; 0 {
<span id="L2501" class="ln">  2501&nbsp;&nbsp;</span>			typ.GCData = &amp;bv.data[0]
<span id="L2502" class="ln">  2502&nbsp;&nbsp;</span>		}
<span id="L2503" class="ln">  2503&nbsp;&nbsp;</span>	}
<span id="L2504" class="ln">  2504&nbsp;&nbsp;</span>	typ.Equal = nil
<span id="L2505" class="ln">  2505&nbsp;&nbsp;</span>	if comparable {
<span id="L2506" class="ln">  2506&nbsp;&nbsp;</span>		typ.Equal = func(p, q unsafe.Pointer) bool {
<span id="L2507" class="ln">  2507&nbsp;&nbsp;</span>			for _, ft := range typ.Fields {
<span id="L2508" class="ln">  2508&nbsp;&nbsp;</span>				pi := add(p, ft.Offset, &#34;&amp;x.field safe&#34;)
<span id="L2509" class="ln">  2509&nbsp;&nbsp;</span>				qi := add(q, ft.Offset, &#34;&amp;x.field safe&#34;)
<span id="L2510" class="ln">  2510&nbsp;&nbsp;</span>				if !ft.Typ.Equal(pi, qi) {
<span id="L2511" class="ln">  2511&nbsp;&nbsp;</span>					return false
<span id="L2512" class="ln">  2512&nbsp;&nbsp;</span>				}
<span id="L2513" class="ln">  2513&nbsp;&nbsp;</span>			}
<span id="L2514" class="ln">  2514&nbsp;&nbsp;</span>			return true
<span id="L2515" class="ln">  2515&nbsp;&nbsp;</span>		}
<span id="L2516" class="ln">  2516&nbsp;&nbsp;</span>	}
<span id="L2517" class="ln">  2517&nbsp;&nbsp;</span>
<span id="L2518" class="ln">  2518&nbsp;&nbsp;</span>	switch {
<span id="L2519" class="ln">  2519&nbsp;&nbsp;</span>	case len(fs) == 1 &amp;&amp; !ifaceIndir(fs[0].Typ):
<span id="L2520" class="ln">  2520&nbsp;&nbsp;</span>		<span class="comment">// structs of 1 direct iface type can be direct</span>
<span id="L2521" class="ln">  2521&nbsp;&nbsp;</span>		typ.Kind_ |= kindDirectIface
<span id="L2522" class="ln">  2522&nbsp;&nbsp;</span>	default:
<span id="L2523" class="ln">  2523&nbsp;&nbsp;</span>		typ.Kind_ &amp;^= kindDirectIface
<span id="L2524" class="ln">  2524&nbsp;&nbsp;</span>	}
<span id="L2525" class="ln">  2525&nbsp;&nbsp;</span>
<span id="L2526" class="ln">  2526&nbsp;&nbsp;</span>	return addToCache(toType(&amp;typ.Type))
<span id="L2527" class="ln">  2527&nbsp;&nbsp;</span>}
<span id="L2528" class="ln">  2528&nbsp;&nbsp;</span>
<span id="L2529" class="ln">  2529&nbsp;&nbsp;</span>func embeddedIfaceMethStub() {
<span id="L2530" class="ln">  2530&nbsp;&nbsp;</span>	panic(&#34;reflect: StructOf does not support methods of embedded interfaces&#34;)
<span id="L2531" class="ln">  2531&nbsp;&nbsp;</span>}
<span id="L2532" class="ln">  2532&nbsp;&nbsp;</span>
<span id="L2533" class="ln">  2533&nbsp;&nbsp;</span><span class="comment">// runtimeStructField takes a StructField value passed to StructOf and</span>
<span id="L2534" class="ln">  2534&nbsp;&nbsp;</span><span class="comment">// returns both the corresponding internal representation, of type</span>
<span id="L2535" class="ln">  2535&nbsp;&nbsp;</span><span class="comment">// structField, and the pkgpath value to use for this field.</span>
<span id="L2536" class="ln">  2536&nbsp;&nbsp;</span>func runtimeStructField(field StructField) (structField, string) {
<span id="L2537" class="ln">  2537&nbsp;&nbsp;</span>	if field.Anonymous &amp;&amp; field.PkgPath != &#34;&#34; {
<span id="L2538" class="ln">  2538&nbsp;&nbsp;</span>		panic(&#34;reflect.StructOf: field \&#34;&#34; + field.Name + &#34;\&#34; is anonymous but has PkgPath set&#34;)
<span id="L2539" class="ln">  2539&nbsp;&nbsp;</span>	}
<span id="L2540" class="ln">  2540&nbsp;&nbsp;</span>
<span id="L2541" class="ln">  2541&nbsp;&nbsp;</span>	if field.IsExported() {
<span id="L2542" class="ln">  2542&nbsp;&nbsp;</span>		<span class="comment">// Best-effort check for misuse.</span>
<span id="L2543" class="ln">  2543&nbsp;&nbsp;</span>		<span class="comment">// Since this field will be treated as exported, not much harm done if Unicode lowercase slips through.</span>
<span id="L2544" class="ln">  2544&nbsp;&nbsp;</span>		c := field.Name[0]
<span id="L2545" class="ln">  2545&nbsp;&nbsp;</span>		if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; || c == &#39;_&#39; {
<span id="L2546" class="ln">  2546&nbsp;&nbsp;</span>			panic(&#34;reflect.StructOf: field \&#34;&#34; + field.Name + &#34;\&#34; is unexported but missing PkgPath&#34;)
<span id="L2547" class="ln">  2547&nbsp;&nbsp;</span>		}
<span id="L2548" class="ln">  2548&nbsp;&nbsp;</span>	}
<span id="L2549" class="ln">  2549&nbsp;&nbsp;</span>
<span id="L2550" class="ln">  2550&nbsp;&nbsp;</span>	resolveReflectType(field.Type.common()) <span class="comment">// install in runtime</span>
<span id="L2551" class="ln">  2551&nbsp;&nbsp;</span>	f := structField{
<span id="L2552" class="ln">  2552&nbsp;&nbsp;</span>		Name:   newName(field.Name, string(field.Tag), field.IsExported(), field.Anonymous),
<span id="L2553" class="ln">  2553&nbsp;&nbsp;</span>		Typ:    field.Type.common(),
<span id="L2554" class="ln">  2554&nbsp;&nbsp;</span>		Offset: 0,
<span id="L2555" class="ln">  2555&nbsp;&nbsp;</span>	}
<span id="L2556" class="ln">  2556&nbsp;&nbsp;</span>	return f, field.PkgPath
<span id="L2557" class="ln">  2557&nbsp;&nbsp;</span>}
<span id="L2558" class="ln">  2558&nbsp;&nbsp;</span>
<span id="L2559" class="ln">  2559&nbsp;&nbsp;</span><span class="comment">// typeptrdata returns the length in bytes of the prefix of t</span>
<span id="L2560" class="ln">  2560&nbsp;&nbsp;</span><span class="comment">// containing pointer data. Anything after this offset is scalar data.</span>
<span id="L2561" class="ln">  2561&nbsp;&nbsp;</span><span class="comment">// keep in sync with ../cmd/compile/internal/reflectdata/reflect.go</span>
<span id="L2562" class="ln">  2562&nbsp;&nbsp;</span>func typeptrdata(t *abi.Type) uintptr {
<span id="L2563" class="ln">  2563&nbsp;&nbsp;</span>	switch t.Kind() {
<span id="L2564" class="ln">  2564&nbsp;&nbsp;</span>	case abi.Struct:
<span id="L2565" class="ln">  2565&nbsp;&nbsp;</span>		st := (*structType)(unsafe.Pointer(t))
<span id="L2566" class="ln">  2566&nbsp;&nbsp;</span>		<span class="comment">// find the last field that has pointers.</span>
<span id="L2567" class="ln">  2567&nbsp;&nbsp;</span>		field := -1
<span id="L2568" class="ln">  2568&nbsp;&nbsp;</span>		for i := range st.Fields {
<span id="L2569" class="ln">  2569&nbsp;&nbsp;</span>			ft := st.Fields[i].Typ
<span id="L2570" class="ln">  2570&nbsp;&nbsp;</span>			if ft.Pointers() {
<span id="L2571" class="ln">  2571&nbsp;&nbsp;</span>				field = i
<span id="L2572" class="ln">  2572&nbsp;&nbsp;</span>			}
<span id="L2573" class="ln">  2573&nbsp;&nbsp;</span>		}
<span id="L2574" class="ln">  2574&nbsp;&nbsp;</span>		if field == -1 {
<span id="L2575" class="ln">  2575&nbsp;&nbsp;</span>			return 0
<span id="L2576" class="ln">  2576&nbsp;&nbsp;</span>		}
<span id="L2577" class="ln">  2577&nbsp;&nbsp;</span>		f := st.Fields[field]
<span id="L2578" class="ln">  2578&nbsp;&nbsp;</span>		return f.Offset + f.Typ.PtrBytes
<span id="L2579" class="ln">  2579&nbsp;&nbsp;</span>
<span id="L2580" class="ln">  2580&nbsp;&nbsp;</span>	default:
<span id="L2581" class="ln">  2581&nbsp;&nbsp;</span>		panic(&#34;reflect.typeptrdata: unexpected type, &#34; + stringFor(t))
<span id="L2582" class="ln">  2582&nbsp;&nbsp;</span>	}
<span id="L2583" class="ln">  2583&nbsp;&nbsp;</span>}
<span id="L2584" class="ln">  2584&nbsp;&nbsp;</span>
<span id="L2585" class="ln">  2585&nbsp;&nbsp;</span><span class="comment">// See cmd/compile/internal/reflectdata/reflect.go for derivation of constant.</span>
<span id="L2586" class="ln">  2586&nbsp;&nbsp;</span>const maxPtrmaskBytes = 2048
<span id="L2587" class="ln">  2587&nbsp;&nbsp;</span>
<span id="L2588" class="ln">  2588&nbsp;&nbsp;</span><span class="comment">// ArrayOf returns the array type with the given length and element type.</span>
<span id="L2589" class="ln">  2589&nbsp;&nbsp;</span><span class="comment">// For example, if t represents int, ArrayOf(5, t) represents [5]int.</span>
<span id="L2590" class="ln">  2590&nbsp;&nbsp;</span><span class="comment">//</span>
<span id="L2591" class="ln">  2591&nbsp;&nbsp;</span><span class="comment">// If the resulting type would be larger than the available address space,</span>
<span id="L2592" class="ln">  2592&nbsp;&nbsp;</span><span class="comment">// ArrayOf panics.</span>
<span id="L2593" class="ln">  2593&nbsp;&nbsp;</span>func ArrayOf(length int, elem Type) Type {
<span id="L2594" class="ln">  2594&nbsp;&nbsp;</span>	if length &lt; 0 {
<span id="L2595" class="ln">  2595&nbsp;&nbsp;</span>		panic(&#34;reflect: negative length passed to ArrayOf&#34;)
<span id="L2596" class="ln">  2596&nbsp;&nbsp;</span>	}
<span id="L2597" class="ln">  2597&nbsp;&nbsp;</span>
<span id="L2598" class="ln">  2598&nbsp;&nbsp;</span>	typ := elem.common()
<span id="L2599" class="ln">  2599&nbsp;&nbsp;</span>
<span id="L2600" class="ln">  2600&nbsp;&nbsp;</span>	<span class="comment">// Look in cache.</span>
<span id="L2601" class="ln">  2601&nbsp;&nbsp;</span>	ckey := cacheKey{Array, typ, nil, uintptr(length)}
<span id="L2602" class="ln">  2602&nbsp;&nbsp;</span>	if array, ok := lookupCache.Load(ckey); ok {
<span id="L2603" class="ln">  2603&nbsp;&nbsp;</span>		return array.(Type)
<span id="L2604" class="ln">  2604&nbsp;&nbsp;</span>	}
<span id="L2605" class="ln">  2605&nbsp;&nbsp;</span>
<span id="L2606" class="ln">  2606&nbsp;&nbsp;</span>	<span class="comment">// Look in known types.</span>
<span id="L2607" class="ln">  2607&nbsp;&nbsp;</span>	s := &#34;[&#34; + strconv.Itoa(length) + &#34;]&#34; + stringFor(typ)
<span id="L2608" class="ln">  2608&nbsp;&nbsp;</span>	for _, tt := range typesByString(s) {
<span id="L2609" class="ln">  2609&nbsp;&nbsp;</span>		array := (*arrayType)(unsafe.Pointer(tt))
<span id="L2610" class="ln">  2610&nbsp;&nbsp;</span>		if array.Elem == typ {
<span id="L2611" class="ln">  2611&nbsp;&nbsp;</span>			ti, _ := lookupCache.LoadOrStore(ckey, toRType(tt))
<span id="L2612" class="ln">  2612&nbsp;&nbsp;</span>			return ti.(Type)
<span id="L2613" class="ln">  2613&nbsp;&nbsp;</span>		}
<span id="L2614" class="ln">  2614&nbsp;&nbsp;</span>	}
<span id="L2615" class="ln">  2615&nbsp;&nbsp;</span>
<span id="L2616" class="ln">  2616&nbsp;&nbsp;</span>	<span class="comment">// Make an array type.</span>
<span id="L2617" class="ln">  2617&nbsp;&nbsp;</span>	var iarray any = [1]unsafe.Pointer{}
<span id="L2618" class="ln">  2618&nbsp;&nbsp;</span>	prototype := *(**arrayType)(unsafe.Pointer(&amp;iarray))
<span id="L2619" class="ln">  2619&nbsp;&nbsp;</span>	array := *prototype
<span id="L2620" class="ln">  2620&nbsp;&nbsp;</span>	array.TFlag = typ.TFlag &amp; abi.TFlagRegularMemory
<span id="L2621" class="ln">  2621&nbsp;&nbsp;</span>	array.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L2622" class="ln">  2622&nbsp;&nbsp;</span>	array.Hash = fnv1(typ.Hash, &#39;[&#39;)
<span id="L2623" class="ln">  2623&nbsp;&nbsp;</span>	for n := uint32(length); n &gt; 0; n &gt;&gt;= 8 {
<span id="L2624" class="ln">  2624&nbsp;&nbsp;</span>		array.Hash = fnv1(array.Hash, byte(n))
<span id="L2625" class="ln">  2625&nbsp;&nbsp;</span>	}
<span id="L2626" class="ln">  2626&nbsp;&nbsp;</span>	array.Hash = fnv1(array.Hash, &#39;]&#39;)
<span id="L2627" class="ln">  2627&nbsp;&nbsp;</span>	array.Elem = typ
<span id="L2628" class="ln">  2628&nbsp;&nbsp;</span>	array.PtrToThis = 0
<span id="L2629" class="ln">  2629&nbsp;&nbsp;</span>	if typ.Size_ &gt; 0 {
<span id="L2630" class="ln">  2630&nbsp;&nbsp;</span>		max := ^uintptr(0) / typ.Size_
<span id="L2631" class="ln">  2631&nbsp;&nbsp;</span>		if uintptr(length) &gt; max {
<span id="L2632" class="ln">  2632&nbsp;&nbsp;</span>			panic(&#34;reflect.ArrayOf: array size would exceed virtual address space&#34;)
<span id="L2633" class="ln">  2633&nbsp;&nbsp;</span>		}
<span id="L2634" class="ln">  2634&nbsp;&nbsp;</span>	}
<span id="L2635" class="ln">  2635&nbsp;&nbsp;</span>	array.Size_ = typ.Size_ * uintptr(length)
<span id="L2636" class="ln">  2636&nbsp;&nbsp;</span>	if length &gt; 0 &amp;&amp; typ.PtrBytes != 0 {
<span id="L2637" class="ln">  2637&nbsp;&nbsp;</span>		array.PtrBytes = typ.Size_*uintptr(length-1) + typ.PtrBytes
<span id="L2638" class="ln">  2638&nbsp;&nbsp;</span>	}
<span id="L2639" class="ln">  2639&nbsp;&nbsp;</span>	array.Align_ = typ.Align_
<span id="L2640" class="ln">  2640&nbsp;&nbsp;</span>	array.FieldAlign_ = typ.FieldAlign_
<span id="L2641" class="ln">  2641&nbsp;&nbsp;</span>	array.Len = uintptr(length)
<span id="L2642" class="ln">  2642&nbsp;&nbsp;</span>	array.Slice = &amp;(SliceOf(elem).(*rtype).t)
<span id="L2643" class="ln">  2643&nbsp;&nbsp;</span>
<span id="L2644" class="ln">  2644&nbsp;&nbsp;</span>	switch {
<span id="L2645" class="ln">  2645&nbsp;&nbsp;</span>	case typ.PtrBytes == 0 || array.Size_ == 0:
<span id="L2646" class="ln">  2646&nbsp;&nbsp;</span>		<span class="comment">// No pointers.</span>
<span id="L2647" class="ln">  2647&nbsp;&nbsp;</span>		array.GCData = nil
<span id="L2648" class="ln">  2648&nbsp;&nbsp;</span>		array.PtrBytes = 0
<span id="L2649" class="ln">  2649&nbsp;&nbsp;</span>
<span id="L2650" class="ln">  2650&nbsp;&nbsp;</span>	case length == 1:
<span id="L2651" class="ln">  2651&nbsp;&nbsp;</span>		<span class="comment">// In memory, 1-element array looks just like the element.</span>
<span id="L2652" class="ln">  2652&nbsp;&nbsp;</span>		array.Kind_ |= typ.Kind_ &amp; kindGCProg
<span id="L2653" class="ln">  2653&nbsp;&nbsp;</span>		array.GCData = typ.GCData
<span id="L2654" class="ln">  2654&nbsp;&nbsp;</span>		array.PtrBytes = typ.PtrBytes
<span id="L2655" class="ln">  2655&nbsp;&nbsp;</span>
<span id="L2656" class="ln">  2656&nbsp;&nbsp;</span>	case typ.Kind_&amp;kindGCProg == 0 &amp;&amp; array.Size_ &lt;= maxPtrmaskBytes*8*goarch.PtrSize:
<span id="L2657" class="ln">  2657&nbsp;&nbsp;</span>		<span class="comment">// Element is small with pointer mask; array is still small.</span>
<span id="L2658" class="ln">  2658&nbsp;&nbsp;</span>		<span class="comment">// Create direct pointer mask by turning each 1 bit in elem</span>
<span id="L2659" class="ln">  2659&nbsp;&nbsp;</span>		<span class="comment">// into length 1 bits in larger mask.</span>
<span id="L2660" class="ln">  2660&nbsp;&nbsp;</span>		n := (array.PtrBytes/goarch.PtrSize + 7) / 8
<span id="L2661" class="ln">  2661&nbsp;&nbsp;</span>		<span class="comment">// Runtime needs pointer masks to be a multiple of uintptr in size.</span>
<span id="L2662" class="ln">  2662&nbsp;&nbsp;</span>		n = (n + goarch.PtrSize - 1) &amp;^ (goarch.PtrSize - 1)
<span id="L2663" class="ln">  2663&nbsp;&nbsp;</span>		mask := make([]byte, n)
<span id="L2664" class="ln">  2664&nbsp;&nbsp;</span>		emitGCMask(mask, 0, typ, array.Len)
<span id="L2665" class="ln">  2665&nbsp;&nbsp;</span>		array.GCData = &amp;mask[0]
<span id="L2666" class="ln">  2666&nbsp;&nbsp;</span>
<span id="L2667" class="ln">  2667&nbsp;&nbsp;</span>	default:
<span id="L2668" class="ln">  2668&nbsp;&nbsp;</span>		<span class="comment">// Create program that emits one element</span>
<span id="L2669" class="ln">  2669&nbsp;&nbsp;</span>		<span class="comment">// and then repeats to make the array.</span>
<span id="L2670" class="ln">  2670&nbsp;&nbsp;</span>		prog := []byte{0, 0, 0, 0} <span class="comment">// will be length of prog</span>
<span id="L2671" class="ln">  2671&nbsp;&nbsp;</span>		prog = appendGCProg(prog, typ)
<span id="L2672" class="ln">  2672&nbsp;&nbsp;</span>		<span class="comment">// Pad from ptrdata to size.</span>
<span id="L2673" class="ln">  2673&nbsp;&nbsp;</span>		elemPtrs := typ.PtrBytes / goarch.PtrSize
<span id="L2674" class="ln">  2674&nbsp;&nbsp;</span>		elemWords := typ.Size_ / goarch.PtrSize
<span id="L2675" class="ln">  2675&nbsp;&nbsp;</span>		if elemPtrs &lt; elemWords {
<span id="L2676" class="ln">  2676&nbsp;&nbsp;</span>			<span class="comment">// Emit literal 0 bit, then repeat as needed.</span>
<span id="L2677" class="ln">  2677&nbsp;&nbsp;</span>			prog = append(prog, 0x01, 0x00)
<span id="L2678" class="ln">  2678&nbsp;&nbsp;</span>			if elemPtrs+1 &lt; elemWords {
<span id="L2679" class="ln">  2679&nbsp;&nbsp;</span>				prog = append(prog, 0x81)
<span id="L2680" class="ln">  2680&nbsp;&nbsp;</span>				prog = appendVarint(prog, elemWords-elemPtrs-1)
<span id="L2681" class="ln">  2681&nbsp;&nbsp;</span>			}
<span id="L2682" class="ln">  2682&nbsp;&nbsp;</span>		}
<span id="L2683" class="ln">  2683&nbsp;&nbsp;</span>		<span class="comment">// Repeat length-1 times.</span>
<span id="L2684" class="ln">  2684&nbsp;&nbsp;</span>		if elemWords &lt; 0x80 {
<span id="L2685" class="ln">  2685&nbsp;&nbsp;</span>			prog = append(prog, byte(elemWords|0x80))
<span id="L2686" class="ln">  2686&nbsp;&nbsp;</span>		} else {
<span id="L2687" class="ln">  2687&nbsp;&nbsp;</span>			prog = append(prog, 0x80)
<span id="L2688" class="ln">  2688&nbsp;&nbsp;</span>			prog = appendVarint(prog, elemWords)
<span id="L2689" class="ln">  2689&nbsp;&nbsp;</span>		}
<span id="L2690" class="ln">  2690&nbsp;&nbsp;</span>		prog = appendVarint(prog, uintptr(length)-1)
<span id="L2691" class="ln">  2691&nbsp;&nbsp;</span>		prog = append(prog, 0)
<span id="L2692" class="ln">  2692&nbsp;&nbsp;</span>		*(*uint32)(unsafe.Pointer(&amp;prog[0])) = uint32(len(prog) - 4)
<span id="L2693" class="ln">  2693&nbsp;&nbsp;</span>		array.Kind_ |= kindGCProg
<span id="L2694" class="ln">  2694&nbsp;&nbsp;</span>		array.GCData = &amp;prog[0]
<span id="L2695" class="ln">  2695&nbsp;&nbsp;</span>		array.PtrBytes = array.Size_ <span class="comment">// overestimate but ok; must match program</span>
<span id="L2696" class="ln">  2696&nbsp;&nbsp;</span>	}
<span id="L2697" class="ln">  2697&nbsp;&nbsp;</span>
<span id="L2698" class="ln">  2698&nbsp;&nbsp;</span>	etyp := typ
<span id="L2699" class="ln">  2699&nbsp;&nbsp;</span>	esize := etyp.Size()
<span id="L2700" class="ln">  2700&nbsp;&nbsp;</span>
<span id="L2701" class="ln">  2701&nbsp;&nbsp;</span>	array.Equal = nil
<span id="L2702" class="ln">  2702&nbsp;&nbsp;</span>	if eequal := etyp.Equal; eequal != nil {
<span id="L2703" class="ln">  2703&nbsp;&nbsp;</span>		array.Equal = func(p, q unsafe.Pointer) bool {
<span id="L2704" class="ln">  2704&nbsp;&nbsp;</span>			for i := 0; i &lt; length; i++ {
<span id="L2705" class="ln">  2705&nbsp;&nbsp;</span>				pi := arrayAt(p, i, esize, &#34;i &lt; length&#34;)
<span id="L2706" class="ln">  2706&nbsp;&nbsp;</span>				qi := arrayAt(q, i, esize, &#34;i &lt; length&#34;)
<span id="L2707" class="ln">  2707&nbsp;&nbsp;</span>				if !eequal(pi, qi) {
<span id="L2708" class="ln">  2708&nbsp;&nbsp;</span>					return false
<span id="L2709" class="ln">  2709&nbsp;&nbsp;</span>				}
<span id="L2710" class="ln">  2710&nbsp;&nbsp;</span>
<span id="L2711" class="ln">  2711&nbsp;&nbsp;</span>			}
<span id="L2712" class="ln">  2712&nbsp;&nbsp;</span>			return true
<span id="L2713" class="ln">  2713&nbsp;&nbsp;</span>		}
<span id="L2714" class="ln">  2714&nbsp;&nbsp;</span>	}
<span id="L2715" class="ln">  2715&nbsp;&nbsp;</span>
<span id="L2716" class="ln">  2716&nbsp;&nbsp;</span>	switch {
<span id="L2717" class="ln">  2717&nbsp;&nbsp;</span>	case length == 1 &amp;&amp; !ifaceIndir(typ):
<span id="L2718" class="ln">  2718&nbsp;&nbsp;</span>		<span class="comment">// array of 1 direct iface type can be direct</span>
<span id="L2719" class="ln">  2719&nbsp;&nbsp;</span>		array.Kind_ |= kindDirectIface
<span id="L2720" class="ln">  2720&nbsp;&nbsp;</span>	default:
<span id="L2721" class="ln">  2721&nbsp;&nbsp;</span>		array.Kind_ &amp;^= kindDirectIface
<span id="L2722" class="ln">  2722&nbsp;&nbsp;</span>	}
<span id="L2723" class="ln">  2723&nbsp;&nbsp;</span>
<span id="L2724" class="ln">  2724&nbsp;&nbsp;</span>	ti, _ := lookupCache.LoadOrStore(ckey, toRType(&amp;array.Type))
<span id="L2725" class="ln">  2725&nbsp;&nbsp;</span>	return ti.(Type)
<span id="L2726" class="ln">  2726&nbsp;&nbsp;</span>}
<span id="L2727" class="ln">  2727&nbsp;&nbsp;</span>
<span id="L2728" class="ln">  2728&nbsp;&nbsp;</span>func appendVarint(x []byte, v uintptr) []byte {
<span id="L2729" class="ln">  2729&nbsp;&nbsp;</span>	for ; v &gt;= 0x80; v &gt;&gt;= 7 {
<span id="L2730" class="ln">  2730&nbsp;&nbsp;</span>		x = append(x, byte(v|0x80))
<span id="L2731" class="ln">  2731&nbsp;&nbsp;</span>	}
<span id="L2732" class="ln">  2732&nbsp;&nbsp;</span>	x = append(x, byte(v))
<span id="L2733" class="ln">  2733&nbsp;&nbsp;</span>	return x
<span id="L2734" class="ln">  2734&nbsp;&nbsp;</span>}
<span id="L2735" class="ln">  2735&nbsp;&nbsp;</span>
<span id="L2736" class="ln">  2736&nbsp;&nbsp;</span><span class="comment">// toType converts from a *rtype to a Type that can be returned</span>
<span id="L2737" class="ln">  2737&nbsp;&nbsp;</span><span class="comment">// to the client of package reflect. In gc, the only concern is that</span>
<span id="L2738" class="ln">  2738&nbsp;&nbsp;</span><span class="comment">// a nil *rtype must be replaced by a nil Type, but in gccgo this</span>
<span id="L2739" class="ln">  2739&nbsp;&nbsp;</span><span class="comment">// function takes care of ensuring that multiple *rtype for the same</span>
<span id="L2740" class="ln">  2740&nbsp;&nbsp;</span><span class="comment">// type are coalesced into a single Type.</span>
<span id="L2741" class="ln">  2741&nbsp;&nbsp;</span>func toType(t *abi.Type) Type {
<span id="L2742" class="ln">  2742&nbsp;&nbsp;</span>	if t == nil {
<span id="L2743" class="ln">  2743&nbsp;&nbsp;</span>		return nil
<span id="L2744" class="ln">  2744&nbsp;&nbsp;</span>	}
<span id="L2745" class="ln">  2745&nbsp;&nbsp;</span>	return toRType(t)
<span id="L2746" class="ln">  2746&nbsp;&nbsp;</span>}
<span id="L2747" class="ln">  2747&nbsp;&nbsp;</span>
<span id="L2748" class="ln">  2748&nbsp;&nbsp;</span>type layoutKey struct {
<span id="L2749" class="ln">  2749&nbsp;&nbsp;</span>	ftyp *funcType <span class="comment">// function signature</span>
<span id="L2750" class="ln">  2750&nbsp;&nbsp;</span>	rcvr *abi.Type <span class="comment">// receiver type, or nil if none</span>
<span id="L2751" class="ln">  2751&nbsp;&nbsp;</span>}
<span id="L2752" class="ln">  2752&nbsp;&nbsp;</span>
<span id="L2753" class="ln">  2753&nbsp;&nbsp;</span>type layoutType struct {
<span id="L2754" class="ln">  2754&nbsp;&nbsp;</span>	t         *abi.Type
<span id="L2755" class="ln">  2755&nbsp;&nbsp;</span>	framePool *sync.Pool
<span id="L2756" class="ln">  2756&nbsp;&nbsp;</span>	abid      abiDesc
<span id="L2757" class="ln">  2757&nbsp;&nbsp;</span>}
<span id="L2758" class="ln">  2758&nbsp;&nbsp;</span>
<span id="L2759" class="ln">  2759&nbsp;&nbsp;</span>var layoutCache sync.Map <span class="comment">// map[layoutKey]layoutType</span>
<span id="L2760" class="ln">  2760&nbsp;&nbsp;</span>
<span id="L2761" class="ln">  2761&nbsp;&nbsp;</span><span class="comment">// funcLayout computes a struct type representing the layout of the</span>
<span id="L2762" class="ln">  2762&nbsp;&nbsp;</span><span class="comment">// stack-assigned function arguments and return values for the function</span>
<span id="L2763" class="ln">  2763&nbsp;&nbsp;</span><span class="comment">// type t.</span>
<span id="L2764" class="ln">  2764&nbsp;&nbsp;</span><span class="comment">// If rcvr != nil, rcvr specifies the type of the receiver.</span>
<span id="L2765" class="ln">  2765&nbsp;&nbsp;</span><span class="comment">// The returned type exists only for GC, so we only fill out GC relevant info.</span>
<span id="L2766" class="ln">  2766&nbsp;&nbsp;</span><span class="comment">// Currently, that&#39;s just size and the GC program. We also fill in</span>
<span id="L2767" class="ln">  2767&nbsp;&nbsp;</span><span class="comment">// the name for possible debugging use.</span>
<span id="L2768" class="ln">  2768&nbsp;&nbsp;</span>func funcLayout(t *funcType, rcvr *abi.Type) (frametype *abi.Type, framePool *sync.Pool, abid abiDesc) {
<span id="L2769" class="ln">  2769&nbsp;&nbsp;</span>	if t.Kind() != abi.Func {
<span id="L2770" class="ln">  2770&nbsp;&nbsp;</span>		panic(&#34;reflect: funcLayout of non-func type &#34; + stringFor(&amp;t.Type))
<span id="L2771" class="ln">  2771&nbsp;&nbsp;</span>	}
<span id="L2772" class="ln">  2772&nbsp;&nbsp;</span>	if rcvr != nil &amp;&amp; rcvr.Kind() == abi.Interface {
<span id="L2773" class="ln">  2773&nbsp;&nbsp;</span>		panic(&#34;reflect: funcLayout with interface receiver &#34; + stringFor(rcvr))
<span id="L2774" class="ln">  2774&nbsp;&nbsp;</span>	}
<span id="L2775" class="ln">  2775&nbsp;&nbsp;</span>	k := layoutKey{t, rcvr}
<span id="L2776" class="ln">  2776&nbsp;&nbsp;</span>	if lti, ok := layoutCache.Load(k); ok {
<span id="L2777" class="ln">  2777&nbsp;&nbsp;</span>		lt := lti.(layoutType)
<span id="L2778" class="ln">  2778&nbsp;&nbsp;</span>		return lt.t, lt.framePool, lt.abid
<span id="L2779" class="ln">  2779&nbsp;&nbsp;</span>	}
<span id="L2780" class="ln">  2780&nbsp;&nbsp;</span>
<span id="L2781" class="ln">  2781&nbsp;&nbsp;</span>	<span class="comment">// Compute the ABI layout.</span>
<span id="L2782" class="ln">  2782&nbsp;&nbsp;</span>	abid = newAbiDesc(t, rcvr)
<span id="L2783" class="ln">  2783&nbsp;&nbsp;</span>
<span id="L2784" class="ln">  2784&nbsp;&nbsp;</span>	<span class="comment">// build dummy rtype holding gc program</span>
<span id="L2785" class="ln">  2785&nbsp;&nbsp;</span>	x := &amp;abi.Type{
<span id="L2786" class="ln">  2786&nbsp;&nbsp;</span>		Align_: goarch.PtrSize,
<span id="L2787" class="ln">  2787&nbsp;&nbsp;</span>		<span class="comment">// Don&#39;t add spill space here; it&#39;s only necessary in</span>
<span id="L2788" class="ln">  2788&nbsp;&nbsp;</span>		<span class="comment">// reflectcall&#39;s frame, not in the allocated frame.</span>
<span id="L2789" class="ln">  2789&nbsp;&nbsp;</span>		<span class="comment">// TODO(mknyszek): Remove this comment when register</span>
<span id="L2790" class="ln">  2790&nbsp;&nbsp;</span>		<span class="comment">// spill space in the frame is no longer required.</span>
<span id="L2791" class="ln">  2791&nbsp;&nbsp;</span>		Size_:    align(abid.retOffset+abid.ret.stackBytes, goarch.PtrSize),
<span id="L2792" class="ln">  2792&nbsp;&nbsp;</span>		PtrBytes: uintptr(abid.stackPtrs.n) * goarch.PtrSize,
<span id="L2793" class="ln">  2793&nbsp;&nbsp;</span>	}
<span id="L2794" class="ln">  2794&nbsp;&nbsp;</span>	if abid.stackPtrs.n &gt; 0 {
<span id="L2795" class="ln">  2795&nbsp;&nbsp;</span>		x.GCData = &amp;abid.stackPtrs.data[0]
<span id="L2796" class="ln">  2796&nbsp;&nbsp;</span>	}
<span id="L2797" class="ln">  2797&nbsp;&nbsp;</span>
<span id="L2798" class="ln">  2798&nbsp;&nbsp;</span>	var s string
<span id="L2799" class="ln">  2799&nbsp;&nbsp;</span>	if rcvr != nil {
<span id="L2800" class="ln">  2800&nbsp;&nbsp;</span>		s = &#34;methodargs(&#34; + stringFor(rcvr) + &#34;)(&#34; + stringFor(&amp;t.Type) + &#34;)&#34;
<span id="L2801" class="ln">  2801&nbsp;&nbsp;</span>	} else {
<span id="L2802" class="ln">  2802&nbsp;&nbsp;</span>		s = &#34;funcargs(&#34; + stringFor(&amp;t.Type) + &#34;)&#34;
<span id="L2803" class="ln">  2803&nbsp;&nbsp;</span>	}
<span id="L2804" class="ln">  2804&nbsp;&nbsp;</span>	x.Str = resolveReflectName(newName(s, &#34;&#34;, false, false))
<span id="L2805" class="ln">  2805&nbsp;&nbsp;</span>
<span id="L2806" class="ln">  2806&nbsp;&nbsp;</span>	<span class="comment">// cache result for future callers</span>
<span id="L2807" class="ln">  2807&nbsp;&nbsp;</span>	framePool = &amp;sync.Pool{New: func() any {
<span id="L2808" class="ln">  2808&nbsp;&nbsp;</span>		return unsafe_New(x)
<span id="L2809" class="ln">  2809&nbsp;&nbsp;</span>	}}
<span id="L2810" class="ln">  2810&nbsp;&nbsp;</span>	lti, _ := layoutCache.LoadOrStore(k, layoutType{
<span id="L2811" class="ln">  2811&nbsp;&nbsp;</span>		t:         x,
<span id="L2812" class="ln">  2812&nbsp;&nbsp;</span>		framePool: framePool,
<span id="L2813" class="ln">  2813&nbsp;&nbsp;</span>		abid:      abid,
<span id="L2814" class="ln">  2814&nbsp;&nbsp;</span>	})
<span id="L2815" class="ln">  2815&nbsp;&nbsp;</span>	lt := lti.(layoutType)
<span id="L2816" class="ln">  2816&nbsp;&nbsp;</span>	return lt.t, lt.framePool, lt.abid
<span id="L2817" class="ln">  2817&nbsp;&nbsp;</span>}
<span id="L2818" class="ln">  2818&nbsp;&nbsp;</span>
<span id="L2819" class="ln">  2819&nbsp;&nbsp;</span><span class="comment">// ifaceIndir reports whether t is stored indirectly in an interface value.</span>
<span id="L2820" class="ln">  2820&nbsp;&nbsp;</span>func ifaceIndir(t *abi.Type) bool {
<span id="L2821" class="ln">  2821&nbsp;&nbsp;</span>	return t.Kind_&amp;kindDirectIface == 0
<span id="L2822" class="ln">  2822&nbsp;&nbsp;</span>}
<span id="L2823" class="ln">  2823&nbsp;&nbsp;</span>
<span id="L2824" class="ln">  2824&nbsp;&nbsp;</span><span class="comment">// Note: this type must agree with runtime.bitvector.</span>
<span id="L2825" class="ln">  2825&nbsp;&nbsp;</span>type bitVector struct {
<span id="L2826" class="ln">  2826&nbsp;&nbsp;</span>	n    uint32 <span class="comment">// number of bits</span>
<span id="L2827" class="ln">  2827&nbsp;&nbsp;</span>	data []byte
<span id="L2828" class="ln">  2828&nbsp;&nbsp;</span>}
<span id="L2829" class="ln">  2829&nbsp;&nbsp;</span>
<span id="L2830" class="ln">  2830&nbsp;&nbsp;</span><span class="comment">// append a bit to the bitmap.</span>
<span id="L2831" class="ln">  2831&nbsp;&nbsp;</span>func (bv *bitVector) append(bit uint8) {
<span id="L2832" class="ln">  2832&nbsp;&nbsp;</span>	if bv.n%(8*goarch.PtrSize) == 0 {
<span id="L2833" class="ln">  2833&nbsp;&nbsp;</span>		<span class="comment">// Runtime needs pointer masks to be a multiple of uintptr in size.</span>
<span id="L2834" class="ln">  2834&nbsp;&nbsp;</span>		<span class="comment">// Since reflect passes bv.data directly to the runtime as a pointer mask,</span>
<span id="L2835" class="ln">  2835&nbsp;&nbsp;</span>		<span class="comment">// we append a full uintptr of zeros at a time.</span>
<span id="L2836" class="ln">  2836&nbsp;&nbsp;</span>		for i := 0; i &lt; goarch.PtrSize; i++ {
<span id="L2837" class="ln">  2837&nbsp;&nbsp;</span>			bv.data = append(bv.data, 0)
<span id="L2838" class="ln">  2838&nbsp;&nbsp;</span>		}
<span id="L2839" class="ln">  2839&nbsp;&nbsp;</span>	}
<span id="L2840" class="ln">  2840&nbsp;&nbsp;</span>	bv.data[bv.n/8] |= bit &lt;&lt; (bv.n % 8)
<span id="L2841" class="ln">  2841&nbsp;&nbsp;</span>	bv.n++
<span id="L2842" class="ln">  2842&nbsp;&nbsp;</span>}
<span id="L2843" class="ln">  2843&nbsp;&nbsp;</span>
<span id="L2844" class="ln">  2844&nbsp;&nbsp;</span>func addTypeBits(bv *bitVector, offset uintptr, t *abi.Type) {
<span id="L2845" class="ln">  2845&nbsp;&nbsp;</span>	if t.PtrBytes == 0 {
<span id="L2846" class="ln">  2846&nbsp;&nbsp;</span>		return
<span id="L2847" class="ln">  2847&nbsp;&nbsp;</span>	}
<span id="L2848" class="ln">  2848&nbsp;&nbsp;</span>
<span id="L2849" class="ln">  2849&nbsp;&nbsp;</span>	switch Kind(t.Kind_ &amp; kindMask) {
<span id="L2850" class="ln">  2850&nbsp;&nbsp;</span>	case Chan, Func, Map, Pointer, Slice, String, UnsafePointer:
<span id="L2851" class="ln">  2851&nbsp;&nbsp;</span>		<span class="comment">// 1 pointer at start of representation</span>
<span id="L2852" class="ln">  2852&nbsp;&nbsp;</span>		for bv.n &lt; uint32(offset/uintptr(goarch.PtrSize)) {
<span id="L2853" class="ln">  2853&nbsp;&nbsp;</span>			bv.append(0)
<span id="L2854" class="ln">  2854&nbsp;&nbsp;</span>		}
<span id="L2855" class="ln">  2855&nbsp;&nbsp;</span>		bv.append(1)
<span id="L2856" class="ln">  2856&nbsp;&nbsp;</span>
<span id="L2857" class="ln">  2857&nbsp;&nbsp;</span>	case Interface:
<span id="L2858" class="ln">  2858&nbsp;&nbsp;</span>		<span class="comment">// 2 pointers</span>
<span id="L2859" class="ln">  2859&nbsp;&nbsp;</span>		for bv.n &lt; uint32(offset/uintptr(goarch.PtrSize)) {
<span id="L2860" class="ln">  2860&nbsp;&nbsp;</span>			bv.append(0)
<span id="L2861" class="ln">  2861&nbsp;&nbsp;</span>		}
<span id="L2862" class="ln">  2862&nbsp;&nbsp;</span>		bv.append(1)
<span id="L2863" class="ln">  2863&nbsp;&nbsp;</span>		bv.append(1)
<span id="L2864" class="ln">  2864&nbsp;&nbsp;</span>
<span id="L2865" class="ln">  2865&nbsp;&nbsp;</span>	case Array:
<span id="L2866" class="ln">  2866&nbsp;&nbsp;</span>		<span class="comment">// repeat inner type</span>
<span id="L2867" class="ln">  2867&nbsp;&nbsp;</span>		tt := (*arrayType)(unsafe.Pointer(t))
<span id="L2868" class="ln">  2868&nbsp;&nbsp;</span>		for i := 0; i &lt; int(tt.Len); i++ {
<span id="L2869" class="ln">  2869&nbsp;&nbsp;</span>			addTypeBits(bv, offset+uintptr(i)*tt.Elem.Size_, tt.Elem)
<span id="L2870" class="ln">  2870&nbsp;&nbsp;</span>		}
<span id="L2871" class="ln">  2871&nbsp;&nbsp;</span>
<span id="L2872" class="ln">  2872&nbsp;&nbsp;</span>	case Struct:
<span id="L2873" class="ln">  2873&nbsp;&nbsp;</span>		<span class="comment">// apply fields</span>
<span id="L2874" class="ln">  2874&nbsp;&nbsp;</span>		tt := (*structType)(unsafe.Pointer(t))
<span id="L2875" class="ln">  2875&nbsp;&nbsp;</span>		for i := range tt.Fields {
<span id="L2876" class="ln">  2876&nbsp;&nbsp;</span>			f := &amp;tt.Fields[i]
<span id="L2877" class="ln">  2877&nbsp;&nbsp;</span>			addTypeBits(bv, offset+f.Offset, f.Typ)
<span id="L2878" class="ln">  2878&nbsp;&nbsp;</span>		}
<span id="L2879" class="ln">  2879&nbsp;&nbsp;</span>	}
<span id="L2880" class="ln">  2880&nbsp;&nbsp;</span>}
<span id="L2881" class="ln">  2881&nbsp;&nbsp;</span>
<span id="L2882" class="ln">  2882&nbsp;&nbsp;</span><span class="comment">// TypeFor returns the [Type] that represents the type argument T.</span>
<span id="L2883" class="ln">  2883&nbsp;&nbsp;</span>func TypeFor[T any]() Type {
<span id="L2884" class="ln">  2884&nbsp;&nbsp;</span>	return TypeOf((*T)(nil)).Elem()
<span id="L2885" class="ln">  2885&nbsp;&nbsp;</span>}
<span id="L2886" class="ln">  2886&nbsp;&nbsp;</span>
</pre><p><a href="type.go?m=text">View as plain text</a></p>

<div id="footer">
Build version go1.22.2.<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:8080/LICENSE">BSD license</a>.<br>
<a href="https://golang.org/doc/tos.html">Terms of Service</a> |
<a href="https://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->
</body>
</html>
